fn src::avl::height(_1: *mut src::avl::Node) -> i32 {
    debug N => _1;                       // in scope 0 at workspace/avl/src/avl.rs:18:33: 18:38
    let mut _0: i32;                     // return place in scope 0 at workspace/avl/src/avl.rs:18:54: 18:57
    let mut _2: bool;                    // in scope 0 at workspace/avl/src/avl.rs:19:8: 19:19
    let mut _3: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:19:8: 19:9

    bb0: {
        _3 = _1;                         // scope 0 at workspace/avl/src/avl.rs:19:8: 19:9
        _2 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _3) -> bb1; // scope 0 at workspace/avl/src/avl.rs:19:8: 19:19
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:19:10: 19:17
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at workspace/avl/src/avl.rs:19:8: 19:19
    }

    bb2: {
        _0 = const 0_i32;                // scope 0 at workspace/avl/src/avl.rs:19:29: 19:30
        goto -> bb4;                     // scope 0 at no-location
    }

    bb3: {
        _0 = ((*_1).3: i32);             // scope 0 at workspace/avl/src/avl.rs:20:12: 20:23
        goto -> bb4;                     // scope 0 at workspace/avl/src/avl.rs:20:5: 20:23
    }

    bb4: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:21:2: 21:2
    }
}
fn src::avl::max(_1: i32, _2: i32) -> i32 {
    debug a => _1;                       // in scope 0 at workspace/avl/src/avl.rs:24:30: 24:35
    debug b => _2;                       // in scope 0 at workspace/avl/src/avl.rs:24:42: 24:47
    let mut _0: i32;                     // return place in scope 0 at workspace/avl/src/avl.rs:25:5: 25:8
    let mut _3: bool;                    // in scope 0 at workspace/avl/src/avl.rs:26:15: 26:20
    let mut _4: i32;                     // in scope 0 at workspace/avl/src/avl.rs:26:15: 26:16
    let mut _5: i32;                     // in scope 0 at workspace/avl/src/avl.rs:26:19: 26:20

    bb0: {
        _4 = _1;                         // scope 0 at workspace/avl/src/avl.rs:26:15: 26:16
        _5 = _2;                         // scope 0 at workspace/avl/src/avl.rs:26:19: 26:20
        _3 = Gt(move _4, move _5);       // scope 0 at workspace/avl/src/avl.rs:26:15: 26:20
        switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at workspace/avl/src/avl.rs:26:15: 26:20
    }

    bb1: {
        _0 = _1;                         // scope 0 at workspace/avl/src/avl.rs:26:23: 26:24
        goto -> bb3;                     // scope 0 at workspace/avl/src/avl.rs:26:12: 26:37
    }

    bb2: {
        _0 = _2;                         // scope 0 at workspace/avl/src/avl.rs:26:34: 26:35
        goto -> bb3;                     // scope 0 at workspace/avl/src/avl.rs:26:12: 26:37
    }

    bb3: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:27:2: 27:2
    }
}
fn src::avl::newNode(_1: i32) -> *mut src::avl::Node {
    debug key => _1;                     // in scope 0 at workspace/avl/src/avl.rs:30:34: 30:41
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:31:9: 31:17
    let mut _2: *mut libc::c_void;       // in scope 0 at workspace/avl/src/avl.rs:32:9: 32:53
    let mut _3: u64;                     // in scope 0 at workspace/avl/src/avl.rs:32:16: 32:52
    let mut _4: usize;                   // in scope 0 at workspace/avl/src/avl.rs:32:16: 32:45
    let mut _5: i32;                     // in scope 0 at workspace/avl/src/avl.rs:34:19: 34:22
    let mut _6: i32;                     // in scope 0 at workspace/avl/src/avl.rs:37:22: 37:30
    scope 1 {
        debug node => _0;                // in scope 1 at workspace/avl/src/avl.rs:31:9: 31:17
    }

    bb0: {
        _4 = std::mem::size_of::<src::avl::Node>() -> bb1; // scope 0 at workspace/avl/src/avl.rs:32:16: 32:45
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:32:16: 32:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::avl::Node>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4 as u64 (Misc);      // scope 0 at workspace/avl/src/avl.rs:32:16: 32:52
        _2 = src::avl::malloc(move _3) -> bb2; // scope 0 at workspace/avl/src/avl.rs:32:9: 32:53
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:32:9: 32:15
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::avl::malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = move _2 as *mut src::avl::Node (Misc); // scope 0 at workspace/avl/src/avl.rs:32:9: 33:22
        _5 = _1;                         // scope 1 at workspace/avl/src/avl.rs:34:19: 34:22
        ((*_0).0: i32) = move _5;        // scope 1 at workspace/avl/src/avl.rs:34:5: 34:22
        ((*_0).1: *mut src::avl::Node) = const 0_usize as *mut src::avl::Node (PointerFromExposedAddress); // scope 1 at workspace/avl/src/avl.rs:35:5: 35:34
        ((*_0).2: *mut src::avl::Node) = const 0_usize as *mut src::avl::Node (PointerFromExposedAddress); // scope 1 at workspace/avl/src/avl.rs:36:5: 36:35
        _6 = const 1_i32;                // scope 1 at workspace/avl/src/avl.rs:37:22: 37:23
        ((*_0).3: i32) = move _6;        // scope 1 at workspace/avl/src/avl.rs:37:5: 37:30
        return;                          // scope 0 at workspace/avl/src/avl.rs:39:2: 39:2
    }
}
fn src::avl::rightRotate(_1: *mut src::avl::Node) -> *mut src::avl::Node {
    debug y => _1;                       // in scope 0 at workspace/avl/src/avl.rs:44:38: 44:43
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:45:9: 45:14
    let mut _3: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:48:18: 48:19
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:49:17: 49:19
    let mut _5: i32;                     // in scope 0 at workspace/avl/src/avl.rs:52:9: 52:51
    let mut _6: i32;                     // in scope 0 at workspace/avl/src/avl.rs:52:13: 52:30
    let mut _7: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:52:20: 52:29
    let mut _8: i32;                     // in scope 0 at workspace/avl/src/avl.rs:52:32: 52:50
    let mut _9: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:52:39: 52:49
    let mut _10: i32;                    // in scope 0 at workspace/avl/src/avl.rs:52:54: 52:62
    let mut _11: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:52:9: 52:62
    let mut _12: i32;                    // in scope 0 at workspace/avl/src/avl.rs:54:9: 54:51
    let mut _13: i32;                    // in scope 0 at workspace/avl/src/avl.rs:54:13: 54:30
    let mut _14: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:54:20: 54:29
    let mut _15: i32;                    // in scope 0 at workspace/avl/src/avl.rs:54:32: 54:50
    let mut _16: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:54:39: 54:49
    let mut _17: i32;                    // in scope 0 at workspace/avl/src/avl.rs:54:54: 54:62
    let mut _18: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:54:9: 54:62
    scope 1 {
        debug x => _0;                   // in scope 1 at workspace/avl/src/avl.rs:45:9: 45:14
        let mut _2: *mut src::avl::Node; // in scope 1 at workspace/avl/src/avl.rs:46:9: 46:15
        scope 2 {
            debug T2 => _2;              // in scope 2 at workspace/avl/src/avl.rs:46:9: 46:15
        }
    }

    bb0: {
        _0 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:45:28: 45:37
        _2 = ((*_0).2: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:46:29: 46:39
        _3 = _1;                         // scope 2 at workspace/avl/src/avl.rs:48:18: 48:19
        ((*_0).2: *mut src::avl::Node) = move _3; // scope 2 at workspace/avl/src/avl.rs:48:5: 48:19
        _4 = _2;                         // scope 2 at workspace/avl/src/avl.rs:49:17: 49:19
        ((*_1).1: *mut src::avl::Node) = move _4; // scope 2 at workspace/avl/src/avl.rs:49:5: 49:19
        _7 = ((*_1).1: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:52:20: 52:29
        _6 = src::avl::height(move _7) -> bb1; // scope 2 at workspace/avl/src/avl.rs:52:13: 52:30
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:52:13: 52:19
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ((*_1).2: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:52:39: 52:49
        _8 = src::avl::height(move _9) -> bb2; // scope 2 at workspace/avl/src/avl.rs:52:32: 52:50
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:52:32: 52:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = src::avl::max(move _6, move _8) -> bb3; // scope 2 at workspace/avl/src/avl.rs:52:9: 52:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:52:9: 52:12
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const 1_i32;               // scope 2 at workspace/avl/src/avl.rs:52:54: 52:55
        _11 = CheckedAdd(_5, _10);       // scope 2 at workspace/avl/src/avl.rs:52:9: 52:62
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _10) -> bb4; // scope 2 at workspace/avl/src/avl.rs:52:9: 52:62
    }

    bb4: {
        ((*_1).3: i32) = move (_11.0: i32); // scope 2 at workspace/avl/src/avl.rs:51:5: 52:62
        _14 = ((*_0).1: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:54:20: 54:29
        _13 = src::avl::height(move _14) -> bb5; // scope 2 at workspace/avl/src/avl.rs:54:13: 54:30
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:54:13: 54:19
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = ((*_0).2: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:54:39: 54:49
        _15 = src::avl::height(move _16) -> bb6; // scope 2 at workspace/avl/src/avl.rs:54:32: 54:50
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:54:32: 54:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = src::avl::max(move _13, move _15) -> bb7; // scope 2 at workspace/avl/src/avl.rs:54:9: 54:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:54:9: 54:12
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = const 1_i32;               // scope 2 at workspace/avl/src/avl.rs:54:54: 54:55
        _18 = CheckedAdd(_12, _17);      // scope 2 at workspace/avl/src/avl.rs:54:9: 54:62
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, move _17) -> bb8; // scope 2 at workspace/avl/src/avl.rs:54:9: 54:62
    }

    bb8: {
        ((*_0).3: i32) = move (_18.0: i32); // scope 2 at workspace/avl/src/avl.rs:53:5: 54:62
        return;                          // scope 0 at workspace/avl/src/avl.rs:82:2: 82:2
    }
}
fn src::avl::leftRotate(_1: *mut src::avl::Node) -> *mut src::avl::Node {
    debug x => _1;                       // in scope 0 at workspace/avl/src/avl.rs:85:37: 85:42
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:86:9: 86:14
    let mut _3: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:89:17: 89:18
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:90:18: 90:20
    let mut _5: i32;                     // in scope 0 at workspace/avl/src/avl.rs:93:9: 93:51
    let mut _6: i32;                     // in scope 0 at workspace/avl/src/avl.rs:93:13: 93:30
    let mut _7: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:93:20: 93:29
    let mut _8: i32;                     // in scope 0 at workspace/avl/src/avl.rs:93:32: 93:50
    let mut _9: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:93:39: 93:49
    let mut _10: i32;                    // in scope 0 at workspace/avl/src/avl.rs:93:54: 93:62
    let mut _11: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:93:9: 93:62
    let mut _12: i32;                    // in scope 0 at workspace/avl/src/avl.rs:95:9: 95:51
    let mut _13: i32;                    // in scope 0 at workspace/avl/src/avl.rs:95:13: 95:30
    let mut _14: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:95:20: 95:29
    let mut _15: i32;                    // in scope 0 at workspace/avl/src/avl.rs:95:32: 95:50
    let mut _16: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:95:39: 95:49
    let mut _17: i32;                    // in scope 0 at workspace/avl/src/avl.rs:95:54: 95:62
    let mut _18: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:95:9: 95:62
    scope 1 {
        debug y => _0;                   // in scope 1 at workspace/avl/src/avl.rs:86:9: 86:14
        let mut _2: *mut src::avl::Node; // in scope 1 at workspace/avl/src/avl.rs:87:9: 87:15
        scope 2 {
            debug T2 => _2;              // in scope 2 at workspace/avl/src/avl.rs:87:9: 87:15
        }
    }

    bb0: {
        _0 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:86:28: 86:38
        _2 = ((*_0).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:87:29: 87:38
        _3 = _1;                         // scope 2 at workspace/avl/src/avl.rs:89:17: 89:18
        ((*_0).1: *mut src::avl::Node) = move _3; // scope 2 at workspace/avl/src/avl.rs:89:5: 89:18
        _4 = _2;                         // scope 2 at workspace/avl/src/avl.rs:90:18: 90:20
        ((*_1).2: *mut src::avl::Node) = move _4; // scope 2 at workspace/avl/src/avl.rs:90:5: 90:20
        _7 = ((*_1).1: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:93:20: 93:29
        _6 = src::avl::height(move _7) -> bb1; // scope 2 at workspace/avl/src/avl.rs:93:13: 93:30
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:93:13: 93:19
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ((*_1).2: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:93:39: 93:49
        _8 = src::avl::height(move _9) -> bb2; // scope 2 at workspace/avl/src/avl.rs:93:32: 93:50
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:93:32: 93:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = src::avl::max(move _6, move _8) -> bb3; // scope 2 at workspace/avl/src/avl.rs:93:9: 93:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:93:9: 93:12
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const 1_i32;               // scope 2 at workspace/avl/src/avl.rs:93:54: 93:55
        _11 = CheckedAdd(_5, _10);       // scope 2 at workspace/avl/src/avl.rs:93:9: 93:62
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _10) -> bb4; // scope 2 at workspace/avl/src/avl.rs:93:9: 93:62
    }

    bb4: {
        ((*_1).3: i32) = move (_11.0: i32); // scope 2 at workspace/avl/src/avl.rs:92:5: 93:62
        _14 = ((*_0).1: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:95:20: 95:29
        _13 = src::avl::height(move _14) -> bb5; // scope 2 at workspace/avl/src/avl.rs:95:13: 95:30
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:95:13: 95:19
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = ((*_0).2: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:95:39: 95:49
        _15 = src::avl::height(move _16) -> bb6; // scope 2 at workspace/avl/src/avl.rs:95:32: 95:50
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:95:32: 95:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = src::avl::max(move _13, move _15) -> bb7; // scope 2 at workspace/avl/src/avl.rs:95:9: 95:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:95:9: 95:12
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = const 1_i32;               // scope 2 at workspace/avl/src/avl.rs:95:54: 95:55
        _18 = CheckedAdd(_12, _17);      // scope 2 at workspace/avl/src/avl.rs:95:9: 95:62
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, move _17) -> bb8; // scope 2 at workspace/avl/src/avl.rs:95:9: 95:62
    }

    bb8: {
        ((*_0).3: i32) = move (_18.0: i32); // scope 2 at workspace/avl/src/avl.rs:94:5: 95:62
        return;                          // scope 0 at workspace/avl/src/avl.rs:98:2: 98:2
    }
}
fn src::avl::getBalance(_1: *mut src::avl::Node) -> i32 {
    debug N => _1;                       // in scope 0 at workspace/avl/src/avl.rs:100:37: 100:42
    let mut _0: i32;                     // return place in scope 0 at workspace/avl/src/avl.rs:100:58: 100:61
    let mut _2: bool;                    // in scope 0 at workspace/avl/src/avl.rs:101:8: 101:19
    let mut _3: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:101:8: 101:9
    let mut _4: i32;                     // in scope 0 at workspace/avl/src/avl.rs:102:12: 102:29
    let mut _5: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:102:19: 102:28
    let mut _6: i32;                     // in scope 0 at workspace/avl/src/avl.rs:102:32: 102:50
    let mut _7: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:102:39: 102:49
    let mut _8: (i32, bool);             // in scope 0 at workspace/avl/src/avl.rs:102:12: 102:50

    bb0: {
        _3 = _1;                         // scope 0 at workspace/avl/src/avl.rs:101:8: 101:9
        _2 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _3) -> bb1; // scope 0 at workspace/avl/src/avl.rs:101:8: 101:19
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:101:10: 101:17
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at workspace/avl/src/avl.rs:101:8: 101:19
    }

    bb2: {
        _0 = const 0_i32;                // scope 0 at workspace/avl/src/avl.rs:101:29: 101:30
        goto -> bb7;                     // scope 0 at no-location
    }

    bb3: {
        _5 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:102:19: 102:28
        _4 = src::avl::height(move _5) -> bb4; // scope 0 at workspace/avl/src/avl.rs:102:12: 102:29
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:102:12: 102:18
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:102:39: 102:49
        _6 = src::avl::height(move _7) -> bb5; // scope 0 at workspace/avl/src/avl.rs:102:32: 102:50
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:102:32: 102:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = CheckedSub(_4, _6);         // scope 0 at workspace/avl/src/avl.rs:102:12: 102:50
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _6) -> bb6; // scope 0 at workspace/avl/src/avl.rs:102:12: 102:50
    }

    bb6: {
        _0 = move (_8.0: i32);           // scope 0 at workspace/avl/src/avl.rs:102:12: 102:50
        goto -> bb7;                     // scope 0 at workspace/avl/src/avl.rs:102:5: 102:50
    }

    bb7: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:103:2: 103:2
    }
}
fn src::avl::insert(_1: *mut src::avl::Node, _2: i32) -> *mut src::avl::Node {
    debug node => _1;                    // in scope 0 at workspace/avl/src/avl.rs:106:33: 106:41
    debug key => _2;                     // in scope 0 at workspace/avl/src/avl.rs:106:54: 106:61
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:107:5: 107:14
    let mut _3: bool;                    // in scope 0 at workspace/avl/src/avl.rs:109:8: 109:22
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:109:8: 109:12
    let mut _5: i32;                     // in scope 0 at workspace/avl/src/avl.rs:109:40: 109:43
    let mut _6: bool;                    // in scope 0 at workspace/avl/src/avl.rs:110:8: 110:25
    let mut _7: i32;                     // in scope 0 at workspace/avl/src/avl.rs:110:8: 110:11
    let mut _8: i32;                     // in scope 0 at workspace/avl/src/avl.rs:110:14: 110:25
    let mut _9: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:111:24: 111:49
    let mut _10: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:111:31: 111:43
    let mut _11: i32;                    // in scope 0 at workspace/avl/src/avl.rs:111:45: 111:48
    let mut _12: bool;                   // in scope 0 at workspace/avl/src/avl.rs:112:15: 112:32
    let mut _13: i32;                    // in scope 0 at workspace/avl/src/avl.rs:112:15: 112:18
    let mut _14: i32;                    // in scope 0 at workspace/avl/src/avl.rs:112:21: 112:32
    let mut _15: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:113:25: 113:51
    let mut _16: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:113:32: 113:45
    let mut _17: i32;                    // in scope 0 at workspace/avl/src/avl.rs:113:47: 113:50
    let mut _18: i32;                    // in scope 0 at workspace/avl/src/avl.rs:120:9: 120:17
    let mut _19: i32;                    // in scope 0 at workspace/avl/src/avl.rs:120:20: 120:68
    let mut _20: i32;                    // in scope 0 at workspace/avl/src/avl.rs:120:24: 120:44
    let mut _21: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:120:31: 120:43
    let mut _22: i32;                    // in scope 0 at workspace/avl/src/avl.rs:120:46: 120:67
    let mut _23: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:120:53: 120:66
    let mut _24: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:120:9: 120:68
    let mut _25: i32;                    // in scope 0 at workspace/avl/src/avl.rs:124:9: 124:20
    let mut _26: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:124:39: 124:43
    let mut _27: bool;                   // in scope 0 at workspace/avl/src/avl.rs:127:8: 127:55
    let mut _28: bool;                   // in scope 0 at workspace/avl/src/avl.rs:127:8: 127:26
    let mut _29: i32;                    // in scope 0 at workspace/avl/src/avl.rs:127:8: 127:15
    let mut _30: i32;                    // in scope 0 at workspace/avl/src/avl.rs:127:18: 127:26
    let mut _31: bool;                   // in scope 0 at workspace/avl/src/avl.rs:127:30: 127:55
    let mut _32: i32;                    // in scope 0 at workspace/avl/src/avl.rs:127:30: 127:33
    let mut _33: i32;                    // in scope 0 at workspace/avl/src/avl.rs:127:36: 127:55
    let mut _34: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:128:28: 128:32
    let mut _35: bool;                   // in scope 0 at workspace/avl/src/avl.rs:131:8: 131:59
    let mut _36: bool;                   // in scope 0 at workspace/avl/src/avl.rs:131:8: 131:29
    let mut _37: i32;                    // in scope 0 at workspace/avl/src/avl.rs:131:8: 131:15
    let mut _38: i32;                    // in scope 0 at workspace/avl/src/avl.rs:131:18: 131:29
    let mut _39: bool;                   // in scope 0 at workspace/avl/src/avl.rs:131:33: 131:59
    let mut _40: i32;                    // in scope 0 at workspace/avl/src/avl.rs:131:33: 131:36
    let mut _41: i32;                    // in scope 0 at workspace/avl/src/avl.rs:131:39: 131:59
    let mut _42: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:132:27: 132:31
    let mut _43: bool;                   // in scope 0 at workspace/avl/src/avl.rs:135:8: 135:55
    let mut _44: bool;                   // in scope 0 at workspace/avl/src/avl.rs:135:8: 135:26
    let mut _45: i32;                    // in scope 0 at workspace/avl/src/avl.rs:135:8: 135:15
    let mut _46: i32;                    // in scope 0 at workspace/avl/src/avl.rs:135:18: 135:26
    let mut _47: bool;                   // in scope 0 at workspace/avl/src/avl.rs:135:30: 135:55
    let mut _48: i32;                    // in scope 0 at workspace/avl/src/avl.rs:135:30: 135:33
    let mut _49: i32;                    // in scope 0 at workspace/avl/src/avl.rs:135:36: 135:55
    let mut _50: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:136:24: 136:48
    let mut _51: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:136:35: 136:47
    let mut _52: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:137:28: 137:32
    let mut _53: bool;                   // in scope 0 at workspace/avl/src/avl.rs:140:8: 140:59
    let mut _54: bool;                   // in scope 0 at workspace/avl/src/avl.rs:140:8: 140:29
    let mut _55: i32;                    // in scope 0 at workspace/avl/src/avl.rs:140:8: 140:15
    let mut _56: i32;                    // in scope 0 at workspace/avl/src/avl.rs:140:18: 140:29
    let mut _57: bool;                   // in scope 0 at workspace/avl/src/avl.rs:140:33: 140:59
    let mut _58: i32;                    // in scope 0 at workspace/avl/src/avl.rs:140:33: 140:36
    let mut _59: i32;                    // in scope 0 at workspace/avl/src/avl.rs:140:39: 140:59
    let mut _60: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:141:25: 141:51
    let mut _61: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:141:37: 141:50
    let mut _62: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:142:27: 142:31
    let mut _63: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:106:33: 106:41
    let mut _64: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:106:33: 106:41
    let mut _65: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:106:33: 106:41
    let mut _66: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:106:33: 106:41
    scope 1 {
        debug balance => _25;            // in scope 1 at workspace/avl/src/avl.rs:124:9: 124:20
    }

    bb0: {
        _4 = _1;                         // scope 0 at workspace/avl/src/avl.rs:109:8: 109:12
        _3 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _4) -> bb1; // scope 0 at workspace/avl/src/avl.rs:109:8: 109:22
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:109:13: 109:20
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 0 at workspace/avl/src/avl.rs:109:8: 109:22
    }

    bb2: {
        _5 = _2;                         // scope 0 at workspace/avl/src/avl.rs:109:40: 109:43
        _0 = src::avl::newNode(move _5) -> bb38; // scope 0 at workspace/avl/src/avl.rs:109:32: 109:44
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:109:32: 109:39
                                         // + literal: Const { ty: unsafe extern "C" fn(i32) -> *mut src::avl::Node {src::avl::newNode}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _2;                         // scope 0 at workspace/avl/src/avl.rs:110:8: 110:11
        _8 = ((*_1).0: i32);             // scope 0 at workspace/avl/src/avl.rs:110:14: 110:25
        _6 = Lt(move _7, move _8);       // scope 0 at workspace/avl/src/avl.rs:110:8: 110:25
        switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 0 at workspace/avl/src/avl.rs:110:8: 110:25
    }

    bb4: {
        _10 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:111:31: 111:43
        _11 = _2;                        // scope 0 at workspace/avl/src/avl.rs:111:45: 111:48
        _9 = src::avl::insert(move _10, move _11) -> bb6; // scope 0 at workspace/avl/src/avl.rs:111:24: 111:49
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:111:24: 111:30
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node, i32) -> *mut src::avl::Node {src::avl::insert}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _2;                        // scope 0 at workspace/avl/src/avl.rs:112:15: 112:18
        _14 = ((*_1).0: i32);            // scope 0 at workspace/avl/src/avl.rs:112:21: 112:32
        _12 = Gt(move _13, move _14);    // scope 0 at workspace/avl/src/avl.rs:112:15: 112:32
        switchInt(move _12) -> [false: bb8, otherwise: bb7]; // scope 0 at workspace/avl/src/avl.rs:112:15: 112:32
    }

    bb6: {
        ((*_1).1: *mut src::avl::Node) = move _9; // scope 0 at workspace/avl/src/avl.rs:111:9: 111:49
        goto -> bb10;                    // scope 0 at workspace/avl/src/avl.rs:110:5: 117:6
    }

    bb7: {
        _16 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:113:32: 113:45
        _17 = _2;                        // scope 0 at workspace/avl/src/avl.rs:113:47: 113:50
        _15 = src::avl::insert(move _16, move _17) -> bb9; // scope 0 at workspace/avl/src/avl.rs:113:25: 113:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:113:25: 113:31
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node, i32) -> *mut src::avl::Node {src::avl::insert}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = _1;                         // scope 0 at workspace/avl/src/avl.rs:116:16: 116:20
        goto -> bb38;                    // scope 0 at no-location
    }

    bb9: {
        ((*_1).2: *mut src::avl::Node) = move _15; // scope 0 at workspace/avl/src/avl.rs:113:9: 113:51
        goto -> bb10;                    // scope 0 at workspace/avl/src/avl.rs:110:5: 117:6
    }

    bb10: {
        _18 = const 1_i32;               // scope 0 at workspace/avl/src/avl.rs:120:9: 120:10
        _21 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:120:31: 120:43
        _20 = src::avl::height(move _21) -> bb11; // scope 0 at workspace/avl/src/avl.rs:120:24: 120:44
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:120:24: 120:30
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:120:53: 120:66
        _22 = src::avl::height(move _23) -> bb12; // scope 0 at workspace/avl/src/avl.rs:120:46: 120:67
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:120:46: 120:52
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = src::avl::max(move _20, move _22) -> bb13; // scope 0 at workspace/avl/src/avl.rs:120:20: 120:68
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:120:20: 120:23
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = CheckedAdd(_18, _19);      // scope 0 at workspace/avl/src/avl.rs:120:9: 120:68
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, move _19) -> bb14; // scope 0 at workspace/avl/src/avl.rs:120:9: 120:68
    }

    bb14: {
        ((*_1).3: i32) = move (_24.0: i32); // scope 0 at workspace/avl/src/avl.rs:119:5: 120:68
        _26 = _1;                        // scope 0 at workspace/avl/src/avl.rs:124:39: 124:43
        _25 = src::avl::getBalance(move _26) -> bb15; // scope 0 at workspace/avl/src/avl.rs:124:28: 124:44
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:124:28: 124:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb15: {
        _29 = _25;                       // scope 1 at workspace/avl/src/avl.rs:127:8: 127:15
        _30 = const 1_i32;               // scope 1 at workspace/avl/src/avl.rs:127:18: 127:19
        _28 = Gt(move _29, move _30);    // scope 1 at workspace/avl/src/avl.rs:127:8: 127:26
        switchInt(move _28) -> [false: bb16, otherwise: bb17]; // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
    }

    bb16: {
        _27 = const false;               // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
        goto -> bb18;                    // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
    }

    bb17: {
        _32 = _2;                        // scope 1 at workspace/avl/src/avl.rs:127:30: 127:33
        _63 = deref_copy ((*_1).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:127:36: 127:55
        _33 = ((*_63).0: i32);           // scope 1 at workspace/avl/src/avl.rs:127:36: 127:55
        _31 = Lt(move _32, move _33);    // scope 1 at workspace/avl/src/avl.rs:127:30: 127:55
        _27 = move _31;                  // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
        goto -> bb18;                    // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
    }

    bb18: {
        switchInt(move _27) -> [false: bb20, otherwise: bb19]; // scope 1 at workspace/avl/src/avl.rs:127:8: 127:55
    }

    bb19: {
        _34 = _1;                        // scope 1 at workspace/avl/src/avl.rs:128:28: 128:32
        _0 = src::avl::rightRotate(move _34) -> bb38; // scope 1 at workspace/avl/src/avl.rs:128:16: 128:33
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:128:16: 128:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb20: {
        _37 = _25;                       // scope 1 at workspace/avl/src/avl.rs:131:8: 131:15
        _38 = const -1_i32;              // scope 1 at workspace/avl/src/avl.rs:131:18: 131:29
        _36 = Lt(move _37, move _38);    // scope 1 at workspace/avl/src/avl.rs:131:8: 131:29
        switchInt(move _36) -> [false: bb21, otherwise: bb22]; // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
    }

    bb21: {
        _35 = const false;               // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
        goto -> bb23;                    // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
    }

    bb22: {
        _40 = _2;                        // scope 1 at workspace/avl/src/avl.rs:131:33: 131:36
        _64 = deref_copy ((*_1).2: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:131:39: 131:59
        _41 = ((*_64).0: i32);           // scope 1 at workspace/avl/src/avl.rs:131:39: 131:59
        _39 = Gt(move _40, move _41);    // scope 1 at workspace/avl/src/avl.rs:131:33: 131:59
        _35 = move _39;                  // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
        goto -> bb23;                    // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
    }

    bb23: {
        switchInt(move _35) -> [false: bb25, otherwise: bb24]; // scope 1 at workspace/avl/src/avl.rs:131:8: 131:59
    }

    bb24: {
        _42 = _1;                        // scope 1 at workspace/avl/src/avl.rs:132:27: 132:31
        _0 = src::avl::leftRotate(move _42) -> bb38; // scope 1 at workspace/avl/src/avl.rs:132:16: 132:32
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:132:16: 132:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb25: {
        _45 = _25;                       // scope 1 at workspace/avl/src/avl.rs:135:8: 135:15
        _46 = const 1_i32;               // scope 1 at workspace/avl/src/avl.rs:135:18: 135:19
        _44 = Gt(move _45, move _46);    // scope 1 at workspace/avl/src/avl.rs:135:8: 135:26
        switchInt(move _44) -> [false: bb26, otherwise: bb27]; // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
    }

    bb26: {
        _43 = const false;               // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
        goto -> bb28;                    // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
    }

    bb27: {
        _48 = _2;                        // scope 1 at workspace/avl/src/avl.rs:135:30: 135:33
        _65 = deref_copy ((*_1).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:135:36: 135:55
        _49 = ((*_65).0: i32);           // scope 1 at workspace/avl/src/avl.rs:135:36: 135:55
        _47 = Gt(move _48, move _49);    // scope 1 at workspace/avl/src/avl.rs:135:30: 135:55
        _43 = move _47;                  // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
        goto -> bb28;                    // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
    }

    bb28: {
        switchInt(move _43) -> [false: bb31, otherwise: bb29]; // scope 1 at workspace/avl/src/avl.rs:135:8: 135:55
    }

    bb29: {
        _51 = ((*_1).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:136:35: 136:47
        _50 = src::avl::leftRotate(move _51) -> bb30; // scope 1 at workspace/avl/src/avl.rs:136:24: 136:48
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:136:24: 136:34
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb30: {
        ((*_1).1: *mut src::avl::Node) = move _50; // scope 1 at workspace/avl/src/avl.rs:136:9: 136:48
        _52 = _1;                        // scope 1 at workspace/avl/src/avl.rs:137:28: 137:32
        _0 = src::avl::rightRotate(move _52) -> bb38; // scope 1 at workspace/avl/src/avl.rs:137:16: 137:33
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:137:16: 137:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb31: {
        _55 = _25;                       // scope 1 at workspace/avl/src/avl.rs:140:8: 140:15
        _56 = const -1_i32;              // scope 1 at workspace/avl/src/avl.rs:140:18: 140:29
        _54 = Lt(move _55, move _56);    // scope 1 at workspace/avl/src/avl.rs:140:8: 140:29
        switchInt(move _54) -> [false: bb32, otherwise: bb33]; // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
    }

    bb32: {
        _53 = const false;               // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
        goto -> bb34;                    // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
    }

    bb33: {
        _58 = _2;                        // scope 1 at workspace/avl/src/avl.rs:140:33: 140:36
        _66 = deref_copy ((*_1).2: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:140:39: 140:59
        _59 = ((*_66).0: i32);           // scope 1 at workspace/avl/src/avl.rs:140:39: 140:59
        _57 = Lt(move _58, move _59);    // scope 1 at workspace/avl/src/avl.rs:140:33: 140:59
        _53 = move _57;                  // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
        goto -> bb34;                    // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
    }

    bb34: {
        switchInt(move _53) -> [false: bb37, otherwise: bb35]; // scope 1 at workspace/avl/src/avl.rs:140:8: 140:59
    }

    bb35: {
        _61 = ((*_1).2: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:141:37: 141:50
        _60 = src::avl::rightRotate(move _61) -> bb36; // scope 1 at workspace/avl/src/avl.rs:141:25: 141:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:141:25: 141:36
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb36: {
        ((*_1).2: *mut src::avl::Node) = move _60; // scope 1 at workspace/avl/src/avl.rs:141:9: 141:51
        _62 = _1;                        // scope 1 at workspace/avl/src/avl.rs:142:27: 142:31
        _0 = src::avl::leftRotate(move _62) -> bb38; // scope 1 at workspace/avl/src/avl.rs:142:16: 142:32
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:142:16: 142:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb37: {
        _0 = _1;                         // scope 1 at workspace/avl/src/avl.rs:145:12: 145:16
        goto -> bb38;                    // scope 1 at workspace/avl/src/avl.rs:145:5: 145:16
    }

    bb38: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:146:2: 146:2
    }
}
fn src::avl::minValueNode(_1: *mut src::avl::Node) -> *mut src::avl::Node {
    debug node => _1;                    // in scope 0 at workspace/avl/src/avl.rs:151:39: 151:47
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:152:9: 152:20
    let mut _2: bool;                    // in scope 0 at workspace/avl/src/avl.rs:154:11: 154:37
    let mut _3: bool;                    // in scope 0 at workspace/avl/src/avl.rs:154:12: 154:37
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:154:12: 154:27
    let mut _5: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:154:50: 154:65
    scope 1 {
        debug current => _0;             // in scope 1 at workspace/avl/src/avl.rs:152:9: 152:20
    }

    bb0: {
        _0 = _1;                         // scope 0 at workspace/avl/src/avl.rs:152:34: 152:38
        goto -> bb1;                     // scope 1 at workspace/avl/src/avl.rs:154:5: 154:67
    }

    bb1: {
        _4 = ((*_0).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:154:12: 154:27
        _3 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _4) -> bb2; // scope 1 at workspace/avl/src/avl.rs:154:12: 154:37
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:154:28: 154:35
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Not(move _3);               // scope 1 at workspace/avl/src/avl.rs:154:11: 154:37
        switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/avl/src/avl.rs:154:11: 154:37
    }

    bb3: {
        _5 = ((*_0).1: *mut src::avl::Node); // scope 1 at workspace/avl/src/avl.rs:154:50: 154:65
        _0 = move _5;                    // scope 1 at workspace/avl/src/avl.rs:154:40: 154:65
        goto -> bb1;                     // scope 1 at workspace/avl/src/avl.rs:154:5: 154:67
    }

    bb4: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:156:2: 156:2
    }
}
fn src::avl::deleteNode(_1: *mut src::avl::Node, _2: i32) -> *mut src::avl::Node {
    debug root => _1;                    // in scope 0 at workspace/avl/src/avl.rs:160:37: 160:45
    debug key => _2;                     // in scope 0 at workspace/avl/src/avl.rs:160:58: 160:65
    let mut _0: *mut src::avl::Node;     // return place in scope 0 at workspace/avl/src/avl.rs:161:5: 161:14
    let mut _3: bool;                    // in scope 0 at workspace/avl/src/avl.rs:163:8: 163:22
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:163:8: 163:12
    let mut _5: bool;                    // in scope 0 at workspace/avl/src/avl.rs:166:8: 166:25
    let mut _6: i32;                     // in scope 0 at workspace/avl/src/avl.rs:166:8: 166:11
    let mut _7: i32;                     // in scope 0 at workspace/avl/src/avl.rs:166:14: 166:25
    let mut _8: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:167:24: 167:53
    let mut _9: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:167:35: 167:47
    let mut _10: i32;                    // in scope 0 at workspace/avl/src/avl.rs:167:49: 167:52
    let mut _11: bool;                   // in scope 0 at workspace/avl/src/avl.rs:168:15: 168:32
    let mut _12: i32;                    // in scope 0 at workspace/avl/src/avl.rs:168:15: 168:18
    let mut _13: i32;                    // in scope 0 at workspace/avl/src/avl.rs:168:21: 168:32
    let mut _14: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:169:25: 169:55
    let mut _15: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:169:36: 169:49
    let mut _16: i32;                    // in scope 0 at workspace/avl/src/avl.rs:169:51: 169:54
    let mut _17: bool;                   // in scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
    let mut _18: bool;                   // in scope 0 at workspace/avl/src/avl.rs:170:15: 170:37
    let mut _19: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:170:15: 170:27
    let mut _20: bool;                   // in scope 0 at workspace/avl/src/avl.rs:170:41: 170:64
    let mut _21: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:170:41: 170:54
    let mut _22: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:171:13: 171:21
    let mut _23: bool;                   // in scope 0 at workspace/avl/src/avl.rs:172:16: 172:39
    let mut _24: bool;                   // in scope 0 at workspace/avl/src/avl.rs:172:17: 172:39
    let mut _25: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:172:17: 172:29
    let mut _26: bool;                   // in scope 0 at workspace/avl/src/avl.rs:181:12: 181:26
    let mut _27: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:181:12: 181:16
    let mut _28: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:183:17: 183:21
    let mut _29: src::avl::Node;         // in scope 0 at workspace/avl/src/avl.rs:188:21: 188:26
    let _30: ();                         // in scope 0 at workspace/avl/src/avl.rs:190:9: 190:40
    let mut _31: *mut libc::c_void;      // in scope 0 at workspace/avl/src/avl.rs:190:14: 190:39
    let mut _32: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:190:14: 190:18
    let mut _33: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:194:13: 194:23
    let mut _34: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:194:50: 194:63
    let mut _35: i32;                    // in scope 0 at workspace/avl/src/avl.rs:196:23: 196:36
    let mut _36: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:198:25: 198:65
    let mut _37: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:198:36: 198:49
    let mut _38: i32;                    // in scope 0 at workspace/avl/src/avl.rs:198:51: 198:64
    let mut _39: bool;                   // in scope 0 at workspace/avl/src/avl.rs:201:8: 201:22
    let mut _40: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:201:8: 201:12
    let mut _41: i32;                    // in scope 0 at workspace/avl/src/avl.rs:204:9: 204:17
    let mut _42: i32;                    // in scope 0 at workspace/avl/src/avl.rs:204:20: 204:68
    let mut _43: i32;                    // in scope 0 at workspace/avl/src/avl.rs:204:24: 204:44
    let mut _44: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:204:31: 204:43
    let mut _45: i32;                    // in scope 0 at workspace/avl/src/avl.rs:204:46: 204:67
    let mut _46: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:204:53: 204:66
    let mut _47: (i32, bool);            // in scope 0 at workspace/avl/src/avl.rs:204:9: 204:68
    let mut _48: i32;                    // in scope 0 at workspace/avl/src/avl.rs:207:9: 207:20
    let mut _49: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:207:39: 207:43
    let mut _50: bool;                   // in scope 0 at workspace/avl/src/avl.rs:210:8: 211:48
    let mut _51: bool;                   // in scope 0 at workspace/avl/src/avl.rs:210:8: 210:26
    let mut _52: i32;                    // in scope 0 at workspace/avl/src/avl.rs:210:8: 210:15
    let mut _53: i32;                    // in scope 0 at workspace/avl/src/avl.rs:210:18: 210:26
    let mut _54: bool;                   // in scope 0 at workspace/avl/src/avl.rs:211:12: 211:48
    let mut _55: i32;                    // in scope 0 at workspace/avl/src/avl.rs:211:12: 211:36
    let mut _56: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:211:23: 211:35
    let mut _57: i32;                    // in scope 0 at workspace/avl/src/avl.rs:211:40: 211:48
    let mut _58: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:212:28: 212:32
    let mut _59: bool;                   // in scope 0 at workspace/avl/src/avl.rs:215:8: 216:47
    let mut _60: bool;                   // in scope 0 at workspace/avl/src/avl.rs:215:8: 215:26
    let mut _61: i32;                    // in scope 0 at workspace/avl/src/avl.rs:215:8: 215:15
    let mut _62: i32;                    // in scope 0 at workspace/avl/src/avl.rs:215:18: 215:26
    let mut _63: bool;                   // in scope 0 at workspace/avl/src/avl.rs:216:12: 216:47
    let mut _64: i32;                    // in scope 0 at workspace/avl/src/avl.rs:216:12: 216:36
    let mut _65: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:216:23: 216:35
    let mut _66: i32;                    // in scope 0 at workspace/avl/src/avl.rs:216:39: 216:47
    let mut _67: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:217:24: 217:48
    let mut _68: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:217:35: 217:47
    let mut _69: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:218:28: 218:32
    let mut _70: bool;                   // in scope 0 at workspace/avl/src/avl.rs:221:8: 222:49
    let mut _71: bool;                   // in scope 0 at workspace/avl/src/avl.rs:221:8: 221:29
    let mut _72: i32;                    // in scope 0 at workspace/avl/src/avl.rs:221:8: 221:15
    let mut _73: i32;                    // in scope 0 at workspace/avl/src/avl.rs:221:18: 221:29
    let mut _74: bool;                   // in scope 0 at workspace/avl/src/avl.rs:222:12: 222:49
    let mut _75: i32;                    // in scope 0 at workspace/avl/src/avl.rs:222:12: 222:37
    let mut _76: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:222:23: 222:36
    let mut _77: i32;                    // in scope 0 at workspace/avl/src/avl.rs:222:41: 222:49
    let mut _78: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:223:27: 223:31
    let mut _79: bool;                   // in scope 0 at workspace/avl/src/avl.rs:226:8: 227:48
    let mut _80: bool;                   // in scope 0 at workspace/avl/src/avl.rs:226:8: 226:29
    let mut _81: i32;                    // in scope 0 at workspace/avl/src/avl.rs:226:8: 226:15
    let mut _82: i32;                    // in scope 0 at workspace/avl/src/avl.rs:226:18: 226:29
    let mut _83: bool;                   // in scope 0 at workspace/avl/src/avl.rs:227:12: 227:48
    let mut _84: i32;                    // in scope 0 at workspace/avl/src/avl.rs:227:12: 227:37
    let mut _85: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:227:23: 227:36
    let mut _86: i32;                    // in scope 0 at workspace/avl/src/avl.rs:227:40: 227:48
    let mut _87: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:228:25: 228:51
    let mut _88: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:228:37: 228:50
    let mut _89: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:229:27: 229:31
    scope 1 {
        debug temp => _22;               // in scope 1 at workspace/avl/src/avl.rs:171:13: 171:21
    }
    scope 2 {
        debug temp_0 => _33;             // in scope 2 at workspace/avl/src/avl.rs:194:13: 194:23
    }
    scope 3 {
        debug balance => _48;            // in scope 3 at workspace/avl/src/avl.rs:207:9: 207:20
    }

    bb0: {
        _4 = _1;                         // scope 0 at workspace/avl/src/avl.rs:163:8: 163:12
        _3 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _4) -> bb1; // scope 0 at workspace/avl/src/avl.rs:163:8: 163:22
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:163:13: 163:20
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 0 at workspace/avl/src/avl.rs:163:8: 163:22
    }

    bb2: {
        _0 = _1;                         // scope 0 at workspace/avl/src/avl.rs:163:32: 163:36
        goto -> bb62;                    // scope 0 at no-location
    }

    bb3: {
        _6 = _2;                         // scope 0 at workspace/avl/src/avl.rs:166:8: 166:11
        _7 = ((*_1).0: i32);             // scope 0 at workspace/avl/src/avl.rs:166:14: 166:25
        _5 = Lt(move _6, move _7);       // scope 0 at workspace/avl/src/avl.rs:166:8: 166:25
        switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at workspace/avl/src/avl.rs:166:8: 166:25
    }

    bb4: {
        _9 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:167:35: 167:47
        _10 = _2;                        // scope 0 at workspace/avl/src/avl.rs:167:49: 167:52
        _8 = src::avl::deleteNode(move _9, move _10) -> bb6; // scope 0 at workspace/avl/src/avl.rs:167:24: 167:53
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:167:24: 167:34
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node, i32) -> *mut src::avl::Node {src::avl::deleteNode}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _2;                        // scope 0 at workspace/avl/src/avl.rs:168:15: 168:18
        _13 = ((*_1).0: i32);            // scope 0 at workspace/avl/src/avl.rs:168:21: 168:32
        _11 = Gt(move _12, move _13);    // scope 0 at workspace/avl/src/avl.rs:168:15: 168:32
        switchInt(move _11) -> [false: bb8, otherwise: bb7]; // scope 0 at workspace/avl/src/avl.rs:168:15: 168:32
    }

    bb6: {
        ((*_1).1: *mut src::avl::Node) = move _8; // scope 0 at workspace/avl/src/avl.rs:167:9: 167:53
        goto -> bb27;                    // scope 0 at workspace/avl/src/avl.rs:166:5: 199:6
    }

    bb7: {
        _15 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:169:36: 169:49
        _16 = _2;                        // scope 0 at workspace/avl/src/avl.rs:169:51: 169:54
        _14 = src::avl::deleteNode(move _15, move _16) -> bb9; // scope 0 at workspace/avl/src/avl.rs:169:25: 169:55
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:169:25: 169:35
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node, i32) -> *mut src::avl::Node {src::avl::deleteNode}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:170:15: 170:27
        _18 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _19) -> bb13; // scope 0 at workspace/avl/src/avl.rs:170:15: 170:37
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:170:28: 170:35
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb9: {
        ((*_1).2: *mut src::avl::Node) = move _14; // scope 0 at workspace/avl/src/avl.rs:169:9: 169:55
        goto -> bb27;                    // scope 0 at workspace/avl/src/avl.rs:168:12: 199:6
    }

    bb10: {
        _17 = const true;                // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
        goto -> bb12;                    // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
    }

    bb11: {
        _21 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:170:41: 170:54
        _20 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _21) -> bb14; // scope 0 at workspace/avl/src/avl.rs:170:41: 170:64
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:170:55: 170:62
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _17) -> [false: bb24, otherwise: bb15]; // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
    }

    bb13: {
        switchInt(move _18) -> [false: bb11, otherwise: bb10]; // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
    }

    bb14: {
        _17 = move _20;                  // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
        goto -> bb12;                    // scope 0 at workspace/avl/src/avl.rs:170:15: 170:64
    }

    bb15: {
        _25 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:172:17: 172:29
        _24 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _25) -> bb16; // scope 0 at workspace/avl/src/avl.rs:172:17: 172:39
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:172:30: 172:37
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb16: {
        _23 = Not(move _24);             // scope 0 at workspace/avl/src/avl.rs:172:16: 172:39
        switchInt(move _23) -> [false: bb18, otherwise: bb17]; // scope 0 at workspace/avl/src/avl.rs:172:16: 172:39
    }

    bb17: {
        _22 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:173:17: 173:29
        goto -> bb19;                    // scope 0 at workspace/avl/src/avl.rs:172:13: 174:37
    }

    bb18: {
        _22 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:174:22: 174:35
        goto -> bb19;                    // scope 0 at workspace/avl/src/avl.rs:172:13: 174:37
    }

    bb19: {
        _27 = _22;                       // scope 1 at workspace/avl/src/avl.rs:181:12: 181:16
        _26 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _27) -> bb20; // scope 1 at workspace/avl/src/avl.rs:181:12: 181:26
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:181:17: 181:24
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb20: {
        switchInt(move _26) -> [false: bb22, otherwise: bb21]; // scope 1 at workspace/avl/src/avl.rs:181:12: 181:26
    }

    bb21: {
        _28 = _1;                        // scope 1 at workspace/avl/src/avl.rs:183:17: 183:21
        _22 = move _28;                  // scope 1 at workspace/avl/src/avl.rs:182:13: 183:21
        _1 = const {0x0 as *mut src::avl::Node}; // scope 1 at workspace/avl/src/avl.rs:185:13: 185:34
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:185:13: 185:34
                                         // + literal: Const { ty: *mut src::avl::Node, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb23;                    // scope 1 at workspace/avl/src/avl.rs:181:9: 189:10
    }

    bb22: {
        _29 = (*_22);                    // scope 1 at workspace/avl/src/avl.rs:188:21: 188:26
        (*_1) = move _29;                // scope 1 at workspace/avl/src/avl.rs:188:13: 188:26
        goto -> bb23;                    // scope 1 at workspace/avl/src/avl.rs:181:9: 189:10
    }

    bb23: {
        _32 = _22;                       // scope 1 at workspace/avl/src/avl.rs:190:14: 190:18
        _31 = move _32 as *mut libc::c_void (Misc); // scope 1 at workspace/avl/src/avl.rs:190:14: 190:39
        _30 = src::avl::free(move _31) -> bb27; // scope 1 at workspace/avl/src/avl.rs:190:9: 190:40
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:190:9: 190:13
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::avl::free}, val: Value(<ZST>) }
    }

    bb24: {
        _34 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:194:50: 194:63
        _33 = src::avl::minValueNode(move _34) -> bb25; // scope 0 at workspace/avl/src/avl.rs:194:37: 194:64
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:194:37: 194:49
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::minValueNode}, val: Value(<ZST>) }
    }

    bb25: {
        _35 = ((*_33).0: i32);           // scope 2 at workspace/avl/src/avl.rs:196:23: 196:36
        ((*_1).0: i32) = move _35;       // scope 2 at workspace/avl/src/avl.rs:196:9: 196:36
        _37 = ((*_1).2: *mut src::avl::Node); // scope 2 at workspace/avl/src/avl.rs:198:36: 198:49
        _38 = ((*_33).0: i32);           // scope 2 at workspace/avl/src/avl.rs:198:51: 198:64
        _36 = src::avl::deleteNode(move _37, move _38) -> bb26; // scope 2 at workspace/avl/src/avl.rs:198:25: 198:65
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:198:25: 198:35
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node, i32) -> *mut src::avl::Node {src::avl::deleteNode}, val: Value(<ZST>) }
    }

    bb26: {
        ((*_1).2: *mut src::avl::Node) = move _36; // scope 2 at workspace/avl/src/avl.rs:198:9: 198:65
        goto -> bb27;                    // scope 0 at workspace/avl/src/avl.rs:170:12: 199:6
    }

    bb27: {
        _40 = _1;                        // scope 0 at workspace/avl/src/avl.rs:201:8: 201:12
        _39 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _40) -> bb28; // scope 0 at workspace/avl/src/avl.rs:201:8: 201:22
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:201:13: 201:20
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _39) -> [false: bb30, otherwise: bb29]; // scope 0 at workspace/avl/src/avl.rs:201:8: 201:22
    }

    bb29: {
        _0 = _1;                         // scope 0 at workspace/avl/src/avl.rs:201:32: 201:36
        goto -> bb62;                    // scope 0 at no-location
    }

    bb30: {
        _41 = const 1_i32;               // scope 0 at workspace/avl/src/avl.rs:204:9: 204:10
        _44 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:204:31: 204:43
        _43 = src::avl::height(move _44) -> bb31; // scope 0 at workspace/avl/src/avl.rs:204:24: 204:44
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:204:24: 204:30
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb31: {
        _46 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:204:53: 204:66
        _45 = src::avl::height(move _46) -> bb32; // scope 0 at workspace/avl/src/avl.rs:204:46: 204:67
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:204:46: 204:52
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::height}, val: Value(<ZST>) }
    }

    bb32: {
        _42 = src::avl::max(move _43, move _45) -> bb33; // scope 0 at workspace/avl/src/avl.rs:204:20: 204:68
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:204:20: 204:23
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, i32) -> i32 {src::avl::max}, val: Value(<ZST>) }
    }

    bb33: {
        _47 = CheckedAdd(_41, _42);      // scope 0 at workspace/avl/src/avl.rs:204:9: 204:68
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _41, move _42) -> bb34; // scope 0 at workspace/avl/src/avl.rs:204:9: 204:68
    }

    bb34: {
        ((*_1).3: i32) = move (_47.0: i32); // scope 0 at workspace/avl/src/avl.rs:203:5: 204:68
        _49 = _1;                        // scope 0 at workspace/avl/src/avl.rs:207:39: 207:43
        _48 = src::avl::getBalance(move _49) -> bb35; // scope 0 at workspace/avl/src/avl.rs:207:28: 207:44
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:207:28: 207:38
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb35: {
        _52 = _48;                       // scope 3 at workspace/avl/src/avl.rs:210:8: 210:15
        _53 = const 1_i32;               // scope 3 at workspace/avl/src/avl.rs:210:18: 210:19
        _51 = Gt(move _52, move _53);    // scope 3 at workspace/avl/src/avl.rs:210:8: 210:26
        switchInt(move _51) -> [false: bb36, otherwise: bb37]; // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
    }

    bb36: {
        _50 = const false;               // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
        goto -> bb38;                    // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
    }

    bb37: {
        _56 = ((*_1).1: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:211:23: 211:35
        _55 = src::avl::getBalance(move _56) -> bb39; // scope 3 at workspace/avl/src/avl.rs:211:12: 211:36
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:211:12: 211:22
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _50) -> [false: bb41, otherwise: bb40]; // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
    }

    bb39: {
        _57 = const 0_i32;               // scope 3 at workspace/avl/src/avl.rs:211:40: 211:41
        _54 = Ge(move _55, move _57);    // scope 3 at workspace/avl/src/avl.rs:211:12: 211:48
        _50 = move _54;                  // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
        goto -> bb38;                    // scope 3 at workspace/avl/src/avl.rs:210:8: 211:48
    }

    bb40: {
        _58 = _1;                        // scope 3 at workspace/avl/src/avl.rs:212:28: 212:32
        _0 = src::avl::rightRotate(move _58) -> bb62; // scope 3 at workspace/avl/src/avl.rs:212:16: 212:33
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:212:16: 212:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb41: {
        _61 = _48;                       // scope 3 at workspace/avl/src/avl.rs:215:8: 215:15
        _62 = const 1_i32;               // scope 3 at workspace/avl/src/avl.rs:215:18: 215:19
        _60 = Gt(move _61, move _62);    // scope 3 at workspace/avl/src/avl.rs:215:8: 215:26
        switchInt(move _60) -> [false: bb42, otherwise: bb43]; // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
    }

    bb42: {
        _59 = const false;               // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
        goto -> bb44;                    // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
    }

    bb43: {
        _65 = ((*_1).1: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:216:23: 216:35
        _64 = src::avl::getBalance(move _65) -> bb45; // scope 3 at workspace/avl/src/avl.rs:216:12: 216:36
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:216:12: 216:22
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb44: {
        switchInt(move _59) -> [false: bb48, otherwise: bb46]; // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
    }

    bb45: {
        _66 = const 0_i32;               // scope 3 at workspace/avl/src/avl.rs:216:39: 216:40
        _63 = Lt(move _64, move _66);    // scope 3 at workspace/avl/src/avl.rs:216:12: 216:47
        _59 = move _63;                  // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
        goto -> bb44;                    // scope 3 at workspace/avl/src/avl.rs:215:8: 216:47
    }

    bb46: {
        _68 = ((*_1).1: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:217:35: 217:47
        _67 = src::avl::leftRotate(move _68) -> bb47; // scope 3 at workspace/avl/src/avl.rs:217:24: 217:48
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:217:24: 217:34
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb47: {
        ((*_1).1: *mut src::avl::Node) = move _67; // scope 3 at workspace/avl/src/avl.rs:217:9: 217:48
        _69 = _1;                        // scope 3 at workspace/avl/src/avl.rs:218:28: 218:32
        _0 = src::avl::rightRotate(move _69) -> bb62; // scope 3 at workspace/avl/src/avl.rs:218:16: 218:33
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:218:16: 218:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb48: {
        _72 = _48;                       // scope 3 at workspace/avl/src/avl.rs:221:8: 221:15
        _73 = const -1_i32;              // scope 3 at workspace/avl/src/avl.rs:221:18: 221:29
        _71 = Lt(move _72, move _73);    // scope 3 at workspace/avl/src/avl.rs:221:8: 221:29
        switchInt(move _71) -> [false: bb49, otherwise: bb50]; // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
    }

    bb49: {
        _70 = const false;               // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
        goto -> bb51;                    // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
    }

    bb50: {
        _76 = ((*_1).2: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:222:23: 222:36
        _75 = src::avl::getBalance(move _76) -> bb52; // scope 3 at workspace/avl/src/avl.rs:222:12: 222:37
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:222:12: 222:22
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb51: {
        switchInt(move _70) -> [false: bb54, otherwise: bb53]; // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
    }

    bb52: {
        _77 = const 0_i32;               // scope 3 at workspace/avl/src/avl.rs:222:41: 222:42
        _74 = Le(move _75, move _77);    // scope 3 at workspace/avl/src/avl.rs:222:12: 222:49
        _70 = move _74;                  // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
        goto -> bb51;                    // scope 3 at workspace/avl/src/avl.rs:221:8: 222:49
    }

    bb53: {
        _78 = _1;                        // scope 3 at workspace/avl/src/avl.rs:223:27: 223:31
        _0 = src::avl::leftRotate(move _78) -> bb62; // scope 3 at workspace/avl/src/avl.rs:223:16: 223:32
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:223:16: 223:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb54: {
        _81 = _48;                       // scope 3 at workspace/avl/src/avl.rs:226:8: 226:15
        _82 = const -1_i32;              // scope 3 at workspace/avl/src/avl.rs:226:18: 226:29
        _80 = Lt(move _81, move _82);    // scope 3 at workspace/avl/src/avl.rs:226:8: 226:29
        switchInt(move _80) -> [false: bb55, otherwise: bb56]; // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
    }

    bb55: {
        _79 = const false;               // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
        goto -> bb57;                    // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
    }

    bb56: {
        _85 = ((*_1).2: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:227:23: 227:36
        _84 = src::avl::getBalance(move _85) -> bb58; // scope 3 at workspace/avl/src/avl.rs:227:12: 227:37
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:227:12: 227:22
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> i32 {src::avl::getBalance}, val: Value(<ZST>) }
    }

    bb57: {
        switchInt(move _79) -> [false: bb61, otherwise: bb59]; // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
    }

    bb58: {
        _86 = const 0_i32;               // scope 3 at workspace/avl/src/avl.rs:227:40: 227:41
        _83 = Gt(move _84, move _86);    // scope 3 at workspace/avl/src/avl.rs:227:12: 227:48
        _79 = move _83;                  // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
        goto -> bb57;                    // scope 3 at workspace/avl/src/avl.rs:226:8: 227:48
    }

    bb59: {
        _88 = ((*_1).2: *mut src::avl::Node); // scope 3 at workspace/avl/src/avl.rs:228:37: 228:50
        _87 = src::avl::rightRotate(move _88) -> bb60; // scope 3 at workspace/avl/src/avl.rs:228:25: 228:51
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:228:25: 228:36
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::rightRotate}, val: Value(<ZST>) }
    }

    bb60: {
        ((*_1).2: *mut src::avl::Node) = move _87; // scope 3 at workspace/avl/src/avl.rs:228:9: 228:51
        _89 = _1;                        // scope 3 at workspace/avl/src/avl.rs:229:27: 229:31
        _0 = src::avl::leftRotate(move _89) -> bb62; // scope 3 at workspace/avl/src/avl.rs:229:16: 229:32
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:229:16: 229:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) -> *mut src::avl::Node {src::avl::leftRotate}, val: Value(<ZST>) }
    }

    bb61: {
        _0 = _1;                         // scope 3 at workspace/avl/src/avl.rs:231:12: 231:16
        goto -> bb62;                    // scope 3 at workspace/avl/src/avl.rs:231:5: 231:16
    }

    bb62: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:232:2: 232:2
    }
}
fn src::avl::preOrder(_1: *mut src::avl::Node) -> () {
    debug root => _1;                    // in scope 0 at workspace/avl/src/avl.rs:236:35: 236:43
    let mut _0: ();                      // return place in scope 0 at workspace/avl/src/avl.rs:236:56: 236:56
    let mut _2: bool;                    // in scope 0 at workspace/avl/src/avl.rs:237:8: 237:23
    let mut _3: bool;                    // in scope 0 at workspace/avl/src/avl.rs:237:9: 237:23
    let mut _4: *mut src::avl::Node;     // in scope 0 at workspace/avl/src/avl.rs:237:9: 237:13
    let _5: i32;                         // in scope 0 at workspace/avl/src/avl.rs:238:9: 238:76
    let mut _6: *const i8;               // in scope 0 at workspace/avl/src/avl.rs:238:16: 238:62
    let mut _7: *const u8;               // in scope 0 at workspace/avl/src/avl.rs:238:16: 238:39
    let mut _8: *const [u8; 4];          // in scope 0 at workspace/avl/src/avl.rs:238:16: 238:26
    let _9: &[u8; 4];                    // in scope 0 at workspace/avl/src/avl.rs:238:16: 238:26
    let mut _10: i32;                    // in scope 0 at workspace/avl/src/avl.rs:238:64: 238:75
    let _11: ();                         // in scope 0 at workspace/avl/src/avl.rs:239:9: 239:31
    let mut _12: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:239:18: 239:30
    let _13: ();                         // in scope 0 at workspace/avl/src/avl.rs:240:9: 240:32
    let mut _14: *mut src::avl::Node;    // in scope 0 at workspace/avl/src/avl.rs:240:18: 240:31

    bb0: {
        _4 = _1;                         // scope 0 at workspace/avl/src/avl.rs:237:9: 237:13
        _3 = std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null(move _4) -> bb1; // scope 0 at workspace/avl/src/avl.rs:237:9: 237:23
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:237:14: 237:21
                                         // + literal: Const { ty: fn(*mut src::avl::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::avl::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at workspace/avl/src/avl.rs:237:8: 237:23
        switchInt(move _2) -> [false: bb5, otherwise: bb2]; // scope 0 at workspace/avl/src/avl.rs:237:8: 237:23
    }

    bb2: {
        _9 = const b"%d \x00";           // scope 0 at workspace/avl/src/avl.rs:238:16: 238:26
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:238:16: 238:26
                                         // + literal: Const { ty: &[u8; 4], val: Value(Scalar(alloc19)) }
        _8 = &raw const (*_9);           // scope 0 at workspace/avl/src/avl.rs:238:16: 238:26
        _7 = move _8 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/avl/src/avl.rs:238:16: 238:39
        _6 = move _7 as *const i8 (Misc); // scope 0 at workspace/avl/src/avl.rs:238:16: 238:62
        _10 = ((*_1).0: i32);            // scope 0 at workspace/avl/src/avl.rs:238:64: 238:75
        _5 = src::avl::printf(move _6, move _10) -> bb3; // scope 0 at workspace/avl/src/avl.rs:238:9: 238:76
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:238:9: 238:15
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::avl::printf}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = ((*_1).1: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:239:18: 239:30
        _11 = src::avl::preOrder(move _12) -> bb4; // scope 0 at workspace/avl/src/avl.rs:239:9: 239:31
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:239:9: 239:17
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) {src::avl::preOrder}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = ((*_1).2: *mut src::avl::Node); // scope 0 at workspace/avl/src/avl.rs:240:18: 240:31
        _13 = src::avl::preOrder(move _14) -> bb5; // scope 0 at workspace/avl/src/avl.rs:240:9: 240:32
                                         // mir::Constant
                                         // + span: workspace/avl/src/avl.rs:240:9: 240:17
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::avl::Node) {src::avl::preOrder}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at workspace/avl/src/avl.rs:242:2: 242:2
    }
}

alloc19 (size: 4, align: 1) {
    25 64 20 00                                     │ %d .
}

fn src::buffer::buffer_new() -> *mut src::buffer::buffer_t {
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:60:42: 60:55
    let mut _1: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:61:33: 61:52

    bb0: {
        _1 = const 64_u64;               // scope 0 at workspace/buffer_simple/src/buffer.rs:61:33: 61:52
        _0 = src::buffer::buffer_new_with_size(move _1) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:61:12: 61:53
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:61:12: 61:32
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:62:2: 62:2
    }
}
fn src::buffer::buffer_new_with_size(_1: u64) -> *mut src::buffer::buffer_t {
    debug n => _1;                       // in scope 0 at workspace/buffer_simple/src/buffer.rs:67:47: 67:52
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:67:65: 67:78
    let mut _2: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:68:9: 68:19
    let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:68:22: 68:70
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:68:29: 68:69
    let mut _5: usize;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:68:29: 68:62
    let mut _6: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:8: 70:24
    let mut _7: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:8: 70:14
    let mut _8: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:75:21: 75:22
    let mut _9: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:76:23: 76:79
    let mut _10: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:76:30: 76:61
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:76:30: 76:31
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:76:45: 76:60
    let mut _13: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:76:63: 76:78
    let mut _14: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:77:22: 77:37
    scope 1 {
        debug self_0 => _2;              // in scope 1 at workspace/buffer_simple/src/buffer.rs:68:9: 68:19
    }

    bb0: {
        _5 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:68:29: 68:62
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:68:29: 68:60
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::buffer::buffer_t>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = move _5 as u64 (Misc);      // scope 0 at workspace/buffer_simple/src/buffer.rs:68:29: 68:69
        _3 = src::buffer::malloc(move _4) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:68:22: 68:70
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:68:22: 68:28
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::buffer::malloc}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = move _3 as *mut src::buffer::buffer_t (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:68:22: 68:87
        _7 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:70:8: 70:14
        _6 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _7) -> bb3; // scope 1 at workspace/buffer_simple/src/buffer.rs:70:8: 70:24
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:70:15: 70:22
                                         // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/buffer_simple/src/buffer.rs:70:8: 70:24
    }

    bb4: {
        _2 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer_simple/src/buffer.rs:71:9: 71:36
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:71:9: 71:36
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer_simple/src/buffer.rs:72:16: 72:34
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:72:16: 72:34
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb8;                     // scope 1 at no-location
    }

    bb5: {
        _8 = _1;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:75:21: 75:22
        ((*_2).0: u64) = move _8;        // scope 1 at workspace/buffer_simple/src/buffer.rs:75:5: 75:22
        _11 = _1;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:76:30: 76:31
        _12 = const 1_u64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:76:45: 76:60
        _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb6; // scope 1 at workspace/buffer_simple/src/buffer.rs:76:30: 76:61
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:76:32: 76:44
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _13 = const 1_u64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:76:63: 76:78
        _9 = src::buffer::calloc(move _10, move _13) -> bb7; // scope 1 at workspace/buffer_simple/src/buffer.rs:76:23: 76:79
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:76:23: 76:29
                                         // + literal: Const { ty: unsafe extern "C" fn(u64, u64) -> *mut libc::c_void {src::buffer::calloc}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        ((*_2).1: *mut i8) = move _9 as *mut i8 (Misc); // scope 1 at workspace/buffer_simple/src/buffer.rs:76:5: 76:100
        _14 = ((*_2).1: *mut i8);        // scope 1 at workspace/buffer_simple/src/buffer.rs:77:22: 77:37
        ((*_2).2: *mut i8) = move _14;   // scope 1 at workspace/buffer_simple/src/buffer.rs:77:5: 77:37
        _0 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:78:12: 78:18
        goto -> bb8;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:78:5: 78:18
    }

    bb8: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:79:2: 79:2
    }
}
fn src::buffer::buffer_new_with_string(_1: *mut i8) -> *mut src::buffer::buffer_t {
    debug str => _1;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:86:49: 86:56
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:86:80: 86:93
    let mut _2: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:87:42: 87:45
    let mut _3: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:87:47: 87:58
    let mut _4: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:87:54: 87:57
    let mut _5: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:87:54: 87:57

    bb0: {
        _2 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:87:42: 87:45
        _5 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:87:54: 87:57
        _4 = move _5 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:87:54: 87:57
        _3 = src::buffer::strlen(move _4) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:87:47: 87:58
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:87:47: 87:53
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = src::buffer::buffer_new_with_string_length(move _2, move _3) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:87:12: 87:59
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:87:12: 87:41
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut i8, u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_string_length}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:88:2: 88:2
    }
}
fn src::buffer::buffer_new_with_string_length(_1: *mut i8, _2: u64) -> *mut src::buffer::buffer_t {
    debug str => _1;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:94:5: 94:12
    debug len => _2;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:95:5: 95:12
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:97:9: 97:19
    let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:97:22: 97:70
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:97:29: 97:69
    let mut _5: usize;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:97:29: 97:62
    let mut _6: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:109:21: 109:24
    let mut _7: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:110:23: 110:26
    let mut _8: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:111:22: 111:37
    scope 1 {
        debug self_0 => _0;              // in scope 1 at workspace/buffer_simple/src/buffer.rs:97:9: 97:19
    }

    bb0: {
        _5 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:97:29: 97:62
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:97:29: 97:60
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::buffer::buffer_t>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = move _5 as u64 (Misc);      // scope 0 at workspace/buffer_simple/src/buffer.rs:97:29: 97:69
        _3 = src::buffer::malloc(move _4) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:97:22: 97:70
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:97:22: 97:28
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::buffer::malloc}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = move _3 as *mut src::buffer::buffer_t (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:97:22: 97:87
        _6 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:109:21: 109:24
        ((*_0).0: u64) = move _6;        // scope 1 at workspace/buffer_simple/src/buffer.rs:109:5: 109:24
        _7 = _1;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:110:23: 110:26
        ((*_0).1: *mut i8) = move _7;    // scope 1 at workspace/buffer_simple/src/buffer.rs:110:5: 110:26
        _8 = ((*_0).1: *mut i8);         // scope 1 at workspace/buffer_simple/src/buffer.rs:111:22: 111:37
        ((*_0).2: *mut i8) = move _8;    // scope 1 at workspace/buffer_simple/src/buffer.rs:111:5: 111:37
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:113:2: 113:2
    }
}
fn src::buffer::buffer_new_with_copy(_1: *mut i8) -> *mut src::buffer::buffer_t {
    debug str => _1;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:122:47: 122:54
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:122:78: 122:91
    let mut _2: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:123:9: 123:16
    let mut _3: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:123:26: 123:29
    let mut _4: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:123:26: 123:29
    let mut _6: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:124:43: 124:46
    let mut _7: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:126:8: 126:24
    let mut _8: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:126:8: 126:14
    let _9: *mut libc::c_void;           // in scope 0 at workspace/buffer_simple/src/buffer.rs:131:5: 135:6
    let mut _10: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:132:9: 132:45
    let mut _11: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:132:9: 132:24
    let mut _12: *const libc::c_void;    // in scope 0 at workspace/buffer_simple/src/buffer.rs:133:9: 133:35
    let mut _13: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:133:9: 133:12
    let mut _14: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:134:9: 134:12
    let mut _15: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:136:22: 136:37
    scope 1 {
        debug len => _2;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:123:9: 123:16
        let mut _5: *mut src::buffer::buffer_t; // in scope 1 at workspace/buffer_simple/src/buffer.rs:124:9: 124:19
        scope 2 {
            debug self_0 => _5;          // in scope 2 at workspace/buffer_simple/src/buffer.rs:124:9: 124:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:123:26: 123:29
        _3 = move _4 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:123:26: 123:29
        _2 = src::buffer::strlen(move _3) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:123:19: 123:30
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:123:19: 123:25
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:124:43: 124:46
        _5 = src::buffer::buffer_new_with_size(move _6) -> bb2; // scope 1 at workspace/buffer_simple/src/buffer.rs:124:22: 124:47
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:124:22: 124:42
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _8 = _5;                         // scope 2 at workspace/buffer_simple/src/buffer.rs:126:8: 126:14
        _7 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _8) -> bb3; // scope 2 at workspace/buffer_simple/src/buffer.rs:126:8: 126:24
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:126:15: 126:22
                                         // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        switchInt(move _7) -> [false: bb5, otherwise: bb4]; // scope 2 at workspace/buffer_simple/src/buffer.rs:126:8: 126:24
    }

    bb4: {
        _5 = const {0x0 as *mut src::buffer::buffer_t}; // scope 2 at workspace/buffer_simple/src/buffer.rs:127:9: 127:36
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:127:9: 127:36
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 2 at workspace/buffer_simple/src/buffer.rs:128:16: 128:34
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:128:16: 128:34
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb7;                     // scope 2 at no-location
    }

    bb5: {
        _11 = ((*_5).1: *mut i8);        // scope 2 at workspace/buffer_simple/src/buffer.rs:132:9: 132:24
        _10 = move _11 as *mut libc::c_void (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:132:9: 132:45
        _13 = _1;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:133:9: 133:12
        _12 = move _13 as *const libc::c_void (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:133:9: 133:35
        _14 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:134:9: 134:12
        _9 = src::buffer::memcpy(move _10, move _12, move _14) -> bb6; // scope 2 at workspace/buffer_simple/src/buffer.rs:131:5: 135:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:131:5: 131:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _15 = ((*_5).1: *mut i8);        // scope 2 at workspace/buffer_simple/src/buffer.rs:136:22: 136:37
        ((*_5).2: *mut i8) = move _15;   // scope 2 at workspace/buffer_simple/src/buffer.rs:136:5: 136:37
        _0 = _5;                         // scope 2 at workspace/buffer_simple/src/buffer.rs:137:12: 137:18
        goto -> bb7;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:137:5: 137:18
    }

    bb7: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:138:2: 138:2
    }
}
fn src::buffer::buffer_compact(_1: *mut src::buffer::buffer_t) -> i64 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:148:41: 148:51
    let mut _0: i64;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:148:71: 148:78
    let mut _2: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:149:9: 149:16
    let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:149:33: 149:39
    let mut _5: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:150:19: 150:32
    let mut _6: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:150:46: 150:49
    let mut _8: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:151:19: 151:77
    let mut _9: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:151:26: 151:59
    let mut _10: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:151:26: 151:29
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:151:43: 151:58
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:151:61: 151:76
    let mut _13: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:153:8: 153:21
    let mut _14: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:153:8: 153:11
    let _15: *mut libc::c_void;          // in scope 0 at workspace/buffer_simple/src/buffer.rs:158:5: 162:6
    let mut _16: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:159:9: 159:33
    let mut _17: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:159:9: 159:12
    let mut _18: *const libc::c_void;    // in scope 0 at workspace/buffer_simple/src/buffer.rs:160:9: 160:46
    let mut _19: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:160:9: 160:23
    let mut _20: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:161:9: 161:12
    let _21: ();                         // in scope 0 at workspace/buffer_simple/src/buffer.rs:163:5: 163:47
    let mut _22: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:163:10: 163:46
    let mut _23: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:163:10: 163:25
    let mut _24: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:164:21: 164:24
    let mut _25: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:165:23: 165:26
    let mut _26: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:166:22: 166:37
    let mut _27: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:167:12: 167:15
    scope 1 {
        debug len => _2;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:149:9: 149:16
        let mut _4: u64;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:150:9: 150:16
        scope 2 {
            debug rem => _4;             // in scope 2 at workspace/buffer_simple/src/buffer.rs:150:9: 150:16
            let mut _7: *mut i8;         // in scope 2 at workspace/buffer_simple/src/buffer.rs:151:9: 151:16
            scope 3 {
                debug buf => _7;         // in scope 3 at workspace/buffer_simple/src/buffer.rs:151:9: 151:16
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:149:33: 149:39
        _2 = src::buffer::buffer_length(move _3) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:149:19: 149:40
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:149:19: 149:32
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) -> u64 {src::buffer::buffer_length}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = ((*_1).0: u64);             // scope 1 at workspace/buffer_simple/src/buffer.rs:150:19: 150:32
        _6 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:150:46: 150:49
        _4 = core::num::<impl u64>::wrapping_sub(move _5, move _6) -> bb2; // scope 1 at workspace/buffer_simple/src/buffer.rs:150:19: 150:50
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:150:33: 150:45
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:151:26: 151:29
        _11 = const 1_u64;               // scope 2 at workspace/buffer_simple/src/buffer.rs:151:43: 151:58
        _9 = core::num::<impl u64>::wrapping_add(move _10, move _11) -> bb3; // scope 2 at workspace/buffer_simple/src/buffer.rs:151:26: 151:59
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:151:30: 151:42
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _12 = const 1_u64;               // scope 2 at workspace/buffer_simple/src/buffer.rs:151:61: 151:76
        _8 = src::buffer::calloc(move _9, move _12) -> bb4; // scope 2 at workspace/buffer_simple/src/buffer.rs:151:19: 151:77
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:151:19: 151:25
                                         // + literal: Const { ty: unsafe extern "C" fn(u64, u64) -> *mut libc::c_void {src::buffer::calloc}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _7 = move _8 as *mut i8 (Misc);  // scope 2 at workspace/buffer_simple/src/buffer.rs:151:19: 151:98
        _14 = _7;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:153:8: 153:11
        _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb5; // scope 3 at workspace/buffer_simple/src/buffer.rs:153:8: 153:21
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:153:12: 153:19
                                         // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        switchInt(move _13) -> [false: bb7, otherwise: bb6]; // scope 3 at workspace/buffer_simple/src/buffer.rs:153:8: 153:21
    }

    bb6: {
        _7 = const {0x0 as *mut i8};     // scope 3 at workspace/buffer_simple/src/buffer.rs:154:9: 154:37
                                         // ty::Const
                                         // + ty: *mut i8
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:154:9: 154:37
                                         // + literal: Const { ty: *mut i8, val: Value(Scalar(0x0000000000000000)) }
        _0 = const -1_i64;               // scope 3 at workspace/buffer_simple/src/buffer.rs:155:16: 155:38
        goto -> bb10;                    // scope 3 at no-location
    }

    bb7: {
        _17 = _7;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:159:9: 159:12
        _16 = move _17 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer_simple/src/buffer.rs:159:9: 159:33
        _19 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:160:9: 160:23
        _18 = move _19 as *const libc::c_void (Misc); // scope 3 at workspace/buffer_simple/src/buffer.rs:160:9: 160:46
        _20 = _2;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:161:9: 161:12
        _15 = src::buffer::memcpy(move _16, move _18, move _20) -> bb8; // scope 3 at workspace/buffer_simple/src/buffer.rs:158:5: 162:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:158:5: 158:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _23 = ((*_1).1: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:163:10: 163:25
        _22 = move _23 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer_simple/src/buffer.rs:163:10: 163:46
        _21 = src::buffer::free(move _22) -> bb9; // scope 3 at workspace/buffer_simple/src/buffer.rs:163:5: 163:47
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:163:5: 163:9
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _24 = _2;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:164:21: 164:24
        ((*_1).0: u64) = move _24;       // scope 3 at workspace/buffer_simple/src/buffer.rs:164:5: 164:24
        _25 = _7;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:165:23: 165:26
        ((*_1).1: *mut i8) = move _25;   // scope 3 at workspace/buffer_simple/src/buffer.rs:165:5: 165:26
        _26 = ((*_1).1: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:166:22: 166:37
        ((*_1).2: *mut i8) = move _26;   // scope 3 at workspace/buffer_simple/src/buffer.rs:166:5: 166:37
        _27 = _4;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:167:12: 167:15
        _0 = move _27 as i64 (Misc);     // scope 3 at workspace/buffer_simple/src/buffer.rs:167:12: 167:26
        goto -> bb10;                    // scope 3 at workspace/buffer_simple/src/buffer.rs:167:5: 167:26
    }

    bb10: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:168:2: 168:2
    }
}
fn src::buffer::buffer_length(_1: *mut src::buffer::buffer_t) -> u64 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:174:40: 174:50
    let mut _0: u64;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:174:70: 174:76
    let mut _2: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:175:19: 175:33
    let mut _3: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:175:19: 175:33

    bb0: {
        _3 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:175:19: 175:33
        _2 = move _3 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:175:19: 175:33
        _0 = src::buffer::strlen(move _2) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:175:12: 175:34
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:175:12: 175:18
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:176:2: 176:2
    }
}
fn src::buffer::buffer_free(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:182:38: 182:48
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:182:65: 182:65
    let _2: ();                          // in scope 0 at workspace/buffer_simple/src/buffer.rs:183:5: 183:47
    let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:183:10: 183:46
    let mut _4: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:183:10: 183:25
    let _5: ();                          // in scope 0 at workspace/buffer_simple/src/buffer.rs:184:5: 184:38
    let mut _6: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:184:10: 184:37
    let mut _7: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:184:10: 184:16

    bb0: {
        _4 = ((*_1).1: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:183:10: 183:25
        _3 = move _4 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:183:10: 183:46
        _2 = src::buffer::free(move _3) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:183:5: 183:47
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:183:5: 183:9
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:184:10: 184:16
        _6 = move _7 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:184:10: 184:37
        _5 = src::buffer::free(move _6) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:184:5: 184:38
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:184:5: 184:9
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:185:2: 185:2
    }
}
fn src::buffer::buffer_size(_1: *mut src::buffer::buffer_t) -> u64 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:193:38: 193:48
    let mut _0: u64;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:193:68: 193:74

    bb0: {
        _0 = ((*_1).0: u64);             // scope 0 at workspace/buffer_simple/src/buffer.rs:194:12: 194:25
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:195:2: 195:2
    }
}
fn src::buffer::buffer_resize(_1: *mut src::buffer::buffer_t, _2: u64) -> i32 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:203:40: 203:50
    debug n => _2;                       // in scope 0 at workspace/buffer_simple/src/buffer.rs:203:67: 203:72
    let mut _0: i32;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:203:85: 203:88
    let mut _3: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:204:9: 204:56
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:204:9: 204:10
    let mut _5: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:204:24: 204:55
    let mut _6: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:204:59: 204:91
    let mut _7: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:205:21: 205:22
    let mut _8: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:207:23: 210:6
    let mut _9: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:208:9: 208:45
    let mut _10: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:208:9: 208:24
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:209:9: 209:40
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:209:9: 209:10
    let mut _13: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:209:24: 209:39
    let mut _14: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:211:22: 211:37
    let mut _15: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:219:8: 219:33
    let mut _16: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:219:8: 219:23
    let mut _17: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:222:43: 222:57
    let mut _18: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:222:6: 222:40
    let mut _19: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:222:6: 222:21
    let mut _20: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:222:29: 222:39
    let mut _21: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:222:29: 222:30

    bb0: {
        _4 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:204:9: 204:10
        _5 = const 1023_u64;             // scope 0 at workspace/buffer_simple/src/buffer.rs:204:24: 204:55
        _3 = core::num::<impl u64>::wrapping_add(move _4, move _5) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:204:9: 204:56
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:204:11: 204:23
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = const 18446744073709550592_u64; // scope 0 at workspace/buffer_simple/src/buffer.rs:204:59: 204:91
        _2 = BitAnd(move _3, move _6);   // scope 0 at workspace/buffer_simple/src/buffer.rs:204:5: 204:91
        _7 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:205:21: 205:22
        ((*_1).0: u64) = move _7;        // scope 0 at workspace/buffer_simple/src/buffer.rs:205:5: 205:22
        _10 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer_simple/src/buffer.rs:208:9: 208:24
        _9 = move _10 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:208:9: 208:45
        _12 = _2;                        // scope 0 at workspace/buffer_simple/src/buffer.rs:209:9: 209:10
        _13 = const 1_u64;               // scope 0 at workspace/buffer_simple/src/buffer.rs:209:24: 209:39
        _11 = core::num::<impl u64>::wrapping_add(move _12, move _13) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:209:9: 209:40
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:209:11: 209:23
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _8 = src::buffer::realloc(move _9, move _11) -> bb3; // scope 0 at workspace/buffer_simple/src/buffer.rs:207:23: 210:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:207:23: 207:30
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, u64) -> *mut libc::c_void {src::buffer::realloc}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        ((*_1).1: *mut i8) = move _8 as *mut i8 (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:207:5: 210:27
        _14 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer_simple/src/buffer.rs:211:22: 211:37
        ((*_1).2: *mut i8) = move _14;   // scope 0 at workspace/buffer_simple/src/buffer.rs:211:5: 211:37
        _16 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer_simple/src/buffer.rs:219:8: 219:23
        _15 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _16) -> bb4; // scope 0 at workspace/buffer_simple/src/buffer.rs:219:8: 219:33
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:219:24: 219:31
                                         // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        switchInt(move _15) -> [false: bb6, otherwise: bb5]; // scope 0 at workspace/buffer_simple/src/buffer.rs:219:8: 219:33
    }

    bb5: {
        _0 = const -1_i32;               // scope 0 at workspace/buffer_simple/src/buffer.rs:220:16: 220:27
        goto -> bb8;                     // scope 0 at no-location
    }

    bb6: {
        _17 = const 0_i32;               // scope 0 at workspace/buffer_simple/src/buffer.rs:222:43: 222:57
        _19 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer_simple/src/buffer.rs:222:6: 222:21
        _21 = _2;                        // scope 0 at workspace/buffer_simple/src/buffer.rs:222:29: 222:30
        _20 = move _21 as isize (Misc);  // scope 0 at workspace/buffer_simple/src/buffer.rs:222:29: 222:39
        _18 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _19, move _20) -> bb7; // scope 0 at workspace/buffer_simple/src/buffer.rs:222:6: 222:40
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:222:22: 222:28
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        (*_18) = move _17 as i8 (Misc);  // scope 0 at workspace/buffer_simple/src/buffer.rs:222:5: 222:73
        _0 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:223:12: 223:13
        goto -> bb8;                     // scope 0 at workspace/buffer_simple/src/buffer.rs:223:5: 223:20
    }

    bb8: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:224:2: 224:2
    }
}
fn src::buffer::buffer_append(_1: *mut src::buffer::buffer_t, _2: *const i8) -> i32 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:288:5: 288:15
    debug str => _2;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:289:5: 289:12
    let mut _0: i32;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:290:6: 290:9
    let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:291:28: 291:34
    let mut _4: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:291:36: 291:39
    let mut _5: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:291:41: 291:52
    let mut _6: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:291:48: 291:51

    bb0: {
        _3 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:291:28: 291:34
        _4 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:291:36: 291:39
        _6 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:291:48: 291:51
        _5 = src::buffer::strlen(move _6) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:291:41: 291:52
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:291:41: 291:47
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = src::buffer::buffer_append_n(move _3, move _4, move _5) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:291:12: 291:53
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:291:12: 291:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, *const i8, u64) -> i32 {src::buffer::buffer_append_n}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:292:2: 292:2
    }
}
fn src::buffer::buffer_append_n(_1: *mut src::buffer::buffer_t, _2: *const i8, _3: u64) -> i32 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:299:5: 299:15
    debug str => _2;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:300:5: 300:12
    debug len => _3;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:301:5: 301:12
    let mut _0: i32;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:302:6: 302:9
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:303:9: 303:17
    let mut _5: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:303:27: 303:41
    let mut _6: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:303:27: 303:41
    let mut _8: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:304:22: 304:25
    let mut _9: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:304:39: 304:43
    let mut _10: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:306:8: 306:30
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:306:8: 306:21
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:306:24: 306:30
    let _13: *mut i8;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:307:9: 307:42
    let mut _14: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:307:17: 307:31
    let mut _15: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:307:33: 307:36
    let mut _16: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:307:38: 307:41
    let mut _18: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:311:33: 311:39
    let mut _19: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:311:41: 311:47
    let mut _20: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:312:8: 312:26
    let mut _21: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:312:8: 312:19
    let mut _22: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:312:23: 312:26
    let _23: *mut i8;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:315:5: 315:38
    let mut _24: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:315:13: 315:27
    let mut _25: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:315:29: 315:32
    let mut _26: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:315:34: 315:37
    scope 1 {
        debug prev => _4;                // in scope 1 at workspace/buffer_simple/src/buffer.rs:303:9: 303:17
        let mut _7: u64;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:304:9: 304:19
        scope 2 {
            debug needed => _7;          // in scope 2 at workspace/buffer_simple/src/buffer.rs:304:9: 304:19
            let mut _17: i32;            // in scope 2 at workspace/buffer_simple/src/buffer.rs:311:9: 311:16
            scope 3 {
                debug ret => _17;        // in scope 3 at workspace/buffer_simple/src/buffer.rs:311:9: 311:16
            }
        }
    }

    bb0: {
        _6 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:303:27: 303:41
        _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:303:27: 303:41
        _4 = src::buffer::strlen(move _5) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:303:20: 303:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:303:20: 303:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = _3;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:304:22: 304:25
        _9 = _4;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:304:39: 304:43
        _7 = core::num::<impl u64>::wrapping_add(move _8, move _9) -> bb2; // scope 1 at workspace/buffer_simple/src/buffer.rs:304:22: 304:44
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:304:26: 304:38
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = ((*_1).0: u64);            // scope 2 at workspace/buffer_simple/src/buffer.rs:306:8: 306:21
        _12 = _7;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:306:24: 306:30
        _10 = Gt(move _11, move _12);    // scope 2 at workspace/buffer_simple/src/buffer.rs:306:8: 306:30
        switchInt(move _10) -> [false: bb5, otherwise: bb3]; // scope 2 at workspace/buffer_simple/src/buffer.rs:306:8: 306:30
    }

    bb3: {
        _14 = ((*_1).2: *mut i8);        // scope 2 at workspace/buffer_simple/src/buffer.rs:307:17: 307:31
        _15 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:307:33: 307:36
        _16 = _3;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:307:38: 307:41
        _13 = src::buffer::strncat(move _14, move _15, move _16) -> bb4; // scope 2 at workspace/buffer_simple/src/buffer.rs:307:9: 307:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:307:9: 307:16
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *const i8, u64) -> *mut i8 {src::buffer::strncat}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = const 0_i32;                // scope 2 at workspace/buffer_simple/src/buffer.rs:308:16: 308:17
        goto -> bb10;                    // scope 2 at no-location
    }

    bb5: {
        _18 = _1;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:311:33: 311:39
        _19 = _7;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:311:41: 311:47
        _17 = src::buffer::buffer_resize(move _18, move _19) -> bb6; // scope 2 at workspace/buffer_simple/src/buffer.rs:311:19: 311:48
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:311:19: 311:32
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, u64) -> i32 {src::buffer::buffer_resize}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _21 = const -1_i32;              // scope 3 at workspace/buffer_simple/src/buffer.rs:312:8: 312:19
        _22 = _17;                       // scope 3 at workspace/buffer_simple/src/buffer.rs:312:23: 312:26
        _20 = Eq(move _21, move _22);    // scope 3 at workspace/buffer_simple/src/buffer.rs:312:8: 312:26
        switchInt(move _20) -> [false: bb8, otherwise: bb7]; // scope 3 at workspace/buffer_simple/src/buffer.rs:312:8: 312:26
    }

    bb7: {
        _0 = const -1_i32;               // scope 3 at workspace/buffer_simple/src/buffer.rs:313:16: 313:27
        goto -> bb10;                    // scope 3 at no-location
    }

    bb8: {
        _24 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:315:13: 315:27
        _25 = _2;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:315:29: 315:32
        _26 = _3;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:315:34: 315:37
        _23 = src::buffer::strncat(move _24, move _25, move _26) -> bb9; // scope 3 at workspace/buffer_simple/src/buffer.rs:315:5: 315:38
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:315:5: 315:12
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *const i8, u64) -> *mut i8 {src::buffer::strncat}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _0 = const 0_i32;                // scope 3 at workspace/buffer_simple/src/buffer.rs:316:12: 316:13
        goto -> bb10;                    // scope 3 at workspace/buffer_simple/src/buffer.rs:316:5: 316:20
    }

    bb10: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:317:2: 317:2
    }
}
fn src::buffer::buffer_prepend(_1: *mut src::buffer::buffer_t, _2: *mut i8) -> i32 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:323:5: 323:15
    debug str => _2;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:324:5: 324:12
    let mut _0: i32;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:325:6: 325:9
    let mut _3: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:326:9: 326:16
    let mut _5: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:327:26: 327:29
    let mut _6: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:327:26: 327:29
    let mut _8: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:328:27: 328:41
    let mut _9: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:328:27: 328:41
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:329:22: 329:25
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:329:39: 329:43
    let mut _13: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:331:8: 331:33
    let mut _14: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:331:9: 331:33
    let mut _15: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:331:10: 331:23
    let mut _16: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:331:26: 331:32
    let mut _17: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:333:15: 333:44
    let mut _18: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:333:29: 333:35
    let mut _19: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:333:37: 333:43
    let mut _20: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:334:12: 334:30
    let mut _21: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:334:12: 334:23
    let mut _22: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:334:27: 334:30
    let _23: *mut libc::c_void;          // in scope 0 at workspace/buffer_simple/src/buffer.rs:339:5: 343:6
    let mut _24: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:340:9: 340:65
    let mut _25: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:340:9: 340:44
    let mut _26: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:340:9: 340:23
    let mut _27: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:340:31: 340:43
    let mut _28: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:340:31: 340:34
    let mut _29: *const libc::c_void;    // in scope 0 at workspace/buffer_simple/src/buffer.rs:341:9: 341:46
    let mut _30: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:341:9: 341:23
    let mut _31: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:342:9: 342:42
    let mut _32: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:342:9: 342:12
    let mut _33: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:342:26: 342:41
    let _34: *mut libc::c_void;          // in scope 0 at workspace/buffer_simple/src/buffer.rs:344:5: 348:6
    let mut _35: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:345:9: 345:44
    let mut _36: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:345:9: 345:23
    let mut _37: *const libc::c_void;    // in scope 0 at workspace/buffer_simple/src/buffer.rs:346:9: 346:35
    let mut _38: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:346:9: 346:12
    let mut _39: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:347:9: 347:12
    scope 1 {
        debug ret => _3;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:326:9: 326:16
        let mut _4: u64;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:327:9: 327:16
        scope 2 {
            debug len => _4;             // in scope 2 at workspace/buffer_simple/src/buffer.rs:327:9: 327:16
            let mut _7: u64;             // in scope 2 at workspace/buffer_simple/src/buffer.rs:328:9: 328:17
            scope 3 {
                debug prev => _7;        // in scope 3 at workspace/buffer_simple/src/buffer.rs:328:9: 328:17
                let mut _10: u64;        // in scope 3 at workspace/buffer_simple/src/buffer.rs:329:9: 329:19
                scope 4 {
                    debug needed => _10; // in scope 4 at workspace/buffer_simple/src/buffer.rs:329:9: 329:19
                }
            }
        }
    }

    bb0: {
        _3 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:326:24: 326:25
        _6 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:327:26: 327:29
        _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 1 at workspace/buffer_simple/src/buffer.rs:327:26: 327:29
        _4 = src::buffer::strlen(move _5) -> bb1; // scope 1 at workspace/buffer_simple/src/buffer.rs:327:19: 327:30
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:327:19: 327:25
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = ((*_1).2: *mut i8);         // scope 2 at workspace/buffer_simple/src/buffer.rs:328:27: 328:41
        _8 = move _9 as *const i8 (Pointer(MutToConstPointer)); // scope 2 at workspace/buffer_simple/src/buffer.rs:328:27: 328:41
        _7 = src::buffer::strlen(move _8) -> bb2; // scope 2 at workspace/buffer_simple/src/buffer.rs:328:20: 328:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:328:20: 328:26
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = _4;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:329:22: 329:25
        _12 = _7;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:329:39: 329:43
        _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb3; // scope 3 at workspace/buffer_simple/src/buffer.rs:329:22: 329:44
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:329:26: 329:38
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _15 = ((*_1).0: u64);            // scope 4 at workspace/buffer_simple/src/buffer.rs:331:10: 331:23
        _16 = _10;                       // scope 4 at workspace/buffer_simple/src/buffer.rs:331:26: 331:32
        _14 = Gt(move _15, move _16);    // scope 4 at workspace/buffer_simple/src/buffer.rs:331:9: 331:33
        _13 = Not(move _14);             // scope 4 at workspace/buffer_simple/src/buffer.rs:331:8: 331:33
        switchInt(move _13) -> [false: bb7, otherwise: bb4]; // scope 4 at workspace/buffer_simple/src/buffer.rs:331:8: 331:33
    }

    bb4: {
        _18 = _1;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:333:29: 333:35
        _19 = _10;                       // scope 4 at workspace/buffer_simple/src/buffer.rs:333:37: 333:43
        _17 = src::buffer::buffer_resize(move _18, move _19) -> bb5; // scope 4 at workspace/buffer_simple/src/buffer.rs:333:15: 333:44
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:333:15: 333:28
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, u64) -> i32 {src::buffer::buffer_resize}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _3 = move _17;                   // scope 4 at workspace/buffer_simple/src/buffer.rs:333:9: 333:44
        _21 = const -1_i32;              // scope 4 at workspace/buffer_simple/src/buffer.rs:334:12: 334:23
        _22 = _3;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:334:27: 334:30
        _20 = Eq(move _21, move _22);    // scope 4 at workspace/buffer_simple/src/buffer.rs:334:12: 334:30
        switchInt(move _20) -> [false: bb7, otherwise: bb6]; // scope 4 at workspace/buffer_simple/src/buffer.rs:334:12: 334:30
    }

    bb6: {
        _0 = const -1_i32;               // scope 4 at workspace/buffer_simple/src/buffer.rs:335:20: 335:31
        goto -> bb12;                    // scope 4 at no-location
    }

    bb7: {
        _26 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer_simple/src/buffer.rs:340:9: 340:23
        _28 = _4;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:340:31: 340:34
        _27 = move _28 as isize (Misc);  // scope 4 at workspace/buffer_simple/src/buffer.rs:340:31: 340:43
        _25 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _26, move _27) -> bb8; // scope 4 at workspace/buffer_simple/src/buffer.rs:340:9: 340:44
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:340:24: 340:30
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _24 = move _25 as *mut libc::c_void (Misc); // scope 4 at workspace/buffer_simple/src/buffer.rs:340:9: 340:65
        _30 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer_simple/src/buffer.rs:341:9: 341:23
        _29 = move _30 as *const libc::c_void (Misc); // scope 4 at workspace/buffer_simple/src/buffer.rs:341:9: 341:46
        _32 = _4;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:342:9: 342:12
        _33 = const 1_u64;               // scope 4 at workspace/buffer_simple/src/buffer.rs:342:26: 342:41
        _31 = core::num::<impl u64>::wrapping_add(move _32, move _33) -> bb9; // scope 4 at workspace/buffer_simple/src/buffer.rs:342:9: 342:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:342:13: 342:25
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _23 = src::buffer::memmove(move _24, move _29, move _31) -> bb10; // scope 4 at workspace/buffer_simple/src/buffer.rs:339:5: 343:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:339:5: 339:12
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memmove}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _36 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer_simple/src/buffer.rs:345:9: 345:23
        _35 = move _36 as *mut libc::c_void (Misc); // scope 4 at workspace/buffer_simple/src/buffer.rs:345:9: 345:44
        _38 = _2;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:346:9: 346:12
        _37 = move _38 as *const libc::c_void (Misc); // scope 4 at workspace/buffer_simple/src/buffer.rs:346:9: 346:35
        _39 = _4;                        // scope 4 at workspace/buffer_simple/src/buffer.rs:347:9: 347:12
        _34 = src::buffer::memcpy(move _35, move _37, move _39) -> bb11; // scope 4 at workspace/buffer_simple/src/buffer.rs:344:5: 348:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:344:5: 344:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _0 = const 0_i32;                // scope 4 at workspace/buffer_simple/src/buffer.rs:349:12: 349:13
        goto -> bb12;                    // scope 4 at workspace/buffer_simple/src/buffer.rs:349:5: 349:20
    }

    bb12: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:350:2: 350:2
    }
}
fn src::buffer::buffer_slice(_1: *mut src::buffer::buffer_t, _2: u64, _3: i64) -> *mut src::buffer::buffer_t {
    debug buf => _1;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:357:5: 357:12
    debug from => _2;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:358:5: 358:13
    debug to => _3;                      // in scope 0 at workspace/buffer_simple/src/buffer.rs:359:5: 359:11
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:360:6: 360:19
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:361:9: 361:16
    let mut _5: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:361:26: 361:37
    let mut _6: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:361:26: 361:37
    let mut _7: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:363:8: 363:26
    let mut _8: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:363:8: 363:19
    let mut _9: i64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:363:9: 363:11
    let mut _10: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:363:22: 363:26
    let mut _11: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:367:8: 367:37
    let mut _12: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:367:8: 367:10
    let mut _13: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:367:13: 367:37
    let mut _14: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:368:14: 368:42
    let mut _15: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:368:14: 368:17
    let mut _16: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:368:31: 368:41
    let mut _17: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:368:31: 368:34
    let mut _18: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:368:32: 368:34
    let mut _19: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:371:8: 371:23
    let mut _20: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:371:8: 371:17
    let mut _21: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:371:8: 371:10
    let mut _22: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:371:20: 371:23
    let mut _23: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:372:14: 372:17
    let mut _25: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:374:17: 374:28
    let mut _26: i64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:374:18: 374:20
    let mut _27: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:374:42: 374:46
    let mut _29: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:375:43: 375:44
    let _30: *mut libc::c_void;          // in scope 0 at workspace/buffer_simple/src/buffer.rs:376:5: 380:6
    let mut _31: *mut libc::c_void;      // in scope 0 at workspace/buffer_simple/src/buffer.rs:377:9: 377:44
    let mut _32: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:377:9: 377:23
    let mut _33: *const libc::c_void;    // in scope 0 at workspace/buffer_simple/src/buffer.rs:378:9: 378:65
    let mut _34: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:378:9: 378:42
    let mut _35: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:378:9: 378:20
    let mut _36: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:378:28: 378:41
    let mut _37: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:378:28: 378:32
    let mut _38: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:379:9: 379:10
    scope 1 {
        debug len => _4;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:361:9: 361:16
        let mut _24: u64;                // in scope 1 at workspace/buffer_simple/src/buffer.rs:374:9: 374:14
        scope 2 {
            debug n => _24;              // in scope 2 at workspace/buffer_simple/src/buffer.rs:374:9: 374:14
            let mut _28: *mut src::buffer::buffer_t; // in scope 2 at workspace/buffer_simple/src/buffer.rs:375:9: 375:19
            scope 3 {
                debug self_0 => _28;     // in scope 3 at workspace/buffer_simple/src/buffer.rs:375:9: 375:19
            }
        }
    }

    bb0: {
        _6 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:361:26: 361:37
        _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:361:26: 361:37
        _4 = src::buffer::strlen(move _5) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:361:19: 361:38
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:361:19: 361:25
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = _3;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:363:9: 363:11
        _8 = move _9 as u64 (Misc);      // scope 1 at workspace/buffer_simple/src/buffer.rs:363:8: 363:19
        _10 = _2;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:363:22: 363:26
        _7 = Lt(move _8, move _10);      // scope 1 at workspace/buffer_simple/src/buffer.rs:363:8: 363:26
        switchInt(move _7) -> [false: bb3, otherwise: bb2]; // scope 1 at workspace/buffer_simple/src/buffer.rs:363:8: 363:26
    }

    bb2: {
        _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer_simple/src/buffer.rs:364:16: 364:34
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:364:16: 364:34
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb13;                    // scope 1 at no-location
    }

    bb3: {
        _12 = _3;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:367:8: 367:10
        _13 = const 0_i64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:367:13: 367:37
        _11 = Lt(move _12, move _13);    // scope 1 at workspace/buffer_simple/src/buffer.rs:367:8: 367:37
        switchInt(move _11) -> [false: bb6, otherwise: bb4]; // scope 1 at workspace/buffer_simple/src/buffer.rs:367:8: 367:37
    }

    bb4: {
        _15 = _4;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:368:14: 368:17
        _18 = _3;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:368:32: 368:34
        _17 = Not(move _18);             // scope 1 at workspace/buffer_simple/src/buffer.rs:368:31: 368:34
        _16 = move _17 as u64 (Misc);    // scope 1 at workspace/buffer_simple/src/buffer.rs:368:31: 368:41
        _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> bb5; // scope 1 at workspace/buffer_simple/src/buffer.rs:368:14: 368:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:368:18: 368:30
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _3 = move _14 as i64 (Misc);     // scope 1 at workspace/buffer_simple/src/buffer.rs:368:9: 368:53
        goto -> bb6;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:367:5: 369:6
    }

    bb6: {
        _21 = _3;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:371:8: 371:10
        _20 = move _21 as u64 (Misc);    // scope 1 at workspace/buffer_simple/src/buffer.rs:371:8: 371:17
        _22 = _4;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:371:20: 371:23
        _19 = Gt(move _20, move _22);    // scope 1 at workspace/buffer_simple/src/buffer.rs:371:8: 371:23
        switchInt(move _19) -> [false: bb8, otherwise: bb7]; // scope 1 at workspace/buffer_simple/src/buffer.rs:371:8: 371:23
    }

    bb7: {
        _23 = _4;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:372:14: 372:17
        _3 = move _23 as i64 (Misc);     // scope 1 at workspace/buffer_simple/src/buffer.rs:372:9: 372:28
        goto -> bb8;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:371:5: 373:6
    }

    bb8: {
        _26 = _3;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:374:18: 374:20
        _25 = move _26 as u64 (Misc);    // scope 1 at workspace/buffer_simple/src/buffer.rs:374:17: 374:28
        _27 = _2;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:374:42: 374:46
        _24 = core::num::<impl u64>::wrapping_sub(move _25, move _27) -> bb9; // scope 1 at workspace/buffer_simple/src/buffer.rs:374:17: 374:47
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:374:29: 374:41
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _29 = _24;                       // scope 2 at workspace/buffer_simple/src/buffer.rs:375:43: 375:44
        _28 = src::buffer::buffer_new_with_size(move _29) -> bb10; // scope 2 at workspace/buffer_simple/src/buffer.rs:375:22: 375:45
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:375:22: 375:42
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _32 = ((*_28).2: *mut i8);       // scope 3 at workspace/buffer_simple/src/buffer.rs:377:9: 377:23
        _31 = move _32 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer_simple/src/buffer.rs:377:9: 377:44
        _35 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:378:9: 378:20
        _37 = _2;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:378:28: 378:32
        _36 = move _37 as isize (Misc);  // scope 3 at workspace/buffer_simple/src/buffer.rs:378:28: 378:41
        _34 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _35, move _36) -> bb11; // scope 3 at workspace/buffer_simple/src/buffer.rs:378:9: 378:42
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:378:21: 378:27
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _33 = move _34 as *const libc::c_void (Misc); // scope 3 at workspace/buffer_simple/src/buffer.rs:378:9: 378:65
        _38 = _24;                       // scope 3 at workspace/buffer_simple/src/buffer.rs:379:9: 379:10
        _30 = src::buffer::memcpy(move _31, move _33, move _38) -> bb12; // scope 3 at workspace/buffer_simple/src/buffer.rs:376:5: 380:6
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:376:5: 376:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _0 = _28;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:381:12: 381:18
        goto -> bb13;                    // scope 1 at no-location
    }

    bb13: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:382:2: 382:2
    }
}
fn src::buffer::buffer_equals(_1: *mut src::buffer::buffer_t, _2: *mut src::buffer::buffer_t) -> i32 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:387:40: 387:50
    debug other => _2;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:387:67: 387:76
    let mut _0: i32;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:387:96: 387:99
    let mut _3: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:12: 388:63
    let mut _4: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:13: 388:21
    let mut _5: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:25: 388:62
    let mut _6: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:32: 388:46
    let mut _7: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:32: 388:46
    let mut _8: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:48: 388:61
    let mut _9: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:388:48: 388:61

    bb0: {
        _4 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:388:13: 388:14
        _7 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:388:32: 388:46
        _6 = move _7 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:388:32: 388:46
        _9 = ((*_2).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:388:48: 388:61
        _8 = move _9 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:388:48: 388:61
        _5 = src::buffer::strcmp(move _6, move _8) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:388:25: 388:62
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:388:25: 388:31
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8) -> i32 {src::buffer::strcmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = Eq(move _4, move _5);       // scope 0 at workspace/buffer_simple/src/buffer.rs:388:12: 388:63
        _0 = move _3 as i32 (Misc);      // scope 0 at workspace/buffer_simple/src/buffer.rs:388:12: 388:70
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:389:2: 389:2
    }
}
fn src::buffer::buffer_indexof(_1: *mut src::buffer::buffer_t, _2: *mut i8) -> i64 {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:395:5: 395:15
    debug str => _2;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:396:5: 396:12
    let mut _0: i64;                     // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:397:6: 397:13
    let mut _3: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:398:9: 398:16
    let mut _4: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:398:26: 398:40
    let mut _5: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:398:26: 398:40
    let mut _6: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:398:42: 398:45
    let mut _7: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:398:42: 398:45
    let mut _8: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:399:8: 399:21
    let mut _9: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:399:8: 399:11
    let mut _10: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:402:12: 402:43
    let mut _11: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:402:12: 402:15
    let mut _12: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:402:28: 402:42
    let mut _13: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:402:28: 402:42
    scope 1 {
        debug sub => _3;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:398:9: 398:16
    }

    bb0: {
        _5 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:398:26: 398:40
        _4 = move _5 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:398:26: 398:40
        _7 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:398:42: 398:45
        _6 = move _7 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer_simple/src/buffer.rs:398:42: 398:45
        _3 = src::buffer::strstr(move _4, move _6) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:398:19: 398:46
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:398:19: 398:25
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8) -> *mut i8 {src::buffer::strstr}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = _3;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:399:8: 399:11
        _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb2; // scope 1 at workspace/buffer_simple/src/buffer.rs:399:8: 399:21
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:399:12: 399:19
                                         // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        switchInt(move _8) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer_simple/src/buffer.rs:399:8: 399:21
    }

    bb3: {
        _0 = const -1_i64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:400:16: 400:38
        goto -> bb6;                     // scope 1 at no-location
    }

    bb4: {
        _11 = _3;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:402:12: 402:15
        _13 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer_simple/src/buffer.rs:402:28: 402:42
        _12 = move _13 as *const i8 (Pointer(MutToConstPointer)); // scope 1 at workspace/buffer_simple/src/buffer.rs:402:28: 402:42
        _10 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _11, move _12) -> bb5; // scope 1 at workspace/buffer_simple/src/buffer.rs:402:12: 402:43
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:402:16: 402:27
                                         // + literal: Const { ty: unsafe fn(*mut i8, *const i8) -> isize {std::ptr::mut_ptr::<impl *mut i8>::offset_from}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = move _10 as i64 (Misc);     // scope 1 at workspace/buffer_simple/src/buffer.rs:402:12: 402:59
        goto -> bb6;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:402:5: 402:59
    }

    bb6: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:403:2: 403:2
    }
}
fn src::buffer::buffer_trim_left(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:408:43: 408:53
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:408:70: 408:70
    let mut _2: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:409:9: 409:14
    let mut _3: i8;                      // in scope 0 at workspace/buffer_simple/src/buffer.rs:411:13: 411:28
    let mut _4: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:412:12: 413:66
    let mut _5: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
    let mut _6: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:412:14: 412:15
    let mut _7: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:413:16: 413:65
    let mut _8: char;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:413:16: 413:49
    let mut _9: std::option::Option<char>; // in scope 0 at workspace/buffer_simple/src/buffer.rs:413:16: 413:40
    let mut _10: u32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:413:31: 413:39
    let mut _11: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:413:31: 413:32
    let mut _12: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:421:26: 421:50
    let mut _13: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:421:26: 421:40
    scope 1 {
        debug c => _2;                   // in scope 1 at workspace/buffer_simple/src/buffer.rs:409:9: 409:14
    }

    bb0: {
        _2 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:409:22: 409:23
        goto -> bb1;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:410:5: 422:6
    }

    bb1: {
        _3 = (*((*_1).2: *mut i8));      // scope 1 at workspace/buffer_simple/src/buffer.rs:411:13: 411:28
        _2 = move _3 as i32 (Misc);      // scope 1 at workspace/buffer_simple/src/buffer.rs:411:9: 411:35
        _6 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:412:14: 412:15
        switchInt(move _6) -> [0_i32: bb2, otherwise: bb3]; // scope 1 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
    }

    bb2: {
        _5 = const false;                // scope 1 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
        goto -> bb4;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
    }

    bb3: {
        _11 = _2;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:413:31: 413:32
        _10 = move _11 as u32 (Misc);    // scope 1 at workspace/buffer_simple/src/buffer.rs:413:31: 413:39
        _9 = std::char::methods::<impl char>::from_u32(move _10) -> bb5; // scope 1 at workspace/buffer_simple/src/buffer.rs:413:16: 413:40
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:413:16: 413:30
                                         // + literal: Const { ty: fn(u32) -> std::option::Option<char> {std::char::methods::<impl char>::from_u32}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _4 = Not(move _5);               // scope 1 at workspace/buffer_simple/src/buffer.rs:412:12: 413:66
        switchInt(move _4) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer_simple/src/buffer.rs:412:12: 413:66
    }

    bb5: {
        _8 = std::option::Option::<char>::unwrap(move _9) -> bb6; // scope 1 at workspace/buffer_simple/src/buffer.rs:413:16: 413:49
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:413:41: 413:47
                                         // + literal: Const { ty: fn(std::option::Option<char>) -> char {std::option::Option::<char>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _7 = std::char::methods::<impl char>::is_whitespace(move _8) -> bb7; // scope 1 at workspace/buffer_simple/src/buffer.rs:413:16: 413:65
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:413:50: 413:63
                                         // + literal: Const { ty: fn(char) -> bool {std::char::methods::<impl char>::is_whitespace}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _5 = move _7;                    // scope 1 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
        goto -> bb4;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:412:13: 413:66
    }

    bb8: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:423:2: 423:2
    }

    bb9: {
        _13 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer_simple/src/buffer.rs:421:26: 421:40
        _12 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _13, const 1_isize) -> bb10; // scope 1 at workspace/buffer_simple/src/buffer.rs:421:26: 421:50
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:421:41: 421:47
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        ((*_1).2: *mut i8) = move _12;   // scope 1 at workspace/buffer_simple/src/buffer.rs:421:9: 421:50
        goto -> bb1;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:410:5: 422:6
    }
}
fn src::buffer::buffer_trim_right(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:428:44: 428:54
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:428:71: 428:71
    let mut _2: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:429:9: 429:14
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:430:17: 430:38
    let mut _5: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:430:31: 430:37
    let mut _6: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:430:52: 430:67
    let mut _7: i8;                      // in scope 0 at workspace/buffer_simple/src/buffer.rs:432:13: 432:47
    let mut _8: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:432:14: 432:47
    let mut _9: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:432:14: 432:28
    let mut _10: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:432:36: 432:46
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:432:36: 432:37
    let mut _12: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:433:12: 434:66
    let mut _13: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
    let mut _14: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:433:14: 433:15
    let mut _15: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:434:16: 434:65
    let mut _16: char;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:434:16: 434:49
    let mut _17: std::option::Option<char>; // in scope 0 at workspace/buffer_simple/src/buffer.rs:434:16: 434:40
    let mut _18: u32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:434:31: 434:39
    let mut _19: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:434:31: 434:32
    let mut _21: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:439:13: 439:30
    let mut _22: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:439:13: 439:14
    let mut _23: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:440:51: 440:59
    let mut _24: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:440:10: 440:48
    let mut _25: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:440:10: 440:24
    let mut _26: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:440:32: 440:47
    let mut _27: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:440:32: 440:38
    scope 1 {
        debug c => _2;                   // in scope 1 at workspace/buffer_simple/src/buffer.rs:429:9: 429:14
        let mut _3: u64;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:430:9: 430:14
        scope 2 {
            debug i => _3;               // in scope 2 at workspace/buffer_simple/src/buffer.rs:430:9: 430:14
            let _20: u64;                // in scope 2 at workspace/buffer_simple/src/buffer.rs:438:13: 438:19
            scope 3 {
                debug fresh0 => _20;     // in scope 3 at workspace/buffer_simple/src/buffer.rs:438:13: 438:19
            }
        }
    }

    bb0: {
        _2 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:429:22: 429:23
        _5 = _1;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:430:31: 430:37
        _4 = src::buffer::buffer_length(move _5) -> bb1; // scope 1 at workspace/buffer_simple/src/buffer.rs:430:17: 430:38
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:430:17: 430:30
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) -> u64 {src::buffer::buffer_length}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = const 1_u64;                // scope 1 at workspace/buffer_simple/src/buffer.rs:430:52: 430:67
        _3 = core::num::<impl u64>::wrapping_sub(move _4, move _6) -> bb2; // scope 1 at workspace/buffer_simple/src/buffer.rs:430:17: 430:68
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:430:39: 430:51
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _9 = ((*_1).2: *mut i8);         // scope 2 at workspace/buffer_simple/src/buffer.rs:432:14: 432:28
        _11 = _3;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:432:36: 432:37
        _10 = move _11 as isize (Misc);  // scope 2 at workspace/buffer_simple/src/buffer.rs:432:36: 432:46
        _8 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _9, move _10) -> bb3; // scope 2 at workspace/buffer_simple/src/buffer.rs:432:14: 432:47
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:432:29: 432:35
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = (*_8);                      // scope 2 at workspace/buffer_simple/src/buffer.rs:432:13: 432:47
        _2 = move _7 as i32 (Misc);      // scope 2 at workspace/buffer_simple/src/buffer.rs:432:9: 432:54
        _14 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:433:14: 433:15
        switchInt(move _14) -> [0_i32: bb4, otherwise: bb5]; // scope 2 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
    }

    bb4: {
        _13 = const false;               // scope 2 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
        goto -> bb6;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
    }

    bb5: {
        _19 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:434:31: 434:32
        _18 = move _19 as u32 (Misc);    // scope 2 at workspace/buffer_simple/src/buffer.rs:434:31: 434:39
        _17 = std::char::methods::<impl char>::from_u32(move _18) -> bb7; // scope 2 at workspace/buffer_simple/src/buffer.rs:434:16: 434:40
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:434:16: 434:30
                                         // + literal: Const { ty: fn(u32) -> std::option::Option<char> {std::char::methods::<impl char>::from_u32}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _12 = Not(move _13);             // scope 2 at workspace/buffer_simple/src/buffer.rs:433:12: 434:66
        switchInt(move _12) -> [false: bb11, otherwise: bb10]; // scope 2 at workspace/buffer_simple/src/buffer.rs:433:12: 434:66
    }

    bb7: {
        _16 = std::option::Option::<char>::unwrap(move _17) -> bb8; // scope 2 at workspace/buffer_simple/src/buffer.rs:434:16: 434:49
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:434:41: 434:47
                                         // + literal: Const { ty: fn(std::option::Option<char>) -> char {std::option::Option::<char>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _15 = std::char::methods::<impl char>::is_whitespace(move _16) -> bb9; // scope 2 at workspace/buffer_simple/src/buffer.rs:434:16: 434:65
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:434:50: 434:63
                                         // + literal: Const { ty: fn(char) -> bool {std::char::methods::<impl char>::is_whitespace}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _13 = move _15;                  // scope 2 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
        goto -> bb6;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:433:13: 434:66
    }

    bb10: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:442:2: 442:2
    }

    bb11: {
        _20 = _3;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:438:22: 438:23
        _22 = _3;                        // scope 3 at workspace/buffer_simple/src/buffer.rs:439:13: 439:14
        _21 = core::num::<impl u64>::wrapping_sub(move _22, const 1_u64) -> bb12; // scope 3 at workspace/buffer_simple/src/buffer.rs:439:13: 439:30
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:439:15: 439:27
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _3 = move _21;                   // scope 3 at workspace/buffer_simple/src/buffer.rs:439:9: 439:30
        _23 = const 0_i32;               // scope 3 at workspace/buffer_simple/src/buffer.rs:440:51: 440:52
        _25 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer_simple/src/buffer.rs:440:10: 440:24
        _27 = _20;                       // scope 3 at workspace/buffer_simple/src/buffer.rs:440:32: 440:38
        _26 = move _27 as isize (Misc);  // scope 3 at workspace/buffer_simple/src/buffer.rs:440:32: 440:47
        _24 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _25, move _26) -> bb13; // scope 3 at workspace/buffer_simple/src/buffer.rs:440:10: 440:48
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:440:25: 440:31
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        (*_24) = move _23 as i8 (Misc);  // scope 3 at workspace/buffer_simple/src/buffer.rs:440:9: 440:75
        goto -> bb2;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:431:5: 441:6
    }
}
fn src::buffer::buffer_trim(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:447:38: 447:48
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:447:65: 447:65
    let _2: ();                          // in scope 0 at workspace/buffer_simple/src/buffer.rs:448:5: 448:29
    let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:448:22: 448:28
    let _4: ();                          // in scope 0 at workspace/buffer_simple/src/buffer.rs:449:5: 449:30
    let mut _5: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:449:23: 449:29

    bb0: {
        _3 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:448:22: 448:28
        _2 = src::buffer::buffer_trim_left(move _3) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:448:5: 448:29
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:448:5: 448:21
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) {src::buffer::buffer_trim_left}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:449:23: 449:29
        _4 = src::buffer::buffer_trim_right(move _5) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:449:5: 449:30
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:449:5: 449:22
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) {src::buffer::buffer_trim_right}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:450:2: 450:2
    }
}
fn src::buffer::buffer_fill(_1: *mut src::buffer::buffer_t, _2: i32) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:455:38: 455:48
    debug c => _2;                       // in scope 0 at workspace/buffer_simple/src/buffer.rs:455:65: 455:70
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:455:77: 455:77
    let _3: *mut libc::c_void;           // in scope 0 at workspace/buffer_simple/src/buffer.rs:456:5: 456:66
    let mut _4: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:456:12: 456:47
    let mut _5: *mut i8;                 // in scope 0 at workspace/buffer_simple/src/buffer.rs:456:12: 456:26
    let mut _6: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:456:49: 456:50
    let mut _7: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:456:52: 456:65

    bb0: {
        _5 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer_simple/src/buffer.rs:456:12: 456:26
        _4 = move _5 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:456:12: 456:47
        _6 = _2;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:456:49: 456:50
        _7 = ((*_1).0: u64);             // scope 0 at workspace/buffer_simple/src/buffer.rs:456:52: 456:65
        _3 = src::buffer::memset(move _4, move _6, move _7) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:456:5: 456:66
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:456:5: 456:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, i32, u64) -> *mut libc::c_void {src::buffer::memset}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:457:2: 457:2
    }
}
fn src::buffer::buffer_clear(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:462:39: 462:49
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:462:66: 462:66
    let _2: ();                          // in scope 0 at workspace/buffer_simple/src/buffer.rs:463:5: 463:34
    let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:463:17: 463:23
    let mut _4: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:463:25: 463:33

    bb0: {
        _3 = _1;                         // scope 0 at workspace/buffer_simple/src/buffer.rs:463:17: 463:23
        _4 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:463:25: 463:26
        _2 = src::buffer::buffer_fill(move _3, move _4) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:463:5: 463:34
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:463:5: 463:16
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, i32) {src::buffer::buffer_fill}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:464:2: 464:2
    }
}
fn src::buffer::buffer_print(_1: *mut src::buffer::buffer_t) -> () {
    debug self_0 => _1;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:469:39: 469:49
    let mut _0: ();                      // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:469:66: 469:66
    let mut _2: i32;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:470:9: 470:14
    let _4: i32;                         // in scope 0 at workspace/buffer_simple/src/buffer.rs:472:5: 472:59
    let mut _5: *const i8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:472:12: 472:58
    let mut _6: *const u8;               // in scope 0 at workspace/buffer_simple/src/buffer.rs:472:12: 472:35
    let mut _7: *const [u8; 3];          // in scope 0 at workspace/buffer_simple/src/buffer.rs:472:12: 472:22
    let _8: &[u8; 3];                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:472:12: 472:22
    let mut _9: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:475:11: 475:27
    let mut _10: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:475:11: 475:21
    let mut _11: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:475:12: 475:13
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:475:24: 475:27
    let _13: i32;                        // in scope 0 at workspace/buffer_simple/src/buffer.rs:476:9: 479:10
    let mut _14: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:477:13: 477:61
    let mut _15: *const u8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:477:13: 477:38
    let mut _16: *const [u8; 6];         // in scope 0 at workspace/buffer_simple/src/buffer.rs:477:13: 477:25
    let _17: &[u8; 6];                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:477:13: 477:25
    let mut _18: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:13: 478:55
    let mut _19: i8;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:13: 478:48
    let mut _20: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:14: 478:48
    let mut _21: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:14: 478:29
    let mut _22: isize;                  // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:37: 478:47
    let mut _23: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:478:37: 478:38
    let mut _24: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:49
    let mut _25: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
    let mut _26: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:26
    let mut _27: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:13: 480:14
    let mut _28: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:17: 480:25
    let mut _29: (i32, bool);            // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:26
    let mut _30: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:29: 480:37
    let mut _31: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
    let mut _32: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
    let mut _33: bool;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
    let mut _34: i32;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:480:41: 480:49
    let _35: i32;                        // in scope 0 at workspace/buffer_simple/src/buffer.rs:481:13: 481:67
    let mut _36: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:481:20: 481:66
    let mut _37: *const u8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:481:20: 481:43
    let mut _38: *const [u8; 3];         // in scope 0 at workspace/buffer_simple/src/buffer.rs:481:20: 481:30
    let _39: &[u8; 3];                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:481:20: 481:30
    let mut _40: (i32, bool);            // in scope 0 at workspace/buffer_simple/src/buffer.rs:483:9: 483:15
    let _41: i32;                        // in scope 0 at workspace/buffer_simple/src/buffer.rs:485:5: 485:58
    let mut _42: *const i8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:485:12: 485:57
    let mut _43: *const u8;              // in scope 0 at workspace/buffer_simple/src/buffer.rs:485:12: 485:34
    let mut _44: *const [u8; 2];         // in scope 0 at workspace/buffer_simple/src/buffer.rs:485:12: 485:21
    let _45: &[u8; 2];                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:485:12: 485:21
    scope 1 {
        debug i => _2;                   // in scope 1 at workspace/buffer_simple/src/buffer.rs:470:9: 470:14
        let mut _3: u64;                 // in scope 1 at workspace/buffer_simple/src/buffer.rs:471:9: 471:16
        scope 2 {
            debug len => _3;             // in scope 2 at workspace/buffer_simple/src/buffer.rs:471:9: 471:16
        }
    }

    bb0: {
        _2 = const 0_i32;                // scope 0 at workspace/buffer_simple/src/buffer.rs:470:22: 470:23
        _3 = ((*_1).0: u64);             // scope 1 at workspace/buffer_simple/src/buffer.rs:471:19: 471:32
        _8 = const b"\n \x00";           // scope 2 at workspace/buffer_simple/src/buffer.rs:472:12: 472:22
                                         // ty::Const
                                         // + ty: &[u8; 3]
                                         // + val: Value(Scalar(alloc20))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:472:12: 472:22
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc20)) }
        _7 = &raw const (*_8);           // scope 2 at workspace/buffer_simple/src/buffer.rs:472:12: 472:22
        _6 = move _7 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer_simple/src/buffer.rs:472:12: 472:35
        _5 = move _6 as *const i8 (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:472:12: 472:58
        _4 = src::buffer::printf(move _5) -> bb1; // scope 2 at workspace/buffer_simple/src/buffer.rs:472:5: 472:59
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:472:5: 472:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = const 0_i32;                // scope 2 at workspace/buffer_simple/src/buffer.rs:474:5: 474:17
        goto -> bb2;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:475:5: 484:6
    }

    bb2: {
        _11 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:475:12: 475:13
        _10 = move _11 as u64 (Misc);    // scope 2 at workspace/buffer_simple/src/buffer.rs:475:11: 475:21
        _12 = _3;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:475:24: 475:27
        _9 = Lt(move _10, move _12);     // scope 2 at workspace/buffer_simple/src/buffer.rs:475:11: 475:27
        switchInt(move _9) -> [false: bb11, otherwise: bb3]; // scope 2 at workspace/buffer_simple/src/buffer.rs:475:11: 475:27
    }

    bb3: {
        _17 = const b" %02x\x00";        // scope 2 at workspace/buffer_simple/src/buffer.rs:477:13: 477:25
                                         // ty::Const
                                         // + ty: &[u8; 6]
                                         // + val: Value(Scalar(alloc21))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:477:13: 477:25
                                         // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc21)) }
        _16 = &raw const (*_17);         // scope 2 at workspace/buffer_simple/src/buffer.rs:477:13: 477:25
        _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer_simple/src/buffer.rs:477:13: 477:38
        _14 = move _15 as *const i8 (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:477:13: 477:61
        _21 = ((*_1).1: *mut i8);        // scope 2 at workspace/buffer_simple/src/buffer.rs:478:14: 478:29
        _23 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:478:37: 478:38
        _22 = move _23 as isize (Misc);  // scope 2 at workspace/buffer_simple/src/buffer.rs:478:37: 478:47
        _20 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _21, move _22) -> bb4; // scope 2 at workspace/buffer_simple/src/buffer.rs:478:14: 478:48
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:478:30: 478:36
                                         // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _19 = (*_20);                    // scope 2 at workspace/buffer_simple/src/buffer.rs:478:13: 478:48
        _18 = move _19 as i32 (Misc);    // scope 2 at workspace/buffer_simple/src/buffer.rs:478:13: 478:55
        _13 = src::buffer::printf(move _14, move _18) -> bb5; // scope 2 at workspace/buffer_simple/src/buffer.rs:476:9: 479:10
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:476:9: 476:15
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _27 = _2;                        // scope 2 at workspace/buffer_simple/src/buffer.rs:480:13: 480:14
        _28 = const 1_i32;               // scope 2 at workspace/buffer_simple/src/buffer.rs:480:17: 480:18
        _29 = CheckedAdd(_27, _28);      // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:26
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _28) -> bb6; // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:26
    }

    bb6: {
        _26 = move (_29.0: i32);         // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:26
        _30 = const 8_i32;               // scope 2 at workspace/buffer_simple/src/buffer.rs:480:29: 480:30
        _31 = const false;               // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
        _32 = Eq(_26, const i32::MIN);   // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
        _33 = BitAnd(move _31, move _32); // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
        assert(!move _33, "attempt to compute the remainder of `{} % {}`, which would overflow", _26, _30) -> bb7; // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
    }

    bb7: {
        _25 = Rem(move _26, move _30);   // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:37
        _34 = const 0_i32;               // scope 2 at workspace/buffer_simple/src/buffer.rs:480:41: 480:42
        _24 = Eq(move _25, move _34);    // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:49
        switchInt(move _24) -> [false: bb9, otherwise: bb8]; // scope 2 at workspace/buffer_simple/src/buffer.rs:480:12: 480:49
    }

    bb8: {
        _39 = const b"\n \x00";          // scope 2 at workspace/buffer_simple/src/buffer.rs:481:20: 481:30
                                         // ty::Const
                                         // + ty: &[u8; 3]
                                         // + val: Value(Scalar(alloc20))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:481:20: 481:30
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc20)) }
        _38 = &raw const (*_39);         // scope 2 at workspace/buffer_simple/src/buffer.rs:481:20: 481:30
        _37 = move _38 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer_simple/src/buffer.rs:481:20: 481:43
        _36 = move _37 as *const i8 (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:481:20: 481:66
        _35 = src::buffer::printf(move _36) -> bb9; // scope 2 at workspace/buffer_simple/src/buffer.rs:481:13: 481:67
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:481:13: 481:19
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _40 = CheckedAdd(_2, const 1_i32); // scope 2 at workspace/buffer_simple/src/buffer.rs:483:9: 483:15
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb10; // scope 2 at workspace/buffer_simple/src/buffer.rs:483:9: 483:15
    }

    bb10: {
        _2 = move (_40.0: i32);          // scope 2 at workspace/buffer_simple/src/buffer.rs:483:9: 483:15
        goto -> bb2;                     // scope 2 at workspace/buffer_simple/src/buffer.rs:475:5: 484:6
    }

    bb11: {
        _45 = const b"\n\x00";           // scope 2 at workspace/buffer_simple/src/buffer.rs:485:12: 485:21
                                         // ty::Const
                                         // + ty: &[u8; 2]
                                         // + val: Value(Scalar(alloc22))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:485:12: 485:21
                                         // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc22)) }
        _44 = &raw const (*_45);         // scope 2 at workspace/buffer_simple/src/buffer.rs:485:12: 485:21
        _43 = move _44 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer_simple/src/buffer.rs:485:12: 485:34
        _42 = move _43 as *const i8 (Misc); // scope 2 at workspace/buffer_simple/src/buffer.rs:485:12: 485:57
        _41 = src::buffer::printf(move _42) -> bb12; // scope 2 at workspace/buffer_simple/src/buffer.rs:485:5: 485:58
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:485:5: 485:11
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:486:2: 486:2
    }
}

alloc22 (size: 2, align: 1) {
    0a 00                                           │ ..
}

alloc21 (size: 6, align: 1) {
    20 25 30 32 78 00                               │  %02x.
}

alloc20 (size: 3, align: 1) {
    0a 20 00                                        │ . .
}

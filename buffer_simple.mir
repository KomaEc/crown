fn src::buffer::buffer_new() -> *mut src::buffer::buffer_t {
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:57:42: 57:55
    let mut _1: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:58:33: 58:52

    bb0: {
        _1 = const 64_u64;               // scope 0 at workspace/buffer_simple/src/buffer.rs:58:33: 58:52
        _0 = src::buffer::buffer_new_with_size(move _1) -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:58:12: 58:53
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:58:12: 58:32
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:59:2: 59:2
    }
}
fn src::buffer::buffer_new_with_size(_1: u64) -> *mut src::buffer::buffer_t {
    debug n => _1;                       // in scope 0 at workspace/buffer_simple/src/buffer.rs:64:47: 64:52
    let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer_simple/src/buffer.rs:64:65: 64:78
    let mut _2: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:65:9: 65:19
    let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:65:22: 65:70
    let mut _4: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:65:29: 65:69
    let mut _5: usize;                   // in scope 0 at workspace/buffer_simple/src/buffer.rs:65:29: 65:62
    let mut _6: bool;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:66:8: 66:24
    let mut _7: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer_simple/src/buffer.rs:66:8: 66:14
    let mut _8: u64;                     // in scope 0 at workspace/buffer_simple/src/buffer.rs:69:21: 69:22
    let mut _9: *mut libc::c_void;       // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:23: 70:79
    let mut _10: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:30: 70:61
    let mut _11: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:30: 70:31
    let mut _12: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:45: 70:60
    let mut _13: u64;                    // in scope 0 at workspace/buffer_simple/src/buffer.rs:70:63: 70:78
    let mut _14: *mut i8;                // in scope 0 at workspace/buffer_simple/src/buffer.rs:71:22: 71:37
    scope 1 {
        debug self_0 => _2;              // in scope 1 at workspace/buffer_simple/src/buffer.rs:65:9: 65:19
    }

    bb0: {
        _5 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1; // scope 0 at workspace/buffer_simple/src/buffer.rs:65:29: 65:62
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:65:29: 65:60
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::buffer::buffer_t>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = move _5 as u64 (Misc);      // scope 0 at workspace/buffer_simple/src/buffer.rs:65:29: 65:69
        _3 = src::buffer::malloc(move _4) -> bb2; // scope 0 at workspace/buffer_simple/src/buffer.rs:65:22: 65:70
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:65:22: 65:28
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::buffer::malloc}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = move _3 as *mut src::buffer::buffer_t (Misc); // scope 0 at workspace/buffer_simple/src/buffer.rs:65:22: 65:87
        _7 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:66:8: 66:14
        _6 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _7) -> bb3; // scope 1 at workspace/buffer_simple/src/buffer.rs:66:8: 66:24
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:66:15: 66:22
                                         // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/buffer_simple/src/buffer.rs:66:8: 66:24
    }

    bb4: {
        _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer_simple/src/buffer.rs:67:16: 67:34
                                         // ty::Const
                                         // + ty: *mut src::buffer::buffer_t
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:67:16: 67:34
                                         // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb8;                     // scope 1 at no-location
    }

    bb5: {
        _8 = _1;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:69:21: 69:22
        ((*_2).0: u64) = move _8;        // scope 1 at workspace/buffer_simple/src/buffer.rs:69:5: 69:22
        _11 = _1;                        // scope 1 at workspace/buffer_simple/src/buffer.rs:70:30: 70:31
        _12 = const 1_u64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:70:45: 70:60
        _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb6; // scope 1 at workspace/buffer_simple/src/buffer.rs:70:30: 70:61
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:70:32: 70:44
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _13 = const 1_u64;               // scope 1 at workspace/buffer_simple/src/buffer.rs:70:63: 70:78
        _9 = src::buffer::calloc(move _10, move _13) -> bb7; // scope 1 at workspace/buffer_simple/src/buffer.rs:70:23: 70:79
                                         // mir::Constant
                                         // + span: workspace/buffer_simple/src/buffer.rs:70:23: 70:29
                                         // + literal: Const { ty: unsafe extern "C" fn(u64, u64) -> *mut libc::c_void {src::buffer::calloc}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        ((*_2).1: *mut i8) = move _9 as *mut i8 (Misc); // scope 1 at workspace/buffer_simple/src/buffer.rs:70:5: 70:100
        _14 = ((*_2).1: *mut i8);        // scope 1 at workspace/buffer_simple/src/buffer.rs:71:22: 71:37
        ((*_2).2: *mut i8) = move _14;   // scope 1 at workspace/buffer_simple/src/buffer.rs:71:5: 71:37
        _0 = _2;                         // scope 1 at workspace/buffer_simple/src/buffer.rs:72:12: 72:18
        goto -> bb8;                     // scope 1 at workspace/buffer_simple/src/buffer.rs:72:5: 72:18
    }

    bb8: {
        return;                          // scope 0 at workspace/buffer_simple/src/buffer.rs:73:2: 73:2
    }
}

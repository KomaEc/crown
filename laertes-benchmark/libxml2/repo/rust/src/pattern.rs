
extern "C" {
    pub type _xmlBuf;
    /*
 * Summary: string dictionary
 * Description: dictionary of reusable strings, just used to avoid allocation
 *         and freeing operations.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    /*
 * The dictionary.
 */
    pub type _xmlDict;
    pub type _xmlHashTable;
    pub type _xmlAutomataState;
    pub type _xmlAutomata;
    pub type _xmlValidState;
    #[no_mangle]
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    #[no_mangle]
    fn xmlStrndup(cur: *const xmlChar, len: std::os::raw::c_int) -> *mut xmlChar;
    #[no_mangle]
    fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn memset(_: *mut std::os::raw::c_void, _: std::os::raw::c_int, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn xmlDictReference(dict: xmlDictPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlDictFree(dict: xmlDictPtr);
    /*
 * Lookup of entry in the dictionary.
 */
    #[no_mangle]
    fn xmlDictLookup(dict: xmlDictPtr, name: *const xmlChar, len: std::os::raw::c_int)
     -> *const xmlChar;
    #[no_mangle]
    static mut xmlMalloc: xmlMallocFunc;
    #[no_mangle]
    static mut xmlRealloc: xmlReallocFunc;
    #[no_mangle]
    static mut xmlFree: xmlFreeFunc;
    #[no_mangle]
    fn xmlStringCurrentChar(ctxt: xmlParserCtxtPtr, cur: *const xmlChar,
                            len: *mut std::os::raw::c_int) -> std::os::raw::c_int;
    /* *
 * Range checking routine
 */
    #[no_mangle]
    fn xmlCharInRange(val: std::os::raw::c_uint, group: *const xmlChRangeGroup)
     -> std::os::raw::c_int;
    /* *
 * xmlIsBaseChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    /* *
 * xmlIsBaseCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    #[no_mangle]
    static xmlIsBaseCharGroup: xmlChRangeGroup;
    /* *
 * xmlIsCombiningQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    #[no_mangle]
    static xmlIsCombiningGroup: xmlChRangeGroup;
    /* *
 * xmlIsDigit_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    /* *
 * xmlIsDigitQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    #[no_mangle]
    static xmlIsDigitGroup: xmlChRangeGroup;
    /* *
 * xmlIsExtender_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    /* *
 * xmlIsExtenderQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
    #[no_mangle]
    static xmlIsExtenderGroup: xmlChRangeGroup;
}
pub type xmlChar = std::os::raw::c_uchar;
pub type size_t = std::os::raw::c_ulong;
pub type xmlFreeFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type xmlMallocFunc
    =
    Option<unsafe extern "C" fn(_: size_t) -> *mut std::os::raw::c_void>;
pub type xmlReallocFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: size_t)
               -> *mut std::os::raw::c_void>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
    pub compressed: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
    pub rawconsumed: std::os::raw::c_ulong,
}
pub type xmlBufPtr = *mut xmlBuf;
pub type xmlBuf = _xmlBuf;
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
/*
 * Block defining the handlers for non UTF-8 encodings.
 * If iconv is supported, there are two extra fields.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut std::os::raw::c_void;
/* *
 * xmlCharEncodingOutputFunc:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of UTF-8 chars
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and try to convert it to another
 * encoding.
 * Note: a first call designed to produce heading info is called with
 * in = NULL. If stateful this should also initialize the encoder state.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets produced.
 */
pub type xmlCharEncodingOutputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
/*
 * Summary: interface for the encoding conversion functions
 * Description: interface for the encoding conversion functions needed for
 *              XML basic encoding and iconv() support.
 *
 * Related specs are
 * rfc2044        (UTF-8 and UTF-16) F. Yergeau Alis Technologies
 * [ISO-10646]    UTF-8 and UTF-16 in Annexes
 * [ISO-8859-1]   ISO Latin-1 characters codes.
 * [UNICODE]      The Unicode Consortium, "The Unicode Standard --
 *                Worldwide Character Encoding -- Version 1.0", Addison-
 *                Wesley, Volume 1, 1991, Volume 2, 1992.  UTF-8 is
 *                described in Unicode Technical Report #4.
 * [US-ASCII]     Coded Character Set--7-bit American Standard Code for
 *                Information Interchange, ANSI X3.4-1986.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * xmlCharEncoding:
 *
 * Predefined values for some standard encodings.
 * Libxml does not do beforehand translation on UTF8 and ISOLatinX.
 * It also supports ASCII, ISO-8859-1, and UTF16 (LE and BE) by default.
 *
 * Anything else would have to be translated to UTF8 before being
 * given to the parser itself. The BOM for UTF16 and the encoding
 * declaration are looked at and a converter is looked for at that
 * point. If not found the parser stops here as asked by the XML REC. A
 * converter can be registered by the user using xmlRegisterCharEncodingHandler
 * but the current form doesn't allow stateful transcoding (a serious
 * problem agreed !). If iconv has been found it will be used
 * automatically and allow stateful transcoding, the simplest is then
 * to be sure to enable iconv and to provide iconv libs for the encoding
 * support needed.
 *
 * Note that the generic "UTF-16" is not a predefined value.  Instead, only
 * the specific UTF-16LE and UTF-16BE are present.
 */
/* No char encoding detected */
/* No char encoding detected */
/* UTF-8 */
/* UTF-16 little endian */
/* UTF-16 big endian */
/* UCS-4 little endian */
/* UCS-4 big endian */
/* EBCDIC uh! */
/* UCS-4 unusual ordering */
/* UCS-4 unusual ordering */
/* UCS-2 */
/* ISO-8859-1 ISO Latin 1 */
/* ISO-8859-2 ISO Latin 2 */
/* ISO-8859-3 */
/* ISO-8859-4 */
/* ISO-8859-5 */
/* ISO-8859-6 */
/* ISO-8859-7 */
/* ISO-8859-8 */
/* ISO-8859-9 */
/* ISO-2022-JP */
/* Shift_JIS */
/* EUC-JP */
/* pure ASCII */
/* *
 * xmlCharEncodingInputFunc:
 * @out:  a pointer to an array of bytes to store the UTF-8 result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of chars in the original encoding
 * @inlen:  the length of @in
 *
 * Take a block of chars in the original encoding and try to convert
 * it to an UTF-8 block of chars out.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets consumed.
 */
pub type xmlCharEncodingInputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlInputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlInputReadCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *mut std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const std::os::raw::c_char,
    pub directory: *const std::os::raw::c_char,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
    pub length: std::os::raw::c_int,
    pub line: std::os::raw::c_int,
    pub col: std::os::raw::c_int,
    pub consumed: std::os::raw::c_ulong,
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub id: std::os::raw::c_int,
}
pub type xmlParserInputDeallocate
    =
    Option<unsafe extern "C" fn(_: *mut xmlChar) -> ()>;
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut std::os::raw::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: std::os::raw::c_int,
    pub replaceEntities: std::os::raw::c_int,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub html: std::os::raw::c_int,
    pub input: xmlParserInputPtr,
    pub inputNr: std::os::raw::c_int,
    pub inputMax: std::os::raw::c_int,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: std::os::raw::c_int,
    pub node_seq: xmlParserNodeInfoSeq,
    pub errNo: std::os::raw::c_int,
    pub hasExternalSubset: std::os::raw::c_int,
    pub hasPErefs: std::os::raw::c_int,
    pub external: std::os::raw::c_int,
    pub valid: std::os::raw::c_int,
    pub validate: std::os::raw::c_int,
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: std::os::raw::c_int,
    pub directory: *mut std::os::raw::c_char,
    pub name: *const xmlChar,
    pub nameNr: std::os::raw::c_int,
    pub nameMax: std::os::raw::c_int,
    pub nameTab: *mut *const xmlChar,
    pub nbChars: std::os::raw::c_long,
    pub checkIndex: std::os::raw::c_long,
    pub keepBlanks: std::os::raw::c_int,
    pub disableSAX: std::os::raw::c_int,
    pub inSubset: std::os::raw::c_int,
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut std::os::raw::c_int,
    pub spaceNr: std::os::raw::c_int,
    pub spaceMax: std::os::raw::c_int,
    pub spaceTab: *mut std::os::raw::c_int,
    pub depth: std::os::raw::c_int,
    pub entity: xmlParserInputPtr,
    pub charset: std::os::raw::c_int,
    pub nodelen: std::os::raw::c_int,
    pub nodemem: std::os::raw::c_int,
    pub pedantic: std::os::raw::c_int,
    pub _private: *mut std::os::raw::c_void,
    pub loadsubset: std::os::raw::c_int,
    pub linenumbers: std::os::raw::c_int,
    pub catalogs: *mut std::os::raw::c_void,
    pub recovery: std::os::raw::c_int,
    pub progressive: std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: std::os::raw::c_int,
    pub docdict: std::os::raw::c_int,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: std::os::raw::c_int,
    pub nsNr: std::os::raw::c_int,
    pub nsMax: std::os::raw::c_int,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut std::os::raw::c_int,
    pub pushTab: *mut *mut std::os::raw::c_void,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
    pub nsWellFormed: std::os::raw::c_int,
    pub options: std::os::raw::c_int,
    pub dictNames: std::os::raw::c_int,
    pub freeElemsNr: std::os::raw::c_int,
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: std::os::raw::c_int,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: std::os::raw::c_ulong,
    pub sizeentities: std::os::raw::c_ulong,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: std::os::raw::c_int,
    pub nodeInfoMax: std::os::raw::c_int,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: std::os::raw::c_int,
    pub sizeentcopy: std::os::raw::c_ulong,
}
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
    pub begin_pos: std::os::raw::c_ulong,
    pub begin_line: std::os::raw::c_ulong,
    pub end_pos: std::os::raw::c_ulong,
    pub end_line: std::os::raw::c_ulong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut std::os::raw::c_void,
    pub line: std::os::raw::c_ushort,
    pub extra: std::os::raw::c_ushort,
}
/*
 * Summary: interfaces for tree manipulation
 * Description: this module describes the structures found in an tree resulting
 *              from an XML or HTML parsing, as well as the API provided for
 *              various processing on that tree
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Some of the basic types pointer to structures:
 */
/* xmlIO.h */
/* parser.h */
/* entities.h */
/* *
 * BASE_BUFFER_SIZE:
 *
 * default buffer size 4000.
 */
/* *
 * LIBXML_NAMESPACE_DICT:
 *
 * Defines experimental behaviour:
 * 1) xmlNs gets an additional field @context (a xmlDoc)
 * 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.
 */
/* #define LIBXML_NAMESPACE_DICT */
/* *
 * xmlBufferAllocationScheme:
 *
 * A buffer allocation scheme can be defined to either match exactly the
 * need or double it's allocated size each time it is found too small.
 */
/* double each time one need to grow */
/* grow only to the minimal size */
/* immutable buffer */
/* special allocation scheme used for I/O */
/* exact up to a threshold, and doubleit thereafter */
/* limit the upper size of the buffer */
/* *
 * xmlBuffer:
 *
 * A buffer structure, this old construct is limited to 2GB and
 * is being deprecated, use API with xmlBuf instead
 */
/* The buffer content UTF8 */
/* The buffer size used */
/* The buffer size */
/* The realloc method */
/* in IO mode we may have a different base */
/* *
 * xmlBuf:
 *
 * A buffer structure, new one, the actual structure internals are not public
 */
/* *
 * xmlBufPtr:
 *
 * A pointer to a buffer structure, the actual structure internals are not
 * public
 */
/*
 * A few public routines for xmlBuf. As those are expected to be used
 * mostly internally the bulk of the routines are internal in buf.h
 */
/*
 * LIBXML2_NEW_BUFFER:
 *
 * Macro used to express that the API use the new buffers for
 * xmlParserInputBuffer and xmlOutputBuffer. The change was
 * introduced in 2.9.0.
 */
/* *
 * XML_XML_NAMESPACE:
 *
 * This is the namespace for the special xml: prefix predefined in the
 * XML Namespace specification.
 */
/* *
 * XML_XML_ID:
 *
 * This is the name for the special xml:id attribute
 */
/*
 * The different element types carried by an XML tree.
 *
 * NOTE: This is synchronized with DOM Level1 values
 *       See http://www.w3.org/TR/REC-DOM-Level-1/
 *
 * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should
 * be deprecated to use an XML_DTD_NODE.
 */
/* *
 * xmlNotation:
 *
 * A DTD Notation definition.
 */
/* Notation name */
/* Public identifier, if any */
/* System identifier, if any */
/* *
 * xmlAttributeType:
 *
 * A DTD Attribute type definition.
 */
/* *
 * xmlAttributeDefault:
 *
 * A DTD Attribute default definition.
 */
/* *
 * xmlEnumeration:
 *
 * List structure used when there is an enumeration in DTDs.
 */
/* next one */
/* Enumeration name */
/* *
 * xmlAttribute:
 *
 * An Attribute declaration in a DTD.
 */
/* application data */
/* XML_ATTRIBUTE_DECL, must be second ! */
/* Attribute name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* next in hash table */
/* The attribute type */
/* the default */
/* or the default value */
/* or the enumeration tree if any */
/* the namespace prefix if any */
/* Element holding the attribute */
/* *
 * xmlElementContentType:
 *
 * Possible definitions of element content types.
 */
/* *
 * xmlElementContentOccur:
 *
 * Possible definitions of element content occurrences.
 */
/* *
 * xmlElementContent:
 *
 * An XML Element content as stored after parsing an element definition
 * in a DTD.
 */
/* PCDATA, ELEMENT, SEQ or OR */
/* ONCE, OPT, MULT or PLUS */
/* Element name */
/* first child */
/* second child */
/* parent */
/* Namespace prefix */
/* *
 * xmlElementTypeVal:
 *
 * The different possibilities for an element content type.
 */
/* *
 * xmlElement:
 *
 * An XML Element declaration from a DTD.
 */
/* application data */
/* XML_ELEMENT_DECL, must be second ! */
/* Element name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* The type */
/* the allowed element content */
/* List of the declared attributes */
/* the namespace prefix if any */
/* the validating regexp */
/* *
 * XML_LOCAL_NAMESPACE:
 *
 * A namespace declaration node.
 */
/* *
 * xmlNs:
 *
 * An XML namespace.
 * Note that prefix == NULL is valid, it defines the default namespace
 * within the subtree (until overridden).
 *
 * xmlNsType is unified with xmlElementType.
 */
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *mut std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: std::os::raw::c_int,
    pub standalone: std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut std::os::raw::c_void,
    pub refs: *mut std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut std::os::raw::c_void,
    pub parseFlags: std::os::raw::c_int,
    pub properties: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut std::os::raw::c_void,
    pub elements: *mut std::os::raw::c_void,
    pub attributes: *mut std::os::raw::c_void,
    pub entities: *mut std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut std::os::raw::c_void,
}
pub type xmlElementType = std::os::raw::c_uint;
pub const XML_DOCB_DOCUMENT_NODE: xmlElementType = 21;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
pub type xmlNsType = xmlElementType;
/* normally an xmlDoc */
/* *
 * xmlDtd:
 *
 * An XML DTD, as defined by <!DOCTYPE ... There is actually one for
 * the internal subset and for the external subset.
 */
/* application data */
/* XML_DTD_NODE, must be second ! */
/* Name of the DTD */
/* the value of the property link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* Hash table for notations if any */
/* Hash table for elements if any */
/* Hash table for attributes if any */
/* Hash table for entities if any */
/* External identifier for PUBLIC DTD */
/* URI for a SYSTEM or PUBLIC DTD */
/* Hash table for param entities if any */
/* *
 * xmlAttr:
 *
 * An attribute on an XML node.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut std::os::raw::c_void,
}
pub type xmlAttributeType = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlParserMode = std::os::raw::c_uint;
pub const XML_PARSE_READER: xmlParserMode = 5;
pub const XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const XML_PARSE_SAX: xmlParserMode = 2;
pub const XML_PARSE_DOM: xmlParserMode = 1;
pub const XML_PARSE_UNKNOWN: xmlParserMode = 0;
/*
 * Summary: error handling
 * Description: the API used to report errors
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlErrorLevel:
 *
 * Indicates the level of an error
 */
/* A simple warning */
/* A recoverable error */
/* A fatal error */
/* *
 * xmlErrorDomain:
 *
 * Indicates where an error may have come from
 */
/* The XML parser */
/* The tree module */
/* The XML Namespace module */
/* The XML DTD validation with parser context*/
/* The HTML parser */
/* The memory allocator */
/* The serialization code */
/* The Input/Output stack */
/* The FTP module */
/* The HTTP module */
/* The XInclude processing */
/* The XPath module */
/* The XPointer module */
/* The regular expressions module */
/* The W3C XML Schemas Datatype module */
/* The W3C XML Schemas parser module */
/* The W3C XML Schemas validation module */
/* The Relax-NG parser module */
/* The Relax-NG validator module */
/* The Catalog module */
/* The Canonicalization module */
/* The XSLT engine from libxslt */
/* The XML DTD validation with valid context */
/* The error checking module */
/* The xmlwriter module */
/* The dynamically loaded module module*/
/* The module handling character conversion */
/* The Schematron validator module */
/* The buffers module */
/* The URI module */
/* *
 * xmlError:
 *
 * An XML Error instance.
 */
pub type xmlError = _xmlError;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlError {
    pub domain: std::os::raw::c_int,
    pub code: std::os::raw::c_int,
    pub message: *mut std::os::raw::c_char,
    pub level: xmlErrorLevel,
    pub file: *mut std::os::raw::c_char,
    pub line: std::os::raw::c_int,
    pub str1: *mut std::os::raw::c_char,
    pub str2: *mut std::os::raw::c_char,
    pub str3: *mut std::os::raw::c_char,
    pub int1: std::os::raw::c_int,
    pub int2: std::os::raw::c_int,
    pub ctxt: *mut std::os::raw::c_void,
    pub node: *mut std::os::raw::c_void,
}
pub type xmlErrorLevel = std::os::raw::c_uint;
pub const XML_ERR_FATAL: xmlErrorLevel = 3;
pub const XML_ERR_ERROR: xmlErrorLevel = 2;
pub const XML_ERR_WARNING: xmlErrorLevel = 1;
pub const XML_ERR_NONE: xmlErrorLevel = 0;
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
/* for type/PSVI informations */
/* *
 * xmlID:
 *
 * An XML ID instance.
 */
/* next ID */
/* The ID name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* The document holding the ID */
/* *
 * xmlRef:
 *
 * An XML IDREF instance.
 */
/* next Ref */
/* The Ref name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* *
 * xmlNode:
 *
 * A node in an XML tree.
 */
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
/*
 * Summary: Chained hash tables
 * Description: This module implements the hash table support used in
 *		various places in the library.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Bjorn Reese <bjorn.reese@systematic.dk>
 */
/*
 * The hash table.
 */
pub type xmlHashTablePtr = *mut xmlHashTable;
pub type xmlHashTable = _xmlHashTable;
pub type xmlDictPtr = *mut xmlDict;
pub type xmlDict = _xmlDict;
pub type xmlParserInputState = std::os::raw::c_int;
pub const XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const XML_PARSER_DTD: xmlParserInputState = 3;
pub const XML_PARSER_PI: xmlParserInputState = 2;
pub const XML_PARSER_MISC: xmlParserInputState = 1;
pub const XML_PARSER_START: xmlParserInputState = 0;
pub const XML_PARSER_EOF: xmlParserInputState = -1;
/* *
 * XML_CTXT_FINISH_DTD_0:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/* *
 * XML_CTXT_FINISH_DTD_1:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/*
 * xmlValidCtxt:
 * An xmlValidCtxt is used for error reporting when validating.
 */
pub type xmlValidCtxt = _xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: *mut std::os::raw::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub finishDtd: std::os::raw::c_uint,
    pub doc: xmlDocPtr,
    pub valid: std::os::raw::c_int,
    pub vstate: *mut xmlValidState,
    pub vstateNr: std::os::raw::c_int,
    pub vstateMax: std::os::raw::c_int,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
/*
 * Summary: API to build regexp automata
 * Description: the API to build regexp automata
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlAutomataPtr:
 *
 * A libxml automata description, It can be compiled into a regexp
 */
/* *
 * xmlAutomataStatePtr:
 *
 * A state int the automata description,
 */
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
pub type xmlAutomataState = _xmlAutomataState;
pub type xmlAutomataPtr = *mut xmlAutomata;
pub type xmlAutomata = _xmlAutomata;
/*
 * Summary: The DTD validation
 * Description: API for the DTD handling and the validity checking
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Validation state added for non-determinist content model.
 */
pub type xmlValidState = _xmlValidState;
/* application data */
/* type number, must be second ! */
/* the name of the node, or the entity */
/* parent->childs link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* pointer to the associated namespace */
/* the content */
/* properties list */
/* namespace definitions on this node */
/* for type/PSVI informations */
/* line number */
/* extra data for XPath/XSLT */
/* *
 * XML_GET_CONTENT:
 *
 * Macro to extract the content pointer of a node.
 */
/* *
 * XML_GET_LINE:
 *
 * Macro to extract the line number of an element node.
 */
/* *
 * xmlDocProperty
 *
 * Set of properties of the document as found by the parser
 * Some of them are linked to similary named xmlParserOption
 */
/* document is XML well formed */
/* document is Namespace valid */
/* parsed with old XML-1.0 parser */
/* DTD validation was successful */
/* XInclude substitution was done */
/* Document was built using the API
                                           and not by parsing an instance */
/* built for internal processing */
/* parsed or built HTML document */
/* *
 * xmlDoc:
 *
 * An XML document.
 */
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
/* *
 * xmlValidityWarningFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity warning is found. This is a message
 * oriented function similar to an *printf function.
 */
pub type xmlValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
/* *
 * xmlValidityErrorFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity error is found. This is a message
 * oriented function similar to an *printf function.
 */
pub type xmlValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: std::os::raw::c_ulong,
    pub length: std::os::raw::c_ulong,
    pub buffer: *mut xmlParserNodeInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: std::os::raw::c_uint,
    pub _private: *mut std::os::raw::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
/* the node in the tree */
/* *
 * xmlParserError:
 *
 * This is an error that the XML (or HTML) parser can generate
 */
/* 1 */
/* 2 */
/* 3 */
/* 4 */
/* 5 */
/* 6 */
/* 7 */
/* 8 */
/* 9 */
/* 10 */
/* 11 */
/* 12 */
/* 13 */
/* 14 */
/* 15 */
/* 16 */
/* 17 */
/* 18 */
/* 19 */
/* 20 */
/* 21 */
/* 22 */
/* 23 */
/* 24 */
/* 25 */
/* 26 */
/* 27 */
/* 28 */
/* 29 */
/* 30 */
/* 31 */
/* 32 */
/* 33 */
/* 34 */
/* 35 */
/* 36 */
/* 37 */
/* 38 */
/* 39 */
/* 40 */
/* 41 */
/* 42 */
/* 43 */
/* 44 */
/* 45 */
/* 46 */
/* 47 */
/* 48 */
/* 49 */
/* 50 */
/* 51 */
/* 52 */
/* 53 */
/* 54 */
/* 55 */
/* 56 */
/* 57 */
/* 58 */
/* 59 */
/* 60 */
/* 61 */
/* 62 */
/* 63 */
/* 64 */
/* 65 */
/* 66 */
/* 67 */
/* 68 */
/* 69 */
/* 70 */
/* 71 */
/* 72 */
/* 73 */
/* 74 */
/* 75 */
/* 76 */
/* 77 */
/* 78 */
/* 79 */
/* 80 */
/* 81 */
/* 82 */
/* 83 */
/* 84 */
/* 85 */
/* 86 */
/* 87 */
/* 88 */
/* 89 */
/* 90 */
/* 91 */
/* 92 */
/* 93 */
/* 94 */
/* 95 */
/* 96 */
/* 97 */
/* 98 */
/* 99 */
/* 100 */
/* 101 */
/* 102 */
/* 103 */
/* 104 */
/* 105 */
/* 106 */
/* 107 */
/* 108 */
/* 109 */
/* 110 */
/* 111 */
/* 201 */
/* 202 */
/* 203 */
/* 204 */
/* 205 */
/* 501 */
/* 502 */
/* 503 */
/* 504 */
/* 505 */
/* 506 */
/* 507 */
/* 508 */
/* 509 */
/* 510 */
/* 511 */
/* 512 */
/* 513 */
/* 514 */
/* 515 */
/* 516 */
/* 517 */
/* 518 */
/* 519 */
/* 520 */
/* 521 */
/* 522 */
/* 523 */
/* 524 */
/* 525 */
/* 526 */
/* 527 */
/* 528 */
/* 529 */
/* 530 */
/* 531 */
/* 532 */
/* 533 */
/* 534 */
/* 535 */
/* 536 */
/* 537 */
/* 538 */
/* 539 */
/* 540 */
/* 541 */
/* 801 */
/* 1001 */
/* 1002 */
/* 1003 */
/* 1004 */
/* 1005 */
/* 1006 */
/* 1007 */
/* 1008 */
/* 1009 */
/* 1010 */
/* 1011 */
/* 1012 */
/* 1013 */
/* 1014 */
/* 1015 */
/* 1016 */
/* 1017 */
/* 1018 */
/* 1019 */
/* 1020 */
/* 1021 */
/* 1022 */
/* 1023 */
/* 1024 */
/* 1025 */
/* 1026 */
/* 1027 */
/* 1028 */
/* 1029 */
/* 1030 */
/* 1031 */
/* 1032 */
/* 1033 */
/* 1034 */
/* 1035 */
/* 1036 */
/* 1037 */
/* 1038 */
/* 1039 */
/* 1040 */
/* 1041 */
/* 1042 */
/* 1043 */
/* 1044 */
/* 1045 */
/* 1046 */
/* 1047 */
/* 1048 */
/* 1049 */
/* 1050 */
/* 1051 */
/* 1052 */
/* 1053 */
/* 1054 */
/* 1055 */
/* 1056 */
/* 1057 */
/* 1058 */
/* 1059 */
/* 1060 */
/* 1061 */
/* 1062 */
/* 1063 */
/* 1064 */
/* 1065 */
/* 1066 */
/* 1067 */
/* 1068 */
/* 1069 */
/* 1070 */
/* 1071 */
/* 1072 */
/* 1073 */
/* 1074 */
/* 1075 */
/* 1076 */
/* 1077 */
/* 1078 */
/* 1079 */
/* 1080 */
/* 1081 */
/* 1082 */
/* 1083 */
/* 1084 */
/* 1085 */
/* 1086 */
/* 1087 */
/* 1088 */
/* 1089 */
/* 1090 */
/* 1091 */
/* 1092 */
/* 1093 */
/* 1094 */
/* 1095 */
/* 1096 */
/* 1097 */
/* 1098 */
/* 1099 */
/* 1100 */
/* 1101 */
/* 1102 */
/* 1103 */
/* 1104 */
/* 1105 */
/* 1106 */
/* 1107 */
/* 1108 */
/* 1109 */
/* 1110 */
/* 1111 */
/* 1112 */
/* 1113 */
/* 1114 */
/* 1115 */
/* 1116 */
/* 1117 */
/* 1118 */
/* 1119 */
/* 1120 */
/* 1121 */
/* 1122 */
/* 1201 */
/* 1202 */
/* 1203 */
/* 1204 */
/* 1205 */
/* 1206 */
/* 1207 */
/* 1208 */
/* 1209 */
/* 1210 */
/* 1211 */
/* 1212 */
/* 1213 */
/* 1214 */
/* 1215 */
/* 1216 */
/* 1217 */
/* 1218 */
/* 1219 */
/* 1220 */
/* 1221 */
/* 1301 */
/* 1302 */
/* 1303 */
/* 1401 */
/* 1402 */
/* 1403 */
/* 1501 */
/* 1502 */
/* 1503 */
/* 1504 */
/* 1505 */
/* 1506 */
/* 1507 */
/* 1508 */
/* 1509 */
/* 1510 */
/* 1511 */
/* 1512 */
/* 1513 */
/* 1514 */
/* 1515 */
/* 1516 */
/* 1517 */
/* 1518 */
/* 1519 */
/* 1520 */
/* 1521 */
/* 1522 */
/* 1523 */
/* 1524 */
/* 1525 */
/* 1526 */
/* 1527 */
/* 1528 */
/* 1529 */
/* 1530 */
/* 1531 */
/* 1532 */
/* 1533 */
/* 1534 */
/* 1535 */
/* 1536 */
/* 1537 */
/* 1538 */
/* 1539 */
/* 1540 */
/* 1541 */
/* 1542 */
/* 1543 */
/* 1544 */
/* 1545 */
/* 1546 */
/* 1547 */
/* 1548 */
/* 1549 */
/* 1550 */
/* 1551 */
/* 1552 */
/* 1553 */
/* 1554 */
/* 1555 */
/* 1556 */
/* 1601 */
/* 1602 */
/* 1603 */
/* 1604 */
/* 1605 */
/* 1606 */
/* 1607 */
/* 1608 */
/* 1609 */
/* 1610 */
/* 1611 */
/* 1612 */
/* 1613 */
/* 1614 */
/* 1615 */
/* 1616 */
/* 1617 */
/* 1618 */
/* 1651 */
/* 1652 */
/* 1653 */
/* 1654 */
/* 1701 */
/* 1702 */
/* 1703 */
/* 1704 */
/* 1705 */
/* 1706 */
/* 1707 */
/* 1708 */
/* 1709 */
/* 1710 */
/* 1711 */
/* 1712 */
/* 1713 */
/* 1714 */
/* 1715 */
/* 1716 */
/* 1717 */
/* 1718 */
/* 1719 */
/* 1720 */
/* 1721 */
/* 1722 */
/* 1723 */
/* 1724 */
/* 1725 */
/* 1726 */
/* 1727 */
/* 1728 */
/* 1729 */
/* 1730 */
/* 1731 */
/* 1732 */
/* 1733 */
/* 1734 */
/* 1735 */
/* 1736 */
/* 1737 */
/* 1738 */
/* 1739 */
/* 1740 */
/* 1741 */
/* 1742 */
/* 1743 */
/* 1744 */
/* 1745 */
/* 1746 */
/* 1747 */
/* 1748 */
/* 1749 */
/* 1750 */
/* 1751 */
/* 1752 */
/* 1753 */
/* 1754 */
/* 1755 */
/* 1756 */
/* 1757 */
/* 1758 */
/* 1759 */
/* 1760 */
/* 1761 */
/* 1762 */
/* 1763 */
/* 1764 */
/* 1765 */
/* 1766 */
/* 1767 */
/* 1768 */
/* 1769 */
/* 1770 */
/* 1771 */
/* 1772 */
/* 1773 */
/* 1774 */
/* 1775 */
/* 1776 */
/* 1777 */
/* 1778 */
/* 1779 */
/* 1780 */
/* 1781 */
/* 1782 */
/* 1783 */
/* 1784 */
/* 1785 */
/* 1786 */
/* 1787 */
/* 1788 */
/* 1789 */
/* 1790 */
/* 1791 */
/* 1792 */
/* 1793 */
/* 1794 */
/* 1795 */
/* 1796 */
/* 1797 */
/* 1798 */
/* 1799 */
/* 1800 */
/* 1802 */
/* 1803 */
/* 1804 */
/* 1805 */
/* 1806 */
/* 1807 */
/* 1808 */
/* 1809 */
/* 1810 */
/* 1811 */
/* 1812 */
/* 1813 */
/* 1814 */
/* 1815 */
/* 1816 */
/* 1817 */
/* 1818 */
/* 1819 */
/* 1820 */
/* 1821 */
/* 1822 */
/* 1823 */
/* 1824 */
/* 1825 */
/* 1826 */
/* 1827 */
/* 1828 */
/* 1829 */
/* 1830 */
/* 1831 */
/* 1832 */
/* 1833 */
/* 1834 */
/* 1835 */
/* 1836 */
/* 1837 */
/* 1838 */
/* 1839 */
/* 1840 */
/* 1841 */
/* 1842 */
/* 1843 */
/* 1844 */
/* 1845 */
/* 1846 */
/* 1847 */
/* 1848 */
/* 1849 */
/* 1850 */
/* 1851 */
/* 1852 */
/* 1853 */
/* 1854 */
/* 1855 */
/* 1856 */
/* 1857 */
/* 1858 */
/* 1859 */
/* 1860 */
/* 1861 */
/* 1862 */
/* 1863 */
/* 1864 */
/* 1865 */
/* 1866 */
/* 1867 */
/* 1868 */
/* 1869 */
/* 1870 */
/* 1871 */
/* 1872 */
/* 1873 */
/* 1874 */
/* 1875 */
/* 1876 */
/* 1877 */
/* 1878 */
/* 1879 */
/* 1901 */
/* 1902 */
/* 1903 */
/* 1951 */
/* 1952 */
/* 1953 */
/* 1954 */
/* 1955 */
/* 2001 */
/* 2002 */
/* 2003 */
/* 2021 */
/* 2022 */
/* 3001 */
/* 3002 */
/* 3003 */
/* 3004 */
/* 3005 */
/* 3006 */
/* 3007 */
/* 3008 */
/* 3009 */
/* 3010 */
/* 3011 */
/* 3012 */
/* 3013 */
/* 3014 */
/* 3015 */
/* 3016 */
/* 3017 */
/* 3018 */
/* 3019 */
/* 3020 */
/* 3021 */
/* 3022 */
/* 3023 */
/* 3024 */
/* 3025 */
/* 3026 */
/* 3027 */
/* 3028 */
/* 3029 */
/* 3030 */
/* 3031 */
/* 3032 */
/* 3033 */
/* 3034 */
/* 3035 */
/* 3036 */
/* 3037 */
/* 3038 */
/* 3039 */
/* 3040 */
/* 3041 */
/* 3042 */
/* 3043 */
/* 3044 */
/* 3045 */
/* 3046 */
/* 3047 */
/* 3048 */
/* 3049 */
/* 3050 */
/* 3051 */
/* 3052 */
/* 3053 */
/* 3054 */
/* 3055 */
/* 3056 */
/* 3057 */
/* 3058 */
/* 3059 */
/* 3060 */
/* 3061 */
/* 3062 */
/* 3063 */
/* 3064 */
/* 3065 */
/* 3066 */
/* 3067 */
/* 3068 */
/* 3069 non-W3C */
/* 3070 non-W3C */
/* 3071 */
/* 3072 */
/* 3073 */
/* 3074 */
/* 3075 */
/* 3076 */
/* 3077 */
/* 3078 */
/* 3079 */
/* 3080 */
/* 3081 */
/* 3082 */
/* 3083 */
/* 3084 */
/* 3085 */
/* 3085 */
/* 3086 */
/* 3087 */
/* 3088 */
/* 3089 */
/* 3090 */
/* 4000 */
/* 4900 */
/* 4901 */
/* 5001 */
/* 5002 */
/* 5003 */
/* 5004 */
/* 5005 */
/* 5006 */
/* 5007 */
/* 5008 */
/* 5009 */
/* 5010 */
/* 5011 */
/* 5012 */
/* 5013 */
/* 5014 */
/* 5015 */
/* 5016 */
/* 5017 */
/* 5018 */
/* 5019 */
/* 5020 */
/* 5021 */
/* 5022 */
/* 5023 */
/* 5024 */
/* 5025 */
/* 5026 */
/* 5027 */
/* 5028 */
/* 5029 */
/* 5030 */
/* 5031 */
/* 5032 */
/* 5033 */
/* 5034 */
/* 5035 */
/* 5036 */
/* 5037 */
/* 6001 */
/* 6002 */
/* 6003 */
/* 6004 */
/* *
 * xmlGenericErrorFunc:
 * @ctx:  a parsing context
 * @msg:  the message
 * @...:  the extra arguments of the varags to format the message
 *
 * Signature of the function to use when there is an error and
 * no parsing or validity context available .
 */
/* *
 * xmlStructuredErrorFunc:
 * @userData:  user provided data for the error callback
 * @error:  the error being raised.
 *
 * Signature of the function to use when there is an error and
 * the module handles the new error reporting mechanism.
 */
pub type xmlStructuredErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlErrorPtr) -> ()>;
pub type xmlErrorPtr = *mut xmlError;
pub type endElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type startElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *mut *const xmlChar,
                                _: std::os::raw::c_int, _: std::os::raw::c_int,
                                _: *mut *const xmlChar) -> ()>;
pub type externalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type cdataBlockSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type getParameterEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
/*
 * Summary: interface for the XML entities handling
 * Description: this module provides some of the entity API needed
 *              for the parser and applications.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The different valid entity types.
 */
/*
 * An unit of storage for an entity, contains the string, the value
 * and the linkind data needed for the linking in the hash table.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: std::os::raw::c_int,
    pub checked: std::os::raw::c_int,
}
pub type xmlEntityType = std::os::raw::c_uint;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub type fatalErrorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type errorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type warningSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type commentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type processingInstructionSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type ignorableWhitespaceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type charactersSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type referenceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type endElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type startElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *mut *const xmlChar) -> ()>;
pub type endDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type startDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type setDocumentLocatorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlSAXLocatorPtr)
               -> ()>;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlSAXLocator = _xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getSystemId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getLineNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                  -> std::os::raw::c_int>,
    pub getColumnNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                    -> std::os::raw::c_int>,
}
pub type unparsedEntityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type elementDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: xmlElementContentPtr)
               -> ()>;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
pub type xmlElementContentOccur = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub type attributeDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: std::os::raw::c_int,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: xmlEnumerationPtr) -> ()>;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type notationDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type entityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: *const xmlChar, _: *mut xmlChar) -> ()>;
pub type getEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type resolveEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlParserInputPtr>;
pub type hasExternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type hasInternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type isStandaloneSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type internalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChSRange {
    pub low: std::os::raw::c_ushort,
    pub high: std::os::raw::c_ushort,
}
pub type xmlChSRange = _xmlChSRange;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChLRange {
    pub low: std::os::raw::c_uint,
    pub high: std::os::raw::c_uint,
}
pub type xmlChLRange = _xmlChLRange;
/*
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character
 *               range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
 */
/*
 * Define our typedefs and structures
 *
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChRangeGroup {
    pub nbShortRange: std::os::raw::c_int,
    pub nbLongRange: std::os::raw::c_int,
    pub shortRange: *const xmlChSRange,
    pub longRange: *const xmlChLRange,
}
pub type xmlChRangeGroup = _xmlChRangeGroup;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlPattern {
    pub data: *mut std::os::raw::c_void,
    pub dict: xmlDictPtr,
    pub next: *mut _xmlPattern,
    pub pattern: *const xmlChar,
    pub flags: std::os::raw::c_int,
    pub nbStep: std::os::raw::c_int,
    pub maxStep: std::os::raw::c_int,
    pub steps: xmlStepOpPtr,
    pub stream: xmlStreamCompPtr,
}
pub type xmlStreamCompPtr = *mut xmlStreamComp;
/* type of node */
pub type xmlStreamComp = _xmlStreamComp;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStreamComp {
    pub dict: *mut xmlDict,
    pub nbStep: std::os::raw::c_int,
    pub maxStep: std::os::raw::c_int,
    pub steps: xmlStreamStepPtr,
    pub flags: std::os::raw::c_int,
}
pub type xmlStreamStepPtr = *mut xmlStreamStep;
pub type xmlStreamStep = _xmlStreamStep;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStreamStep {
    pub flags: std::os::raw::c_int,
    pub name: *const xmlChar,
    pub ns: *const xmlChar,
    pub nodeType: std::os::raw::c_int,
}
pub type xmlStepOpPtr = *mut xmlStepOp;
pub type xmlStepOp = _xmlStepOp;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStepOp {
    pub op: xmlPatOp,
    pub value: *const xmlChar,
    pub value2: *const xmlChar,
}
pub type xmlPatOp = std::os::raw::c_uint;
pub const XML_OP_ALL: xmlPatOp = 8;
pub const XML_OP_NS: xmlPatOp = 7;
pub const XML_OP_ANCESTOR: xmlPatOp = 6;
pub const XML_OP_PARENT: xmlPatOp = 5;
pub const XML_OP_ATTR: xmlPatOp = 4;
pub const XML_OP_CHILD: xmlPatOp = 3;
pub const XML_OP_ELEM: xmlPatOp = 2;
pub const XML_OP_ROOT: xmlPatOp = 1;
pub const XML_OP_END: xmlPatOp = 0;
/*
 * Summary: pattern expression handling
 * Description: allows to compile and test pattern expressions for nodes
 *              either in a tree or based on a parser state.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlPattern:
 *
 * A compiled (XPath based) pattern to select nodes
 */
pub type xmlPattern = _xmlPattern;
pub type xmlPatternPtr = *mut xmlPattern;
pub type C2RustUnnamed = std::os::raw::c_uint;
pub const XML_PATTERN_XSFIELD: C2RustUnnamed = 4;
pub const XML_PATTERN_XSSEL: C2RustUnnamed = 2;
pub const XML_PATTERN_XPATH: C2RustUnnamed = 1;
pub const XML_PATTERN_DEFAULT: C2RustUnnamed = 0;
pub type xmlPatParserContextPtr = *mut xmlPatParserContext;
/* the streaming data if any */
pub type xmlPatParserContext = _xmlPatParserContext;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlPatParserContext {
    pub cur: *const xmlChar,
    pub base: *const xmlChar,
    pub error: std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub comp: xmlPatternPtr,
    pub elem: xmlNodePtr,
    pub namespaces: *mut *const xmlChar,
    pub nb_namespaces: std::os::raw::c_int,
}
pub type xmlStepStatePtr = *mut xmlStepState;
pub type xmlStepState = _xmlStepState;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStepState {
    pub step: std::os::raw::c_int,
    pub node: xmlNodePtr,
}
pub type xmlStepStates = _xmlStepStates;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStepStates {
    pub nbstates: std::os::raw::c_int,
    pub maxstates: std::os::raw::c_int,
    pub states: xmlStepStatePtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlStreamCtxt {
    pub next: *mut _xmlStreamCtxt,
    pub comp: xmlStreamCompPtr,
    pub nbState: std::os::raw::c_int,
    pub maxState: std::os::raw::c_int,
    pub level: std::os::raw::c_int,
    pub states: *mut std::os::raw::c_int,
    pub flags: std::os::raw::c_int,
    pub blockLevel: std::os::raw::c_int,
}
/* streaming interfaces */
pub type xmlStreamCtxt = _xmlStreamCtxt;
pub type xmlStreamCtxtPtr = *mut xmlStreamCtxt;
/* the number of namespaces */
/* ***********************************************************************
 *									*
 *			Type functions					*
 *									*
 ************************************************************************/
/* *
 * xmlNewPattern:
 *
 * Create a new XSLT Pattern
 *
 * Returns the newly allocated xmlPatternPtr or NULL in case of error
 */
unsafe extern "C" fn xmlNewPattern() -> xmlPatternPtr {
    let mut cur: xmlPatternPtr = 0 as *mut xmlPattern;
    cur =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlPattern>()
                                                          as std::os::raw::c_ulong) as
            xmlPatternPtr;
    if cur.is_null() { return 0 as xmlPatternPtr }
    memset(cur as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlPattern>() as std::os::raw::c_ulong);
    (*cur).maxStep = 10 as std::os::raw::c_int;
    (*cur).steps =
        xmlMalloc.expect("non-null function pointer")(((*cur).maxStep as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStepOp>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as xmlStepOpPtr;
    if (*cur).steps.is_null() {
        xmlFree.expect("non-null function pointer")(cur as *mut std::os::raw::c_void);
        return 0 as xmlPatternPtr
    }
    return cur;
}
/* *
 * xmlFreePattern:
 * @comp:  an XSLT comp
 *
 * Free up the memory allocated by @comp
 */
#[no_mangle]
pub unsafe extern "C" fn xmlFreePattern(mut comp: xmlPatternPtr) {
    let mut op: xmlStepOpPtr = 0 as *mut xmlStepOp;
    let mut i: std::os::raw::c_int = 0;
    if comp.is_null() { return }
    if !(*comp).next.is_null() { xmlFreePattern((*comp).next); }
    if !(*comp).stream.is_null() { xmlFreeStreamComp((*comp).stream); }
    if !(*comp).pattern.is_null() {
        xmlFree.expect("non-null function pointer")((*comp).pattern as
                                                        *mut xmlChar as
                                                        *mut std::os::raw::c_void);
    }
    if !(*comp).steps.is_null() {
        if (*comp).dict.is_null() {
            i = 0 as std::os::raw::c_int;
            while i < (*comp).nbStep {
                op = &mut *(*comp).steps.offset(i as isize) as *mut xmlStepOp;
                if !(*op).value.is_null() {
                    xmlFree.expect("non-null function pointer")((*op).value as
                                                                    *mut xmlChar
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                if !(*op).value2.is_null() {
                    xmlFree.expect("non-null function pointer")((*op).value2
                                                                    as
                                                                    *mut xmlChar
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                i += 1
            }
        }
        xmlFree.expect("non-null function pointer")((*comp).steps as
                                                        *mut std::os::raw::c_void);
    }
    if !(*comp).dict.is_null() { xmlDictFree((*comp).dict); }
    memset(comp as *mut std::os::raw::c_void, -(1 as std::os::raw::c_int),
           ::std::mem::size_of::<xmlPattern>() as std::os::raw::c_ulong);
    xmlFree.expect("non-null function pointer")(comp as *mut std::os::raw::c_void);
}
/* *
 * xmlFreePatternList:
 * @comp:  an XSLT comp list
 *
 * Free up the memory allocated by all the elements of @comp
 */
#[no_mangle]
pub unsafe extern "C" fn xmlFreePatternList(mut comp: xmlPatternPtr) {
    let mut cur: xmlPatternPtr = 0 as *mut xmlPattern;
    while !comp.is_null() {
        cur = comp;
        comp = (*comp).next;
        (*cur).next = 0 as *mut _xmlPattern;
        xmlFreePattern(cur);
    };
}
/* *
 * xmlNewPatParserContext:
 * @pattern:  the pattern context
 * @dict:  the inherited dictionary or NULL
 * @namespaces: the prefix definitions, array of [URI, prefix] terminated
 *              with [NULL, NULL] or NULL if no namespace is used
 *
 * Create a new XML pattern parser context
 *
 * Returns the newly allocated xmlPatParserContextPtr or NULL in case of error
 */
unsafe extern "C" fn xmlNewPatParserContext(mut pattern: *const xmlChar,
                                            mut dict: xmlDictPtr,
                                            mut namespaces:
                                                *mut *const xmlChar)
 -> xmlPatParserContextPtr {
    let mut cur: xmlPatParserContextPtr = 0 as *mut xmlPatParserContext;
    if pattern.is_null() { return 0 as xmlPatParserContextPtr }
    cur =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlPatParserContext>()
                                                          as std::os::raw::c_ulong) as
            xmlPatParserContextPtr;
    if cur.is_null() { return 0 as xmlPatParserContextPtr }
    memset(cur as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlPatParserContext>() as std::os::raw::c_ulong);
    (*cur).dict = dict;
    (*cur).cur = pattern;
    (*cur).base = pattern;
    if !namespaces.is_null() {
        let mut i: std::os::raw::c_int = 0;
        i = 0 as std::os::raw::c_int;
        while !(*namespaces.offset((2 as std::os::raw::c_int * i) as isize)).is_null()
              {
            i += 1
        }
        (*cur).nb_namespaces = i
    } else { (*cur).nb_namespaces = 0 as std::os::raw::c_int }
    (*cur).namespaces = namespaces;
    return cur;
}
/* *
 * xmlFreePatParserContext:
 * @ctxt:  an XSLT parser context
 *
 * Free up the memory allocated by @ctxt
 */
unsafe extern "C" fn xmlFreePatParserContext(mut ctxt:
                                                 xmlPatParserContextPtr) {
    if ctxt.is_null() { return }
    memset(ctxt as *mut std::os::raw::c_void, -(1 as std::os::raw::c_int),
           ::std::mem::size_of::<xmlPatParserContext>() as std::os::raw::c_ulong);
    xmlFree.expect("non-null function pointer")(ctxt as *mut std::os::raw::c_void);
}
/* *
 * xmlPatternAdd:
 * @comp:  the compiled match expression
 * @op:  an op
 * @value:  the first value
 * @value2:  the second value
 *
 * Add a step to an XSLT Compiled Match
 *
 * Returns -1 in case of failure, 0 otherwise.
 */
unsafe extern "C" fn xmlPatternAdd(mut ctxt: xmlPatParserContextPtr,
                                   mut comp: xmlPatternPtr, mut op: xmlPatOp,
                                   mut value: *mut xmlChar,
                                   mut value2: *mut xmlChar) -> std::os::raw::c_int {
    if (*comp).nbStep >= (*comp).maxStep {
        let mut temp: xmlStepOpPtr = 0 as *mut xmlStepOp;
        temp =
            xmlRealloc.expect("non-null function pointer")((*comp).steps as
                                                               *mut std::os::raw::c_void,
                                                           (((*comp).maxStep *
                                                                 2 as
                                                                     std::os::raw::c_int)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStepOp>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as xmlStepOpPtr;
        if temp.is_null() { return -(1 as std::os::raw::c_int) }
        (*comp).steps = temp;
        (*comp).maxStep *= 2 as std::os::raw::c_int
    }
    (*(*comp).steps.offset((*comp).nbStep as isize)).op = op;
    let ref mut fresh0 =
        (*(*comp).steps.offset((*comp).nbStep as isize)).value;
    *fresh0 = value;
    let ref mut fresh1 =
        (*(*comp).steps.offset((*comp).nbStep as isize)).value2;
    *fresh1 = value2;
    (*comp).nbStep += 1;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlReversePattern:
 * @comp:  the compiled match expression
 *
 * reverse all the stack of expressions
 *
 * returns 0 in case of success and -1 in case of error.
 */
unsafe extern "C" fn xmlReversePattern(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    let mut i: std::os::raw::c_int = 0;
    let mut j: std::os::raw::c_int = 0;
    /*
     * remove the leading // for //a or .//a
     */
    if (*comp).nbStep > 0 as std::os::raw::c_int &&
           (*(*comp).steps.offset(0 as std::os::raw::c_int as isize)).op as
               std::os::raw::c_uint == XML_OP_ANCESTOR as std::os::raw::c_int as std::os::raw::c_uint
       {
        i = 0 as std::os::raw::c_int;
        j = 1 as std::os::raw::c_int;
        while j < (*comp).nbStep {
            let ref mut fresh2 = (*(*comp).steps.offset(i as isize)).value;
            *fresh2 = (*(*comp).steps.offset(j as isize)).value;
            let ref mut fresh3 = (*(*comp).steps.offset(i as isize)).value2;
            *fresh3 = (*(*comp).steps.offset(j as isize)).value2;
            (*(*comp).steps.offset(i as isize)).op =
                (*(*comp).steps.offset(j as isize)).op;
            i += 1;
            j += 1
        }
        (*comp).nbStep -= 1
    }
    if (*comp).nbStep >= (*comp).maxStep {
        let mut temp: xmlStepOpPtr = 0 as *mut xmlStepOp;
        temp =
            xmlRealloc.expect("non-null function pointer")((*comp).steps as
                                                               *mut std::os::raw::c_void,
                                                           (((*comp).maxStep *
                                                                 2 as
                                                                     std::os::raw::c_int)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStepOp>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as xmlStepOpPtr;
        if temp.is_null() { return -(1 as std::os::raw::c_int) }
        (*comp).steps = temp;
        (*comp).maxStep *= 2 as std::os::raw::c_int
    }
    i = 0 as std::os::raw::c_int;
    j = (*comp).nbStep - 1 as std::os::raw::c_int;
    while j > i {
        let mut tmp: *const xmlChar = 0 as *const xmlChar;
        let mut op: xmlPatOp = XML_OP_END;
        tmp = (*(*comp).steps.offset(i as isize)).value;
        let ref mut fresh4 = (*(*comp).steps.offset(i as isize)).value;
        *fresh4 = (*(*comp).steps.offset(j as isize)).value;
        let ref mut fresh5 = (*(*comp).steps.offset(j as isize)).value;
        *fresh5 = tmp;
        tmp = (*(*comp).steps.offset(i as isize)).value2;
        let ref mut fresh6 = (*(*comp).steps.offset(i as isize)).value2;
        *fresh6 = (*(*comp).steps.offset(j as isize)).value2;
        let ref mut fresh7 = (*(*comp).steps.offset(j as isize)).value2;
        *fresh7 = tmp;
        op = (*(*comp).steps.offset(i as isize)).op;
        (*(*comp).steps.offset(i as isize)).op =
            (*(*comp).steps.offset(j as isize)).op;
        (*(*comp).steps.offset(j as isize)).op = op;
        j -= 1;
        i += 1
    }
    let ref mut fresh8 =
        (*(*comp).steps.offset((*comp).nbStep as isize)).value;
    *fresh8 = 0 as *const xmlChar;
    let ref mut fresh9 =
        (*(*comp).steps.offset((*comp).nbStep as isize)).value2;
    *fresh9 = 0 as *const xmlChar;
    let fresh10 = (*comp).nbStep;
    (*comp).nbStep = (*comp).nbStep + 1;
    (*(*comp).steps.offset(fresh10 as isize)).op = XML_OP_END;
    return 0 as std::os::raw::c_int;
}
/* ***********************************************************************
 *									*
 *		The interpreter for the precompiled patterns		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlPatPushState(mut states: *mut xmlStepStates,
                                     mut step: std::os::raw::c_int,
                                     mut node: xmlNodePtr) -> std::os::raw::c_int {
    if (*states).states.is_null() || (*states).maxstates <= 0 as std::os::raw::c_int {
        (*states).maxstates = 4 as std::os::raw::c_int;
        (*states).nbstates = 0 as std::os::raw::c_int;
        (*states).states =
            xmlMalloc.expect("non-null function pointer")((4 as std::os::raw::c_int as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStepState>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as xmlStepStatePtr
    } else if (*states).maxstates <= (*states).nbstates {
        let mut tmp: *mut xmlStepState = 0 as *mut xmlStepState;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*states).states as
                                                               *mut std::os::raw::c_void,
                                                           ((2 as std::os::raw::c_int
                                                                 *
                                                                 (*states).maxstates)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStepState>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as xmlStepStatePtr;
        if tmp.is_null() { return -(1 as std::os::raw::c_int) }
        (*states).states = tmp;
        (*states).maxstates *= 2 as std::os::raw::c_int
    }
    (*(*states).states.offset((*states).nbstates as isize)).step = step;
    let fresh11 = (*states).nbstates;
    (*states).nbstates = (*states).nbstates + 1;
    let ref mut fresh12 = (*(*states).states.offset(fresh11 as isize)).node;
    *fresh12 = node;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlPatMatch:
 * @comp: the precompiled pattern
 * @node: a node
 *
 * Test whether the node matches the pattern
 *
 * Returns 1 if it matches, 0 if it doesn't and -1 in case of failure
 */
unsafe extern "C" fn xmlPatMatch(mut comp: xmlPatternPtr,
                                 mut node: xmlNodePtr) -> std::os::raw::c_int {
    let mut current_block: u64; /* // may require backtrack */
    let mut i: std::os::raw::c_int = 0;
    let mut step: xmlStepOpPtr = 0 as *mut xmlStepOp;
    let mut states: xmlStepStates =
        {
            let mut init =
                _xmlStepStates{nbstates: 0 as std::os::raw::c_int,
                               maxstates: 0 as std::os::raw::c_int,
                               states: 0 as xmlStepStatePtr,};
            init
        };
    if comp.is_null() || node.is_null() { return -(1 as std::os::raw::c_int) }
    i = 0 as std::os::raw::c_int;
    while i < (*comp).nbStep {
        step = &mut *(*comp).steps.offset(i as isize) as *mut xmlStepOp;
        match (*step).op as std::os::raw::c_uint {
            0 => { break ; }
            1 => {
                if (*node).type_0 as std::os::raw::c_uint ==
                       XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else {
                    node = (*node).parent;
                    if (*node).type_0 as std::os::raw::c_uint ==
                           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                           (*node).type_0 as std::os::raw::c_uint ==
                               XML_DOCB_DOCUMENT_NODE as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                           (*node).type_0 as std::os::raw::c_uint ==
                               XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as
                                   std::os::raw::c_uint {
                        current_block = 820271813250567934;
                    } else { current_block = 13542293506162268615; }
                }
            }
            2 => {
                if (*node).type_0 as std::os::raw::c_uint !=
                       XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else if (*step).value.is_null() {
                    current_block = 820271813250567934;
                } else if *(*step).value.offset(0 as std::os::raw::c_int as isize) as
                              std::os::raw::c_int !=
                              *(*node).name.offset(0 as std::os::raw::c_int as isize)
                                  as std::os::raw::c_int {
                    current_block = 13542293506162268615;
                } else if xmlStrEqual((*step).value, (*node).name) == 0 {
                    current_block = 13542293506162268615;
                } else if (*node).ns.is_null() {
                    if !(*step).value2.is_null() {
                        current_block = 13542293506162268615;
                    } else { current_block = 820271813250567934; }
                } else if !(*(*node).ns).href.is_null() {
                    if (*step).value2.is_null() {
                        current_block = 13542293506162268615;
                    } else if xmlStrEqual((*step).value2, (*(*node).ns).href)
                                  == 0 {
                        current_block = 13542293506162268615;
                    } else { current_block = 820271813250567934; }
                } else { current_block = 820271813250567934; }
            }
            3 => {
                let mut lst: xmlNodePtr = 0 as *mut xmlNode;
                if (*node).type_0 as std::os::raw::c_uint !=
                       XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
                       (*node).type_0 as std::os::raw::c_uint !=
                           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
                       (*node).type_0 as std::os::raw::c_uint !=
                           XML_DOCB_DOCUMENT_NODE as std::os::raw::c_int as
                               std::os::raw::c_uint &&
                       (*node).type_0 as std::os::raw::c_uint !=
                           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as
                               std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else {
                    lst = (*node).children;
                    if !(*step).value.is_null() {
                        while !lst.is_null() {
                            if (*lst).type_0 as std::os::raw::c_uint ==
                                   XML_ELEMENT_NODE as std::os::raw::c_int as
                                       std::os::raw::c_uint &&
                                   *(*step).value.offset(0 as std::os::raw::c_int as
                                                             isize) as
                                       std::os::raw::c_int ==
                                       *(*lst).name.offset(0 as std::os::raw::c_int as
                                                               isize) as
                                           std::os::raw::c_int &&
                                   xmlStrEqual((*step).value, (*lst).name) !=
                                       0 {
                                break ;
                            }
                            lst = (*lst).next
                        }
                        if !lst.is_null() {
                            current_block = 820271813250567934;
                        } else { current_block = 13542293506162268615; }
                    } else { current_block = 13542293506162268615; }
                }
            }
            4 => {
                if (*node).type_0 as std::os::raw::c_uint !=
                       XML_ATTRIBUTE_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else {
                    if !(*step).value.is_null() {
                        if *(*step).value.offset(0 as std::os::raw::c_int as isize) as
                               std::os::raw::c_int !=
                               *(*node).name.offset(0 as std::os::raw::c_int as isize)
                                   as std::os::raw::c_int {
                            current_block = 13542293506162268615;
                        } else if xmlStrEqual((*step).value, (*node).name) ==
                                      0 {
                            current_block = 13542293506162268615;
                        } else { current_block = 6450597802325118133; }
                    } else { current_block = 6450597802325118133; }
                    match current_block {
                        13542293506162268615 => { }
                        _ =>
                        /* Namespace test */
                        /* Namespace test */
                        {
                            if (*node).ns.is_null() {
                                if !(*step).value2.is_null() {
                                    current_block = 13542293506162268615;
                                } else { current_block = 820271813250567934; }
                            } else if !(*step).value2.is_null() {
                                if xmlStrEqual((*step).value2,
                                               (*(*node).ns).href) == 0 {
                                    current_block = 13542293506162268615;
                                } else { current_block = 820271813250567934; }
                            } else { current_block = 820271813250567934; }
                        }
                    }
                }
            }
            5 => {
                if (*node).type_0 as std::os::raw::c_uint ==
                       XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                       (*node).type_0 as std::os::raw::c_uint ==
                           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                       (*node).type_0 as std::os::raw::c_uint ==
                           XML_DOCB_DOCUMENT_NODE as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                       (*node).type_0 as std::os::raw::c_uint ==
                           XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else {
                    node = (*node).parent;
                    if node.is_null() {
                        current_block = 13542293506162268615;
                    } else if (*step).value.is_null() {
                        current_block = 820271813250567934;
                    } else if *(*step).value.offset(0 as std::os::raw::c_int as isize)
                                  as std::os::raw::c_int !=
                                  *(*node).name.offset(0 as std::os::raw::c_int as
                                                           isize) as
                                      std::os::raw::c_int {
                        current_block = 13542293506162268615;
                    } else if xmlStrEqual((*step).value, (*node).name) == 0 {
                        current_block = 13542293506162268615;
                    } else if (*node).ns.is_null() {
                        if !(*step).value2.is_null() {
                            current_block = 13542293506162268615;
                        } else { current_block = 820271813250567934; }
                    } else if !(*(*node).ns).href.is_null() {
                        if (*step).value2.is_null() {
                            current_block = 13542293506162268615;
                        } else if xmlStrEqual((*step).value2,
                                              (*(*node).ns).href) == 0 {
                            current_block = 13542293506162268615;
                        } else { current_block = 820271813250567934; }
                    } else { current_block = 820271813250567934; }
                }
            }
            6 => {
                /* Namespace test */
                /* TODO: implement coalescing of ANCESTOR/NODE ops */
                if (*step).value.is_null() {
                    i += 1;
                    step =
                        &mut *(*comp).steps.offset(i as isize) as
                            *mut xmlStepOp;
                    if (*step).op as std::os::raw::c_uint ==
                           XML_OP_ROOT as std::os::raw::c_int as std::os::raw::c_uint {
                        break ;
                    }
                    if (*step).op as std::os::raw::c_uint !=
                           XML_OP_ELEM as std::os::raw::c_int as std::os::raw::c_uint {
                        current_block = 13542293506162268615;
                    } else {
                        if (*step).value.is_null() {
                            return -(1 as std::os::raw::c_int)
                        }
                        current_block = 10067844863897285902;
                    }
                } else { current_block = 10067844863897285902; }
                match current_block {
                    13542293506162268615 => { }
                    _ => {
                        if node.is_null() {
                            current_block = 13542293506162268615;
                        } else if (*node).type_0 as std::os::raw::c_uint ==
                                      XML_DOCUMENT_NODE as std::os::raw::c_int as
                                          std::os::raw::c_uint ||
                                      (*node).type_0 as std::os::raw::c_uint ==
                                          XML_HTML_DOCUMENT_NODE as
                                              std::os::raw::c_int as std::os::raw::c_uint ||
                                      (*node).type_0 as std::os::raw::c_uint ==
                                          XML_DOCB_DOCUMENT_NODE as
                                              std::os::raw::c_int as std::os::raw::c_uint ||
                                      (*node).type_0 as std::os::raw::c_uint ==
                                          XML_NAMESPACE_DECL as std::os::raw::c_int as
                                              std::os::raw::c_uint {
                            current_block = 13542293506162268615;
                        } else {
                            node = (*node).parent;
                            while !node.is_null() {
                                if (*node).type_0 as std::os::raw::c_uint ==
                                       XML_ELEMENT_NODE as std::os::raw::c_int as
                                           std::os::raw::c_uint &&
                                       *(*step).value.offset(0 as std::os::raw::c_int
                                                                 as isize) as
                                           std::os::raw::c_int ==
                                           *(*node).name.offset(0 as
                                                                    std::os::raw::c_int
                                                                    as isize)
                                               as std::os::raw::c_int &&
                                       xmlStrEqual((*step).value,
                                                   (*node).name) != 0 {
                                    /* Namespace test */
                                    if (*node).ns.is_null() {
                                        if (*step).value2.is_null() {
                                            break ;
                                        }
                                    } else if !(*(*node).ns).href.is_null() {
                                        if !(*step).value2.is_null() &&
                                               xmlStrEqual((*step).value2,
                                                           (*(*node).ns).href)
                                                   != 0 {
                                            break ;
                                        }
                                    }
                                }
                                node = (*node).parent
                            }
                            if node.is_null() {
                                current_block = 13542293506162268615;
                            } else {
                                /*
		 * prepare a potential rollback from here
		 * for ancestors of that node.
		 */
                                if (*step).op as std::os::raw::c_uint ==
                                       XML_OP_ANCESTOR as std::os::raw::c_int as
                                           std::os::raw::c_uint {
                                    xmlPatPushState(&mut states, i, node);
                                } else {
                                    xmlPatPushState(&mut states,
                                                    i - 1 as std::os::raw::c_int,
                                                    node);
                                }
                                current_block = 820271813250567934;
                            }
                        }
                    }
                }
            }
            7 => {
                if (*node).type_0 as std::os::raw::c_uint !=
                       XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else if (*node).ns.is_null() {
                    if !(*step).value.is_null() {
                        current_block = 13542293506162268615;
                    } else { current_block = 820271813250567934; }
                } else if !(*(*node).ns).href.is_null() {
                    if (*step).value.is_null() {
                        current_block = 13542293506162268615;
                    } else if xmlStrEqual((*step).value, (*(*node).ns).href)
                                  == 0 {
                        current_block = 13542293506162268615;
                    } else { current_block = 820271813250567934; }
                } else { current_block = 820271813250567934; }
            }
            8 => {
                if (*node).type_0 as std::os::raw::c_uint !=
                       XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                    current_block = 13542293506162268615;
                } else { current_block = 820271813250567934; }
            }
            _ => { current_block = 820271813250567934; }
        }
        match current_block {
            820271813250567934 => { i += 1 }
            _ => {
                /* got an error try to rollback */
                if states.states.is_null() { return 0 as std::os::raw::c_int }
                if states.nbstates <= 0 as std::os::raw::c_int {
                    xmlFree.expect("non-null function pointer")(states.states
                                                                    as
                                                                    *mut std::os::raw::c_void);
                    return 0 as std::os::raw::c_int
                }
                states.nbstates -= 1;
                i = (*states.states.offset(states.nbstates as isize)).step;
                node = (*states.states.offset(states.nbstates as isize)).node
            }
        }
    }
    if !states.states.is_null() {
        /* Free the rollback states */
        xmlFree.expect("non-null function pointer")(states.states as
                                                        *mut std::os::raw::c_void);
    }
    return 1 as std::os::raw::c_int;
}
/* *
 * xmlPatScanName:
 * @ctxt:  the XPath Parser context
 *
 * [4] NameChar ::= Letter | Digit | '.' | '-' | '_' |
 *                  CombiningChar | Extender
 *
 * [5] Name ::= (Letter | '_' | ':') (NameChar)*
 *
 * [6] Names ::= Name (S Name)*
 *
 * Returns the Name parsed or NULL
 */
unsafe extern "C" fn xmlPatScanName(mut ctxt: xmlPatParserContextPtr)
 -> *mut xmlChar {
    let mut q: *const xmlChar = 0 as *const xmlChar;
    let mut cur: *const xmlChar = 0 as *const xmlChar;
    let mut ret: *mut xmlChar = 0 as *mut xmlChar;
    let mut val: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    q = (*ctxt).cur;
    cur = q;
    val = xmlStringCurrentChar(0 as xmlParserCtxtPtr, cur, &mut len);
    if !((if val < 0x100 as std::os::raw::c_int {
              (0x41 as std::os::raw::c_int <= val && val <= 0x5a as std::os::raw::c_int ||
                   0x61 as std::os::raw::c_int <= val && val <= 0x7a as std::os::raw::c_int ||
                   0xc0 as std::os::raw::c_int <= val && val <= 0xd6 as std::os::raw::c_int ||
                   0xd8 as std::os::raw::c_int <= val && val <= 0xf6 as std::os::raw::c_int ||
                   0xf8 as std::os::raw::c_int <= val) as std::os::raw::c_int
          } else { xmlCharInRange(val as std::os::raw::c_uint, &xmlIsBaseCharGroup) })
             != 0 ||
             (if val < 0x100 as std::os::raw::c_int {
                  0 as std::os::raw::c_int
              } else {
                  (0x4e00 as std::os::raw::c_int <= val &&
                       val <= 0x9fa5 as std::os::raw::c_int ||
                       val == 0x3007 as std::os::raw::c_int ||
                       0x3021 as std::os::raw::c_int <= val &&
                           val <= 0x3029 as std::os::raw::c_int) as std::os::raw::c_int
              }) != 0) && val != '_' as i32 && val != ':' as i32 {
        return 0 as *mut xmlChar
    }
    while (if val < 0x100 as std::os::raw::c_int {
               (0x41 as std::os::raw::c_int <= val && val <= 0x5a as std::os::raw::c_int ||
                    0x61 as std::os::raw::c_int <= val && val <= 0x7a as std::os::raw::c_int
                    ||
                    0xc0 as std::os::raw::c_int <= val && val <= 0xd6 as std::os::raw::c_int
                    ||
                    0xd8 as std::os::raw::c_int <= val && val <= 0xf6 as std::os::raw::c_int
                    || 0xf8 as std::os::raw::c_int <= val) as std::os::raw::c_int
           } else {
               xmlCharInRange(val as std::os::raw::c_uint, &xmlIsBaseCharGroup)
           }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   0 as std::os::raw::c_int
               } else {
                   (0x4e00 as std::os::raw::c_int <= val &&
                        val <= 0x9fa5 as std::os::raw::c_int ||
                        val == 0x3007 as std::os::raw::c_int ||
                        0x3021 as std::os::raw::c_int <= val &&
                            val <= 0x3029 as std::os::raw::c_int) as std::os::raw::c_int
               }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   (0x30 as std::os::raw::c_int <= val && val <= 0x39 as std::os::raw::c_int)
                       as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsDigitGroup)
               }) != 0 || val == '.' as i32 || val == '-' as i32 ||
              val == '_' as i32 ||
              (if val < 0x100 as std::os::raw::c_int {
                   0 as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsCombiningGroup)
               }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   (val == 0xb7 as std::os::raw::c_int) as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsExtenderGroup)
               }) != 0 {
        cur = cur.offset(len as isize);
        val = xmlStringCurrentChar(0 as xmlParserCtxtPtr, cur, &mut len)
    }
    if !(*ctxt).dict.is_null() {
        ret =
            xmlDictLookup((*ctxt).dict, q,
                          cur.offset_from(q) as std::os::raw::c_long as
                              std::os::raw::c_int) as *mut xmlChar
    } else {
        ret =
            xmlStrndup(q,
                       cur.offset_from(q) as std::os::raw::c_long as
                           std::os::raw::c_int)
    }
    (*ctxt).cur = cur;
    return ret;
}
/* *
 * xmlPatScanNCName:
 * @ctxt:  the XPath Parser context
 *
 * Parses a non qualified name
 *
 * Returns the Name parsed or NULL
 */
unsafe extern "C" fn xmlPatScanNCName(mut ctxt: xmlPatParserContextPtr)
 -> *mut xmlChar {
    let mut q: *const xmlChar = 0 as *const xmlChar;
    let mut cur: *const xmlChar = 0 as *const xmlChar;
    let mut ret: *mut xmlChar = 0 as *mut xmlChar;
    let mut val: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    q = (*ctxt).cur;
    cur = q;
    val = xmlStringCurrentChar(0 as xmlParserCtxtPtr, cur, &mut len);
    if !((if val < 0x100 as std::os::raw::c_int {
              (0x41 as std::os::raw::c_int <= val && val <= 0x5a as std::os::raw::c_int ||
                   0x61 as std::os::raw::c_int <= val && val <= 0x7a as std::os::raw::c_int ||
                   0xc0 as std::os::raw::c_int <= val && val <= 0xd6 as std::os::raw::c_int ||
                   0xd8 as std::os::raw::c_int <= val && val <= 0xf6 as std::os::raw::c_int ||
                   0xf8 as std::os::raw::c_int <= val) as std::os::raw::c_int
          } else { xmlCharInRange(val as std::os::raw::c_uint, &xmlIsBaseCharGroup) })
             != 0 ||
             (if val < 0x100 as std::os::raw::c_int {
                  0 as std::os::raw::c_int
              } else {
                  (0x4e00 as std::os::raw::c_int <= val &&
                       val <= 0x9fa5 as std::os::raw::c_int ||
                       val == 0x3007 as std::os::raw::c_int ||
                       0x3021 as std::os::raw::c_int <= val &&
                           val <= 0x3029 as std::os::raw::c_int) as std::os::raw::c_int
              }) != 0) && val != '_' as i32 {
        return 0 as *mut xmlChar
    }
    while (if val < 0x100 as std::os::raw::c_int {
               (0x41 as std::os::raw::c_int <= val && val <= 0x5a as std::os::raw::c_int ||
                    0x61 as std::os::raw::c_int <= val && val <= 0x7a as std::os::raw::c_int
                    ||
                    0xc0 as std::os::raw::c_int <= val && val <= 0xd6 as std::os::raw::c_int
                    ||
                    0xd8 as std::os::raw::c_int <= val && val <= 0xf6 as std::os::raw::c_int
                    || 0xf8 as std::os::raw::c_int <= val) as std::os::raw::c_int
           } else {
               xmlCharInRange(val as std::os::raw::c_uint, &xmlIsBaseCharGroup)
           }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   0 as std::os::raw::c_int
               } else {
                   (0x4e00 as std::os::raw::c_int <= val &&
                        val <= 0x9fa5 as std::os::raw::c_int ||
                        val == 0x3007 as std::os::raw::c_int ||
                        0x3021 as std::os::raw::c_int <= val &&
                            val <= 0x3029 as std::os::raw::c_int) as std::os::raw::c_int
               }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   (0x30 as std::os::raw::c_int <= val && val <= 0x39 as std::os::raw::c_int)
                       as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsDigitGroup)
               }) != 0 || val == '.' as i32 || val == '-' as i32 ||
              val == '_' as i32 ||
              (if val < 0x100 as std::os::raw::c_int {
                   0 as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsCombiningGroup)
               }) != 0 ||
              (if val < 0x100 as std::os::raw::c_int {
                   (val == 0xb7 as std::os::raw::c_int) as std::os::raw::c_int
               } else {
                   xmlCharInRange(val as std::os::raw::c_uint, &xmlIsExtenderGroup)
               }) != 0 {
        cur = cur.offset(len as isize);
        val = xmlStringCurrentChar(0 as xmlParserCtxtPtr, cur, &mut len)
    }
    if !(*ctxt).dict.is_null() {
        ret =
            xmlDictLookup((*ctxt).dict, q,
                          cur.offset_from(q) as std::os::raw::c_long as
                              std::os::raw::c_int) as *mut xmlChar
    } else {
        ret =
            xmlStrndup(q,
                       cur.offset_from(q) as std::os::raw::c_long as
                           std::os::raw::c_int)
    }
    (*ctxt).cur = cur;
    return ret;
}
/* *
 * xmlCompileAttributeTest:
 * @ctxt:  the compilation context
 *
 * Compile an attribute test.
 */
unsafe extern "C" fn xmlCompileAttributeTest(mut ctxt:
                                                 xmlPatParserContextPtr) {
    let mut current_block: u64;
    let mut token: *mut xmlChar = 0 as *mut xmlChar;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut URL: *mut xmlChar = 0 as *mut xmlChar;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    name = xmlPatScanNCName(ctxt);
    if name.is_null() {
        if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
            if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ATTR,
                             0 as *mut xmlChar, 0 as *mut xmlChar) != 0 {
                current_block = 17789019520582900097;
            } else {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
                current_block = 5399440093318478209;
            }
        } else {
            (*ctxt).error = 1 as std::os::raw::c_int;
            current_block = 5399440093318478209;
        }
        match current_block { 17789019520582900097 => { } _ => { return } }
    } else {
        if *(*ctxt).cur as std::os::raw::c_int == ':' as i32 {
            let mut i: std::os::raw::c_int = 0;
            let mut prefix: *mut xmlChar = name;
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            if *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                   0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                       *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
                   *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                if (*(*ctxt).comp).dict.is_null() {
                    xmlFree.expect("non-null function pointer")(prefix as
                                                                    *mut std::os::raw::c_void);
                }
                (*ctxt).error = 1 as std::os::raw::c_int;
                current_block = 17789019520582900097;
            } else {
                /*
	* This is a namespace match
	*/
                token = xmlPatScanName(ctxt);
                if *prefix.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int ==
                       'x' as i32 &&
                       *prefix.offset(1 as std::os::raw::c_int as isize) as
                           std::os::raw::c_int == 'm' as i32 &&
                       *prefix.offset(2 as std::os::raw::c_int as isize) as
                           std::os::raw::c_int == 'l' as i32 &&
                       *prefix.offset(3 as std::os::raw::c_int as isize) as
                           std::os::raw::c_int == 0 as std::os::raw::c_int {
                    if !(*(*ctxt).comp).dict.is_null() {
                        URL =
                            xmlDictLookup((*(*ctxt).comp).dict,
                                          b"http://www.w3.org/XML/1998/namespace\x00"
                                              as *const u8 as
                                              *const std::os::raw::c_char as
                                              *const xmlChar as *mut xmlChar,
                                          -(1 as std::os::raw::c_int)) as *mut xmlChar
                    } else {
                        URL =
                            xmlStrdup(b"http://www.w3.org/XML/1998/namespace\x00"
                                          as *const u8 as *const std::os::raw::c_char
                                          as *const xmlChar as *mut xmlChar)
                    }
                    current_block = 15512526488502093901;
                } else {
                    i = 0 as std::os::raw::c_int;
                    while i < (*ctxt).nb_namespaces {
                        if xmlStrEqual(*(*ctxt).namespaces.offset((2 as
                                                                       std::os::raw::c_int
                                                                       * i +
                                                                       1 as
                                                                           std::os::raw::c_int)
                                                                      as
                                                                      isize),
                                       prefix) != 0 {
                            if !(*(*ctxt).comp).dict.is_null() {
                                URL =
                                    xmlDictLookup((*(*ctxt).comp).dict,
                                                  *(*ctxt).namespaces.offset((2
                                                                                  as
                                                                                  std::os::raw::c_int
                                                                                  *
                                                                                  i)
                                                                                 as
                                                                                 isize)
                                                      as *mut xmlChar,
                                                  -(1 as std::os::raw::c_int)) as
                                        *mut xmlChar
                            } else {
                                URL =
                                    xmlStrdup(*(*ctxt).namespaces.offset((2 as
                                                                              std::os::raw::c_int
                                                                              *
                                                                              i)
                                                                             as
                                                                             isize)
                                                  as *mut xmlChar)
                            }
                            break ;
                        } else { i += 1 }
                    }
                    if i >= (*ctxt).nb_namespaces {
                        if (*(*ctxt).comp).dict.is_null() {
                            xmlFree.expect("non-null function pointer")(prefix
                                                                            as
                                                                            *mut std::os::raw::c_void);
                        }
                        (*ctxt).error = 1 as std::os::raw::c_int;
                        current_block = 17789019520582900097;
                    } else { current_block = 15512526488502093901; }
                }
                match current_block {
                    17789019520582900097 => { }
                    _ => {
                        if (*(*ctxt).comp).dict.is_null() {
                            xmlFree.expect("non-null function pointer")(prefix
                                                                            as
                                                                            *mut std::os::raw::c_void);
                        }
                        if token.is_null() {
                            if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                                if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                 XML_OP_ATTR,
                                                 0 as *mut xmlChar, URL) != 0
                                   {
                                    current_block = 17789019520582900097;
                                } else {
                                    current_block = 9512719473022792396;
                                }
                            } else {
                                (*ctxt).error = 1 as std::os::raw::c_int;
                                current_block = 17789019520582900097;
                            }
                        } else if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                XML_OP_ATTR, token, URL) != 0
                         {
                            current_block = 17789019520582900097;
                        } else { current_block = 9512719473022792396; }
                    }
                }
            }
        } else if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ATTR, name,
                                0 as *mut xmlChar) != 0 {
            current_block = 17789019520582900097;
        } else { current_block = 9512719473022792396; }
        match current_block { 17789019520582900097 => { } _ => { return } }
    }
    if !URL.is_null() {
        if (*(*ctxt).comp).dict.is_null() {
            xmlFree.expect("non-null function pointer")(URL as
                                                            *mut std::os::raw::c_void);
        }
    }
    if !token.is_null() {
        if (*(*ctxt).comp).dict.is_null() {
            xmlFree.expect("non-null function pointer")(token as
                                                            *mut std::os::raw::c_void);
        }
    };
}
/* *
 * xmlCompileStepPattern:
 * @ctxt:  the compilation context
 *
 * Compile the Step Pattern and generates a precompiled
 * form suitable for fast matching.
 *
 * [3]    Step    ::=    '.' | NameTest
 * [4]    NameTest    ::=    QName | '*' | NCName ':' '*'
 */
unsafe extern "C" fn xmlCompileStepPattern(mut ctxt: xmlPatParserContextPtr) {
    let mut current_block: u64;
    let mut token: *mut xmlChar = 0 as *mut xmlChar;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut URL: *mut xmlChar = 0 as *mut xmlChar;
    let mut hasBlanks: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    if *(*ctxt).cur as std::os::raw::c_int == '.' as i32 {
        /*
	* Context node.
	*/
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
        if !(xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ELEM, 0 as *mut xmlChar,
                           0 as *mut xmlChar) != 0) {
            return
        }
    } else if *(*ctxt).cur as std::os::raw::c_int == '@' as i32 {
        /*
	* Attribute test.
	*/
        if (*(*ctxt).comp).flags & XML_PATTERN_XSSEL as std::os::raw::c_int != 0 {
            (*ctxt).error = 1 as std::os::raw::c_int;
            return
        }
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
        xmlCompileAttributeTest(ctxt);
        if !((*ctxt).error != 0 as std::os::raw::c_int) { return }
    } else {
        name = xmlPatScanNCName(ctxt);
        if name.is_null() {
            if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
                if !(xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ALL,
                                   0 as *mut xmlChar, 0 as *mut xmlChar) != 0)
                   {
                    return
                }
            } else { (*ctxt).error = 1 as std::os::raw::c_int; return }
        } else {
            if *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                   0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                       *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
                   *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                hasBlanks = 1 as std::os::raw::c_int;
                while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                          0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                              *(*ctxt).cur as std::os::raw::c_int <=
                                  0xa as std::os::raw::c_int ||
                          *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                        (*ctxt).cur = (*ctxt).cur.offset(1)
                    } else { };
                }
            }
            if *(*ctxt).cur as std::os::raw::c_int == ':' as i32 {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
                if *(*ctxt).cur as std::os::raw::c_int != ':' as i32 {
                    let mut prefix: *mut xmlChar = name;
                    let mut i: std::os::raw::c_int = 0;
                    if hasBlanks != 0 ||
                           (*(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int
                                ||
                                0x9 as std::os::raw::c_int <=
                                    *(*ctxt).cur as std::os::raw::c_int &&
                                    *(*ctxt).cur as std::os::raw::c_int <=
                                        0xa as std::os::raw::c_int ||
                                *(*ctxt).cur as std::os::raw::c_int ==
                                    0xd as std::os::raw::c_int) {
                        (*ctxt).error = 1 as std::os::raw::c_int;
                        current_block = 12543467031511330451;
                    } else {
                        /*
	     * This is a namespace match
	     */
                        token = xmlPatScanName(ctxt);
                        if *prefix.offset(0 as std::os::raw::c_int as isize) as
                               std::os::raw::c_int == 'x' as i32 &&
                               *prefix.offset(1 as std::os::raw::c_int as isize) as
                                   std::os::raw::c_int == 'm' as i32 &&
                               *prefix.offset(2 as std::os::raw::c_int as isize) as
                                   std::os::raw::c_int == 'l' as i32 &&
                               *prefix.offset(3 as std::os::raw::c_int as isize) as
                                   std::os::raw::c_int == 0 as std::os::raw::c_int {
                            if !(*(*ctxt).comp).dict.is_null() {
                                URL =
                                    xmlDictLookup((*(*ctxt).comp).dict,
                                                  b"http://www.w3.org/XML/1998/namespace\x00"
                                                      as *const u8 as
                                                      *const std::os::raw::c_char as
                                                      *const xmlChar as
                                                      *mut xmlChar,
                                                  -(1 as std::os::raw::c_int)) as
                                        *mut xmlChar
                            } else {
                                URL =
                                    xmlStrdup(b"http://www.w3.org/XML/1998/namespace\x00"
                                                  as *const u8 as
                                                  *const std::os::raw::c_char as
                                                  *const xmlChar as
                                                  *mut xmlChar)
                            }
                            current_block = 13325891313334703151;
                        } else {
                            i = 0 as std::os::raw::c_int;
                            while i < (*ctxt).nb_namespaces {
                                if xmlStrEqual(*(*ctxt).namespaces.offset((2
                                                                               as
                                                                               std::os::raw::c_int
                                                                               *
                                                                               i
                                                                               +
                                                                               1
                                                                                   as
                                                                                   std::os::raw::c_int)
                                                                              as
                                                                              isize),
                                               prefix) != 0 {
                                    if !(*(*ctxt).comp).dict.is_null() {
                                        URL =
                                            xmlDictLookup((*(*ctxt).comp).dict,
                                                          *(*ctxt).namespaces.offset((2
                                                                                          as
                                                                                          std::os::raw::c_int
                                                                                          *
                                                                                          i)
                                                                                         as
                                                                                         isize)
                                                              as *mut xmlChar,
                                                          -(1 as std::os::raw::c_int))
                                                as *mut xmlChar
                                    } else {
                                        URL =
                                            xmlStrdup(*(*ctxt).namespaces.offset((2
                                                                                      as
                                                                                      std::os::raw::c_int
                                                                                      *
                                                                                      i)
                                                                                     as
                                                                                     isize)
                                                          as *mut xmlChar)
                                    }
                                    break ;
                                } else { i += 1 }
                            }
                            if i >= (*ctxt).nb_namespaces {
                                (*ctxt).error = 1 as std::os::raw::c_int;
                                current_block = 12543467031511330451;
                            } else { current_block = 13325891313334703151; }
                        }
                        match current_block {
                            12543467031511330451 => { }
                            _ => {
                                if (*(*ctxt).comp).dict.is_null() {
                                    xmlFree.expect("non-null function pointer")(prefix
                                                                                    as
                                                                                    *mut std::os::raw::c_void);
                                }
                                name = 0 as *mut xmlChar;
                                if token.is_null() {
                                    if *(*ctxt).cur as std::os::raw::c_int ==
                                           '*' as i32 {
                                        if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                            (*ctxt).cur =
                                                (*ctxt).cur.offset(1)
                                        } else { };
                                        if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                         XML_OP_NS, URL,
                                                         0 as *mut xmlChar) !=
                                               0 {
                                            current_block =
                                                12543467031511330451;
                                        } else {
                                            current_block =
                                                8880031775101799352;
                                        }
                                    } else {
                                        (*ctxt).error = 1 as std::os::raw::c_int;
                                        current_block = 12543467031511330451;
                                    }
                                } else if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                        XML_OP_ELEM, token,
                                                        URL) != 0 {
                                    current_block = 12543467031511330451;
                                } else {
                                    current_block = 8880031775101799352;
                                }
                            }
                        }
                    }
                } else {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                        (*ctxt).cur = (*ctxt).cur.offset(1)
                    } else { };
                    if xmlStrEqual(name,
                                   b"child\x00" as *const u8 as
                                       *const std::os::raw::c_char as *const xmlChar)
                           != 0 {
                        if (*(*ctxt).comp).dict.is_null() {
                            xmlFree.expect("non-null function pointer")(name
                                                                            as
                                                                            *mut std::os::raw::c_void);
                        }
                        name = xmlPatScanName(ctxt);
                        if name.is_null() {
                            if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                                if !(xmlPatternAdd(ctxt, (*ctxt).comp,
                                                   XML_OP_ALL,
                                                   0 as *mut xmlChar,
                                                   0 as *mut xmlChar) != 0) {
                                    return
                                }
                            } else { (*ctxt).error = 1 as std::os::raw::c_int }
                        } else {
                            if *(*ctxt).cur as std::os::raw::c_int == ':' as i32 {
                                let mut prefix_0: *mut xmlChar = name;
                                let mut i_0: std::os::raw::c_int = 0;
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                                if *(*ctxt).cur as std::os::raw::c_int ==
                                       0x20 as std::os::raw::c_int ||
                                       0x9 as std::os::raw::c_int <=
                                           *(*ctxt).cur as std::os::raw::c_int &&
                                           *(*ctxt).cur as std::os::raw::c_int <=
                                               0xa as std::os::raw::c_int ||
                                       *(*ctxt).cur as std::os::raw::c_int ==
                                           0xd as std::os::raw::c_int {
                                    (*ctxt).error = 1 as std::os::raw::c_int;
                                    current_block = 12543467031511330451;
                                } else {
                                    /*
		    * This is a namespace match
		    */
                                    token = xmlPatScanName(ctxt);
                                    if *prefix_0.offset(0 as std::os::raw::c_int as
                                                            isize) as
                                           std::os::raw::c_int == 'x' as i32 &&
                                           *prefix_0.offset(1 as std::os::raw::c_int
                                                                as isize) as
                                               std::os::raw::c_int == 'm' as i32 &&
                                           *prefix_0.offset(2 as std::os::raw::c_int
                                                                as isize) as
                                               std::os::raw::c_int == 'l' as i32 &&
                                           *prefix_0.offset(3 as std::os::raw::c_int
                                                                as isize) as
                                               std::os::raw::c_int == 0 as std::os::raw::c_int
                                       {
                                        if !(*(*ctxt).comp).dict.is_null() {
                                            URL =
                                                xmlDictLookup((*(*ctxt).comp).dict,
                                                              b"http://www.w3.org/XML/1998/namespace\x00"
                                                                  as *const u8
                                                                  as
                                                                  *const std::os::raw::c_char
                                                                  as
                                                                  *const xmlChar
                                                                  as
                                                                  *mut xmlChar,
                                                              -(1 as
                                                                    std::os::raw::c_int))
                                                    as *mut xmlChar
                                        } else {
                                            URL =
                                                xmlStrdup(b"http://www.w3.org/XML/1998/namespace\x00"
                                                              as *const u8 as
                                                              *const std::os::raw::c_char
                                                              as
                                                              *const xmlChar
                                                              as *mut xmlChar)
                                        }
                                        current_block = 5706227035632243100;
                                    } else {
                                        i_0 = 0 as std::os::raw::c_int;
                                        while i_0 < (*ctxt).nb_namespaces {
                                            if xmlStrEqual(*(*ctxt).namespaces.offset((2
                                                                                           as
                                                                                           std::os::raw::c_int
                                                                                           *
                                                                                           i_0
                                                                                           +
                                                                                           1
                                                                                               as
                                                                                               std::os::raw::c_int)
                                                                                          as
                                                                                          isize),
                                                           prefix_0) != 0 {
                                                if !(*(*ctxt).comp).dict.is_null()
                                                   {
                                                    URL =
                                                        xmlDictLookup((*(*ctxt).comp).dict,
                                                                      *(*ctxt).namespaces.offset((2
                                                                                                      as
                                                                                                      std::os::raw::c_int
                                                                                                      *
                                                                                                      i_0)
                                                                                                     as
                                                                                                     isize)
                                                                          as
                                                                          *mut xmlChar,
                                                                      -(1 as
                                                                            std::os::raw::c_int))
                                                            as *mut xmlChar
                                                } else {
                                                    URL =
                                                        xmlStrdup(*(*ctxt).namespaces.offset((2
                                                                                                  as
                                                                                                  std::os::raw::c_int
                                                                                                  *
                                                                                                  i_0)
                                                                                                 as
                                                                                                 isize)
                                                                      as
                                                                      *mut xmlChar)
                                                }
                                                break ;
                                            } else { i_0 += 1 }
                                        }
                                        if i_0 >= (*ctxt).nb_namespaces {
                                            (*ctxt).error = 1 as std::os::raw::c_int;
                                            current_block =
                                                12543467031511330451;
                                        } else {
                                            current_block =
                                                5706227035632243100;
                                        }
                                    }
                                    match current_block {
                                        12543467031511330451 => { }
                                        _ => {
                                            if (*(*ctxt).comp).dict.is_null()
                                               {
                                                xmlFree.expect("non-null function pointer")(prefix_0
                                                                                                as
                                                                                                *mut std::os::raw::c_void);
                                            }
                                            name = 0 as *mut xmlChar;
                                            if token.is_null() {
                                                if *(*ctxt).cur as std::os::raw::c_int
                                                       == '*' as i32 {
                                                    if *(*ctxt).cur as
                                                           std::os::raw::c_int != 0 {
                                                        (*ctxt).cur =
                                                            (*ctxt).cur.offset(1)
                                                    } else { };
                                                    if xmlPatternAdd(ctxt,
                                                                     (*ctxt).comp,
                                                                     XML_OP_NS,
                                                                     URL,
                                                                     0 as
                                                                         *mut xmlChar)
                                                           != 0 {
                                                        current_block =
                                                            12543467031511330451;
                                                    } else {
                                                        current_block =
                                                            7337917895049117968;
                                                    }
                                                } else {
                                                    (*ctxt).error =
                                                        1 as std::os::raw::c_int;
                                                    current_block =
                                                        12543467031511330451;
                                                }
                                            } else if xmlPatternAdd(ctxt,
                                                                    (*ctxt).comp,
                                                                    XML_OP_CHILD,
                                                                    token,
                                                                    URL) != 0
                                             {
                                                current_block =
                                                    12543467031511330451;
                                            } else {
                                                current_block =
                                                    7337917895049117968;
                                            }
                                        }
                                    }
                                }
                            } else if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                    XML_OP_CHILD, name,
                                                    0 as *mut xmlChar) != 0 {
                                current_block = 12543467031511330451;
                            } else { current_block = 7337917895049117968; }
                            match current_block {
                                12543467031511330451 => { }
                                _ => { return }
                            }
                        }
                    } else if xmlStrEqual(name,
                                          b"attribute\x00" as *const u8 as
                                              *const std::os::raw::c_char as
                                              *const xmlChar) != 0 {
                        if (*(*ctxt).comp).dict.is_null() {
                            xmlFree.expect("non-null function pointer")(name
                                                                            as
                                                                            *mut std::os::raw::c_void);
                        }
                        name = 0 as *mut xmlChar;
                        if (*(*ctxt).comp).flags &
                               XML_PATTERN_XSSEL as std::os::raw::c_int != 0 {
                            (*ctxt).error = 1 as std::os::raw::c_int
                        } else {
                            xmlCompileAttributeTest(ctxt);
                            if !((*ctxt).error != 0 as std::os::raw::c_int) { return }
                        }
                    } else { (*ctxt).error = 1 as std::os::raw::c_int }
                    current_block = 12543467031511330451;
                }
            } else if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
                if !name.is_null() {
                    (*ctxt).error = 1 as std::os::raw::c_int;
                    current_block = 12543467031511330451;
                } else {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                        (*ctxt).cur = (*ctxt).cur.offset(1)
                    } else { };
                    if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ALL, token,
                                     0 as *mut xmlChar) != 0 {
                        current_block = 12543467031511330451;
                    } else { current_block = 8880031775101799352; }
                }
            } else if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ELEM, name,
                                    0 as *mut xmlChar) != 0 {
                current_block = 12543467031511330451;
            } else { current_block = 8880031775101799352; }
            match current_block {
                12543467031511330451 => { }
                _ => { return }
            }
        }
    }
    if !URL.is_null() {
        if (*(*ctxt).comp).dict.is_null() {
            xmlFree.expect("non-null function pointer")(URL as
                                                            *mut std::os::raw::c_void);
        }
    }
    if !token.is_null() {
        if (*(*ctxt).comp).dict.is_null() {
            xmlFree.expect("non-null function pointer")(token as
                                                            *mut std::os::raw::c_void);
        }
    }
    if !name.is_null() {
        if (*(*ctxt).comp).dict.is_null() {
            xmlFree.expect("non-null function pointer")(name as
                                                            *mut std::os::raw::c_void);
        }
    };
}
/* *
 * xmlCompilePathPattern:
 * @ctxt:  the compilation context
 *
 * Compile the Path Pattern and generates a precompiled
 * form suitable for fast matching.
 *
 * [5]    Path    ::=    ('.//')? ( Step '/' )* ( Step | '@' NameTest )
 */
unsafe extern "C" fn xmlCompilePathPattern(mut ctxt: xmlPatParserContextPtr) {
    let mut current_block: u64;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    if *(*ctxt).cur as std::os::raw::c_int == '/' as i32 {
        (*(*ctxt).comp).flags |= (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int
    } else if *(*ctxt).cur as std::os::raw::c_int == '.' as i32 ||
                  (*(*ctxt).comp).flags &
                      (XML_PATTERN_XPATH as std::os::raw::c_int |
                           XML_PATTERN_XSSEL as std::os::raw::c_int |
                           XML_PATTERN_XSFIELD as std::os::raw::c_int) != 0 {
        (*(*ctxt).comp).flags |= (1 as std::os::raw::c_int) << 9 as std::os::raw::c_int
    }
    if *(*ctxt).cur as std::os::raw::c_int == '/' as i32 &&
           *(*ctxt).cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int ==
               '/' as i32 {
        if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ANCESTOR,
                         0 as *mut xmlChar, 0 as *mut xmlChar) != 0 {
            current_block = 4647977928367601193;
        } else {
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            current_block = 11194104282611034094;
        }
    } else if *(*ctxt).cur as std::os::raw::c_int == '.' as i32 &&
                  *(*ctxt).cur.offset(1 as std::os::raw::c_int as isize) as
                      std::os::raw::c_int == '/' as i32 &&
                  *(*ctxt).cur.offset(2 as std::os::raw::c_int as isize) as
                      std::os::raw::c_int == '/' as i32 {
        if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ANCESTOR,
                         0 as *mut xmlChar, 0 as *mut xmlChar) != 0 {
            current_block = 4647977928367601193;
        } else {
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            /* Check for incompleteness. */
            while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                      0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                          *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
                      *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
            }
            if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
                (*ctxt).error = 1 as std::os::raw::c_int;
                current_block = 4647977928367601193;
            } else { current_block = 11194104282611034094; }
        }
    } else { current_block = 11194104282611034094; }
    match current_block {
        11194104282611034094 => {
            if *(*ctxt).cur as std::os::raw::c_int == '@' as i32 {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
                xmlCompileAttributeTest(ctxt);
                while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                          0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                              *(*ctxt).cur as std::os::raw::c_int <=
                                  0xa as std::os::raw::c_int ||
                          *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                        (*ctxt).cur = (*ctxt).cur.offset(1)
                    } else { };
                }
                /* TODO: check for incompleteness */
                if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
                    xmlCompileStepPattern(ctxt);
                    if (*ctxt).error != 0 as std::os::raw::c_int {
                        current_block = 4647977928367601193;
                    } else { current_block = 7189308829251266000; }
                } else { current_block = 7189308829251266000; }
            } else {
                if *(*ctxt).cur as std::os::raw::c_int == '/' as i32 {
                    if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ROOT,
                                     0 as *mut xmlChar, 0 as *mut xmlChar) !=
                           0 {
                        current_block = 4647977928367601193;
                    } else {
                        if *(*ctxt).cur as std::os::raw::c_int != 0 {
                            (*ctxt).cur = (*ctxt).cur.offset(1)
                        } else { };
                        /* Check for incompleteness. */
                        while *(*ctxt).cur as std::os::raw::c_int ==
                                  0x20 as std::os::raw::c_int ||
                                  0x9 as std::os::raw::c_int <=
                                      *(*ctxt).cur as std::os::raw::c_int &&
                                      *(*ctxt).cur as std::os::raw::c_int <=
                                          0xa as std::os::raw::c_int ||
                                  *(*ctxt).cur as std::os::raw::c_int ==
                                      0xd as std::os::raw::c_int {
                            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                (*ctxt).cur = (*ctxt).cur.offset(1)
                            } else { };
                        }
                        if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
                            (*ctxt).error = 1 as std::os::raw::c_int;
                            current_block = 4647977928367601193;
                        } else { current_block = 15512526488502093901; }
                    }
                } else { current_block = 15512526488502093901; }
                match current_block {
                    4647977928367601193 => { }
                    _ => {
                        xmlCompileStepPattern(ctxt);
                        if (*ctxt).error != 0 as std::os::raw::c_int {
                            current_block = 4647977928367601193;
                        } else {
                            while *(*ctxt).cur as std::os::raw::c_int ==
                                      0x20 as std::os::raw::c_int ||
                                      0x9 as std::os::raw::c_int <=
                                          *(*ctxt).cur as std::os::raw::c_int &&
                                          *(*ctxt).cur as std::os::raw::c_int <=
                                              0xa as std::os::raw::c_int ||
                                      *(*ctxt).cur as std::os::raw::c_int ==
                                          0xd as std::os::raw::c_int {
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                            }
                            loop  {
                                if !(*(*ctxt).cur as std::os::raw::c_int ==
                                         '/' as i32) {
                                    current_block = 7189308829251266000;
                                    break ;
                                }
                                if *(*ctxt).cur.offset(1 as std::os::raw::c_int as
                                                           isize) as
                                       std::os::raw::c_int == '/' as i32 {
                                    if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                     XML_OP_ANCESTOR,
                                                     0 as *mut xmlChar,
                                                     0 as *mut xmlChar) != 0 {
                                        current_block = 4647977928367601193;
                                        break ;
                                    }
                                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                        (*ctxt).cur = (*ctxt).cur.offset(1)
                                    } else { };
                                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                        (*ctxt).cur = (*ctxt).cur.offset(1)
                                    } else { };
                                    while *(*ctxt).cur as std::os::raw::c_int ==
                                              0x20 as std::os::raw::c_int ||
                                              0x9 as std::os::raw::c_int <=
                                                  *(*ctxt).cur as std::os::raw::c_int
                                                  &&
                                                  *(*ctxt).cur as std::os::raw::c_int
                                                      <= 0xa as std::os::raw::c_int ||
                                              *(*ctxt).cur as std::os::raw::c_int ==
                                                  0xd as std::os::raw::c_int {
                                        if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                            (*ctxt).cur =
                                                (*ctxt).cur.offset(1)
                                        } else { };
                                    }
                                    xmlCompileStepPattern(ctxt);
                                    if (*ctxt).error != 0 as std::os::raw::c_int {
                                        current_block = 4647977928367601193;
                                        break ;
                                    }
                                } else {
                                    if xmlPatternAdd(ctxt, (*ctxt).comp,
                                                     XML_OP_PARENT,
                                                     0 as *mut xmlChar,
                                                     0 as *mut xmlChar) != 0 {
                                        current_block = 4647977928367601193;
                                        break ;
                                    }
                                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                        (*ctxt).cur = (*ctxt).cur.offset(1)
                                    } else { };
                                    while *(*ctxt).cur as std::os::raw::c_int ==
                                              0x20 as std::os::raw::c_int ||
                                              0x9 as std::os::raw::c_int <=
                                                  *(*ctxt).cur as std::os::raw::c_int
                                                  &&
                                                  *(*ctxt).cur as std::os::raw::c_int
                                                      <= 0xa as std::os::raw::c_int ||
                                              *(*ctxt).cur as std::os::raw::c_int ==
                                                  0xd as std::os::raw::c_int {
                                        if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                            (*ctxt).cur =
                                                (*ctxt).cur.offset(1)
                                        } else { };
                                    }
                                    if *(*ctxt).cur as std::os::raw::c_int ==
                                           0 as std::os::raw::c_int {
                                        (*ctxt).error = 1 as std::os::raw::c_int;
                                        current_block = 4647977928367601193;
                                        break ;
                                    } else {
                                        xmlCompileStepPattern(ctxt);
                                        if (*ctxt).error != 0 as std::os::raw::c_int {
                                            current_block =
                                                4647977928367601193;
                                            break ;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            match current_block {
                4647977928367601193 => { }
                _ => {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
                        (*ctxt).error = 1 as std::os::raw::c_int
                    }
                }
            }
        }
        _ => { }
    };
}
/* *
 * xmlCompileIDCXPathPath:
 * @ctxt:  the compilation context
 *
 * Compile the Path Pattern and generates a precompiled
 * form suitable for fast matching.
 *
 * [5]    Path    ::=    ('.//')? ( Step '/' )* ( Step | '@' NameTest )
 */
unsafe extern "C" fn xmlCompileIDCXPathPath(mut ctxt:
                                                xmlPatParserContextPtr) {
    let mut current_block: u64;
    while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
              0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                  *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
              *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int != 0 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else { };
    }
    if !(*(*ctxt).cur as std::os::raw::c_int == '/' as i32) {
        (*(*ctxt).comp).flags |= (1 as std::os::raw::c_int) << 9 as std::os::raw::c_int;
        if *(*ctxt).cur as std::os::raw::c_int == '.' as i32 {
            /* "." - "self::node()" */
            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            } else { };
            while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                      0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                          *(*ctxt).cur as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
                      *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
            }
            if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
                /*
	    * Selection of the context node.
	    */
                if xmlPatternAdd(ctxt, (*ctxt).comp, XML_OP_ELEM,
                                 0 as *mut xmlChar, 0 as *mut xmlChar) != 0 {
                    current_block = 2659015382916962265;
                } else { return }
            } else if *(*ctxt).cur as std::os::raw::c_int != '/' as i32 {
                /* TODO: A more meaningful error message. */
                current_block = 2659015382916962265;
            } else {
                /* "./" - "self::node()/" */
                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                    (*ctxt).cur = (*ctxt).cur.offset(1)
                } else { };
                while *(*ctxt).cur as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                          0x9 as std::os::raw::c_int <= *(*ctxt).cur as std::os::raw::c_int &&
                              *(*ctxt).cur as std::os::raw::c_int <=
                                  0xa as std::os::raw::c_int ||
                          *(*ctxt).cur as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                    if *(*ctxt).cur as std::os::raw::c_int != 0 {
                        (*ctxt).cur = (*ctxt).cur.offset(1)
                    } else { };
                }
                if *(*ctxt).cur as std::os::raw::c_int == '/' as i32 {
                    if *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as isize) as
                           std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                           0x9 as std::os::raw::c_int <=
                               *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as
                                                       isize) as std::os::raw::c_int
                               &&
                               *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as
                                                       isize) as std::os::raw::c_int
                                   <= 0xa as std::os::raw::c_int ||
                           *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as isize)
                               as std::os::raw::c_int == 0xd as std::os::raw::c_int {
                        /*
		* Disallow "./ /"
		*/
                        current_block = 2659015382916962265;
                    } else if xmlPatternAdd(ctxt, (*ctxt).comp,
                                            XML_OP_ANCESTOR,
                                            0 as *mut xmlChar,
                                            0 as *mut xmlChar) != 0 {
                        current_block = 2659015382916962265;
                    } else {
                        if *(*ctxt).cur as std::os::raw::c_int != 0 {
                            (*ctxt).cur = (*ctxt).cur.offset(1)
                        } else { };
                        while *(*ctxt).cur as std::os::raw::c_int ==
                                  0x20 as std::os::raw::c_int ||
                                  0x9 as std::os::raw::c_int <=
                                      *(*ctxt).cur as std::os::raw::c_int &&
                                      *(*ctxt).cur as std::os::raw::c_int <=
                                          0xa as std::os::raw::c_int ||
                                  *(*ctxt).cur as std::os::raw::c_int ==
                                      0xd as std::os::raw::c_int {
                            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                (*ctxt).cur = (*ctxt).cur.offset(1)
                            } else { };
                        }
                        current_block = 14818589718467733107;
                    }
                } else { current_block = 14818589718467733107; }
                match current_block {
                    2659015382916962265 => { }
                    _ => {
                        if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
                            current_block = 2612028948881329678;
                        } else { current_block = 11932355480408055363; }
                    }
                }
            }
        } else { current_block = 11932355480408055363; }
        match current_block {
            2659015382916962265 => { }
            _ => {
                loop  {
                    match current_block {
                        2612028948881329678 => {
                            (*ctxt).error = 1 as std::os::raw::c_int;
                            return
                        }
                        _ =>
                        /* ".//" - "self:node()/descendant-or-self::node()/" */
                        /*
    * Process steps.
    */
                        {
                            xmlCompileStepPattern(ctxt);
                            if (*ctxt).error != 0 as std::os::raw::c_int {
                                current_block = 2659015382916962265;
                                break ;
                            }
                            while *(*ctxt).cur as std::os::raw::c_int ==
                                      0x20 as std::os::raw::c_int ||
                                      0x9 as std::os::raw::c_int <=
                                          *(*ctxt).cur as std::os::raw::c_int &&
                                          *(*ctxt).cur as std::os::raw::c_int <=
                                              0xa as std::os::raw::c_int ||
                                      *(*ctxt).cur as std::os::raw::c_int ==
                                          0xd as std::os::raw::c_int {
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                            }
                            if *(*ctxt).cur as std::os::raw::c_int != '/' as i32 {
                                current_block = 15004371738079956865;
                                break ;
                            }
                            if xmlPatternAdd(ctxt, (*ctxt).comp,
                                             XML_OP_PARENT, 0 as *mut xmlChar,
                                             0 as *mut xmlChar) != 0 {
                                current_block = 2659015382916962265;
                                break ;
                            }
                            if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                (*ctxt).cur = (*ctxt).cur.offset(1)
                            } else { };
                            while *(*ctxt).cur as std::os::raw::c_int ==
                                      0x20 as std::os::raw::c_int ||
                                      0x9 as std::os::raw::c_int <=
                                          *(*ctxt).cur as std::os::raw::c_int &&
                                          *(*ctxt).cur as std::os::raw::c_int <=
                                              0xa as std::os::raw::c_int ||
                                      *(*ctxt).cur as std::os::raw::c_int ==
                                          0xd as std::os::raw::c_int {
                                if *(*ctxt).cur as std::os::raw::c_int != 0 {
                                    (*ctxt).cur = (*ctxt).cur.offset(1)
                                } else { };
                            }
                            if *(*ctxt).cur as std::os::raw::c_int == '/' as i32 {
                                current_block = 2659015382916962265;
                                break ;
                            }
                            if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int
                               {
                                current_block = 2612028948881329678;
                                continue ;
                            }
                            if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int
                               {
                                current_block = 11932355480408055363;
                            } else {
                                current_block = 15004371738079956865;
                                break ;
                            }
                        }
                    }
                }
                match current_block {
                    2659015382916962265 => { }
                    _ => {
                        if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
                            (*ctxt).error = 1 as std::os::raw::c_int
                        }
                        return
                    }
                }
            }
        }
    }
    /*
	    * Disallow subsequent '//'.
	    */
    (*ctxt).error = 1 as std::os::raw::c_int;
}
/* ***********************************************************************
 *									*
 *			The streaming code				*
 *									*
 ************************************************************************/
/* *
 * xmlNewStreamComp:
 * @size: the number of expected steps
 *
 * build a new compiled pattern for streaming
 *
 * Returns the new structure or NULL in case of error.
 */
unsafe extern "C" fn xmlNewStreamComp(mut size: std::os::raw::c_int)
 -> xmlStreamCompPtr {
    let mut cur: xmlStreamCompPtr = 0 as *mut xmlStreamComp;
    if size < 4 as std::os::raw::c_int { size = 4 as std::os::raw::c_int }
    cur =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlStreamComp>()
                                                          as std::os::raw::c_ulong) as
            xmlStreamCompPtr;
    if cur.is_null() { return 0 as xmlStreamCompPtr }
    memset(cur as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlStreamComp>() as std::os::raw::c_ulong);
    (*cur).steps =
        xmlMalloc.expect("non-null function pointer")((size as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStreamStep>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as xmlStreamStepPtr;
    if (*cur).steps.is_null() {
        xmlFree.expect("non-null function pointer")(cur as *mut std::os::raw::c_void);
        return 0 as xmlStreamCompPtr
    }
    (*cur).nbStep = 0 as std::os::raw::c_int;
    (*cur).maxStep = size;
    return cur;
}
/* *
 * xmlFreeStreamComp:
 * @comp: the compiled pattern for streaming
 *
 * Free the compiled pattern for streaming
 */
unsafe extern "C" fn xmlFreeStreamComp(mut comp: xmlStreamCompPtr) {
    if !comp.is_null() {
        if !(*comp).steps.is_null() {
            xmlFree.expect("non-null function pointer")((*comp).steps as
                                                            *mut std::os::raw::c_void);
        }
        if !(*comp).dict.is_null() { xmlDictFree((*comp).dict); }
        xmlFree.expect("non-null function pointer")(comp as
                                                        *mut std::os::raw::c_void);
    };
}
/* *
 * xmlStreamCompAddStep:
 * @comp: the compiled pattern for streaming
 * @name: the first string, the name, or NULL for *
 * @ns: the second step, the namespace name
 * @flags: the flags for that step
 *
 * Add a new step to the compiled pattern
 *
 * Returns -1 in case of error or the step index if successful
 */
unsafe extern "C" fn xmlStreamCompAddStep(mut comp: xmlStreamCompPtr,
                                          mut name: *const xmlChar,
                                          mut ns: *const xmlChar,
                                          mut nodeType: std::os::raw::c_int,
                                          mut flags: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut cur: xmlStreamStepPtr = 0 as *mut xmlStreamStep;
    if (*comp).nbStep >= (*comp).maxStep {
        cur =
            xmlRealloc.expect("non-null function pointer")((*comp).steps as
                                                               *mut std::os::raw::c_void,
                                                           (((*comp).maxStep *
                                                                 2 as
                                                                     std::os::raw::c_int)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlStreamStep>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as xmlStreamStepPtr;
        if cur.is_null() { return -(1 as std::os::raw::c_int) }
        (*comp).steps = cur;
        (*comp).maxStep *= 2 as std::os::raw::c_int
    }
    let fresh13 = (*comp).nbStep;
    (*comp).nbStep = (*comp).nbStep + 1;
    cur = &mut *(*comp).steps.offset(fresh13 as isize) as *mut xmlStreamStep;
    (*cur).flags = flags;
    (*cur).name = name;
    (*cur).ns = ns;
    (*cur).nodeType = nodeType;
    return (*comp).nbStep - 1 as std::os::raw::c_int;
}
/* *
 * xmlStreamCompile:
 * @comp: the precompiled pattern
 *
 * Tries to stream compile a pattern
 *
 * Returns -1 in case of failure and 0 in case of success.
 */
unsafe extern "C" fn xmlStreamCompile(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    let mut current_block: u64;
    let mut stream: xmlStreamCompPtr = 0 as *mut xmlStreamComp;
    let mut i: std::os::raw::c_int = 0;
    let mut s: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut root: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut flags: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut prevs: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut step: xmlStepOp =
        xmlStepOp{op: XML_OP_END,
                  value: 0 as *const xmlChar,
                  value2: 0 as *const xmlChar,};
    if comp.is_null() || (*comp).steps.is_null() {
        return -(1 as std::os::raw::c_int)
    }
    /*
     * special case for .
     */
    if (*comp).nbStep == 1 as std::os::raw::c_int &&
           (*(*comp).steps.offset(0 as std::os::raw::c_int as isize)).op as
               std::os::raw::c_uint == XML_OP_ELEM as std::os::raw::c_int as std::os::raw::c_uint &&
           (*(*comp).steps.offset(0 as std::os::raw::c_int as isize)).value.is_null()
           &&
           (*(*comp).steps.offset(0 as std::os::raw::c_int as isize)).value2.is_null()
       {
        stream = xmlNewStreamComp(0 as std::os::raw::c_int);
        if stream.is_null() { return -(1 as std::os::raw::c_int) }
        /* Note that the stream will have no steps in this case. */
        (*stream).flags |= (1 as std::os::raw::c_int) << 14 as std::os::raw::c_int;
        (*comp).stream = stream;
        return 0 as std::os::raw::c_int
    }
    stream =
        xmlNewStreamComp((*comp).nbStep / 2 as std::os::raw::c_int +
                             1 as std::os::raw::c_int);
    if stream.is_null() { return -(1 as std::os::raw::c_int) }
    if !(*comp).dict.is_null() {
        (*stream).dict = (*comp).dict;
        xmlDictReference((*stream).dict);
    }
    i = 0 as std::os::raw::c_int;
    if (*comp).flags & (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int != 0 {
        (*stream).flags |= (1 as std::os::raw::c_int) << 15 as std::os::raw::c_int
    }
    loop  {
        if !(i < (*comp).nbStep) {
            current_block = 12264624100856317061;
            break ;
        }
        step = *(*comp).steps.offset(i as isize);
        match step.op as std::os::raw::c_uint {
            1 => {
                if i != 0 as std::os::raw::c_int {
                    current_block = 14270494255691478666;
                    break ;
                }
                root = 1 as std::os::raw::c_int
            }
            7 => {
                s =
                    xmlStreamCompAddStep(stream, 0 as *const xmlChar,
                                         step.value,
                                         XML_ELEMENT_NODE as std::os::raw::c_int,
                                         flags);
                if s < 0 as std::os::raw::c_int {
                    current_block = 14270494255691478666;
                    break ;
                }
                prevs = s;
                flags = 0 as std::os::raw::c_int
            }
            4 => {
                flags |= 8 as std::os::raw::c_int;
                prevs = -(1 as std::os::raw::c_int);
                s =
                    xmlStreamCompAddStep(stream, step.value, step.value2,
                                         XML_ATTRIBUTE_NODE as std::os::raw::c_int,
                                         flags);
                flags = 0 as std::os::raw::c_int;
                if s < 0 as std::os::raw::c_int {
                    current_block = 14270494255691478666;
                    break ;
                }
            }
            2 => {
                if step.value.is_null() && step.value2.is_null() {
                    /*
		    * We have a "." or "self::node()" here.
		    * Eliminate redundant self::node() tests like in "/./."
		    * or "//./"
		    * The only case we won't eliminate is "//.", i.e. if
		    * self::node() is the last node test and we had
		    * continuation somewhere beforehand.
		    */
                    if (*comp).nbStep == i + 1 as std::os::raw::c_int &&
                           flags & 1 as std::os::raw::c_int != 0 {
                        /*
			* Mark the special case where the expression resolves
			* to any type of node.
			*/
                        if (*comp).nbStep == i + 1 as std::os::raw::c_int {
                            (*stream).flags |=
                                (1 as std::os::raw::c_int) << 14 as std::os::raw::c_int
                        }
                        flags |= 16 as std::os::raw::c_int;
                        s =
                            xmlStreamCompAddStep(stream, 0 as *const xmlChar,
                                                 0 as *const xmlChar,
                                                 100 as std::os::raw::c_int, flags);
                        if s < 0 as std::os::raw::c_int {
                            current_block = 14270494255691478666;
                            break ;
                        }
                        flags = 0 as std::os::raw::c_int;
                        /*
			* If there was a previous step, mark it to be added to
			* the result node-set; this is needed since only
			* the last step will be marked as "final" and only
			* "final" nodes are added to the resulting set.
			*/
                        if prevs != -(1 as std::os::raw::c_int) {
                            (*(*stream).steps.offset(prevs as isize)).flags |=
                                32 as std::os::raw::c_int;
                            prevs = -(1 as std::os::raw::c_int)
                        }
                    }
                } else {
                    /* An element node. */
                    s =
                        xmlStreamCompAddStep(stream, step.value, step.value2,
                                             XML_ELEMENT_NODE as std::os::raw::c_int,
                                             flags);
                    if s < 0 as std::os::raw::c_int {
                        current_block = 14270494255691478666;
                        break ;
                    }
                    prevs = s;
                    flags = 0 as std::os::raw::c_int
                }
            }
            3 => {
                /* An element node child. */
                s =
                    xmlStreamCompAddStep(stream, step.value, step.value2,
                                         XML_ELEMENT_NODE as std::os::raw::c_int,
                                         flags);
                if s < 0 as std::os::raw::c_int {
                    current_block = 14270494255691478666;
                    break ;
                }
                prevs = s;
                flags = 0 as std::os::raw::c_int
            }
            8 => {
                s =
                    xmlStreamCompAddStep(stream, 0 as *const xmlChar,
                                         0 as *const xmlChar,
                                         XML_ELEMENT_NODE as std::os::raw::c_int,
                                         flags);
                if s < 0 as std::os::raw::c_int {
                    current_block = 14270494255691478666;
                    break ;
                }
                prevs = s;
                flags = 0 as std::os::raw::c_int
            }
            6 => {
                /* Skip redundant continuations. */
                if !(flags & 1 as std::os::raw::c_int != 0) {
                    flags |= 1 as std::os::raw::c_int;
                    /*
		* Mark the expression as having "//".
		*/
                    if (*stream).flags &
                           (1 as std::os::raw::c_int) << 16 as std::os::raw::c_int ==
                           0 as std::os::raw::c_int {
                        (*stream).flags |=
                            (1 as std::os::raw::c_int) << 16 as std::os::raw::c_int
                    }
                }
            }
            0 | 5 | _ => { }
        }
        /* Just skip this one. */
        i += 1
    }
    match current_block {
        12264624100856317061 => {
            if root == 0 &&
                   (*comp).flags &
                       (XML_PATTERN_XPATH as std::os::raw::c_int |
                            XML_PATTERN_XSSEL as std::os::raw::c_int |
                            XML_PATTERN_XSFIELD as std::os::raw::c_int) ==
                       0 as std::os::raw::c_int {
                /*
	* If this should behave like a real pattern, we will mark
	* the first step as having "//", to be reentrant on every
	* tree level.
	*/
                if (*stream).flags & (1 as std::os::raw::c_int) << 16 as std::os::raw::c_int
                       == 0 as std::os::raw::c_int {
                    (*stream).flags |= (1 as std::os::raw::c_int) << 16 as std::os::raw::c_int
                }
                if (*stream).nbStep > 0 as std::os::raw::c_int {
                    if (*(*stream).steps.offset(0 as std::os::raw::c_int as
                                                    isize)).flags &
                           1 as std::os::raw::c_int == 0 as std::os::raw::c_int {
                        (*(*stream).steps.offset(0 as std::os::raw::c_int as
                                                     isize)).flags |=
                            1 as std::os::raw::c_int
                    }
                }
            }
            if !((*stream).nbStep <= s) {
                (*(*stream).steps.offset(s as isize)).flags |=
                    2 as std::os::raw::c_int;
                if root != 0 {
                    (*(*stream).steps.offset(0 as std::os::raw::c_int as isize)).flags
                        |= 4 as std::os::raw::c_int
                }
                (*comp).stream = stream;
                return 0 as std::os::raw::c_int
            }
        }
        _ => { }
    }
    xmlFreeStreamComp(stream);
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlNewStreamCtxt:
 * @size: the number of expected states
 *
 * build a new stream context
 *
 * Returns the new structure or NULL in case of error.
 */
unsafe extern "C" fn xmlNewStreamCtxt(mut stream: xmlStreamCompPtr)
 -> xmlStreamCtxtPtr {
    let mut cur: xmlStreamCtxtPtr = 0 as *mut xmlStreamCtxt;
    cur =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlStreamCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlStreamCtxtPtr;
    if cur.is_null() { return 0 as xmlStreamCtxtPtr }
    memset(cur as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlStreamCtxt>() as std::os::raw::c_ulong);
    (*cur).states =
        xmlMalloc.expect("non-null function pointer")(((4 as std::os::raw::c_int *
                                                            2 as std::os::raw::c_int)
                                                           as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut std::os::raw::c_int;
    if (*cur).states.is_null() {
        xmlFree.expect("non-null function pointer")(cur as *mut std::os::raw::c_void);
        return 0 as xmlStreamCtxtPtr
    }
    (*cur).nbState = 0 as std::os::raw::c_int;
    (*cur).maxState = 4 as std::os::raw::c_int;
    (*cur).level = 0 as std::os::raw::c_int;
    (*cur).comp = stream;
    (*cur).blockLevel = -(1 as std::os::raw::c_int);
    return cur;
}
/* *
 * xmlFreeStreamCtxt:
 * @stream: the stream context
 *
 * Free the stream context
 */
#[no_mangle]
pub unsafe extern "C" fn xmlFreeStreamCtxt(mut stream: xmlStreamCtxtPtr) {
    let mut next: xmlStreamCtxtPtr = 0 as *mut xmlStreamCtxt;
    while !stream.is_null() {
        next = (*stream).next;
        if !(*stream).states.is_null() {
            xmlFree.expect("non-null function pointer")((*stream).states as
                                                            *mut std::os::raw::c_void);
        }
        xmlFree.expect("non-null function pointer")(stream as
                                                        *mut std::os::raw::c_void);
        stream = next
    };
}
/* *
 * xmlStreamCtxtAddState:
 * @comp: the stream context
 * @idx: the step index for that streaming state
 *
 * Add a new state to the stream context
 *
 * Returns -1 in case of error or the state index if successful
 */
unsafe extern "C" fn xmlStreamCtxtAddState(mut comp: xmlStreamCtxtPtr,
                                           mut idx: std::os::raw::c_int,
                                           mut level: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut i: std::os::raw::c_int = 0;
    i = 0 as std::os::raw::c_int;
    while i < (*comp).nbState {
        if *(*comp).states.offset((2 as std::os::raw::c_int * i) as isize) <
               0 as std::os::raw::c_int {
            *(*comp).states.offset((2 as std::os::raw::c_int * i) as isize) = idx;
            *(*comp).states.offset((2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int)
                                       as isize) = level;
            return i
        }
        i += 1
    }
    if (*comp).nbState >= (*comp).maxState {
        let mut cur: *mut std::os::raw::c_int = 0 as *mut std::os::raw::c_int;
        cur =
            xmlRealloc.expect("non-null function pointer")((*comp).states as
                                                               *mut std::os::raw::c_void,
                                                           (((*comp).maxState
                                                                 *
                                                                 4 as
                                                                     std::os::raw::c_int)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if cur.is_null() { return -(1 as std::os::raw::c_int) }
        (*comp).states = cur;
        (*comp).maxState *= 2 as std::os::raw::c_int
    }
    *(*comp).states.offset((2 as std::os::raw::c_int * (*comp).nbState) as isize) =
        idx;
    let fresh14 = (*comp).nbState;
    (*comp).nbState = (*comp).nbState + 1;
    *(*comp).states.offset((2 as std::os::raw::c_int * fresh14 + 1 as std::os::raw::c_int) as
                               isize) = level;
    return (*comp).nbState - 1 as std::os::raw::c_int;
}
/* *
 * xmlStreamPushInternal:
 * @stream: the stream context
 * @name: the current name
 * @ns: the namespace name
 * @nodeType: the type of the node
 *
 * Push new data onto the stream. NOTE: if the call xmlPatterncompile()
 * indicated a dictionary, then strings for name and ns will be expected
 * to come from the dictionary.
 * Both @name and @ns being NULL means the / i.e. the root of the document.
 * This can also act as a reset.
 *
 * Returns: -1 in case of error, 1 if the current state in the stream is a
 *    match and 0 otherwise.
 */
unsafe extern "C" fn xmlStreamPushInternal(mut stream: xmlStreamCtxtPtr,
                                           mut name: *const xmlChar,
                                           mut ns: *const xmlChar,
                                           mut nodeType: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut current_block: u64; /* while stream != NULL */
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut err: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut final_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut tmp: std::os::raw::c_int = 0;
    let mut i: std::os::raw::c_int = 0;
    let mut m: std::os::raw::c_int = 0;
    let mut match_0: std::os::raw::c_int = 0;
    let mut stepNr: std::os::raw::c_int = 0;
    let mut desc: std::os::raw::c_int = 0;
    let mut comp: xmlStreamCompPtr = 0 as *mut xmlStreamComp;
    let mut step: xmlStreamStep =
        xmlStreamStep{flags: 0,
                      name: 0 as *const xmlChar,
                      ns: 0 as *const xmlChar,
                      nodeType: 0,};
    if stream.is_null() || (*stream).nbState < 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    while !stream.is_null() {
        comp = (*stream).comp;
        if nodeType == XML_ELEMENT_NODE as std::os::raw::c_int && name.is_null() &&
               ns.is_null() {
            /* We have a document node here (or a reset). */
            (*stream).nbState = 0 as std::os::raw::c_int;
            (*stream).level = 0 as std::os::raw::c_int;
            (*stream).blockLevel = -(1 as std::os::raw::c_int);
            if (*comp).flags & (1 as std::os::raw::c_int) << 15 as std::os::raw::c_int != 0 {
                if (*comp).nbStep == 0 as std::os::raw::c_int {
                    /* while */
                    /* TODO: We have a "/." here? */
                    ret = 1 as std::os::raw::c_int
                } else if (*comp).nbStep == 1 as std::os::raw::c_int &&
                              (*(*comp).steps.offset(0 as std::os::raw::c_int as
                                                         isize)).nodeType ==
                                  100 as std::os::raw::c_int &&
                              (*(*comp).steps.offset(0 as std::os::raw::c_int as
                                                         isize)).flags &
                                  1 as std::os::raw::c_int != 0 {
                    /*
			* In the case of "//." the document node will match
			* as well.
			*/
                    ret = 1 as std::os::raw::c_int
                } else if (*(*comp).steps.offset(0 as std::os::raw::c_int as
                                                     isize)).flags &
                              4 as std::os::raw::c_int != 0 {
                    /* TODO: Do we need this ? */
                    tmp =
                        xmlStreamCtxtAddState(stream, 0 as std::os::raw::c_int,
                                              0 as std::os::raw::c_int);
                    if tmp < 0 as std::os::raw::c_int { err += 1 }
                }
            }
            stream = (*stream).next
        } else {
            /*
	* Fast check for ".".
	*/
            if (*comp).nbStep == 0 as std::os::raw::c_int {
                /*
	     * / and . are handled at the XPath node set creation
	     * level by checking min depth
	     */
                if (*stream).flags & XML_PATTERN_XPATH as std::os::raw::c_int != 0 {
                    stream = (*stream).next;
                    continue ;
                    /* while */
                } else {
                    /*
	    * For non-pattern like evaluation like XML Schema IDCs
	    * or traditional XPath expressions, this will match if
	    * we are at the first level only, otherwise on every level.
	    */
                    if nodeType != XML_ATTRIBUTE_NODE as std::os::raw::c_int &&
                           ((*stream).flags &
                                (XML_PATTERN_XPATH as std::os::raw::c_int |
                                     XML_PATTERN_XSSEL as std::os::raw::c_int |
                                     XML_PATTERN_XSFIELD as std::os::raw::c_int) ==
                                0 as std::os::raw::c_int ||
                                (*stream).level == 0 as std::os::raw::c_int) {
                        ret = 1 as std::os::raw::c_int
                    }
                    (*stream).level += 1
                }
            } else if (*stream).blockLevel != -(1 as std::os::raw::c_int) {
                /*
	    * Skip blocked expressions.
	    */
                (*stream).level += 1
            } else if nodeType != XML_ELEMENT_NODE as std::os::raw::c_int &&
                          nodeType != XML_ATTRIBUTE_NODE as std::os::raw::c_int &&
                          (*comp).flags &
                              (1 as std::os::raw::c_int) << 14 as std::os::raw::c_int ==
                              0 as std::os::raw::c_int {
                /*
	    * No need to process nodes of other types if we don't
	    * resolve to those types.
	    * TODO: Do we need to block the context here?
	    */
                (*stream).level += 1
            } else {
                /*
	 * Check evolution of existing states
	 */
                i = 0 as std::os::raw::c_int;
                m = (*stream).nbState;
                while i < m {
                    if (*comp).flags & (1 as std::os::raw::c_int) << 16 as std::os::raw::c_int
                           == 0 as std::os::raw::c_int {
                        /*
		* If there is no "//", then only the last
		* added state is of interest.
		*/
                        stepNr =
                            *(*stream).states.offset((2 as std::os::raw::c_int *
                                                          ((*stream).nbState -
                                                               1 as
                                                                   std::os::raw::c_int))
                                                         as isize);
                        /*
		* TODO: Security check, should not happen, remove it.
		*/
                        if *(*stream).states.offset((2 as std::os::raw::c_int *
                                                         ((*stream).nbState -
                                                              1 as
                                                                  std::os::raw::c_int)
                                                         + 1 as std::os::raw::c_int)
                                                        as isize) <
                               (*stream).level {
                            return -(1 as std::os::raw::c_int)
                        }
                        desc = 0 as std::os::raw::c_int;
                        /* loop-stopper */
                        i = m;
                        current_block = 2516253395664191498;
                    } else {
                        /*
		* If there are "//", then we need to process every "//"
		* occuring in the states, plus any other state for this
		* level.
		*/
                        stepNr =
                            *(*stream).states.offset((2 as std::os::raw::c_int * i) as
                                                         isize);
                        /* TODO: should not happen anymore: dead states */
                        if stepNr < 0 as std::os::raw::c_int {
                            current_block = 15020861196246047681;
                        } else {
                            tmp =
                                *(*stream).states.offset((2 as std::os::raw::c_int * i
                                                              +
                                                              1 as
                                                                  std::os::raw::c_int)
                                                             as isize);
                            /* skip new states just added */
                            if tmp > (*stream).level {
                                current_block = 15020861196246047681;
                            } else {
                                /* skip states at ancestor levels, except if "//" */
                                desc =
                                    (*(*comp).steps.offset(stepNr as
                                                               isize)).flags &
                                        1 as std::os::raw::c_int;
                                if tmp < (*stream).level && desc == 0 {
                                    current_block = 15020861196246047681;
                                } else {
                                    current_block = 2516253395664191498;
                                }
                            }
                        }
                    }
                    match current_block {
                        2516253395664191498 => {
                            /*
	    * Check for correct node-type.
	    */
                            step = *(*comp).steps.offset(stepNr as isize);
                            if step.nodeType != nodeType {
                                if step.nodeType ==
                                       XML_ATTRIBUTE_NODE as std::os::raw::c_int {
                                    /*
		    * Block this expression for deeper evaluation.
		    */
                                    if (*comp).flags &
                                           (1 as std::os::raw::c_int) <<
                                               16 as std::os::raw::c_int ==
                                           0 as std::os::raw::c_int {
                                        (*stream).blockLevel =
                                            (*stream).level + 1 as std::os::raw::c_int
                                    }
                                    current_block = 15020861196246047681;
                                } else if step.nodeType != 100 as std::os::raw::c_int
                                 {
                                    current_block = 15020861196246047681;
                                } else {
                                    current_block = 4741994311446740739;
                                }
                            } else { current_block = 4741994311446740739; }
                            match current_block {
                                15020861196246047681 => { }
                                _ => {
                                    /*
	    * Compare local/namespace-name.
	    */
                                    match_0 = 0 as std::os::raw::c_int;
                                    if step.nodeType == 100 as std::os::raw::c_int {
                                        match_0 = 1 as std::os::raw::c_int
                                    } else if step.name.is_null() {
                                        if step.ns.is_null() {
                                            /*
		    * This lets through all elements/attributes.
		    */
                                            match_0 = 1 as std::os::raw::c_int
                                        } else if !ns.is_null() {
                                            match_0 = xmlStrEqual(step.ns, ns)
                                        }
                                    } else if (step.ns !=
                                                   0 as *mut std::os::raw::c_void as
                                                       *const xmlChar) as
                                                  std::os::raw::c_int ==
                                                  (ns !=
                                                       0 as *mut std::os::raw::c_void
                                                           as *const xmlChar)
                                                      as std::os::raw::c_int &&
                                                  !name.is_null() &&
                                                  *step.name.offset(0 as
                                                                        std::os::raw::c_int
                                                                        as
                                                                        isize)
                                                      as std::os::raw::c_int ==
                                                      *name.offset(0 as
                                                                       std::os::raw::c_int
                                                                       as
                                                                       isize)
                                                          as std::os::raw::c_int &&
                                                  xmlStrEqual(step.name, name)
                                                      != 0 &&
                                                  (step.ns == ns ||
                                                       xmlStrEqual(step.ns,
                                                                   ns) != 0) {
                                        match_0 = 1 as std::os::raw::c_int
                                    }
                                    /* if 0 ------------------------------------------------------- */
                                    if match_0 != 0 {
                                        final_0 =
                                            step.flags & 2 as std::os::raw::c_int;
                                        if desc != 0 {
                                            if final_0 != 0 {
                                                ret = 1 as std::os::raw::c_int
                                            } else {
                                                /* descending match create a new state */
                                                xmlStreamCtxtAddState(stream,
                                                                      stepNr +
                                                                          1 as
                                                                              std::os::raw::c_int,
                                                                      (*stream).level
                                                                          +
                                                                          1 as
                                                                              std::os::raw::c_int);
                                            }
                                        } else if final_0 != 0 {
                                            ret = 1 as std::os::raw::c_int
                                        } else {
                                            xmlStreamCtxtAddState(stream,
                                                                  stepNr +
                                                                      1 as
                                                                          std::os::raw::c_int,
                                                                  (*stream).level
                                                                      +
                                                                      1 as
                                                                          std::os::raw::c_int);
                                        }
                                        if ret != 1 as std::os::raw::c_int &&
                                               step.flags & 32 as std::os::raw::c_int
                                                   != 0 {
                                            /*
		    * Check if we have a special case like "foo/bar//.", where
		    * "foo" is selected as well.
		    */
                                            ret = 1 as std::os::raw::c_int
                                        }
                                    }
                                    if (*comp).flags &
                                           (1 as std::os::raw::c_int) <<
                                               16 as std::os::raw::c_int ==
                                           0 as std::os::raw::c_int &&
                                           (match_0 == 0 || final_0 != 0) {
                                        /*
		* Mark this expression as blocked for any evaluation at
		* deeper levels. Note that this includes "/foo"
		* expressions if the *pattern* behaviour is used.
		*/
                                        (*stream).blockLevel =
                                            (*stream).level + 1 as std::os::raw::c_int
                                    }
                                }
                            }
                        }
                        _ => { }
                    }
                    i += 1
                }
                (*stream).level += 1;
                /*
	* Re/enter the expression.
	* Don't reenter if it's an absolute expression like "/foo",
	*   except "//foo".
	*/
                step = *(*comp).steps.offset(0 as std::os::raw::c_int as isize);
                if !(step.flags & 4 as std::os::raw::c_int != 0) {
                    desc = step.flags & 1 as std::os::raw::c_int;
                    if (*stream).flags &
                           (XML_PATTERN_XPATH as std::os::raw::c_int |
                                XML_PATTERN_XSSEL as std::os::raw::c_int |
                                XML_PATTERN_XSFIELD as std::os::raw::c_int) != 0 {
                        /*
	    * Re/enter the expression if it is a "descendant" one,
	    * or if we are at the 1st level of evaluation.
	    */
                        if (*stream).level == 1 as std::os::raw::c_int {
                            if (*stream).flags &
                                   (XML_PATTERN_XSSEL as std::os::raw::c_int |
                                        XML_PATTERN_XSFIELD as std::os::raw::c_int) !=
                                   0 {
                                current_block = 5482731223143257310;
                            } else { current_block = 5982427132970180265; }
                        } else if desc != 0 {
                            current_block = 5982427132970180265;
                        } else if (*stream).level == 2 as std::os::raw::c_int &&
                                      (*stream).flags &
                                          (XML_PATTERN_XSSEL as std::os::raw::c_int |
                                               XML_PATTERN_XSFIELD as
                                                   std::os::raw::c_int) != 0 {
                            current_block = 5982427132970180265;
                        } else { current_block = 5482731223143257310; }
                    } else { current_block = 5982427132970180265; }
                    match current_block {
                        5482731223143257310 => { }
                        _ =>
                        /*
	    * A "//" is always reentrant.
	    */
                        /*
	    * XS-IDC: Process the 2nd level, since the missing
	    * "self::node()" is responsible for the 2nd level being
	    * the real start level.
	    */
                        /*
	* Check expected node-type.
	*/
                        {
                            if step.nodeType != nodeType {
                                if nodeType ==
                                       XML_ATTRIBUTE_NODE as std::os::raw::c_int {
                                    current_block = 5482731223143257310;
                                } else if step.nodeType != 100 as std::os::raw::c_int
                                 {
                                    current_block = 5482731223143257310;
                                } else {
                                    current_block = 11674240781755647963;
                                }
                            } else { current_block = 11674240781755647963; }
                            match current_block {
                                5482731223143257310 => { }
                                _ => {
                                    /*
	* Compare local/namespace-name.
	*/
                                    match_0 = 0 as std::os::raw::c_int;
                                    if step.nodeType == 100 as std::os::raw::c_int {
                                        match_0 = 1 as std::os::raw::c_int
                                    } else if step.name.is_null() {
                                        if step.ns.is_null() {
                                            /*
		* This lets through all elements/attributes.
		*/
                                            match_0 = 1 as std::os::raw::c_int
                                        } else if !ns.is_null() {
                                            match_0 = xmlStrEqual(step.ns, ns)
                                        }
                                    } else if (step.ns !=
                                                   0 as *mut std::os::raw::c_void as
                                                       *const xmlChar) as
                                                  std::os::raw::c_int ==
                                                  (ns !=
                                                       0 as *mut std::os::raw::c_void
                                                           as *const xmlChar)
                                                      as std::os::raw::c_int &&
                                                  !name.is_null() &&
                                                  *step.name.offset(0 as
                                                                        std::os::raw::c_int
                                                                        as
                                                                        isize)
                                                      as std::os::raw::c_int ==
                                                      *name.offset(0 as
                                                                       std::os::raw::c_int
                                                                       as
                                                                       isize)
                                                          as std::os::raw::c_int &&
                                                  xmlStrEqual(step.name, name)
                                                      != 0 &&
                                                  (step.ns == ns ||
                                                       xmlStrEqual(step.ns,
                                                                   ns) != 0) {
                                        match_0 = 1 as std::os::raw::c_int
                                    }
                                    final_0 = step.flags & 2 as std::os::raw::c_int;
                                    if match_0 != 0 {
                                        if final_0 != 0 {
                                            ret = 1 as std::os::raw::c_int
                                        } else {
                                            xmlStreamCtxtAddState(stream,
                                                                  1 as
                                                                      std::os::raw::c_int,
                                                                  (*stream).level);
                                        }
                                        if ret != 1 as std::os::raw::c_int &&
                                               step.flags & 32 as std::os::raw::c_int
                                                   != 0 {
                                            /*
		* Check if we have a special case like "foo//.", where
		* "foo" is selected as well.
		*/
                                            ret = 1 as std::os::raw::c_int
                                        }
                                    }
                                    if (*comp).flags &
                                           (1 as std::os::raw::c_int) <<
                                               16 as std::os::raw::c_int ==
                                           0 as std::os::raw::c_int &&
                                           (match_0 == 0 || final_0 != 0) {
                                        /*
	    * Mark this expression as blocked for any evaluation at
	    * deeper levels.
	    */
                                        (*stream).blockLevel = (*stream).level
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /*
		    * XS-IDC: The missing "self::node()" will always
		    * match the first given node.
		    */
            stream = (*stream).next
        }
    }
    if err > 0 as std::os::raw::c_int { ret = -(1 as std::os::raw::c_int) }
    return ret;
}
/* *
 * xmlStreamPush:
 * @stream: the stream context
 * @name: the current name
 * @ns: the namespace name
 *
 * Push new data onto the stream. NOTE: if the call xmlPatterncompile()
 * indicated a dictionary, then strings for name and ns will be expected
 * to come from the dictionary.
 * Both @name and @ns being NULL means the / i.e. the root of the document.
 * This can also act as a reset.
 * Otherwise the function will act as if it has been given an element-node.
 *
 * Returns: -1 in case of error, 1 if the current state in the stream is a
 *    match and 0 otherwise.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlStreamPush(mut stream: xmlStreamCtxtPtr,
                                       mut name: *const xmlChar,
                                       mut ns: *const xmlChar)
 -> std::os::raw::c_int {
    return xmlStreamPushInternal(stream, name, ns,
                                 XML_ELEMENT_NODE as std::os::raw::c_int);
}
/* *
 * xmlStreamPushNode:
 * @stream: the stream context
 * @name: the current name
 * @ns: the namespace name
 * @nodeType: the type of the node being pushed
 *
 * Push new data onto the stream. NOTE: if the call xmlPatterncompile()
 * indicated a dictionary, then strings for name and ns will be expected
 * to come from the dictionary.
 * Both @name and @ns being NULL means the / i.e. the root of the document.
 * This can also act as a reset.
 * Different from xmlStreamPush() this function can be fed with nodes of type:
 * element-, attribute-, text-, cdata-section-, comment- and
 * processing-instruction-node.
 *
 * Returns: -1 in case of error, 1 if the current state in the stream is a
 *    match and 0 otherwise.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlStreamPushNode(mut stream: xmlStreamCtxtPtr,
                                           mut name: *const xmlChar,
                                           mut ns: *const xmlChar,
                                           mut nodeType: std::os::raw::c_int)
 -> std::os::raw::c_int {
    return xmlStreamPushInternal(stream, name, ns, nodeType);
}
/* *
* xmlStreamPushAttr:
* @stream: the stream context
* @name: the current name
* @ns: the namespace name
*
* Push new attribute data onto the stream. NOTE: if the call xmlPatterncompile()
* indicated a dictionary, then strings for name and ns will be expected
* to come from the dictionary.
* Both @name and @ns being NULL means the / i.e. the root of the document.
* This can also act as a reset.
* Otherwise the function will act as if it has been given an attribute-node.
*
* Returns: -1 in case of error, 1 if the current state in the stream is a
*    match and 0 otherwise.
*/
#[no_mangle]
pub unsafe extern "C" fn xmlStreamPushAttr(mut stream: xmlStreamCtxtPtr,
                                           mut name: *const xmlChar,
                                           mut ns: *const xmlChar)
 -> std::os::raw::c_int {
    return xmlStreamPushInternal(stream, name, ns,
                                 XML_ATTRIBUTE_NODE as std::os::raw::c_int);
}
/* *
 * xmlStreamPop:
 * @stream: the stream context
 *
 * push one level from the stream.
 *
 * Returns: -1 in case of error, 0 otherwise.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlStreamPop(mut stream: xmlStreamCtxtPtr)
 -> std::os::raw::c_int {
    let mut i: std::os::raw::c_int = 0;
    let mut lev: std::os::raw::c_int = 0;
    if stream.is_null() { return -(1 as std::os::raw::c_int) }
    while !stream.is_null() {
        /*
	* Reset block-level.
	*/
        if (*stream).blockLevel == (*stream).level {
            (*stream).blockLevel = -(1 as std::os::raw::c_int)
        }
        /*
	 *  stream->level can be zero when XML_FINAL_IS_ANY_NODE is set
	 *  (see the thread at
	 *  http://mail.gnome.org/archives/xslt/2008-July/msg00027.html)
	 */
        if (*stream).level != 0 { (*stream).level -= 1 }
        /*
	 * Check evolution of existing states
	 */
        i = (*stream).nbState - 1 as std::os::raw::c_int;
        while i >= 0 as std::os::raw::c_int {
            /* discard obsoleted states */
            lev =
                *(*stream).states.offset((2 as std::os::raw::c_int * i +
                                              1 as std::os::raw::c_int) as isize);
            if lev > (*stream).level { (*stream).nbState -= 1 }
            if lev <= (*stream).level { break ; }
            i -= 1
        }
        stream = (*stream).next
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlStreamWantsAnyNode:
 * @streamCtxt: the stream context
 *
 * Query if the streaming pattern additionally needs to be fed with
 * text-, cdata-section-, comment- and processing-instruction-nodes.
 * If the result is 0 then only element-nodes and attribute-nodes
 * need to be pushed.
 *
 * Returns: 1 in case of need of nodes of the above described types,
 *          0 otherwise. -1 on API errors.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlStreamWantsAnyNode(mut streamCtxt:
                                                   xmlStreamCtxtPtr)
 -> std::os::raw::c_int {
    if streamCtxt.is_null() { return -(1 as std::os::raw::c_int) }
    while !streamCtxt.is_null() {
        if (*(*streamCtxt).comp).flags &
               (1 as std::os::raw::c_int) << 14 as std::os::raw::c_int != 0 {
            return 1 as std::os::raw::c_int
        }
        streamCtxt = (*streamCtxt).next
    }
    return 0 as std::os::raw::c_int;
}
/* ***********************************************************************
 *									*
 *			The public interfaces				*
 *									*
 ************************************************************************/
/* *
 * xmlPatterncompile:
 * @pattern: the pattern to compile
 * @dict: an optional dictionary for interned strings
 * @flags: compilation flags, see xmlPatternFlags
 * @namespaces: the prefix definitions, array of [URI, prefix] or NULL
 *
 * Compile a pattern.
 *
 * Returns the compiled form of the pattern or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatterncompile(mut pattern: *const xmlChar,
                                           mut dict: *mut xmlDict,
                                           mut flags: std::os::raw::c_int,
                                           mut namespaces:
                                               *mut *const xmlChar)
 -> xmlPatternPtr {
    let mut current_block: u64;
    let mut ret: xmlPatternPtr = 0 as xmlPatternPtr;
    let mut cur: xmlPatternPtr = 0 as *mut xmlPattern;
    let mut ctxt: xmlPatParserContextPtr = 0 as xmlPatParserContextPtr;
    let mut or: *const xmlChar = 0 as *const xmlChar;
    let mut start: *const xmlChar = 0 as *const xmlChar;
    let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
    let mut type_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut streamable: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if pattern.is_null() { return 0 as xmlPatternPtr }
    start = pattern;
    or = start;
    loop  {
        if !(*or as std::os::raw::c_int != 0 as std::os::raw::c_int) {
            current_block = 10380409671385728102;
            break ;
        }
        tmp = 0 as *mut xmlChar;
        while *or as std::os::raw::c_int != 0 as std::os::raw::c_int &&
                  *or as std::os::raw::c_int != '|' as i32 {
            or = or.offset(1)
        }
        if *or as std::os::raw::c_int == 0 as std::os::raw::c_int {
            ctxt = xmlNewPatParserContext(start, dict, namespaces)
        } else {
            tmp =
                xmlStrndup(start,
                           or.offset_from(start) as std::os::raw::c_long as
                               std::os::raw::c_int);
            if !tmp.is_null() {
                ctxt = xmlNewPatParserContext(tmp, dict, namespaces)
            }
            or = or.offset(1)
        }
        if ctxt.is_null() { current_block = 17160450471500722799; break ; }
        cur = xmlNewPattern();
        if cur.is_null() { current_block = 17160450471500722799; break ; }
        /*
	* Assign string dict.
	*/
        if !dict.is_null() { (*cur).dict = dict; xmlDictReference(dict); }
        if ret.is_null() {
            ret = cur
        } else { (*cur).next = (*ret).next; (*ret).next = cur }
        (*cur).flags = flags;
        (*ctxt).comp = cur;
        if (*cur).flags &
               (XML_PATTERN_XSSEL as std::os::raw::c_int |
                    XML_PATTERN_XSFIELD as std::os::raw::c_int) != 0 {
            xmlCompileIDCXPathPath(ctxt);
        } else { xmlCompilePathPattern(ctxt); }
        if (*ctxt).error != 0 as std::os::raw::c_int {
            current_block = 17160450471500722799;
            break ;
        }
        xmlFreePatParserContext(ctxt);
        ctxt = 0 as xmlPatParserContextPtr;
        if streamable != 0 {
            if type_0 == 0 as std::os::raw::c_int {
                type_0 =
                    (*cur).flags &
                        ((1 as std::os::raw::c_int) << 8 as std::os::raw::c_int |
                             (1 as std::os::raw::c_int) << 9 as std::os::raw::c_int)
            } else if type_0 == (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int {
                if (*cur).flags & (1 as std::os::raw::c_int) << 9 as std::os::raw::c_int != 0
                   {
                    streamable = 0 as std::os::raw::c_int
                }
            } else if type_0 == (1 as std::os::raw::c_int) << 9 as std::os::raw::c_int {
                if (*cur).flags & (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int != 0
                   {
                    streamable = 0 as std::os::raw::c_int
                }
            }
        }
        if streamable != 0 { xmlStreamCompile(cur); }
        if xmlReversePattern(cur) < 0 as std::os::raw::c_int {
            current_block = 17160450471500722799;
            break ;
        }
        if !tmp.is_null() {
            xmlFree.expect("non-null function pointer")(tmp as
                                                            *mut std::os::raw::c_void);
            tmp = 0 as *mut xmlChar
        }
        start = or
    }
    match current_block {
        17160450471500722799 => {
            if !ctxt.is_null() { xmlFreePatParserContext(ctxt); }
            if !ret.is_null() { xmlFreePattern(ret); }
            if !tmp.is_null() {
                xmlFree.expect("non-null function pointer")(tmp as
                                                                *mut std::os::raw::c_void);
            }
            return 0 as xmlPatternPtr
        }
        _ => {
            if streamable == 0 as std::os::raw::c_int {
                cur = ret;
                while !cur.is_null() {
                    if !(*cur).stream.is_null() {
                        xmlFreeStreamComp((*cur).stream);
                        (*cur).stream = 0 as xmlStreamCompPtr
                    }
                    cur = (*cur).next
                }
            }
            return ret
        }
    };
}
/* *
 * xmlPatternMatch:
 * @comp: the precompiled pattern
 * @node: a node
 *
 * Test whether the node matches the pattern
 *
 * Returns 1 if it matches, 0 if it doesn't and -1 in case of failure
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternMatch(mut comp: xmlPatternPtr,
                                         mut node: xmlNodePtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if comp.is_null() || node.is_null() { return -(1 as std::os::raw::c_int) }
    while !comp.is_null() {
        ret = xmlPatMatch(comp, node);
        if ret != 0 as std::os::raw::c_int { return ret }
        comp = (*comp).next
    }
    return ret;
}
/* *
 * xmlPatternGetStreamCtxt:
 * @comp: the precompiled pattern
 *
 * Get a streaming context for that pattern
 * Use xmlFreeStreamCtxt to free the context.
 *
 * Returns a pointer to the context or NULL in case of failure
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternGetStreamCtxt(mut comp: xmlPatternPtr)
 -> xmlStreamCtxtPtr {
    let mut current_block: u64;
    let mut ret: xmlStreamCtxtPtr = 0 as xmlStreamCtxtPtr;
    let mut cur: xmlStreamCtxtPtr = 0 as *mut xmlStreamCtxt;
    if comp.is_null() || (*comp).stream.is_null() {
        return 0 as xmlStreamCtxtPtr
    }
    loop  {
        if comp.is_null() { current_block = 11050875288958768710; break ; }
        if (*comp).stream.is_null() {
            current_block = 15304029418627538571;
            break ;
        }
        cur = xmlNewStreamCtxt((*comp).stream);
        if cur.is_null() { current_block = 15304029418627538571; break ; }
        if ret.is_null() {
            ret = cur
        } else { (*cur).next = (*ret).next; (*ret).next = cur }
        (*cur).flags = (*comp).flags;
        comp = (*comp).next
    }
    match current_block {
        11050875288958768710 => { return ret }
        _ => { xmlFreeStreamCtxt(ret); return 0 as xmlStreamCtxtPtr }
    };
}
/* *
 * xmlPatternStreamable:
 * @comp: the precompiled pattern
 *
 * Check if the pattern is streamable i.e. xmlPatternGetStreamCtxt()
 * should work.
 *
 * Returns 1 if streamable, 0 if not and -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternStreamable(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    if comp.is_null() { return -(1 as std::os::raw::c_int) }
    while !comp.is_null() {
        if (*comp).stream.is_null() { return 0 as std::os::raw::c_int }
        comp = (*comp).next
    }
    return 1 as std::os::raw::c_int;
}
/* *
 * xmlPatternMaxDepth:
 * @comp: the precompiled pattern
 *
 * Check the maximum depth reachable by a pattern
 *
 * Returns -2 if no limit (using //), otherwise the depth,
 *         and -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternMaxDepth(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut i: std::os::raw::c_int = 0;
    if comp.is_null() { return -(1 as std::os::raw::c_int) }
    while !comp.is_null() {
        if (*comp).stream.is_null() { return -(1 as std::os::raw::c_int) }
        i = 0 as std::os::raw::c_int;
        while i < (*(*comp).stream).nbStep {
            if (*(*(*comp).stream).steps.offset(i as isize)).flags &
                   1 as std::os::raw::c_int != 0 {
                return -(2 as std::os::raw::c_int)
            }
            i += 1
        }
        if (*(*comp).stream).nbStep > ret { ret = (*(*comp).stream).nbStep }
        comp = (*comp).next
    }
    return ret;
}
/* *
 * xmlPatternMinDepth:
 * @comp: the precompiled pattern
 *
 * Check the minimum depth reachable by a pattern, 0 mean the / or . are
 * part of the set.
 *
 * Returns -1 in case of error otherwise the depth,
 *
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternMinDepth(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 12345678 as std::os::raw::c_int;
    if comp.is_null() { return -(1 as std::os::raw::c_int) }
    while !comp.is_null() {
        if (*comp).stream.is_null() { return -(1 as std::os::raw::c_int) }
        if (*(*comp).stream).nbStep < ret { ret = (*(*comp).stream).nbStep }
        if ret == 0 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
        comp = (*comp).next
    }
    return ret;
}
/* *
 * xmlPatternFromRoot:
 * @comp: the precompiled pattern
 *
 * Check if the pattern must be looked at from the root.
 *
 * Returns 1 if true, 0 if false and -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlPatternFromRoot(mut comp: xmlPatternPtr)
 -> std::os::raw::c_int {
    if comp.is_null() { return -(1 as std::os::raw::c_int) }
    while !comp.is_null() {
        if (*comp).stream.is_null() { return -(1 as std::os::raw::c_int) }
        if (*comp).flags & (1 as std::os::raw::c_int) << 8 as std::os::raw::c_int != 0 {
            return 1 as std::os::raw::c_int
        }
        comp = (*comp).next
    }
    return 0 as std::os::raw::c_int;
}
/* LIBXML_PATTERN_ENABLED */
/* __INCLUDE_ELFGCCHACK */

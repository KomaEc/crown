
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type _xmlBuf;
    /*
 * Summary: string dictionary
 * Description: dictionary of reusable strings, just used to avoid allocation
 *         and freeing operations.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    /*
 * The dictionary.
 */
    pub type _xmlDict;
    pub type _xmlHashTable;
    /*
 * Summary: regular expressions handling
 * Description: basic API for libxml regular expressions handling used
 *              for XML Schemas and validation.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    /* *
 * xmlRegexpPtr:
 *
 * A libxml regular expression, they can actually be far more complex
 * thank the POSIX regex expressions.
 */
    pub type _xmlRegexp;
    #[no_mangle]
    fn xmlStrcasecmp(str1: *const xmlChar, str2: *const xmlChar)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrlen(str: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    #[no_mangle]
    fn xmlStrndup(cur: *const xmlChar, len: std::os::raw::c_int) -> *mut xmlChar;
    #[no_mangle]
    fn memcpy(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_void, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn memset(_: *mut std::os::raw::c_void, _: std::os::raw::c_int, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn xmlBufContent(buf: *const xmlBuf) -> *mut xmlChar;
    #[no_mangle]
    fn xmlBufUse(buf: xmlBufPtr) -> size_t;
    #[no_mangle]
    fn xmlBufferCreate() -> xmlBufferPtr;
    #[no_mangle]
    fn xmlGetIntSubset(doc: *const xmlDoc) -> xmlDtdPtr;
    #[no_mangle]
    fn xmlNewText(content: *const xmlChar) -> xmlNodePtr;
    #[no_mangle]
    fn xmlFreeNode(cur: xmlNodePtr);
    #[no_mangle]
    fn xmlGetProp(node: *const xmlNode, name: *const xmlChar) -> *mut xmlChar;
    /*
 * Use the following function to reset the two global variables
 * xmlGenericError and xmlGenericErrorContext.
 */
    /*
 * Default message routines used by SAX and Valid context for error
 * and warning reporting.
 */
    /*
 * Extended error information routines
 */
    /*
 * Internal callback reporting routine
 */
    #[no_mangle]
    fn __xmlSimpleError(domain: std::os::raw::c_int, code: std::os::raw::c_int,
                        node: xmlNodePtr, msg: *const std::os::raw::c_char,
                        extra: *const std::os::raw::c_char);
    /* LIBXML_OUTPUT_ENABLED */
    /*
 * Interfaces for input
 */
    /*
 * Interfaces for output
 */
    /* Couple of APIs to get the output without digging into the buffers */
    #[no_mangle]
    fn xmlOutputBufferClose(out: xmlOutputBufferPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlOutputBufferFlush(out: xmlOutputBufferPtr) -> std::os::raw::c_int;
    /* LIBXML_ICONV_ENABLED */
    /* LIBXML_ICU_ENABLED */
    /*
 * Interfaces for encoding handlers.
 */
    /*
 * Interfaces for encoding names and aliases.
 */
    /*
 * Interfaces directly used by the parsers.
 */
    #[no_mangle]
    fn xmlCharEncCloseFunc(handler: *mut xmlCharEncodingHandler)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlOutputBufferWrite(out: xmlOutputBufferPtr, len: std::os::raw::c_int,
                            buf: *const std::os::raw::c_char) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlOutputBufferWriteString(out: xmlOutputBufferPtr,
                                  str: *const std::os::raw::c_char) -> std::os::raw::c_int;
    /*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 */
    /* *
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /* *
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 */
    /* *
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
 */
    /* *
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
 */
    /* * DOC_DISABLE */
/*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 */
    /* !LIBXML_THREAD_ALLOC_ENABLED */
    /* LIBXML_THREAD_ALLOC_ENABLED */
    /*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 */
    #[no_mangle]
    fn __xmlIndentTreeOutput() -> *mut std::os::raw::c_int;
    #[no_mangle]
    fn xmlOutputBufferWriteEscape(out: xmlOutputBufferPtr,
                                  str: *const xmlChar,
                                  escaping: xmlCharEncodingOutputFunc)
     -> std::os::raw::c_int;
    /* was the entity content checked */
    /* this is also used to count entities
					 * references done from that entity
					 * and if it contains '<' */
    /*
 * All entities are stored in an hash table.
 * There is 2 separate hash tables for global and parameter entities.
 */
    /*
 * External functions:
 */
    /* LIBXML_LEGACY_ENABLED */
    /* LIBXML_LEGACY_ENABLED */
    /* LIBXML_TREE_ENABLED */
    #[no_mangle]
    fn xmlDumpEntityDecl(buf: xmlBufferPtr, ent: xmlEntityPtr);
    /* used to build the automata */
    /*
 * ALL notation declarations are stored in a table.
 * There is one table per DTD.
 */
    /*
 * ALL element declarations are stored in a table.
 * There is one table per DTD.
 */
    /*
 * ALL attribute declarations are stored in a table.
 * There is one table per DTD.
 */
    /*
 * ALL IDs attributes are stored in a table.
 * There is one table per document.
 */
    /*
 * ALL Refs attributes are stored in a table.
 * There is one table per document.
 */
    /* Notation */
    /* LIBXML_TREE_ENABLED */
    /* LIBXML_OUTPUT_ENABLED */
    /* Element Content */
/* the non Doc version are being deprecated */
    /* the new versions with doc argument */
    /* DEPRECATED */
    /* LIBXML_OUTPUT_ENABLED */
    /* DEPRECATED */
    /* Element */
    /* LIBXML_TREE_ENABLED */
    /* LIBXML_OUTPUT_ENABLED */
    /* Enumeration */
    /* LIBXML_TREE_ENABLED */
    /* Attribute */
    /* LIBXML_TREE_ENABLED */
    #[no_mangle]
    fn xmlDumpAttributeDecl(buf: xmlBufferPtr, attr: xmlAttributePtr);
    #[no_mangle]
    fn xmlDumpElementDecl(buf: xmlBufferPtr, elem: xmlElementPtr);
    #[no_mangle]
    fn xmlDumpNotationTable(buf: xmlBufferPtr, table: xmlNotationTablePtr);
    #[no_mangle]
    fn xmlFindCharEncodingHandler(name: *const std::os::raw::c_char)
     -> xmlCharEncodingHandlerPtr;
    /*
 * SAX Version 1
 */
    /* unused error() get all the errors */
    /* *
 * xmlExternalEntityLoader:
 * @URL: The System ID of the resource requested
 * @ID: The Public ID of the resource requested
 * @context: the XML parser context
 *
 * External entity loaders types.
 *
 * Returns the entity input parser.
 */
    /*
 * Init/Cleanup
 */
    #[no_mangle]
    fn xmlInitParser();
    #[no_mangle]
    static mut xmlFree: xmlFreeFunc;
    #[no_mangle]
    fn __xmlGenericErrorContext() -> *mut *mut std::os::raw::c_void;
    #[no_mangle]
    fn __xmlGenericError() -> *mut xmlGenericErrorFunc;
    #[no_mangle]
    fn xmlParseCharEncoding(name: *const std::os::raw::c_char) -> xmlCharEncoding;
    #[no_mangle]
    fn xmlGetCharEncodingName(enc: xmlCharEncoding) -> *const std::os::raw::c_char;
    #[no_mangle]
    fn __xmlSaveNoEmptyTags() -> *mut std::os::raw::c_int;
    #[no_mangle]
    fn __xmlTreeIndentString() -> *mut *const std::os::raw::c_char;
    #[no_mangle]
    fn xmlAllocOutputBuffer(encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferCreateFile(file: *mut FILE,
                                 encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferCreateFilename(URI: *const std::os::raw::c_char,
                                     encoder: xmlCharEncodingHandlerPtr,
                                     compression: std::os::raw::c_int)
     -> xmlOutputBufferPtr;
    /*
 * Compression.
 */
    #[no_mangle]
    fn xmlGetCompressMode() -> std::os::raw::c_int;
    #[no_mangle]
    static mut xmlMalloc: xmlMallocFunc;
    #[no_mangle]
    fn xmlOutputBufferCreateBuffer(buffer: xmlBufferPtr,
                                   encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferCreateFd(fd: std::os::raw::c_int,
                               encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferCreateIO(iowrite: xmlOutputWriteCallback,
                               ioclose: xmlOutputCloseCallback,
                               ioctx: *mut std::os::raw::c_void,
                               encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    /* *
 * IS_CHAR_CH:
 * @c: an xmlChar (usually an unsigned char)
 *
 * Behaves like IS_CHAR on single-byte value
 */
    /* *
 * IS_BLANK:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 * [3] S ::= (#x20 | #x9 | #xD | #xA)+
 */
    /* *
 * IS_BLANK_CH:
 * @c:  an xmlChar value (normally unsigned char)
 *
 * Behaviour same as IS_BLANK
 */
    /* *
 * IS_BASECHAR:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 * [85] BaseChar ::= ... long list see REC ...
 */
    /* *
 * IS_DIGIT:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 * [88] Digit ::= ... long list see REC ...
 */
    /* *
 * IS_DIGIT_CH:
 * @c:  an xmlChar value (usually an unsigned char)
 *
 * Behaves like IS_DIGIT but with a single byte argument
 */
    /* *
 * IS_COMBINING:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 * [87] CombiningChar ::= ... long list see REC ...
 */
    /* *
 * IS_COMBINING_CH:
 * @c:  an xmlChar (usually an unsigned char)
 *
 * Always false (all combining chars > 0xff)
 */
    /* *
 * IS_EXTENDER:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 *
 * [89] Extender ::= #x00B7 | #x02D0 | #x02D1 | #x0387 | #x0640 |
 *                   #x0E46 | #x0EC6 | #x3005 | [#x3031-#x3035] |
 *                   [#x309D-#x309E] | [#x30FC-#x30FE]
 */
    /* *
 * IS_EXTENDER_CH:
 * @c:  an xmlChar value (usually an unsigned char)
 *
 * Behaves like IS_EXTENDER but with a single-byte argument
 */
    /* *
 * IS_IDEOGRAPHIC:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 *
 * [86] Ideographic ::= [#x4E00-#x9FA5] | #x3007 | [#x3021-#x3029]
 */
    /* *
 * IS_LETTER:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 *
 * [84] Letter ::= BaseChar | Ideographic
 */
    /* *
 * IS_LETTER_CH:
 * @c:  an xmlChar value (normally unsigned char)
 *
 * Macro behaves like IS_LETTER, but only check base chars
 *
 */
    /* *
 * IS_ASCII_LETTER:
 * @c: an xmlChar value
 *
 * Macro to check [a-zA-Z]
 *
 */
    /* *
 * IS_ASCII_DIGIT:
 * @c: an xmlChar value
 *
 * Macro to check [0-9]
 *
 */
    /* *
 * IS_PUBIDCHAR:
 * @c:  an UNICODE value (int)
 *
 * Macro to check the following production in the XML spec:
 *
 *
 * [13] PubidChar ::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]
 */
    /* *
 * IS_PUBIDCHAR_CH:
 * @c:  an xmlChar value (normally unsigned char)
 *
 * Same as IS_PUBIDCHAR but for single-byte value
 */
    /* *
 * SKIP_EOL:
 * @p:  and UTF8 string pointer
 *
 * Skips the end of line chars.
 */
    /* *
 * MOVETO_ENDTAG:
 * @p:  and UTF8 string pointer
 *
 * Skips to the next '>' char.
 */
    /* *
 * MOVETO_STARTTAG:
 * @p:  and UTF8 string pointer
 *
 * Skips to the next '<' char.
 */
    /* *
 * Global variables used for predefined strings.
 */
    #[no_mangle]
    static xmlStringText: [xmlChar; 0];
    #[no_mangle]
    static xmlStringTextNoenc: [xmlChar; 0];
    #[no_mangle]
    fn htmlGetMetaEncoding(doc: htmlDocPtr) -> *const xmlChar;
    #[no_mangle]
    fn htmlSetMetaEncoding(doc: htmlDocPtr, encoding: *const xmlChar)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn htmlNodeDumpFormatOutput(buf: xmlOutputBufferPtr, doc: xmlDocPtr,
                                cur: xmlNodePtr,
                                encoding: *const std::os::raw::c_char,
                                format: std::os::raw::c_int);
    #[no_mangle]
    fn htmlDocContentDumpFormatOutput(buf: xmlOutputBufferPtr, cur: xmlDocPtr,
                                      encoding: *const std::os::raw::c_char,
                                      format: std::os::raw::c_int);
    #[no_mangle]
    fn htmlNodeDumpOutput(buf: xmlOutputBufferPtr, doc: xmlDocPtr,
                          cur: xmlNodePtr, encoding: *const std::os::raw::c_char);
    /* LIBXML_OUTPUT_ENABLED */
    #[no_mangle]
    fn htmlIsBooleanAttr(name: *const xmlChar) -> std::os::raw::c_int;
    /*
 * Summary: Internal Interfaces for memory buffers in libxml2
 * Description: this module describes most of the new xmlBuf buffer
 *              entry points, those are private routines, with a
 *              few exceptions exported in tree.h. This was added
 *              in 2.9.0.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    #[no_mangle]
    fn xmlBufCreate() -> xmlBufPtr;
    #[no_mangle]
    fn xmlBufSetAllocationScheme(buf: xmlBufPtr,
                                 scheme: xmlBufferAllocationScheme)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlBufGetAllocationScheme(buf: xmlBufPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlBufFree(buf: xmlBufPtr);
    #[no_mangle]
    fn xmlBufAdd(buf: xmlBufPtr, str: *const xmlChar, len: std::os::raw::c_int)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlBufWriteQuotedString(buf: xmlBufPtr, string: *const xmlChar)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlBufFromBuffer(buffer: xmlBufferPtr) -> xmlBufPtr;
    #[no_mangle]
    fn xmlBufBackToBuffer(buf: xmlBufPtr) -> xmlBufferPtr;
    #[no_mangle]
    fn xmlBufMergeBuffer(buf: xmlBufPtr, buffer: xmlBufferPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlCharEncOutput(output: xmlOutputBufferPtr, init: std::os::raw::c_int)
     -> std::os::raw::c_int;
}
pub type xmlChar = std::os::raw::c_uchar;
pub type size_t = std::os::raw::c_ulong;
pub type __off_t = std::os::raw::c_long;
pub type __off64_t = std::os::raw::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: std::os::raw::c_int,
    pub _IO_read_ptr: *mut std::os::raw::c_char,
    pub _IO_read_end: *mut std::os::raw::c_char,
    pub _IO_read_base: *mut std::os::raw::c_char,
    pub _IO_write_base: *mut std::os::raw::c_char,
    pub _IO_write_ptr: *mut std::os::raw::c_char,
    pub _IO_write_end: *mut std::os::raw::c_char,
    pub _IO_buf_base: *mut std::os::raw::c_char,
    pub _IO_buf_end: *mut std::os::raw::c_char,
    pub _IO_save_base: *mut std::os::raw::c_char,
    pub _IO_backup_base: *mut std::os::raw::c_char,
    pub _IO_save_end: *mut std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: std::os::raw::c_int,
    pub _flags2: std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: std::os::raw::c_ushort,
    pub _vtable_offset: std::os::raw::c_schar,
    pub _shortbuf: [std::os::raw::c_char; 1],
    pub _lock: *mut std::os::raw::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: std::os::raw::c_int,
    pub _unused2: [std::os::raw::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type xmlFreeFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
/*
 * Summary: interface for the memory allocator
 * Description: provides interfaces for the memory allocator,
 *              including debugging capabilities.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * DEBUG_MEMORY:
 *
 * DEBUG_MEMORY replaces the allocator with a collect and debug
 * shell to the libc allocator.
 * DEBUG_MEMORY should only be activated when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/* #define DEBUG_MEMORY_FREED */
/* #define DEBUG_MEMORY_LOCATION */
/* *
 * DEBUG_MEMORY_LOCATION:
 *
 * DEBUG_MEMORY_LOCATION should be activated only when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/*
 * The XML memory wrapper support 4 basic overloadable functions.
 */
/* *
 * xmlFreeFunc:
 * @mem: an already allocated block of memory
 *
 * Signature for a free() implementation.
 */
/* *
 * xmlMallocFunc:
 * @size:  the size requested in bytes
 *
 * Signature for a malloc() implementation.
 *
 * Returns a pointer to the newly allocated block or NULL in case of error.
 */
pub type xmlMallocFunc
    =
    Option<unsafe extern "C" fn(_: size_t) -> *mut std::os::raw::c_void>;
/*
 * Summary: interfaces for tree manipulation
 * Description: this module describes the structures found in an tree resulting
 *              from an XML or HTML parsing, as well as the API provided for
 *              various processing on that tree
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Some of the basic types pointer to structures:
 */
/* xmlIO.h */
/* parser.h */
/* entities.h */
/* *
 * BASE_BUFFER_SIZE:
 *
 * default buffer size 4000.
 */
/* *
 * LIBXML_NAMESPACE_DICT:
 *
 * Defines experimental behaviour:
 * 1) xmlNs gets an additional field @context (a xmlDoc)
 * 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.
 */
/* #define LIBXML_NAMESPACE_DICT */
/* *
 * xmlBufferAllocationScheme:
 *
 * A buffer allocation scheme can be defined to either match exactly the
 * need or double it's allocated size each time it is found too small.
 */
/* double each time one need to grow */
/* grow only to the minimal size */
/* immutable buffer */
/* special allocation scheme used for I/O */
/* exact up to a threshold, and doubleit thereafter */
/* limit the upper size of the buffer */
/* *
 * xmlBuffer:
 *
 * A buffer structure, this old construct is limited to 2GB and
 * is being deprecated, use API with xmlBuf instead
 */
/* The buffer content UTF8 */
/* The buffer size used */
/* The buffer size */
/* The realloc method */
/* in IO mode we may have a different base */
/* *
 * xmlBuf:
 *
 * A buffer structure, new one, the actual structure internals are not public
 */
/* *
 * xmlBufPtr:
 *
 * A pointer to a buffer structure, the actual structure internals are not
 * public
 */
pub type xmlBufPtr = *mut xmlBuf;
pub type xmlBuf = _xmlBuf;
/*
 * Summary: interface for the encoding conversion functions
 * Description: interface for the encoding conversion functions needed for
 *              XML basic encoding and iconv() support.
 *
 * Related specs are
 * rfc2044        (UTF-8 and UTF-16) F. Yergeau Alis Technologies
 * [ISO-10646]    UTF-8 and UTF-16 in Annexes
 * [ISO-8859-1]   ISO Latin-1 characters codes.
 * [UNICODE]      The Unicode Consortium, "The Unicode Standard --
 *                Worldwide Character Encoding -- Version 1.0", Addison-
 *                Wesley, Volume 1, 1991, Volume 2, 1992.  UTF-8 is
 *                described in Unicode Technical Report #4.
 * [US-ASCII]     Coded Character Set--7-bit American Standard Code for
 *                Information Interchange, ANSI X3.4-1986.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * xmlCharEncoding:
 *
 * Predefined values for some standard encodings.
 * Libxml does not do beforehand translation on UTF8 and ISOLatinX.
 * It also supports ASCII, ISO-8859-1, and UTF16 (LE and BE) by default.
 *
 * Anything else would have to be translated to UTF8 before being
 * given to the parser itself. The BOM for UTF16 and the encoding
 * declaration are looked at and a converter is looked for at that
 * point. If not found the parser stops here as asked by the XML REC. A
 * converter can be registered by the user using xmlRegisterCharEncodingHandler
 * but the current form doesn't allow stateful transcoding (a serious
 * problem agreed !). If iconv has been found it will be used
 * automatically and allow stateful transcoding, the simplest is then
 * to be sure to enable iconv and to provide iconv libs for the encoding
 * support needed.
 *
 * Note that the generic "UTF-16" is not a predefined value.  Instead, only
 * the specific UTF-16LE and UTF-16BE are present.
 */
/* No char encoding detected */
/* No char encoding detected */
/* UTF-8 */
/* UTF-16 little endian */
/* UTF-16 big endian */
/* UCS-4 little endian */
/* UCS-4 big endian */
/* EBCDIC uh! */
/* UCS-4 unusual ordering */
/* UCS-4 unusual ordering */
/* UCS-2 */
/* ISO-8859-1 ISO Latin 1 */
/* ISO-8859-2 ISO Latin 2 */
/* ISO-8859-3 */
/* ISO-8859-4 */
/* ISO-8859-5 */
/* ISO-8859-6 */
/* ISO-8859-7 */
/* ISO-8859-8 */
/* ISO-8859-9 */
/* ISO-2022-JP */
/* Shift_JIS */
/* EUC-JP */
/* pure ASCII */
/* *
 * xmlCharEncodingInputFunc:
 * @out:  a pointer to an array of bytes to store the UTF-8 result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of chars in the original encoding
 * @inlen:  the length of @in
 *
 * Take a block of chars in the original encoding and try to convert
 * it to an UTF-8 block of chars out.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets consumed.
 */
/* *
 * xmlCharEncodingOutputFunc:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of UTF-8 chars
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and try to convert it to another
 * encoding.
 * Note: a first call designed to produce heading info is called with
 * in = NULL. If stateful this should also initialize the encoder state.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets produced.
 */
/*
 * Block defining the handlers for non UTF-8 encodings.
 * If iconv is supported, there are two extra fields.
 */
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut std::os::raw::c_void;
pub type xmlCharEncodingOutputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlCharEncodingInputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
/* amount consumed from raw */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlOutputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub writecallback: xmlOutputWriteCallback,
    pub closecallback: xmlOutputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub conv: xmlBufPtr,
    pub written: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
}
pub type xmlOutputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlOutputWriteCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlOutputBuffer = _xmlOutputBuffer;
pub type xmlOutputBufferPtr = *mut xmlOutputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut std::os::raw::c_void,
    pub line: std::os::raw::c_ushort,
    pub extra: std::os::raw::c_ushort,
}
/*
 * A few public routines for xmlBuf. As those are expected to be used
 * mostly internally the bulk of the routines are internal in buf.h
 */
/*
 * LIBXML2_NEW_BUFFER:
 *
 * Macro used to express that the API use the new buffers for
 * xmlParserInputBuffer and xmlOutputBuffer. The change was
 * introduced in 2.9.0.
 */
/* *
 * XML_XML_NAMESPACE:
 *
 * This is the namespace for the special xml: prefix predefined in the
 * XML Namespace specification.
 */
/* *
 * XML_XML_ID:
 *
 * This is the name for the special xml:id attribute
 */
/*
 * The different element types carried by an XML tree.
 *
 * NOTE: This is synchronized with DOM Level1 values
 *       See http://www.w3.org/TR/REC-DOM-Level-1/
 *
 * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should
 * be deprecated to use an XML_DTD_NODE.
 */
/* *
 * xmlNotation:
 *
 * A DTD Notation definition.
 */
/* Notation name */
/* Public identifier, if any */
/* System identifier, if any */
/* *
 * xmlAttributeType:
 *
 * A DTD Attribute type definition.
 */
/* *
 * xmlAttributeDefault:
 *
 * A DTD Attribute default definition.
 */
/* *
 * xmlEnumeration:
 *
 * List structure used when there is an enumeration in DTDs.
 */
/* next one */
/* Enumeration name */
/* *
 * xmlAttribute:
 *
 * An Attribute declaration in a DTD.
 */
/* application data */
/* XML_ATTRIBUTE_DECL, must be second ! */
/* Attribute name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* next in hash table */
/* The attribute type */
/* the default */
/* or the default value */
/* or the enumeration tree if any */
/* the namespace prefix if any */
/* Element holding the attribute */
/* *
 * xmlElementContentType:
 *
 * Possible definitions of element content types.
 */
/* *
 * xmlElementContentOccur:
 *
 * Possible definitions of element content occurrences.
 */
/* *
 * xmlElementContent:
 *
 * An XML Element content as stored after parsing an element definition
 * in a DTD.
 */
/* PCDATA, ELEMENT, SEQ or OR */
/* ONCE, OPT, MULT or PLUS */
/* Element name */
/* first child */
/* second child */
/* parent */
/* Namespace prefix */
/* *
 * xmlElementTypeVal:
 *
 * The different possibilities for an element content type.
 */
/* *
 * xmlElement:
 *
 * An XML Element declaration from a DTD.
 */
/* application data */
/* XML_ELEMENT_DECL, must be second ! */
/* Element name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* The type */
/* the allowed element content */
/* List of the declared attributes */
/* the namespace prefix if any */
/* the validating regexp */
/* *
 * XML_LOCAL_NAMESPACE:
 *
 * A namespace declaration node.
 */
/* *
 * xmlNs:
 *
 * An XML namespace.
 * Note that prefix == NULL is valid, it defines the default namespace
 * within the subtree (until overridden).
 *
 * xmlNsType is unified with xmlElementType.
 */
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *mut std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: std::os::raw::c_int,
    pub standalone: std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut std::os::raw::c_void,
    pub refs: *mut std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut std::os::raw::c_void,
    pub parseFlags: std::os::raw::c_int,
    pub properties: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut std::os::raw::c_void,
    pub elements: *mut std::os::raw::c_void,
    pub attributes: *mut std::os::raw::c_void,
    pub entities: *mut std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut std::os::raw::c_void,
}
pub type xmlElementType = std::os::raw::c_uint;
pub const XML_DOCB_DOCUMENT_NODE: xmlElementType = 21;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
pub type xmlNsType = xmlElementType;
/* normally an xmlDoc */
/* *
 * xmlDtd:
 *
 * An XML DTD, as defined by <!DOCTYPE ... There is actually one for
 * the internal subset and for the external subset.
 */
/* application data */
/* XML_DTD_NODE, must be second ! */
/* Name of the DTD */
/* the value of the property link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* Hash table for notations if any */
/* Hash table for elements if any */
/* Hash table for attributes if any */
/* Hash table for entities if any */
/* External identifier for PUBLIC DTD */
/* URI for a SYSTEM or PUBLIC DTD */
/* Hash table for param entities if any */
/* *
 * xmlAttr:
 *
 * An attribute on an XML node.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut std::os::raw::c_void,
}
pub type xmlAttributeType = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
/* for type/PSVI informations */
/* *
 * xmlID:
 *
 * An XML ID instance.
 */
/* next ID */
/* The ID name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* The document holding the ID */
/* *
 * xmlRef:
 *
 * An XML IDREF instance.
 */
/* next Ref */
/* The Ref name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* *
 * xmlNode:
 *
 * A node in an XML tree.
 */
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
/* application data */
/* type number, must be second ! */
/* the name of the node, or the entity */
/* parent->childs link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* pointer to the associated namespace */
/* the content */
/* properties list */
/* namespace definitions on this node */
/* for type/PSVI informations */
/* line number */
/* extra data for XPath/XSLT */
/* *
 * XML_GET_CONTENT:
 *
 * Macro to extract the content pointer of a node.
 */
/* *
 * XML_GET_LINE:
 *
 * Macro to extract the line number of an element node.
 */
/* *
 * xmlDocProperty
 *
 * Set of properties of the document as found by the parser
 * Some of them are linked to similary named xmlParserOption
 */
/* document is XML well formed */
/* document is Namespace valid */
/* parsed with old XML-1.0 parser */
/* DTD validation was successful */
/* XInclude substitution was done */
/* Document was built using the API
                                           and not by parsing an instance */
/* built for internal processing */
/* parsed or built HTML document */
/* *
 * xmlDoc:
 *
 * An XML document.
 */
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
/*
 * Summary: interface for the XML entities handling
 * Description: this module provides some of the entity API needed
 *              for the parser and applications.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The different valid entity types.
 */
/*
 * An unit of storage for an entity, contains the string, the value
 * and the linkind data needed for the linking in the hash table.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: std::os::raw::c_int,
    pub checked: std::os::raw::c_int,
}
pub type xmlEntityType = std::os::raw::c_uint;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
pub type xmlElementContentOccur = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type xmlBufferAllocationScheme = std::os::raw::c_uint;
pub const XML_BUFFER_ALLOC_BOUNDED: xmlBufferAllocationScheme = 5;
pub const XML_BUFFER_ALLOC_HYBRID: xmlBufferAllocationScheme = 4;
pub const XML_BUFFER_ALLOC_IO: xmlBufferAllocationScheme = 3;
pub const XML_BUFFER_ALLOC_IMMUTABLE: xmlBufferAllocationScheme = 2;
pub const XML_BUFFER_ALLOC_EXACT: xmlBufferAllocationScheme = 1;
pub const XML_BUFFER_ALLOC_DOUBLEIT: xmlBufferAllocationScheme = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlBuffer {
    pub content: *mut xmlChar,
    pub use_0: std::os::raw::c_uint,
    pub size: std::os::raw::c_uint,
    pub alloc: xmlBufferAllocationScheme,
    pub contentIO: *mut xmlChar,
}
pub type xmlBuffer = _xmlBuffer;
pub type xmlBufferPtr = *mut xmlBuffer;
pub type xmlAttributeDefault = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_FIXED: xmlAttributeDefault = 4;
pub const XML_ATTRIBUTE_IMPLIED: xmlAttributeDefault = 3;
pub const XML_ATTRIBUTE_REQUIRED: xmlAttributeDefault = 2;
pub const XML_ATTRIBUTE_NONE: xmlAttributeDefault = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttribute {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub nexth: *mut _xmlAttribute,
    pub atype: xmlAttributeType,
    pub def: xmlAttributeDefault,
    pub defaultValue: *const xmlChar,
    pub tree: xmlEnumerationPtr,
    pub prefix: *const xmlChar,
    pub elem: *const xmlChar,
}
pub type xmlAttribute = _xmlAttribute;
pub type xmlAttributePtr = *mut xmlAttribute;
pub type xmlElementTypeVal = std::os::raw::c_uint;
pub const XML_ELEMENT_TYPE_ELEMENT: xmlElementTypeVal = 4;
pub const XML_ELEMENT_TYPE_MIXED: xmlElementTypeVal = 3;
pub const XML_ELEMENT_TYPE_ANY: xmlElementTypeVal = 2;
pub const XML_ELEMENT_TYPE_EMPTY: xmlElementTypeVal = 1;
pub const XML_ELEMENT_TYPE_UNDEFINED: xmlElementTypeVal = 0;
pub type xmlRegexp = _xmlRegexp;
pub type xmlRegexpPtr = *mut xmlRegexp;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElement {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub etype: xmlElementTypeVal,
    pub content: xmlElementContentPtr,
    pub attributes: xmlAttributePtr,
    pub prefix: *const xmlChar,
    pub contModel: xmlRegexpPtr,
}
pub type xmlElement = _xmlElement;
pub type xmlElementPtr = *mut xmlElement;
pub type xmlNsPtr = *mut xmlNs;
pub type xmlDtd = _xmlDtd;
pub type xmlDtdPtr = *mut xmlDtd;
pub const XML_SAVE_CHAR_INVALID: C2RustUnnamed_0 = 1401;
pub const XML_FROM_OUTPUT: C2RustUnnamed = 7;
pub const XML_SAVE_NO_DOCTYPE: C2RustUnnamed_0 = 1402;
pub const XML_SAVE_UNKNOWN_ENCODING: C2RustUnnamed_0 = 1403;
pub const XML_SAVE_NOT_UTF8: C2RustUnnamed_0 = 1400;
pub const XML_ERR_NO_MEMORY: C2RustUnnamed_0 = 2;
pub type xmlSaveCtxt = _xmlSaveCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSaveCtxt {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: std::os::raw::c_int,
    pub fd: std::os::raw::c_int,
    pub filename: *const xmlChar,
    pub encoding: *const xmlChar,
    pub handler: xmlCharEncodingHandlerPtr,
    pub buf: xmlOutputBufferPtr,
    pub doc: xmlDocPtr,
    pub options: std::os::raw::c_int,
    pub level: std::os::raw::c_int,
    pub format: std::os::raw::c_int,
    pub indent: [std::os::raw::c_char; 61],
    pub indent_nr: std::os::raw::c_int,
    pub indent_size: std::os::raw::c_int,
    pub escape: xmlCharEncodingOutputFunc,
    pub escapeAttr: xmlCharEncodingOutputFunc,
}
pub type xmlSaveCtxtPtr = *mut xmlSaveCtxt;
pub const XML_SAVE_NO_EMPTY: C2RustUnnamed_1 = 4;
pub type xmlNotationTablePtr = *mut xmlNotationTable;
pub type xmlNotationTable = _xmlHashTable;
pub const XML_SAVE_FORMAT: C2RustUnnamed_1 = 1;
pub type htmlDocPtr = xmlDocPtr;
pub const XML_SAVE_AS_HTML: C2RustUnnamed_1 = 64;
pub const XML_SAVE_AS_XML: C2RustUnnamed_1 = 32;
pub const XML_SAVE_XHTML: C2RustUnnamed_1 = 16;
pub const XML_SAVE_NO_XHTML: C2RustUnnamed_1 = 8;
pub const XML_SAVE_NO_DECL: C2RustUnnamed_1 = 2;
pub type xmlGenericErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub const XML_CHAR_ENCODING_ASCII: xmlCharEncoding = 22;
pub type xmlCharEncoding = std::os::raw::c_int;
pub const XML_CHAR_ENCODING_EUC_JP: xmlCharEncoding = 21;
pub const XML_CHAR_ENCODING_SHIFT_JIS: xmlCharEncoding = 20;
pub const XML_CHAR_ENCODING_2022_JP: xmlCharEncoding = 19;
pub const XML_CHAR_ENCODING_8859_9: xmlCharEncoding = 18;
pub const XML_CHAR_ENCODING_8859_8: xmlCharEncoding = 17;
pub const XML_CHAR_ENCODING_8859_7: xmlCharEncoding = 16;
pub const XML_CHAR_ENCODING_8859_6: xmlCharEncoding = 15;
pub const XML_CHAR_ENCODING_8859_5: xmlCharEncoding = 14;
pub const XML_CHAR_ENCODING_8859_4: xmlCharEncoding = 13;
pub const XML_CHAR_ENCODING_8859_3: xmlCharEncoding = 12;
pub const XML_CHAR_ENCODING_8859_2: xmlCharEncoding = 11;
pub const XML_CHAR_ENCODING_8859_1: xmlCharEncoding = 10;
pub const XML_CHAR_ENCODING_UCS2: xmlCharEncoding = 9;
pub const XML_CHAR_ENCODING_UCS4_3412: xmlCharEncoding = 8;
pub const XML_CHAR_ENCODING_UCS4_2143: xmlCharEncoding = 7;
pub const XML_CHAR_ENCODING_EBCDIC: xmlCharEncoding = 6;
pub const XML_CHAR_ENCODING_UCS4BE: xmlCharEncoding = 5;
pub const XML_CHAR_ENCODING_UCS4LE: xmlCharEncoding = 4;
pub const XML_CHAR_ENCODING_UTF16BE: xmlCharEncoding = 3;
pub const XML_CHAR_ENCODING_UTF16LE: xmlCharEncoding = 2;
pub const XML_CHAR_ENCODING_UTF8: xmlCharEncoding = 1;
pub const XML_CHAR_ENCODING_NONE: xmlCharEncoding = 0;
pub const XML_CHAR_ENCODING_ERROR: xmlCharEncoding = -1;
pub type C2RustUnnamed = std::os::raw::c_uint;
pub const XML_FROM_URI: C2RustUnnamed = 30;
pub const XML_FROM_BUFFER: C2RustUnnamed = 29;
pub const XML_FROM_SCHEMATRONV: C2RustUnnamed = 28;
pub const XML_FROM_I18N: C2RustUnnamed = 27;
pub const XML_FROM_MODULE: C2RustUnnamed = 26;
pub const XML_FROM_WRITER: C2RustUnnamed = 25;
pub const XML_FROM_CHECK: C2RustUnnamed = 24;
pub const XML_FROM_VALID: C2RustUnnamed = 23;
pub const XML_FROM_XSLT: C2RustUnnamed = 22;
pub const XML_FROM_C14N: C2RustUnnamed = 21;
pub const XML_FROM_CATALOG: C2RustUnnamed = 20;
pub const XML_FROM_RELAXNGV: C2RustUnnamed = 19;
pub const XML_FROM_RELAXNGP: C2RustUnnamed = 18;
pub const XML_FROM_SCHEMASV: C2RustUnnamed = 17;
pub const XML_FROM_SCHEMASP: C2RustUnnamed = 16;
pub const XML_FROM_DATATYPE: C2RustUnnamed = 15;
pub const XML_FROM_REGEXP: C2RustUnnamed = 14;
pub const XML_FROM_XPOINTER: C2RustUnnamed = 13;
pub const XML_FROM_XPATH: C2RustUnnamed = 12;
pub const XML_FROM_XINCLUDE: C2RustUnnamed = 11;
pub const XML_FROM_HTTP: C2RustUnnamed = 10;
pub const XML_FROM_FTP: C2RustUnnamed = 9;
pub const XML_FROM_IO: C2RustUnnamed = 8;
pub const XML_FROM_MEMORY: C2RustUnnamed = 6;
pub const XML_FROM_HTML: C2RustUnnamed = 5;
pub const XML_FROM_DTD: C2RustUnnamed = 4;
pub const XML_FROM_NAMESPACE: C2RustUnnamed = 3;
pub const XML_FROM_TREE: C2RustUnnamed = 2;
pub const XML_FROM_PARSER: C2RustUnnamed = 1;
pub const XML_FROM_NONE: C2RustUnnamed = 0;
pub type C2RustUnnamed_0 = std::os::raw::c_uint;
pub const XML_BUF_OVERFLOW: C2RustUnnamed_0 = 7000;
pub const XML_I18N_NO_OUTPUT: C2RustUnnamed_0 = 6004;
pub const XML_I18N_CONV_FAILED: C2RustUnnamed_0 = 6003;
pub const XML_I18N_EXCESS_HANDLER: C2RustUnnamed_0 = 6002;
pub const XML_I18N_NO_HANDLER: C2RustUnnamed_0 = 6001;
pub const XML_I18N_NO_NAME: C2RustUnnamed_0 = 6000;
pub const XML_CHECK_NAME_NOT_NULL: C2RustUnnamed_0 = 5037;
pub const XML_CHECK_WRONG_NAME: C2RustUnnamed_0 = 5036;
pub const XML_CHECK_OUTSIDE_DICT: C2RustUnnamed_0 = 5035;
pub const XML_CHECK_NOT_NCNAME: C2RustUnnamed_0 = 5034;
pub const XML_CHECK_NO_DICT: C2RustUnnamed_0 = 5033;
pub const XML_CHECK_NOT_UTF8: C2RustUnnamed_0 = 5032;
pub const XML_CHECK_NS_ANCESTOR: C2RustUnnamed_0 = 5031;
pub const XML_CHECK_NS_SCOPE: C2RustUnnamed_0 = 5030;
pub const XML_CHECK_WRONG_PARENT: C2RustUnnamed_0 = 5029;
pub const XML_CHECK_NO_HREF: C2RustUnnamed_0 = 5028;
pub const XML_CHECK_NOT_NS_DECL: C2RustUnnamed_0 = 5027;
pub const XML_CHECK_NOT_ENTITY_DECL: C2RustUnnamed_0 = 5026;
pub const XML_CHECK_NOT_ELEM_DECL: C2RustUnnamed_0 = 5025;
pub const XML_CHECK_NOT_ATTR_DECL: C2RustUnnamed_0 = 5024;
pub const XML_CHECK_NOT_ATTR: C2RustUnnamed_0 = 5023;
pub const XML_CHECK_NOT_DTD: C2RustUnnamed_0 = 5022;
pub const XML_CHECK_WRONG_NEXT: C2RustUnnamed_0 = 5021;
pub const XML_CHECK_NO_NEXT: C2RustUnnamed_0 = 5020;
pub const XML_CHECK_WRONG_PREV: C2RustUnnamed_0 = 5019;
pub const XML_CHECK_NO_PREV: C2RustUnnamed_0 = 5018;
pub const XML_CHECK_WRONG_DOC: C2RustUnnamed_0 = 5017;
pub const XML_CHECK_NO_ELEM: C2RustUnnamed_0 = 5016;
pub const XML_CHECK_NO_NAME: C2RustUnnamed_0 = 5015;
pub const XML_CHECK_NO_DOC: C2RustUnnamed_0 = 5014;
pub const XML_CHECK_NO_PARENT: C2RustUnnamed_0 = 5013;
pub const XML_CHECK_ENTITY_TYPE: C2RustUnnamed_0 = 5012;
pub const XML_CHECK_UNKNOWN_NODE: C2RustUnnamed_0 = 5011;
pub const XML_CHECK_FOUND_NOTATION: C2RustUnnamed_0 = 5010;
pub const XML_CHECK_FOUND_FRAGMENT: C2RustUnnamed_0 = 5009;
pub const XML_CHECK_FOUND_DOCTYPE: C2RustUnnamed_0 = 5008;
pub const XML_CHECK_FOUND_COMMENT: C2RustUnnamed_0 = 5007;
pub const XML_CHECK_FOUND_PI: C2RustUnnamed_0 = 5006;
pub const XML_CHECK_FOUND_ENTITY: C2RustUnnamed_0 = 5005;
pub const XML_CHECK_FOUND_ENTITYREF: C2RustUnnamed_0 = 5004;
pub const XML_CHECK_FOUND_CDATA: C2RustUnnamed_0 = 5003;
pub const XML_CHECK_FOUND_TEXT: C2RustUnnamed_0 = 5002;
pub const XML_CHECK_FOUND_ATTRIBUTE: C2RustUnnamed_0 = 5001;
pub const XML_CHECK_FOUND_ELEMENT: C2RustUnnamed_0 = 5000;
pub const XML_MODULE_CLOSE: C2RustUnnamed_0 = 4901;
pub const XML_MODULE_OPEN: C2RustUnnamed_0 = 4900;
pub const XML_SCHEMATRONV_REPORT: C2RustUnnamed_0 = 4001;
pub const XML_SCHEMATRONV_ASSERT: C2RustUnnamed_0 = 4000;
pub const XML_SCHEMAP_COS_ALL_LIMITED: C2RustUnnamed_0 = 3091;
pub const XML_SCHEMAP_A_PROPS_CORRECT_3: C2RustUnnamed_0 = 3090;
pub const XML_SCHEMAP_AU_PROPS_CORRECT: C2RustUnnamed_0 = 3089;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_2: C2RustUnnamed_0 = 3088;
pub const XML_SCHEMAP_AG_PROPS_CORRECT: C2RustUnnamed_0 = 3087;
pub const XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH: C2RustUnnamed_0 = 3086;
pub const XML_SCHEMAP_WARN_ATTR_REDECL_PROH: C2RustUnnamed_0 = 3085;
pub const XML_SCHEMAP_WARN_UNLOCATED_SCHEMA: C2RustUnnamed_0 = 3084;
pub const XML_SCHEMAP_WARN_SKIP_SCHEMA: C2RustUnnamed_0 = 3083;
pub const XML_SCHEMAP_SRC_IMPORT: C2RustUnnamed_0 = 3082;
pub const XML_SCHEMAP_SRC_REDEFINE: C2RustUnnamed_0 = 3081;
pub const XML_SCHEMAP_C_PROPS_CORRECT: C2RustUnnamed_0 = 3080;
pub const XML_SCHEMAP_A_PROPS_CORRECT_2: C2RustUnnamed_0 = 3079;
pub const XML_SCHEMAP_AU_PROPS_CORRECT_2: C2RustUnnamed_0 = 3078;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3: C2RustUnnamed_0 = 3077;
pub const XML_SCHEMAP_SRC_CT_1: C2RustUnnamed_0 = 3076;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_2: C2RustUnnamed_0 = 3075;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_1: C2RustUnnamed_0 = 3074;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3: C2RustUnnamed_0 = 3073;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2: C2RustUnnamed_0 = 3072;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1: C2RustUnnamed_0 = 3071;
pub const XML_SCHEMAP_NOT_DETERMINISTIC: C2RustUnnamed_0 = 3070;
pub const XML_SCHEMAP_INTERNAL: C2RustUnnamed_0 = 3069;
pub const XML_SCHEMAP_SRC_IMPORT_2_2: C2RustUnnamed_0 = 3068;
pub const XML_SCHEMAP_SRC_IMPORT_2_1: C2RustUnnamed_0 = 3067;
pub const XML_SCHEMAP_SRC_IMPORT_2: C2RustUnnamed_0 = 3066;
pub const XML_SCHEMAP_SRC_IMPORT_1_2: C2RustUnnamed_0 = 3065;
pub const XML_SCHEMAP_SRC_IMPORT_1_1: C2RustUnnamed_0 = 3064;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_1: C2RustUnnamed_0 = 3063;
pub const XML_SCHEMAP_CVC_SIMPLE_TYPE: C2RustUnnamed_0 = 3062;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2: C2RustUnnamed_0 = 3061;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1: C2RustUnnamed_0 = 3060;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_1: C2RustUnnamed_0 = 3059;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_1: C2RustUnnamed_0 = 3058;
pub const XML_SCHEMAP_NO_XSI: C2RustUnnamed_0 = 3057;
pub const XML_SCHEMAP_NO_XMLNS: C2RustUnnamed_0 = 3056;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_4: C2RustUnnamed_0 = 3055;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_2: C2RustUnnamed_0 = 3054;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_1: C2RustUnnamed_0 = 3053;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_2: C2RustUnnamed_0 = 3052;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_1: C2RustUnnamed_0 = 3051;
pub const XML_SCHEMAP_SRC_INCLUDE: C2RustUnnamed_0 = 3050;
pub const XML_SCHEMAP_E_PROPS_CORRECT_6: C2RustUnnamed_0 = 3049;
pub const XML_SCHEMAP_E_PROPS_CORRECT_5: C2RustUnnamed_0 = 3048;
pub const XML_SCHEMAP_E_PROPS_CORRECT_4: C2RustUnnamed_0 = 3047;
pub const XML_SCHEMAP_E_PROPS_CORRECT_3: C2RustUnnamed_0 = 3046;
pub const XML_SCHEMAP_E_PROPS_CORRECT_2: C2RustUnnamed_0 = 3045;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_2: C2RustUnnamed_0 = 3044;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_1: C2RustUnnamed_0 = 3043;
pub const XML_SCHEMAP_P_PROPS_CORRECT_1: C2RustUnnamed_0 = 3042;
pub const XML_SCHEMAP_SRC_ELEMENT_3: C2RustUnnamed_0 = 3041;
pub const XML_SCHEMAP_SRC_ELEMENT_2_2: C2RustUnnamed_0 = 3040;
pub const XML_SCHEMAP_SRC_ELEMENT_2_1: C2RustUnnamed_0 = 3039;
pub const XML_SCHEMAP_SRC_ELEMENT_1: C2RustUnnamed_0 = 3038;
pub const XML_SCHEMAP_S4S_ATTR_INVALID_VALUE: C2RustUnnamed_0 = 3037;
pub const XML_SCHEMAP_S4S_ATTR_MISSING: C2RustUnnamed_0 = 3036;
pub const XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED: C2RustUnnamed_0 = 3035;
pub const XML_SCHEMAP_S4S_ELEM_MISSING: C2RustUnnamed_0 = 3034;
pub const XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED: C2RustUnnamed_0 = 3033;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_2: C2RustUnnamed_0 = 3032;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_1: C2RustUnnamed_0 = 3031;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5: C2RustUnnamed_0 = 3030;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4: C2RustUnnamed_0 = 3029;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3: C2RustUnnamed_0 = 3028;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1: C2RustUnnamed_0 = 3027;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2: C2RustUnnamed_0 = 3026;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2: C2RustUnnamed_0 = 3025;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1: C2RustUnnamed_0 = 3024;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_1: C2RustUnnamed_0 = 3023;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5: C2RustUnnamed_0 = 3022;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4: C2RustUnnamed_0 = 3021;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3: C2RustUnnamed_0 = 3020;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2: C2RustUnnamed_0 = 3019;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1: C2RustUnnamed_0 = 3018;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2: C2RustUnnamed_0 = 3017;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1: C2RustUnnamed_0 = 3016;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_1: C2RustUnnamed_0 = 3015;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2: C2RustUnnamed_0 = 3014;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1: C2RustUnnamed_0 = 3013;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_2: C2RustUnnamed_0 = 3012;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_1: C2RustUnnamed_0 = 3011;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_3: C2RustUnnamed_0 = 3010;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_2: C2RustUnnamed_0 = 3009;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_1: C2RustUnnamed_0 = 3008;
pub const XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES: C2RustUnnamed_0 =
    3007;
pub const XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE: C2RustUnnamed_0 = 3006;
pub const XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE: C2RustUnnamed_0 =
    3005;
pub const XML_SCHEMAP_SRC_RESOLVE: C2RustUnnamed_0 = 3004;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_4: C2RustUnnamed_0 = 3003;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_3: C2RustUnnamed_0 = 3002;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_2: C2RustUnnamed_0 = 3001;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_1: C2RustUnnamed_0 = 3000;
pub const XML_HTTP_UNKNOWN_HOST: C2RustUnnamed_0 = 2022;
pub const XML_HTTP_USE_IP: C2RustUnnamed_0 = 2021;
pub const XML_HTTP_URL_SYNTAX: C2RustUnnamed_0 = 2020;
pub const XML_FTP_URL_SYNTAX: C2RustUnnamed_0 = 2003;
pub const XML_FTP_ACCNT: C2RustUnnamed_0 = 2002;
pub const XML_FTP_EPSV_ANSWER: C2RustUnnamed_0 = 2001;
pub const XML_FTP_PASV_ANSWER: C2RustUnnamed_0 = 2000;
pub const XML_C14N_RELATIVE_NAMESPACE: C2RustUnnamed_0 = 1955;
pub const XML_C14N_UNKNOW_NODE: C2RustUnnamed_0 = 1954;
pub const XML_C14N_INVALID_NODE: C2RustUnnamed_0 = 1953;
pub const XML_C14N_CREATE_STACK: C2RustUnnamed_0 = 1952;
pub const XML_C14N_REQUIRES_UTF8: C2RustUnnamed_0 = 1951;
pub const XML_C14N_CREATE_CTXT: C2RustUnnamed_0 = 1950;
pub const XML_XPTR_EXTRA_OBJECTS: C2RustUnnamed_0 = 1903;
pub const XML_XPTR_EVAL_FAILED: C2RustUnnamed_0 = 1902;
pub const XML_XPTR_CHILDSEQ_START: C2RustUnnamed_0 = 1901;
pub const XML_XPTR_UNKNOWN_SCHEME: C2RustUnnamed_0 = 1900;
pub const XML_SCHEMAV_MISC: C2RustUnnamed_0 = 1879;
pub const XML_SCHEMAV_CVC_WILDCARD: C2RustUnnamed_0 = 1878;
pub const XML_SCHEMAV_CVC_IDC: C2RustUnnamed_0 = 1877;
pub const XML_SCHEMAV_CVC_TYPE_2: C2RustUnnamed_0 = 1876;
pub const XML_SCHEMAV_CVC_TYPE_1: C2RustUnnamed_0 = 1875;
pub const XML_SCHEMAV_CVC_AU: C2RustUnnamed_0 = 1874;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_1: C2RustUnnamed_0 = 1873;
pub const XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING: C2RustUnnamed_0 = 1872;
pub const XML_SCHEMAV_ELEMENT_CONTENT: C2RustUnnamed_0 = 1871;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2: C2RustUnnamed_0 = 1870;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1: C2RustUnnamed_0 = 1869;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_4: C2RustUnnamed_0 = 1868;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2: C2RustUnnamed_0 = 1867;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1: C2RustUnnamed_0 = 1866;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1: C2RustUnnamed_0 = 1865;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_4: C2RustUnnamed_0 = 1864;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_3: C2RustUnnamed_0 = 1863;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_2: C2RustUnnamed_0 = 1862;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_1: C2RustUnnamed_0 = 1861;
pub const XML_SCHEMAV_CVC_ELT_7: C2RustUnnamed_0 = 1860;
pub const XML_SCHEMAV_CVC_ELT_6: C2RustUnnamed_0 = 1859;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_2: C2RustUnnamed_0 = 1858;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_1: C2RustUnnamed_0 = 1857;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_1: C2RustUnnamed_0 = 1856;
pub const XML_SCHEMAV_CVC_ELT_5_2_1: C2RustUnnamed_0 = 1855;
pub const XML_SCHEMAV_CVC_ELT_5_1_2: C2RustUnnamed_0 = 1854;
pub const XML_SCHEMAV_CVC_ELT_5_1_1: C2RustUnnamed_0 = 1853;
pub const XML_SCHEMAV_CVC_ELT_4_3: C2RustUnnamed_0 = 1852;
pub const XML_SCHEMAV_CVC_ELT_4_2: C2RustUnnamed_0 = 1851;
pub const XML_SCHEMAV_CVC_ELT_4_1: C2RustUnnamed_0 = 1850;
pub const XML_SCHEMAV_CVC_ELT_3_2_2: C2RustUnnamed_0 = 1849;
pub const XML_SCHEMAV_CVC_ELT_3_2_1: C2RustUnnamed_0 = 1848;
pub const XML_SCHEMAV_CVC_ELT_3_1: C2RustUnnamed_0 = 1847;
pub const XML_SCHEMAV_CVC_ELT_2: C2RustUnnamed_0 = 1846;
pub const XML_SCHEMAV_CVC_ELT_1: C2RustUnnamed_0 = 1845;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4: C2RustUnnamed_0 = 1844;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3: C2RustUnnamed_0 = 1843;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2: C2RustUnnamed_0 = 1842;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1: C2RustUnnamed_0 = 1841;
pub const XML_SCHEMAV_CVC_ENUMERATION_VALID: C2RustUnnamed_0 = 1840;
pub const XML_SCHEMAV_CVC_PATTERN_VALID: C2RustUnnamed_0 = 1839;
pub const XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID: C2RustUnnamed_0 = 1838;
pub const XML_SCHEMAV_CVC_TOTALDIGITS_VALID: C2RustUnnamed_0 = 1837;
pub const XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID: C2RustUnnamed_0 = 1836;
pub const XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID: C2RustUnnamed_0 = 1835;
pub const XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID: C2RustUnnamed_0 = 1834;
pub const XML_SCHEMAV_CVC_MININCLUSIVE_VALID: C2RustUnnamed_0 = 1833;
pub const XML_SCHEMAV_CVC_MAXLENGTH_VALID: C2RustUnnamed_0 = 1832;
pub const XML_SCHEMAV_CVC_MINLENGTH_VALID: C2RustUnnamed_0 = 1831;
pub const XML_SCHEMAV_CVC_LENGTH_VALID: C2RustUnnamed_0 = 1830;
pub const XML_SCHEMAV_CVC_FACET_VALID: C2RustUnnamed_0 = 1829;
pub const XML_SCHEMAV_CVC_TYPE_3_1_2: C2RustUnnamed_0 = 1828;
pub const XML_SCHEMAV_CVC_TYPE_3_1_1: C2RustUnnamed_0 = 1827;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3: C2RustUnnamed_0 = 1826;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2: C2RustUnnamed_0 = 1825;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1: C2RustUnnamed_0 = 1824;
pub const XML_SCHEMAV_FACET: C2RustUnnamed_0 = 1823;
pub const XML_SCHEMAV_VALUE: C2RustUnnamed_0 = 1822;
pub const XML_SCHEMAV_ATTRINVALID: C2RustUnnamed_0 = 1821;
pub const XML_SCHEMAV_ATTRUNKNOWN: C2RustUnnamed_0 = 1820;
pub const XML_SCHEMAV_NOTSIMPLE: C2RustUnnamed_0 = 1819;
pub const XML_SCHEMAV_INTERNAL: C2RustUnnamed_0 = 1818;
pub const XML_SCHEMAV_CONSTRUCT: C2RustUnnamed_0 = 1817;
pub const XML_SCHEMAV_NOTDETERMINIST: C2RustUnnamed_0 = 1816;
pub const XML_SCHEMAV_INVALIDELEM: C2RustUnnamed_0 = 1815;
pub const XML_SCHEMAV_INVALIDATTR: C2RustUnnamed_0 = 1814;
pub const XML_SCHEMAV_EXTRACONTENT: C2RustUnnamed_0 = 1813;
pub const XML_SCHEMAV_NOTNILLABLE: C2RustUnnamed_0 = 1812;
pub const XML_SCHEMAV_HAVEDEFAULT: C2RustUnnamed_0 = 1811;
pub const XML_SCHEMAV_ELEMCONT: C2RustUnnamed_0 = 1810;
pub const XML_SCHEMAV_NOTEMPTY: C2RustUnnamed_0 = 1809;
pub const XML_SCHEMAV_ISABSTRACT: C2RustUnnamed_0 = 1808;
pub const XML_SCHEMAV_NOROLLBACK: C2RustUnnamed_0 = 1807;
pub const XML_SCHEMAV_NOTYPE: C2RustUnnamed_0 = 1806;
pub const XML_SCHEMAV_WRONGELEM: C2RustUnnamed_0 = 1805;
pub const XML_SCHEMAV_MISSING: C2RustUnnamed_0 = 1804;
pub const XML_SCHEMAV_NOTTOPLEVEL: C2RustUnnamed_0 = 1803;
pub const XML_SCHEMAV_UNDECLAREDELEM: C2RustUnnamed_0 = 1802;
pub const XML_SCHEMAV_NOROOT: C2RustUnnamed_0 = 1801;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_3: C2RustUnnamed_0 = 1800;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3: C2RustUnnamed_0 = 1799;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2: C2RustUnnamed_0 = 1798;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1: C2RustUnnamed_0 = 1797;
pub const XML_SCHEMAP_SRC_IMPORT_3_2: C2RustUnnamed_0 = 1796;
pub const XML_SCHEMAP_SRC_IMPORT_3_1: C2RustUnnamed_0 = 1795;
pub const XML_SCHEMAP_UNION_NOT_EXPRESSIBLE: C2RustUnnamed_0 = 1794;
pub const XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE: C2RustUnnamed_0 = 1793;
pub const XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER: C2RustUnnamed_0 = 1792;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3: C2RustUnnamed_0 = 1791;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2: C2RustUnnamed_0 = 1790;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2: C2RustUnnamed_0 = 1789;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1: C2RustUnnamed_0 = 1788;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1: C2RustUnnamed_0 = 1787;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_5: C2RustUnnamed_0 = 1786;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_4: C2RustUnnamed_0 = 1785;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_3: C2RustUnnamed_0 = 1784;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_2: C2RustUnnamed_0 = 1783;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_1: C2RustUnnamed_0 = 1782;
pub const XML_SCHEMAP_REF_AND_CONTENT: C2RustUnnamed_0 = 1781;
pub const XML_SCHEMAP_INVALID_ATTR_NAME: C2RustUnnamed_0 = 1780;
pub const XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD: C2RustUnnamed_0 = 1779;
pub const XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION: C2RustUnnamed_0 = 1778;
pub const XML_SCHEMAP_INVALID_ATTR_COMBINATION: C2RustUnnamed_0 = 1777;
pub const XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE: C2RustUnnamed_0 = 1776;
pub const XML_SCHEMAP_RECURSIVE: C2RustUnnamed_0 = 1775;
pub const XML_SCHEMAP_INVALID_ATTR_USE: C2RustUnnamed_0 = 1774;
pub const XML_SCHEMAP_UNKNOWN_MEMBER_TYPE: C2RustUnnamed_0 = 1773;
pub const XML_SCHEMAP_NOT_SCHEMA: C2RustUnnamed_0 = 1772;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI: C2RustUnnamed_0 = 1771;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI: C2RustUnnamed_0 = 1770;
pub const XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD: C2RustUnnamed_0 = 1769;
pub const XML_SCHEMAP_DEF_AND_PREFIX: C2RustUnnamed_0 = 1768;
pub const XML_SCHEMAP_UNKNOWN_PREFIX: C2RustUnnamed_0 = 1767;
pub const XML_SCHEMAP_FAILED_PARSE: C2RustUnnamed_0 = 1766;
pub const XML_SCHEMAP_REDEFINED_NOTATION: C2RustUnnamed_0 = 1765;
pub const XML_SCHEMAP_REDEFINED_ATTR: C2RustUnnamed_0 = 1764;
pub const XML_SCHEMAP_REDEFINED_ATTRGROUP: C2RustUnnamed_0 = 1763;
pub const XML_SCHEMAP_REDEFINED_ELEMENT: C2RustUnnamed_0 = 1762;
pub const XML_SCHEMAP_REDEFINED_TYPE: C2RustUnnamed_0 = 1761;
pub const XML_SCHEMAP_REDEFINED_GROUP: C2RustUnnamed_0 = 1760;
pub const XML_SCHEMAP_NOROOT: C2RustUnnamed_0 = 1759;
pub const XML_SCHEMAP_NOTHING_TO_PARSE: C2RustUnnamed_0 = 1758;
pub const XML_SCHEMAP_FAILED_LOAD: C2RustUnnamed_0 = 1757;
pub const XML_SCHEMAP_REGEXP_INVALID: C2RustUnnamed_0 = 1756;
pub const XML_SCHEMAP_ELEM_DEFAULT_FIXED: C2RustUnnamed_0 = 1755;
pub const XML_SCHEMAP_UNKNOWN_UNION_CHILD: C2RustUnnamed_0 = 1754;
pub const XML_SCHEMAP_UNKNOWN_TYPE: C2RustUnnamed_0 = 1753;
pub const XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD: C2RustUnnamed_0 = 1752;
pub const XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD: C2RustUnnamed_0 = 1751;
pub const XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD: C2RustUnnamed_0 = 1750;
pub const XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD: C2RustUnnamed_0 = 1749;
pub const XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD: C2RustUnnamed_0 = 1748;
pub const XML_SCHEMAP_UNKNOWN_REF: C2RustUnnamed_0 = 1747;
pub const XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD: C2RustUnnamed_0 = 1746;
pub const XML_SCHEMAP_UNKNOWN_NOTATION_CHILD: C2RustUnnamed_0 = 1745;
pub const XML_SCHEMAP_UNKNOWN_LIST_CHILD: C2RustUnnamed_0 = 1744;
pub const XML_SCHEMAP_UNKNOWN_IMPORT_CHILD: C2RustUnnamed_0 = 1743;
pub const XML_SCHEMAP_UNKNOWN_GROUP_CHILD: C2RustUnnamed_0 = 1742;
pub const XML_SCHEMAP_UNKNOWN_FACET_TYPE: C2RustUnnamed_0 = 1741;
pub const XML_SCHEMAP_UNKNOWN_FACET_CHILD: C2RustUnnamed_0 = 1740;
pub const XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD: C2RustUnnamed_0 = 1739;
pub const XML_SCHEMAP_UNKNOWN_ELEM_CHILD: C2RustUnnamed_0 = 1738;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD: C2RustUnnamed_0 = 1737;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD: C2RustUnnamed_0 = 1736;
pub const XML_SCHEMAP_UNKNOWN_CHOICE_CHILD: C2RustUnnamed_0 = 1735;
pub const XML_SCHEMAP_UNKNOWN_BASE_TYPE: C2RustUnnamed_0 = 1734;
pub const XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP: C2RustUnnamed_0 = 1733;
pub const XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD: C2RustUnnamed_0 = 1732;
pub const XML_SCHEMAP_UNKNOWN_ATTR_CHILD: C2RustUnnamed_0 = 1731;
pub const XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD: C2RustUnnamed_0 = 1730;
pub const XML_SCHEMAP_UNKNOWN_ALL_CHILD: C2RustUnnamed_0 = 1729;
pub const XML_SCHEMAP_TYPE_AND_SUBTYPE: C2RustUnnamed_0 = 1728;
pub const XML_SCHEMAP_SIMPLETYPE_NONAME: C2RustUnnamed_0 = 1727;
pub const XML_SCHEMAP_RESTRICTION_NONAME_NOREF: C2RustUnnamed_0 = 1726;
pub const XML_SCHEMAP_REF_AND_SUBTYPE: C2RustUnnamed_0 = 1725;
pub const XML_SCHEMAP_NOTYPE_NOREF: C2RustUnnamed_0 = 1724;
pub const XML_SCHEMAP_NOTATION_NO_NAME: C2RustUnnamed_0 = 1723;
pub const XML_SCHEMAP_NOATTR_NOREF: C2RustUnnamed_0 = 1722;
pub const XML_SCHEMAP_INVALID_WHITE_SPACE: C2RustUnnamed_0 = 1721;
pub const XML_SCHEMAP_INVALID_REF_AND_SUBTYPE: C2RustUnnamed_0 = 1720;
pub const XML_SCHEMAP_INVALID_MINOCCURS: C2RustUnnamed_0 = 1719;
pub const XML_SCHEMAP_INVALID_MAXOCCURS: C2RustUnnamed_0 = 1718;
pub const XML_SCHEMAP_INVALID_FACET_VALUE: C2RustUnnamed_0 = 1717;
pub const XML_SCHEMAP_INVALID_FACET: C2RustUnnamed_0 = 1716;
pub const XML_SCHEMAP_INVALID_ENUM: C2RustUnnamed_0 = 1715;
pub const XML_SCHEMAP_INVALID_BOOLEAN: C2RustUnnamed_0 = 1714;
pub const XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI: C2RustUnnamed_0 = 1713;
pub const XML_SCHEMAP_IMPORT_REDEFINE_NSNAME: C2RustUnnamed_0 = 1712;
pub const XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI: C2RustUnnamed_0 = 1711;
pub const XML_SCHEMAP_GROUP_NONAME_NOREF: C2RustUnnamed_0 = 1710;
pub const XML_SCHEMAP_FAILED_BUILD_IMPORT: C2RustUnnamed_0 = 1709;
pub const XML_SCHEMAP_FACET_NO_VALUE: C2RustUnnamed_0 = 1708;
pub const XML_SCHEMAP_EXTENSION_NO_BASE: C2RustUnnamed_0 = 1707;
pub const XML_SCHEMAP_ELEM_NONAME_NOREF: C2RustUnnamed_0 = 1706;
pub const XML_SCHEMAP_ELEMFORMDEFAULT_VALUE: C2RustUnnamed_0 = 1705;
pub const XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF: C2RustUnnamed_0 = 1704;
pub const XML_SCHEMAP_ATTR_NONAME_NOREF: C2RustUnnamed_0 = 1703;
pub const XML_SCHEMAP_ATTRGRP_NONAME_NOREF: C2RustUnnamed_0 = 1702;
pub const XML_SCHEMAP_ATTRFORMDEFAULT_VALUE: C2RustUnnamed_0 = 1701;
pub const XML_SCHEMAP_PREFIX_UNDEFINED: C2RustUnnamed_0 = 1700;
pub const XML_CATALOG_RECURSION: C2RustUnnamed_0 = 1654;
pub const XML_CATALOG_NOT_CATALOG: C2RustUnnamed_0 = 1653;
pub const XML_CATALOG_PREFER_VALUE: C2RustUnnamed_0 = 1652;
pub const XML_CATALOG_ENTRY_BROKEN: C2RustUnnamed_0 = 1651;
pub const XML_CATALOG_MISSING_ATTR: C2RustUnnamed_0 = 1650;
pub const XML_XINCLUDE_FRAGMENT_ID: C2RustUnnamed_0 = 1618;
pub const XML_XINCLUDE_DEPRECATED_NS: C2RustUnnamed_0 = 1617;
pub const XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE: C2RustUnnamed_0 = 1616;
pub const XML_XINCLUDE_FALLBACKS_IN_INCLUDE: C2RustUnnamed_0 = 1615;
pub const XML_XINCLUDE_INCLUDE_IN_INCLUDE: C2RustUnnamed_0 = 1614;
pub const XML_XINCLUDE_XPTR_RESULT: C2RustUnnamed_0 = 1613;
pub const XML_XINCLUDE_XPTR_FAILED: C2RustUnnamed_0 = 1612;
pub const XML_XINCLUDE_MULTIPLE_ROOT: C2RustUnnamed_0 = 1611;
pub const XML_XINCLUDE_UNKNOWN_ENCODING: C2RustUnnamed_0 = 1610;
pub const XML_XINCLUDE_BUILD_FAILED: C2RustUnnamed_0 = 1609;
pub const XML_XINCLUDE_INVALID_CHAR: C2RustUnnamed_0 = 1608;
pub const XML_XINCLUDE_TEXT_DOCUMENT: C2RustUnnamed_0 = 1607;
pub const XML_XINCLUDE_TEXT_FRAGMENT: C2RustUnnamed_0 = 1606;
pub const XML_XINCLUDE_HREF_URI: C2RustUnnamed_0 = 1605;
pub const XML_XINCLUDE_NO_FALLBACK: C2RustUnnamed_0 = 1604;
pub const XML_XINCLUDE_NO_HREF: C2RustUnnamed_0 = 1603;
pub const XML_XINCLUDE_ENTITY_DEF_MISMATCH: C2RustUnnamed_0 = 1602;
pub const XML_XINCLUDE_PARSE_VALUE: C2RustUnnamed_0 = 1601;
pub const XML_XINCLUDE_RECURSION: C2RustUnnamed_0 = 1600;
pub const XML_IO_EAFNOSUPPORT: C2RustUnnamed_0 = 1556;
pub const XML_IO_EALREADY: C2RustUnnamed_0 = 1555;
pub const XML_IO_EADDRINUSE: C2RustUnnamed_0 = 1554;
pub const XML_IO_ENETUNREACH: C2RustUnnamed_0 = 1553;
pub const XML_IO_ECONNREFUSED: C2RustUnnamed_0 = 1552;
pub const XML_IO_EISCONN: C2RustUnnamed_0 = 1551;
pub const XML_IO_ENOTSOCK: C2RustUnnamed_0 = 1550;
pub const XML_IO_LOAD_ERROR: C2RustUnnamed_0 = 1549;
pub const XML_IO_BUFFER_FULL: C2RustUnnamed_0 = 1548;
pub const XML_IO_NO_INPUT: C2RustUnnamed_0 = 1547;
pub const XML_IO_WRITE: C2RustUnnamed_0 = 1546;
pub const XML_IO_FLUSH: C2RustUnnamed_0 = 1545;
pub const XML_IO_ENCODER: C2RustUnnamed_0 = 1544;
pub const XML_IO_NETWORK_ATTEMPT: C2RustUnnamed_0 = 1543;
pub const XML_IO_EXDEV: C2RustUnnamed_0 = 1542;
pub const XML_IO_ETIMEDOUT: C2RustUnnamed_0 = 1541;
pub const XML_IO_ESRCH: C2RustUnnamed_0 = 1540;
pub const XML_IO_ESPIPE: C2RustUnnamed_0 = 1539;
pub const XML_IO_EROFS: C2RustUnnamed_0 = 1538;
pub const XML_IO_ERANGE: C2RustUnnamed_0 = 1537;
pub const XML_IO_EPIPE: C2RustUnnamed_0 = 1536;
pub const XML_IO_EPERM: C2RustUnnamed_0 = 1535;
pub const XML_IO_ENXIO: C2RustUnnamed_0 = 1534;
pub const XML_IO_ENOTTY: C2RustUnnamed_0 = 1533;
pub const XML_IO_ENOTSUP: C2RustUnnamed_0 = 1532;
pub const XML_IO_ENOTEMPTY: C2RustUnnamed_0 = 1531;
pub const XML_IO_ENOTDIR: C2RustUnnamed_0 = 1530;
pub const XML_IO_ENOSYS: C2RustUnnamed_0 = 1529;
pub const XML_IO_ENOSPC: C2RustUnnamed_0 = 1528;
pub const XML_IO_ENOMEM: C2RustUnnamed_0 = 1527;
pub const XML_IO_ENOLCK: C2RustUnnamed_0 = 1526;
pub const XML_IO_ENOEXEC: C2RustUnnamed_0 = 1525;
pub const XML_IO_ENOENT: C2RustUnnamed_0 = 1524;
pub const XML_IO_ENODEV: C2RustUnnamed_0 = 1523;
pub const XML_IO_ENFILE: C2RustUnnamed_0 = 1522;
pub const XML_IO_ENAMETOOLONG: C2RustUnnamed_0 = 1521;
pub const XML_IO_EMSGSIZE: C2RustUnnamed_0 = 1520;
pub const XML_IO_EMLINK: C2RustUnnamed_0 = 1519;
pub const XML_IO_EMFILE: C2RustUnnamed_0 = 1518;
pub const XML_IO_EISDIR: C2RustUnnamed_0 = 1517;
pub const XML_IO_EIO: C2RustUnnamed_0 = 1516;
pub const XML_IO_EINVAL: C2RustUnnamed_0 = 1515;
pub const XML_IO_EINTR: C2RustUnnamed_0 = 1514;
pub const XML_IO_EINPROGRESS: C2RustUnnamed_0 = 1513;
pub const XML_IO_EFBIG: C2RustUnnamed_0 = 1512;
pub const XML_IO_EFAULT: C2RustUnnamed_0 = 1511;
pub const XML_IO_EEXIST: C2RustUnnamed_0 = 1510;
pub const XML_IO_EDOM: C2RustUnnamed_0 = 1509;
pub const XML_IO_EDEADLK: C2RustUnnamed_0 = 1508;
pub const XML_IO_ECHILD: C2RustUnnamed_0 = 1507;
pub const XML_IO_ECANCELED: C2RustUnnamed_0 = 1506;
pub const XML_IO_EBUSY: C2RustUnnamed_0 = 1505;
pub const XML_IO_EBADMSG: C2RustUnnamed_0 = 1504;
pub const XML_IO_EBADF: C2RustUnnamed_0 = 1503;
pub const XML_IO_EAGAIN: C2RustUnnamed_0 = 1502;
pub const XML_IO_EACCES: C2RustUnnamed_0 = 1501;
pub const XML_IO_UNKNOWN: C2RustUnnamed_0 = 1500;
pub const XML_REGEXP_COMPILE_ERROR: C2RustUnnamed_0 = 1450;
pub const XML_TREE_NOT_UTF8: C2RustUnnamed_0 = 1303;
pub const XML_TREE_UNTERMINATED_ENTITY: C2RustUnnamed_0 = 1302;
pub const XML_TREE_INVALID_DEC: C2RustUnnamed_0 = 1301;
pub const XML_TREE_INVALID_HEX: C2RustUnnamed_0 = 1300;
pub const XML_XPATH_INVALID_CHAR_ERROR: C2RustUnnamed_0 = 1221;
pub const XML_XPATH_ENCODING_ERROR: C2RustUnnamed_0 = 1220;
pub const XML_XPATH_UNDEF_PREFIX_ERROR: C2RustUnnamed_0 = 1219;
pub const XML_XPTR_SUB_RESOURCE_ERROR: C2RustUnnamed_0 = 1218;
pub const XML_XPTR_RESOURCE_ERROR: C2RustUnnamed_0 = 1217;
pub const XML_XPTR_SYNTAX_ERROR: C2RustUnnamed_0 = 1216;
pub const XML_XPATH_MEMORY_ERROR: C2RustUnnamed_0 = 1215;
pub const XML_XPATH_INVALID_CTXT_POSITION: C2RustUnnamed_0 = 1214;
pub const XML_XPATH_INVALID_CTXT_SIZE: C2RustUnnamed_0 = 1213;
pub const XML_XPATH_INVALID_ARITY: C2RustUnnamed_0 = 1212;
pub const XML_XPATH_INVALID_TYPE: C2RustUnnamed_0 = 1211;
pub const XML_XPATH_INVALID_OPERAND: C2RustUnnamed_0 = 1210;
pub const XML_XPATH_UNKNOWN_FUNC_ERROR: C2RustUnnamed_0 = 1209;
pub const XML_XPATH_UNCLOSED_ERROR: C2RustUnnamed_0 = 1208;
pub const XML_XPATH_EXPR_ERROR: C2RustUnnamed_0 = 1207;
pub const XML_XPATH_INVALID_PREDICATE_ERROR: C2RustUnnamed_0 = 1206;
pub const XML_XPATH_UNDEF_VARIABLE_ERROR: C2RustUnnamed_0 = 1205;
pub const XML_XPATH_VARIABLE_REF_ERROR: C2RustUnnamed_0 = 1204;
pub const XML_XPATH_START_LITERAL_ERROR: C2RustUnnamed_0 = 1203;
pub const XML_XPATH_UNFINISHED_LITERAL_ERROR: C2RustUnnamed_0 = 1202;
pub const XML_XPATH_NUMBER_ERROR: C2RustUnnamed_0 = 1201;
pub const XML_XPATH_EXPRESSION_OK: C2RustUnnamed_0 = 1200;
pub const XML_RNGP_XML_NS: C2RustUnnamed_0 = 1122;
pub const XML_RNGP_XMLNS_NAME: C2RustUnnamed_0 = 1121;
pub const XML_RNGP_VALUE_NO_CONTENT: C2RustUnnamed_0 = 1120;
pub const XML_RNGP_VALUE_EMPTY: C2RustUnnamed_0 = 1119;
pub const XML_RNGP_URI_NOT_ABSOLUTE: C2RustUnnamed_0 = 1118;
pub const XML_RNGP_URI_FRAGMENT: C2RustUnnamed_0 = 1117;
pub const XML_RNGP_UNKNOWN_TYPE_LIB: C2RustUnnamed_0 = 1116;
pub const XML_RNGP_UNKNOWN_CONSTRUCT: C2RustUnnamed_0 = 1115;
pub const XML_RNGP_UNKNOWN_COMBINE: C2RustUnnamed_0 = 1114;
pub const XML_RNGP_UNKNOWN_ATTRIBUTE: C2RustUnnamed_0 = 1113;
pub const XML_RNGP_TYPE_VALUE: C2RustUnnamed_0 = 1112;
pub const XML_RNGP_TYPE_NOT_FOUND: C2RustUnnamed_0 = 1111;
pub const XML_RNGP_TYPE_MISSING: C2RustUnnamed_0 = 1110;
pub const XML_RNGP_TEXT_HAS_CHILD: C2RustUnnamed_0 = 1109;
pub const XML_RNGP_TEXT_EXPECTED: C2RustUnnamed_0 = 1108;
pub const XML_RNGP_START_MISSING: C2RustUnnamed_0 = 1107;
pub const XML_RNGP_START_EMPTY: C2RustUnnamed_0 = 1106;
pub const XML_RNGP_START_CONTENT: C2RustUnnamed_0 = 1105;
pub const XML_RNGP_START_CHOICE_AND_INTERLEAVE: C2RustUnnamed_0 = 1104;
pub const XML_RNGP_REF_NOT_EMPTY: C2RustUnnamed_0 = 1103;
pub const XML_RNGP_REF_NO_NAME: C2RustUnnamed_0 = 1102;
pub const XML_RNGP_REF_NO_DEF: C2RustUnnamed_0 = 1101;
pub const XML_RNGP_REF_NAME_INVALID: C2RustUnnamed_0 = 1100;
pub const XML_RNGP_REF_CYCLE: C2RustUnnamed_0 = 1099;
pub const XML_RNGP_REF_CREATE_FAILED: C2RustUnnamed_0 = 1098;
pub const XML_RNGP_PREFIX_UNDEFINED: C2RustUnnamed_0 = 1097;
pub const XML_RNGP_PAT_START_VALUE: C2RustUnnamed_0 = 1096;
pub const XML_RNGP_PAT_START_TEXT: C2RustUnnamed_0 = 1095;
pub const XML_RNGP_PAT_START_ONEMORE: C2RustUnnamed_0 = 1094;
pub const XML_RNGP_PAT_START_LIST: C2RustUnnamed_0 = 1093;
pub const XML_RNGP_PAT_START_INTERLEAVE: C2RustUnnamed_0 = 1092;
pub const XML_RNGP_PAT_START_GROUP: C2RustUnnamed_0 = 1091;
pub const XML_RNGP_PAT_START_EMPTY: C2RustUnnamed_0 = 1090;
pub const XML_RNGP_PAT_START_DATA: C2RustUnnamed_0 = 1089;
pub const XML_RNGP_PAT_START_ATTR: C2RustUnnamed_0 = 1088;
pub const XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR: C2RustUnnamed_0 = 1087;
pub const XML_RNGP_PAT_ONEMORE_GROUP_ATTR: C2RustUnnamed_0 = 1086;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME: C2RustUnnamed_0 = 1085;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME: C2RustUnnamed_0 = 1084;
pub const XML_RNGP_PAT_LIST_TEXT: C2RustUnnamed_0 = 1083;
pub const XML_RNGP_PAT_LIST_REF: C2RustUnnamed_0 = 1082;
pub const XML_RNGP_PAT_LIST_LIST: C2RustUnnamed_0 = 1081;
pub const XML_RNGP_PAT_LIST_INTERLEAVE: C2RustUnnamed_0 = 1080;
pub const XML_RNGP_PAT_LIST_ELEM: C2RustUnnamed_0 = 1079;
pub const XML_RNGP_PAT_LIST_ATTR: C2RustUnnamed_0 = 1078;
pub const XML_RNGP_PAT_DATA_EXCEPT_TEXT: C2RustUnnamed_0 = 1077;
pub const XML_RNGP_PAT_DATA_EXCEPT_REF: C2RustUnnamed_0 = 1076;
pub const XML_RNGP_PAT_DATA_EXCEPT_ONEMORE: C2RustUnnamed_0 = 1075;
pub const XML_RNGP_PAT_DATA_EXCEPT_LIST: C2RustUnnamed_0 = 1074;
pub const XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE: C2RustUnnamed_0 = 1073;
pub const XML_RNGP_PAT_DATA_EXCEPT_GROUP: C2RustUnnamed_0 = 1072;
pub const XML_RNGP_PAT_DATA_EXCEPT_EMPTY: C2RustUnnamed_0 = 1071;
pub const XML_RNGP_PAT_DATA_EXCEPT_ELEM: C2RustUnnamed_0 = 1070;
pub const XML_RNGP_PAT_DATA_EXCEPT_ATTR: C2RustUnnamed_0 = 1069;
pub const XML_RNGP_PAT_ATTR_ELEM: C2RustUnnamed_0 = 1068;
pub const XML_RNGP_PAT_ATTR_ATTR: C2RustUnnamed_0 = 1067;
pub const XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME: C2RustUnnamed_0 = 1066;
pub const XML_RNGP_PARSE_ERROR: C2RustUnnamed_0 = 1065;
pub const XML_RNGP_PARENTREF_NOT_EMPTY: C2RustUnnamed_0 = 1064;
pub const XML_RNGP_PARENTREF_NO_PARENT: C2RustUnnamed_0 = 1063;
pub const XML_RNGP_PARENTREF_NO_NAME: C2RustUnnamed_0 = 1062;
pub const XML_RNGP_PARENTREF_NAME_INVALID: C2RustUnnamed_0 = 1061;
pub const XML_RNGP_PARENTREF_CREATE_FAILED: C2RustUnnamed_0 = 1060;
pub const XML_RNGP_PARAM_NAME_MISSING: C2RustUnnamed_0 = 1059;
pub const XML_RNGP_PARAM_FORBIDDEN: C2RustUnnamed_0 = 1058;
pub const XML_RNGP_NSNAME_NO_NS: C2RustUnnamed_0 = 1057;
pub const XML_RNGP_NSNAME_ATTR_ANCESTOR: C2RustUnnamed_0 = 1056;
pub const XML_RNGP_NOTALLOWED_NOT_EMPTY: C2RustUnnamed_0 = 1055;
pub const XML_RNGP_NEED_COMBINE: C2RustUnnamed_0 = 1054;
pub const XML_RNGP_NAME_MISSING: C2RustUnnamed_0 = 1053;
pub const XML_RNGP_MISSING_HREF: C2RustUnnamed_0 = 1052;
pub const XML_RNGP_INVALID_VALUE: C2RustUnnamed_0 = 1051;
pub const XML_RNGP_INVALID_URI: C2RustUnnamed_0 = 1050;
pub const XML_RNGP_INVALID_DEFINE_NAME: C2RustUnnamed_0 = 1049;
pub const XML_RNGP_INTERLEAVE_NO_CONTENT: C2RustUnnamed_0 = 1048;
pub const XML_RNGP_INTERLEAVE_EMPTY: C2RustUnnamed_0 = 1047;
pub const XML_RNGP_INTERLEAVE_CREATE_FAILED: C2RustUnnamed_0 = 1046;
pub const XML_RNGP_INTERLEAVE_ADD: C2RustUnnamed_0 = 1045;
pub const XML_RNGP_INCLUDE_RECURSE: C2RustUnnamed_0 = 1044;
pub const XML_RNGP_INCLUDE_FAILURE: C2RustUnnamed_0 = 1043;
pub const XML_RNGP_INCLUDE_EMPTY: C2RustUnnamed_0 = 1042;
pub const XML_RNGP_HREF_ERROR: C2RustUnnamed_0 = 1041;
pub const XML_RNGP_GROUP_ATTR_CONFLICT: C2RustUnnamed_0 = 1040;
pub const XML_RNGP_GRAMMAR_NO_START: C2RustUnnamed_0 = 1039;
pub const XML_RNGP_GRAMMAR_MISSING: C2RustUnnamed_0 = 1038;
pub const XML_RNGP_GRAMMAR_EMPTY: C2RustUnnamed_0 = 1037;
pub const XML_RNGP_GRAMMAR_CONTENT: C2RustUnnamed_0 = 1036;
pub const XML_RNGP_FOREIGN_ELEMENT: C2RustUnnamed_0 = 1035;
pub const XML_RNGP_FORBIDDEN_ATTRIBUTE: C2RustUnnamed_0 = 1034;
pub const XML_RNGP_EXTERNALREF_RECURSE: C2RustUnnamed_0 = 1033;
pub const XML_RNGP_EXTERNAL_REF_FAILURE: C2RustUnnamed_0 = 1032;
pub const XML_RNGP_EXTERNALREF_EMTPY: C2RustUnnamed_0 = 1031;
pub const XML_RNGP_EXCEPT_NO_CONTENT: C2RustUnnamed_0 = 1030;
pub const XML_RNGP_EXCEPT_MULTIPLE: C2RustUnnamed_0 = 1029;
pub const XML_RNGP_EXCEPT_MISSING: C2RustUnnamed_0 = 1028;
pub const XML_RNGP_EXCEPT_EMPTY: C2RustUnnamed_0 = 1027;
pub const XML_RNGP_ERROR_TYPE_LIB: C2RustUnnamed_0 = 1026;
pub const XML_RNGP_EMPTY_NOT_EMPTY: C2RustUnnamed_0 = 1025;
pub const XML_RNGP_EMPTY_CONTENT: C2RustUnnamed_0 = 1024;
pub const XML_RNGP_EMPTY_CONSTRUCT: C2RustUnnamed_0 = 1023;
pub const XML_RNGP_EMPTY: C2RustUnnamed_0 = 1022;
pub const XML_RNGP_ELEM_TEXT_CONFLICT: C2RustUnnamed_0 = 1021;
pub const XML_RNGP_ELEMENT_NO_CONTENT: C2RustUnnamed_0 = 1020;
pub const XML_RNGP_ELEMENT_NAME: C2RustUnnamed_0 = 1019;
pub const XML_RNGP_ELEMENT_CONTENT: C2RustUnnamed_0 = 1018;
pub const XML_RNGP_ELEMENT_EMPTY: C2RustUnnamed_0 = 1017;
pub const XML_RNGP_ELEM_CONTENT_ERROR: C2RustUnnamed_0 = 1016;
pub const XML_RNGP_ELEM_CONTENT_EMPTY: C2RustUnnamed_0 = 1015;
pub const XML_RNGP_DEFINE_NAME_MISSING: C2RustUnnamed_0 = 1014;
pub const XML_RNGP_DEFINE_MISSING: C2RustUnnamed_0 = 1013;
pub const XML_RNGP_DEFINE_EMPTY: C2RustUnnamed_0 = 1012;
pub const XML_RNGP_DEFINE_CREATE_FAILED: C2RustUnnamed_0 = 1011;
pub const XML_RNGP_DEF_CHOICE_AND_INTERLEAVE: C2RustUnnamed_0 = 1010;
pub const XML_RNGP_DATA_CONTENT: C2RustUnnamed_0 = 1009;
pub const XML_RNGP_CREATE_FAILURE: C2RustUnnamed_0 = 1008;
pub const XML_RNGP_CHOICE_EMPTY: C2RustUnnamed_0 = 1007;
pub const XML_RNGP_CHOICE_CONTENT: C2RustUnnamed_0 = 1006;
pub const XML_RNGP_ATTRIBUTE_NOOP: C2RustUnnamed_0 = 1005;
pub const XML_RNGP_ATTRIBUTE_EMPTY: C2RustUnnamed_0 = 1004;
pub const XML_RNGP_ATTRIBUTE_CONTENT: C2RustUnnamed_0 = 1003;
pub const XML_RNGP_ATTRIBUTE_CHILDREN: C2RustUnnamed_0 = 1002;
pub const XML_RNGP_ATTR_CONFLICT: C2RustUnnamed_0 = 1001;
pub const XML_RNGP_ANYNAME_ATTR_ANCESTOR: C2RustUnnamed_0 = 1000;
pub const XML_HTML_UNKNOWN_TAG: C2RustUnnamed_0 = 801;
pub const XML_HTML_STRUCURE_ERROR: C2RustUnnamed_0 = 800;
pub const XML_DTD_DUP_TOKEN: C2RustUnnamed_0 = 541;
pub const XML_DTD_XMLID_TYPE: C2RustUnnamed_0 = 540;
pub const XML_DTD_XMLID_VALUE: C2RustUnnamed_0 = 539;
pub const XML_DTD_STANDALONE_DEFAULTED: C2RustUnnamed_0 = 538;
pub const XML_DTD_UNKNOWN_NOTATION: C2RustUnnamed_0 = 537;
pub const XML_DTD_UNKNOWN_ID: C2RustUnnamed_0 = 536;
pub const XML_DTD_UNKNOWN_ENTITY: C2RustUnnamed_0 = 535;
pub const XML_DTD_UNKNOWN_ELEM: C2RustUnnamed_0 = 534;
pub const XML_DTD_UNKNOWN_ATTRIBUTE: C2RustUnnamed_0 = 533;
pub const XML_DTD_STANDALONE_WHITE_SPACE: C2RustUnnamed_0 = 532;
pub const XML_DTD_ROOT_NAME: C2RustUnnamed_0 = 531;
pub const XML_DTD_NOT_STANDALONE: C2RustUnnamed_0 = 530;
pub const XML_DTD_NOT_PCDATA: C2RustUnnamed_0 = 529;
pub const XML_DTD_NOT_EMPTY: C2RustUnnamed_0 = 528;
pub const XML_DTD_NOTATION_VALUE: C2RustUnnamed_0 = 527;
pub const XML_DTD_NOTATION_REDEFINED: C2RustUnnamed_0 = 526;
pub const XML_DTD_NO_ROOT: C2RustUnnamed_0 = 525;
pub const XML_DTD_NO_PREFIX: C2RustUnnamed_0 = 524;
pub const XML_DTD_NO_ELEM_NAME: C2RustUnnamed_0 = 523;
pub const XML_DTD_NO_DTD: C2RustUnnamed_0 = 522;
pub const XML_DTD_NO_DOC: C2RustUnnamed_0 = 521;
pub const XML_DTD_MULTIPLE_ID: C2RustUnnamed_0 = 520;
pub const XML_DTD_MIXED_CORRUPT: C2RustUnnamed_0 = 519;
pub const XML_DTD_MISSING_ATTRIBUTE: C2RustUnnamed_0 = 518;
pub const XML_DTD_LOAD_ERROR: C2RustUnnamed_0 = 517;
pub const XML_DTD_INVALID_DEFAULT: C2RustUnnamed_0 = 516;
pub const XML_DTD_INVALID_CHILD: C2RustUnnamed_0 = 515;
pub const XML_DTD_ID_SUBSET: C2RustUnnamed_0 = 514;
pub const XML_DTD_ID_REDEFINED: C2RustUnnamed_0 = 513;
pub const XML_DTD_ID_FIXED: C2RustUnnamed_0 = 512;
pub const XML_DTD_ENTITY_TYPE: C2RustUnnamed_0 = 511;
pub const XML_DTD_EMPTY_NOTATION: C2RustUnnamed_0 = 510;
pub const XML_DTD_ELEM_REDEFINED: C2RustUnnamed_0 = 509;
pub const XML_DTD_ELEM_NAMESPACE: C2RustUnnamed_0 = 508;
pub const XML_DTD_ELEM_DEFAULT_NAMESPACE: C2RustUnnamed_0 = 507;
pub const XML_DTD_DIFFERENT_PREFIX: C2RustUnnamed_0 = 506;
pub const XML_DTD_CONTENT_NOT_DETERMINIST: C2RustUnnamed_0 = 505;
pub const XML_DTD_CONTENT_MODEL: C2RustUnnamed_0 = 504;
pub const XML_DTD_CONTENT_ERROR: C2RustUnnamed_0 = 503;
pub const XML_DTD_ATTRIBUTE_VALUE: C2RustUnnamed_0 = 502;
pub const XML_DTD_ATTRIBUTE_REDEFINED: C2RustUnnamed_0 = 501;
pub const XML_DTD_ATTRIBUTE_DEFAULT: C2RustUnnamed_0 = 500;
pub const XML_NS_ERR_COLON: C2RustUnnamed_0 = 205;
pub const XML_NS_ERR_EMPTY: C2RustUnnamed_0 = 204;
pub const XML_NS_ERR_ATTRIBUTE_REDEFINED: C2RustUnnamed_0 = 203;
pub const XML_NS_ERR_QNAME: C2RustUnnamed_0 = 202;
pub const XML_NS_ERR_UNDEFINED_NAMESPACE: C2RustUnnamed_0 = 201;
pub const XML_NS_ERR_XML_NAMESPACE: C2RustUnnamed_0 = 200;
pub const XML_ERR_USER_STOP: C2RustUnnamed_0 = 111;
pub const XML_ERR_NAME_TOO_LONG: C2RustUnnamed_0 = 110;
pub const XML_ERR_VERSION_MISMATCH: C2RustUnnamed_0 = 109;
pub const XML_ERR_UNKNOWN_VERSION: C2RustUnnamed_0 = 108;
pub const XML_WAR_ENTITY_REDEFINED: C2RustUnnamed_0 = 107;
pub const XML_WAR_NS_COLUMN: C2RustUnnamed_0 = 106;
pub const XML_ERR_NOTATION_PROCESSING: C2RustUnnamed_0 = 105;
pub const XML_ERR_ENTITY_PROCESSING: C2RustUnnamed_0 = 104;
pub const XML_ERR_NOT_STANDALONE: C2RustUnnamed_0 = 103;
pub const XML_WAR_SPACE_VALUE: C2RustUnnamed_0 = 102;
pub const XML_ERR_MISSING_ENCODING: C2RustUnnamed_0 = 101;
pub const XML_WAR_NS_URI_RELATIVE: C2RustUnnamed_0 = 100;
pub const XML_WAR_NS_URI: C2RustUnnamed_0 = 99;
pub const XML_WAR_LANG_VALUE: C2RustUnnamed_0 = 98;
pub const XML_WAR_UNKNOWN_VERSION: C2RustUnnamed_0 = 97;
pub const XML_ERR_VERSION_MISSING: C2RustUnnamed_0 = 96;
pub const XML_ERR_CONDSEC_INVALID_KEYWORD: C2RustUnnamed_0 = 95;
pub const XML_ERR_NO_DTD: C2RustUnnamed_0 = 94;
pub const XML_WAR_CATALOG_PI: C2RustUnnamed_0 = 93;
pub const XML_ERR_URI_FRAGMENT: C2RustUnnamed_0 = 92;
pub const XML_ERR_INVALID_URI: C2RustUnnamed_0 = 91;
pub const XML_ERR_ENTITY_BOUNDARY: C2RustUnnamed_0 = 90;
pub const XML_ERR_ENTITY_LOOP: C2RustUnnamed_0 = 89;
pub const XML_ERR_ENTITY_PE_INTERNAL: C2RustUnnamed_0 = 88;
pub const XML_ERR_ENTITY_CHAR_ERROR: C2RustUnnamed_0 = 87;
pub const XML_ERR_EXTRA_CONTENT: C2RustUnnamed_0 = 86;
pub const XML_ERR_NOT_WELL_BALANCED: C2RustUnnamed_0 = 85;
pub const XML_ERR_VALUE_REQUIRED: C2RustUnnamed_0 = 84;
pub const XML_ERR_CONDSEC_INVALID: C2RustUnnamed_0 = 83;
pub const XML_ERR_EXT_ENTITY_STANDALONE: C2RustUnnamed_0 = 82;
pub const XML_ERR_INVALID_ENCODING: C2RustUnnamed_0 = 81;
pub const XML_ERR_HYPHEN_IN_COMMENT: C2RustUnnamed_0 = 80;
pub const XML_ERR_ENCODING_NAME: C2RustUnnamed_0 = 79;
pub const XML_ERR_STANDALONE_VALUE: C2RustUnnamed_0 = 78;
pub const XML_ERR_TAG_NOT_FINISHED: C2RustUnnamed_0 = 77;
pub const XML_ERR_TAG_NAME_MISMATCH: C2RustUnnamed_0 = 76;
pub const XML_ERR_EQUAL_REQUIRED: C2RustUnnamed_0 = 75;
pub const XML_ERR_LTSLASH_REQUIRED: C2RustUnnamed_0 = 74;
pub const XML_ERR_GT_REQUIRED: C2RustUnnamed_0 = 73;
pub const XML_ERR_LT_REQUIRED: C2RustUnnamed_0 = 72;
pub const XML_ERR_PUBID_REQUIRED: C2RustUnnamed_0 = 71;
pub const XML_ERR_URI_REQUIRED: C2RustUnnamed_0 = 70;
pub const XML_ERR_PCDATA_REQUIRED: C2RustUnnamed_0 = 69;
pub const XML_ERR_NAME_REQUIRED: C2RustUnnamed_0 = 68;
pub const XML_ERR_NMTOKEN_REQUIRED: C2RustUnnamed_0 = 67;
pub const XML_ERR_SEPARATOR_REQUIRED: C2RustUnnamed_0 = 66;
pub const XML_ERR_SPACE_REQUIRED: C2RustUnnamed_0 = 65;
pub const XML_ERR_RESERVED_XML_NAME: C2RustUnnamed_0 = 64;
pub const XML_ERR_CDATA_NOT_FINISHED: C2RustUnnamed_0 = 63;
pub const XML_ERR_MISPLACED_CDATA_END: C2RustUnnamed_0 = 62;
pub const XML_ERR_DOCTYPE_NOT_FINISHED: C2RustUnnamed_0 = 61;
pub const XML_ERR_EXT_SUBSET_NOT_FINISHED: C2RustUnnamed_0 = 60;
pub const XML_ERR_CONDSEC_NOT_FINISHED: C2RustUnnamed_0 = 59;
pub const XML_ERR_CONDSEC_NOT_STARTED: C2RustUnnamed_0 = 58;
pub const XML_ERR_XMLDECL_NOT_FINISHED: C2RustUnnamed_0 = 57;
pub const XML_ERR_XMLDECL_NOT_STARTED: C2RustUnnamed_0 = 56;
pub const XML_ERR_ELEMCONTENT_NOT_FINISHED: C2RustUnnamed_0 = 55;
pub const XML_ERR_ELEMCONTENT_NOT_STARTED: C2RustUnnamed_0 = 54;
pub const XML_ERR_MIXED_NOT_FINISHED: C2RustUnnamed_0 = 53;
pub const XML_ERR_MIXED_NOT_STARTED: C2RustUnnamed_0 = 52;
pub const XML_ERR_ATTLIST_NOT_FINISHED: C2RustUnnamed_0 = 51;
pub const XML_ERR_ATTLIST_NOT_STARTED: C2RustUnnamed_0 = 50;
pub const XML_ERR_NOTATION_NOT_FINISHED: C2RustUnnamed_0 = 49;
pub const XML_ERR_NOTATION_NOT_STARTED: C2RustUnnamed_0 = 48;
pub const XML_ERR_PI_NOT_FINISHED: C2RustUnnamed_0 = 47;
pub const XML_ERR_PI_NOT_STARTED: C2RustUnnamed_0 = 46;
pub const XML_ERR_COMMENT_NOT_FINISHED: C2RustUnnamed_0 = 45;
pub const XML_ERR_LITERAL_NOT_FINISHED: C2RustUnnamed_0 = 44;
pub const XML_ERR_LITERAL_NOT_STARTED: C2RustUnnamed_0 = 43;
pub const XML_ERR_ATTRIBUTE_REDEFINED: C2RustUnnamed_0 = 42;
pub const XML_ERR_ATTRIBUTE_WITHOUT_VALUE: C2RustUnnamed_0 = 41;
pub const XML_ERR_ATTRIBUTE_NOT_FINISHED: C2RustUnnamed_0 = 40;
pub const XML_ERR_ATTRIBUTE_NOT_STARTED: C2RustUnnamed_0 = 39;
pub const XML_ERR_LT_IN_ATTRIBUTE: C2RustUnnamed_0 = 38;
pub const XML_ERR_ENTITY_NOT_FINISHED: C2RustUnnamed_0 = 37;
pub const XML_ERR_ENTITY_NOT_STARTED: C2RustUnnamed_0 = 36;
pub const XML_ERR_NS_DECL_ERROR: C2RustUnnamed_0 = 35;
pub const XML_ERR_STRING_NOT_CLOSED: C2RustUnnamed_0 = 34;
pub const XML_ERR_STRING_NOT_STARTED: C2RustUnnamed_0 = 33;
pub const XML_ERR_UNSUPPORTED_ENCODING: C2RustUnnamed_0 = 32;
pub const XML_ERR_UNKNOWN_ENCODING: C2RustUnnamed_0 = 31;
pub const XML_ERR_ENTITY_IS_PARAMETER: C2RustUnnamed_0 = 30;
pub const XML_ERR_ENTITY_IS_EXTERNAL: C2RustUnnamed_0 = 29;
pub const XML_ERR_UNPARSED_ENTITY: C2RustUnnamed_0 = 28;
pub const XML_WAR_UNDECLARED_ENTITY: C2RustUnnamed_0 = 27;
pub const XML_ERR_UNDECLARED_ENTITY: C2RustUnnamed_0 = 26;
pub const XML_ERR_PEREF_SEMICOL_MISSING: C2RustUnnamed_0 = 25;
pub const XML_ERR_PEREF_NO_NAME: C2RustUnnamed_0 = 24;
pub const XML_ERR_ENTITYREF_SEMICOL_MISSING: C2RustUnnamed_0 = 23;
pub const XML_ERR_ENTITYREF_NO_NAME: C2RustUnnamed_0 = 22;
pub const XML_ERR_PEREF_IN_INT_SUBSET: C2RustUnnamed_0 = 21;
pub const XML_ERR_PEREF_IN_EPILOG: C2RustUnnamed_0 = 20;
pub const XML_ERR_PEREF_IN_PROLOG: C2RustUnnamed_0 = 19;
pub const XML_ERR_PEREF_AT_EOF: C2RustUnnamed_0 = 18;
pub const XML_ERR_ENTITYREF_IN_DTD: C2RustUnnamed_0 = 17;
pub const XML_ERR_ENTITYREF_IN_EPILOG: C2RustUnnamed_0 = 16;
pub const XML_ERR_ENTITYREF_IN_PROLOG: C2RustUnnamed_0 = 15;
pub const XML_ERR_ENTITYREF_AT_EOF: C2RustUnnamed_0 = 14;
pub const XML_ERR_CHARREF_IN_DTD: C2RustUnnamed_0 = 13;
pub const XML_ERR_CHARREF_IN_EPILOG: C2RustUnnamed_0 = 12;
pub const XML_ERR_CHARREF_IN_PROLOG: C2RustUnnamed_0 = 11;
pub const XML_ERR_CHARREF_AT_EOF: C2RustUnnamed_0 = 10;
pub const XML_ERR_INVALID_CHAR: C2RustUnnamed_0 = 9;
pub const XML_ERR_INVALID_CHARREF: C2RustUnnamed_0 = 8;
pub const XML_ERR_INVALID_DEC_CHARREF: C2RustUnnamed_0 = 7;
pub const XML_ERR_INVALID_HEX_CHARREF: C2RustUnnamed_0 = 6;
pub const XML_ERR_DOCUMENT_END: C2RustUnnamed_0 = 5;
pub const XML_ERR_DOCUMENT_EMPTY: C2RustUnnamed_0 = 4;
pub const XML_ERR_DOCUMENT_START: C2RustUnnamed_0 = 3;
pub const XML_ERR_INTERNAL_ERROR: C2RustUnnamed_0 = 1;
pub const XML_ERR_OK: C2RustUnnamed_0 = 0;
pub type C2RustUnnamed_1 = std::os::raw::c_uint;
pub const XML_SAVE_WSNONSIG: C2RustUnnamed_1 = 128;
/* LIBXML_OUTPUT_ENABLED */
/*
 * XHTML
 */
/* ***********************************************************************
 *									*
 *			XHTML detection					*
 *									*
 ************************************************************************/
/* *
 * xmlIsXHTML:
 * @systemID:  the system identifier
 * @publicID:  the public identifier
 *
 * Try to find if the document correspond to an XHTML DTD
 *
 * Returns 1 if true, 0 if not and -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlIsXHTML(mut systemID: *const xmlChar,
                                    mut publicID: *const xmlChar)
 -> std::os::raw::c_int {
    if systemID.is_null() && publicID.is_null() { return -(1 as std::os::raw::c_int) }
    if !publicID.is_null() {
        if xmlStrEqual(publicID,
                       b"-//W3C//DTD XHTML 1.0 Strict//EN\x00" as *const u8 as
                           *const std::os::raw::c_char as *mut xmlChar) != 0 {
            return 1 as std::os::raw::c_int
        }
        if xmlStrEqual(publicID,
                       b"-//W3C//DTD XHTML 1.0 Frameset//EN\x00" as *const u8
                           as *const std::os::raw::c_char as *mut xmlChar) != 0 {
            return 1 as std::os::raw::c_int
        }
        if xmlStrEqual(publicID,
                       b"-//W3C//DTD XHTML 1.0 Transitional//EN\x00" as
                           *const u8 as *const std::os::raw::c_char as *mut xmlChar)
               != 0 {
            return 1 as std::os::raw::c_int
        }
    }
    if !systemID.is_null() {
        if xmlStrEqual(systemID,
                       b"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\x00"
                           as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 {
            return 1 as std::os::raw::c_int
        }
        if xmlStrEqual(systemID,
                       b"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\x00"
                           as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 {
            return 1 as std::os::raw::c_int
        }
        if xmlStrEqual(systemID,
                       b"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\x00"
                           as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 {
            return 1 as std::os::raw::c_int
        }
    }
    return 0 as std::os::raw::c_int;
}
/* used for attribute content */
/* ***********************************************************************
 *									*
 *			Output error handlers				*
 *									*
 ************************************************************************/
/* *
 * xmlSaveErrMemory:
 * @extra:  extra informations
 *
 * Handle an out of memory condition
 */
unsafe extern "C" fn xmlSaveErrMemory(mut extra: *const std::os::raw::c_char) {
    __xmlSimpleError(XML_FROM_OUTPUT as std::os::raw::c_int,
                     XML_ERR_NO_MEMORY as std::os::raw::c_int, 0 as xmlNodePtr,
                     0 as *const std::os::raw::c_char, extra);
}
/* *
 * xmlSaveErr:
 * @code:  the error number
 * @node:  the location of the error.
 * @extra:  extra informations
 *
 * Handle an out of memory condition
 */
unsafe extern "C" fn xmlSaveErr(mut code: std::os::raw::c_int, mut node: xmlNodePtr,
                                mut extra: *const std::os::raw::c_char) {
    let mut msg: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    match code {
        1400 => {
            msg =
                b"string is not in UTF-8\n\x00" as *const u8 as
                    *const std::os::raw::c_char
        }
        1401 => {
            msg =
                b"invalid character value\n\x00" as *const u8 as
                    *const std::os::raw::c_char
        }
        1403 => {
            msg =
                b"unknown encoding %s\n\x00" as *const u8 as
                    *const std::os::raw::c_char
        }
        1402 => {
            msg =
                b"document has no DOCTYPE\n\x00" as *const u8 as
                    *const std::os::raw::c_char
        }
        _ => {
            msg =
                b"unexpected error number\n\x00" as *const u8 as
                    *const std::os::raw::c_char
        }
    }
    __xmlSimpleError(XML_FROM_OUTPUT as std::os::raw::c_int, code, node, msg, extra);
}
/* ***********************************************************************
 *									*
 *			Special escaping routines			*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlSerializeHexCharRef(mut out: *mut std::os::raw::c_uchar,
                                            mut val: std::os::raw::c_int)
 -> *mut std::os::raw::c_uchar {
    let mut ptr: *mut std::os::raw::c_uchar = 0 as *mut std::os::raw::c_uchar;
    let fresh0 = out;
    out = out.offset(1);
    *fresh0 = '&' as i32 as std::os::raw::c_uchar;
    let fresh1 = out;
    out = out.offset(1);
    *fresh1 = '#' as i32 as std::os::raw::c_uchar;
    let fresh2 = out;
    out = out.offset(1);
    *fresh2 = 'x' as i32 as std::os::raw::c_uchar;
    if val < 0x10 as std::os::raw::c_int {
        ptr = out
    } else if val < 0x100 as std::os::raw::c_int {
        ptr = out.offset(1 as std::os::raw::c_int as isize)
    } else if val < 0x1000 as std::os::raw::c_int {
        ptr = out.offset(2 as std::os::raw::c_int as isize)
    } else if val < 0x10000 as std::os::raw::c_int {
        ptr = out.offset(3 as std::os::raw::c_int as isize)
    } else if val < 0x100000 as std::os::raw::c_int {
        ptr = out.offset(4 as std::os::raw::c_int as isize)
    } else { ptr = out.offset(5 as std::os::raw::c_int as isize) }
    out = ptr.offset(1 as std::os::raw::c_int as isize);
    while val > 0 as std::os::raw::c_int {
        match val & 0xf as std::os::raw::c_int {
            0 => {
                let fresh3 = ptr;
                ptr = ptr.offset(-1);
                *fresh3 = '0' as i32 as std::os::raw::c_uchar
            }
            1 => {
                let fresh4 = ptr;
                ptr = ptr.offset(-1);
                *fresh4 = '1' as i32 as std::os::raw::c_uchar
            }
            2 => {
                let fresh5 = ptr;
                ptr = ptr.offset(-1);
                *fresh5 = '2' as i32 as std::os::raw::c_uchar
            }
            3 => {
                let fresh6 = ptr;
                ptr = ptr.offset(-1);
                *fresh6 = '3' as i32 as std::os::raw::c_uchar
            }
            4 => {
                let fresh7 = ptr;
                ptr = ptr.offset(-1);
                *fresh7 = '4' as i32 as std::os::raw::c_uchar
            }
            5 => {
                let fresh8 = ptr;
                ptr = ptr.offset(-1);
                *fresh8 = '5' as i32 as std::os::raw::c_uchar
            }
            6 => {
                let fresh9 = ptr;
                ptr = ptr.offset(-1);
                *fresh9 = '6' as i32 as std::os::raw::c_uchar
            }
            7 => {
                let fresh10 = ptr;
                ptr = ptr.offset(-1);
                *fresh10 = '7' as i32 as std::os::raw::c_uchar
            }
            8 => {
                let fresh11 = ptr;
                ptr = ptr.offset(-1);
                *fresh11 = '8' as i32 as std::os::raw::c_uchar
            }
            9 => {
                let fresh12 = ptr;
                ptr = ptr.offset(-1);
                *fresh12 = '9' as i32 as std::os::raw::c_uchar
            }
            10 => {
                let fresh13 = ptr;
                ptr = ptr.offset(-1);
                *fresh13 = 'A' as i32 as std::os::raw::c_uchar
            }
            11 => {
                let fresh14 = ptr;
                ptr = ptr.offset(-1);
                *fresh14 = 'B' as i32 as std::os::raw::c_uchar
            }
            12 => {
                let fresh15 = ptr;
                ptr = ptr.offset(-1);
                *fresh15 = 'C' as i32 as std::os::raw::c_uchar
            }
            13 => {
                let fresh16 = ptr;
                ptr = ptr.offset(-1);
                *fresh16 = 'D' as i32 as std::os::raw::c_uchar
            }
            14 => {
                let fresh17 = ptr;
                ptr = ptr.offset(-1);
                *fresh17 = 'E' as i32 as std::os::raw::c_uchar
            }
            15 => {
                let fresh18 = ptr;
                ptr = ptr.offset(-1);
                *fresh18 = 'F' as i32 as std::os::raw::c_uchar
            }
            _ => {
                let fresh19 = ptr;
                ptr = ptr.offset(-1);
                *fresh19 = '0' as i32 as std::os::raw::c_uchar
            }
        }
        val >>= 4 as std::os::raw::c_int
    }
    let fresh20 = out;
    out = out.offset(1);
    *fresh20 = ';' as i32 as std::os::raw::c_uchar;
    *out = 0 as std::os::raw::c_int as std::os::raw::c_uchar;
    return out;
}
/* *
 * xmlEscapeEntities:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of unescaped UTF-8 bytes
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and escape them. Used when there is no
 * encoding specified.
 *
 * Returns 0 if success, or -1 otherwise
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictable.
 * The value of @outlen after return is the number of octets consumed.
 */
unsafe extern "C" fn xmlEscapeEntities(mut out: *mut std::os::raw::c_uchar,
                                       mut outlen: *mut std::os::raw::c_int,
                                       mut in_0: *const xmlChar,
                                       mut inlen: *mut std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut current_block: u64;
    let mut outstart: *mut std::os::raw::c_uchar = out;
    let mut base: *const std::os::raw::c_uchar = in_0;
    let mut outend: *mut std::os::raw::c_uchar = out.offset(*outlen as isize);
    let mut inend: *const std::os::raw::c_uchar = 0 as *const std::os::raw::c_uchar;
    let mut val: std::os::raw::c_int = 0;
    inend = in_0.offset(*inlen as isize);
    loop  {
        if !(in_0 < inend && out < outend) {
            current_block = 7419121793134201633;
            break ;
        }
        if *in_0 as std::os::raw::c_int == '<' as i32 {
            if (outend.offset_from(out) as std::os::raw::c_long) <
                   4 as std::os::raw::c_int as std::os::raw::c_long {
                current_block = 7419121793134201633;
                break ;
            }
            let fresh21 = out;
            out = out.offset(1);
            *fresh21 = '&' as i32 as std::os::raw::c_uchar;
            let fresh22 = out;
            out = out.offset(1);
            *fresh22 = 'l' as i32 as std::os::raw::c_uchar;
            let fresh23 = out;
            out = out.offset(1);
            *fresh23 = 't' as i32 as std::os::raw::c_uchar;
            let fresh24 = out;
            out = out.offset(1);
            *fresh24 = ';' as i32 as std::os::raw::c_uchar;
            in_0 = in_0.offset(1)
        } else if *in_0 as std::os::raw::c_int == '>' as i32 {
            if (outend.offset_from(out) as std::os::raw::c_long) <
                   4 as std::os::raw::c_int as std::os::raw::c_long {
                current_block = 7419121793134201633;
                break ;
            }
            let fresh25 = out;
            out = out.offset(1);
            *fresh25 = '&' as i32 as std::os::raw::c_uchar;
            let fresh26 = out;
            out = out.offset(1);
            *fresh26 = 'g' as i32 as std::os::raw::c_uchar;
            let fresh27 = out;
            out = out.offset(1);
            *fresh27 = 't' as i32 as std::os::raw::c_uchar;
            let fresh28 = out;
            out = out.offset(1);
            *fresh28 = ';' as i32 as std::os::raw::c_uchar;
            in_0 = in_0.offset(1)
        } else if *in_0 as std::os::raw::c_int == '&' as i32 {
            if (outend.offset_from(out) as std::os::raw::c_long) <
                   5 as std::os::raw::c_int as std::os::raw::c_long {
                current_block = 7419121793134201633;
                break ;
            }
            let fresh29 = out;
            out = out.offset(1);
            *fresh29 = '&' as i32 as std::os::raw::c_uchar;
            let fresh30 = out;
            out = out.offset(1);
            *fresh30 = 'a' as i32 as std::os::raw::c_uchar;
            let fresh31 = out;
            out = out.offset(1);
            *fresh31 = 'm' as i32 as std::os::raw::c_uchar;
            let fresh32 = out;
            out = out.offset(1);
            *fresh32 = 'p' as i32 as std::os::raw::c_uchar;
            let fresh33 = out;
            out = out.offset(1);
            *fresh33 = ';' as i32 as std::os::raw::c_uchar;
            in_0 = in_0.offset(1)
        } else if *in_0 as std::os::raw::c_int >= 0x20 as std::os::raw::c_int &&
                      (*in_0 as std::os::raw::c_int) < 0x80 as std::os::raw::c_int ||
                      *in_0 as std::os::raw::c_int == '\n' as i32 ||
                      *in_0 as std::os::raw::c_int == '\t' as i32 {
            /*
	     * default case, just copy !
	     */
            let fresh34 = in_0;
            in_0 = in_0.offset(1);
            let fresh35 = out;
            out = out.offset(1);
            *fresh35 = *fresh34
        } else if *in_0 as std::os::raw::c_int >= 0x80 as std::os::raw::c_int {
            /*
	     * We assume we have UTF-8 input.
	     */
            if (outend.offset_from(out) as std::os::raw::c_long) <
                   11 as std::os::raw::c_int as std::os::raw::c_long {
                current_block = 7419121793134201633;
                break ;
            }
            if (*in_0 as std::os::raw::c_int) < 0xc0 as std::os::raw::c_int {
                xmlSaveErr(XML_SAVE_NOT_UTF8 as std::os::raw::c_int, 0 as xmlNodePtr,
                           0 as *const std::os::raw::c_char);
                in_0 = in_0.offset(1);
                current_block = 6637511492492758905;
                break ;
            } else {
                if (*in_0 as std::os::raw::c_int) < 0xe0 as std::os::raw::c_int {
                    if (inend.offset_from(in_0) as std::os::raw::c_long) <
                           2 as std::os::raw::c_int as std::os::raw::c_long {
                        current_block = 7419121793134201633;
                        break ;
                    }
                    val =
                        *in_0.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x1f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    in_0 = in_0.offset(2 as std::os::raw::c_int as isize)
                } else if (*in_0 as std::os::raw::c_int) < 0xf0 as std::os::raw::c_int {
                    if (inend.offset_from(in_0) as std::os::raw::c_long) <
                           3 as std::os::raw::c_int as std::os::raw::c_long {
                        current_block = 7419121793134201633;
                        break ;
                    }
                    val =
                        *in_0.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0xf as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    in_0 = in_0.offset(3 as std::os::raw::c_int as isize)
                } else if (*in_0 as std::os::raw::c_int) < 0xf8 as std::os::raw::c_int {
                    if (inend.offset_from(in_0) as std::os::raw::c_long) <
                           4 as std::os::raw::c_int as std::os::raw::c_long {
                        current_block = 7419121793134201633;
                        break ;
                    }
                    val =
                        *in_0.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x7 as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *in_0.offset(3 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    in_0 = in_0.offset(4 as std::os::raw::c_int as isize)
                } else {
                    xmlSaveErr(XML_SAVE_CHAR_INVALID as std::os::raw::c_int,
                               0 as xmlNodePtr, 0 as *const std::os::raw::c_char);
                    in_0 = in_0.offset(1);
                    current_block = 6637511492492758905;
                    break ;
                }
                if if val < 0x100 as std::os::raw::c_int {
                       (0x9 as std::os::raw::c_int <= val && val <= 0xa as std::os::raw::c_int
                            || val == 0xd as std::os::raw::c_int ||
                            0x20 as std::os::raw::c_int <= val) as std::os::raw::c_int
                   } else {
                       (0x100 as std::os::raw::c_int <= val &&
                            val <= 0xd7ff as std::os::raw::c_int ||
                            0xe000 as std::os::raw::c_int <= val &&
                                val <= 0xfffd as std::os::raw::c_int ||
                            0x10000 as std::os::raw::c_int <= val &&
                                val <= 0x10ffff as std::os::raw::c_int) as std::os::raw::c_int
                   } == 0 {
                    xmlSaveErr(XML_SAVE_CHAR_INVALID as std::os::raw::c_int,
                               0 as xmlNodePtr, 0 as *const std::os::raw::c_char);
                    in_0 = in_0.offset(1);
                    current_block = 6637511492492758905;
                    break ;
                } else {
                    /*
	     * We could do multiple things here. Just save as a char ref
	     */
                    out = xmlSerializeHexCharRef(out, val)
                }
            }
        } else if 0x9 as std::os::raw::c_int <= *in_0 as std::os::raw::c_int &&
                      *in_0 as std::os::raw::c_int <= 0xa as std::os::raw::c_int ||
                      *in_0 as std::os::raw::c_int == 0xd as std::os::raw::c_int ||
                      0x20 as std::os::raw::c_int <= *in_0 as std::os::raw::c_int {
            if (outend.offset_from(out) as std::os::raw::c_long) <
                   6 as std::os::raw::c_int as std::os::raw::c_long {
                current_block = 7419121793134201633;
                break ;
            }
            let fresh36 = in_0;
            in_0 = in_0.offset(1);
            out = xmlSerializeHexCharRef(out, *fresh36 as std::os::raw::c_int)
        } else {
            (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                       b"xmlEscapeEntities : char out of range\n\x00"
                                                                           as
                                                                           *const u8
                                                                           as
                                                                           *const std::os::raw::c_char);
            in_0 = in_0.offset(1);
            current_block = 6637511492492758905;
            break ;
        }
    }
    match current_block {
        6637511492492758905 => {
            *outlen =
                out.offset_from(outstart) as std::os::raw::c_long as
                    std::os::raw::c_int;
            *inlen =
                in_0.offset_from(base) as std::os::raw::c_long as
                    std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
        _ => {
            *outlen =
                out.offset_from(outstart) as std::os::raw::c_long as
                    std::os::raw::c_int;
            *inlen =
                in_0.offset_from(base) as std::os::raw::c_long as
                    std::os::raw::c_int;
            return 0 as std::os::raw::c_int
        }
    };
}
/* ***********************************************************************
 *									*
 *			Allocation and deallocation			*
 *									*
 ************************************************************************/
/* *
 * xmlSaveCtxtInit:
 * @ctxt: the saving context
 *
 * Initialize a saving context
 */
unsafe extern "C" fn xmlSaveCtxtInit(mut ctxt: xmlSaveCtxtPtr) {
    let mut i: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    if ctxt.is_null() { return }
    if (*ctxt).encoding.is_null() && (*ctxt).escape.is_none() {
        (*ctxt).escape =
            Some(xmlEscapeEntities as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_uchar,
                                          _: *mut std::os::raw::c_int,
                                          _: *const xmlChar,
                                          _: *mut std::os::raw::c_int) -> std::os::raw::c_int)
    }
    len = xmlStrlen(*__xmlTreeIndentString() as *mut xmlChar);
    if (*__xmlTreeIndentString()).is_null() || len == 0 as std::os::raw::c_int {
        memset(&mut *(*ctxt).indent.as_mut_ptr().offset(0 as std::os::raw::c_int as
                                                            isize) as
                   *mut std::os::raw::c_char as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               (60 as std::os::raw::c_int + 1 as std::os::raw::c_int) as std::os::raw::c_ulong);
    } else {
        (*ctxt).indent_size = len;
        (*ctxt).indent_nr = 60 as std::os::raw::c_int / (*ctxt).indent_size;
        i = 0 as std::os::raw::c_int;
        while i < (*ctxt).indent_nr {
            memcpy(&mut *(*ctxt).indent.as_mut_ptr().offset((i *
                                                                 (*ctxt).indent_size)
                                                                as isize) as
                       *mut std::os::raw::c_char as *mut std::os::raw::c_void,
                   *__xmlTreeIndentString() as *const std::os::raw::c_void,
                   (*ctxt).indent_size as std::os::raw::c_ulong);
            i += 1
        }
        (*ctxt).indent[((*ctxt).indent_nr * (*ctxt).indent_size) as usize] =
            0 as std::os::raw::c_int as std::os::raw::c_char
    }
    if *__xmlSaveNoEmptyTags() != 0 {
        (*ctxt).options |= XML_SAVE_NO_EMPTY as std::os::raw::c_int
    };
}
/* *
 * xmlFreeSaveCtxt:
 *
 * Free a saving context, destroying the ouptut in any remaining buffer
 */
unsafe extern "C" fn xmlFreeSaveCtxt(mut ctxt: xmlSaveCtxtPtr) {
    if ctxt.is_null() { return }
    if !(*ctxt).encoding.is_null() {
        xmlFree.expect("non-null function pointer")((*ctxt).encoding as
                                                        *mut std::os::raw::c_char as
                                                        *mut std::os::raw::c_void);
    }
    if !(*ctxt).buf.is_null() { xmlOutputBufferClose((*ctxt).buf); }
    xmlFree.expect("non-null function pointer")(ctxt as *mut std::os::raw::c_void);
}
/* *
 * xmlNewSaveCtxt:
 *
 * Create a new saving context
 *
 * Returns the new structure or NULL in case of error
 */
unsafe extern "C" fn xmlNewSaveCtxt(mut encoding: *const std::os::raw::c_char,
                                    mut options: std::os::raw::c_int)
 -> xmlSaveCtxtPtr {
    let mut ret: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlSaveCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlSaveCtxtPtr;
    if ret.is_null() {
        xmlSaveErrMemory(b"creating saving context\x00" as *const u8 as
                             *const std::os::raw::c_char);
        return 0 as xmlSaveCtxtPtr
    }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    if !encoding.is_null() {
        (*ret).handler = xmlFindCharEncodingHandler(encoding);
        if (*ret).handler.is_null() {
            xmlSaveErr(XML_SAVE_UNKNOWN_ENCODING as std::os::raw::c_int,
                       0 as xmlNodePtr, encoding);
            xmlFreeSaveCtxt(ret);
            return 0 as xmlSaveCtxtPtr
        }
        (*ret).encoding = xmlStrdup(encoding as *const xmlChar);
        (*ret).escape = None
    }
    xmlSaveCtxtInit(ret);
    /*
     * Use the options
     */
    /* Re-check this option as it may already have been set */
    if (*ret).options & XML_SAVE_NO_EMPTY as std::os::raw::c_int != 0 &&
           options & XML_SAVE_NO_EMPTY as std::os::raw::c_int == 0 {
        options |= XML_SAVE_NO_EMPTY as std::os::raw::c_int
    }
    (*ret).options = options;
    if options & XML_SAVE_FORMAT as std::os::raw::c_int != 0 {
        (*ret).format = 1 as std::os::raw::c_int
    } else if options & XML_SAVE_WSNONSIG as std::os::raw::c_int != 0 {
        (*ret).format = 2 as std::os::raw::c_int
    }
    return ret;
}
/* ***********************************************************************
 *									*
 *		Dumping XML tree content to a simple buffer		*
 *									*
 ************************************************************************/
/* *
 * xmlAttrSerializeContent:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @attr:  the attribute pointer
 *
 * Serialize the attribute in the buffer
 */
unsafe extern "C" fn xmlAttrSerializeContent(mut buf: xmlOutputBufferPtr,
                                             mut attr: xmlAttrPtr) {
    let mut children: xmlNodePtr = 0 as *mut xmlNode;
    children = (*attr).children;
    while !children.is_null() {
        match (*children).type_0 as std::os::raw::c_uint {
            3 => {
                xmlBufAttrSerializeTxtContent((*buf).buffer, (*attr).doc,
                                              attr, (*children).content);
            }
            5 => {
                xmlBufAdd((*buf).buffer,
                          b"&\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut xmlChar, 1 as std::os::raw::c_int);
                xmlBufAdd((*buf).buffer, (*children).name,
                          xmlStrlen((*children).name));
                xmlBufAdd((*buf).buffer,
                          b";\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut xmlChar, 1 as std::os::raw::c_int);
            }
            _ => { }
        }
        children = (*children).next
    };
}
/* *
 * xmlBufDumpNotationTable:
 * @buf:  an xmlBufPtr output
 * @table:  A notation table
 *
 * This will dump the content of the notation table as an XML DTD definition
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufDumpNotationTable(mut buf: xmlBufPtr,
                                                 mut table:
                                                     xmlNotationTablePtr) {
    let mut buffer: xmlBufferPtr = 0 as *mut xmlBuffer;
    buffer = xmlBufferCreate();
    if buffer.is_null() {
        /*
         * TODO set the error in buf
         */
        return
    }
    xmlDumpNotationTable(buffer, table);
    xmlBufMergeBuffer(buf, buffer);
}
/* *
 * xmlBufDumpElementDecl:
 * @buf:  an xmlBufPtr output
 * @elem:  An element table
 *
 * This will dump the content of the element declaration as an XML
 * DTD definition
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufDumpElementDecl(mut buf: xmlBufPtr,
                                               mut elem: xmlElementPtr) {
    let mut buffer: xmlBufferPtr = 0 as *mut xmlBuffer;
    buffer = xmlBufferCreate();
    if buffer.is_null() {
        /*
         * TODO set the error in buf
         */
        return
    }
    xmlDumpElementDecl(buffer, elem);
    xmlBufMergeBuffer(buf, buffer);
}
/* *
 * xmlBufDumpAttributeDecl:
 * @buf:  an xmlBufPtr output
 * @attr:  An attribute declaration
 *
 * This will dump the content of the attribute declaration as an XML
 * DTD definition
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufDumpAttributeDecl(mut buf: xmlBufPtr,
                                                 mut attr: xmlAttributePtr) {
    let mut buffer: xmlBufferPtr = 0 as *mut xmlBuffer;
    buffer = xmlBufferCreate();
    if buffer.is_null() {
        /*
         * TODO set the error in buf
         */
        return
    }
    xmlDumpAttributeDecl(buffer, attr);
    xmlBufMergeBuffer(buf, buffer);
}
/* *
 * xmlBufDumpEntityDecl:
 * @buf:  an xmlBufPtr output
 * @ent:  An entity table
 *
 * This will dump the content of the entity table as an XML DTD definition
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufDumpEntityDecl(mut buf: xmlBufPtr,
                                              mut ent: xmlEntityPtr) {
    let mut buffer: xmlBufferPtr = 0 as *mut xmlBuffer;
    buffer = xmlBufferCreate();
    if buffer.is_null() {
        /*
         * TODO set the error in buf
         */
        return
    }
    xmlDumpEntityDecl(buffer, ent);
    xmlBufMergeBuffer(buf, buffer);
}
/* ***********************************************************************
 *									*
 *		Dumping XML tree content to an I/O output buffer	*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlSaveSwitchEncoding(mut ctxt: xmlSaveCtxtPtr,
                                           mut encoding: *const std::os::raw::c_char)
 -> std::os::raw::c_int {
    let mut buf: xmlOutputBufferPtr = (*ctxt).buf;
    if !encoding.is_null() && (*buf).encoder.is_null() &&
           (*buf).conv.is_null() {
        (*buf).encoder = xmlFindCharEncodingHandler(encoding);
        if (*buf).encoder.is_null() {
            xmlSaveErr(XML_SAVE_UNKNOWN_ENCODING as std::os::raw::c_int,
                       0 as xmlNodePtr, encoding);
            return -(1 as std::os::raw::c_int)
        }
        (*buf).conv = xmlBufCreate();
        if (*buf).conv.is_null() {
            xmlCharEncCloseFunc((*buf).encoder);
            xmlSaveErrMemory(b"creating encoding buffer\x00" as *const u8 as
                                 *const std::os::raw::c_char);
            return -(1 as std::os::raw::c_int)
        }
        /*
	 * initialize the state, e.g. if outputting a BOM
	 */
        xmlCharEncOutput(buf, 1 as std::os::raw::c_int);
    }
    return 0 as std::os::raw::c_int;
}
unsafe extern "C" fn xmlSaveClearEncoding(mut ctxt: xmlSaveCtxtPtr)
 -> std::os::raw::c_int {
    let mut buf: xmlOutputBufferPtr = (*ctxt).buf;
    xmlOutputBufferFlush(buf);
    xmlCharEncCloseFunc((*buf).encoder);
    xmlBufFree((*buf).conv);
    (*buf).encoder = 0 as xmlCharEncodingHandlerPtr;
    (*buf).conv = 0 as xmlBufPtr;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlOutputBufferWriteWSNonSig:
 * @ctxt:  The save context
 * @extra: Number of extra indents to apply to ctxt->level
 *
 * Write out formatting for non-significant whitespace output.
 */
unsafe extern "C" fn xmlOutputBufferWriteWSNonSig(mut ctxt: xmlSaveCtxtPtr,
                                                  mut extra: std::os::raw::c_int) {
    let mut i: std::os::raw::c_int = 0;
    if ctxt.is_null() || (*ctxt).buf.is_null() { return }
    xmlOutputBufferWrite((*ctxt).buf, 1 as std::os::raw::c_int,
                         b"\n\x00" as *const u8 as *const std::os::raw::c_char);
    i = 0 as std::os::raw::c_int;
    while i < (*ctxt).level + extra {
        xmlOutputBufferWrite((*ctxt).buf,
                             (*ctxt).indent_size *
                                 (if (*ctxt).level + extra - i >
                                         (*ctxt).indent_nr {
                                      (*ctxt).indent_nr
                                  } else { ((*ctxt).level + extra) - i }),
                             (*ctxt).indent.as_mut_ptr());
        i += (*ctxt).indent_nr
    };
}
/* *
 * xmlNsDumpOutput:
 * @buf:  the XML buffer output
 * @cur:  a namespace
 * @ctxt: the output save context. Optional.
 *
 * Dump a local Namespace definition.
 * Should be called in the context of attributes dumps.
 * If @ctxt is supplied, @buf should be its buffer.
 */
unsafe extern "C" fn xmlNsDumpOutput(mut buf: xmlOutputBufferPtr,
                                     mut cur: xmlNsPtr,
                                     mut ctxt: xmlSaveCtxtPtr) {
    if cur.is_null() || buf.is_null() { return }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*cur).href.is_null() {
        if xmlStrEqual((*cur).prefix,
                       b"xml\x00" as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 {
            return
        }
        if !ctxt.is_null() && (*ctxt).format == 2 as std::os::raw::c_int {
            xmlOutputBufferWriteWSNonSig(ctxt, 2 as std::os::raw::c_int);
        } else {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b" \x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        /* Within the context of an element attributes */
        if !(*cur).prefix.is_null() {
            xmlOutputBufferWrite(buf, 6 as std::os::raw::c_int,
                                 b"xmlns:\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).prefix as *const std::os::raw::c_char);
        } else {
            xmlOutputBufferWrite(buf, 5 as std::os::raw::c_int,
                                 b"xmlns\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b"=\x00" as *const u8 as *const std::os::raw::c_char);
        xmlBufWriteQuotedString((*buf).buffer, (*cur).href);
    };
}
/* *
 * xmlNsDumpOutputCtxt
 * @ctxt: the save context
 * @cur:  a namespace
 *
 * Dump a local Namespace definition to a save context.
 * Should be called in the context of attribute dumps.
 */
unsafe extern "C" fn xmlNsDumpOutputCtxt(mut ctxt: xmlSaveCtxtPtr,
                                         mut cur: xmlNsPtr) {
    xmlNsDumpOutput((*ctxt).buf, cur, ctxt);
}
/* *
 * xmlNsListDumpOutputCtxt
 * @ctxt: the save context
 * @cur:  the first namespace
 *
 * Dump a list of local namespace definitions to a save context.
 * Should be called in the context of attribute dumps.
 */
unsafe extern "C" fn xmlNsListDumpOutputCtxt(mut ctxt: xmlSaveCtxtPtr,
                                             mut cur: xmlNsPtr) {
    while !cur.is_null() {
        xmlNsDumpOutput((*ctxt).buf, cur, ctxt);
        cur = (*cur).next
    };
}
/* *
 * xmlNsListDumpOutput:
 * @buf:  the XML buffer output
 * @cur:  the first namespace
 *
 * Dump a list of local Namespace definitions.
 * Should be called in the context of attributes dumps.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlNsListDumpOutput(mut buf: xmlOutputBufferPtr,
                                             mut cur: xmlNsPtr) {
    while !cur.is_null() {
        xmlNsDumpOutput(buf, cur, 0 as xmlSaveCtxtPtr);
        cur = (*cur).next
    };
}
/* *
 * xmlDtdDumpOutput:
 * @buf:  the XML buffer output
 * @dtd:  the pointer to the DTD
 *
 * Dump the XML document DTD, if any.
 */
unsafe extern "C" fn xmlDtdDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                      mut dtd: xmlDtdPtr) {
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut format: std::os::raw::c_int = 0;
    let mut level: std::os::raw::c_int = 0;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    if dtd.is_null() { return }
    if ctxt.is_null() || (*ctxt).buf.is_null() { return }
    buf = (*ctxt).buf;
    xmlOutputBufferWrite(buf, 10 as std::os::raw::c_int,
                         b"<!DOCTYPE \x00" as *const u8 as
                             *const std::os::raw::c_char);
    xmlOutputBufferWriteString(buf, (*dtd).name as *const std::os::raw::c_char);
    if !(*dtd).ExternalID.is_null() {
        xmlOutputBufferWrite(buf, 8 as std::os::raw::c_int,
                             b" PUBLIC \x00" as *const u8 as
                                 *const std::os::raw::c_char);
        xmlBufWriteQuotedString((*buf).buffer, (*dtd).ExternalID);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b" \x00" as *const u8 as *const std::os::raw::c_char);
        xmlBufWriteQuotedString((*buf).buffer, (*dtd).SystemID);
    } else if !(*dtd).SystemID.is_null() {
        xmlOutputBufferWrite(buf, 8 as std::os::raw::c_int,
                             b" SYSTEM \x00" as *const u8 as
                                 *const std::os::raw::c_char);
        xmlBufWriteQuotedString((*buf).buffer, (*dtd).SystemID);
    }
    if (*dtd).entities.is_null() && (*dtd).elements.is_null() &&
           (*dtd).attributes.is_null() && (*dtd).notations.is_null() &&
           (*dtd).pentities.is_null() {
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b">\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                         b" [\n\x00" as *const u8 as *const std::os::raw::c_char);
    /*
     * Dump the notations first they are not in the DTD children list
     * Do this only on a standalone DTD or on the internal subset though.
     */
    if !(*dtd).notations.is_null() &&
           ((*dtd).doc.is_null() || (*(*dtd).doc).intSubset == dtd) {
        xmlBufDumpNotationTable((*buf).buffer,
                                (*dtd).notations as xmlNotationTablePtr);
    }
    format = (*ctxt).format;
    level = (*ctxt).level;
    doc = (*ctxt).doc;
    (*ctxt).format = 0 as std::os::raw::c_int;
    (*ctxt).level = -(1 as std::os::raw::c_int);
    (*ctxt).doc = (*dtd).doc;
    xmlNodeListDumpOutput(ctxt, (*dtd).children);
    (*ctxt).format = format;
    (*ctxt).level = level;
    (*ctxt).doc = doc;
    xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                         b"]>\x00" as *const u8 as *const std::os::raw::c_char);
}
/* *
 * xmlAttrDumpOutput:
 * @buf:  the XML buffer output
 * @cur:  the attribute pointer
 *
 * Dump an XML attribute
 */
unsafe extern "C" fn xmlAttrDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                       mut cur: xmlAttrPtr) {
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    buf = (*ctxt).buf;
    if buf.is_null() { return }
    if (*ctxt).format == 2 as std::os::raw::c_int {
        xmlOutputBufferWriteWSNonSig(ctxt, 2 as std::os::raw::c_int);
    } else {
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b" \x00" as *const u8 as *const std::os::raw::c_char);
    }
    if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
        xmlOutputBufferWriteString(buf,
                                   (*(*cur).ns).prefix as
                                       *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b":\x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
    xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                         b"=\"\x00" as *const u8 as *const std::os::raw::c_char);
    xmlAttrSerializeContent(buf, cur);
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b"\"\x00" as *const u8 as *const std::os::raw::c_char);
}
/* *
 * xmlAttrListDumpOutput:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @cur:  the first attribute pointer
 * @encoding:  an optional encoding string
 *
 * Dump a list of XML attributes
 */
unsafe extern "C" fn xmlAttrListDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                           mut cur: xmlAttrPtr) {
    if cur.is_null() { return }
    while !cur.is_null() { xmlAttrDumpOutput(ctxt, cur); cur = (*cur).next };
}
/* *
 * xmlNodeListDumpOutput:
 * @cur:  the first node
 *
 * Dump an XML node list, recursive behaviour, children are printed too.
 */
unsafe extern "C" fn xmlNodeListDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                           mut cur: xmlNodePtr) {
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    buf = (*ctxt).buf;
    while !cur.is_null() {
        if (*ctxt).format == 1 as std::os::raw::c_int && *__xmlIndentTreeOutput() != 0
               &&
               ((*cur).type_0 as std::os::raw::c_uint ==
                    XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                    (*cur).type_0 as std::os::raw::c_uint ==
                        XML_COMMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                    (*cur).type_0 as std::os::raw::c_uint ==
                        XML_PI_NODE as std::os::raw::c_int as std::os::raw::c_uint) {
            xmlOutputBufferWrite(buf,
                                 (*ctxt).indent_size *
                                     (if (*ctxt).level > (*ctxt).indent_nr {
                                          (*ctxt).indent_nr
                                      } else { (*ctxt).level }),
                                 (*ctxt).indent.as_mut_ptr());
        }
        xmlNodeDumpOutputInternal(ctxt, cur);
        if (*ctxt).format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\n\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        cur = (*cur).next
    };
}
/* *
 * xmlNodeDumpOutputInternal:
 * @cur:  the current node
 *
 * Dump an HTML node, recursive behaviour, children are printed too.
 */
unsafe extern "C" fn htmlNodeDumpOutputInternal(mut ctxt: xmlSaveCtxtPtr,
                                                mut cur: xmlNodePtr)
 -> std::os::raw::c_int {
    let mut oldenc: *const xmlChar = 0 as *const xmlChar;
    let mut oldctxtenc: *const xmlChar = (*ctxt).encoding;
    let mut encoding: *const xmlChar = (*ctxt).encoding;
    let mut buf: xmlOutputBufferPtr = (*ctxt).buf;
    let mut switched_encoding: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    xmlInitParser();
    doc = (*cur).doc;
    if !doc.is_null() {
        oldenc = (*doc).encoding;
        if !(*ctxt).encoding.is_null() {
            (*doc).encoding = (*ctxt).encoding as *mut xmlChar
        } else if !(*doc).encoding.is_null() { encoding = (*doc).encoding }
    }
    if !encoding.is_null() && !doc.is_null() {
        htmlSetMetaEncoding(doc, encoding);
    }
    if encoding.is_null() && !doc.is_null() {
        encoding = htmlGetMetaEncoding(doc)
    }
    if encoding.is_null() {
        encoding =
            b"HTML\x00" as *const u8 as *const std::os::raw::c_char as *mut xmlChar
    }
    if !encoding.is_null() && oldctxtenc.is_null() && (*buf).encoder.is_null()
           && (*buf).conv.is_null() {
        if xmlSaveSwitchEncoding(ctxt, encoding as *const std::os::raw::c_char) <
               0 as std::os::raw::c_int {
            (*doc).encoding = oldenc;
            return -(1 as std::os::raw::c_int)
        }
        switched_encoding = 1 as std::os::raw::c_int
    }
    if (*ctxt).options & XML_SAVE_FORMAT as std::os::raw::c_int != 0 {
        htmlNodeDumpFormatOutput(buf, doc, cur,
                                 encoding as *const std::os::raw::c_char,
                                 1 as std::os::raw::c_int);
    } else {
        htmlNodeDumpFormatOutput(buf, doc, cur,
                                 encoding as *const std::os::raw::c_char,
                                 0 as std::os::raw::c_int);
    }
    /*
     * Restore the state of the saving context at the end of the document
     */
    if switched_encoding != 0 && oldctxtenc.is_null() {
        xmlSaveClearEncoding(ctxt);
    }
    if !doc.is_null() { (*doc).encoding = oldenc }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlNodeDumpOutputInternal:
 * @cur:  the current node
 *
 * Dump an XML node, recursive behaviour, children are printed too.
 */
unsafe extern "C" fn xmlNodeDumpOutputInternal(mut ctxt: xmlSaveCtxtPtr,
                                               mut cur: xmlNodePtr) {
    let mut format: std::os::raw::c_int = 0;
    let mut tmp: xmlNodePtr = 0 as *mut xmlNode;
    let mut start: *mut xmlChar = 0 as *mut xmlChar;
    let mut end: *mut xmlChar = 0 as *mut xmlChar;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    buf = (*ctxt).buf;
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_XINCLUDE_START as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_XINCLUDE_END as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
           (*cur).type_0 as std::os::raw::c_uint ==
               XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlDocContentDumpOutput(ctxt, cur as xmlDocPtr);
        return
    }
    if (*ctxt).options & XML_SAVE_XHTML as std::os::raw::c_int != 0 {
        xhtmlNodeDumpOutput(ctxt, cur);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint !=
           XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*cur).doc.is_null() &&
           (*(*cur).doc).type_0 as std::os::raw::c_uint ==
               XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           (*ctxt).options & XML_SAVE_AS_XML as std::os::raw::c_int ==
               0 as std::os::raw::c_int ||
           (*ctxt).options & XML_SAVE_AS_HTML as std::os::raw::c_int != 0 {
        htmlNodeDumpOutputInternal(ctxt, cur);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DTD_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlDtdDumpOutput(ctxt, cur as xmlDtdPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_FRAG_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlNodeListDumpOutput(ctxt, (*cur).children);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ELEMENT_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpElementDecl((*buf).buffer, cur as xmlElementPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ATTRIBUTE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpAttributeDecl((*buf).buffer, cur as xmlAttributePtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ENTITY_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpEntityDecl((*buf).buffer, cur as xmlEntityPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_TEXT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            if (*cur).name != xmlStringTextNoenc.as_ptr() {
                xmlOutputBufferWriteEscape(buf, (*cur).content,
                                           (*ctxt).escape);
            } else {
                /*
		 * Disable escaping, needed for XSLT
		 */
                xmlOutputBufferWriteString(buf,
                                           (*cur).content as
                                               *const std::os::raw::c_char);
            }
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_PI_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"<?\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).name as *const std::os::raw::c_char);
            if !(*cur).content.is_null() {
                if (*ctxt).format == 2 as std::os::raw::c_int {
                    xmlOutputBufferWriteWSNonSig(ctxt, 0 as std::os::raw::c_int);
                } else {
                    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                         b" \x00" as *const u8 as
                                             *const std::os::raw::c_char);
                }
                xmlOutputBufferWriteString(buf,
                                           (*cur).content as
                                               *const std::os::raw::c_char);
            }
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"?>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        } else {
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"<?\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).name as *const std::os::raw::c_char);
            if (*ctxt).format == 2 as std::os::raw::c_int {
                xmlOutputBufferWriteWSNonSig(ctxt, 0 as std::os::raw::c_int);
            }
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"?>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_COMMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            xmlOutputBufferWrite(buf, 4 as std::os::raw::c_int,
                                 b"<!--\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).content as *const std::os::raw::c_char);
            xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                 b"-->\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ENTITY_REF_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b"&\x00" as *const u8 as *const std::os::raw::c_char);
        xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b";\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_CDATA_SECTION_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if (*cur).content.is_null() ||
               *(*cur).content as std::os::raw::c_int == '\u{0}' as i32 {
            xmlOutputBufferWrite(buf, 12 as std::os::raw::c_int,
                                 b"<![CDATA[]]>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        } else {
            end = (*cur).content;
            start = end;
            while *end as std::os::raw::c_int != '\u{0}' as i32 {
                if *end as std::os::raw::c_int == ']' as i32 &&
                       *end.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                           == ']' as i32 &&
                       *end.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                           == '>' as i32 {
                    end = end.offset(2 as std::os::raw::c_int as isize);
                    xmlOutputBufferWrite(buf, 9 as std::os::raw::c_int,
                                         b"<![CDATA[\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    xmlOutputBufferWrite(buf,
                                         end.offset_from(start) as
                                             std::os::raw::c_long as std::os::raw::c_int,
                                         start as *const std::os::raw::c_char);
                    xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                         b"]]>\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    start = end
                }
                end = end.offset(1)
            }
            if start != end {
                xmlOutputBufferWrite(buf, 9 as std::os::raw::c_int,
                                     b"<![CDATA[\x00" as *const u8 as
                                         *const std::os::raw::c_char);
                xmlOutputBufferWriteString(buf, start as *const std::os::raw::c_char);
                xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                     b"]]>\x00" as *const u8 as
                                         *const std::os::raw::c_char);
            }
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ATTRIBUTE_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlAttrDumpOutput(ctxt, cur as xmlAttrPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlNsDumpOutputCtxt(ctxt, cur as xmlNsPtr);
        return
    }
    format = (*ctxt).format;
    if format == 1 as std::os::raw::c_int {
        tmp = (*cur).children;
        while !tmp.is_null() {
            if (*tmp).type_0 as std::os::raw::c_uint ==
                   XML_TEXT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                   (*tmp).type_0 as std::os::raw::c_uint ==
                       XML_CDATA_SECTION_NODE as std::os::raw::c_int as std::os::raw::c_uint
                   ||
                   (*tmp).type_0 as std::os::raw::c_uint ==
                       XML_ENTITY_REF_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                (*ctxt).format = 0 as std::os::raw::c_int;
                break ;
            } else { tmp = (*tmp).next }
        }
    }
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b"<\x00" as *const u8 as *const std::os::raw::c_char);
    if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
        xmlOutputBufferWriteString(buf,
                                   (*(*cur).ns).prefix as
                                       *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b":\x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
    if !(*cur).nsDef.is_null() {
        xmlNsListDumpOutputCtxt(ctxt, (*cur).nsDef);
    }
    if !(*cur).properties.is_null() {
        xmlAttrListDumpOutput(ctxt, (*cur).properties);
    }
    if ((*cur).type_0 as std::os::raw::c_uint ==
            XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
            (*cur).content.is_null()) && (*cur).children.is_null() &&
           (*ctxt).options & XML_SAVE_NO_EMPTY as std::os::raw::c_int ==
               0 as std::os::raw::c_int {
        if (*ctxt).format == 2 as std::os::raw::c_int {
            xmlOutputBufferWriteWSNonSig(ctxt, 0 as std::os::raw::c_int);
        }
        xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                             b"/>\x00" as *const u8 as *const std::os::raw::c_char);
        (*ctxt).format = format;
        return
    }
    if (*ctxt).format == 2 as std::os::raw::c_int {
        xmlOutputBufferWriteWSNonSig(ctxt, 1 as std::os::raw::c_int);
    }
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b">\x00" as *const u8 as *const std::os::raw::c_char);
    if (*cur).type_0 as std::os::raw::c_uint !=
           XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*cur).content.is_null() {
        xmlOutputBufferWriteEscape(buf, (*cur).content, (*ctxt).escape);
    }
    if !(*cur).children.is_null() {
        if (*ctxt).format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\n\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        if (*ctxt).level >= 0 as std::os::raw::c_int { (*ctxt).level += 1 }
        xmlNodeListDumpOutput(ctxt, (*cur).children);
        if (*ctxt).level > 0 as std::os::raw::c_int { (*ctxt).level -= 1 }
        if *__xmlIndentTreeOutput() != 0 && (*ctxt).format == 1 as std::os::raw::c_int
           {
            xmlOutputBufferWrite(buf,
                                 (*ctxt).indent_size *
                                     (if (*ctxt).level > (*ctxt).indent_nr {
                                          (*ctxt).indent_nr
                                      } else { (*ctxt).level }),
                                 (*ctxt).indent.as_mut_ptr());
        }
    }
    xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                         b"</\x00" as *const u8 as *const std::os::raw::c_char);
    if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
        xmlOutputBufferWriteString(buf,
                                   (*(*cur).ns).prefix as
                                       *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b":\x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
    if (*ctxt).format == 2 as std::os::raw::c_int {
        xmlOutputBufferWriteWSNonSig(ctxt, 0 as std::os::raw::c_int);
    }
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b">\x00" as *const u8 as *const std::os::raw::c_char);
    (*ctxt).format = format;
}
/* *
 * xmlDocContentDumpOutput:
 * @cur:  the document
 *
 * Dump an XML document.
 */
unsafe extern "C" fn xmlDocContentDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                             mut cur: xmlDocPtr)
 -> std::os::raw::c_int {
    let mut dtd: xmlDtdPtr = 0 as *mut xmlDtd;
    let mut is_xhtml: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut oldenc: *const xmlChar = (*cur).encoding;
    let mut oldctxtenc: *const xmlChar = (*ctxt).encoding;
    let mut encoding: *const xmlChar = (*ctxt).encoding;
    let mut oldescape: xmlCharEncodingOutputFunc = (*ctxt).escape;
    let mut oldescapeAttr: xmlCharEncodingOutputFunc = (*ctxt).escapeAttr;
    let mut buf: xmlOutputBufferPtr = (*ctxt).buf;
    let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
    let mut switched_encoding: std::os::raw::c_int = 0 as std::os::raw::c_int;
    xmlInitParser();
    if (*cur).type_0 as std::os::raw::c_uint !=
           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           (*cur).type_0 as std::os::raw::c_uint !=
               XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        return -(1 as std::os::raw::c_int)
    }
    if !(*ctxt).encoding.is_null() {
        (*cur).encoding = (*ctxt).encoding as *mut xmlChar
    } else if !(*cur).encoding.is_null() {
        encoding = (*cur).encoding
    } else if (*cur).charset != XML_CHAR_ENCODING_UTF8 as std::os::raw::c_int {
        encoding =
            xmlGetCharEncodingName((*cur).charset as xmlCharEncoding) as
                *const xmlChar
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           (*ctxt).options & XML_SAVE_AS_XML as std::os::raw::c_int ==
               0 as std::os::raw::c_int &&
           (*ctxt).options & XML_SAVE_XHTML as std::os::raw::c_int == 0 as std::os::raw::c_int
           || (*ctxt).options & XML_SAVE_AS_HTML as std::os::raw::c_int != 0 {
        if !encoding.is_null() { htmlSetMetaEncoding(cur, encoding); }
        if encoding.is_null() { encoding = htmlGetMetaEncoding(cur) }
        if encoding.is_null() {
            encoding =
                b"HTML\x00" as *const u8 as *const std::os::raw::c_char as
                    *mut xmlChar
        }
        if !encoding.is_null() && oldctxtenc.is_null() &&
               (*buf).encoder.is_null() && (*buf).conv.is_null() {
            if xmlSaveSwitchEncoding(ctxt, encoding as *const std::os::raw::c_char) <
                   0 as std::os::raw::c_int {
                (*cur).encoding = oldenc;
                return -(1 as std::os::raw::c_int)
            }
        }
        if (*ctxt).options & XML_SAVE_FORMAT as std::os::raw::c_int != 0 {
            htmlDocContentDumpFormatOutput(buf, cur,
                                           encoding as *const std::os::raw::c_char,
                                           1 as std::os::raw::c_int);
        } else {
            htmlDocContentDumpFormatOutput(buf, cur,
                                           encoding as *const std::os::raw::c_char,
                                           0 as std::os::raw::c_int);
        }
        if !(*ctxt).encoding.is_null() { (*cur).encoding = oldenc }
        return 0 as std::os::raw::c_int
    } else {
        if (*cur).type_0 as std::os::raw::c_uint ==
               XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
               (*ctxt).options & XML_SAVE_AS_XML as std::os::raw::c_int != 0 ||
               (*ctxt).options & XML_SAVE_XHTML as std::os::raw::c_int != 0 {
            enc = xmlParseCharEncoding(encoding as *const std::os::raw::c_char);
            if !encoding.is_null() && oldctxtenc.is_null() &&
                   (*buf).encoder.is_null() && (*buf).conv.is_null() &&
                   (*ctxt).options & XML_SAVE_NO_DECL as std::os::raw::c_int ==
                       0 as std::os::raw::c_int {
                if enc as std::os::raw::c_int != XML_CHAR_ENCODING_UTF8 as std::os::raw::c_int
                       &&
                       enc as std::os::raw::c_int !=
                           XML_CHAR_ENCODING_NONE as std::os::raw::c_int &&
                       enc as std::os::raw::c_int !=
                           XML_CHAR_ENCODING_ASCII as std::os::raw::c_int {
                    /*
		 * we need to switch to this encoding but just for this
		 * document since we output the XMLDecl the conversion
		 * must be done to not generate not well formed documents.
		 */
                    if xmlSaveSwitchEncoding(ctxt,
                                             encoding as *const std::os::raw::c_char)
                           < 0 as std::os::raw::c_int {
                        (*cur).encoding = oldenc;
                        return -(1 as std::os::raw::c_int)
                    }
                    switched_encoding = 1 as std::os::raw::c_int
                }
                if (*ctxt).escape ==
                       Some(xmlEscapeEntities as
                                unsafe extern "C" fn(_: *mut std::os::raw::c_uchar,
                                                     _: *mut std::os::raw::c_int,
                                                     _: *const xmlChar,
                                                     _: *mut std::os::raw::c_int)
                                    -> std::os::raw::c_int) {
                    (*ctxt).escape = None
                }
                if (*ctxt).escapeAttr ==
                       Some(xmlEscapeEntities as
                                unsafe extern "C" fn(_: *mut std::os::raw::c_uchar,
                                                     _: *mut std::os::raw::c_int,
                                                     _: *const xmlChar,
                                                     _: *mut std::os::raw::c_int)
                                    -> std::os::raw::c_int) {
                    (*ctxt).escapeAttr = None
                }
            }
            /*
	 * Save the XML declaration
	 */
            if (*ctxt).options & XML_SAVE_NO_DECL as std::os::raw::c_int ==
                   0 as std::os::raw::c_int {
                xmlOutputBufferWrite(buf, 14 as std::os::raw::c_int,
                                     b"<?xml version=\x00" as *const u8 as
                                         *const std::os::raw::c_char);
                if !(*cur).version.is_null() {
                    xmlBufWriteQuotedString((*buf).buffer, (*cur).version);
                } else {
                    xmlOutputBufferWrite(buf, 5 as std::os::raw::c_int,
                                         b"\"1.0\"\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                }
                if !encoding.is_null() {
                    xmlOutputBufferWrite(buf, 10 as std::os::raw::c_int,
                                         b" encoding=\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    xmlBufWriteQuotedString((*buf).buffer,
                                            encoding as *mut xmlChar);
                }
                match (*cur).standalone {
                    0 => {
                        xmlOutputBufferWrite(buf, 16 as std::os::raw::c_int,
                                             b" standalone=\"no\"\x00" as
                                                 *const u8 as
                                                 *const std::os::raw::c_char);
                    }
                    1 => {
                        xmlOutputBufferWrite(buf, 17 as std::os::raw::c_int,
                                             b" standalone=\"yes\"\x00" as
                                                 *const u8 as
                                                 *const std::os::raw::c_char);
                    }
                    _ => { }
                }
                xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                     b"?>\n\x00" as *const u8 as
                                         *const std::os::raw::c_char);
            }
            if (*ctxt).options & XML_SAVE_XHTML as std::os::raw::c_int != 0 {
                is_xhtml = 1 as std::os::raw::c_int
            }
            if (*ctxt).options & XML_SAVE_NO_XHTML as std::os::raw::c_int ==
                   0 as std::os::raw::c_int {
                dtd = xmlGetIntSubset(cur as *const xmlDoc);
                if !dtd.is_null() {
                    is_xhtml = xmlIsXHTML((*dtd).SystemID, (*dtd).ExternalID);
                    if is_xhtml < 0 as std::os::raw::c_int {
                        is_xhtml = 0 as std::os::raw::c_int
                    }
                }
            }
            if !(*cur).children.is_null() {
                let mut child: xmlNodePtr = (*cur).children;
                while !child.is_null() {
                    (*ctxt).level = 0 as std::os::raw::c_int;
                    if is_xhtml != 0 {
                        xhtmlNodeDumpOutput(ctxt, child);
                    } else { xmlNodeDumpOutputInternal(ctxt, child); }
                    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                         b"\n\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    child = (*child).next
                }
            }
        }
    }
    /*
     * Restore the state of the saving context at the end of the document
     */
    if switched_encoding != 0 && oldctxtenc.is_null() {
        xmlSaveClearEncoding(ctxt);
        (*ctxt).escape = oldescape;
        (*ctxt).escapeAttr = oldescapeAttr
    }
    (*cur).encoding = oldenc;
    return 0 as std::os::raw::c_int;
}
/* ***********************************************************************
 *									*
 *		Functions specific to XHTML serialization		*
 *									*
 ************************************************************************/
/* *
 * xhtmlIsEmpty:
 * @node:  the node
 *
 * Check if a node is an empty xhtml node
 *
 * Returns 1 if the node is an empty node, 0 if not and -1 in case of error
 */
unsafe extern "C" fn xhtmlIsEmpty(mut node: xmlNodePtr) -> std::os::raw::c_int {
    if node.is_null() { return -(1 as std::os::raw::c_int) }
    if (*node).type_0 as std::os::raw::c_uint !=
           XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        return 0 as std::os::raw::c_int
    }
    if !(*node).ns.is_null() &&
           xmlStrEqual((*(*node).ns).href,
                       b"http://www.w3.org/1999/xhtml\x00" as *const u8 as
                           *const std::os::raw::c_char as *mut xmlChar) == 0 {
        return 0 as std::os::raw::c_int
    }
    if !(*node).children.is_null() { return 0 as std::os::raw::c_int }
    match *(*node).name.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int {
        97 => {
            if xmlStrEqual((*node).name,
                           b"area\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        98 => {
            if xmlStrEqual((*node).name,
                           b"br\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            if xmlStrEqual((*node).name,
                           b"base\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            if xmlStrEqual((*node).name,
                           b"basefont\x00" as *const u8 as *const std::os::raw::c_char
                               as *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        99 => {
            if xmlStrEqual((*node).name,
                           b"col\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        102 => {
            if xmlStrEqual((*node).name,
                           b"frame\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        104 => {
            if xmlStrEqual((*node).name,
                           b"hr\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        105 => {
            if xmlStrEqual((*node).name,
                           b"img\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            if xmlStrEqual((*node).name,
                           b"input\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            if xmlStrEqual((*node).name,
                           b"isindex\x00" as *const u8 as *const std::os::raw::c_char
                               as *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        108 => {
            if xmlStrEqual((*node).name,
                           b"link\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        109 => {
            if xmlStrEqual((*node).name,
                           b"meta\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        112 => {
            if xmlStrEqual((*node).name,
                           b"param\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        _ => { }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xhtmlAttrListDumpOutput:
 * @cur:  the first attribute pointer
 *
 * Dump a list of XML attributes
 */
unsafe extern "C" fn xhtmlAttrListDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                             mut cur: xmlAttrPtr) {
    let mut xml_lang: xmlAttrPtr = 0 as xmlAttrPtr;
    let mut lang: xmlAttrPtr = 0 as xmlAttrPtr;
    let mut name: xmlAttrPtr = 0 as xmlAttrPtr;
    let mut id: xmlAttrPtr = 0 as xmlAttrPtr;
    let mut parent: xmlNodePtr = 0 as *mut xmlNode;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    buf = (*ctxt).buf;
    parent = (*cur).parent;
    while !cur.is_null() {
        if (*cur).ns.is_null() &&
               xmlStrEqual((*cur).name,
                           b"id\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
            id = cur
        } else if (*cur).ns.is_null() &&
                      xmlStrEqual((*cur).name,
                                  b"name\x00" as *const u8 as
                                      *const std::os::raw::c_char as *mut xmlChar) !=
                          0 {
            name = cur
        } else if (*cur).ns.is_null() &&
                      xmlStrEqual((*cur).name,
                                  b"lang\x00" as *const u8 as
                                      *const std::os::raw::c_char as *mut xmlChar) !=
                          0 {
            lang = cur
        } else if !(*cur).ns.is_null() &&
                      xmlStrEqual((*cur).name,
                                  b"lang\x00" as *const u8 as
                                      *const std::os::raw::c_char as *mut xmlChar) !=
                          0 &&
                      xmlStrEqual((*(*cur).ns).prefix,
                                  b"xml\x00" as *const u8 as
                                      *const std::os::raw::c_char as *mut xmlChar) !=
                          0 {
            xml_lang = cur
        } else if (*cur).ns.is_null() &&
                      ((*cur).children.is_null() ||
                           (*(*cur).children).content.is_null() ||
                           *(*(*cur).children).content.offset(0 as std::os::raw::c_int
                                                                  as isize) as
                               std::os::raw::c_int == 0 as std::os::raw::c_int) &&
                      htmlIsBooleanAttr((*cur).name) != 0 {
            if !(*cur).children.is_null() { xmlFreeNode((*cur).children); }
            (*cur).children = xmlNewText((*cur).name);
            if !(*cur).children.is_null() {
                (*(*cur).children).parent = cur as xmlNodePtr
            }
        }
        xmlAttrDumpOutput(ctxt, cur);
        cur = (*cur).next
    }
    /*
     * C.8
     */
    if !name.is_null() && id.is_null() {
        if !parent.is_null() && !(*parent).name.is_null() &&
               (xmlStrEqual((*parent).name,
                            b"a\x00" as *const u8 as *const std::os::raw::c_char as
                                *mut xmlChar) != 0 ||
                    xmlStrEqual((*parent).name,
                                b"p\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut xmlChar) != 0 ||
                    xmlStrEqual((*parent).name,
                                b"div\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut xmlChar) != 0 ||
                    xmlStrEqual((*parent).name,
                                b"img\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut xmlChar) != 0 ||
                    xmlStrEqual((*parent).name,
                                b"map\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut xmlChar) != 0 ||
                    xmlStrEqual((*parent).name,
                                b"applet\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut xmlChar) != 0
                    ||
                    xmlStrEqual((*parent).name,
                                b"form\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut xmlChar) != 0
                    ||
                    xmlStrEqual((*parent).name,
                                b"frame\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut xmlChar) != 0
                    ||
                    xmlStrEqual((*parent).name,
                                b"iframe\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut xmlChar) != 0)
           {
            xmlOutputBufferWrite(buf, 5 as std::os::raw::c_int,
                                 b" id=\"\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlAttrSerializeContent(buf, name);
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\"\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
    }
    /*
     * C.7.
     */
    if !lang.is_null() && xml_lang.is_null() {
        xmlOutputBufferWrite(buf, 11 as std::os::raw::c_int,
                             b" xml:lang=\"\x00" as *const u8 as
                                 *const std::os::raw::c_char);
        xmlAttrSerializeContent(buf, lang);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b"\"\x00" as *const u8 as *const std::os::raw::c_char);
    } else if !xml_lang.is_null() && lang.is_null() {
        xmlOutputBufferWrite(buf, 7 as std::os::raw::c_int,
                             b" lang=\"\x00" as *const u8 as
                                 *const std::os::raw::c_char);
        xmlAttrSerializeContent(buf, xml_lang);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b"\"\x00" as *const u8 as *const std::os::raw::c_char);
    };
}
/* *
 * xhtmlNodeListDumpOutput:
 * @buf:  the XML buffer output
 * @doc:  the XHTML document
 * @cur:  the first node
 * @level: the imbrication level for indenting
 * @format: is formatting allowed
 * @encoding:  an optional encoding string
 *
 * Dump an XML node list, recursive behaviour, children are printed too.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
unsafe extern "C" fn xhtmlNodeListDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                             mut cur: xmlNodePtr) {
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    buf = (*ctxt).buf;
    while !cur.is_null() {
        if (*ctxt).format == 1 as std::os::raw::c_int && *__xmlIndentTreeOutput() != 0
               &&
               (*cur).type_0 as std::os::raw::c_uint ==
                   XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
            xmlOutputBufferWrite(buf,
                                 (*ctxt).indent_size *
                                     (if (*ctxt).level > (*ctxt).indent_nr {
                                          (*ctxt).indent_nr
                                      } else { (*ctxt).level }),
                                 (*ctxt).indent.as_mut_ptr());
        }
        xhtmlNodeDumpOutput(ctxt, cur);
        if (*ctxt).format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\n\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        cur = (*cur).next
    };
}
/* *
 * xhtmlNodeDumpOutput:
 * @buf:  the XML buffer output
 * @doc:  the XHTML document
 * @cur:  the current node
 * @level: the imbrication level for indenting
 * @format: is formatting allowed
 * @encoding:  an optional encoding string
 *
 * Dump an XHTML node, recursive behaviour, children are printed too.
 */
unsafe extern "C" fn xhtmlNodeDumpOutput(mut ctxt: xmlSaveCtxtPtr,
                                         mut cur: xmlNodePtr) {
    let mut format: std::os::raw::c_int = 0;
    let mut addmeta: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut tmp: xmlNodePtr = 0 as *mut xmlNode;
    let mut start: *mut xmlChar = 0 as *mut xmlChar;
    let mut end: *mut xmlChar = 0 as *mut xmlChar;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if cur.is_null() { return }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
           (*cur).type_0 as std::os::raw::c_uint ==
               XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlDocContentDumpOutput(ctxt, cur as xmlDocPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_XINCLUDE_START as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_XINCLUDE_END as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlNsDumpOutputCtxt(ctxt, cur as xmlNsPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DTD_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlDtdDumpOutput(ctxt, cur as xmlDtdPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_FRAG_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xhtmlNodeListDumpOutput(ctxt, (*cur).children);
        return
    }
    buf = (*ctxt).buf;
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ELEMENT_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpElementDecl((*buf).buffer, cur as xmlElementPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ATTRIBUTE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpAttributeDecl((*buf).buffer, cur as xmlAttributePtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ENTITY_DECL as std::os::raw::c_int as std::os::raw::c_uint {
        xmlBufDumpEntityDecl((*buf).buffer, cur as xmlEntityPtr);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_TEXT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            if (*cur).name == xmlStringText.as_ptr() ||
                   (*cur).name != xmlStringTextNoenc.as_ptr() {
                xmlOutputBufferWriteEscape(buf, (*cur).content,
                                           (*ctxt).escape);
            } else {
                /*
		 * Disable escaping, needed for XSLT
		 */
                xmlOutputBufferWriteString(buf,
                                           (*cur).content as
                                               *const std::os::raw::c_char);
            }
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_PI_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"<?\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).name as *const std::os::raw::c_char);
            if !(*cur).content.is_null() {
                xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                     b" \x00" as *const u8 as
                                         *const std::os::raw::c_char);
                xmlOutputBufferWriteString(buf,
                                           (*cur).content as
                                               *const std::os::raw::c_char);
            }
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"?>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        } else {
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"<?\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).name as *const std::os::raw::c_char);
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"?>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_COMMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if !(*cur).content.is_null() {
            xmlOutputBufferWrite(buf, 4 as std::os::raw::c_int,
                                 b"<!--\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            xmlOutputBufferWriteString(buf,
                                       (*cur).content as *const std::os::raw::c_char);
            xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                 b"-->\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ENTITY_REF_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b"&\x00" as *const u8 as *const std::os::raw::c_char);
        xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b";\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_CDATA_SECTION_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if (*cur).content.is_null() ||
               *(*cur).content as std::os::raw::c_int == '\u{0}' as i32 {
            xmlOutputBufferWrite(buf, 12 as std::os::raw::c_int,
                                 b"<![CDATA[]]>\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        } else {
            end = (*cur).content;
            start = end;
            while *end as std::os::raw::c_int != '\u{0}' as i32 {
                if *end as std::os::raw::c_int == ']' as i32 &&
                       *end.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                           == ']' as i32 &&
                       *end.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                           == '>' as i32 {
                    end = end.offset(2 as std::os::raw::c_int as isize);
                    xmlOutputBufferWrite(buf, 9 as std::os::raw::c_int,
                                         b"<![CDATA[\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    xmlOutputBufferWrite(buf,
                                         end.offset_from(start) as
                                             std::os::raw::c_long as std::os::raw::c_int,
                                         start as *const std::os::raw::c_char);
                    xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                         b"]]>\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    start = end
                }
                end = end.offset(1)
            }
            if start != end {
                xmlOutputBufferWrite(buf, 9 as std::os::raw::c_int,
                                     b"<![CDATA[\x00" as *const u8 as
                                         *const std::os::raw::c_char);
                xmlOutputBufferWriteString(buf, start as *const std::os::raw::c_char);
                xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                     b"]]>\x00" as *const u8 as
                                         *const std::os::raw::c_char);
            }
        }
        return
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ATTRIBUTE_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlAttrDumpOutput(ctxt, cur as xmlAttrPtr);
        return
    }
    format = (*ctxt).format;
    if format == 1 as std::os::raw::c_int {
        tmp = (*cur).children;
        while !tmp.is_null() {
            if (*tmp).type_0 as std::os::raw::c_uint ==
                   XML_TEXT_NODE as std::os::raw::c_int as std::os::raw::c_uint ||
                   (*tmp).type_0 as std::os::raw::c_uint ==
                       XML_ENTITY_REF_NODE as std::os::raw::c_int as std::os::raw::c_uint {
                format = 0 as std::os::raw::c_int;
                break ;
            } else { tmp = (*tmp).next }
        }
    }
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b"<\x00" as *const u8 as *const std::os::raw::c_char);
    if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
        xmlOutputBufferWriteString(buf,
                                   (*(*cur).ns).prefix as
                                       *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b":\x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
    if !(*cur).nsDef.is_null() {
        xmlNsListDumpOutputCtxt(ctxt, (*cur).nsDef);
    }
    if xmlStrEqual((*cur).name,
                   b"html\x00" as *const u8 as *const std::os::raw::c_char as
                       *mut xmlChar) != 0 && (*cur).ns.is_null() &&
           (*cur).nsDef.is_null() {
        /*
	 * 3.1.1. Strictly Conforming Documents A.3.1.1 3/
	 */
        xmlOutputBufferWriteString(buf,
                                   b" xmlns=\"http://www.w3.org/1999/xhtml\"\x00"
                                       as *const u8 as *const std::os::raw::c_char);
    }
    if !(*cur).properties.is_null() {
        xhtmlAttrListDumpOutput(ctxt, (*cur).properties);
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*cur).parent.is_null() &&
           (*(*cur).parent).parent == (*cur).doc as xmlNodePtr &&
           xmlStrEqual((*cur).name,
                       b"head\x00" as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 &&
           xmlStrEqual((*(*cur).parent).name,
                       b"html\x00" as *const u8 as *const std::os::raw::c_char as
                           *mut xmlChar) != 0 {
        tmp = (*cur).children;
        while !tmp.is_null() {
            if xmlStrEqual((*tmp).name,
                           b"meta\x00" as *const u8 as *const std::os::raw::c_char as
                               *mut xmlChar) != 0 {
                let mut httpequiv: *mut xmlChar = 0 as *mut xmlChar;
                httpequiv =
                    xmlGetProp(tmp as *const xmlNode,
                               b"http-equiv\x00" as *const u8 as
                                   *const std::os::raw::c_char as *mut xmlChar);
                if !httpequiv.is_null() {
                    if xmlStrcasecmp(httpequiv,
                                     b"Content-Type\x00" as *const u8 as
                                         *const std::os::raw::c_char as *mut xmlChar)
                           == 0 as std::os::raw::c_int {
                        xmlFree.expect("non-null function pointer")(httpequiv
                                                                        as
                                                                        *mut std::os::raw::c_void);
                        break ;
                    } else {
                        xmlFree.expect("non-null function pointer")(httpequiv
                                                                        as
                                                                        *mut std::os::raw::c_void);
                    }
                }
            }
            tmp = (*tmp).next
        }
        if tmp.is_null() { addmeta = 1 as std::os::raw::c_int }
    }
    if (*cur).type_0 as std::os::raw::c_uint ==
           XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           (*cur).children.is_null() {
        if ((*cur).ns.is_null() || (*(*cur).ns).prefix.is_null()) &&
               (xhtmlIsEmpty(cur) == 1 as std::os::raw::c_int &&
                    addmeta == 0 as std::os::raw::c_int) {
            /*
	     * C.2. Empty Elements
	     */
            xmlOutputBufferWrite(buf, 3 as std::os::raw::c_int,
                                 b" />\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        } else {
            if addmeta == 1 as std::os::raw::c_int {
                xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                     b">\x00" as *const u8 as
                                         *const std::os::raw::c_char);
                if (*ctxt).format == 1 as std::os::raw::c_int {
                    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                         b"\n\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                    if *__xmlIndentTreeOutput() != 0 {
                        xmlOutputBufferWrite(buf,
                                             (*ctxt).indent_size *
                                                 (if (*ctxt).level +
                                                         1 as std::os::raw::c_int >
                                                         (*ctxt).indent_nr {
                                                      (*ctxt).indent_nr
                                                  } else {
                                                      ((*ctxt).level) +
                                                          1 as std::os::raw::c_int
                                                  }),
                                             (*ctxt).indent.as_mut_ptr());
                    }
                }
                xmlOutputBufferWriteString(buf,
                                           b"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=\x00"
                                               as *const u8 as
                                               *const std::os::raw::c_char);
                if !(*ctxt).encoding.is_null() {
                    xmlOutputBufferWriteString(buf,
                                               (*ctxt).encoding as
                                                   *const std::os::raw::c_char);
                } else {
                    xmlOutputBufferWrite(buf, 5 as std::os::raw::c_int,
                                         b"UTF-8\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                }
                xmlOutputBufferWrite(buf, 4 as std::os::raw::c_int,
                                     b"\" />\x00" as *const u8 as
                                         *const std::os::raw::c_char);
                if (*ctxt).format == 1 as std::os::raw::c_int {
                    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                         b"\n\x00" as *const u8 as
                                             *const std::os::raw::c_char);
                }
            } else {
                xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                     b">\x00" as *const u8 as
                                         *const std::os::raw::c_char);
            }
            /*
	     * C.3. Element Minimization and Empty Element Content
	     */
            xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                                 b"</\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
                xmlOutputBufferWriteString(buf,
                                           (*(*cur).ns).prefix as
                                               *const std::os::raw::c_char);
                xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                     b":\x00" as *const u8 as
                                         *const std::os::raw::c_char);
            }
            xmlOutputBufferWriteString(buf,
                                       (*cur).name as *const std::os::raw::c_char);
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b">\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        return
    }
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b">\x00" as *const u8 as *const std::os::raw::c_char);
    if addmeta == 1 as std::os::raw::c_int {
        if (*ctxt).format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\n\x00" as *const u8 as
                                     *const std::os::raw::c_char);
            if *__xmlIndentTreeOutput() != 0 {
                xmlOutputBufferWrite(buf,
                                     (*ctxt).indent_size *
                                         (if (*ctxt).level + 1 as std::os::raw::c_int
                                                 > (*ctxt).indent_nr {
                                              (*ctxt).indent_nr
                                          } else {
                                              ((*ctxt).level) +
                                                  1 as std::os::raw::c_int
                                          }), (*ctxt).indent.as_mut_ptr());
            }
        }
        xmlOutputBufferWriteString(buf,
                                   b"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=\x00"
                                       as *const u8 as *const std::os::raw::c_char);
        if !(*ctxt).encoding.is_null() {
            xmlOutputBufferWriteString(buf,
                                       (*ctxt).encoding as
                                           *const std::os::raw::c_char);
        } else {
            xmlOutputBufferWrite(buf, 5 as std::os::raw::c_int,
                                 b"UTF-8\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        xmlOutputBufferWrite(buf, 4 as std::os::raw::c_int,
                             b"\" />\x00" as *const u8 as
                                 *const std::os::raw::c_char);
    }
    if (*cur).type_0 as std::os::raw::c_uint !=
           XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*cur).content.is_null() {
        xmlOutputBufferWriteEscape(buf, (*cur).content, (*ctxt).escape);
    }
    if !(*cur).children.is_null() {
        let mut indent: std::os::raw::c_int = (*ctxt).format;
        if format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                                 b"\n\x00" as *const u8 as
                                     *const std::os::raw::c_char);
        }
        if (*ctxt).level >= 0 as std::os::raw::c_int { (*ctxt).level += 1 }
        (*ctxt).format = format;
        xhtmlNodeListDumpOutput(ctxt, (*cur).children);
        if (*ctxt).level > 0 as std::os::raw::c_int { (*ctxt).level -= 1 }
        (*ctxt).format = indent;
        if *__xmlIndentTreeOutput() != 0 && format == 1 as std::os::raw::c_int {
            xmlOutputBufferWrite(buf,
                                 (*ctxt).indent_size *
                                     (if (*ctxt).level > (*ctxt).indent_nr {
                                          (*ctxt).indent_nr
                                      } else { (*ctxt).level }),
                                 (*ctxt).indent.as_mut_ptr());
        }
    }
    xmlOutputBufferWrite(buf, 2 as std::os::raw::c_int,
                         b"</\x00" as *const u8 as *const std::os::raw::c_char);
    if !(*cur).ns.is_null() && !(*(*cur).ns).prefix.is_null() {
        xmlOutputBufferWriteString(buf,
                                   (*(*cur).ns).prefix as
                                       *const std::os::raw::c_char);
        xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                             b":\x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlOutputBufferWriteString(buf, (*cur).name as *const std::os::raw::c_char);
    xmlOutputBufferWrite(buf, 1 as std::os::raw::c_int,
                         b">\x00" as *const u8 as *const std::os::raw::c_char);
}
/* ***********************************************************************
 *									*
 *			Public entry points				*
 *									*
 ************************************************************************/
/* *
 * xmlSaveToFd:
 * @fd:  a file descriptor number
 * @encoding:  the encoding name to use or NULL
 * @options:  a set of xmlSaveOptions
 *
 * Create a document saving context serializing to a file descriptor
 * with the encoding and the options given.
 *
 * Returns a new serialization context or NULL in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveToFd(mut fd: std::os::raw::c_int,
                                     mut encoding: *const std::os::raw::c_char,
                                     mut options: std::os::raw::c_int)
 -> xmlSaveCtxtPtr {
    let mut ret: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    ret = xmlNewSaveCtxt(encoding, options);
    if ret.is_null() { return 0 as xmlSaveCtxtPtr }
    (*ret).buf = xmlOutputBufferCreateFd(fd, (*ret).handler);
    if (*ret).buf.is_null() {
        xmlFreeSaveCtxt(ret);
        return 0 as xmlSaveCtxtPtr
    }
    return ret;
}
/* *
 * xmlSaveToFilename:
 * @filename:  a file name or an URL
 * @encoding:  the encoding name to use or NULL
 * @options:  a set of xmlSaveOptions
 *
 * Create a document saving context serializing to a filename or possibly
 * to an URL (but this is less reliable) with the encoding and the options
 * given.
 *
 * Returns a new serialization context or NULL in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveToFilename(mut filename: *const std::os::raw::c_char,
                                           mut encoding: *const std::os::raw::c_char,
                                           mut options: std::os::raw::c_int)
 -> xmlSaveCtxtPtr {
    let mut ret: xmlSaveCtxtPtr =
        0 as *mut xmlSaveCtxt; /* TODO handle compression option */
    let mut compression: std::os::raw::c_int = 0 as std::os::raw::c_int;
    ret = xmlNewSaveCtxt(encoding, options);
    if ret.is_null() { return 0 as xmlSaveCtxtPtr }
    (*ret).buf =
        xmlOutputBufferCreateFilename(filename, (*ret).handler, compression);
    if (*ret).buf.is_null() {
        xmlFreeSaveCtxt(ret);
        return 0 as xmlSaveCtxtPtr
    }
    return ret;
}
/* *
 * xmlSaveToBuffer:
 * @buffer:  a buffer
 * @encoding:  the encoding name to use or NULL
 * @options:  a set of xmlSaveOptions
 *
 * Create a document saving context serializing to a buffer
 * with the encoding and the options given
 *
 * Returns a new serialization context or NULL in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveToBuffer(mut buffer: xmlBufferPtr,
                                         mut encoding: *const std::os::raw::c_char,
                                         mut options: std::os::raw::c_int)
 -> xmlSaveCtxtPtr {
    let mut ret: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    let mut out_buff: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut handler: xmlCharEncodingHandlerPtr =
        0 as *mut xmlCharEncodingHandler;
    ret = xmlNewSaveCtxt(encoding, options);
    if ret.is_null() { return 0 as xmlSaveCtxtPtr }
    if !encoding.is_null() {
        handler = xmlFindCharEncodingHandler(encoding);
        if handler.is_null() {
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlSaveCtxtPtr
        }
    } else { handler = 0 as xmlCharEncodingHandlerPtr }
    out_buff = xmlOutputBufferCreateBuffer(buffer, handler);
    if out_buff.is_null() {
        xmlFree.expect("non-null function pointer")(ret as *mut std::os::raw::c_void);
        if !handler.is_null() { xmlCharEncCloseFunc(handler); }
        return 0 as xmlSaveCtxtPtr
    }
    (*ret).buf = out_buff;
    return ret;
}
/* *
 * xmlSaveToIO:
 * @iowrite:  an I/O write function
 * @ioclose:  an I/O close function
 * @ioctx:  an I/O handler
 * @encoding:  the encoding name to use or NULL
 * @options:  a set of xmlSaveOptions
 *
 * Create a document saving context serializing to a file descriptor
 * with the encoding and the options given
 *
 * Returns a new serialization context or NULL in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveToIO(mut iowrite: xmlOutputWriteCallback,
                                     mut ioclose: xmlOutputCloseCallback,
                                     mut ioctx: *mut std::os::raw::c_void,
                                     mut encoding: *const std::os::raw::c_char,
                                     mut options: std::os::raw::c_int)
 -> xmlSaveCtxtPtr {
    let mut ret: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    ret = xmlNewSaveCtxt(encoding, options);
    if ret.is_null() { return 0 as xmlSaveCtxtPtr }
    (*ret).buf =
        xmlOutputBufferCreateIO(iowrite, ioclose, ioctx, (*ret).handler);
    if (*ret).buf.is_null() {
        xmlFreeSaveCtxt(ret);
        return 0 as xmlSaveCtxtPtr
    }
    return ret;
}
/* *
 * xmlSaveDoc:
 * @ctxt:  a document saving context
 * @doc:  a document
 *
 * Save a full document to a saving context
 * TODO: The function is not fully implemented yet as it does not return the
 * byte count but 0 instead
 *
 * Returns the number of byte written or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveDoc(mut ctxt: xmlSaveCtxtPtr,
                                    mut doc: xmlDocPtr) -> std::os::raw::c_long {
    let mut ret: std::os::raw::c_long = 0 as std::os::raw::c_int as std::os::raw::c_long;
    if ctxt.is_null() || doc.is_null() {
        return -(1 as std::os::raw::c_int) as std::os::raw::c_long
    }
    if xmlDocContentDumpOutput(ctxt, doc) < 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int) as std::os::raw::c_long
    }
    return ret;
}
/* *
 * xmlSaveTree:
 * @ctxt:  a document saving context
 * @node:  the top node of the subtree to save
 *
 * Save a subtree starting at the node parameter to a saving context
 * TODO: The function is not fully implemented yet as it does not return the
 * byte count but 0 instead
 *
 * Returns the number of byte written or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveTree(mut ctxt: xmlSaveCtxtPtr,
                                     mut node: xmlNodePtr) -> std::os::raw::c_long {
    let mut ret: std::os::raw::c_long = 0 as std::os::raw::c_int as std::os::raw::c_long;
    if ctxt.is_null() || node.is_null() {
        return -(1 as std::os::raw::c_int) as std::os::raw::c_long
    }
    xmlNodeDumpOutputInternal(ctxt, node);
    return ret;
}
/* *
 * xmlSaveFlush:
 * @ctxt:  a document saving context
 *
 * Flush a document saving context, i.e. make sure that all bytes have
 * been output.
 *
 * Returns the number of byte written or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFlush(mut ctxt: xmlSaveCtxtPtr)
 -> std::os::raw::c_int {
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    if (*ctxt).buf.is_null() { return -(1 as std::os::raw::c_int) }
    return xmlOutputBufferFlush((*ctxt).buf);
}
/* *
 * xmlSaveClose:
 * @ctxt:  a document saving context
 *
 * Close a document saving context, i.e. make sure that all bytes have
 * been output and free the associated data.
 *
 * Returns the number of byte written or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveClose(mut ctxt: xmlSaveCtxtPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0;
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    ret = xmlSaveFlush(ctxt);
    xmlFreeSaveCtxt(ctxt);
    return ret;
}
/* *
 * xmlSaveSetEscape:
 * @ctxt:  a document saving context
 * @escape:  the escaping function
 *
 * Set a custom escaping function to be used for text in element content
 *
 * Returns 0 if successful or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveSetEscape(mut ctxt: xmlSaveCtxtPtr,
                                          mut escape:
                                              xmlCharEncodingOutputFunc)
 -> std::os::raw::c_int {
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    (*ctxt).escape = escape;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlSaveSetAttrEscape:
 * @ctxt:  a document saving context
 * @escape:  the escaping function
 *
 * Set a custom escaping function to be used for text in attribute content
 *
 * Returns 0 if successful or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveSetAttrEscape(mut ctxt: xmlSaveCtxtPtr,
                                              mut escape:
                                                  xmlCharEncodingOutputFunc)
 -> std::os::raw::c_int {
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    (*ctxt).escapeAttr = escape;
    return 0 as std::os::raw::c_int;
}
/*
 * Summary: Internal Interfaces for saving in libxml2
 * Description: this module describes a few interfaces which were
 *              addded along with the API changes in 2.9.0
 *              those are private routines at this point
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* ***********************************************************************
 *									*
 *		Public entry points based on buffers			*
 *									*
 ************************************************************************/
/* *
 * xmlBufAttrSerializeTxtContent:
 * @buf:  and xmlBufPtr output
 * @doc:  the document
 * @attr: the attribute node
 * @string: the text content
 *
 * Serialize text attribute values to an xmlBufPtr
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufAttrSerializeTxtContent(mut buf: xmlBufPtr,
                                                       mut doc: xmlDocPtr,
                                                       mut attr: xmlAttrPtr,
                                                       mut string:
                                                           *const xmlChar) {
    let mut base: *mut xmlChar = 0 as *mut xmlChar;
    let mut cur: *mut xmlChar = 0 as *mut xmlChar;
    if string.is_null() { return }
    cur = string as *mut xmlChar;
    base = cur;
    while *cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
        if *cur as std::os::raw::c_int == '\n' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&#10;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 5 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '\r' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&#13;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 5 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '\t' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&#9;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 4 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '\"' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&quot;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 6 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '<' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&lt;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 4 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '>' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&gt;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 4 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int == '&' as i32 {
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            xmlBufAdd(buf,
                      b"&amp;\x00" as *const u8 as *const std::os::raw::c_char as
                          *mut xmlChar, 5 as std::os::raw::c_int);
            cur = cur.offset(1);
            base = cur
        } else if *cur as std::os::raw::c_int >= 0x80 as std::os::raw::c_int &&
                      *cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int !=
                          0 as std::os::raw::c_int &&
                      (doc.is_null() || (*doc).encoding.is_null()) {
            /*
             * We assume we have UTF-8 content.
             */
            let mut tmp: [std::os::raw::c_uchar; 12] = [0; 12];
            let mut val: std::os::raw::c_int = 0 as std::os::raw::c_int;
            let mut l: std::os::raw::c_int = 1 as std::os::raw::c_int;
            if base != cur {
                xmlBufAdd(buf, base,
                          cur.offset_from(base) as std::os::raw::c_long as
                              std::os::raw::c_int);
            }
            if (*cur as std::os::raw::c_int) < 0xc0 as std::os::raw::c_int {
                xmlSaveErr(XML_SAVE_NOT_UTF8 as std::os::raw::c_int,
                           attr as xmlNodePtr, 0 as *const std::os::raw::c_char);
                xmlSerializeHexCharRef(tmp.as_mut_ptr(), *cur as std::os::raw::c_int);
                xmlBufAdd(buf, tmp.as_mut_ptr() as *mut xmlChar,
                          -(1 as std::os::raw::c_int));
                cur = cur.offset(1);
                base = cur
            } else {
                if (*cur as std::os::raw::c_int) < 0xe0 as std::os::raw::c_int {
                    val =
                        *cur.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x1f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    l = 2 as std::os::raw::c_int
                } else if (*cur as std::os::raw::c_int) < 0xf0 as std::os::raw::c_int &&
                              *cur.offset(2 as std::os::raw::c_int as isize) as
                                  std::os::raw::c_int != 0 as std::os::raw::c_int {
                    val =
                        *cur.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0xf as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    l = 3 as std::os::raw::c_int
                } else if (*cur as std::os::raw::c_int) < 0xf8 as std::os::raw::c_int &&
                              *cur.offset(2 as std::os::raw::c_int as isize) as
                                  std::os::raw::c_int != 0 as std::os::raw::c_int &&
                              *cur.offset(3 as std::os::raw::c_int as isize) as
                                  std::os::raw::c_int != 0 as std::os::raw::c_int {
                    val =
                        *cur.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x7 as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(2 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    val <<= 6 as std::os::raw::c_int;
                    val |=
                        *cur.offset(3 as std::os::raw::c_int as isize) as std::os::raw::c_int
                            & 0x3f as std::os::raw::c_int;
                    l = 4 as std::os::raw::c_int
                }
                if l == 1 as std::os::raw::c_int ||
                       (if val < 0x100 as std::os::raw::c_int {
                            (0x9 as std::os::raw::c_int <= val &&
                                 val <= 0xa as std::os::raw::c_int ||
                                 val == 0xd as std::os::raw::c_int ||
                                 0x20 as std::os::raw::c_int <= val) as std::os::raw::c_int
                        } else {
                            (0x100 as std::os::raw::c_int <= val &&
                                 val <= 0xd7ff as std::os::raw::c_int ||
                                 0xe000 as std::os::raw::c_int <= val &&
                                     val <= 0xfffd as std::os::raw::c_int ||
                                 0x10000 as std::os::raw::c_int <= val &&
                                     val <= 0x10ffff as std::os::raw::c_int) as
                                std::os::raw::c_int
                        }) == 0 {
                    xmlSaveErr(XML_SAVE_CHAR_INVALID as std::os::raw::c_int,
                               attr as xmlNodePtr, 0 as *const std::os::raw::c_char);
                    xmlSerializeHexCharRef(tmp.as_mut_ptr(),
                                           *cur as std::os::raw::c_int);
                    xmlBufAdd(buf, tmp.as_mut_ptr() as *mut xmlChar,
                              -(1 as std::os::raw::c_int));
                    cur = cur.offset(1);
                    base = cur
                } else {
                    /*
             * We could do multiple things here. Just save
             * as a char ref
             */
                    xmlSerializeHexCharRef(tmp.as_mut_ptr(), val);
                    xmlBufAdd(buf, tmp.as_mut_ptr() as *mut xmlChar,
                              -(1 as std::os::raw::c_int));
                    cur = cur.offset(l as isize);
                    base = cur
                }
            }
        } else { cur = cur.offset(1) }
    }
    if base != cur {
        xmlBufAdd(buf, base,
                  cur.offset_from(base) as std::os::raw::c_long as
                      std::os::raw::c_int);
    };
}
/* *
 * xmlAttrSerializeTxtContent:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @attr: the attribute node
 * @string: the text content
 *
 * Serialize text attribute values to an xml simple buffer
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAttrSerializeTxtContent(mut buf: xmlBufferPtr,
                                                    mut doc: xmlDocPtr,
                                                    mut attr: xmlAttrPtr,
                                                    mut string:
                                                        *const xmlChar) {
    let mut buffer: xmlBufPtr = 0 as *mut xmlBuf;
    if buf.is_null() || string.is_null() { return }
    buffer = xmlBufFromBuffer(buf);
    if buffer.is_null() { return }
    xmlBufAttrSerializeTxtContent(buffer, doc, attr, string);
    xmlBufBackToBuffer(buffer);
}
/* *
 * xmlNodeDump:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @cur:  the current node
 * @level: the imbrication level for indenting
 * @format: is formatting allowed
 *
 * Dump an XML node, recursive behaviour,children are printed too.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 * Since this is using xmlBuffer structures it is limited to 2GB and somehow
 * deprecated, use xmlBufNodeDump() instead.
 *
 * Returns the number of bytes written to the buffer or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlNodeDump(mut buf: xmlBufferPtr,
                                     mut doc: xmlDocPtr, mut cur: xmlNodePtr,
                                     mut level: std::os::raw::c_int,
                                     mut format: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut buffer: xmlBufPtr = 0 as *mut xmlBuf;
    let mut ret: std::os::raw::c_int = 0;
    if buf.is_null() || cur.is_null() { return -(1 as std::os::raw::c_int) }
    buffer = xmlBufFromBuffer(buf);
    if buffer.is_null() { return -(1 as std::os::raw::c_int) }
    ret = xmlBufNodeDump(buffer, doc, cur, level, format) as std::os::raw::c_int;
    xmlBufBackToBuffer(buffer);
    if ret > 2147483647 as std::os::raw::c_int { return -(1 as std::os::raw::c_int) }
    return ret;
}
/* *
 * xmlBufNodeDump:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @cur:  the current node
 * @level: the imbrication level for indenting
 * @format: is formatting allowed
 *
 * Dump an XML node, recursive behaviour,children are printed too.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 *
 * Returns the number of bytes written to the buffer, in case of error 0
 *     is returned or @buf stores the error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlBufNodeDump(mut buf: xmlBufPtr,
                                        mut doc: xmlDocPtr,
                                        mut cur: xmlNodePtr,
                                        mut level: std::os::raw::c_int,
                                        mut format: std::os::raw::c_int) -> size_t {
    let mut use_0: size_t = 0;
    let mut ret: std::os::raw::c_int = 0;
    let mut outbuf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut oldalloc: std::os::raw::c_int = 0;
    xmlInitParser();
    if cur.is_null() { return -(1 as std::os::raw::c_int) as size_t }
    if buf.is_null() { return -(1 as std::os::raw::c_int) as size_t }
    outbuf =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlOutputBuffer>()
                                                          as std::os::raw::c_ulong) as
            xmlOutputBufferPtr;
    if outbuf.is_null() {
        xmlSaveErrMemory(b"creating buffer\x00" as *const u8 as
                             *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int) as size_t
    }
    memset(outbuf as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlOutputBuffer>() as std::os::raw::c_ulong);
    (*outbuf).buffer = buf;
    (*outbuf).encoder = 0 as xmlCharEncodingHandlerPtr;
    (*outbuf).writecallback = None;
    (*outbuf).closecallback = None;
    (*outbuf).context = 0 as *mut std::os::raw::c_void;
    (*outbuf).written = 0 as std::os::raw::c_int;
    use_0 = xmlBufUse(buf);
    oldalloc = xmlBufGetAllocationScheme(buf);
    xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_DOUBLEIT);
    xmlNodeDumpOutput(outbuf, doc, cur, level, format,
                      0 as *const std::os::raw::c_char);
    xmlBufSetAllocationScheme(buf, oldalloc as xmlBufferAllocationScheme);
    xmlFree.expect("non-null function pointer")(outbuf as *mut std::os::raw::c_void);
    ret = xmlBufUse(buf).wrapping_sub(use_0) as std::os::raw::c_int;
    return ret as size_t;
}
/* *
 * xmlElemDump:
 * @f:  the FILE * for the output
 * @doc:  the document
 * @cur:  the current node
 *
 * Dump an XML/HTML node, recursive behaviour, children are printed too.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlElemDump(mut f: *mut FILE, mut doc: xmlDocPtr,
                                     mut cur: xmlNodePtr) {
    let mut outbuf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    xmlInitParser();
    if cur.is_null() { return }
    outbuf = xmlOutputBufferCreateFile(f, 0 as xmlCharEncodingHandlerPtr);
    if outbuf.is_null() { return }
    if !doc.is_null() &&
           (*doc).type_0 as std::os::raw::c_uint ==
               XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        htmlNodeDumpOutput(outbuf, doc, cur, 0 as *const std::os::raw::c_char);
        /* LIBXML_HTML_ENABLED */
    } else {
        xmlNodeDumpOutput(outbuf, doc, cur, 0 as std::os::raw::c_int,
                          1 as std::os::raw::c_int, 0 as *const std::os::raw::c_char);
    }
    xmlOutputBufferClose(outbuf);
}
/* ***********************************************************************
 *									*
 *		Saving functions front-ends				*
 *									*
 ************************************************************************/
/* *
 * xmlNodeDumpOutput:
 * @buf:  the XML buffer output
 * @doc:  the document
 * @cur:  the current node
 * @level: the imbrication level for indenting
 * @format: is formatting allowed
 * @encoding:  an optional encoding string
 *
 * Dump an XML node, recursive behaviour, children are printed too.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
#[no_mangle]
pub unsafe extern "C" fn xmlNodeDumpOutput(mut buf: xmlOutputBufferPtr,
                                           mut doc: xmlDocPtr,
                                           mut cur: xmlNodePtr,
                                           mut level: std::os::raw::c_int,
                                           mut format: std::os::raw::c_int,
                                           mut encoding:
                                               *const std::os::raw::c_char) {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut dtd: xmlDtdPtr = 0 as *mut xmlDtd;
    let mut is_xhtml: std::os::raw::c_int = 0 as std::os::raw::c_int;
    xmlInitParser();
    if buf.is_null() || cur.is_null() { return }
    if encoding.is_null() {
        encoding = b"UTF-8\x00" as *const u8 as *const std::os::raw::c_char
    }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = doc;
    ctxt.buf = buf;
    ctxt.level = level;
    ctxt.format =
        if format != 0 { 1 as std::os::raw::c_int } else { 0 as std::os::raw::c_int };
    ctxt.encoding = encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    dtd = xmlGetIntSubset(doc as *const xmlDoc);
    if !dtd.is_null() {
        is_xhtml = xmlIsXHTML((*dtd).SystemID, (*dtd).ExternalID);
        if is_xhtml < 0 as std::os::raw::c_int { is_xhtml = 0 as std::os::raw::c_int }
    }
    if is_xhtml != 0 {
        xhtmlNodeDumpOutput(&mut ctxt, cur);
    } else { xmlNodeDumpOutputInternal(&mut ctxt, cur); };
}
/* *
 * xmlDocDumpFormatMemoryEnc:
 * @out_doc:  Document to generate XML text from
 * @doc_txt_ptr:  Memory pointer for allocated XML text
 * @doc_txt_len:  Length of the generated XML text
 * @txt_encoding:  Character encoding to use when generating XML text
 * @format:  should formatting spaces been added
 *
 * Dump the current DOM tree into memory using the character encoding specified
 * by the caller.  Note it is up to the caller of this function to free the
 * allocated memory with xmlFree().
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocDumpFormatMemoryEnc(mut out_doc: xmlDocPtr,
                                                   mut doc_txt_ptr:
                                                       *mut *mut xmlChar,
                                                   mut doc_txt_len:
                                                       *mut std::os::raw::c_int,
                                                   mut txt_encoding:
                                                       *const std::os::raw::c_char,
                                                   mut format: std::os::raw::c_int) {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut dummy: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut out_buff: xmlOutputBufferPtr = 0 as xmlOutputBufferPtr;
    let mut conv_hdlr: xmlCharEncodingHandlerPtr =
        0 as xmlCharEncodingHandlerPtr;
    if doc_txt_len.is_null() {
        doc_txt_len = &mut dummy
        /*  Continue, caller just won't get length */
    }
    if doc_txt_ptr.is_null() { *doc_txt_len = 0 as std::os::raw::c_int; return }
    *doc_txt_ptr = 0 as *mut xmlChar;
    *doc_txt_len = 0 as std::os::raw::c_int;
    if out_doc.is_null() {
        /*  No document, no output  */
        return
    }
    /*
     *  Validate the encoding value, if provided.
     *  This logic is copied from xmlSaveFileEnc.
     */
    if txt_encoding.is_null() {
        txt_encoding = (*out_doc).encoding as *const std::os::raw::c_char
    }
    if !txt_encoding.is_null() {
        conv_hdlr = xmlFindCharEncodingHandler(txt_encoding);
        if conv_hdlr.is_null() {
            xmlSaveErr(XML_SAVE_UNKNOWN_ENCODING as std::os::raw::c_int,
                       out_doc as xmlNodePtr, txt_encoding);
            return
        }
    }
    out_buff = xmlAllocOutputBuffer(conv_hdlr);
    if out_buff.is_null() {
        xmlSaveErrMemory(b"creating buffer\x00" as *const u8 as
                             *const std::os::raw::c_char);
        return
    }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = out_doc;
    ctxt.buf = out_buff;
    ctxt.level = 0 as std::os::raw::c_int;
    ctxt.format =
        if format != 0 { 1 as std::os::raw::c_int } else { 0 as std::os::raw::c_int };
    ctxt.encoding = txt_encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    xmlDocContentDumpOutput(&mut ctxt, out_doc);
    xmlOutputBufferFlush(out_buff);
    if !(*out_buff).conv.is_null() {
        *doc_txt_len = xmlBufUse((*out_buff).conv) as std::os::raw::c_int;
        *doc_txt_ptr =
            xmlStrndup(xmlBufContent((*out_buff).conv as *const xmlBuf),
                       *doc_txt_len)
    } else {
        *doc_txt_len = xmlBufUse((*out_buff).buffer) as std::os::raw::c_int;
        *doc_txt_ptr =
            xmlStrndup(xmlBufContent((*out_buff).buffer as *const xmlBuf),
                       *doc_txt_len)
    }
    xmlOutputBufferClose(out_buff);
    if (*doc_txt_ptr).is_null() && *doc_txt_len > 0 as std::os::raw::c_int {
        *doc_txt_len = 0 as std::os::raw::c_int;
        xmlSaveErrMemory(b"creating output\x00" as *const u8 as
                             *const std::os::raw::c_char);
    };
}
/* *
 * xmlDocDumpMemory:
 * @cur:  the document
 * @mem:  OUT: the memory pointer
 * @size:  OUT: the memory length
 *
 * Dump an XML document in memory and return the #xmlChar * and it's size
 * in bytes. It's up to the caller to free the memory with xmlFree().
 * The resulting byte array is zero terminated, though the last 0 is not
 * included in the returned size.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocDumpMemory(mut cur: xmlDocPtr,
                                          mut mem: *mut *mut xmlChar,
                                          mut size: *mut std::os::raw::c_int) {
    xmlDocDumpFormatMemoryEnc(cur, mem, size, 0 as *const std::os::raw::c_char,
                              0 as std::os::raw::c_int);
}
/* *
 * xmlDocDumpFormatMemory:
 * @cur:  the document
 * @mem:  OUT: the memory pointer
 * @size:  OUT: the memory length
 * @format:  should formatting spaces been added
 *
 *
 * Dump an XML document in memory and return the #xmlChar * and it's size.
 * It's up to the caller to free the memory with xmlFree().
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocDumpFormatMemory(mut cur: xmlDocPtr,
                                                mut mem: *mut *mut xmlChar,
                                                mut size: *mut std::os::raw::c_int,
                                                mut format: std::os::raw::c_int) {
    xmlDocDumpFormatMemoryEnc(cur, mem, size, 0 as *const std::os::raw::c_char,
                              format);
}
/* *
 * xmlDocDumpMemoryEnc:
 * @out_doc:  Document to generate XML text from
 * @doc_txt_ptr:  Memory pointer for allocated XML text
 * @doc_txt_len:  Length of the generated XML text
 * @txt_encoding:  Character encoding to use when generating XML text
 *
 * Dump the current DOM tree into memory using the character encoding specified
 * by the caller.  Note it is up to the caller of this function to free the
 * allocated memory with xmlFree().
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocDumpMemoryEnc(mut out_doc: xmlDocPtr,
                                             mut doc_txt_ptr:
                                                 *mut *mut xmlChar,
                                             mut doc_txt_len:
                                                 *mut std::os::raw::c_int,
                                             mut txt_encoding:
                                                 *const std::os::raw::c_char) {
    xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding,
                              0 as std::os::raw::c_int);
}
/* *
 * xmlDocFormatDump:
 * @f:  the FILE*
 * @cur:  the document
 * @format: should formatting spaces been added
 *
 * Dump an XML document to an open FILE.
 *
 * returns: the number of bytes written or -1 in case of failure.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocFormatDump(mut f: *mut FILE,
                                          mut cur: xmlDocPtr,
                                          mut format: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut encoding: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut handler: xmlCharEncodingHandlerPtr =
        0 as xmlCharEncodingHandlerPtr;
    let mut ret: std::os::raw::c_int = 0;
    if cur.is_null() { return -(1 as std::os::raw::c_int) }
    encoding = (*cur).encoding as *const std::os::raw::c_char;
    if !encoding.is_null() {
        handler = xmlFindCharEncodingHandler(encoding);
        if handler.is_null() {
            xmlFree.expect("non-null function pointer")((*cur).encoding as
                                                            *mut std::os::raw::c_char
                                                            as
                                                            *mut std::os::raw::c_void);
            (*cur).encoding = 0 as *const xmlChar;
            encoding = 0 as *const std::os::raw::c_char
        }
    }
    buf = xmlOutputBufferCreateFile(f, handler);
    if buf.is_null() { return -(1 as std::os::raw::c_int) }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = cur;
    ctxt.buf = buf;
    ctxt.level = 0 as std::os::raw::c_int;
    ctxt.format =
        if format != 0 { 1 as std::os::raw::c_int } else { 0 as std::os::raw::c_int };
    ctxt.encoding = encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    xmlDocContentDumpOutput(&mut ctxt, cur);
    ret = xmlOutputBufferClose(buf);
    return ret;
}
/* *
 * xmlDocDump:
 * @f:  the FILE*
 * @cur:  the document
 *
 * Dump an XML document to an open FILE.
 *
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlDocDump(mut f: *mut FILE, mut cur: xmlDocPtr)
 -> std::os::raw::c_int {
    return xmlDocFormatDump(f, cur, 0 as std::os::raw::c_int);
}
/* *
 * xmlSaveFileTo:
 * @buf:  an output I/O buffer
 * @cur:  the document
 * @encoding:  the encoding if any assuming the I/O layer handles the trancoding
 *
 * Dump an XML document to an I/O buffer.
 * Warning ! This call xmlOutputBufferClose() on buf which is not available
 * after this call.
 *
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFileTo(mut buf: xmlOutputBufferPtr,
                                       mut cur: xmlDocPtr,
                                       mut encoding: *const std::os::raw::c_char)
 -> std::os::raw::c_int {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut ret: std::os::raw::c_int = 0;
    if buf.is_null() { return -(1 as std::os::raw::c_int) }
    if cur.is_null() { xmlOutputBufferClose(buf); return -(1 as std::os::raw::c_int) }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = cur;
    ctxt.buf = buf;
    ctxt.level = 0 as std::os::raw::c_int;
    ctxt.format = 0 as std::os::raw::c_int;
    ctxt.encoding = encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    xmlDocContentDumpOutput(&mut ctxt, cur);
    ret = xmlOutputBufferClose(buf);
    return ret;
}
/* *
 * xmlSaveFormatFileTo:
 * @buf:  an output I/O buffer
 * @cur:  the document
 * @encoding:  the encoding if any assuming the I/O layer handles the trancoding
 * @format: should formatting spaces been added
 *
 * Dump an XML document to an I/O buffer.
 * Warning ! This call xmlOutputBufferClose() on buf which is not available
 * after this call.
 *
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFormatFileTo(mut buf: xmlOutputBufferPtr,
                                             mut cur: xmlDocPtr,
                                             mut encoding:
                                                 *const std::os::raw::c_char,
                                             mut format: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut ret: std::os::raw::c_int = 0;
    if buf.is_null() { return -(1 as std::os::raw::c_int) }
    if cur.is_null() ||
           (*cur).type_0 as std::os::raw::c_uint !=
               XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
               (*cur).type_0 as std::os::raw::c_uint !=
                   XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        xmlOutputBufferClose(buf);
        return -(1 as std::os::raw::c_int)
    }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = cur;
    ctxt.buf = buf;
    ctxt.level = 0 as std::os::raw::c_int;
    ctxt.format =
        if format != 0 { 1 as std::os::raw::c_int } else { 0 as std::os::raw::c_int };
    ctxt.encoding = encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    xmlDocContentDumpOutput(&mut ctxt, cur);
    ret = xmlOutputBufferClose(buf);
    return ret;
}
/* *
 * xmlSaveFormatFileEnc:
 * @filename:  the filename or URL to output
 * @cur:  the document being saved
 * @encoding:  the name of the encoding to use or NULL.
 * @format:  should formatting spaces be added.
 *
 * Dump an XML document to a file or an URL.
 *
 * Returns the number of bytes written or -1 in case of error.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFormatFileEnc(mut filename:
                                                  *const std::os::raw::c_char,
                                              mut cur: xmlDocPtr,
                                              mut encoding:
                                                  *const std::os::raw::c_char,
                                              mut format: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut ctxt: xmlSaveCtxt =
        xmlSaveCtxt{_private: 0 as *mut std::os::raw::c_void,
                    type_0: 0,
                    fd: 0,
                    filename: 0 as *const xmlChar,
                    encoding: 0 as *const xmlChar,
                    handler: 0 as *mut xmlCharEncodingHandler,
                    buf: 0 as *mut xmlOutputBuffer,
                    doc: 0 as *mut xmlDoc,
                    options: 0,
                    level: 0,
                    format: 0,
                    indent: [0; 61],
                    indent_nr: 0,
                    indent_size: 0,
                    escape: None,
                    escapeAttr: None,};
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut handler: xmlCharEncodingHandlerPtr =
        0 as xmlCharEncodingHandlerPtr;
    let mut ret: std::os::raw::c_int = 0;
    if cur.is_null() { return -(1 as std::os::raw::c_int) }
    if encoding.is_null() {
        encoding = (*cur).encoding as *const std::os::raw::c_char
    }
    if !encoding.is_null() {
        handler = xmlFindCharEncodingHandler(encoding);
        if handler.is_null() { return -(1 as std::os::raw::c_int) }
    }
    if (*cur).compression < 0 as std::os::raw::c_int {
        (*cur).compression = xmlGetCompressMode()
    }
    /*
     * save the content to a temp buffer.
     */
    buf =
        xmlOutputBufferCreateFilename(filename, handler, (*cur).compression);
    if buf.is_null() { return -(1 as std::os::raw::c_int) }
    memset(&mut ctxt as *mut xmlSaveCtxt as *mut std::os::raw::c_void,
           0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlSaveCtxt>() as std::os::raw::c_ulong);
    ctxt.doc = cur;
    ctxt.buf = buf;
    ctxt.level = 0 as std::os::raw::c_int;
    ctxt.format =
        if format != 0 { 1 as std::os::raw::c_int } else { 0 as std::os::raw::c_int };
    ctxt.encoding = encoding as *const xmlChar;
    xmlSaveCtxtInit(&mut ctxt);
    ctxt.options |= XML_SAVE_AS_XML as std::os::raw::c_int;
    xmlDocContentDumpOutput(&mut ctxt, cur);
    ret = xmlOutputBufferClose(buf);
    return ret;
}
/* *
 * xmlSaveFileEnc:
 * @filename:  the filename (or URL)
 * @cur:  the document
 * @encoding:  the name of an encoding (or NULL)
 *
 * Dump an XML document, converting it to the given encoding
 *
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFileEnc(mut filename: *const std::os::raw::c_char,
                                        mut cur: xmlDocPtr,
                                        mut encoding: *const std::os::raw::c_char)
 -> std::os::raw::c_int {
    return xmlSaveFormatFileEnc(filename, cur, encoding, 0 as std::os::raw::c_int);
}
/* *
 * xmlSaveFormatFile:
 * @filename:  the filename (or URL)
 * @cur:  the document
 * @format:  should formatting spaces been added
 *
 * Dump an XML document to a file. Will use compression if
 * compiled in and enabled. If @filename is "-" the stdout file is
 * used. If @format is set then the document will be indented on output.
 * Note that @format = 1 provide node indenting only if xmlIndentTreeOutput = 1
 * or xmlKeepBlanksDefault(0) was called
 *
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFormatFile(mut filename: *const std::os::raw::c_char,
                                           mut cur: xmlDocPtr,
                                           mut format: std::os::raw::c_int)
 -> std::os::raw::c_int {
    return xmlSaveFormatFileEnc(filename, cur, 0 as *const std::os::raw::c_char,
                                format);
}
/* LIBXML_OUTPUT_ENABLED */
/*
 * Namespace handling.
 */
/*
 * Saving.
 */
/* *
 * xmlSaveFile:
 * @filename:  the filename (or URL)
 * @cur:  the document
 *
 * Dump an XML document to a file. Will use compression if
 * compiled in and enabled. If @filename is "-" the stdout file is
 * used.
 * returns: the number of bytes written or -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlSaveFile(mut filename: *const std::os::raw::c_char,
                                     mut cur: xmlDocPtr) -> std::os::raw::c_int {
    return xmlSaveFormatFileEnc(filename, cur, 0 as *const std::os::raw::c_char,
                                0 as std::os::raw::c_int);
}
/* __INCLUDE_ELFGCCHACK */
/* LIBXML_OUTPUT_ENABLED */

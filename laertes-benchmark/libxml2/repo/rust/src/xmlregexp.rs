
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type _xmlBuf;
    /*
 * Summary: string dictionary
 * Description: dictionary of reusable strings, just used to avoid allocation
 *         and freeing operations.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    /*
 * The dictionary.
 */
    pub type _xmlDict;
    pub type _xmlHashTable;
    pub type _xmlValidState;
    #[no_mangle]
    fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrndup(cur: *const xmlChar, len: std::os::raw::c_int) -> *mut xmlChar;
    #[no_mangle]
    static mut stderr: *mut FILE;
    #[no_mangle]
    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn printf(_: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn snprintf(_: *mut std::os::raw::c_char, _: std::os::raw::c_ulong,
                _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    #[no_mangle]
    fn memcpy(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_void, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn memset(_: *mut std::os::raw::c_void, _: std::os::raw::c_int, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;
    /*
 * Constructor and destructor.
 */
    #[no_mangle]
    fn xmlDictCreate() -> xmlDictPtr;
    #[no_mangle]
    fn xmlDictReference(dict: xmlDictPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlDictFree(dict: xmlDictPtr);
    /*
 * Lookup of entry in the dictionary.
 */
    #[no_mangle]
    fn xmlDictLookup(dict: xmlDictPtr, name: *const xmlChar, len: std::os::raw::c_int)
     -> *const xmlChar;
    #[no_mangle]
    fn xmlDictExists(dict: xmlDictPtr, name: *const xmlChar, len: std::os::raw::c_int)
     -> *const xmlChar;
    /*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 */
    /* *
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /* *
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 */
    /* *
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
 */
    /* *
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
 */
    /* * DOC_DISABLE */
/*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 */
    /* !LIBXML_THREAD_ALLOC_ENABLED */
    #[no_mangle]
    static mut xmlFree: xmlFreeFunc;
    /*
 * Use the following function to reset the two global variables
 * xmlGenericError and xmlGenericErrorContext.
 */
    /*
 * Default message routines used by SAX and Valid context for error
 * and warning reporting.
 */
    /*
 * Extended error information routines
 */
    /*
 * Internal callback reporting routine
 */
    #[no_mangle]
    fn __xmlRaiseError(schannel: xmlStructuredErrorFunc,
                       channel: xmlGenericErrorFunc, data: *mut std::os::raw::c_void,
                       ctx: *mut std::os::raw::c_void, node: *mut std::os::raw::c_void,
                       domain: std::os::raw::c_int, code: std::os::raw::c_int,
                       level: xmlErrorLevel, file: *const std::os::raw::c_char,
                       line: std::os::raw::c_int, str1: *const std::os::raw::c_char,
                       str2: *const std::os::raw::c_char, str3: *const std::os::raw::c_char,
                       int1: std::os::raw::c_int, col: std::os::raw::c_int,
                       msg: *const std::os::raw::c_char, _: ...);
    #[no_mangle]
    static mut xmlMalloc: xmlMallocFunc;
    #[no_mangle]
    static mut xmlRealloc: xmlReallocFunc;
    #[no_mangle]
    static mut xmlMallocAtomic: xmlMallocFunc;
    #[no_mangle]
    fn __xmlGenericErrorContext() -> *mut *mut std::os::raw::c_void;
    #[no_mangle]
    fn __xmlGenericError() -> *mut xmlGenericErrorFunc;
    /* application data */
    /* XML_DOCUMENT_NODE, must be second ! */
    /* name/filename/URI of the document */
    /* the document tree */
    /* last child link */
    /* child->parent link */
    /* next sibling link  */
    /* previous sibling link  */
    /* autoreference to itself */
    /* End of common part */
    /* level of zlib compression */
    /* standalone document (no external refs)
				     1 if standalone="yes"
				     0 if standalone="no"
				    -1 if there is no XML declaration
				    -2 if there is an XML declaration, but no
					standalone attribute was specified */
    /* the document internal subset */
    /* the document external subset */
    /* Global namespace, the old way */
    /* the XML version string */
    /* external initial encoding, if any */
    /* Hash table for ID attributes if any */
    /* Hash table for IDREFs attributes if any */
    /* The URI for that document */
    /* encoding of the in-memory content
				   actually an xmlCharEncoding */
    /* dict used to allocate names or NULL */
    /* for type/PSVI informations */
    /* set of xmlParserOption used to parse the
				   document */
    /* set of xmlDocProperties for this document
				   set at the end of parsing */
    /* *
 * xmlDOMWrapAcquireNsFunction:
 * @ctxt:  a DOM wrapper context
 * @node:  the context node (element or attribute)
 * @nsName:  the requested namespace name
 * @nsPrefix:  the requested namespace prefix
 *
 * A function called to acquire namespaces (xmlNs) from the wrapper.
 *
 * Returns an xmlNsPtr or NULL in case of an error.
 */
    /* *
 * xmlDOMWrapCtxt:
 *
 * Context for DOM wrapper-operations.
 */
    /*
    * The type of this context, just in case we need specialized
    * contexts in the future.
    */
    /*
    * Internal namespace map used for various operations.
    */
    /*
    * Use this one to acquire an xmlNsPtr intended for node->ns.
    * (Note that this is not intended for elem->nsDef).
    */
    /* *
 * xmlChildrenNode:
 *
 * Macro for compatibility naming layer with libxml1. Maps
 * to "children."
 */
    /* *
 * xmlRootNode:
 *
 * Macro for compatibility naming layer with libxml1. Maps
 * to "children".
 */
    /*
 * Variables.
 */
    /*
 * Some helper functions
 */
    /*
 * Handling Buffers, the old ones see @xmlBuf for the new ones.
 */
    /*
 * Creating/freeing new structures.
 */
    /* LIBXML_LEGACY_ENABLED */
    /* LIBXML_TREE_ENABLED */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    /*
 * Creating new nodes.
 */
    /* LIBXML_TREE_ENABLED */
    /*
 * Navigating.
 */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED) */
    /*
 * Changing the structure.
 */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */
    /* LIBXML_TREE_ENABLED */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */
    /* LIBXML_TREE_ENABLED || LIBXML_HTML_ENABLED || LIBXML_SCHEMAS_ENABLED */
    /*
 * Namespaces.
 */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) */
    /*
 * Changing the content.
 */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || \
	  defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) */
    /* LIBXML_TREE_ENABLED */
    /* LIBXML_TREE_ENABLED */
    /* LIBXML_TREE_ENABLED */
    /*
 * Removing content.
 */
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    /*
 * Internal, don't use.
 */
    #[no_mangle]
    fn xmlBufferWriteChar(buf: xmlBufferPtr, string: *const std::os::raw::c_char);
    #[no_mangle]
    fn xmlBufferWriteCHAR(buf: xmlBufferPtr, string: *const xmlChar);
    /* *
 * Range checking routine
 */
    #[no_mangle]
    fn xmlCharInRange(val: std::os::raw::c_uint, group: *const xmlChRangeGroup)
     -> std::os::raw::c_int;
    #[no_mangle]
    static xmlIsBaseCharGroup: xmlChRangeGroup;
    #[no_mangle]
    static xmlIsCombiningGroup: xmlChRangeGroup;
    #[no_mangle]
    static xmlIsDigitGroup: xmlChRangeGroup;
    #[no_mangle]
    static xmlIsExtenderGroup: xmlChRangeGroup;
    #[no_mangle]
    fn xmlStringCurrentChar(ctxt: xmlParserCtxtPtr, cur: *const xmlChar,
                            len: *mut std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsBlock(code: std::os::raw::c_int, block: *const std::os::raw::c_char)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatC(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatCc(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatCf(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatCo(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatL(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatLl(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatLm(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatLo(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatLt(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatLu(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatM(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatMc(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatMe(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatMn(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatN(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatNd(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatNl(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatNo(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatP(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPc(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPd(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPe(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPf(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPi(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPo(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatPs(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatS(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatSc(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatSk(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatSm(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatSo(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatZ(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatZl(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatZp(code: std::os::raw::c_int) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlUCSIsCatZs(code: std::os::raw::c_int) -> std::os::raw::c_int;
}
pub type xmlChar = std::os::raw::c_uchar;
pub type size_t = std::os::raw::c_ulong;
pub type __off_t = std::os::raw::c_long;
pub type __off64_t = std::os::raw::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: std::os::raw::c_int,
    pub _IO_read_ptr: *mut std::os::raw::c_char,
    pub _IO_read_end: *mut std::os::raw::c_char,
    pub _IO_read_base: *mut std::os::raw::c_char,
    pub _IO_write_base: *mut std::os::raw::c_char,
    pub _IO_write_ptr: *mut std::os::raw::c_char,
    pub _IO_write_end: *mut std::os::raw::c_char,
    pub _IO_buf_base: *mut std::os::raw::c_char,
    pub _IO_buf_end: *mut std::os::raw::c_char,
    pub _IO_save_base: *mut std::os::raw::c_char,
    pub _IO_backup_base: *mut std::os::raw::c_char,
    pub _IO_save_end: *mut std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: std::os::raw::c_int,
    pub _flags2: std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: std::os::raw::c_ushort,
    pub _vtable_offset: std::os::raw::c_schar,
    pub _shortbuf: [std::os::raw::c_char; 1],
    pub _lock: *mut std::os::raw::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: std::os::raw::c_int,
    pub _unused2: [std::os::raw::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
    pub compressed: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
    pub rawconsumed: std::os::raw::c_ulong,
}
pub type xmlBufPtr = *mut xmlBuf;
pub type xmlBuf = _xmlBuf;
/*
 * Summary: interface for the encoding conversion functions
 * Description: interface for the encoding conversion functions needed for
 *              XML basic encoding and iconv() support.
 *
 * Related specs are
 * rfc2044        (UTF-8 and UTF-16) F. Yergeau Alis Technologies
 * [ISO-10646]    UTF-8 and UTF-16 in Annexes
 * [ISO-8859-1]   ISO Latin-1 characters codes.
 * [UNICODE]      The Unicode Consortium, "The Unicode Standard --
 *                Worldwide Character Encoding -- Version 1.0", Addison-
 *                Wesley, Volume 1, 1991, Volume 2, 1992.  UTF-8 is
 *                described in Unicode Technical Report #4.
 * [US-ASCII]     Coded Character Set--7-bit American Standard Code for
 *                Information Interchange, ANSI X3.4-1986.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * xmlCharEncoding:
 *
 * Predefined values for some standard encodings.
 * Libxml does not do beforehand translation on UTF8 and ISOLatinX.
 * It also supports ASCII, ISO-8859-1, and UTF16 (LE and BE) by default.
 *
 * Anything else would have to be translated to UTF8 before being
 * given to the parser itself. The BOM for UTF16 and the encoding
 * declaration are looked at and a converter is looked for at that
 * point. If not found the parser stops here as asked by the XML REC. A
 * converter can be registered by the user using xmlRegisterCharEncodingHandler
 * but the current form doesn't allow stateful transcoding (a serious
 * problem agreed !). If iconv has been found it will be used
 * automatically and allow stateful transcoding, the simplest is then
 * to be sure to enable iconv and to provide iconv libs for the encoding
 * support needed.
 *
 * Note that the generic "UTF-16" is not a predefined value.  Instead, only
 * the specific UTF-16LE and UTF-16BE are present.
 */
/* No char encoding detected */
/* No char encoding detected */
/* UTF-8 */
/* UTF-16 little endian */
/* UTF-16 big endian */
/* UCS-4 little endian */
/* UCS-4 big endian */
/* EBCDIC uh! */
/* UCS-4 unusual ordering */
/* UCS-4 unusual ordering */
/* UCS-2 */
/* ISO-8859-1 ISO Latin 1 */
/* ISO-8859-2 ISO Latin 2 */
/* ISO-8859-3 */
/* ISO-8859-4 */
/* ISO-8859-5 */
/* ISO-8859-6 */
/* ISO-8859-7 */
/* ISO-8859-8 */
/* ISO-8859-9 */
/* ISO-2022-JP */
/* Shift_JIS */
/* EUC-JP */
/* pure ASCII */
/* *
 * xmlCharEncodingInputFunc:
 * @out:  a pointer to an array of bytes to store the UTF-8 result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of chars in the original encoding
 * @inlen:  the length of @in
 *
 * Take a block of chars in the original encoding and try to convert
 * it to an UTF-8 block of chars out.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets consumed.
 */
/* *
 * xmlCharEncodingOutputFunc:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of UTF-8 chars
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and try to convert it to another
 * encoding.
 * Note: a first call designed to produce heading info is called with
 * in = NULL. If stateful this should also initialize the encoder state.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets produced.
 */
/*
 * Block defining the handlers for non UTF-8 encodings.
 * If iconv is supported, there are two extra fields.
 */
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut std::os::raw::c_void;
pub type xmlCharEncodingOutputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlCharEncodingInputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlInputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlInputReadCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *mut std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const std::os::raw::c_char,
    pub directory: *const std::os::raw::c_char,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
    pub length: std::os::raw::c_int,
    pub line: std::os::raw::c_int,
    pub col: std::os::raw::c_int,
    pub consumed: std::os::raw::c_ulong,
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub id: std::os::raw::c_int,
}
pub type xmlParserInputDeallocate
    =
    Option<unsafe extern "C" fn(_: *mut xmlChar) -> ()>;
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut std::os::raw::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: std::os::raw::c_int,
    pub replaceEntities: std::os::raw::c_int,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub html: std::os::raw::c_int,
    pub input: xmlParserInputPtr,
    pub inputNr: std::os::raw::c_int,
    pub inputMax: std::os::raw::c_int,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: std::os::raw::c_int,
    pub node_seq: xmlParserNodeInfoSeq,
    pub errNo: std::os::raw::c_int,
    pub hasExternalSubset: std::os::raw::c_int,
    pub hasPErefs: std::os::raw::c_int,
    pub external: std::os::raw::c_int,
    pub valid: std::os::raw::c_int,
    pub validate: std::os::raw::c_int,
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: std::os::raw::c_int,
    pub directory: *mut std::os::raw::c_char,
    pub name: *const xmlChar,
    pub nameNr: std::os::raw::c_int,
    pub nameMax: std::os::raw::c_int,
    pub nameTab: *mut *const xmlChar,
    pub nbChars: std::os::raw::c_long,
    pub checkIndex: std::os::raw::c_long,
    pub keepBlanks: std::os::raw::c_int,
    pub disableSAX: std::os::raw::c_int,
    pub inSubset: std::os::raw::c_int,
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut std::os::raw::c_int,
    pub spaceNr: std::os::raw::c_int,
    pub spaceMax: std::os::raw::c_int,
    pub spaceTab: *mut std::os::raw::c_int,
    pub depth: std::os::raw::c_int,
    pub entity: xmlParserInputPtr,
    pub charset: std::os::raw::c_int,
    pub nodelen: std::os::raw::c_int,
    pub nodemem: std::os::raw::c_int,
    pub pedantic: std::os::raw::c_int,
    pub _private: *mut std::os::raw::c_void,
    pub loadsubset: std::os::raw::c_int,
    pub linenumbers: std::os::raw::c_int,
    pub catalogs: *mut std::os::raw::c_void,
    pub recovery: std::os::raw::c_int,
    pub progressive: std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: std::os::raw::c_int,
    pub docdict: std::os::raw::c_int,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: std::os::raw::c_int,
    pub nsNr: std::os::raw::c_int,
    pub nsMax: std::os::raw::c_int,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut std::os::raw::c_int,
    pub pushTab: *mut *mut std::os::raw::c_void,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
    pub nsWellFormed: std::os::raw::c_int,
    pub options: std::os::raw::c_int,
    pub dictNames: std::os::raw::c_int,
    pub freeElemsNr: std::os::raw::c_int,
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: std::os::raw::c_int,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: std::os::raw::c_ulong,
    pub sizeentities: std::os::raw::c_ulong,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: std::os::raw::c_int,
    pub nodeInfoMax: std::os::raw::c_int,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: std::os::raw::c_int,
    pub sizeentcopy: std::os::raw::c_ulong,
}
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
    pub begin_pos: std::os::raw::c_ulong,
    pub begin_line: std::os::raw::c_ulong,
    pub end_pos: std::os::raw::c_ulong,
    pub end_line: std::os::raw::c_ulong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut std::os::raw::c_void,
    pub line: std::os::raw::c_ushort,
    pub extra: std::os::raw::c_ushort,
}
/*
 * Summary: interfaces for tree manipulation
 * Description: this module describes the structures found in an tree resulting
 *              from an XML or HTML parsing, as well as the API provided for
 *              various processing on that tree
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Some of the basic types pointer to structures:
 */
/* xmlIO.h */
/* parser.h */
/* entities.h */
/* *
 * BASE_BUFFER_SIZE:
 *
 * default buffer size 4000.
 */
/* *
 * LIBXML_NAMESPACE_DICT:
 *
 * Defines experimental behaviour:
 * 1) xmlNs gets an additional field @context (a xmlDoc)
 * 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.
 */
/* #define LIBXML_NAMESPACE_DICT */
/* *
 * xmlBufferAllocationScheme:
 *
 * A buffer allocation scheme can be defined to either match exactly the
 * need or double it's allocated size each time it is found too small.
 */
/* double each time one need to grow */
/* grow only to the minimal size */
/* immutable buffer */
/* special allocation scheme used for I/O */
/* exact up to a threshold, and doubleit thereafter */
/* limit the upper size of the buffer */
/* *
 * xmlBuffer:
 *
 * A buffer structure, this old construct is limited to 2GB and
 * is being deprecated, use API with xmlBuf instead
 */
/* The buffer content UTF8 */
/* The buffer size used */
/* The buffer size */
/* The realloc method */
/* in IO mode we may have a different base */
/* *
 * xmlBuf:
 *
 * A buffer structure, new one, the actual structure internals are not public
 */
/* *
 * xmlBufPtr:
 *
 * A pointer to a buffer structure, the actual structure internals are not
 * public
 */
/*
 * A few public routines for xmlBuf. As those are expected to be used
 * mostly internally the bulk of the routines are internal in buf.h
 */
/*
 * LIBXML2_NEW_BUFFER:
 *
 * Macro used to express that the API use the new buffers for
 * xmlParserInputBuffer and xmlOutputBuffer. The change was
 * introduced in 2.9.0.
 */
/* *
 * XML_XML_NAMESPACE:
 *
 * This is the namespace for the special xml: prefix predefined in the
 * XML Namespace specification.
 */
/* *
 * XML_XML_ID:
 *
 * This is the name for the special xml:id attribute
 */
/*
 * The different element types carried by an XML tree.
 *
 * NOTE: This is synchronized with DOM Level1 values
 *       See http://www.w3.org/TR/REC-DOM-Level-1/
 *
 * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should
 * be deprecated to use an XML_DTD_NODE.
 */
/* *
 * xmlNotation:
 *
 * A DTD Notation definition.
 */
/* Notation name */
/* Public identifier, if any */
/* System identifier, if any */
/* *
 * xmlAttributeType:
 *
 * A DTD Attribute type definition.
 */
/* *
 * xmlAttributeDefault:
 *
 * A DTD Attribute default definition.
 */
/* *
 * xmlEnumeration:
 *
 * List structure used when there is an enumeration in DTDs.
 */
/* next one */
/* Enumeration name */
/* *
 * xmlAttribute:
 *
 * An Attribute declaration in a DTD.
 */
/* application data */
/* XML_ATTRIBUTE_DECL, must be second ! */
/* Attribute name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* next in hash table */
/* The attribute type */
/* the default */
/* or the default value */
/* or the enumeration tree if any */
/* the namespace prefix if any */
/* Element holding the attribute */
/* *
 * xmlElementContentType:
 *
 * Possible definitions of element content types.
 */
/* *
 * xmlElementContentOccur:
 *
 * Possible definitions of element content occurrences.
 */
/* *
 * xmlElementContent:
 *
 * An XML Element content as stored after parsing an element definition
 * in a DTD.
 */
/* PCDATA, ELEMENT, SEQ or OR */
/* ONCE, OPT, MULT or PLUS */
/* Element name */
/* first child */
/* second child */
/* parent */
/* Namespace prefix */
/* *
 * xmlElementTypeVal:
 *
 * The different possibilities for an element content type.
 */
/* *
 * xmlElement:
 *
 * An XML Element declaration from a DTD.
 */
/* application data */
/* XML_ELEMENT_DECL, must be second ! */
/* Element name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* The type */
/* the allowed element content */
/* List of the declared attributes */
/* the namespace prefix if any */
/* the validating regexp */
/* *
 * XML_LOCAL_NAMESPACE:
 *
 * A namespace declaration node.
 */
/* *
 * xmlNs:
 *
 * An XML namespace.
 * Note that prefix == NULL is valid, it defines the default namespace
 * within the subtree (until overridden).
 *
 * xmlNsType is unified with xmlElementType.
 */
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *mut std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: std::os::raw::c_int,
    pub standalone: std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut std::os::raw::c_void,
    pub refs: *mut std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut std::os::raw::c_void,
    pub parseFlags: std::os::raw::c_int,
    pub properties: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut std::os::raw::c_void,
    pub elements: *mut std::os::raw::c_void,
    pub attributes: *mut std::os::raw::c_void,
    pub entities: *mut std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut std::os::raw::c_void,
}
pub type xmlElementType = std::os::raw::c_uint;
pub const XML_DOCB_DOCUMENT_NODE: xmlElementType = 21;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
pub type xmlNsType = xmlElementType;
/* normally an xmlDoc */
/* *
 * xmlDtd:
 *
 * An XML DTD, as defined by <!DOCTYPE ... There is actually one for
 * the internal subset and for the external subset.
 */
/* application data */
/* XML_DTD_NODE, must be second ! */
/* Name of the DTD */
/* the value of the property link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* Hash table for notations if any */
/* Hash table for elements if any */
/* Hash table for attributes if any */
/* Hash table for entities if any */
/* External identifier for PUBLIC DTD */
/* URI for a SYSTEM or PUBLIC DTD */
/* Hash table for param entities if any */
/* *
 * xmlAttr:
 *
 * An attribute on an XML node.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut std::os::raw::c_void,
}
pub type xmlAttributeType = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlParserMode = std::os::raw::c_uint;
pub const XML_PARSE_READER: xmlParserMode = 5;
pub const XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const XML_PARSE_SAX: xmlParserMode = 2;
pub const XML_PARSE_DOM: xmlParserMode = 1;
pub const XML_PARSE_UNKNOWN: xmlParserMode = 0;
/*
 * Summary: error handling
 * Description: the API used to report errors
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlErrorLevel:
 *
 * Indicates the level of an error
 */
/* A simple warning */
/* A recoverable error */
/* A fatal error */
/* *
 * xmlErrorDomain:
 *
 * Indicates where an error may have come from
 */
/* The XML parser */
/* The tree module */
/* The XML Namespace module */
/* The XML DTD validation with parser context*/
/* The HTML parser */
/* The memory allocator */
/* The serialization code */
/* The Input/Output stack */
/* The FTP module */
/* The HTTP module */
/* The XInclude processing */
/* The XPath module */
/* The XPointer module */
/* The regular expressions module */
/* The W3C XML Schemas Datatype module */
/* The W3C XML Schemas parser module */
/* The W3C XML Schemas validation module */
/* The Relax-NG parser module */
/* The Relax-NG validator module */
/* The Catalog module */
/* The Canonicalization module */
/* The XSLT engine from libxslt */
/* The XML DTD validation with valid context */
/* The error checking module */
/* The xmlwriter module */
/* The dynamically loaded module module*/
/* The module handling character conversion */
/* The Schematron validator module */
/* The buffers module */
/* The URI module */
/* *
 * xmlError:
 *
 * An XML Error instance.
 */
pub type xmlError = _xmlError;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlError {
    pub domain: std::os::raw::c_int,
    pub code: std::os::raw::c_int,
    pub message: *mut std::os::raw::c_char,
    pub level: xmlErrorLevel,
    pub file: *mut std::os::raw::c_char,
    pub line: std::os::raw::c_int,
    pub str1: *mut std::os::raw::c_char,
    pub str2: *mut std::os::raw::c_char,
    pub str3: *mut std::os::raw::c_char,
    pub int1: std::os::raw::c_int,
    pub int2: std::os::raw::c_int,
    pub ctxt: *mut std::os::raw::c_void,
    pub node: *mut std::os::raw::c_void,
}
pub type xmlErrorLevel = std::os::raw::c_uint;
pub const XML_ERR_FATAL: xmlErrorLevel = 3;
pub const XML_ERR_ERROR: xmlErrorLevel = 2;
pub const XML_ERR_WARNING: xmlErrorLevel = 1;
pub const XML_ERR_NONE: xmlErrorLevel = 0;
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
/* for type/PSVI informations */
/* *
 * xmlID:
 *
 * An XML ID instance.
 */
/* next ID */
/* The ID name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* The document holding the ID */
/* *
 * xmlRef:
 *
 * An XML IDREF instance.
 */
/* next Ref */
/* The Ref name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* *
 * xmlNode:
 *
 * A node in an XML tree.
 */
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
/*
 * Summary: Chained hash tables
 * Description: This module implements the hash table support used in
 *		various places in the library.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Bjorn Reese <bjorn.reese@systematic.dk>
 */
/*
 * The hash table.
 */
pub type xmlHashTablePtr = *mut xmlHashTable;
pub type xmlHashTable = _xmlHashTable;
pub type xmlDictPtr = *mut xmlDict;
pub type xmlDict = _xmlDict;
pub type xmlParserInputState = std::os::raw::c_int;
pub const XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const XML_PARSER_DTD: xmlParserInputState = 3;
pub const XML_PARSER_PI: xmlParserInputState = 2;
pub const XML_PARSER_MISC: xmlParserInputState = 1;
pub const XML_PARSER_START: xmlParserInputState = 0;
pub const XML_PARSER_EOF: xmlParserInputState = -1;
/*
 * Summary: The DTD validation
 * Description: API for the DTD handling and the validity checking
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Validation state added for non-determinist content model.
 */
/* *
 * xmlValidityErrorFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity error is found. This is a message
 * oriented function similar to an *printf function.
 */
/* *
 * xmlValidityWarningFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity warning is found. This is a message
 * oriented function similar to an *printf function.
 */
/* *
 * XML_CTXT_FINISH_DTD_0:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/* *
 * XML_CTXT_FINISH_DTD_1:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/*
 * xmlValidCtxt:
 * An xmlValidCtxt is used for error reporting when validating.
 */
pub type xmlValidCtxt = _xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: *mut std::os::raw::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub finishDtd: std::os::raw::c_uint,
    pub doc: xmlDocPtr,
    pub valid: std::os::raw::c_int,
    pub vstate: *mut xmlValidState,
    pub vstateNr: std::os::raw::c_int,
    pub vstateMax: std::os::raw::c_int,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
/*
 * Summary: API to build regexp automata
 * Description: the API to build regexp automata
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlAutomataPtr:
 *
 * A libxml automata description, It can be compiled into a regexp
 */
/* *
 * xmlAutomataStatePtr:
 *
 * A state int the automata description,
 */
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
pub type xmlAutomataState = _xmlAutomataState;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAutomataState {
    pub type_0: xmlRegStateType,
    pub mark: xmlRegMarkedType,
    pub markd: xmlRegMarkedType,
    pub reached: xmlRegMarkedType,
    pub no: std::os::raw::c_int,
    pub maxTrans: std::os::raw::c_int,
    pub nbTrans: std::os::raw::c_int,
    pub trans: *mut xmlRegTrans,
    pub maxTransTo: std::os::raw::c_int,
    pub nbTransTo: std::os::raw::c_int,
    pub transTo: *mut std::os::raw::c_int,
}
pub type xmlRegTrans = _xmlRegTrans;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegTrans {
    pub atom: xmlRegAtomPtr,
    pub to: std::os::raw::c_int,
    pub counter: std::os::raw::c_int,
    pub count: std::os::raw::c_int,
    pub nd: std::os::raw::c_int,
}
pub type xmlRegAtomPtr = *mut xmlRegAtom;
pub type xmlRegAtom = _xmlRegAtom;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegAtom {
    pub no: std::os::raw::c_int,
    pub type_0: xmlRegAtomType,
    pub quant: xmlRegQuantType,
    pub min: std::os::raw::c_int,
    pub max: std::os::raw::c_int,
    pub valuep: *mut std::os::raw::c_void,
    pub valuep2: *mut std::os::raw::c_void,
    pub neg: std::os::raw::c_int,
    pub codepoint: std::os::raw::c_int,
    pub start: xmlRegStatePtr,
    pub start0: xmlRegStatePtr,
    pub stop: xmlRegStatePtr,
    pub maxRanges: std::os::raw::c_int,
    pub nbRanges: std::os::raw::c_int,
    pub ranges: *mut xmlRegRangePtr,
    pub data: *mut std::os::raw::c_void,
}
pub type xmlRegRangePtr = *mut xmlRegRange;
pub type xmlRegRange = _xmlRegRange;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegRange {
    pub neg: std::os::raw::c_int,
    pub type_0: xmlRegAtomType,
    pub start: std::os::raw::c_int,
    pub end: std::os::raw::c_int,
    pub blockName: *mut xmlChar,
}
pub type xmlRegAtomType = std::os::raw::c_uint;
pub const XML_REGEXP_BLOCK_NAME: xmlRegAtomType = 136;
pub const XML_REGEXP_OTHER_NA: xmlRegAtomType = 135;
pub const XML_REGEXP_OTHER_PRIVATE: xmlRegAtomType = 134;
pub const XML_REGEXP_OTHER_FORMAT: xmlRegAtomType = 133;
pub const XML_REGEXP_OTHER_CONTROL: xmlRegAtomType = 132;
pub const XML_REGEXP_OTHER: xmlRegAtomType = 131;
pub const XML_REGEXP_SYMBOL_OTHERS: xmlRegAtomType = 130;
pub const XML_REGEXP_SYMBOL_MODIFIER: xmlRegAtomType = 129;
pub const XML_REGEXP_SYMBOL_CURRENCY: xmlRegAtomType = 128;
pub const XML_REGEXP_SYMBOL_MATH: xmlRegAtomType = 127;
pub const XML_REGEXP_SYMBOL: xmlRegAtomType = 126;
pub const XML_REGEXP_SEPAR_PARA: xmlRegAtomType = 125;
pub const XML_REGEXP_SEPAR_LINE: xmlRegAtomType = 124;
pub const XML_REGEXP_SEPAR_SPACE: xmlRegAtomType = 123;
pub const XML_REGEXP_SEPAR: xmlRegAtomType = 122;
pub const XML_REGEXP_PUNCT_OTHERS: xmlRegAtomType = 121;
pub const XML_REGEXP_PUNCT_FINQUOTE: xmlRegAtomType = 120;
pub const XML_REGEXP_PUNCT_INITQUOTE: xmlRegAtomType = 119;
pub const XML_REGEXP_PUNCT_CLOSE: xmlRegAtomType = 118;
pub const XML_REGEXP_PUNCT_OPEN: xmlRegAtomType = 117;
pub const XML_REGEXP_PUNCT_DASH: xmlRegAtomType = 116;
pub const XML_REGEXP_PUNCT_CONNECTOR: xmlRegAtomType = 115;
pub const XML_REGEXP_PUNCT: xmlRegAtomType = 114;
pub const XML_REGEXP_NUMBER_OTHERS: xmlRegAtomType = 113;
pub const XML_REGEXP_NUMBER_LETTER: xmlRegAtomType = 112;
pub const XML_REGEXP_NUMBER_DECIMAL: xmlRegAtomType = 111;
pub const XML_REGEXP_NUMBER: xmlRegAtomType = 110;
pub const XML_REGEXP_MARK_ENCLOSING: xmlRegAtomType = 109;
pub const XML_REGEXP_MARK_SPACECOMBINING: xmlRegAtomType = 108;
pub const XML_REGEXP_MARK_NONSPACING: xmlRegAtomType = 107;
pub const XML_REGEXP_MARK: xmlRegAtomType = 106;
pub const XML_REGEXP_LETTER_OTHERS: xmlRegAtomType = 105;
pub const XML_REGEXP_LETTER_MODIFIER: xmlRegAtomType = 104;
pub const XML_REGEXP_LETTER_TITLECASE: xmlRegAtomType = 103;
pub const XML_REGEXP_LETTER_LOWERCASE: xmlRegAtomType = 102;
pub const XML_REGEXP_LETTER_UPPERCASE: xmlRegAtomType = 101;
pub const XML_REGEXP_LETTER: xmlRegAtomType = 100;
pub const XML_REGEXP_NOTREALCHAR: xmlRegAtomType = 16;
pub const XML_REGEXP_REALCHAR: xmlRegAtomType = 15;
pub const XML_REGEXP_NOTDECIMAL: xmlRegAtomType = 14;
pub const XML_REGEXP_DECIMAL: xmlRegAtomType = 13;
pub const XML_REGEXP_NOTNAMECHAR: xmlRegAtomType = 12;
pub const XML_REGEXP_NAMECHAR: xmlRegAtomType = 11;
pub const XML_REGEXP_NOTINITNAME: xmlRegAtomType = 10;
pub const XML_REGEXP_INITNAME: xmlRegAtomType = 9;
pub const XML_REGEXP_NOTSPACE: xmlRegAtomType = 8;
pub const XML_REGEXP_ANYSPACE: xmlRegAtomType = 7;
pub const XML_REGEXP_ANYCHAR: xmlRegAtomType = 6;
pub const XML_REGEXP_STRING: xmlRegAtomType = 5;
pub const XML_REGEXP_SUBREG: xmlRegAtomType = 4;
pub const XML_REGEXP_RANGES: xmlRegAtomType = 3;
pub const XML_REGEXP_CHARVAL: xmlRegAtomType = 2;
pub const XML_REGEXP_EPSILON: xmlRegAtomType = 1;
pub type xmlRegStatePtr = *mut xmlRegState;
pub type xmlRegState = _xmlAutomataState;
pub type xmlRegQuantType = std::os::raw::c_uint;
pub const XML_REGEXP_QUANT_RANGE: xmlRegQuantType = 8;
pub const XML_REGEXP_QUANT_ALL: xmlRegQuantType = 7;
pub const XML_REGEXP_QUANT_ONCEONLY: xmlRegQuantType = 6;
pub const XML_REGEXP_QUANT_PLUS: xmlRegQuantType = 5;
pub const XML_REGEXP_QUANT_MULT: xmlRegQuantType = 4;
pub const XML_REGEXP_QUANT_OPT: xmlRegQuantType = 3;
pub const XML_REGEXP_QUANT_ONCE: xmlRegQuantType = 2;
pub const XML_REGEXP_QUANT_EPSILON: xmlRegQuantType = 1;
pub type xmlRegMarkedType = std::os::raw::c_uint;
pub const XML_REGEXP_MARK_VISITED: xmlRegMarkedType = 2;
pub const XML_REGEXP_MARK_START: xmlRegMarkedType = 1;
pub const XML_REGEXP_MARK_NORMAL: xmlRegMarkedType = 0;
pub type xmlRegStateType = std::os::raw::c_uint;
pub const XML_REGEXP_UNREACH_STATE: xmlRegStateType = 5;
pub const XML_REGEXP_SINK_STATE: xmlRegStateType = 4;
pub const XML_REGEXP_TRANS_STATE: xmlRegStateType = 3;
pub const XML_REGEXP_FINAL_STATE: xmlRegStateType = 2;
pub const XML_REGEXP_START_STATE: xmlRegStateType = 1;
pub type xmlAutomataPtr = *mut xmlAutomata;
pub type xmlAutomata = _xmlAutomata;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAutomata {
    pub string: *mut xmlChar,
    pub cur: *mut xmlChar,
    pub error: std::os::raw::c_int,
    pub neg: std::os::raw::c_int,
    pub start: xmlRegStatePtr,
    pub end: xmlRegStatePtr,
    pub state: xmlRegStatePtr,
    pub atom: xmlRegAtomPtr,
    pub maxAtoms: std::os::raw::c_int,
    pub nbAtoms: std::os::raw::c_int,
    pub atoms: *mut xmlRegAtomPtr,
    pub maxStates: std::os::raw::c_int,
    pub nbStates: std::os::raw::c_int,
    pub states: *mut xmlRegStatePtr,
    pub maxCounters: std::os::raw::c_int,
    pub nbCounters: std::os::raw::c_int,
    pub counters: *mut xmlRegCounter,
    pub determinist: std::os::raw::c_int,
    pub negs: std::os::raw::c_int,
    pub flags: std::os::raw::c_int,
}
pub type xmlRegCounter = _xmlRegCounter;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegCounter {
    pub min: std::os::raw::c_int,
    pub max: std::os::raw::c_int,
}
pub type xmlValidState = _xmlValidState;
/* application data */
/* type number, must be second ! */
/* the name of the node, or the entity */
/* parent->childs link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* pointer to the associated namespace */
/* the content */
/* properties list */
/* namespace definitions on this node */
/* for type/PSVI informations */
/* line number */
/* extra data for XPath/XSLT */
/* *
 * XML_GET_CONTENT:
 *
 * Macro to extract the content pointer of a node.
 */
/* *
 * XML_GET_LINE:
 *
 * Macro to extract the line number of an element node.
 */
/* *
 * xmlDocProperty
 *
 * Set of properties of the document as found by the parser
 * Some of them are linked to similary named xmlParserOption
 */
/* document is XML well formed */
/* document is Namespace valid */
/* parsed with old XML-1.0 parser */
/* DTD validation was successful */
/* XInclude substitution was done */
/* Document was built using the API
                                           and not by parsing an instance */
/* built for internal processing */
/* parsed or built HTML document */
/* *
 * xmlDoc:
 *
 * An XML document.
 */
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
pub type xmlValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: std::os::raw::c_ulong,
    pub length: std::os::raw::c_ulong,
    pub buffer: *mut xmlParserNodeInfo,
}
/* *
 * xmlParserCtxt:
 *
 * The parser context.
 * NOTE This doesn't completely define the parser state, the (current ?)
 *      design of the parser uses recursive function calls since this allow
 *      and easy mapping from the production rules of the specification
 *      to the actual code. The drawback is that the actual function call
 *      also reflect the parser state. However most of the parsing routines
 *      takes as the only argument the parser context pointer, so migrating
 *      to a state based parser for progressive parsing shouldn't be too hard.
 */
/* The SAX handler */
/* For SAX interface only, used by DOM build */
/* the document being built */
/* is the document well formed */
/* shall we replace entities ? */
/* the XML version string */
/* the declared encoding, if any */
/* standalone document */
/* an HTML(1)/Docbook(2) document
                                       * 3 is HTML after <head>
                                       * 10 is HTML after <body>
                                       */
/* Input stream stack */
/* Current input stream */
/* Number of current input streams */
/* Max number of input streams */
/* stack of inputs */
/* Node analysis stack only used for DOM building */
/* Current parsed Node */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodes */
/* Whether node info should be kept */
/* info about each node parsed */
/* error code */
/* reference and external subset */
/* the internal subset has PE refs */
/* are we parsing an external entity */
/* is the document valid */
/* shall we try to validate ? */
/* The validity context */
/* current type of input */
/* next char look-ahead */
/* the data directory */
/* Node name stack */
/* Current parsed Node */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodes */
/* number of xmlChar processed */
/* used by progressive parsing lookup */
/* ugly but ... */
/* SAX callbacks are disabled */
/* Parsing is in int 1/ext 2 subset */
/* name of subset */
/* URI of external subset */
/* SYSTEM ID of external subset */
/* xml:space values */
/* Should the parser preserve spaces */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of space infos */
/* to prevent entity substitution loops */
/* used to check entities boundaries */
/* encoding of the in-memory content
				         actually an xmlCharEncoding */
/* Those two fields are there to */
/* Speed up large node parsing */
/* signal pedantic warnings */
/* For user data, libxml won't touch it */
/* should the external subset be loaded */
/* set line number in element content */
/* document's own catalog */
/* run in recovery mode */
/* is this a progressive parsing */
/* dictionary for the parser */
/* array for the attributes callbacks */
/* the size of the array */
/* use strings from dict to build tree */
/*
     * pre-interned strings
     */
/*
     * Everything below is used only by the new SAX mode
     */
/* operating in the new SAX mode */
/* the number of inherited namespaces */
/* the size of the arrays */
/* the array of prefix/namespace name */
/* which attribute were allocated */
/* array of data for push */
/* defaulted attributes if any */
/* non-CDATA attributes if any */
/* is the document XML Nanespace okay */
/* Extra options */
/*
     * Those fields are needed only for treaming parsing so far
     */
/* Use dictionary names for the tree */
/* number of freed element nodes */
/* List of freed element nodes */
/* number of freed attributes nodes */
/* List of freed attributes nodes */
/*
     * the complete error informations for the last error.
     */
/* the parser mode */
/* number of entities references */
/* size of parsed entities */
/* for use by HTML non-recursive parser */
/* Current NodeInfo */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodeInfos */
/* we need to label inputs */
/* volume of entity copy */
/* *
 * xmlSAXLocator:
 *
 * A SAX Locator.
 */
/* *
 * xmlSAXHandler:
 *
 * A SAX handler is bunch of callbacks called by the parser when processing
 * of the input generate data or structure informations.
 */
/* *
 * resolveEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 *
 * Callback:
 * The entity loader, to control the loading of external entities,
 * the application can either:
 *    - override this resolveEntity() callback in the SAX block
 *    - or better use the xmlSetExternalEntityLoader() function to
 *      set up it's own entity resolution routine
 *
 * Returns the xmlParserInputPtr if inlined or NULL for DOM behaviour.
 */
/* *
 * internalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the root element name
 * @ExternalID:  the external ID
 * @SystemID:  the SYSTEM ID (e.g. filename or URL)
 *
 * Callback on internal subset declaration.
 */
/* *
 * externalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the root element name
 * @ExternalID:  the external ID
 * @SystemID:  the SYSTEM ID (e.g. filename or URL)
 *
 * Callback on external subset declaration.
 */
/* *
 * getEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The entity name
 *
 * Get an entity by name.
 *
 * Returns the xmlEntityPtr if found.
 */
/* *
 * getParameterEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The entity name
 *
 * Get a parameter entity by name.
 *
 * Returns the xmlEntityPtr if found.
 */
/* *
 * entityDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the entity name
 * @type:  the entity type
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 * @content: the entity value (without processing).
 *
 * An entity definition has been parsed.
 */
/* *
 * notationDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The name of the notation
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 *
 * What to do when a notation declaration has been parsed.
 */
/* *
 * attributeDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @elem:  the name of the element
 * @fullname:  the attribute name
 * @type:  the attribute type
 * @def:  the type of default value
 * @defaultValue: the attribute default value
 * @tree:  the tree of enumerated value set
 *
 * An attribute definition has been parsed.
 */
/* *
 * elementDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the element name
 * @type:  the element type
 * @content: the element value tree
 *
 * An element definition has been parsed.
 */
/* *
 * unparsedEntityDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The name of the entity
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 * @notationName: the name of the notation
 *
 * What to do when an unparsed entity declaration is parsed.
 */
/* *
 * setDocumentLocatorSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @loc: A SAX Locator
 *
 * Receive the document locator at startup, actually xmlDefaultSAXLocator.
 * Everything is available on the context, so this is useless in our case.
 */
/* *
 * startDocumentSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Called when the document start being processed.
 */
/* *
 * endDocumentSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Called when the document end has been detected.
 */
/* *
 * startElementSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The element name, including namespace prefix
 * @atts:  An array of name/value attributes pairs, NULL terminated
 *
 * Called when an opening tag has been processed.
 */
/* *
 * endElementSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The element name
 *
 * Called when the end of an element has been detected.
 */
/* *
 * attributeSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The attribute name, including namespace prefix
 * @value:  The attribute value
 *
 * Handle an attribute that has been read by the parser.
 * The default handling is to convert the attribute into an
 * DOM subtree and past it in a new xmlAttr element added to
 * the element.
 */
/* *
 * referenceSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The entity name
 *
 * Called when an entity reference is detected.
 */
/* *
 * charactersSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @ch:  a xmlChar string
 * @len: the number of xmlChar
 *
 * Receiving some chars from the parser.
 */
/* *
 * ignorableWhitespaceSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @ch:  a xmlChar string
 * @len: the number of xmlChar
 *
 * Receiving some ignorable whitespaces from the parser.
 * UNUSED: by default the DOM building will use characters.
 */
/* *
 * processingInstructionSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @target:  the target name
 * @data: the PI data's
 *
 * A processing instruction has been parsed.
 */
/* *
 * commentSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @value:  the comment content
 *
 * A comment has been parsed.
 */
/* *
 * cdataBlockSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @value:  The pcdata content
 * @len:  the block length
 *
 * Called when a pcdata block has been parsed.
 */
/* *
 * warningSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a warning messages, callback.
 */
/* *
 * errorSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format an error messages, callback.
 */
/* *
 * fatalErrorSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format fatal error messages, callback.
 * Note: so far fatalError() SAX callbacks are not used, error()
 *       get all the callbacks for errors.
 */
/* *
 * isStandaloneSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Is this document tagged standalone?
 *
 * Returns 1 if true
 */
/* *
 * hasInternalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Does this document has an internal subset.
 *
 * Returns 1 if true
 */
/* *
 * hasExternalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Does this document has an external subset?
 *
 * Returns 1 if true
 */
/* ***********************************************************************
 *									*
 *			The SAX version 2 API extensions		*
 *									*
 ************************************************************************/
/* *
 * XML_SAX2_MAGIC:
 *
 * Special constant found in SAX2 blocks initialized fields
 */
/* *
 * startElementNsSAX2Func:
 * @ctx:  the user data (XML parser context)
 * @localname:  the local name of the element
 * @prefix:  the element namespace prefix if available
 * @URI:  the element namespace name if available
 * @nb_namespaces:  number of namespace definitions on that node
 * @namespaces:  pointer to the array of prefix/URI pairs namespace definitions
 * @nb_attributes:  the number of attributes on that node
 * @nb_defaulted:  the number of defaulted attributes. The defaulted
 *                  ones are at the end of the array
 * @attributes:  pointer to the array of (localname/prefix/URI/value/end)
 *               attribute values.
 *
 * SAX2 callback when an element start has been detected by the parser.
 * It provides the namespace informations for the element, as well as
 * the new namespace declarations on the element.
 */
/* *
 * endElementNsSAX2Func:
 * @ctx:  the user data (XML parser context)
 * @localname:  the local name of the element
 * @prefix:  the element namespace prefix if available
 * @URI:  the element namespace name if available
 *
 * SAX2 callback when an element end has been detected by the parser.
 * It provides the namespace informations for the element.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: std::os::raw::c_uint,
    pub _private: *mut std::os::raw::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
/* the node in the tree */
/* *
 * xmlParserError:
 *
 * This is an error that the XML (or HTML) parser can generate
 */
/* 1 */
/* 2 */
/* 3 */
/* 4 */
/* 5 */
/* 6 */
/* 7 */
/* 8 */
/* 9 */
/* 10 */
/* 11 */
/* 12 */
/* 13 */
/* 14 */
/* 15 */
/* 16 */
/* 17 */
/* 18 */
/* 19 */
/* 20 */
/* 21 */
/* 22 */
/* 23 */
/* 24 */
/* 25 */
/* 26 */
/* 27 */
/* 28 */
/* 29 */
/* 30 */
/* 31 */
/* 32 */
/* 33 */
/* 34 */
/* 35 */
/* 36 */
/* 37 */
/* 38 */
/* 39 */
/* 40 */
/* 41 */
/* 42 */
/* 43 */
/* 44 */
/* 45 */
/* 46 */
/* 47 */
/* 48 */
/* 49 */
/* 50 */
/* 51 */
/* 52 */
/* 53 */
/* 54 */
/* 55 */
/* 56 */
/* 57 */
/* 58 */
/* 59 */
/* 60 */
/* 61 */
/* 62 */
/* 63 */
/* 64 */
/* 65 */
/* 66 */
/* 67 */
/* 68 */
/* 69 */
/* 70 */
/* 71 */
/* 72 */
/* 73 */
/* 74 */
/* 75 */
/* 76 */
/* 77 */
/* 78 */
/* 79 */
/* 80 */
/* 81 */
/* 82 */
/* 83 */
/* 84 */
/* 85 */
/* 86 */
/* 87 */
/* 88 */
/* 89 */
/* 90 */
/* 91 */
/* 92 */
/* 93 */
/* 94 */
/* 95 */
/* 96 */
/* 97 */
/* 98 */
/* 99 */
/* 100 */
/* 101 */
/* 102 */
/* 103 */
/* 104 */
/* 105 */
/* 106 */
/* 107 */
/* 108 */
/* 109 */
/* 110 */
/* 111 */
/* 201 */
/* 202 */
/* 203 */
/* 204 */
/* 205 */
/* 501 */
/* 502 */
/* 503 */
/* 504 */
/* 505 */
/* 506 */
/* 507 */
/* 508 */
/* 509 */
/* 510 */
/* 511 */
/* 512 */
/* 513 */
/* 514 */
/* 515 */
/* 516 */
/* 517 */
/* 518 */
/* 519 */
/* 520 */
/* 521 */
/* 522 */
/* 523 */
/* 524 */
/* 525 */
/* 526 */
/* 527 */
/* 528 */
/* 529 */
/* 530 */
/* 531 */
/* 532 */
/* 533 */
/* 534 */
/* 535 */
/* 536 */
/* 537 */
/* 538 */
/* 539 */
/* 540 */
/* 541 */
/* 801 */
/* 1001 */
/* 1002 */
/* 1003 */
/* 1004 */
/* 1005 */
/* 1006 */
/* 1007 */
/* 1008 */
/* 1009 */
/* 1010 */
/* 1011 */
/* 1012 */
/* 1013 */
/* 1014 */
/* 1015 */
/* 1016 */
/* 1017 */
/* 1018 */
/* 1019 */
/* 1020 */
/* 1021 */
/* 1022 */
/* 1023 */
/* 1024 */
/* 1025 */
/* 1026 */
/* 1027 */
/* 1028 */
/* 1029 */
/* 1030 */
/* 1031 */
/* 1032 */
/* 1033 */
/* 1034 */
/* 1035 */
/* 1036 */
/* 1037 */
/* 1038 */
/* 1039 */
/* 1040 */
/* 1041 */
/* 1042 */
/* 1043 */
/* 1044 */
/* 1045 */
/* 1046 */
/* 1047 */
/* 1048 */
/* 1049 */
/* 1050 */
/* 1051 */
/* 1052 */
/* 1053 */
/* 1054 */
/* 1055 */
/* 1056 */
/* 1057 */
/* 1058 */
/* 1059 */
/* 1060 */
/* 1061 */
/* 1062 */
/* 1063 */
/* 1064 */
/* 1065 */
/* 1066 */
/* 1067 */
/* 1068 */
/* 1069 */
/* 1070 */
/* 1071 */
/* 1072 */
/* 1073 */
/* 1074 */
/* 1075 */
/* 1076 */
/* 1077 */
/* 1078 */
/* 1079 */
/* 1080 */
/* 1081 */
/* 1082 */
/* 1083 */
/* 1084 */
/* 1085 */
/* 1086 */
/* 1087 */
/* 1088 */
/* 1089 */
/* 1090 */
/* 1091 */
/* 1092 */
/* 1093 */
/* 1094 */
/* 1095 */
/* 1096 */
/* 1097 */
/* 1098 */
/* 1099 */
/* 1100 */
/* 1101 */
/* 1102 */
/* 1103 */
/* 1104 */
/* 1105 */
/* 1106 */
/* 1107 */
/* 1108 */
/* 1109 */
/* 1110 */
/* 1111 */
/* 1112 */
/* 1113 */
/* 1114 */
/* 1115 */
/* 1116 */
/* 1117 */
/* 1118 */
/* 1119 */
/* 1120 */
/* 1121 */
/* 1122 */
/* 1201 */
/* 1202 */
/* 1203 */
/* 1204 */
/* 1205 */
/* 1206 */
/* 1207 */
/* 1208 */
/* 1209 */
/* 1210 */
/* 1211 */
/* 1212 */
/* 1213 */
/* 1214 */
/* 1215 */
/* 1216 */
/* 1217 */
/* 1218 */
/* 1219 */
/* 1220 */
/* 1221 */
/* 1301 */
/* 1302 */
/* 1303 */
/* 1401 */
/* 1402 */
/* 1403 */
/* 1501 */
/* 1502 */
/* 1503 */
/* 1504 */
/* 1505 */
/* 1506 */
/* 1507 */
/* 1508 */
/* 1509 */
/* 1510 */
/* 1511 */
/* 1512 */
/* 1513 */
/* 1514 */
/* 1515 */
/* 1516 */
/* 1517 */
/* 1518 */
/* 1519 */
/* 1520 */
/* 1521 */
/* 1522 */
/* 1523 */
/* 1524 */
/* 1525 */
/* 1526 */
/* 1527 */
/* 1528 */
/* 1529 */
/* 1530 */
/* 1531 */
/* 1532 */
/* 1533 */
/* 1534 */
/* 1535 */
/* 1536 */
/* 1537 */
/* 1538 */
/* 1539 */
/* 1540 */
/* 1541 */
/* 1542 */
/* 1543 */
/* 1544 */
/* 1545 */
/* 1546 */
/* 1547 */
/* 1548 */
/* 1549 */
/* 1550 */
/* 1551 */
/* 1552 */
/* 1553 */
/* 1554 */
/* 1555 */
/* 1556 */
/* 1601 */
/* 1602 */
/* 1603 */
/* 1604 */
/* 1605 */
/* 1606 */
/* 1607 */
/* 1608 */
/* 1609 */
/* 1610 */
/* 1611 */
/* 1612 */
/* 1613 */
/* 1614 */
/* 1615 */
/* 1616 */
/* 1617 */
/* 1618 */
/* 1651 */
/* 1652 */
/* 1653 */
/* 1654 */
/* 1701 */
/* 1702 */
/* 1703 */
/* 1704 */
/* 1705 */
/* 1706 */
/* 1707 */
/* 1708 */
/* 1709 */
/* 1710 */
/* 1711 */
/* 1712 */
/* 1713 */
/* 1714 */
/* 1715 */
/* 1716 */
/* 1717 */
/* 1718 */
/* 1719 */
/* 1720 */
/* 1721 */
/* 1722 */
/* 1723 */
/* 1724 */
/* 1725 */
/* 1726 */
/* 1727 */
/* 1728 */
/* 1729 */
/* 1730 */
/* 1731 */
/* 1732 */
/* 1733 */
/* 1734 */
/* 1735 */
/* 1736 */
/* 1737 */
/* 1738 */
/* 1739 */
/* 1740 */
/* 1741 */
/* 1742 */
/* 1743 */
/* 1744 */
/* 1745 */
/* 1746 */
/* 1747 */
/* 1748 */
/* 1749 */
/* 1750 */
/* 1751 */
/* 1752 */
/* 1753 */
/* 1754 */
/* 1755 */
/* 1756 */
/* 1757 */
/* 1758 */
/* 1759 */
/* 1760 */
/* 1761 */
/* 1762 */
/* 1763 */
/* 1764 */
/* 1765 */
/* 1766 */
/* 1767 */
/* 1768 */
/* 1769 */
/* 1770 */
/* 1771 */
/* 1772 */
/* 1773 */
/* 1774 */
/* 1775 */
/* 1776 */
/* 1777 */
/* 1778 */
/* 1779 */
/* 1780 */
/* 1781 */
/* 1782 */
/* 1783 */
/* 1784 */
/* 1785 */
/* 1786 */
/* 1787 */
/* 1788 */
/* 1789 */
/* 1790 */
/* 1791 */
/* 1792 */
/* 1793 */
/* 1794 */
/* 1795 */
/* 1796 */
/* 1797 */
/* 1798 */
/* 1799 */
/* 1800 */
/* 1802 */
/* 1803 */
/* 1804 */
/* 1805 */
/* 1806 */
/* 1807 */
/* 1808 */
/* 1809 */
/* 1810 */
/* 1811 */
/* 1812 */
/* 1813 */
/* 1814 */
/* 1815 */
/* 1816 */
/* 1817 */
/* 1818 */
/* 1819 */
/* 1820 */
/* 1821 */
/* 1822 */
/* 1823 */
/* 1824 */
/* 1825 */
/* 1826 */
/* 1827 */
/* 1828 */
/* 1829 */
/* 1830 */
/* 1831 */
/* 1832 */
/* 1833 */
/* 1834 */
/* 1835 */
/* 1836 */
/* 1837 */
/* 1838 */
/* 1839 */
/* 1840 */
/* 1841 */
/* 1842 */
/* 1843 */
/* 1844 */
/* 1845 */
/* 1846 */
/* 1847 */
/* 1848 */
/* 1849 */
/* 1850 */
/* 1851 */
/* 1852 */
/* 1853 */
/* 1854 */
/* 1855 */
/* 1856 */
/* 1857 */
/* 1858 */
/* 1859 */
/* 1860 */
/* 1861 */
/* 1862 */
/* 1863 */
/* 1864 */
/* 1865 */
/* 1866 */
/* 1867 */
/* 1868 */
/* 1869 */
/* 1870 */
/* 1871 */
/* 1872 */
/* 1873 */
/* 1874 */
/* 1875 */
/* 1876 */
/* 1877 */
/* 1878 */
/* 1879 */
/* 1901 */
/* 1902 */
/* 1903 */
/* 1951 */
/* 1952 */
/* 1953 */
/* 1954 */
/* 1955 */
/* 2001 */
/* 2002 */
/* 2003 */
/* 2021 */
/* 2022 */
/* 3001 */
/* 3002 */
/* 3003 */
/* 3004 */
/* 3005 */
/* 3006 */
/* 3007 */
/* 3008 */
/* 3009 */
/* 3010 */
/* 3011 */
/* 3012 */
/* 3013 */
/* 3014 */
/* 3015 */
/* 3016 */
/* 3017 */
/* 3018 */
/* 3019 */
/* 3020 */
/* 3021 */
/* 3022 */
/* 3023 */
/* 3024 */
/* 3025 */
/* 3026 */
/* 3027 */
/* 3028 */
/* 3029 */
/* 3030 */
/* 3031 */
/* 3032 */
/* 3033 */
/* 3034 */
/* 3035 */
/* 3036 */
/* 3037 */
/* 3038 */
/* 3039 */
/* 3040 */
/* 3041 */
/* 3042 */
/* 3043 */
/* 3044 */
/* 3045 */
/* 3046 */
/* 3047 */
/* 3048 */
/* 3049 */
/* 3050 */
/* 3051 */
/* 3052 */
/* 3053 */
/* 3054 */
/* 3055 */
/* 3056 */
/* 3057 */
/* 3058 */
/* 3059 */
/* 3060 */
/* 3061 */
/* 3062 */
/* 3063 */
/* 3064 */
/* 3065 */
/* 3066 */
/* 3067 */
/* 3068 */
/* 3069 non-W3C */
/* 3070 non-W3C */
/* 3071 */
/* 3072 */
/* 3073 */
/* 3074 */
/* 3075 */
/* 3076 */
/* 3077 */
/* 3078 */
/* 3079 */
/* 3080 */
/* 3081 */
/* 3082 */
/* 3083 */
/* 3084 */
/* 3085 */
/* 3085 */
/* 3086 */
/* 3087 */
/* 3088 */
/* 3089 */
/* 3090 */
/* 4000 */
/* 4900 */
/* 4901 */
/* 5001 */
/* 5002 */
/* 5003 */
/* 5004 */
/* 5005 */
/* 5006 */
/* 5007 */
/* 5008 */
/* 5009 */
/* 5010 */
/* 5011 */
/* 5012 */
/* 5013 */
/* 5014 */
/* 5015 */
/* 5016 */
/* 5017 */
/* 5018 */
/* 5019 */
/* 5020 */
/* 5021 */
/* 5022 */
/* 5023 */
/* 5024 */
/* 5025 */
/* 5026 */
/* 5027 */
/* 5028 */
/* 5029 */
/* 5030 */
/* 5031 */
/* 5032 */
/* 5033 */
/* 5034 */
/* 5035 */
/* 5036 */
/* 5037 */
/* 6001 */
/* 6002 */
/* 6003 */
/* 6004 */
/* *
 * xmlGenericErrorFunc:
 * @ctx:  a parsing context
 * @msg:  the message
 * @...:  the extra arguments of the varags to format the message
 *
 * Signature of the function to use when there is an error and
 * no parsing or validity context available .
 */
/* *
 * xmlStructuredErrorFunc:
 * @userData:  user provided data for the error callback
 * @error:  the error being raised.
 *
 * Signature of the function to use when there is an error and
 * the module handles the new error reporting mechanism.
 */
pub type xmlStructuredErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlErrorPtr) -> ()>;
pub type xmlErrorPtr = *mut xmlError;
pub type endElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type startElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *mut *const xmlChar,
                                _: std::os::raw::c_int, _: std::os::raw::c_int,
                                _: *mut *const xmlChar) -> ()>;
pub type externalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type cdataBlockSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type getParameterEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
/*
 * Summary: interface for the XML entities handling
 * Description: this module provides some of the entity API needed
 *              for the parser and applications.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The different valid entity types.
 */
/*
 * An unit of storage for an entity, contains the string, the value
 * and the linkind data needed for the linking in the hash table.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: std::os::raw::c_int,
    pub checked: std::os::raw::c_int,
}
pub type xmlEntityType = std::os::raw::c_uint;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub type fatalErrorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type errorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type warningSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type commentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type processingInstructionSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type ignorableWhitespaceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type charactersSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type referenceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type endElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type startElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *mut *const xmlChar) -> ()>;
pub type endDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type startDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type setDocumentLocatorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlSAXLocatorPtr)
               -> ()>;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlSAXLocator = _xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getSystemId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getLineNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                  -> std::os::raw::c_int>,
    pub getColumnNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                    -> std::os::raw::c_int>,
}
pub type unparsedEntityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type elementDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: xmlElementContentPtr)
               -> ()>;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
pub type xmlElementContentOccur = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub type attributeDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: std::os::raw::c_int,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: xmlEnumerationPtr) -> ()>;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type notationDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type entityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: *const xmlChar, _: *mut xmlChar) -> ()>;
pub type getEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type resolveEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlParserInputPtr>;
pub type hasExternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type hasInternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type isStandaloneSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type internalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
pub type xmlBufferAllocationScheme = std::os::raw::c_uint;
pub const XML_BUFFER_ALLOC_BOUNDED: xmlBufferAllocationScheme = 5;
pub const XML_BUFFER_ALLOC_HYBRID: xmlBufferAllocationScheme = 4;
pub const XML_BUFFER_ALLOC_IO: xmlBufferAllocationScheme = 3;
pub const XML_BUFFER_ALLOC_IMMUTABLE: xmlBufferAllocationScheme = 2;
pub const XML_BUFFER_ALLOC_EXACT: xmlBufferAllocationScheme = 1;
pub const XML_BUFFER_ALLOC_DOUBLEIT: xmlBufferAllocationScheme = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlBuffer {
    pub content: *mut xmlChar,
    pub use_0: std::os::raw::c_uint,
    pub size: std::os::raw::c_uint,
    pub alloc: xmlBufferAllocationScheme,
    pub contentIO: *mut xmlChar,
}
pub type xmlBuffer = _xmlBuffer;
pub type xmlBufferPtr = *mut xmlBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegexp {
    pub string: *mut xmlChar,
    pub nbStates: std::os::raw::c_int,
    pub states: *mut xmlRegStatePtr,
    pub nbAtoms: std::os::raw::c_int,
    pub atoms: *mut xmlRegAtomPtr,
    pub nbCounters: std::os::raw::c_int,
    pub counters: *mut xmlRegCounter,
    pub determinist: std::os::raw::c_int,
    pub flags: std::os::raw::c_int,
    pub nbstates: std::os::raw::c_int,
    pub compact: *mut std::os::raw::c_int,
    pub transdata: *mut *mut std::os::raw::c_void,
    pub nbstrings: std::os::raw::c_int,
    pub stringMap: *mut *mut xmlChar,
}
pub type xmlRegexp = _xmlRegexp;
pub type xmlRegexpPtr = *mut xmlRegexp;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegExecCtxt {
    pub status: std::os::raw::c_int,
    pub determinist: std::os::raw::c_int,
    pub comp: xmlRegexpPtr,
    pub callback: xmlRegExecCallbacks,
    pub data: *mut std::os::raw::c_void,
    pub state: xmlRegStatePtr,
    pub transno: std::os::raw::c_int,
    pub transcount: std::os::raw::c_int,
    pub maxRollbacks: std::os::raw::c_int,
    pub nbRollbacks: std::os::raw::c_int,
    pub rollbacks: *mut xmlRegExecRollback,
    pub counts: *mut std::os::raw::c_int,
    pub inputStackMax: std::os::raw::c_int,
    pub inputStackNr: std::os::raw::c_int,
    pub index: std::os::raw::c_int,
    pub charStack: *mut std::os::raw::c_int,
    pub inputString: *const xmlChar,
    pub inputStack: xmlRegInputTokenPtr,
    pub errStateNo: std::os::raw::c_int,
    pub errState: xmlRegStatePtr,
    pub errString: *mut xmlChar,
    pub errCounts: *mut std::os::raw::c_int,
    pub nbPush: std::os::raw::c_int,
}
pub type xmlRegInputTokenPtr = *mut xmlRegInputToken;
/* save the automata state if it has some */
pub type xmlRegInputToken = _xmlRegInputToken;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegInputToken {
    pub value: *mut xmlChar,
    pub data: *mut std::os::raw::c_void,
}
pub type xmlRegExecRollback = _xmlRegExecRollback;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlRegExecRollback {
    pub state: xmlRegStatePtr,
    pub index: std::os::raw::c_int,
    pub nextbranch: std::os::raw::c_int,
    pub counts: *mut std::os::raw::c_int,
}
pub type xmlRegExecCallbacks
    =
    Option<unsafe extern "C" fn(_: xmlRegExecCtxtPtr, _: *const xmlChar,
                                _: *mut std::os::raw::c_void, _: *mut std::os::raw::c_void)
               -> ()>;
pub type xmlRegExecCtxtPtr = *mut xmlRegExecCtxt;
pub type xmlRegExecCtxt = _xmlRegExecCtxt;
pub type xmlRegParserCtxtPtr = *mut xmlRegParserCtxt;
pub type xmlRegParserCtxt = _xmlAutomata;
/*
 * Summary: interface for the memory allocator
 * Description: provides interfaces for the memory allocator,
 *              including debugging capabilities.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * DEBUG_MEMORY:
 *
 * DEBUG_MEMORY replaces the allocator with a collect and debug
 * shell to the libc allocator.
 * DEBUG_MEMORY should only be activated when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/* #define DEBUG_MEMORY_FREED */
/* #define DEBUG_MEMORY_LOCATION */
/* *
 * DEBUG_MEMORY_LOCATION:
 *
 * DEBUG_MEMORY_LOCATION should be activated only when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/*
 * The XML memory wrapper support 4 basic overloadable functions.
 */
/* *
 * xmlFreeFunc:
 * @mem: an already allocated block of memory
 *
 * Signature for a free() implementation.
 */
pub type xmlFreeFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type xmlRegTransPtr = *mut xmlRegTrans;
pub const XML_ERR_NO_MEMORY: C2RustUnnamed_3 = 2;
pub const XML_FROM_REGEXP: C2RustUnnamed_2 = 14;
pub type xmlGenericErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
/* *
 * xmlMallocFunc:
 * @size:  the size requested in bytes
 *
 * Signature for a malloc() implementation.
 *
 * Returns a pointer to the newly allocated block or NULL in case of error.
 */
pub type xmlMallocFunc
    =
    Option<unsafe extern "C" fn(_: size_t) -> *mut std::os::raw::c_void>;
pub type xmlChRangeGroup = _xmlChRangeGroup;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChRangeGroup {
    pub nbShortRange: std::os::raw::c_int,
    pub nbLongRange: std::os::raw::c_int,
    pub shortRange: *const xmlChSRange,
    pub longRange: *const xmlChLRange,
}
pub type xmlChLRange = _xmlChLRange;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChLRange {
    pub low: std::os::raw::c_uint,
    pub high: std::os::raw::c_uint,
}
/*
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character
 *               range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
 */
/*
 * Define our typedefs and structures
 *
 */
pub type xmlChSRange = _xmlChSRange;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlChSRange {
    pub low: std::os::raw::c_ushort,
    pub high: std::os::raw::c_ushort,
}
/* *
 * xmlReallocFunc:
 * @mem: an already allocated block of memory
 * @size:  the new size requested in bytes
 *
 * Signature for a realloc() implementation.
 *
 * Returns a pointer to the newly reallocated block or NULL in case of error.
 */
pub type xmlReallocFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: size_t)
               -> *mut std::os::raw::c_void>;
pub const XML_REGEXP_COMPILE_ERROR: C2RustUnnamed_3 = 1450;
pub type xmlRegCounterPtr = *mut xmlRegCounter;
/* LIBXML_AUTOMATA_ENABLED */
/* ***********************************************************************
 *									*
 *		Formal Expression handling code				*
 *									*
 ************************************************************************/
/* ***********************************************************************
 *									*
 *		Expression handling context				*
 *									*
 ************************************************************************/
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlExpCtxt {
    pub dict: xmlDictPtr,
    pub table: *mut xmlExpNodePtr,
    pub size: std::os::raw::c_int,
    pub nbElems: std::os::raw::c_int,
    pub nb_nodes: std::os::raw::c_int,
    pub maxNodes: std::os::raw::c_int,
    pub expr: *const std::os::raw::c_char,
    pub cur: *const std::os::raw::c_char,
    pub nb_cons: std::os::raw::c_int,
    pub tabSize: std::os::raw::c_int,
}
pub type xmlExpNodePtr = *mut xmlExpNode;
pub type xmlExpNode = _xmlExpNode;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlExpNode {
    pub type_0: std::os::raw::c_uchar,
    pub info: std::os::raw::c_uchar,
    pub key: std::os::raw::c_ushort,
    pub ref_0: std::os::raw::c_uint,
    pub c_max: std::os::raw::c_int,
    pub exp_left: xmlExpNodePtr,
    pub next: xmlExpNodePtr,
    pub field: C2RustUnnamed,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub count: C2RustUnnamed_1,
    pub children: C2RustUnnamed_0,
    pub f_str: *const xmlChar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub f_right: xmlExpNodePtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_min: std::os::raw::c_int,
    pub f_max: std::os::raw::c_int,
}
pub type xmlExpCtxt = _xmlExpCtxt;
pub type xmlExpCtxtPtr = *mut xmlExpCtxt;
pub type xmlExpNodeType = std::os::raw::c_uint;
pub const XML_EXP_COUNT: xmlExpNodeType = 5;
pub const XML_EXP_OR: xmlExpNodeType = 4;
pub const XML_EXP_SEQ: xmlExpNodeType = 3;
pub const XML_EXP_ATOM: xmlExpNodeType = 2;
pub const XML_EXP_FORBID: xmlExpNodeType = 1;
pub const XML_EXP_EMPTY: xmlExpNodeType = 0;
pub const XML_EXP_NILABLE: C2RustUnnamed_4 = 1;
pub type C2RustUnnamed_2 = std::os::raw::c_uint;
pub const XML_FROM_URI: C2RustUnnamed_2 = 30;
pub const XML_FROM_BUFFER: C2RustUnnamed_2 = 29;
pub const XML_FROM_SCHEMATRONV: C2RustUnnamed_2 = 28;
pub const XML_FROM_I18N: C2RustUnnamed_2 = 27;
pub const XML_FROM_MODULE: C2RustUnnamed_2 = 26;
pub const XML_FROM_WRITER: C2RustUnnamed_2 = 25;
pub const XML_FROM_CHECK: C2RustUnnamed_2 = 24;
pub const XML_FROM_VALID: C2RustUnnamed_2 = 23;
pub const XML_FROM_XSLT: C2RustUnnamed_2 = 22;
pub const XML_FROM_C14N: C2RustUnnamed_2 = 21;
pub const XML_FROM_CATALOG: C2RustUnnamed_2 = 20;
pub const XML_FROM_RELAXNGV: C2RustUnnamed_2 = 19;
pub const XML_FROM_RELAXNGP: C2RustUnnamed_2 = 18;
pub const XML_FROM_SCHEMASV: C2RustUnnamed_2 = 17;
pub const XML_FROM_SCHEMASP: C2RustUnnamed_2 = 16;
pub const XML_FROM_DATATYPE: C2RustUnnamed_2 = 15;
pub const XML_FROM_XPOINTER: C2RustUnnamed_2 = 13;
pub const XML_FROM_XPATH: C2RustUnnamed_2 = 12;
pub const XML_FROM_XINCLUDE: C2RustUnnamed_2 = 11;
pub const XML_FROM_HTTP: C2RustUnnamed_2 = 10;
pub const XML_FROM_FTP: C2RustUnnamed_2 = 9;
pub const XML_FROM_IO: C2RustUnnamed_2 = 8;
pub const XML_FROM_OUTPUT: C2RustUnnamed_2 = 7;
pub const XML_FROM_MEMORY: C2RustUnnamed_2 = 6;
pub const XML_FROM_HTML: C2RustUnnamed_2 = 5;
pub const XML_FROM_DTD: C2RustUnnamed_2 = 4;
pub const XML_FROM_NAMESPACE: C2RustUnnamed_2 = 3;
pub const XML_FROM_TREE: C2RustUnnamed_2 = 2;
pub const XML_FROM_PARSER: C2RustUnnamed_2 = 1;
pub const XML_FROM_NONE: C2RustUnnamed_2 = 0;
pub type C2RustUnnamed_3 = std::os::raw::c_uint;
pub const XML_BUF_OVERFLOW: C2RustUnnamed_3 = 7000;
pub const XML_I18N_NO_OUTPUT: C2RustUnnamed_3 = 6004;
pub const XML_I18N_CONV_FAILED: C2RustUnnamed_3 = 6003;
pub const XML_I18N_EXCESS_HANDLER: C2RustUnnamed_3 = 6002;
pub const XML_I18N_NO_HANDLER: C2RustUnnamed_3 = 6001;
pub const XML_I18N_NO_NAME: C2RustUnnamed_3 = 6000;
pub const XML_CHECK_NAME_NOT_NULL: C2RustUnnamed_3 = 5037;
pub const XML_CHECK_WRONG_NAME: C2RustUnnamed_3 = 5036;
pub const XML_CHECK_OUTSIDE_DICT: C2RustUnnamed_3 = 5035;
pub const XML_CHECK_NOT_NCNAME: C2RustUnnamed_3 = 5034;
pub const XML_CHECK_NO_DICT: C2RustUnnamed_3 = 5033;
pub const XML_CHECK_NOT_UTF8: C2RustUnnamed_3 = 5032;
pub const XML_CHECK_NS_ANCESTOR: C2RustUnnamed_3 = 5031;
pub const XML_CHECK_NS_SCOPE: C2RustUnnamed_3 = 5030;
pub const XML_CHECK_WRONG_PARENT: C2RustUnnamed_3 = 5029;
pub const XML_CHECK_NO_HREF: C2RustUnnamed_3 = 5028;
pub const XML_CHECK_NOT_NS_DECL: C2RustUnnamed_3 = 5027;
pub const XML_CHECK_NOT_ENTITY_DECL: C2RustUnnamed_3 = 5026;
pub const XML_CHECK_NOT_ELEM_DECL: C2RustUnnamed_3 = 5025;
pub const XML_CHECK_NOT_ATTR_DECL: C2RustUnnamed_3 = 5024;
pub const XML_CHECK_NOT_ATTR: C2RustUnnamed_3 = 5023;
pub const XML_CHECK_NOT_DTD: C2RustUnnamed_3 = 5022;
pub const XML_CHECK_WRONG_NEXT: C2RustUnnamed_3 = 5021;
pub const XML_CHECK_NO_NEXT: C2RustUnnamed_3 = 5020;
pub const XML_CHECK_WRONG_PREV: C2RustUnnamed_3 = 5019;
pub const XML_CHECK_NO_PREV: C2RustUnnamed_3 = 5018;
pub const XML_CHECK_WRONG_DOC: C2RustUnnamed_3 = 5017;
pub const XML_CHECK_NO_ELEM: C2RustUnnamed_3 = 5016;
pub const XML_CHECK_NO_NAME: C2RustUnnamed_3 = 5015;
pub const XML_CHECK_NO_DOC: C2RustUnnamed_3 = 5014;
pub const XML_CHECK_NO_PARENT: C2RustUnnamed_3 = 5013;
pub const XML_CHECK_ENTITY_TYPE: C2RustUnnamed_3 = 5012;
pub const XML_CHECK_UNKNOWN_NODE: C2RustUnnamed_3 = 5011;
pub const XML_CHECK_FOUND_NOTATION: C2RustUnnamed_3 = 5010;
pub const XML_CHECK_FOUND_FRAGMENT: C2RustUnnamed_3 = 5009;
pub const XML_CHECK_FOUND_DOCTYPE: C2RustUnnamed_3 = 5008;
pub const XML_CHECK_FOUND_COMMENT: C2RustUnnamed_3 = 5007;
pub const XML_CHECK_FOUND_PI: C2RustUnnamed_3 = 5006;
pub const XML_CHECK_FOUND_ENTITY: C2RustUnnamed_3 = 5005;
pub const XML_CHECK_FOUND_ENTITYREF: C2RustUnnamed_3 = 5004;
pub const XML_CHECK_FOUND_CDATA: C2RustUnnamed_3 = 5003;
pub const XML_CHECK_FOUND_TEXT: C2RustUnnamed_3 = 5002;
pub const XML_CHECK_FOUND_ATTRIBUTE: C2RustUnnamed_3 = 5001;
pub const XML_CHECK_FOUND_ELEMENT: C2RustUnnamed_3 = 5000;
pub const XML_MODULE_CLOSE: C2RustUnnamed_3 = 4901;
pub const XML_MODULE_OPEN: C2RustUnnamed_3 = 4900;
pub const XML_SCHEMATRONV_REPORT: C2RustUnnamed_3 = 4001;
pub const XML_SCHEMATRONV_ASSERT: C2RustUnnamed_3 = 4000;
pub const XML_SCHEMAP_COS_ALL_LIMITED: C2RustUnnamed_3 = 3091;
pub const XML_SCHEMAP_A_PROPS_CORRECT_3: C2RustUnnamed_3 = 3090;
pub const XML_SCHEMAP_AU_PROPS_CORRECT: C2RustUnnamed_3 = 3089;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_2: C2RustUnnamed_3 = 3088;
pub const XML_SCHEMAP_AG_PROPS_CORRECT: C2RustUnnamed_3 = 3087;
pub const XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH: C2RustUnnamed_3 = 3086;
pub const XML_SCHEMAP_WARN_ATTR_REDECL_PROH: C2RustUnnamed_3 = 3085;
pub const XML_SCHEMAP_WARN_UNLOCATED_SCHEMA: C2RustUnnamed_3 = 3084;
pub const XML_SCHEMAP_WARN_SKIP_SCHEMA: C2RustUnnamed_3 = 3083;
pub const XML_SCHEMAP_SRC_IMPORT: C2RustUnnamed_3 = 3082;
pub const XML_SCHEMAP_SRC_REDEFINE: C2RustUnnamed_3 = 3081;
pub const XML_SCHEMAP_C_PROPS_CORRECT: C2RustUnnamed_3 = 3080;
pub const XML_SCHEMAP_A_PROPS_CORRECT_2: C2RustUnnamed_3 = 3079;
pub const XML_SCHEMAP_AU_PROPS_CORRECT_2: C2RustUnnamed_3 = 3078;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3: C2RustUnnamed_3 = 3077;
pub const XML_SCHEMAP_SRC_CT_1: C2RustUnnamed_3 = 3076;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_2: C2RustUnnamed_3 = 3075;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_1: C2RustUnnamed_3 = 3074;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3: C2RustUnnamed_3 = 3073;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2: C2RustUnnamed_3 = 3072;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1: C2RustUnnamed_3 = 3071;
pub const XML_SCHEMAP_NOT_DETERMINISTIC: C2RustUnnamed_3 = 3070;
pub const XML_SCHEMAP_INTERNAL: C2RustUnnamed_3 = 3069;
pub const XML_SCHEMAP_SRC_IMPORT_2_2: C2RustUnnamed_3 = 3068;
pub const XML_SCHEMAP_SRC_IMPORT_2_1: C2RustUnnamed_3 = 3067;
pub const XML_SCHEMAP_SRC_IMPORT_2: C2RustUnnamed_3 = 3066;
pub const XML_SCHEMAP_SRC_IMPORT_1_2: C2RustUnnamed_3 = 3065;
pub const XML_SCHEMAP_SRC_IMPORT_1_1: C2RustUnnamed_3 = 3064;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_1: C2RustUnnamed_3 = 3063;
pub const XML_SCHEMAP_CVC_SIMPLE_TYPE: C2RustUnnamed_3 = 3062;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2: C2RustUnnamed_3 = 3061;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1: C2RustUnnamed_3 = 3060;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_1: C2RustUnnamed_3 = 3059;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_1: C2RustUnnamed_3 = 3058;
pub const XML_SCHEMAP_NO_XSI: C2RustUnnamed_3 = 3057;
pub const XML_SCHEMAP_NO_XMLNS: C2RustUnnamed_3 = 3056;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_4: C2RustUnnamed_3 = 3055;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_2: C2RustUnnamed_3 = 3054;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_1: C2RustUnnamed_3 = 3053;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_2: C2RustUnnamed_3 = 3052;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_1: C2RustUnnamed_3 = 3051;
pub const XML_SCHEMAP_SRC_INCLUDE: C2RustUnnamed_3 = 3050;
pub const XML_SCHEMAP_E_PROPS_CORRECT_6: C2RustUnnamed_3 = 3049;
pub const XML_SCHEMAP_E_PROPS_CORRECT_5: C2RustUnnamed_3 = 3048;
pub const XML_SCHEMAP_E_PROPS_CORRECT_4: C2RustUnnamed_3 = 3047;
pub const XML_SCHEMAP_E_PROPS_CORRECT_3: C2RustUnnamed_3 = 3046;
pub const XML_SCHEMAP_E_PROPS_CORRECT_2: C2RustUnnamed_3 = 3045;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_2: C2RustUnnamed_3 = 3044;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_1: C2RustUnnamed_3 = 3043;
pub const XML_SCHEMAP_P_PROPS_CORRECT_1: C2RustUnnamed_3 = 3042;
pub const XML_SCHEMAP_SRC_ELEMENT_3: C2RustUnnamed_3 = 3041;
pub const XML_SCHEMAP_SRC_ELEMENT_2_2: C2RustUnnamed_3 = 3040;
pub const XML_SCHEMAP_SRC_ELEMENT_2_1: C2RustUnnamed_3 = 3039;
pub const XML_SCHEMAP_SRC_ELEMENT_1: C2RustUnnamed_3 = 3038;
pub const XML_SCHEMAP_S4S_ATTR_INVALID_VALUE: C2RustUnnamed_3 = 3037;
pub const XML_SCHEMAP_S4S_ATTR_MISSING: C2RustUnnamed_3 = 3036;
pub const XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED: C2RustUnnamed_3 = 3035;
pub const XML_SCHEMAP_S4S_ELEM_MISSING: C2RustUnnamed_3 = 3034;
pub const XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED: C2RustUnnamed_3 = 3033;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_2: C2RustUnnamed_3 = 3032;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_1: C2RustUnnamed_3 = 3031;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5: C2RustUnnamed_3 = 3030;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4: C2RustUnnamed_3 = 3029;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3: C2RustUnnamed_3 = 3028;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1: C2RustUnnamed_3 = 3027;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2: C2RustUnnamed_3 = 3026;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2: C2RustUnnamed_3 = 3025;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1: C2RustUnnamed_3 = 3024;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_1: C2RustUnnamed_3 = 3023;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5: C2RustUnnamed_3 = 3022;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4: C2RustUnnamed_3 = 3021;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3: C2RustUnnamed_3 = 3020;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2: C2RustUnnamed_3 = 3019;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1: C2RustUnnamed_3 = 3018;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2: C2RustUnnamed_3 = 3017;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1: C2RustUnnamed_3 = 3016;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_1: C2RustUnnamed_3 = 3015;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2: C2RustUnnamed_3 = 3014;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1: C2RustUnnamed_3 = 3013;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_2: C2RustUnnamed_3 = 3012;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_1: C2RustUnnamed_3 = 3011;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_3: C2RustUnnamed_3 = 3010;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_2: C2RustUnnamed_3 = 3009;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_1: C2RustUnnamed_3 = 3008;
pub const XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES: C2RustUnnamed_3 =
    3007;
pub const XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE: C2RustUnnamed_3 = 3006;
pub const XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE: C2RustUnnamed_3 =
    3005;
pub const XML_SCHEMAP_SRC_RESOLVE: C2RustUnnamed_3 = 3004;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_4: C2RustUnnamed_3 = 3003;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_3: C2RustUnnamed_3 = 3002;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_2: C2RustUnnamed_3 = 3001;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_1: C2RustUnnamed_3 = 3000;
pub const XML_HTTP_UNKNOWN_HOST: C2RustUnnamed_3 = 2022;
pub const XML_HTTP_USE_IP: C2RustUnnamed_3 = 2021;
pub const XML_HTTP_URL_SYNTAX: C2RustUnnamed_3 = 2020;
pub const XML_FTP_URL_SYNTAX: C2RustUnnamed_3 = 2003;
pub const XML_FTP_ACCNT: C2RustUnnamed_3 = 2002;
pub const XML_FTP_EPSV_ANSWER: C2RustUnnamed_3 = 2001;
pub const XML_FTP_PASV_ANSWER: C2RustUnnamed_3 = 2000;
pub const XML_C14N_RELATIVE_NAMESPACE: C2RustUnnamed_3 = 1955;
pub const XML_C14N_UNKNOW_NODE: C2RustUnnamed_3 = 1954;
pub const XML_C14N_INVALID_NODE: C2RustUnnamed_3 = 1953;
pub const XML_C14N_CREATE_STACK: C2RustUnnamed_3 = 1952;
pub const XML_C14N_REQUIRES_UTF8: C2RustUnnamed_3 = 1951;
pub const XML_C14N_CREATE_CTXT: C2RustUnnamed_3 = 1950;
pub const XML_XPTR_EXTRA_OBJECTS: C2RustUnnamed_3 = 1903;
pub const XML_XPTR_EVAL_FAILED: C2RustUnnamed_3 = 1902;
pub const XML_XPTR_CHILDSEQ_START: C2RustUnnamed_3 = 1901;
pub const XML_XPTR_UNKNOWN_SCHEME: C2RustUnnamed_3 = 1900;
pub const XML_SCHEMAV_MISC: C2RustUnnamed_3 = 1879;
pub const XML_SCHEMAV_CVC_WILDCARD: C2RustUnnamed_3 = 1878;
pub const XML_SCHEMAV_CVC_IDC: C2RustUnnamed_3 = 1877;
pub const XML_SCHEMAV_CVC_TYPE_2: C2RustUnnamed_3 = 1876;
pub const XML_SCHEMAV_CVC_TYPE_1: C2RustUnnamed_3 = 1875;
pub const XML_SCHEMAV_CVC_AU: C2RustUnnamed_3 = 1874;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_1: C2RustUnnamed_3 = 1873;
pub const XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING: C2RustUnnamed_3 = 1872;
pub const XML_SCHEMAV_ELEMENT_CONTENT: C2RustUnnamed_3 = 1871;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2: C2RustUnnamed_3 = 1870;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1: C2RustUnnamed_3 = 1869;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_4: C2RustUnnamed_3 = 1868;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2: C2RustUnnamed_3 = 1867;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1: C2RustUnnamed_3 = 1866;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1: C2RustUnnamed_3 = 1865;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_4: C2RustUnnamed_3 = 1864;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_3: C2RustUnnamed_3 = 1863;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_2: C2RustUnnamed_3 = 1862;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_1: C2RustUnnamed_3 = 1861;
pub const XML_SCHEMAV_CVC_ELT_7: C2RustUnnamed_3 = 1860;
pub const XML_SCHEMAV_CVC_ELT_6: C2RustUnnamed_3 = 1859;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_2: C2RustUnnamed_3 = 1858;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_1: C2RustUnnamed_3 = 1857;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_1: C2RustUnnamed_3 = 1856;
pub const XML_SCHEMAV_CVC_ELT_5_2_1: C2RustUnnamed_3 = 1855;
pub const XML_SCHEMAV_CVC_ELT_5_1_2: C2RustUnnamed_3 = 1854;
pub const XML_SCHEMAV_CVC_ELT_5_1_1: C2RustUnnamed_3 = 1853;
pub const XML_SCHEMAV_CVC_ELT_4_3: C2RustUnnamed_3 = 1852;
pub const XML_SCHEMAV_CVC_ELT_4_2: C2RustUnnamed_3 = 1851;
pub const XML_SCHEMAV_CVC_ELT_4_1: C2RustUnnamed_3 = 1850;
pub const XML_SCHEMAV_CVC_ELT_3_2_2: C2RustUnnamed_3 = 1849;
pub const XML_SCHEMAV_CVC_ELT_3_2_1: C2RustUnnamed_3 = 1848;
pub const XML_SCHEMAV_CVC_ELT_3_1: C2RustUnnamed_3 = 1847;
pub const XML_SCHEMAV_CVC_ELT_2: C2RustUnnamed_3 = 1846;
pub const XML_SCHEMAV_CVC_ELT_1: C2RustUnnamed_3 = 1845;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4: C2RustUnnamed_3 = 1844;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3: C2RustUnnamed_3 = 1843;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2: C2RustUnnamed_3 = 1842;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1: C2RustUnnamed_3 = 1841;
pub const XML_SCHEMAV_CVC_ENUMERATION_VALID: C2RustUnnamed_3 = 1840;
pub const XML_SCHEMAV_CVC_PATTERN_VALID: C2RustUnnamed_3 = 1839;
pub const XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID: C2RustUnnamed_3 = 1838;
pub const XML_SCHEMAV_CVC_TOTALDIGITS_VALID: C2RustUnnamed_3 = 1837;
pub const XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID: C2RustUnnamed_3 = 1836;
pub const XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID: C2RustUnnamed_3 = 1835;
pub const XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID: C2RustUnnamed_3 = 1834;
pub const XML_SCHEMAV_CVC_MININCLUSIVE_VALID: C2RustUnnamed_3 = 1833;
pub const XML_SCHEMAV_CVC_MAXLENGTH_VALID: C2RustUnnamed_3 = 1832;
pub const XML_SCHEMAV_CVC_MINLENGTH_VALID: C2RustUnnamed_3 = 1831;
pub const XML_SCHEMAV_CVC_LENGTH_VALID: C2RustUnnamed_3 = 1830;
pub const XML_SCHEMAV_CVC_FACET_VALID: C2RustUnnamed_3 = 1829;
pub const XML_SCHEMAV_CVC_TYPE_3_1_2: C2RustUnnamed_3 = 1828;
pub const XML_SCHEMAV_CVC_TYPE_3_1_1: C2RustUnnamed_3 = 1827;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3: C2RustUnnamed_3 = 1826;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2: C2RustUnnamed_3 = 1825;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1: C2RustUnnamed_3 = 1824;
pub const XML_SCHEMAV_FACET: C2RustUnnamed_3 = 1823;
pub const XML_SCHEMAV_VALUE: C2RustUnnamed_3 = 1822;
pub const XML_SCHEMAV_ATTRINVALID: C2RustUnnamed_3 = 1821;
pub const XML_SCHEMAV_ATTRUNKNOWN: C2RustUnnamed_3 = 1820;
pub const XML_SCHEMAV_NOTSIMPLE: C2RustUnnamed_3 = 1819;
pub const XML_SCHEMAV_INTERNAL: C2RustUnnamed_3 = 1818;
pub const XML_SCHEMAV_CONSTRUCT: C2RustUnnamed_3 = 1817;
pub const XML_SCHEMAV_NOTDETERMINIST: C2RustUnnamed_3 = 1816;
pub const XML_SCHEMAV_INVALIDELEM: C2RustUnnamed_3 = 1815;
pub const XML_SCHEMAV_INVALIDATTR: C2RustUnnamed_3 = 1814;
pub const XML_SCHEMAV_EXTRACONTENT: C2RustUnnamed_3 = 1813;
pub const XML_SCHEMAV_NOTNILLABLE: C2RustUnnamed_3 = 1812;
pub const XML_SCHEMAV_HAVEDEFAULT: C2RustUnnamed_3 = 1811;
pub const XML_SCHEMAV_ELEMCONT: C2RustUnnamed_3 = 1810;
pub const XML_SCHEMAV_NOTEMPTY: C2RustUnnamed_3 = 1809;
pub const XML_SCHEMAV_ISABSTRACT: C2RustUnnamed_3 = 1808;
pub const XML_SCHEMAV_NOROLLBACK: C2RustUnnamed_3 = 1807;
pub const XML_SCHEMAV_NOTYPE: C2RustUnnamed_3 = 1806;
pub const XML_SCHEMAV_WRONGELEM: C2RustUnnamed_3 = 1805;
pub const XML_SCHEMAV_MISSING: C2RustUnnamed_3 = 1804;
pub const XML_SCHEMAV_NOTTOPLEVEL: C2RustUnnamed_3 = 1803;
pub const XML_SCHEMAV_UNDECLAREDELEM: C2RustUnnamed_3 = 1802;
pub const XML_SCHEMAV_NOROOT: C2RustUnnamed_3 = 1801;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_3: C2RustUnnamed_3 = 1800;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3: C2RustUnnamed_3 = 1799;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2: C2RustUnnamed_3 = 1798;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1: C2RustUnnamed_3 = 1797;
pub const XML_SCHEMAP_SRC_IMPORT_3_2: C2RustUnnamed_3 = 1796;
pub const XML_SCHEMAP_SRC_IMPORT_3_1: C2RustUnnamed_3 = 1795;
pub const XML_SCHEMAP_UNION_NOT_EXPRESSIBLE: C2RustUnnamed_3 = 1794;
pub const XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE: C2RustUnnamed_3 = 1793;
pub const XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER: C2RustUnnamed_3 = 1792;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3: C2RustUnnamed_3 = 1791;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2: C2RustUnnamed_3 = 1790;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2: C2RustUnnamed_3 = 1789;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1: C2RustUnnamed_3 = 1788;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1: C2RustUnnamed_3 = 1787;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_5: C2RustUnnamed_3 = 1786;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_4: C2RustUnnamed_3 = 1785;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_3: C2RustUnnamed_3 = 1784;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_2: C2RustUnnamed_3 = 1783;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_1: C2RustUnnamed_3 = 1782;
pub const XML_SCHEMAP_REF_AND_CONTENT: C2RustUnnamed_3 = 1781;
pub const XML_SCHEMAP_INVALID_ATTR_NAME: C2RustUnnamed_3 = 1780;
pub const XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD: C2RustUnnamed_3 = 1779;
pub const XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION: C2RustUnnamed_3 = 1778;
pub const XML_SCHEMAP_INVALID_ATTR_COMBINATION: C2RustUnnamed_3 = 1777;
pub const XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE: C2RustUnnamed_3 = 1776;
pub const XML_SCHEMAP_RECURSIVE: C2RustUnnamed_3 = 1775;
pub const XML_SCHEMAP_INVALID_ATTR_USE: C2RustUnnamed_3 = 1774;
pub const XML_SCHEMAP_UNKNOWN_MEMBER_TYPE: C2RustUnnamed_3 = 1773;
pub const XML_SCHEMAP_NOT_SCHEMA: C2RustUnnamed_3 = 1772;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI: C2RustUnnamed_3 = 1771;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI: C2RustUnnamed_3 = 1770;
pub const XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD: C2RustUnnamed_3 = 1769;
pub const XML_SCHEMAP_DEF_AND_PREFIX: C2RustUnnamed_3 = 1768;
pub const XML_SCHEMAP_UNKNOWN_PREFIX: C2RustUnnamed_3 = 1767;
pub const XML_SCHEMAP_FAILED_PARSE: C2RustUnnamed_3 = 1766;
pub const XML_SCHEMAP_REDEFINED_NOTATION: C2RustUnnamed_3 = 1765;
pub const XML_SCHEMAP_REDEFINED_ATTR: C2RustUnnamed_3 = 1764;
pub const XML_SCHEMAP_REDEFINED_ATTRGROUP: C2RustUnnamed_3 = 1763;
pub const XML_SCHEMAP_REDEFINED_ELEMENT: C2RustUnnamed_3 = 1762;
pub const XML_SCHEMAP_REDEFINED_TYPE: C2RustUnnamed_3 = 1761;
pub const XML_SCHEMAP_REDEFINED_GROUP: C2RustUnnamed_3 = 1760;
pub const XML_SCHEMAP_NOROOT: C2RustUnnamed_3 = 1759;
pub const XML_SCHEMAP_NOTHING_TO_PARSE: C2RustUnnamed_3 = 1758;
pub const XML_SCHEMAP_FAILED_LOAD: C2RustUnnamed_3 = 1757;
pub const XML_SCHEMAP_REGEXP_INVALID: C2RustUnnamed_3 = 1756;
pub const XML_SCHEMAP_ELEM_DEFAULT_FIXED: C2RustUnnamed_3 = 1755;
pub const XML_SCHEMAP_UNKNOWN_UNION_CHILD: C2RustUnnamed_3 = 1754;
pub const XML_SCHEMAP_UNKNOWN_TYPE: C2RustUnnamed_3 = 1753;
pub const XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD: C2RustUnnamed_3 = 1752;
pub const XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD: C2RustUnnamed_3 = 1751;
pub const XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD: C2RustUnnamed_3 = 1750;
pub const XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD: C2RustUnnamed_3 = 1749;
pub const XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD: C2RustUnnamed_3 = 1748;
pub const XML_SCHEMAP_UNKNOWN_REF: C2RustUnnamed_3 = 1747;
pub const XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD: C2RustUnnamed_3 = 1746;
pub const XML_SCHEMAP_UNKNOWN_NOTATION_CHILD: C2RustUnnamed_3 = 1745;
pub const XML_SCHEMAP_UNKNOWN_LIST_CHILD: C2RustUnnamed_3 = 1744;
pub const XML_SCHEMAP_UNKNOWN_IMPORT_CHILD: C2RustUnnamed_3 = 1743;
pub const XML_SCHEMAP_UNKNOWN_GROUP_CHILD: C2RustUnnamed_3 = 1742;
pub const XML_SCHEMAP_UNKNOWN_FACET_TYPE: C2RustUnnamed_3 = 1741;
pub const XML_SCHEMAP_UNKNOWN_FACET_CHILD: C2RustUnnamed_3 = 1740;
pub const XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD: C2RustUnnamed_3 = 1739;
pub const XML_SCHEMAP_UNKNOWN_ELEM_CHILD: C2RustUnnamed_3 = 1738;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD: C2RustUnnamed_3 = 1737;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD: C2RustUnnamed_3 = 1736;
pub const XML_SCHEMAP_UNKNOWN_CHOICE_CHILD: C2RustUnnamed_3 = 1735;
pub const XML_SCHEMAP_UNKNOWN_BASE_TYPE: C2RustUnnamed_3 = 1734;
pub const XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP: C2RustUnnamed_3 = 1733;
pub const XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD: C2RustUnnamed_3 = 1732;
pub const XML_SCHEMAP_UNKNOWN_ATTR_CHILD: C2RustUnnamed_3 = 1731;
pub const XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD: C2RustUnnamed_3 = 1730;
pub const XML_SCHEMAP_UNKNOWN_ALL_CHILD: C2RustUnnamed_3 = 1729;
pub const XML_SCHEMAP_TYPE_AND_SUBTYPE: C2RustUnnamed_3 = 1728;
pub const XML_SCHEMAP_SIMPLETYPE_NONAME: C2RustUnnamed_3 = 1727;
pub const XML_SCHEMAP_RESTRICTION_NONAME_NOREF: C2RustUnnamed_3 = 1726;
pub const XML_SCHEMAP_REF_AND_SUBTYPE: C2RustUnnamed_3 = 1725;
pub const XML_SCHEMAP_NOTYPE_NOREF: C2RustUnnamed_3 = 1724;
pub const XML_SCHEMAP_NOTATION_NO_NAME: C2RustUnnamed_3 = 1723;
pub const XML_SCHEMAP_NOATTR_NOREF: C2RustUnnamed_3 = 1722;
pub const XML_SCHEMAP_INVALID_WHITE_SPACE: C2RustUnnamed_3 = 1721;
pub const XML_SCHEMAP_INVALID_REF_AND_SUBTYPE: C2RustUnnamed_3 = 1720;
pub const XML_SCHEMAP_INVALID_MINOCCURS: C2RustUnnamed_3 = 1719;
pub const XML_SCHEMAP_INVALID_MAXOCCURS: C2RustUnnamed_3 = 1718;
pub const XML_SCHEMAP_INVALID_FACET_VALUE: C2RustUnnamed_3 = 1717;
pub const XML_SCHEMAP_INVALID_FACET: C2RustUnnamed_3 = 1716;
pub const XML_SCHEMAP_INVALID_ENUM: C2RustUnnamed_3 = 1715;
pub const XML_SCHEMAP_INVALID_BOOLEAN: C2RustUnnamed_3 = 1714;
pub const XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI: C2RustUnnamed_3 = 1713;
pub const XML_SCHEMAP_IMPORT_REDEFINE_NSNAME: C2RustUnnamed_3 = 1712;
pub const XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI: C2RustUnnamed_3 = 1711;
pub const XML_SCHEMAP_GROUP_NONAME_NOREF: C2RustUnnamed_3 = 1710;
pub const XML_SCHEMAP_FAILED_BUILD_IMPORT: C2RustUnnamed_3 = 1709;
pub const XML_SCHEMAP_FACET_NO_VALUE: C2RustUnnamed_3 = 1708;
pub const XML_SCHEMAP_EXTENSION_NO_BASE: C2RustUnnamed_3 = 1707;
pub const XML_SCHEMAP_ELEM_NONAME_NOREF: C2RustUnnamed_3 = 1706;
pub const XML_SCHEMAP_ELEMFORMDEFAULT_VALUE: C2RustUnnamed_3 = 1705;
pub const XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF: C2RustUnnamed_3 = 1704;
pub const XML_SCHEMAP_ATTR_NONAME_NOREF: C2RustUnnamed_3 = 1703;
pub const XML_SCHEMAP_ATTRGRP_NONAME_NOREF: C2RustUnnamed_3 = 1702;
pub const XML_SCHEMAP_ATTRFORMDEFAULT_VALUE: C2RustUnnamed_3 = 1701;
pub const XML_SCHEMAP_PREFIX_UNDEFINED: C2RustUnnamed_3 = 1700;
pub const XML_CATALOG_RECURSION: C2RustUnnamed_3 = 1654;
pub const XML_CATALOG_NOT_CATALOG: C2RustUnnamed_3 = 1653;
pub const XML_CATALOG_PREFER_VALUE: C2RustUnnamed_3 = 1652;
pub const XML_CATALOG_ENTRY_BROKEN: C2RustUnnamed_3 = 1651;
pub const XML_CATALOG_MISSING_ATTR: C2RustUnnamed_3 = 1650;
pub const XML_XINCLUDE_FRAGMENT_ID: C2RustUnnamed_3 = 1618;
pub const XML_XINCLUDE_DEPRECATED_NS: C2RustUnnamed_3 = 1617;
pub const XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE: C2RustUnnamed_3 = 1616;
pub const XML_XINCLUDE_FALLBACKS_IN_INCLUDE: C2RustUnnamed_3 = 1615;
pub const XML_XINCLUDE_INCLUDE_IN_INCLUDE: C2RustUnnamed_3 = 1614;
pub const XML_XINCLUDE_XPTR_RESULT: C2RustUnnamed_3 = 1613;
pub const XML_XINCLUDE_XPTR_FAILED: C2RustUnnamed_3 = 1612;
pub const XML_XINCLUDE_MULTIPLE_ROOT: C2RustUnnamed_3 = 1611;
pub const XML_XINCLUDE_UNKNOWN_ENCODING: C2RustUnnamed_3 = 1610;
pub const XML_XINCLUDE_BUILD_FAILED: C2RustUnnamed_3 = 1609;
pub const XML_XINCLUDE_INVALID_CHAR: C2RustUnnamed_3 = 1608;
pub const XML_XINCLUDE_TEXT_DOCUMENT: C2RustUnnamed_3 = 1607;
pub const XML_XINCLUDE_TEXT_FRAGMENT: C2RustUnnamed_3 = 1606;
pub const XML_XINCLUDE_HREF_URI: C2RustUnnamed_3 = 1605;
pub const XML_XINCLUDE_NO_FALLBACK: C2RustUnnamed_3 = 1604;
pub const XML_XINCLUDE_NO_HREF: C2RustUnnamed_3 = 1603;
pub const XML_XINCLUDE_ENTITY_DEF_MISMATCH: C2RustUnnamed_3 = 1602;
pub const XML_XINCLUDE_PARSE_VALUE: C2RustUnnamed_3 = 1601;
pub const XML_XINCLUDE_RECURSION: C2RustUnnamed_3 = 1600;
pub const XML_IO_EAFNOSUPPORT: C2RustUnnamed_3 = 1556;
pub const XML_IO_EALREADY: C2RustUnnamed_3 = 1555;
pub const XML_IO_EADDRINUSE: C2RustUnnamed_3 = 1554;
pub const XML_IO_ENETUNREACH: C2RustUnnamed_3 = 1553;
pub const XML_IO_ECONNREFUSED: C2RustUnnamed_3 = 1552;
pub const XML_IO_EISCONN: C2RustUnnamed_3 = 1551;
pub const XML_IO_ENOTSOCK: C2RustUnnamed_3 = 1550;
pub const XML_IO_LOAD_ERROR: C2RustUnnamed_3 = 1549;
pub const XML_IO_BUFFER_FULL: C2RustUnnamed_3 = 1548;
pub const XML_IO_NO_INPUT: C2RustUnnamed_3 = 1547;
pub const XML_IO_WRITE: C2RustUnnamed_3 = 1546;
pub const XML_IO_FLUSH: C2RustUnnamed_3 = 1545;
pub const XML_IO_ENCODER: C2RustUnnamed_3 = 1544;
pub const XML_IO_NETWORK_ATTEMPT: C2RustUnnamed_3 = 1543;
pub const XML_IO_EXDEV: C2RustUnnamed_3 = 1542;
pub const XML_IO_ETIMEDOUT: C2RustUnnamed_3 = 1541;
pub const XML_IO_ESRCH: C2RustUnnamed_3 = 1540;
pub const XML_IO_ESPIPE: C2RustUnnamed_3 = 1539;
pub const XML_IO_EROFS: C2RustUnnamed_3 = 1538;
pub const XML_IO_ERANGE: C2RustUnnamed_3 = 1537;
pub const XML_IO_EPIPE: C2RustUnnamed_3 = 1536;
pub const XML_IO_EPERM: C2RustUnnamed_3 = 1535;
pub const XML_IO_ENXIO: C2RustUnnamed_3 = 1534;
pub const XML_IO_ENOTTY: C2RustUnnamed_3 = 1533;
pub const XML_IO_ENOTSUP: C2RustUnnamed_3 = 1532;
pub const XML_IO_ENOTEMPTY: C2RustUnnamed_3 = 1531;
pub const XML_IO_ENOTDIR: C2RustUnnamed_3 = 1530;
pub const XML_IO_ENOSYS: C2RustUnnamed_3 = 1529;
pub const XML_IO_ENOSPC: C2RustUnnamed_3 = 1528;
pub const XML_IO_ENOMEM: C2RustUnnamed_3 = 1527;
pub const XML_IO_ENOLCK: C2RustUnnamed_3 = 1526;
pub const XML_IO_ENOEXEC: C2RustUnnamed_3 = 1525;
pub const XML_IO_ENOENT: C2RustUnnamed_3 = 1524;
pub const XML_IO_ENODEV: C2RustUnnamed_3 = 1523;
pub const XML_IO_ENFILE: C2RustUnnamed_3 = 1522;
pub const XML_IO_ENAMETOOLONG: C2RustUnnamed_3 = 1521;
pub const XML_IO_EMSGSIZE: C2RustUnnamed_3 = 1520;
pub const XML_IO_EMLINK: C2RustUnnamed_3 = 1519;
pub const XML_IO_EMFILE: C2RustUnnamed_3 = 1518;
pub const XML_IO_EISDIR: C2RustUnnamed_3 = 1517;
pub const XML_IO_EIO: C2RustUnnamed_3 = 1516;
pub const XML_IO_EINVAL: C2RustUnnamed_3 = 1515;
pub const XML_IO_EINTR: C2RustUnnamed_3 = 1514;
pub const XML_IO_EINPROGRESS: C2RustUnnamed_3 = 1513;
pub const XML_IO_EFBIG: C2RustUnnamed_3 = 1512;
pub const XML_IO_EFAULT: C2RustUnnamed_3 = 1511;
pub const XML_IO_EEXIST: C2RustUnnamed_3 = 1510;
pub const XML_IO_EDOM: C2RustUnnamed_3 = 1509;
pub const XML_IO_EDEADLK: C2RustUnnamed_3 = 1508;
pub const XML_IO_ECHILD: C2RustUnnamed_3 = 1507;
pub const XML_IO_ECANCELED: C2RustUnnamed_3 = 1506;
pub const XML_IO_EBUSY: C2RustUnnamed_3 = 1505;
pub const XML_IO_EBADMSG: C2RustUnnamed_3 = 1504;
pub const XML_IO_EBADF: C2RustUnnamed_3 = 1503;
pub const XML_IO_EAGAIN: C2RustUnnamed_3 = 1502;
pub const XML_IO_EACCES: C2RustUnnamed_3 = 1501;
pub const XML_IO_UNKNOWN: C2RustUnnamed_3 = 1500;
pub const XML_SAVE_UNKNOWN_ENCODING: C2RustUnnamed_3 = 1403;
pub const XML_SAVE_NO_DOCTYPE: C2RustUnnamed_3 = 1402;
pub const XML_SAVE_CHAR_INVALID: C2RustUnnamed_3 = 1401;
pub const XML_SAVE_NOT_UTF8: C2RustUnnamed_3 = 1400;
pub const XML_TREE_NOT_UTF8: C2RustUnnamed_3 = 1303;
pub const XML_TREE_UNTERMINATED_ENTITY: C2RustUnnamed_3 = 1302;
pub const XML_TREE_INVALID_DEC: C2RustUnnamed_3 = 1301;
pub const XML_TREE_INVALID_HEX: C2RustUnnamed_3 = 1300;
pub const XML_XPATH_INVALID_CHAR_ERROR: C2RustUnnamed_3 = 1221;
pub const XML_XPATH_ENCODING_ERROR: C2RustUnnamed_3 = 1220;
pub const XML_XPATH_UNDEF_PREFIX_ERROR: C2RustUnnamed_3 = 1219;
pub const XML_XPTR_SUB_RESOURCE_ERROR: C2RustUnnamed_3 = 1218;
pub const XML_XPTR_RESOURCE_ERROR: C2RustUnnamed_3 = 1217;
pub const XML_XPTR_SYNTAX_ERROR: C2RustUnnamed_3 = 1216;
pub const XML_XPATH_MEMORY_ERROR: C2RustUnnamed_3 = 1215;
pub const XML_XPATH_INVALID_CTXT_POSITION: C2RustUnnamed_3 = 1214;
pub const XML_XPATH_INVALID_CTXT_SIZE: C2RustUnnamed_3 = 1213;
pub const XML_XPATH_INVALID_ARITY: C2RustUnnamed_3 = 1212;
pub const XML_XPATH_INVALID_TYPE: C2RustUnnamed_3 = 1211;
pub const XML_XPATH_INVALID_OPERAND: C2RustUnnamed_3 = 1210;
pub const XML_XPATH_UNKNOWN_FUNC_ERROR: C2RustUnnamed_3 = 1209;
pub const XML_XPATH_UNCLOSED_ERROR: C2RustUnnamed_3 = 1208;
pub const XML_XPATH_EXPR_ERROR: C2RustUnnamed_3 = 1207;
pub const XML_XPATH_INVALID_PREDICATE_ERROR: C2RustUnnamed_3 = 1206;
pub const XML_XPATH_UNDEF_VARIABLE_ERROR: C2RustUnnamed_3 = 1205;
pub const XML_XPATH_VARIABLE_REF_ERROR: C2RustUnnamed_3 = 1204;
pub const XML_XPATH_START_LITERAL_ERROR: C2RustUnnamed_3 = 1203;
pub const XML_XPATH_UNFINISHED_LITERAL_ERROR: C2RustUnnamed_3 = 1202;
pub const XML_XPATH_NUMBER_ERROR: C2RustUnnamed_3 = 1201;
pub const XML_XPATH_EXPRESSION_OK: C2RustUnnamed_3 = 1200;
pub const XML_RNGP_XML_NS: C2RustUnnamed_3 = 1122;
pub const XML_RNGP_XMLNS_NAME: C2RustUnnamed_3 = 1121;
pub const XML_RNGP_VALUE_NO_CONTENT: C2RustUnnamed_3 = 1120;
pub const XML_RNGP_VALUE_EMPTY: C2RustUnnamed_3 = 1119;
pub const XML_RNGP_URI_NOT_ABSOLUTE: C2RustUnnamed_3 = 1118;
pub const XML_RNGP_URI_FRAGMENT: C2RustUnnamed_3 = 1117;
pub const XML_RNGP_UNKNOWN_TYPE_LIB: C2RustUnnamed_3 = 1116;
pub const XML_RNGP_UNKNOWN_CONSTRUCT: C2RustUnnamed_3 = 1115;
pub const XML_RNGP_UNKNOWN_COMBINE: C2RustUnnamed_3 = 1114;
pub const XML_RNGP_UNKNOWN_ATTRIBUTE: C2RustUnnamed_3 = 1113;
pub const XML_RNGP_TYPE_VALUE: C2RustUnnamed_3 = 1112;
pub const XML_RNGP_TYPE_NOT_FOUND: C2RustUnnamed_3 = 1111;
pub const XML_RNGP_TYPE_MISSING: C2RustUnnamed_3 = 1110;
pub const XML_RNGP_TEXT_HAS_CHILD: C2RustUnnamed_3 = 1109;
pub const XML_RNGP_TEXT_EXPECTED: C2RustUnnamed_3 = 1108;
pub const XML_RNGP_START_MISSING: C2RustUnnamed_3 = 1107;
pub const XML_RNGP_START_EMPTY: C2RustUnnamed_3 = 1106;
pub const XML_RNGP_START_CONTENT: C2RustUnnamed_3 = 1105;
pub const XML_RNGP_START_CHOICE_AND_INTERLEAVE: C2RustUnnamed_3 = 1104;
pub const XML_RNGP_REF_NOT_EMPTY: C2RustUnnamed_3 = 1103;
pub const XML_RNGP_REF_NO_NAME: C2RustUnnamed_3 = 1102;
pub const XML_RNGP_REF_NO_DEF: C2RustUnnamed_3 = 1101;
pub const XML_RNGP_REF_NAME_INVALID: C2RustUnnamed_3 = 1100;
pub const XML_RNGP_REF_CYCLE: C2RustUnnamed_3 = 1099;
pub const XML_RNGP_REF_CREATE_FAILED: C2RustUnnamed_3 = 1098;
pub const XML_RNGP_PREFIX_UNDEFINED: C2RustUnnamed_3 = 1097;
pub const XML_RNGP_PAT_START_VALUE: C2RustUnnamed_3 = 1096;
pub const XML_RNGP_PAT_START_TEXT: C2RustUnnamed_3 = 1095;
pub const XML_RNGP_PAT_START_ONEMORE: C2RustUnnamed_3 = 1094;
pub const XML_RNGP_PAT_START_LIST: C2RustUnnamed_3 = 1093;
pub const XML_RNGP_PAT_START_INTERLEAVE: C2RustUnnamed_3 = 1092;
pub const XML_RNGP_PAT_START_GROUP: C2RustUnnamed_3 = 1091;
pub const XML_RNGP_PAT_START_EMPTY: C2RustUnnamed_3 = 1090;
pub const XML_RNGP_PAT_START_DATA: C2RustUnnamed_3 = 1089;
pub const XML_RNGP_PAT_START_ATTR: C2RustUnnamed_3 = 1088;
pub const XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR: C2RustUnnamed_3 = 1087;
pub const XML_RNGP_PAT_ONEMORE_GROUP_ATTR: C2RustUnnamed_3 = 1086;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME: C2RustUnnamed_3 = 1085;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME: C2RustUnnamed_3 = 1084;
pub const XML_RNGP_PAT_LIST_TEXT: C2RustUnnamed_3 = 1083;
pub const XML_RNGP_PAT_LIST_REF: C2RustUnnamed_3 = 1082;
pub const XML_RNGP_PAT_LIST_LIST: C2RustUnnamed_3 = 1081;
pub const XML_RNGP_PAT_LIST_INTERLEAVE: C2RustUnnamed_3 = 1080;
pub const XML_RNGP_PAT_LIST_ELEM: C2RustUnnamed_3 = 1079;
pub const XML_RNGP_PAT_LIST_ATTR: C2RustUnnamed_3 = 1078;
pub const XML_RNGP_PAT_DATA_EXCEPT_TEXT: C2RustUnnamed_3 = 1077;
pub const XML_RNGP_PAT_DATA_EXCEPT_REF: C2RustUnnamed_3 = 1076;
pub const XML_RNGP_PAT_DATA_EXCEPT_ONEMORE: C2RustUnnamed_3 = 1075;
pub const XML_RNGP_PAT_DATA_EXCEPT_LIST: C2RustUnnamed_3 = 1074;
pub const XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE: C2RustUnnamed_3 = 1073;
pub const XML_RNGP_PAT_DATA_EXCEPT_GROUP: C2RustUnnamed_3 = 1072;
pub const XML_RNGP_PAT_DATA_EXCEPT_EMPTY: C2RustUnnamed_3 = 1071;
pub const XML_RNGP_PAT_DATA_EXCEPT_ELEM: C2RustUnnamed_3 = 1070;
pub const XML_RNGP_PAT_DATA_EXCEPT_ATTR: C2RustUnnamed_3 = 1069;
pub const XML_RNGP_PAT_ATTR_ELEM: C2RustUnnamed_3 = 1068;
pub const XML_RNGP_PAT_ATTR_ATTR: C2RustUnnamed_3 = 1067;
pub const XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME: C2RustUnnamed_3 = 1066;
pub const XML_RNGP_PARSE_ERROR: C2RustUnnamed_3 = 1065;
pub const XML_RNGP_PARENTREF_NOT_EMPTY: C2RustUnnamed_3 = 1064;
pub const XML_RNGP_PARENTREF_NO_PARENT: C2RustUnnamed_3 = 1063;
pub const XML_RNGP_PARENTREF_NO_NAME: C2RustUnnamed_3 = 1062;
pub const XML_RNGP_PARENTREF_NAME_INVALID: C2RustUnnamed_3 = 1061;
pub const XML_RNGP_PARENTREF_CREATE_FAILED: C2RustUnnamed_3 = 1060;
pub const XML_RNGP_PARAM_NAME_MISSING: C2RustUnnamed_3 = 1059;
pub const XML_RNGP_PARAM_FORBIDDEN: C2RustUnnamed_3 = 1058;
pub const XML_RNGP_NSNAME_NO_NS: C2RustUnnamed_3 = 1057;
pub const XML_RNGP_NSNAME_ATTR_ANCESTOR: C2RustUnnamed_3 = 1056;
pub const XML_RNGP_NOTALLOWED_NOT_EMPTY: C2RustUnnamed_3 = 1055;
pub const XML_RNGP_NEED_COMBINE: C2RustUnnamed_3 = 1054;
pub const XML_RNGP_NAME_MISSING: C2RustUnnamed_3 = 1053;
pub const XML_RNGP_MISSING_HREF: C2RustUnnamed_3 = 1052;
pub const XML_RNGP_INVALID_VALUE: C2RustUnnamed_3 = 1051;
pub const XML_RNGP_INVALID_URI: C2RustUnnamed_3 = 1050;
pub const XML_RNGP_INVALID_DEFINE_NAME: C2RustUnnamed_3 = 1049;
pub const XML_RNGP_INTERLEAVE_NO_CONTENT: C2RustUnnamed_3 = 1048;
pub const XML_RNGP_INTERLEAVE_EMPTY: C2RustUnnamed_3 = 1047;
pub const XML_RNGP_INTERLEAVE_CREATE_FAILED: C2RustUnnamed_3 = 1046;
pub const XML_RNGP_INTERLEAVE_ADD: C2RustUnnamed_3 = 1045;
pub const XML_RNGP_INCLUDE_RECURSE: C2RustUnnamed_3 = 1044;
pub const XML_RNGP_INCLUDE_FAILURE: C2RustUnnamed_3 = 1043;
pub const XML_RNGP_INCLUDE_EMPTY: C2RustUnnamed_3 = 1042;
pub const XML_RNGP_HREF_ERROR: C2RustUnnamed_3 = 1041;
pub const XML_RNGP_GROUP_ATTR_CONFLICT: C2RustUnnamed_3 = 1040;
pub const XML_RNGP_GRAMMAR_NO_START: C2RustUnnamed_3 = 1039;
pub const XML_RNGP_GRAMMAR_MISSING: C2RustUnnamed_3 = 1038;
pub const XML_RNGP_GRAMMAR_EMPTY: C2RustUnnamed_3 = 1037;
pub const XML_RNGP_GRAMMAR_CONTENT: C2RustUnnamed_3 = 1036;
pub const XML_RNGP_FOREIGN_ELEMENT: C2RustUnnamed_3 = 1035;
pub const XML_RNGP_FORBIDDEN_ATTRIBUTE: C2RustUnnamed_3 = 1034;
pub const XML_RNGP_EXTERNALREF_RECURSE: C2RustUnnamed_3 = 1033;
pub const XML_RNGP_EXTERNAL_REF_FAILURE: C2RustUnnamed_3 = 1032;
pub const XML_RNGP_EXTERNALREF_EMTPY: C2RustUnnamed_3 = 1031;
pub const XML_RNGP_EXCEPT_NO_CONTENT: C2RustUnnamed_3 = 1030;
pub const XML_RNGP_EXCEPT_MULTIPLE: C2RustUnnamed_3 = 1029;
pub const XML_RNGP_EXCEPT_MISSING: C2RustUnnamed_3 = 1028;
pub const XML_RNGP_EXCEPT_EMPTY: C2RustUnnamed_3 = 1027;
pub const XML_RNGP_ERROR_TYPE_LIB: C2RustUnnamed_3 = 1026;
pub const XML_RNGP_EMPTY_NOT_EMPTY: C2RustUnnamed_3 = 1025;
pub const XML_RNGP_EMPTY_CONTENT: C2RustUnnamed_3 = 1024;
pub const XML_RNGP_EMPTY_CONSTRUCT: C2RustUnnamed_3 = 1023;
pub const XML_RNGP_EMPTY: C2RustUnnamed_3 = 1022;
pub const XML_RNGP_ELEM_TEXT_CONFLICT: C2RustUnnamed_3 = 1021;
pub const XML_RNGP_ELEMENT_NO_CONTENT: C2RustUnnamed_3 = 1020;
pub const XML_RNGP_ELEMENT_NAME: C2RustUnnamed_3 = 1019;
pub const XML_RNGP_ELEMENT_CONTENT: C2RustUnnamed_3 = 1018;
pub const XML_RNGP_ELEMENT_EMPTY: C2RustUnnamed_3 = 1017;
pub const XML_RNGP_ELEM_CONTENT_ERROR: C2RustUnnamed_3 = 1016;
pub const XML_RNGP_ELEM_CONTENT_EMPTY: C2RustUnnamed_3 = 1015;
pub const XML_RNGP_DEFINE_NAME_MISSING: C2RustUnnamed_3 = 1014;
pub const XML_RNGP_DEFINE_MISSING: C2RustUnnamed_3 = 1013;
pub const XML_RNGP_DEFINE_EMPTY: C2RustUnnamed_3 = 1012;
pub const XML_RNGP_DEFINE_CREATE_FAILED: C2RustUnnamed_3 = 1011;
pub const XML_RNGP_DEF_CHOICE_AND_INTERLEAVE: C2RustUnnamed_3 = 1010;
pub const XML_RNGP_DATA_CONTENT: C2RustUnnamed_3 = 1009;
pub const XML_RNGP_CREATE_FAILURE: C2RustUnnamed_3 = 1008;
pub const XML_RNGP_CHOICE_EMPTY: C2RustUnnamed_3 = 1007;
pub const XML_RNGP_CHOICE_CONTENT: C2RustUnnamed_3 = 1006;
pub const XML_RNGP_ATTRIBUTE_NOOP: C2RustUnnamed_3 = 1005;
pub const XML_RNGP_ATTRIBUTE_EMPTY: C2RustUnnamed_3 = 1004;
pub const XML_RNGP_ATTRIBUTE_CONTENT: C2RustUnnamed_3 = 1003;
pub const XML_RNGP_ATTRIBUTE_CHILDREN: C2RustUnnamed_3 = 1002;
pub const XML_RNGP_ATTR_CONFLICT: C2RustUnnamed_3 = 1001;
pub const XML_RNGP_ANYNAME_ATTR_ANCESTOR: C2RustUnnamed_3 = 1000;
pub const XML_HTML_UNKNOWN_TAG: C2RustUnnamed_3 = 801;
pub const XML_HTML_STRUCURE_ERROR: C2RustUnnamed_3 = 800;
pub const XML_DTD_DUP_TOKEN: C2RustUnnamed_3 = 541;
pub const XML_DTD_XMLID_TYPE: C2RustUnnamed_3 = 540;
pub const XML_DTD_XMLID_VALUE: C2RustUnnamed_3 = 539;
pub const XML_DTD_STANDALONE_DEFAULTED: C2RustUnnamed_3 = 538;
pub const XML_DTD_UNKNOWN_NOTATION: C2RustUnnamed_3 = 537;
pub const XML_DTD_UNKNOWN_ID: C2RustUnnamed_3 = 536;
pub const XML_DTD_UNKNOWN_ENTITY: C2RustUnnamed_3 = 535;
pub const XML_DTD_UNKNOWN_ELEM: C2RustUnnamed_3 = 534;
pub const XML_DTD_UNKNOWN_ATTRIBUTE: C2RustUnnamed_3 = 533;
pub const XML_DTD_STANDALONE_WHITE_SPACE: C2RustUnnamed_3 = 532;
pub const XML_DTD_ROOT_NAME: C2RustUnnamed_3 = 531;
pub const XML_DTD_NOT_STANDALONE: C2RustUnnamed_3 = 530;
pub const XML_DTD_NOT_PCDATA: C2RustUnnamed_3 = 529;
pub const XML_DTD_NOT_EMPTY: C2RustUnnamed_3 = 528;
pub const XML_DTD_NOTATION_VALUE: C2RustUnnamed_3 = 527;
pub const XML_DTD_NOTATION_REDEFINED: C2RustUnnamed_3 = 526;
pub const XML_DTD_NO_ROOT: C2RustUnnamed_3 = 525;
pub const XML_DTD_NO_PREFIX: C2RustUnnamed_3 = 524;
pub const XML_DTD_NO_ELEM_NAME: C2RustUnnamed_3 = 523;
pub const XML_DTD_NO_DTD: C2RustUnnamed_3 = 522;
pub const XML_DTD_NO_DOC: C2RustUnnamed_3 = 521;
pub const XML_DTD_MULTIPLE_ID: C2RustUnnamed_3 = 520;
pub const XML_DTD_MIXED_CORRUPT: C2RustUnnamed_3 = 519;
pub const XML_DTD_MISSING_ATTRIBUTE: C2RustUnnamed_3 = 518;
pub const XML_DTD_LOAD_ERROR: C2RustUnnamed_3 = 517;
pub const XML_DTD_INVALID_DEFAULT: C2RustUnnamed_3 = 516;
pub const XML_DTD_INVALID_CHILD: C2RustUnnamed_3 = 515;
pub const XML_DTD_ID_SUBSET: C2RustUnnamed_3 = 514;
pub const XML_DTD_ID_REDEFINED: C2RustUnnamed_3 = 513;
pub const XML_DTD_ID_FIXED: C2RustUnnamed_3 = 512;
pub const XML_DTD_ENTITY_TYPE: C2RustUnnamed_3 = 511;
pub const XML_DTD_EMPTY_NOTATION: C2RustUnnamed_3 = 510;
pub const XML_DTD_ELEM_REDEFINED: C2RustUnnamed_3 = 509;
pub const XML_DTD_ELEM_NAMESPACE: C2RustUnnamed_3 = 508;
pub const XML_DTD_ELEM_DEFAULT_NAMESPACE: C2RustUnnamed_3 = 507;
pub const XML_DTD_DIFFERENT_PREFIX: C2RustUnnamed_3 = 506;
pub const XML_DTD_CONTENT_NOT_DETERMINIST: C2RustUnnamed_3 = 505;
pub const XML_DTD_CONTENT_MODEL: C2RustUnnamed_3 = 504;
pub const XML_DTD_CONTENT_ERROR: C2RustUnnamed_3 = 503;
pub const XML_DTD_ATTRIBUTE_VALUE: C2RustUnnamed_3 = 502;
pub const XML_DTD_ATTRIBUTE_REDEFINED: C2RustUnnamed_3 = 501;
pub const XML_DTD_ATTRIBUTE_DEFAULT: C2RustUnnamed_3 = 500;
pub const XML_NS_ERR_COLON: C2RustUnnamed_3 = 205;
pub const XML_NS_ERR_EMPTY: C2RustUnnamed_3 = 204;
pub const XML_NS_ERR_ATTRIBUTE_REDEFINED: C2RustUnnamed_3 = 203;
pub const XML_NS_ERR_QNAME: C2RustUnnamed_3 = 202;
pub const XML_NS_ERR_UNDEFINED_NAMESPACE: C2RustUnnamed_3 = 201;
pub const XML_NS_ERR_XML_NAMESPACE: C2RustUnnamed_3 = 200;
pub const XML_ERR_USER_STOP: C2RustUnnamed_3 = 111;
pub const XML_ERR_NAME_TOO_LONG: C2RustUnnamed_3 = 110;
pub const XML_ERR_VERSION_MISMATCH: C2RustUnnamed_3 = 109;
pub const XML_ERR_UNKNOWN_VERSION: C2RustUnnamed_3 = 108;
pub const XML_WAR_ENTITY_REDEFINED: C2RustUnnamed_3 = 107;
pub const XML_WAR_NS_COLUMN: C2RustUnnamed_3 = 106;
pub const XML_ERR_NOTATION_PROCESSING: C2RustUnnamed_3 = 105;
pub const XML_ERR_ENTITY_PROCESSING: C2RustUnnamed_3 = 104;
pub const XML_ERR_NOT_STANDALONE: C2RustUnnamed_3 = 103;
pub const XML_WAR_SPACE_VALUE: C2RustUnnamed_3 = 102;
pub const XML_ERR_MISSING_ENCODING: C2RustUnnamed_3 = 101;
pub const XML_WAR_NS_URI_RELATIVE: C2RustUnnamed_3 = 100;
pub const XML_WAR_NS_URI: C2RustUnnamed_3 = 99;
pub const XML_WAR_LANG_VALUE: C2RustUnnamed_3 = 98;
pub const XML_WAR_UNKNOWN_VERSION: C2RustUnnamed_3 = 97;
pub const XML_ERR_VERSION_MISSING: C2RustUnnamed_3 = 96;
pub const XML_ERR_CONDSEC_INVALID_KEYWORD: C2RustUnnamed_3 = 95;
pub const XML_ERR_NO_DTD: C2RustUnnamed_3 = 94;
pub const XML_WAR_CATALOG_PI: C2RustUnnamed_3 = 93;
pub const XML_ERR_URI_FRAGMENT: C2RustUnnamed_3 = 92;
pub const XML_ERR_INVALID_URI: C2RustUnnamed_3 = 91;
pub const XML_ERR_ENTITY_BOUNDARY: C2RustUnnamed_3 = 90;
pub const XML_ERR_ENTITY_LOOP: C2RustUnnamed_3 = 89;
pub const XML_ERR_ENTITY_PE_INTERNAL: C2RustUnnamed_3 = 88;
pub const XML_ERR_ENTITY_CHAR_ERROR: C2RustUnnamed_3 = 87;
pub const XML_ERR_EXTRA_CONTENT: C2RustUnnamed_3 = 86;
pub const XML_ERR_NOT_WELL_BALANCED: C2RustUnnamed_3 = 85;
pub const XML_ERR_VALUE_REQUIRED: C2RustUnnamed_3 = 84;
pub const XML_ERR_CONDSEC_INVALID: C2RustUnnamed_3 = 83;
pub const XML_ERR_EXT_ENTITY_STANDALONE: C2RustUnnamed_3 = 82;
pub const XML_ERR_INVALID_ENCODING: C2RustUnnamed_3 = 81;
pub const XML_ERR_HYPHEN_IN_COMMENT: C2RustUnnamed_3 = 80;
pub const XML_ERR_ENCODING_NAME: C2RustUnnamed_3 = 79;
pub const XML_ERR_STANDALONE_VALUE: C2RustUnnamed_3 = 78;
pub const XML_ERR_TAG_NOT_FINISHED: C2RustUnnamed_3 = 77;
pub const XML_ERR_TAG_NAME_MISMATCH: C2RustUnnamed_3 = 76;
pub const XML_ERR_EQUAL_REQUIRED: C2RustUnnamed_3 = 75;
pub const XML_ERR_LTSLASH_REQUIRED: C2RustUnnamed_3 = 74;
pub const XML_ERR_GT_REQUIRED: C2RustUnnamed_3 = 73;
pub const XML_ERR_LT_REQUIRED: C2RustUnnamed_3 = 72;
pub const XML_ERR_PUBID_REQUIRED: C2RustUnnamed_3 = 71;
pub const XML_ERR_URI_REQUIRED: C2RustUnnamed_3 = 70;
pub const XML_ERR_PCDATA_REQUIRED: C2RustUnnamed_3 = 69;
pub const XML_ERR_NAME_REQUIRED: C2RustUnnamed_3 = 68;
pub const XML_ERR_NMTOKEN_REQUIRED: C2RustUnnamed_3 = 67;
pub const XML_ERR_SEPARATOR_REQUIRED: C2RustUnnamed_3 = 66;
pub const XML_ERR_SPACE_REQUIRED: C2RustUnnamed_3 = 65;
pub const XML_ERR_RESERVED_XML_NAME: C2RustUnnamed_3 = 64;
pub const XML_ERR_CDATA_NOT_FINISHED: C2RustUnnamed_3 = 63;
pub const XML_ERR_MISPLACED_CDATA_END: C2RustUnnamed_3 = 62;
pub const XML_ERR_DOCTYPE_NOT_FINISHED: C2RustUnnamed_3 = 61;
pub const XML_ERR_EXT_SUBSET_NOT_FINISHED: C2RustUnnamed_3 = 60;
pub const XML_ERR_CONDSEC_NOT_FINISHED: C2RustUnnamed_3 = 59;
pub const XML_ERR_CONDSEC_NOT_STARTED: C2RustUnnamed_3 = 58;
pub const XML_ERR_XMLDECL_NOT_FINISHED: C2RustUnnamed_3 = 57;
pub const XML_ERR_XMLDECL_NOT_STARTED: C2RustUnnamed_3 = 56;
pub const XML_ERR_ELEMCONTENT_NOT_FINISHED: C2RustUnnamed_3 = 55;
pub const XML_ERR_ELEMCONTENT_NOT_STARTED: C2RustUnnamed_3 = 54;
pub const XML_ERR_MIXED_NOT_FINISHED: C2RustUnnamed_3 = 53;
pub const XML_ERR_MIXED_NOT_STARTED: C2RustUnnamed_3 = 52;
pub const XML_ERR_ATTLIST_NOT_FINISHED: C2RustUnnamed_3 = 51;
pub const XML_ERR_ATTLIST_NOT_STARTED: C2RustUnnamed_3 = 50;
pub const XML_ERR_NOTATION_NOT_FINISHED: C2RustUnnamed_3 = 49;
pub const XML_ERR_NOTATION_NOT_STARTED: C2RustUnnamed_3 = 48;
pub const XML_ERR_PI_NOT_FINISHED: C2RustUnnamed_3 = 47;
pub const XML_ERR_PI_NOT_STARTED: C2RustUnnamed_3 = 46;
pub const XML_ERR_COMMENT_NOT_FINISHED: C2RustUnnamed_3 = 45;
pub const XML_ERR_LITERAL_NOT_FINISHED: C2RustUnnamed_3 = 44;
pub const XML_ERR_LITERAL_NOT_STARTED: C2RustUnnamed_3 = 43;
pub const XML_ERR_ATTRIBUTE_REDEFINED: C2RustUnnamed_3 = 42;
pub const XML_ERR_ATTRIBUTE_WITHOUT_VALUE: C2RustUnnamed_3 = 41;
pub const XML_ERR_ATTRIBUTE_NOT_FINISHED: C2RustUnnamed_3 = 40;
pub const XML_ERR_ATTRIBUTE_NOT_STARTED: C2RustUnnamed_3 = 39;
pub const XML_ERR_LT_IN_ATTRIBUTE: C2RustUnnamed_3 = 38;
pub const XML_ERR_ENTITY_NOT_FINISHED: C2RustUnnamed_3 = 37;
pub const XML_ERR_ENTITY_NOT_STARTED: C2RustUnnamed_3 = 36;
pub const XML_ERR_NS_DECL_ERROR: C2RustUnnamed_3 = 35;
pub const XML_ERR_STRING_NOT_CLOSED: C2RustUnnamed_3 = 34;
pub const XML_ERR_STRING_NOT_STARTED: C2RustUnnamed_3 = 33;
pub const XML_ERR_UNSUPPORTED_ENCODING: C2RustUnnamed_3 = 32;
pub const XML_ERR_UNKNOWN_ENCODING: C2RustUnnamed_3 = 31;
pub const XML_ERR_ENTITY_IS_PARAMETER: C2RustUnnamed_3 = 30;
pub const XML_ERR_ENTITY_IS_EXTERNAL: C2RustUnnamed_3 = 29;
pub const XML_ERR_UNPARSED_ENTITY: C2RustUnnamed_3 = 28;
pub const XML_WAR_UNDECLARED_ENTITY: C2RustUnnamed_3 = 27;
pub const XML_ERR_UNDECLARED_ENTITY: C2RustUnnamed_3 = 26;
pub const XML_ERR_PEREF_SEMICOL_MISSING: C2RustUnnamed_3 = 25;
pub const XML_ERR_PEREF_NO_NAME: C2RustUnnamed_3 = 24;
pub const XML_ERR_ENTITYREF_SEMICOL_MISSING: C2RustUnnamed_3 = 23;
pub const XML_ERR_ENTITYREF_NO_NAME: C2RustUnnamed_3 = 22;
pub const XML_ERR_PEREF_IN_INT_SUBSET: C2RustUnnamed_3 = 21;
pub const XML_ERR_PEREF_IN_EPILOG: C2RustUnnamed_3 = 20;
pub const XML_ERR_PEREF_IN_PROLOG: C2RustUnnamed_3 = 19;
pub const XML_ERR_PEREF_AT_EOF: C2RustUnnamed_3 = 18;
pub const XML_ERR_ENTITYREF_IN_DTD: C2RustUnnamed_3 = 17;
pub const XML_ERR_ENTITYREF_IN_EPILOG: C2RustUnnamed_3 = 16;
pub const XML_ERR_ENTITYREF_IN_PROLOG: C2RustUnnamed_3 = 15;
pub const XML_ERR_ENTITYREF_AT_EOF: C2RustUnnamed_3 = 14;
pub const XML_ERR_CHARREF_IN_DTD: C2RustUnnamed_3 = 13;
pub const XML_ERR_CHARREF_IN_EPILOG: C2RustUnnamed_3 = 12;
pub const XML_ERR_CHARREF_IN_PROLOG: C2RustUnnamed_3 = 11;
pub const XML_ERR_CHARREF_AT_EOF: C2RustUnnamed_3 = 10;
pub const XML_ERR_INVALID_CHAR: C2RustUnnamed_3 = 9;
pub const XML_ERR_INVALID_CHARREF: C2RustUnnamed_3 = 8;
pub const XML_ERR_INVALID_DEC_CHARREF: C2RustUnnamed_3 = 7;
pub const XML_ERR_INVALID_HEX_CHARREF: C2RustUnnamed_3 = 6;
pub const XML_ERR_DOCUMENT_END: C2RustUnnamed_3 = 5;
pub const XML_ERR_DOCUMENT_EMPTY: C2RustUnnamed_3 = 4;
pub const XML_ERR_DOCUMENT_START: C2RustUnnamed_3 = 3;
pub const XML_ERR_INTERNAL_ERROR: C2RustUnnamed_3 = 1;
pub const XML_ERR_OK: C2RustUnnamed_3 = 0;
pub type C2RustUnnamed_4 = std::os::raw::c_uint;
/* ***********************************************************************
 *									*
 *		Regexp memory error handler				*
 *									*
 ************************************************************************/
/* *
 * xmlRegexpErrMemory:
 * @extra:  extra information
 *
 * Handle an out of memory condition
 */
unsafe extern "C" fn xmlRegexpErrMemory(mut ctxt: xmlRegParserCtxtPtr,
                                        mut extra: *const std::os::raw::c_char) {
    let mut regexp: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    if !ctxt.is_null() {
        regexp = (*ctxt).string as *const std::os::raw::c_char;
        (*ctxt).error = XML_ERR_NO_MEMORY as std::os::raw::c_int
    }
    __xmlRaiseError(None, None, 0 as *mut std::os::raw::c_void,
                    0 as *mut std::os::raw::c_void, 0 as *mut std::os::raw::c_void,
                    XML_FROM_REGEXP as std::os::raw::c_int,
                    XML_ERR_NO_MEMORY as std::os::raw::c_int, XML_ERR_FATAL,
                    0 as *const std::os::raw::c_char, 0 as std::os::raw::c_int, extra, regexp,
                    0 as *const std::os::raw::c_char, 0 as std::os::raw::c_int,
                    0 as std::os::raw::c_int,
                    b"Memory allocation failed : %s\n\x00" as *const u8 as
                        *const std::os::raw::c_char, extra);
}
/* *
 * xmlRegexpErrCompile:
 * @extra:  extra information
 *
 * Handle a compilation failure
 */
unsafe extern "C" fn xmlRegexpErrCompile(mut ctxt: xmlRegParserCtxtPtr,
                                         mut extra: *const std::os::raw::c_char) {
    let mut regexp: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut idx: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if !ctxt.is_null() {
        regexp = (*ctxt).string as *const std::os::raw::c_char;
        idx =
            (*ctxt).cur.offset_from((*ctxt).string) as std::os::raw::c_long
                as std::os::raw::c_int;
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int
    }
    __xmlRaiseError(None, None, 0 as *mut std::os::raw::c_void,
                    0 as *mut std::os::raw::c_void, 0 as *mut std::os::raw::c_void,
                    XML_FROM_REGEXP as std::os::raw::c_int,
                    XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int, XML_ERR_FATAL,
                    0 as *const std::os::raw::c_char, 0 as std::os::raw::c_int, extra, regexp,
                    0 as *const std::os::raw::c_char, idx, 0 as std::os::raw::c_int,
                    b"failed to compile: %s\n\x00" as *const u8 as
                        *const std::os::raw::c_char, extra);
}
/* *
 * xmlRegEpxFromParse:
 * @ctxt:  the parser context used to build it
 *
 * Allocate a new regexp and fill it with the result from the parser
 *
 * Returns the new regexp or NULL in case of error
 */
unsafe extern "C" fn xmlRegEpxFromParse(mut ctxt: xmlRegParserCtxtPtr)
 -> xmlRegexpPtr {
    let mut current_block: u64;
    let mut ret: xmlRegexpPtr = 0 as *mut xmlRegexp;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegexp>()
                                                          as std::os::raw::c_ulong) as
            xmlRegexpPtr;
    if ret.is_null() {
        xmlRegexpErrMemory(ctxt,
                           b"compiling regexp\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegexpPtr
    }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegexp>() as std::os::raw::c_ulong);
    (*ret).string = (*ctxt).string;
    (*ret).nbStates = (*ctxt).nbStates;
    (*ret).states = (*ctxt).states;
    (*ret).nbAtoms = (*ctxt).nbAtoms;
    (*ret).atoms = (*ctxt).atoms;
    (*ret).nbCounters = (*ctxt).nbCounters;
    (*ret).counters = (*ctxt).counters;
    (*ret).determinist = (*ctxt).determinist;
    (*ret).flags = (*ctxt).flags;
    if (*ret).determinist == -(1 as std::os::raw::c_int) {
        xmlRegexpIsDeterminist(ret);
    }
    if (*ret).determinist != 0 as std::os::raw::c_int &&
           (*ret).nbCounters == 0 as std::os::raw::c_int &&
           (*ctxt).negs == 0 as std::os::raw::c_int && !(*ret).atoms.is_null() &&
           !(*(*ret).atoms.offset(0 as std::os::raw::c_int as isize)).is_null() &&
           (**(*ret).atoms.offset(0 as std::os::raw::c_int as isize)).type_0 as
               std::os::raw::c_uint ==
               XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint {
        let mut i: std::os::raw::c_int = 0;
        let mut j: std::os::raw::c_int = 0;
        let mut nbstates: std::os::raw::c_int = 0 as std::os::raw::c_int;
        let mut nbatoms: std::os::raw::c_int = 0 as std::os::raw::c_int;
        let mut stateRemap: *mut std::os::raw::c_int = 0 as *mut std::os::raw::c_int;
        let mut stringRemap: *mut std::os::raw::c_int = 0 as *mut std::os::raw::c_int;
        let mut transitions: *mut std::os::raw::c_int = 0 as *mut std::os::raw::c_int;
        let mut transdata: *mut *mut std::os::raw::c_void =
            0 as *mut *mut std::os::raw::c_void;
        let mut stringMap: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
        let mut value: *mut xmlChar = 0 as *mut xmlChar;
        /*
	 * Switch to a compact representation
	 * 1/ counting the effective number of states left
	 * 2/ counting the unique number of atoms, and check that
	 *    they are all of the string type
	 * 3/ build a table state x atom for the transitions
	 */
        stateRemap =
            xmlMalloc.expect("non-null function pointer")(((*ret).nbStates as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if stateRemap.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"compiling regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlRegexpPtr
        }
        i = 0 as std::os::raw::c_int;
        while i < (*ret).nbStates {
            if !(*(*ret).states.offset(i as isize)).is_null() {
                *stateRemap.offset(i as isize) = nbstates;
                nbstates += 1
            } else { *stateRemap.offset(i as isize) = -(1 as std::os::raw::c_int) }
            i += 1
        }
        stringMap =
            xmlMalloc.expect("non-null function pointer")(((*ret).nbAtoms as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<*mut std::os::raw::c_char>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut *mut xmlChar;
        if stringMap.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"compiling regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            xmlFree.expect("non-null function pointer")(stateRemap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlRegexpPtr
        }
        stringRemap =
            xmlMalloc.expect("non-null function pointer")(((*ret).nbAtoms as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if stringRemap.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"compiling regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            xmlFree.expect("non-null function pointer")(stringMap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(stateRemap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlRegexpPtr
        }
        i = 0 as std::os::raw::c_int;
        while i < (*ret).nbAtoms {
            if (**(*ret).atoms.offset(i as isize)).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint &&
                   (**(*ret).atoms.offset(i as isize)).quant as std::os::raw::c_uint
                       == XML_REGEXP_QUANT_ONCE as std::os::raw::c_int as std::os::raw::c_uint
               {
                value =
                    (**(*ret).atoms.offset(i as isize)).valuep as
                        *mut xmlChar;
                j = 0 as std::os::raw::c_int;
                while j < nbatoms {
                    if xmlStrEqual(*stringMap.offset(j as isize), value) != 0
                       {
                        *stringRemap.offset(i as isize) = j;
                        break ;
                    } else { j += 1 }
                }
                if j >= nbatoms {
                    *stringRemap.offset(i as isize) = nbatoms;
                    let ref mut fresh0 = *stringMap.offset(nbatoms as isize);
                    *fresh0 = xmlStrdup(value);
                    if (*stringMap.offset(nbatoms as isize)).is_null() {
                        i = 0 as std::os::raw::c_int;
                        while i < nbatoms {
                            xmlFree.expect("non-null function pointer")(*stringMap.offset(i
                                                                                              as
                                                                                              isize)
                                                                            as
                                                                            *mut std::os::raw::c_void);
                            i += 1
                        }
                        xmlFree.expect("non-null function pointer")(stringRemap
                                                                        as
                                                                        *mut std::os::raw::c_void);
                        xmlFree.expect("non-null function pointer")(stringMap
                                                                        as
                                                                        *mut std::os::raw::c_void);
                        xmlFree.expect("non-null function pointer")(stateRemap
                                                                        as
                                                                        *mut std::os::raw::c_void);
                        xmlFree.expect("non-null function pointer")(ret as
                                                                        *mut std::os::raw::c_void);
                        return 0 as xmlRegexpPtr
                    }
                    nbatoms += 1
                }
            } else {
                xmlFree.expect("non-null function pointer")(stateRemap as
                                                                *mut std::os::raw::c_void);
                xmlFree.expect("non-null function pointer")(stringRemap as
                                                                *mut std::os::raw::c_void);
                i = 0 as std::os::raw::c_int;
                while i < nbatoms {
                    xmlFree.expect("non-null function pointer")(*stringMap.offset(i
                                                                                      as
                                                                                      isize)
                                                                    as
                                                                    *mut std::os::raw::c_void);
                    i += 1
                }
                xmlFree.expect("non-null function pointer")(stringMap as
                                                                *mut std::os::raw::c_void);
                xmlFree.expect("non-null function pointer")(ret as
                                                                *mut std::os::raw::c_void);
                return 0 as xmlRegexpPtr
            }
            i += 1
        }
        transitions =
            xmlMalloc.expect("non-null function pointer")((((nbstates +
                                                                 1 as
                                                                     std::os::raw::c_int)
                                                                *
                                                                (nbatoms +
                                                                     1 as
                                                                         std::os::raw::c_int))
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if transitions.is_null() {
            xmlFree.expect("non-null function pointer")(stateRemap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(stringRemap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(stringMap as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlRegexpPtr
        }
        memset(transitions as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               (((nbstates + 1 as std::os::raw::c_int) * (nbatoms + 1 as std::os::raw::c_int))
                    as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                    as std::os::raw::c_ulong));
        /*
	 * Allocate the transition table. The first entry for each
	 * state corresponds to the state type.
	 */
        transdata = 0 as *mut *mut std::os::raw::c_void;
        i = 0 as std::os::raw::c_int;
        's_433:
            loop  {
                if !(i < (*ret).nbStates) {
                    current_block = 15417752026496523887;
                    break ;
                }
                let mut stateno: std::os::raw::c_int = 0;
                let mut atomno: std::os::raw::c_int = 0;
                let mut targetno: std::os::raw::c_int = 0;
                let mut prev: std::os::raw::c_int = 0;
                let mut state: xmlRegStatePtr = 0 as *mut xmlRegState;
                let mut trans: xmlRegTransPtr = 0 as *mut xmlRegTrans;
                stateno = *stateRemap.offset(i as isize);
                if !(stateno == -(1 as std::os::raw::c_int)) {
                    state = *(*ret).states.offset(i as isize);
                    *transitions.offset((stateno *
                                             (nbatoms + 1 as std::os::raw::c_int)) as
                                            isize) =
                        (*state).type_0 as std::os::raw::c_int;
                    j = 0 as std::os::raw::c_int;
                    while j < (*state).nbTrans {
                        trans =
                            &mut *(*state).trans.offset(j as isize) as
                                *mut xmlRegTrans;
                        if !((*trans).to == -(1 as std::os::raw::c_int) ||
                                 (*trans).atom.is_null()) {
                            atomno =
                                *stringRemap.offset((*(*trans).atom).no as
                                                        isize);
                            if !(*(*trans).atom).data.is_null() &&
                                   transdata.is_null() {
                                transdata =
                                    xmlMalloc.expect("non-null function pointer")(((nbstates
                                                                                        *
                                                                                        nbatoms)
                                                                                       as
                                                                                       std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<*mut std::os::raw::c_void>()
                                                                                                                       as
                                                                                                                       std::os::raw::c_ulong))
                                        as *mut *mut std::os::raw::c_void;
                                if !transdata.is_null() {
                                    memset(transdata as *mut std::os::raw::c_void,
                                           0 as std::os::raw::c_int,
                                           ((nbstates * nbatoms) as
                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<*mut std::os::raw::c_void>()
                                                                                as
                                                                                std::os::raw::c_ulong));
                                } else {
                                    xmlRegexpErrMemory(ctxt,
                                                       b"compiling regexp\x00"
                                                           as *const u8 as
                                                           *const std::os::raw::c_char);
                                    break ;
                                }
                            }
                            targetno =
                                *stateRemap.offset((*trans).to as isize);
                            /*
		 * if the same atom can generate transitions to 2 different
		 * states then it means the automata is not determinist and
		 * the compact form can't be used !
		 */
                            prev =
                                *transitions.offset((stateno *
                                                         (nbatoms +
                                                              1 as
                                                                  std::os::raw::c_int)
                                                         + atomno +
                                                         1 as std::os::raw::c_int) as
                                                        isize); /* to avoid 0 */
                            if prev != 0 as std::os::raw::c_int {
                                if prev != targetno + 1 as std::os::raw::c_int {
                                    (*ret).determinist = 0 as std::os::raw::c_int;
                                    if !transdata.is_null() {
                                        xmlFree.expect("non-null function pointer")(transdata
                                                                                        as
                                                                                        *mut std::os::raw::c_void);
                                    }
                                    xmlFree.expect("non-null function pointer")(transitions
                                                                                    as
                                                                                    *mut std::os::raw::c_void);
                                    xmlFree.expect("non-null function pointer")(stateRemap
                                                                                    as
                                                                                    *mut std::os::raw::c_void);
                                    xmlFree.expect("non-null function pointer")(stringRemap
                                                                                    as
                                                                                    *mut std::os::raw::c_void);
                                    i = 0 as std::os::raw::c_int;
                                    while i < nbatoms {
                                        xmlFree.expect("non-null function pointer")(*stringMap.offset(i
                                                                                                          as
                                                                                                          isize)
                                                                                        as
                                                                                        *mut std::os::raw::c_void);
                                        i += 1
                                    }
                                    xmlFree.expect("non-null function pointer")(stringMap
                                                                                    as
                                                                                    *mut std::os::raw::c_void);
                                    current_block = 10745513706560517726;
                                    break 's_433 ;
                                }
                            } else {
                                *transitions.offset((stateno *
                                                         (nbatoms +
                                                              1 as
                                                                  std::os::raw::c_int)
                                                         + atomno +
                                                         1 as std::os::raw::c_int) as
                                                        isize) =
                                    targetno + 1 as std::os::raw::c_int;
                                if !transdata.is_null() {
                                    let ref mut fresh1 =
                                        *transdata.offset((stateno * nbatoms +
                                                               atomno) as
                                                              isize);
                                    *fresh1 = (*(*trans).atom).data
                                }
                            }
                        }
                        j += 1
                    }
                }
                i += 1
            }
        match current_block {
            10745513706560517726 => { }
            _ => {
                (*ret).determinist = 1 as std::os::raw::c_int;
                /*
	 * Cleanup of the old data
	 */
                if !(*ret).states.is_null() {
                    i = 0 as std::os::raw::c_int;
                    while i < (*ret).nbStates {
                        xmlRegFreeState(*(*ret).states.offset(i as isize));
                        i += 1
                    }
                    xmlFree.expect("non-null function pointer")((*ret).states
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                (*ret).states = 0 as *mut xmlRegStatePtr;
                (*ret).nbStates = 0 as std::os::raw::c_int;
                if !(*ret).atoms.is_null() {
                    i = 0 as std::os::raw::c_int;
                    while i < (*ret).nbAtoms {
                        xmlRegFreeAtom(*(*ret).atoms.offset(i as isize));
                        i += 1
                    }
                    xmlFree.expect("non-null function pointer")((*ret).atoms
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                (*ret).atoms = 0 as *mut xmlRegAtomPtr;
                (*ret).nbAtoms = 0 as std::os::raw::c_int;
                (*ret).compact = transitions;
                (*ret).transdata = transdata;
                (*ret).stringMap = stringMap;
                (*ret).nbstrings = nbatoms;
                (*ret).nbstates = nbstates;
                xmlFree.expect("non-null function pointer")(stateRemap as
                                                                *mut std::os::raw::c_void);
                xmlFree.expect("non-null function pointer")(stringRemap as
                                                                *mut std::os::raw::c_void);
            }
        }
    }
    (*ctxt).string = 0 as *mut xmlChar;
    (*ctxt).nbStates = 0 as std::os::raw::c_int;
    (*ctxt).states = 0 as *mut xmlRegStatePtr;
    (*ctxt).nbAtoms = 0 as std::os::raw::c_int;
    (*ctxt).atoms = 0 as *mut xmlRegAtomPtr;
    (*ctxt).nbCounters = 0 as std::os::raw::c_int;
    (*ctxt).counters = 0 as *mut xmlRegCounter;
    return ret;
}
/* *
 * xmlRegNewParserCtxt:
 * @string:  the string to parse
 *
 * Allocate a new regexp parser context
 *
 * Returns the new context or NULL in case of error
 */
unsafe extern "C" fn xmlRegNewParserCtxt(mut string: *const xmlChar)
 -> xmlRegParserCtxtPtr {
    let mut ret: xmlRegParserCtxtPtr = 0 as *mut xmlRegParserCtxt;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegParserCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlRegParserCtxtPtr;
    if ret.is_null() { return 0 as xmlRegParserCtxtPtr }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegParserCtxt>() as std::os::raw::c_ulong);
    if !string.is_null() { (*ret).string = xmlStrdup(string) }
    (*ret).cur = (*ret).string;
    (*ret).neg = 0 as std::os::raw::c_int;
    (*ret).negs = 0 as std::os::raw::c_int;
    (*ret).error = 0 as std::os::raw::c_int;
    (*ret).determinist = -(1 as std::os::raw::c_int);
    return ret;
}
/* *
 * xmlRegNewRange:
 * @ctxt:  the regexp parser context
 * @neg:  is that negative
 * @type:  the type of range
 * @start:  the start codepoint
 * @end:  the end codepoint
 *
 * Allocate a new regexp range
 *
 * Returns the new range or NULL in case of error
 */
unsafe extern "C" fn xmlRegNewRange(mut ctxt: xmlRegParserCtxtPtr,
                                    mut neg: std::os::raw::c_int,
                                    mut type_0: xmlRegAtomType,
                                    mut start: std::os::raw::c_int,
                                    mut end: std::os::raw::c_int) -> xmlRegRangePtr {
    let mut ret: xmlRegRangePtr = 0 as *mut xmlRegRange;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegRange>()
                                                          as std::os::raw::c_ulong) as
            xmlRegRangePtr;
    if ret.is_null() {
        xmlRegexpErrMemory(ctxt,
                           b"allocating range\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegRangePtr
    }
    (*ret).neg = neg;
    (*ret).type_0 = type_0;
    (*ret).start = start;
    (*ret).end = end;
    return ret;
}
/* *
 * xmlRegFreeRange:
 * @range:  the regexp range
 *
 * Free a regexp range
 */
unsafe extern "C" fn xmlRegFreeRange(mut range: xmlRegRangePtr) {
    if range.is_null() { return }
    if !(*range).blockName.is_null() {
        xmlFree.expect("non-null function pointer")((*range).blockName as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(range as *mut std::os::raw::c_void);
}
/* *
 * xmlRegCopyRange:
 * @range:  the regexp range
 *
 * Copy a regexp range
 *
 * Returns the new copy or NULL in case of error.
 */
unsafe extern "C" fn xmlRegCopyRange(mut ctxt: xmlRegParserCtxtPtr,
                                     mut range: xmlRegRangePtr)
 -> xmlRegRangePtr {
    let mut ret: xmlRegRangePtr = 0 as *mut xmlRegRange;
    if range.is_null() { return 0 as xmlRegRangePtr }
    ret =
        xmlRegNewRange(ctxt, (*range).neg, (*range).type_0, (*range).start,
                       (*range).end);
    if ret.is_null() { return 0 as xmlRegRangePtr }
    if !(*range).blockName.is_null() {
        (*ret).blockName = xmlStrdup((*range).blockName);
        if (*ret).blockName.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"allocating range\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            xmlRegFreeRange(ret);
            return 0 as xmlRegRangePtr
        }
    }
    return ret;
}
/* *
 * xmlRegNewAtom:
 * @ctxt:  the regexp parser context
 * @type:  the type of atom
 *
 * Allocate a new atom
 *
 * Returns the new atom or NULL in case of error
 */
unsafe extern "C" fn xmlRegNewAtom(mut ctxt: xmlRegParserCtxtPtr,
                                   mut type_0: xmlRegAtomType)
 -> xmlRegAtomPtr {
    let mut ret: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegAtom>()
                                                          as std::os::raw::c_ulong) as
            xmlRegAtomPtr;
    if ret.is_null() {
        xmlRegexpErrMemory(ctxt,
                           b"allocating atom\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegAtomPtr
    }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegAtom>() as std::os::raw::c_ulong);
    (*ret).type_0 = type_0;
    (*ret).quant = XML_REGEXP_QUANT_ONCE;
    (*ret).min = 0 as std::os::raw::c_int;
    (*ret).max = 0 as std::os::raw::c_int;
    return ret;
}
/* *
 * xmlRegFreeAtom:
 * @atom:  the regexp atom
 *
 * Free a regexp atom
 */
unsafe extern "C" fn xmlRegFreeAtom(mut atom: xmlRegAtomPtr) {
    let mut i: std::os::raw::c_int = 0;
    if atom.is_null() { return }
    i = 0 as std::os::raw::c_int;
    while i < (*atom).nbRanges {
        xmlRegFreeRange(*(*atom).ranges.offset(i as isize));
        i += 1
    }
    if !(*atom).ranges.is_null() {
        xmlFree.expect("non-null function pointer")((*atom).ranges as
                                                        *mut std::os::raw::c_void);
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*atom).valuep.is_null() {
        xmlFree.expect("non-null function pointer")((*atom).valuep);
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*atom).valuep2.is_null() {
        xmlFree.expect("non-null function pointer")((*atom).valuep2);
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_BLOCK_NAME as std::os::raw::c_int as std::os::raw::c_uint &&
           !(*atom).valuep.is_null() {
        xmlFree.expect("non-null function pointer")((*atom).valuep);
    }
    xmlFree.expect("non-null function pointer")(atom as *mut std::os::raw::c_void);
}
/* *
 * xmlRegCopyAtom:
 * @ctxt:  the regexp parser context
 * @atom:  the oiginal atom
 *
 * Allocate a new regexp range
 *
 * Returns the new atom or NULL in case of error
 */
unsafe extern "C" fn xmlRegCopyAtom(mut ctxt: xmlRegParserCtxtPtr,
                                    mut atom: xmlRegAtomPtr)
 -> xmlRegAtomPtr {
    let mut current_block: u64;
    let mut ret: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegAtom>()
                                                          as std::os::raw::c_ulong) as
            xmlRegAtomPtr;
    if ret.is_null() {
        xmlRegexpErrMemory(ctxt,
                           b"copying atom\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegAtomPtr
    }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegAtom>() as std::os::raw::c_ulong);
    (*ret).type_0 = (*atom).type_0;
    (*ret).quant = (*atom).quant;
    (*ret).min = (*atom).min;
    (*ret).max = (*atom).max;
    if (*atom).nbRanges > 0 as std::os::raw::c_int {
        let mut i: std::os::raw::c_int = 0;
        (*ret).ranges =
            xmlMalloc.expect("non-null function pointer")((::std::mem::size_of::<xmlRegRangePtr>()
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul((*atom).nbRanges
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegRangePtr;
        if (*ret).ranges.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"copying atom\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            current_block = 16271369271723845639;
        } else {
            i = 0 as std::os::raw::c_int;
            loop  {
                if !(i < (*atom).nbRanges) {
                    current_block = 12124785117276362961;
                    break ;
                }
                let ref mut fresh2 = *(*ret).ranges.offset(i as isize);
                *fresh2 =
                    xmlRegCopyRange(ctxt, *(*atom).ranges.offset(i as isize));
                if (*(*ret).ranges.offset(i as isize)).is_null() {
                    current_block = 16271369271723845639;
                    break ;
                }
                (*ret).nbRanges = i + 1 as std::os::raw::c_int;
                i += 1
            }
        }
        match current_block {
            12124785117276362961 => { }
            _ => { xmlRegFreeAtom(ret); return 0 as xmlRegAtomPtr }
        }
    }
    return ret;
}
unsafe extern "C" fn xmlRegNewState(mut ctxt: xmlRegParserCtxtPtr)
 -> xmlRegStatePtr {
    let mut ret: xmlRegStatePtr = 0 as *mut xmlRegState;
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegState>()
                                                          as std::os::raw::c_ulong) as
            xmlRegStatePtr;
    if ret.is_null() {
        xmlRegexpErrMemory(ctxt,
                           b"allocating state\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegStatePtr
    }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegState>() as std::os::raw::c_ulong);
    (*ret).type_0 = XML_REGEXP_TRANS_STATE;
    (*ret).mark = XML_REGEXP_MARK_NORMAL;
    return ret;
}
/* *
 * xmlRegFreeState:
 * @state:  the regexp state
 *
 * Free a regexp state
 */
unsafe extern "C" fn xmlRegFreeState(mut state: xmlRegStatePtr) {
    if state.is_null() { return }
    if !(*state).trans.is_null() {
        xmlFree.expect("non-null function pointer")((*state).trans as
                                                        *mut std::os::raw::c_void);
    }
    if !(*state).transTo.is_null() {
        xmlFree.expect("non-null function pointer")((*state).transTo as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(state as *mut std::os::raw::c_void);
}
/* *
 * xmlRegFreeParserCtxt:
 * @ctxt:  the regexp parser context
 *
 * Free a regexp parser context
 */
unsafe extern "C" fn xmlRegFreeParserCtxt(mut ctxt: xmlRegParserCtxtPtr) {
    let mut i: std::os::raw::c_int = 0;
    if ctxt.is_null() { return }
    if !(*ctxt).string.is_null() {
        xmlFree.expect("non-null function pointer")((*ctxt).string as
                                                        *mut std::os::raw::c_void);
    }
    if !(*ctxt).states.is_null() {
        i = 0 as std::os::raw::c_int;
        while i < (*ctxt).nbStates {
            xmlRegFreeState(*(*ctxt).states.offset(i as isize));
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*ctxt).states as
                                                        *mut std::os::raw::c_void);
    }
    if !(*ctxt).atoms.is_null() {
        i = 0 as std::os::raw::c_int;
        while i < (*ctxt).nbAtoms {
            xmlRegFreeAtom(*(*ctxt).atoms.offset(i as isize));
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*ctxt).atoms as
                                                        *mut std::os::raw::c_void);
    }
    if !(*ctxt).counters.is_null() {
        xmlFree.expect("non-null function pointer")((*ctxt).counters as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(ctxt as *mut std::os::raw::c_void);
}
/* ***********************************************************************
 *									*
 *			Display of Data structures			*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlRegPrintAtomType(mut output: *mut FILE,
                                         mut type_0: xmlRegAtomType) {
    match type_0 as std::os::raw::c_uint {
        1 => {
            fprintf(output,
                    b"epsilon \x00" as *const u8 as *const std::os::raw::c_char);
        }
        2 => {
            fprintf(output,
                    b"charval \x00" as *const u8 as *const std::os::raw::c_char);
        }
        3 => {
            fprintf(output,
                    b"ranges \x00" as *const u8 as *const std::os::raw::c_char);
        }
        4 => {
            fprintf(output,
                    b"subexpr \x00" as *const u8 as *const std::os::raw::c_char);
        }
        5 => {
            fprintf(output,
                    b"string \x00" as *const u8 as *const std::os::raw::c_char);
        }
        6 => {
            fprintf(output,
                    b"anychar \x00" as *const u8 as *const std::os::raw::c_char);
        }
        7 => {
            fprintf(output,
                    b"anyspace \x00" as *const u8 as *const std::os::raw::c_char);
        }
        8 => {
            fprintf(output,
                    b"notspace \x00" as *const u8 as *const std::os::raw::c_char);
        }
        9 => {
            fprintf(output,
                    b"initname \x00" as *const u8 as *const std::os::raw::c_char);
        }
        10 => {
            fprintf(output,
                    b"notinitname \x00" as *const u8 as *const std::os::raw::c_char);
        }
        11 => {
            fprintf(output,
                    b"namechar \x00" as *const u8 as *const std::os::raw::c_char);
        }
        12 => {
            fprintf(output,
                    b"notnamechar \x00" as *const u8 as *const std::os::raw::c_char);
        }
        13 => {
            fprintf(output,
                    b"decimal \x00" as *const u8 as *const std::os::raw::c_char);
        }
        14 => {
            fprintf(output,
                    b"notdecimal \x00" as *const u8 as *const std::os::raw::c_char);
        }
        15 => {
            fprintf(output,
                    b"realchar \x00" as *const u8 as *const std::os::raw::c_char);
        }
        16 => {
            fprintf(output,
                    b"notrealchar \x00" as *const u8 as *const std::os::raw::c_char);
        }
        100 => {
            fprintf(output,
                    b"LETTER \x00" as *const u8 as *const std::os::raw::c_char);
        }
        101 => {
            fprintf(output,
                    b"LETTER_UPPERCASE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        102 => {
            fprintf(output,
                    b"LETTER_LOWERCASE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        103 => {
            fprintf(output,
                    b"LETTER_TITLECASE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        104 => {
            fprintf(output,
                    b"LETTER_MODIFIER \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        105 => {
            fprintf(output,
                    b"LETTER_OTHERS \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        106 => {
            fprintf(output, b"MARK \x00" as *const u8 as *const std::os::raw::c_char);
        }
        107 => {
            fprintf(output,
                    b"MARK_NONSPACING \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        108 => {
            fprintf(output,
                    b"MARK_SPACECOMBINING \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        109 => {
            fprintf(output,
                    b"MARK_ENCLOSING \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        110 => {
            fprintf(output,
                    b"NUMBER \x00" as *const u8 as *const std::os::raw::c_char);
        }
        111 => {
            fprintf(output,
                    b"NUMBER_DECIMAL \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        112 => {
            fprintf(output,
                    b"NUMBER_LETTER \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        113 => {
            fprintf(output,
                    b"NUMBER_OTHERS \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        114 => {
            fprintf(output,
                    b"PUNCT \x00" as *const u8 as *const std::os::raw::c_char);
        }
        115 => {
            fprintf(output,
                    b"PUNCT_CONNECTOR \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        116 => {
            fprintf(output,
                    b"PUNCT_DASH \x00" as *const u8 as *const std::os::raw::c_char);
        }
        117 => {
            fprintf(output,
                    b"PUNCT_OPEN \x00" as *const u8 as *const std::os::raw::c_char);
        }
        118 => {
            fprintf(output,
                    b"PUNCT_CLOSE \x00" as *const u8 as *const std::os::raw::c_char);
        }
        119 => {
            fprintf(output,
                    b"PUNCT_INITQUOTE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        120 => {
            fprintf(output,
                    b"PUNCT_FINQUOTE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        121 => {
            fprintf(output,
                    b"PUNCT_OTHERS \x00" as *const u8 as *const std::os::raw::c_char);
        }
        122 => {
            fprintf(output,
                    b"SEPAR \x00" as *const u8 as *const std::os::raw::c_char);
        }
        123 => {
            fprintf(output,
                    b"SEPAR_SPACE \x00" as *const u8 as *const std::os::raw::c_char);
        }
        124 => {
            fprintf(output,
                    b"SEPAR_LINE \x00" as *const u8 as *const std::os::raw::c_char);
        }
        125 => {
            fprintf(output,
                    b"SEPAR_PARA \x00" as *const u8 as *const std::os::raw::c_char);
        }
        126 => {
            fprintf(output,
                    b"SYMBOL \x00" as *const u8 as *const std::os::raw::c_char);
        }
        127 => {
            fprintf(output,
                    b"SYMBOL_MATH \x00" as *const u8 as *const std::os::raw::c_char);
        }
        128 => {
            fprintf(output,
                    b"SYMBOL_CURRENCY \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        129 => {
            fprintf(output,
                    b"SYMBOL_MODIFIER \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        130 => {
            fprintf(output,
                    b"SYMBOL_OTHERS \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        131 => {
            fprintf(output,
                    b"OTHER \x00" as *const u8 as *const std::os::raw::c_char);
        }
        132 => {
            fprintf(output,
                    b"OTHER_CONTROL \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        133 => {
            fprintf(output,
                    b"OTHER_FORMAT \x00" as *const u8 as *const std::os::raw::c_char);
        }
        134 => {
            fprintf(output,
                    b"OTHER_PRIVATE \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
        135 => {
            fprintf(output,
                    b"OTHER_NA \x00" as *const u8 as *const std::os::raw::c_char);
        }
        136 => {
            fprintf(output,
                    b"BLOCK \x00" as *const u8 as *const std::os::raw::c_char);
        }
        _ => { }
    };
}
unsafe extern "C" fn xmlRegPrintQuantType(mut output: *mut FILE,
                                          mut type_0: xmlRegQuantType) {
    match type_0 as std::os::raw::c_uint {
        1 => {
            fprintf(output,
                    b"epsilon \x00" as *const u8 as *const std::os::raw::c_char);
        }
        2 => {
            fprintf(output, b"once \x00" as *const u8 as *const std::os::raw::c_char);
        }
        3 => {
            fprintf(output, b"? \x00" as *const u8 as *const std::os::raw::c_char);
        }
        4 => {
            fprintf(output, b"* \x00" as *const u8 as *const std::os::raw::c_char);
        }
        5 => {
            fprintf(output, b"+ \x00" as *const u8 as *const std::os::raw::c_char);
        }
        8 => {
            fprintf(output,
                    b"range \x00" as *const u8 as *const std::os::raw::c_char);
        }
        6 => {
            fprintf(output,
                    b"onceonly \x00" as *const u8 as *const std::os::raw::c_char);
        }
        7 => {
            fprintf(output, b"all \x00" as *const u8 as *const std::os::raw::c_char);
        }
        _ => { }
    };
}
unsafe extern "C" fn xmlRegPrintRange(mut output: *mut FILE,
                                      mut range: xmlRegRangePtr) {
    fprintf(output, b"  range: \x00" as *const u8 as *const std::os::raw::c_char);
    if (*range).neg != 0 {
        fprintf(output, b"negative \x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlRegPrintAtomType(output, (*range).type_0);
    fprintf(output, b"%c - %c\n\x00" as *const u8 as *const std::os::raw::c_char,
            (*range).start, (*range).end);
}
unsafe extern "C" fn xmlRegPrintAtom(mut output: *mut FILE,
                                     mut atom: xmlRegAtomPtr) {
    fprintf(output, b" atom: \x00" as *const u8 as *const std::os::raw::c_char);
    if atom.is_null() {
        fprintf(output, b"NULL\n\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*atom).neg != 0 {
        fprintf(output, b"not \x00" as *const u8 as *const std::os::raw::c_char);
    }
    xmlRegPrintAtomType(output, (*atom).type_0);
    xmlRegPrintQuantType(output, (*atom).quant);
    if (*atom).quant as std::os::raw::c_uint ==
           XML_REGEXP_QUANT_RANGE as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"%d-%d \x00" as *const u8 as *const std::os::raw::c_char,
                (*atom).min, (*atom).max);
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"\'%s\' \x00" as *const u8 as *const std::os::raw::c_char,
                (*atom).valuep as *mut std::os::raw::c_char);
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"char %c\n\x00" as *const u8 as *const std::os::raw::c_char,
                (*atom).codepoint);
    } else if (*atom).type_0 as std::os::raw::c_uint ==
                  XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
        let mut i: std::os::raw::c_int = 0;
        fprintf(output,
                b"%d entries\n\x00" as *const u8 as *const std::os::raw::c_char,
                (*atom).nbRanges);
        i = 0 as std::os::raw::c_int;
        while i < (*atom).nbRanges {
            xmlRegPrintRange(output, *(*atom).ranges.offset(i as isize));
            i += 1
        }
    } else if (*atom).type_0 as std::os::raw::c_uint ==
                  XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output,
                b"start %d end %d\n\x00" as *const u8 as *const std::os::raw::c_char,
                (*(*atom).start).no, (*(*atom).stop).no);
    } else {
        fprintf(output, b"\n\x00" as *const u8 as *const std::os::raw::c_char);
    };
}
unsafe extern "C" fn xmlRegPrintTrans(mut output: *mut FILE,
                                      mut trans: xmlRegTransPtr) {
    fprintf(output, b"  trans: \x00" as *const u8 as *const std::os::raw::c_char);
    if trans.is_null() {
        fprintf(output, b"NULL\n\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*trans).to < 0 as std::os::raw::c_int {
        fprintf(output, b"removed\n\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*trans).nd != 0 as std::os::raw::c_int {
        if (*trans).nd == 2 as std::os::raw::c_int {
            fprintf(output,
                    b"last not determinist, \x00" as *const u8 as
                        *const std::os::raw::c_char);
        } else {
            fprintf(output,
                    b"not determinist, \x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
    }
    if (*trans).counter >= 0 as std::os::raw::c_int {
        fprintf(output,
                b"counted %d, \x00" as *const u8 as *const std::os::raw::c_char,
                (*trans).counter);
    }
    if (*trans).count == 0x123456 as std::os::raw::c_int {
        fprintf(output,
                b"all transition, \x00" as *const u8 as *const std::os::raw::c_char);
    } else if (*trans).count >= 0 as std::os::raw::c_int {
        fprintf(output,
                b"count based %d, \x00" as *const u8 as *const std::os::raw::c_char,
                (*trans).count);
    }
    if (*trans).atom.is_null() {
        fprintf(output,
                b"epsilon to %d\n\x00" as *const u8 as *const std::os::raw::c_char,
                (*trans).to);
        return
    }
    if (*(*trans).atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"char %c \x00" as *const u8 as *const std::os::raw::c_char,
                (*(*trans).atom).codepoint);
    }
    fprintf(output,
            b"atom %d, to %d\n\x00" as *const u8 as *const std::os::raw::c_char,
            (*(*trans).atom).no, (*trans).to);
}
unsafe extern "C" fn xmlRegPrintState(mut output: *mut FILE,
                                      mut state: xmlRegStatePtr) {
    let mut i: std::os::raw::c_int = 0;
    fprintf(output, b" state: \x00" as *const u8 as *const std::os::raw::c_char);
    if state.is_null() {
        fprintf(output, b"NULL\n\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    if (*state).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_START_STATE as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"START \x00" as *const u8 as *const std::os::raw::c_char);
    }
    if (*state).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint {
        fprintf(output, b"FINAL \x00" as *const u8 as *const std::os::raw::c_char);
    }
    fprintf(output,
            b"%d, %d transitions:\n\x00" as *const u8 as *const std::os::raw::c_char,
            (*state).no, (*state).nbTrans);
    i = 0 as std::os::raw::c_int;
    while i < (*state).nbTrans {
        xmlRegPrintTrans(output, &mut *(*state).trans.offset(i as isize));
        i += 1
    };
}
/* ***********************************************************************
 *									*
 *		 Finite Automata structures manipulations		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlRegAtomAddRange(mut ctxt: xmlRegParserCtxtPtr,
                                        mut atom: xmlRegAtomPtr,
                                        mut neg: std::os::raw::c_int,
                                        mut type_0: xmlRegAtomType,
                                        mut start: std::os::raw::c_int,
                                        mut end: std::os::raw::c_int,
                                        mut blockName: *mut xmlChar) {
    let mut range: xmlRegRangePtr = 0 as *mut xmlRegRange;
    if atom.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"add range: atom is NULL\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    if (*atom).type_0 as std::os::raw::c_uint !=
           XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"add range: atom is not ranges\x00" as *const u8
                                as *const std::os::raw::c_char);
        return
    }
    if (*atom).maxRanges == 0 as std::os::raw::c_int {
        (*atom).maxRanges = 4 as std::os::raw::c_int;
        (*atom).ranges =
            xmlMalloc.expect("non-null function pointer")(((*atom).maxRanges
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegRangePtr>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegRangePtr;
        if (*atom).ranges.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding ranges\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*atom).maxRanges = 0 as std::os::raw::c_int;
            return
        }
    } else if (*atom).nbRanges >= (*atom).maxRanges {
        let mut tmp: *mut xmlRegRangePtr = 0 as *mut xmlRegRangePtr;
        (*atom).maxRanges *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*atom).ranges as
                                                               *mut std::os::raw::c_void,
                                                           ((*atom).maxRanges
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegRangePtr>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegRangePtr;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding ranges\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*atom).maxRanges /= 2 as std::os::raw::c_int;
            return
        }
        (*atom).ranges = tmp
    }
    range = xmlRegNewRange(ctxt, neg, type_0, start, end);
    if range.is_null() { return }
    (*range).blockName = blockName;
    let fresh3 = (*atom).nbRanges;
    (*atom).nbRanges = (*atom).nbRanges + 1;
    let ref mut fresh4 = *(*atom).ranges.offset(fresh3 as isize);
    *fresh4 = range;
}
unsafe extern "C" fn xmlRegGetCounter(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    if (*ctxt).maxCounters == 0 as std::os::raw::c_int {
        (*ctxt).maxCounters = 4 as std::os::raw::c_int;
        (*ctxt).counters =
            xmlMalloc.expect("non-null function pointer")(((*ctxt).maxCounters
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegCounter>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegCounter;
        if (*ctxt).counters.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"allocating counter\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxCounters = 0 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
    } else if (*ctxt).nbCounters >= (*ctxt).maxCounters {
        let mut tmp: *mut xmlRegCounter = 0 as *mut xmlRegCounter;
        (*ctxt).maxCounters *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*ctxt).counters as
                                                               *mut std::os::raw::c_void,
                                                           ((*ctxt).maxCounters
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegCounter>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegCounter;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"allocating counter\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxCounters /= 2 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
        (*ctxt).counters = tmp
    }
    (*(*ctxt).counters.offset((*ctxt).nbCounters as isize)).min =
        -(1 as std::os::raw::c_int);
    (*(*ctxt).counters.offset((*ctxt).nbCounters as isize)).max =
        -(1 as std::os::raw::c_int);
    let fresh5 = (*ctxt).nbCounters;
    (*ctxt).nbCounters = (*ctxt).nbCounters + 1;
    return fresh5;
}
unsafe extern "C" fn xmlRegAtomPush(mut ctxt: xmlRegParserCtxtPtr,
                                    mut atom: xmlRegAtomPtr) -> std::os::raw::c_int {
    if atom.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"atom push: atom is NULL\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    if (*ctxt).maxAtoms == 0 as std::os::raw::c_int {
        (*ctxt).maxAtoms = 4 as std::os::raw::c_int;
        (*ctxt).atoms =
            xmlMalloc.expect("non-null function pointer")(((*ctxt).maxAtoms as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegAtomPtr>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegAtomPtr;
        if (*ctxt).atoms.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"pushing atom\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxAtoms = 0 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
    } else if (*ctxt).nbAtoms >= (*ctxt).maxAtoms {
        let mut tmp: *mut xmlRegAtomPtr = 0 as *mut xmlRegAtomPtr;
        (*ctxt).maxAtoms *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*ctxt).atoms as
                                                               *mut std::os::raw::c_void,
                                                           ((*ctxt).maxAtoms
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegAtomPtr>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegAtomPtr;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"allocating counter\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxAtoms /= 2 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
        (*ctxt).atoms = tmp
    }
    (*atom).no = (*ctxt).nbAtoms;
    let fresh6 = (*ctxt).nbAtoms;
    (*ctxt).nbAtoms = (*ctxt).nbAtoms + 1;
    let ref mut fresh7 = *(*ctxt).atoms.offset(fresh6 as isize);
    *fresh7 = atom;
    return 0 as std::os::raw::c_int;
}
unsafe extern "C" fn xmlRegStateAddTransTo(mut ctxt: xmlRegParserCtxtPtr,
                                           mut target: xmlRegStatePtr,
                                           mut from: std::os::raw::c_int) {
    if (*target).maxTransTo == 0 as std::os::raw::c_int {
        (*target).maxTransTo = 8 as std::os::raw::c_int;
        (*target).transTo =
            xmlMalloc.expect("non-null function pointer")(((*target).maxTransTo
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if (*target).transTo.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding transition\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*target).maxTransTo = 0 as std::os::raw::c_int;
            return
        }
    } else if (*target).nbTransTo >= (*target).maxTransTo {
        let mut tmp: *mut std::os::raw::c_int = 0 as *mut std::os::raw::c_int;
        (*target).maxTransTo *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*target).transTo
                                                               as
                                                               *mut std::os::raw::c_void,
                                                           ((*target).maxTransTo
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding transition\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*target).maxTransTo /= 2 as std::os::raw::c_int;
            return
        }
        (*target).transTo = tmp
    }
    *(*target).transTo.offset((*target).nbTransTo as isize) = from;
    (*target).nbTransTo += 1;
}
unsafe extern "C" fn xmlRegStateAddTrans(mut ctxt: xmlRegParserCtxtPtr,
                                         mut state: xmlRegStatePtr,
                                         mut atom: xmlRegAtomPtr,
                                         mut target: xmlRegStatePtr,
                                         mut counter: std::os::raw::c_int,
                                         mut count: std::os::raw::c_int) {
    let mut nrtrans: std::os::raw::c_int = 0;
    if state.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"add state: state is NULL\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    if target.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"add state: target is NULL\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    /*
     * Other routines follow the philosophy 'When in doubt, add a transition'
     * so we check here whether such a transition is already present and, if
     * so, silently ignore this request.
     */
    nrtrans = (*state).nbTrans - 1 as std::os::raw::c_int;
    while nrtrans >= 0 as std::os::raw::c_int {
        let mut trans: xmlRegTransPtr =
            &mut *(*state).trans.offset(nrtrans as isize) as *mut xmlRegTrans;
        if (*trans).atom == atom && (*trans).to == (*target).no &&
               (*trans).counter == counter && (*trans).count == count {
            return
        }
        nrtrans -= 1
    }
    if (*state).maxTrans == 0 as std::os::raw::c_int {
        (*state).maxTrans = 8 as std::os::raw::c_int;
        (*state).trans =
            xmlMalloc.expect("non-null function pointer")(((*state).maxTrans
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegTrans>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegTrans;
        if (*state).trans.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding transition\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*state).maxTrans = 0 as std::os::raw::c_int;
            return
        }
    } else if (*state).nbTrans >= (*state).maxTrans {
        let mut tmp: *mut xmlRegTrans = 0 as *mut xmlRegTrans;
        (*state).maxTrans *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*state).trans as
                                                               *mut std::os::raw::c_void,
                                                           ((*state).maxTrans
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegTrans>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegTrans;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding transition\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*state).maxTrans /= 2 as std::os::raw::c_int;
            return
        }
        (*state).trans = tmp
    }
    let ref mut fresh8 =
        (*(*state).trans.offset((*state).nbTrans as isize)).atom;
    *fresh8 = atom;
    (*(*state).trans.offset((*state).nbTrans as isize)).to = (*target).no;
    (*(*state).trans.offset((*state).nbTrans as isize)).counter = counter;
    (*(*state).trans.offset((*state).nbTrans as isize)).count = count;
    (*(*state).trans.offset((*state).nbTrans as isize)).nd = 0 as std::os::raw::c_int;
    (*state).nbTrans += 1;
    xmlRegStateAddTransTo(ctxt, target, (*state).no);
}
unsafe extern "C" fn xmlRegStatePush(mut ctxt: xmlRegParserCtxtPtr,
                                     mut state: xmlRegStatePtr)
 -> std::os::raw::c_int {
    if state.is_null() { return -(1 as std::os::raw::c_int) }
    if (*ctxt).maxStates == 0 as std::os::raw::c_int {
        (*ctxt).maxStates = 4 as std::os::raw::c_int;
        (*ctxt).states =
            xmlMalloc.expect("non-null function pointer")(((*ctxt).maxStates
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegStatePtr>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegStatePtr;
        if (*ctxt).states.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding state\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxStates = 0 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
    } else if (*ctxt).nbStates >= (*ctxt).maxStates {
        let mut tmp: *mut xmlRegStatePtr = 0 as *mut xmlRegStatePtr;
        (*ctxt).maxStates *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*ctxt).states as
                                                               *mut std::os::raw::c_void,
                                                           ((*ctxt).maxStates
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegStatePtr>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegStatePtr;
        if tmp.is_null() {
            xmlRegexpErrMemory(ctxt,
                               b"adding state\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*ctxt).maxStates /= 2 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
        (*ctxt).states = tmp
    }
    (*state).no = (*ctxt).nbStates;
    let fresh9 = (*ctxt).nbStates;
    (*ctxt).nbStates = (*ctxt).nbStates + 1;
    let ref mut fresh10 = *(*ctxt).states.offset(fresh9 as isize);
    *fresh10 = state;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlFAGenerateAllTransition:
 * @ctxt:  a regexp parser context
 * @from:  the from state
 * @to:  the target state or NULL for building a new one
 * @lax:
 *
 */
unsafe extern "C" fn xmlFAGenerateAllTransition(mut ctxt: xmlRegParserCtxtPtr,
                                                mut from: xmlRegStatePtr,
                                                mut to: xmlRegStatePtr,
                                                mut lax: std::os::raw::c_int) {
    if to.is_null() {
        to = xmlRegNewState(ctxt);
        xmlRegStatePush(ctxt, to);
        (*ctxt).state = to
    }
    if lax != 0 {
        xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr, to,
                            -(1 as std::os::raw::c_int), 0x123457 as std::os::raw::c_int);
    } else {
        xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr, to,
                            -(1 as std::os::raw::c_int), 0x123456 as std::os::raw::c_int);
    };
}
/* *
 * xmlFAGenerateEpsilonTransition:
 * @ctxt:  a regexp parser context
 * @from:  the from state
 * @to:  the target state or NULL for building a new one
 *
 */
unsafe extern "C" fn xmlFAGenerateEpsilonTransition(mut ctxt:
                                                        xmlRegParserCtxtPtr,
                                                    mut from: xmlRegStatePtr,
                                                    mut to: xmlRegStatePtr) {
    if to.is_null() {
        to = xmlRegNewState(ctxt);
        xmlRegStatePush(ctxt, to);
        (*ctxt).state = to
    }
    xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr, to,
                        -(1 as std::os::raw::c_int), -(1 as std::os::raw::c_int));
}
/* *
 * xmlFAGenerateCountedEpsilonTransition:
 * @ctxt:  a regexp parser context
 * @from:  the from state
 * @to:  the target state or NULL for building a new one
 * counter:  the counter for that transition
 *
 */
unsafe extern "C" fn xmlFAGenerateCountedEpsilonTransition(mut ctxt:
                                                               xmlRegParserCtxtPtr,
                                                           mut from:
                                                               xmlRegStatePtr,
                                                           mut to:
                                                               xmlRegStatePtr,
                                                           mut counter:
                                                               std::os::raw::c_int) {
    if to.is_null() {
        to = xmlRegNewState(ctxt);
        xmlRegStatePush(ctxt, to);
        (*ctxt).state = to
    }
    xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr, to, counter,
                        -(1 as std::os::raw::c_int));
}
/* *
 * xmlFAGenerateCountedTransition:
 * @ctxt:  a regexp parser context
 * @from:  the from state
 * @to:  the target state or NULL for building a new one
 * counter:  the counter for that transition
 *
 */
unsafe extern "C" fn xmlFAGenerateCountedTransition(mut ctxt:
                                                        xmlRegParserCtxtPtr,
                                                    mut from: xmlRegStatePtr,
                                                    mut to: xmlRegStatePtr,
                                                    mut counter:
                                                        std::os::raw::c_int) {
    if to.is_null() {
        to = xmlRegNewState(ctxt);
        xmlRegStatePush(ctxt, to);
        (*ctxt).state = to
    }
    xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr, to,
                        -(1 as std::os::raw::c_int), counter);
}
/* *
 * xmlFAGenerateTransitions:
 * @ctxt:  a regexp parser context
 * @from:  the from state
 * @to:  the target state or NULL for building a new one
 * @atom:  the atom generating the transition
 *
 * Returns 0 if success and -1 in case of error.
 */
unsafe extern "C" fn xmlFAGenerateTransitions(mut ctxt: xmlRegParserCtxtPtr,
                                              mut from: xmlRegStatePtr,
                                              mut to: xmlRegStatePtr,
                                              mut atom: xmlRegAtomPtr)
 -> std::os::raw::c_int {
    let mut end: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut nullable: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if atom.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"genrate transition: atom == NULL\x00" as
                                *const u8 as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    if (*atom).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint {
        /*
	 * this is a subexpression handling one should not need to
	 * create a new node except for XML_REGEXP_QUANT_RANGE.
	 */
        if xmlRegAtomPush(ctxt, atom) < 0 as std::os::raw::c_int {
            return -(1 as std::os::raw::c_int)
        }
        if !to.is_null() && (*atom).stop != to &&
               (*atom).quant as std::os::raw::c_uint !=
                   XML_REGEXP_QUANT_RANGE as std::os::raw::c_int as std::os::raw::c_uint {
            /*
	     * Generate an epsilon transition to link to the target
	     */
            xmlFAGenerateEpsilonTransition(ctxt, (*atom).stop, to);
        }
        match (*atom).quant as std::os::raw::c_uint {
            3 => {
                (*atom).quant = XML_REGEXP_QUANT_ONCE;
                /*
		 * transition done to the state after end of atom.
		 *      1. set transition from atom start to new state
		 *      2. set transition from atom end to this state.
		 */
                if to.is_null() {
                    xmlFAGenerateEpsilonTransition(ctxt, (*atom).start,
                                                   0 as xmlRegStatePtr);
                    xmlFAGenerateEpsilonTransition(ctxt, (*atom).stop,
                                                   (*ctxt).state);
                } else {
                    xmlFAGenerateEpsilonTransition(ctxt, (*atom).start, to);
                }
            }
            4 => {
                (*atom).quant = XML_REGEXP_QUANT_ONCE;
                xmlFAGenerateEpsilonTransition(ctxt, (*atom).start,
                                               (*atom).stop);
                xmlFAGenerateEpsilonTransition(ctxt, (*atom).stop,
                                               (*atom).start);
            }
            5 => {
                (*atom).quant = XML_REGEXP_QUANT_ONCE;
                xmlFAGenerateEpsilonTransition(ctxt, (*atom).stop,
                                               (*atom).start);
            }
            8 => {
                let mut counter: std::os::raw::c_int = 0;
                let mut inter: xmlRegStatePtr = 0 as *mut xmlRegState;
                let mut newstate: xmlRegStatePtr = 0 as *mut xmlRegState;
                /*
		 * create the final state now if needed
		 */
                if !to.is_null() {
                    newstate = to
                } else {
                    newstate = xmlRegNewState(ctxt);
                    xmlRegStatePush(ctxt, newstate);
                }
                /*
		 * The principle here is to use counted transition
		 * to avoid explosion in the number of states in the
		 * graph. This is clearly more complex but should not
		 * be exploitable at runtime.
		 */
                if (*atom).min == 0 as std::os::raw::c_int && (*atom).start0.is_null()
                   {
                    let mut copy: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
                    /*
		     * duplicate a transition based on atom to count next
		     * occurences after 1. We cannot loop to atom->start
		     * directly because we need an epsilon transition to
		     * newstate.
		     */
		     /* ???? For some reason it seems we never reach that
		        case, I suppose this got optimized out before when
			building the automata */
                    copy = xmlRegCopyAtom(ctxt, atom);
                    if copy.is_null() { return -(1 as std::os::raw::c_int) }
                    (*copy).quant = XML_REGEXP_QUANT_ONCE;
                    (*copy).min = 0 as std::os::raw::c_int;
                    (*copy).max = 0 as std::os::raw::c_int;
                    if xmlFAGenerateTransitions(ctxt, (*atom).start,
                                                0 as xmlRegStatePtr, copy) <
                           0 as std::os::raw::c_int {
                        return -(1 as std::os::raw::c_int)
                    }
                    inter = (*ctxt).state;
                    counter = xmlRegGetCounter(ctxt);
                    (*(*ctxt).counters.offset(counter as isize)).min =
                        (*atom).min - 1 as std::os::raw::c_int;
                    (*(*ctxt).counters.offset(counter as isize)).max =
                        (*atom).max - 1 as std::os::raw::c_int;
                    /* count the number of times we see it again */
                    xmlFAGenerateCountedEpsilonTransition(ctxt, inter,
                                                          (*atom).stop,
                                                          counter);
                    /* allow a way out based on the count */
                    xmlFAGenerateCountedTransition(ctxt, inter, newstate,
                                                   counter);
                    /* and also allow a direct exit for 0 */
                    xmlFAGenerateEpsilonTransition(ctxt, (*atom).start,
                                                   newstate);
                } else {
                    /*
		     * either we need the atom at least once or there
		     * is an atom->start0 allowing to easilly plug the
		     * epsilon transition.
		     */
                    counter = xmlRegGetCounter(ctxt);
                    (*(*ctxt).counters.offset(counter as isize)).min =
                        (*atom).min - 1 as std::os::raw::c_int;
                    (*(*ctxt).counters.offset(counter as isize)).max =
                        (*atom).max - 1 as std::os::raw::c_int;
                    /* count the number of times we see it again */
                    xmlFAGenerateCountedEpsilonTransition(ctxt, (*atom).stop,
                                                          (*atom).start,
                                                          counter);
                    /* allow a way out based on the count */
                    xmlFAGenerateCountedTransition(ctxt, (*atom).stop,
                                                   newstate, counter);
                    /* and if needed allow a direct exit for 0 */
                    if (*atom).min == 0 as std::os::raw::c_int {
                        xmlFAGenerateEpsilonTransition(ctxt, (*atom).start0,
                                                       newstate);
                    }
                }
                (*atom).min = 0 as std::os::raw::c_int;
                (*atom).max = 0 as std::os::raw::c_int;
                (*atom).quant = XML_REGEXP_QUANT_ONCE;
                (*ctxt).state = newstate
            }
            _ => { }
        }
        return 0 as std::os::raw::c_int
    }
    if (*atom).min == 0 as std::os::raw::c_int && (*atom).max == 0 as std::os::raw::c_int &&
           (*atom).quant as std::os::raw::c_uint ==
               XML_REGEXP_QUANT_RANGE as std::os::raw::c_int as std::os::raw::c_uint {
        /*
	 * we can discard the atom and generate an epsilon transition instead
	 */
        if to.is_null() {
            to = xmlRegNewState(ctxt);
            if !to.is_null() {
                xmlRegStatePush(ctxt, to);
            } else { return -(1 as std::os::raw::c_int) }
        }
        xmlFAGenerateEpsilonTransition(ctxt, from, to);
        (*ctxt).state = to;
        xmlRegFreeAtom(atom);
        return 0 as std::os::raw::c_int
    }
    if to.is_null() {
        to = xmlRegNewState(ctxt);
        if !to.is_null() {
            xmlRegStatePush(ctxt, to);
        } else { return -(1 as std::os::raw::c_int) }
    }
    end = to;
    if (*atom).quant as std::os::raw::c_uint ==
           XML_REGEXP_QUANT_MULT as std::os::raw::c_int as std::os::raw::c_uint ||
           (*atom).quant as std::os::raw::c_uint ==
               XML_REGEXP_QUANT_PLUS as std::os::raw::c_int as std::os::raw::c_uint {
        /*
	 * Do not pollute the target state by adding transitions from
	 * it as it is likely to be the shared target of multiple branches.
	 * So isolate with an epsilon transition.
	 */
        let mut tmp: xmlRegStatePtr = 0 as *mut xmlRegState;
        tmp = xmlRegNewState(ctxt);
        if !tmp.is_null() {
            xmlRegStatePush(ctxt, tmp);
        } else { return -(1 as std::os::raw::c_int) }
        xmlFAGenerateEpsilonTransition(ctxt, tmp, to);
        to = tmp
    }
    if xmlRegAtomPush(ctxt, atom) < 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    if (*atom).quant as std::os::raw::c_uint ==
           XML_REGEXP_QUANT_RANGE as std::os::raw::c_int as std::os::raw::c_uint &&
           (*atom).min == 0 as std::os::raw::c_int && (*atom).max > 0 as std::os::raw::c_int {
        nullable = 1 as std::os::raw::c_int;
        (*atom).min = 1 as std::os::raw::c_int;
        if (*atom).max == 1 as std::os::raw::c_int {
            (*atom).quant = XML_REGEXP_QUANT_OPT
        }
    }
    xmlRegStateAddTrans(ctxt, from, atom, to, -(1 as std::os::raw::c_int),
                        -(1 as std::os::raw::c_int));
    (*ctxt).state = end;
    match (*atom).quant as std::os::raw::c_uint {
        3 => {
            (*atom).quant = XML_REGEXP_QUANT_ONCE;
            xmlFAGenerateEpsilonTransition(ctxt, from, to);
        }
        4 => {
            (*atom).quant = XML_REGEXP_QUANT_ONCE;
            xmlFAGenerateEpsilonTransition(ctxt, from, to);
            xmlRegStateAddTrans(ctxt, to, atom, to, -(1 as std::os::raw::c_int),
                                -(1 as std::os::raw::c_int));
        }
        5 => {
            (*atom).quant = XML_REGEXP_QUANT_ONCE;
            xmlRegStateAddTrans(ctxt, to, atom, to, -(1 as std::os::raw::c_int),
                                -(1 as std::os::raw::c_int));
        }
        8 => {
            if nullable != 0 {
                xmlFAGenerateEpsilonTransition(ctxt, from, to);
            }
        }
        _ => { }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlFAReduceEpsilonTransitions:
 * @ctxt:  a regexp parser context
 * @fromnr:  the from state
 * @tonr:  the to state
 * @counter:  should that transition be associated to a counted
 *
 */
unsafe extern "C" fn xmlFAReduceEpsilonTransitions(mut ctxt:
                                                       xmlRegParserCtxtPtr,
                                                   mut fromnr: std::os::raw::c_int,
                                                   mut tonr: std::os::raw::c_int,
                                                   mut counter: std::os::raw::c_int) {
    let mut transnr: std::os::raw::c_int = 0;
    let mut from: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut to: xmlRegStatePtr = 0 as *mut xmlRegState;
    from = *(*ctxt).states.offset(fromnr as isize);
    if from.is_null() { return }
    to = *(*ctxt).states.offset(tonr as isize);
    if to.is_null() { return }
    if (*to).mark as std::os::raw::c_uint ==
           XML_REGEXP_MARK_START as std::os::raw::c_int as std::os::raw::c_uint ||
           (*to).mark as std::os::raw::c_uint ==
               XML_REGEXP_MARK_VISITED as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    (*to).mark = XML_REGEXP_MARK_VISITED;
    if (*to).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint {
        (*from).type_0 = XML_REGEXP_FINAL_STATE
    }
    transnr = 0 as std::os::raw::c_int;
    while transnr < (*to).nbTrans {
        if !((*(*to).trans.offset(transnr as isize)).to < 0 as std::os::raw::c_int) {
            if (*(*to).trans.offset(transnr as isize)).atom.is_null() {
                /*
	     * Don't remove counted transitions
	     * Don't loop either
	     */
                if (*(*to).trans.offset(transnr as isize)).to != fromnr {
                    if (*(*to).trans.offset(transnr as isize)).count >=
                           0 as std::os::raw::c_int {
                        let mut newto: std::os::raw::c_int =
                            (*(*to).trans.offset(transnr as isize)).to;
                        xmlRegStateAddTrans(ctxt, from, 0 as xmlRegAtomPtr,
                                            *(*ctxt).states.offset(newto as
                                                                       isize),
                                            -(1 as std::os::raw::c_int),
                                            (*(*to).trans.offset(transnr as
                                                                     isize)).count);
                    } else if (*(*to).trans.offset(transnr as isize)).counter
                                  >= 0 as std::os::raw::c_int {
                        xmlFAReduceEpsilonTransitions(ctxt, fromnr,
                                                      (*(*to).trans.offset(transnr
                                                                               as
                                                                               isize)).to,
                                                      (*(*to).trans.offset(transnr
                                                                               as
                                                                               isize)).counter);
                    } else {
                        xmlFAReduceEpsilonTransitions(ctxt, fromnr,
                                                      (*(*to).trans.offset(transnr
                                                                               as
                                                                               isize)).to,
                                                      counter);
                    }
                }
            } else {
                let mut newto_0: std::os::raw::c_int =
                    (*(*to).trans.offset(transnr as isize)).to;
                if (*(*to).trans.offset(transnr as isize)).counter >=
                       0 as std::os::raw::c_int {
                    xmlRegStateAddTrans(ctxt, from,
                                        (*(*to).trans.offset(transnr as
                                                                 isize)).atom,
                                        *(*ctxt).states.offset(newto_0 as
                                                                   isize),
                                        (*(*to).trans.offset(transnr as
                                                                 isize)).counter,
                                        -(1 as std::os::raw::c_int));
                } else {
                    xmlRegStateAddTrans(ctxt, from,
                                        (*(*to).trans.offset(transnr as
                                                                 isize)).atom,
                                        *(*ctxt).states.offset(newto_0 as
                                                                   isize),
                                        counter, -(1 as std::os::raw::c_int));
                }
            }
        }
        transnr += 1
    }
    (*to).mark = XML_REGEXP_MARK_NORMAL;
}
/* *
 * xmlFAEliminateSimpleEpsilonTransitions:
 * @ctxt:  a regexp parser context
 *
 * Eliminating general epsilon transitions can get costly in the general
 * algorithm due to the large amount of generated new transitions and
 * associated comparisons. However for simple epsilon transition used just
 * to separate building blocks when generating the automata this can be
 * reduced to state elimination:
 *    - if there exists an epsilon from X to Y
 *    - if there is no other transition from X
 * then X and Y are semantically equivalent and X can be eliminated
 * If X is the start state then make Y the start state, else replace the
 * target of all transitions to X by transitions to Y.
 */
unsafe extern "C" fn xmlFAEliminateSimpleEpsilonTransitions(mut ctxt:
                                                                xmlRegParserCtxtPtr) {
    let mut statenr: std::os::raw::c_int = 0;
    let mut i: std::os::raw::c_int = 0;
    let mut j: std::os::raw::c_int = 0;
    let mut newto: std::os::raw::c_int = 0;
    let mut state: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut tmp: xmlRegStatePtr = 0 as *mut xmlRegState;
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() {
            if !((*state).nbTrans != 1 as std::os::raw::c_int) {
                if !((*state).type_0 as std::os::raw::c_uint ==
                         XML_REGEXP_UNREACH_STATE as std::os::raw::c_int as
                             std::os::raw::c_uint) {
                    /* is the only transition out a basic transition */
                    if (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                   isize)).atom.is_null() &&
                           (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                       isize)).to >=
                               0 as std::os::raw::c_int &&
                           (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                       isize)).to != statenr
                           &&
                           (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                       isize)).counter <
                               0 as std::os::raw::c_int &&
                           (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                       isize)).count <
                               0 as std::os::raw::c_int {
                        newto =
                            (*(*state).trans.offset(0 as std::os::raw::c_int as
                                                        isize)).to;
                        if !((*state).type_0 as std::os::raw::c_uint ==
                                 XML_REGEXP_START_STATE as std::os::raw::c_int as
                                     std::os::raw::c_uint) {
                            i = 0 as std::os::raw::c_int;
                            while i < (*state).nbTransTo {
                                tmp =
                                    *(*ctxt).states.offset(*(*state).transTo.offset(i
                                                                                        as
                                                                                        isize)
                                                               as isize);
                                j = 0 as std::os::raw::c_int;
                                while j < (*tmp).nbTrans {
                                    if (*(*tmp).trans.offset(j as isize)).to
                                           == statenr {
                                        (*(*tmp).trans.offset(j as isize)).to
                                            = -(1 as std::os::raw::c_int);
                                        xmlRegStateAddTrans(ctxt, tmp,
                                                            (*(*tmp).trans.offset(j
                                                                                      as
                                                                                      isize)).atom,
                                                            *(*ctxt).states.offset(newto
                                                                                       as
                                                                                       isize),
                                                            (*(*tmp).trans.offset(j
                                                                                      as
                                                                                      isize)).counter,
                                                            (*(*tmp).trans.offset(j
                                                                                      as
                                                                                      isize)).count);
                                    }
                                    j += 1
                                }
                                i += 1
                            }
                            if (*state).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_FINAL_STATE as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                                (**(*ctxt).states.offset(newto as
                                                             isize)).type_0 =
                                    XML_REGEXP_FINAL_STATE
                            }
                            /* eliminate the transition completely */
                            (*state).nbTrans = 0 as std::os::raw::c_int;
                            (*state).type_0 = XML_REGEXP_UNREACH_STATE
                        }
                    }
                }
            }
        }
        statenr += 1
    };
}
/* *
 * xmlFAEliminateEpsilonTransitions:
 * @ctxt:  a regexp parser context
 *
 */
unsafe extern "C" fn xmlFAEliminateEpsilonTransitions(mut ctxt:
                                                          xmlRegParserCtxtPtr) {
    let mut statenr: std::os::raw::c_int = 0;
    let mut transnr: std::os::raw::c_int = 0;
    let mut state: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut has_epsilon: std::os::raw::c_int = 0;
    if (*ctxt).states.is_null() { return }
    /*
     * Eliminate simple epsilon transition and the associated unreachable
     * states.
     */
    xmlFAEliminateSimpleEpsilonTransitions(ctxt);
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() &&
               (*state).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_UNREACH_STATE as std::os::raw::c_int as std::os::raw::c_uint {
            xmlRegFreeState(state);
            let ref mut fresh11 = *(*ctxt).states.offset(statenr as isize);
            *fresh11 = 0 as xmlRegStatePtr
        }
        statenr += 1
    }
    has_epsilon = 0 as std::os::raw::c_int;
    /*
     * Build the completed transitions bypassing the epsilons
     * Use a marking algorithm to avoid loops
     * Mark sink states too.
     * Process from the latests states backward to the start when
     * there is long cascading epsilon chains this minimize the
     * recursions and transition compares when adding the new ones
     */
    statenr = (*ctxt).nbStates - 1 as std::os::raw::c_int;
    while statenr >= 0 as std::os::raw::c_int {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() {
            if (*state).nbTrans == 0 as std::os::raw::c_int &&
                   (*state).type_0 as std::os::raw::c_uint !=
                       XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint {
                (*state).type_0 = XML_REGEXP_SINK_STATE
            }
            transnr = 0 as std::os::raw::c_int;
            while transnr < (*state).nbTrans {
                if (*(*state).trans.offset(transnr as isize)).atom.is_null()
                       &&
                       (*(*state).trans.offset(transnr as isize)).to >=
                           0 as std::os::raw::c_int {
                    if (*(*state).trans.offset(transnr as isize)).to ==
                           statenr {
                        (*(*state).trans.offset(transnr as isize)).to =
                            -(1 as std::os::raw::c_int)
                    } else if (*(*state).trans.offset(transnr as isize)).count
                                  < 0 as std::os::raw::c_int {
                        let mut newto: std::os::raw::c_int =
                            (*(*state).trans.offset(transnr as isize)).to;
                        has_epsilon = 1 as std::os::raw::c_int;
                        (*(*state).trans.offset(transnr as isize)).to =
                            -(2 as std::os::raw::c_int);
                        (*state).mark = XML_REGEXP_MARK_START;
                        xmlFAReduceEpsilonTransitions(ctxt, statenr, newto,
                                                      (*(*state).trans.offset(transnr
                                                                                  as
                                                                                  isize)).counter);
                        (*state).mark = XML_REGEXP_MARK_NORMAL
                    }
                }
                transnr += 1
            }
        }
        statenr -= 1
    }
    /*
     * Eliminate the epsilon transitions
     */
    if has_epsilon != 0 {
        statenr = 0 as std::os::raw::c_int;
        while statenr < (*ctxt).nbStates {
            state = *(*ctxt).states.offset(statenr as isize);
            if !state.is_null() {
                transnr = 0 as std::os::raw::c_int;
                while transnr < (*state).nbTrans {
                    let mut trans: xmlRegTransPtr =
                        &mut *(*state).trans.offset(transnr as isize) as
                            *mut xmlRegTrans;
                    if (*trans).atom.is_null() &&
                           (*trans).count < 0 as std::os::raw::c_int &&
                           (*trans).to >= 0 as std::os::raw::c_int {
                        (*trans).to = -(1 as std::os::raw::c_int)
                    }
                    transnr += 1
                }
            }
            statenr += 1
        }
    }
    /*
     * Use this pass to detect unreachable states too
     */
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() { (*state).reached = XML_REGEXP_MARK_NORMAL }
        statenr += 1
    }
    state = *(*ctxt).states.offset(0 as std::os::raw::c_int as isize);
    if !state.is_null() { (*state).reached = XML_REGEXP_MARK_START }
    while !state.is_null() {
        let mut target: xmlRegStatePtr = 0 as xmlRegStatePtr;
        (*state).reached = XML_REGEXP_MARK_VISITED;
        /*
	 * Mark all states reachable from the current reachable state
	 */
        transnr = 0 as std::os::raw::c_int;
        while transnr < (*state).nbTrans {
            if (*(*state).trans.offset(transnr as isize)).to >=
                   0 as std::os::raw::c_int &&
                   (!(*(*state).trans.offset(transnr as isize)).atom.is_null()
                        ||
                        (*(*state).trans.offset(transnr as isize)).count >=
                            0 as std::os::raw::c_int) {
                let mut newto_0: std::os::raw::c_int =
                    (*(*state).trans.offset(transnr as isize)).to;
                if !(*(*ctxt).states.offset(newto_0 as isize)).is_null() {
                    if (**(*ctxt).states.offset(newto_0 as isize)).reached as
                           std::os::raw::c_uint ==
                           XML_REGEXP_MARK_NORMAL as std::os::raw::c_int as
                               std::os::raw::c_uint {
                        (**(*ctxt).states.offset(newto_0 as isize)).reached =
                            XML_REGEXP_MARK_START;
                        target = *(*ctxt).states.offset(newto_0 as isize)
                    }
                }
            }
            transnr += 1
        }
        /*
	 * find the next accessible state not explored
	 */
        if target.is_null() {
            statenr = 1 as std::os::raw::c_int;
            while statenr < (*ctxt).nbStates {
                state = *(*ctxt).states.offset(statenr as isize);
                if !state.is_null() &&
                       (*state).reached as std::os::raw::c_uint ==
                           XML_REGEXP_MARK_START as std::os::raw::c_int as
                               std::os::raw::c_uint {
                    target = state;
                    break ;
                } else { statenr += 1 }
            }
        }
        state = target
    }
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() &&
               (*state).reached as std::os::raw::c_uint ==
                   XML_REGEXP_MARK_NORMAL as std::os::raw::c_int as std::os::raw::c_uint {
            xmlRegFreeState(state);
            let ref mut fresh12 = *(*ctxt).states.offset(statenr as isize);
            *fresh12 = 0 as xmlRegStatePtr
        }
        statenr += 1
    };
}
unsafe extern "C" fn xmlFACompareRanges(mut range1: xmlRegRangePtr,
                                        mut range2: xmlRegRangePtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if (*range1).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range2).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range2).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range1).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range1).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range2).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint {
        return -(1 as std::os::raw::c_int)
    }
    /* put them in order */
    if (*range1).type_0 as std::os::raw::c_uint > (*range2).type_0 as std::os::raw::c_uint {
        let mut tmp: xmlRegRangePtr = 0 as *mut xmlRegRange;
        tmp = range1;
        range1 = range2;
        range2 = tmp
    }
    if (*range1).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint ||
           (*range2).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint {
        ret = 1 as std::os::raw::c_int
    } else if (*range1).type_0 as std::os::raw::c_uint ==
                  XML_REGEXP_EPSILON as std::os::raw::c_int as std::os::raw::c_uint ||
                  (*range2).type_0 as std::os::raw::c_uint ==
                      XML_REGEXP_EPSILON as std::os::raw::c_int as std::os::raw::c_uint {
        return 0 as std::os::raw::c_int
    } else {
        if (*range1).type_0 as std::os::raw::c_uint ==
               (*range2).type_0 as std::os::raw::c_uint {
            if (*range1).type_0 as std::os::raw::c_uint !=
                   XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint {
                ret = 1 as std::os::raw::c_int
            } else if (*range1).end < (*range2).start ||
                          (*range2).end < (*range1).start {
                ret = 0 as std::os::raw::c_int
            } else { ret = 1 as std::os::raw::c_int }
        } else if (*range1).type_0 as std::os::raw::c_uint ==
                      XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint {
            let mut codepoint: std::os::raw::c_int = 0;
            let mut neg: std::os::raw::c_int = 0 as std::os::raw::c_int;
            /*
	 * just check all codepoints in the range for acceptance,
	 * this is usually way cheaper since done only once at
	 * compilation than testing over and over at runtime or
	 * pushing too many states when evaluating.
	 */
            if (*range1).neg == 0 as std::os::raw::c_int &&
                   (*range2).neg != 0 as std::os::raw::c_int ||
                   (*range1).neg != 0 as std::os::raw::c_int &&
                       (*range2).neg == 0 as std::os::raw::c_int {
                neg = 1 as std::os::raw::c_int
            }
            codepoint = (*range1).start;
            while codepoint <= (*range1).end {
                ret =
                    xmlRegCheckCharacterRange((*range2).type_0, codepoint,
                                              0 as std::os::raw::c_int,
                                              (*range2).start, (*range2).end,
                                              (*range2).blockName);
                if ret < 0 as std::os::raw::c_int { return -(1 as std::os::raw::c_int) }
                if neg == 1 as std::os::raw::c_int && ret == 0 as std::os::raw::c_int ||
                       neg == 0 as std::os::raw::c_int && ret == 1 as std::os::raw::c_int {
                    return 1 as std::os::raw::c_int
                }
                codepoint += 1
            }
            return 0 as std::os::raw::c_int
        } else {
            if (*range1).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_BLOCK_NAME as std::os::raw::c_int as std::os::raw::c_uint ||
                   (*range2).type_0 as std::os::raw::c_uint ==
                       XML_REGEXP_BLOCK_NAME as std::os::raw::c_int as std::os::raw::c_uint {
                if (*range1).type_0 as std::os::raw::c_uint ==
                       (*range2).type_0 as std::os::raw::c_uint {
                    ret =
                        xmlStrEqual((*range1).blockName, (*range2).blockName)
                } else {
                    /*
	     * comparing a block range with anything else is way
	     * too costly, and maintining the table is like too much
	     * memory too, so let's force the automata to save state
	     * here.
	     */
                    return 1 as std::os::raw::c_int
                }
            } else if ((*range1).type_0 as std::os::raw::c_uint) <
                          XML_REGEXP_LETTER as std::os::raw::c_int as std::os::raw::c_uint ||
                          ((*range2).type_0 as std::os::raw::c_uint) <
                              XML_REGEXP_LETTER as std::os::raw::c_int as std::os::raw::c_uint
             {
                if (*range1).type_0 as std::os::raw::c_uint ==
                       XML_REGEXP_ANYSPACE as std::os::raw::c_int as std::os::raw::c_uint &&
                       (*range2).type_0 as std::os::raw::c_uint ==
                           XML_REGEXP_NOTSPACE as std::os::raw::c_int as std::os::raw::c_uint
                   {
                    ret = 0 as std::os::raw::c_int
                } else if (*range1).type_0 as std::os::raw::c_uint ==
                              XML_REGEXP_INITNAME as std::os::raw::c_int as
                                  std::os::raw::c_uint &&
                              (*range2).type_0 as std::os::raw::c_uint ==
                                  XML_REGEXP_NOTINITNAME as std::os::raw::c_int as
                                      std::os::raw::c_uint {
                    ret = 0 as std::os::raw::c_int
                } else if (*range1).type_0 as std::os::raw::c_uint ==
                              XML_REGEXP_NAMECHAR as std::os::raw::c_int as
                                  std::os::raw::c_uint &&
                              (*range2).type_0 as std::os::raw::c_uint ==
                                  XML_REGEXP_NOTNAMECHAR as std::os::raw::c_int as
                                      std::os::raw::c_uint {
                    ret = 0 as std::os::raw::c_int
                } else if (*range1).type_0 as std::os::raw::c_uint ==
                              XML_REGEXP_DECIMAL as std::os::raw::c_int as
                                  std::os::raw::c_uint &&
                              (*range2).type_0 as std::os::raw::c_uint ==
                                  XML_REGEXP_NOTDECIMAL as std::os::raw::c_int as
                                      std::os::raw::c_uint {
                    ret = 0 as std::os::raw::c_int
                } else if (*range1).type_0 as std::os::raw::c_uint ==
                              XML_REGEXP_REALCHAR as std::os::raw::c_int as
                                  std::os::raw::c_uint &&
                              (*range2).type_0 as std::os::raw::c_uint ==
                                  XML_REGEXP_NOTREALCHAR as std::os::raw::c_int as
                                      std::os::raw::c_uint {
                    ret = 0 as std::os::raw::c_int
                } else {
                    /* same thing to limit complexity */
                    return 1 as std::os::raw::c_int
                }
            } else {
                ret = 0 as std::os::raw::c_int;
                /* range1->type < range2->type here */
                match (*range1).type_0 as std::os::raw::c_uint {
                    100 => {
                        /* all disjoint except in the subgroups */
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_LETTER_UPPERCASE as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_LETTER_LOWERCASE as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_LETTER_TITLECASE as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_LETTER_MODIFIER as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_LETTER_OTHERS as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    106 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_MARK_NONSPACING as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_MARK_SPACECOMBINING as
                                       std::os::raw::c_int as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    110 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_NUMBER_DECIMAL as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_NUMBER_LETTER as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_NUMBER_OTHERS as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    114 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_PUNCT_CONNECTOR as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_DASH as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_OPEN as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_CLOSE as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_INITQUOTE as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_FINQUOTE as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    122 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_SEPAR_SPACE as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_SEPAR_LINE as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    126 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_SYMBOL_MATH as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_SYMBOL_CURRENCY as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_SYMBOL_MODIFIER as std::os::raw::c_int
                                       as std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    131 => {
                        if (*range2).type_0 as std::os::raw::c_uint ==
                               XML_REGEXP_OTHER_CONTROL as std::os::raw::c_int as
                                   std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_OTHER_FORMAT as std::os::raw::c_int as
                                       std::os::raw::c_uint ||
                               (*range2).type_0 as std::os::raw::c_uint ==
                                   XML_REGEXP_OTHER_PRIVATE as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 1 as std::os::raw::c_int
                        }
                    }
                    _ => {
                        if (*range2).type_0 as std::os::raw::c_uint >=
                               XML_REGEXP_LETTER as std::os::raw::c_int as
                                   std::os::raw::c_uint &&
                               ((*range2).type_0 as std::os::raw::c_uint) <
                                   XML_REGEXP_BLOCK_NAME as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            ret = 0 as std::os::raw::c_int
                        } else {
                            /* safety net ! */
                            return 1 as std::os::raw::c_int
                        }
                    }
                }
            }
        }
    }
    if (*range1).neg == 0 as std::os::raw::c_int && (*range2).neg != 0 as std::os::raw::c_int
           ||
           (*range1).neg != 0 as std::os::raw::c_int &&
               (*range2).neg == 0 as std::os::raw::c_int {
        ret = (ret == 0) as std::os::raw::c_int
    }
    return ret;
}
/* *
 * xmlFACompareAtomTypes:
 * @type1:  an atom type
 * @type2:  an atom type
 *
 * Compares two atoms type to check whether they intersect in some ways,
 * this is used by xmlFACompareAtoms only
 *
 * Returns 1 if they may intersect and 0 otherwise
 */
unsafe extern "C" fn xmlFACompareAtomTypes(mut type1: xmlRegAtomType,
                                           mut type2: xmlRegAtomType)
 -> std::os::raw::c_int {
    if type1 as std::os::raw::c_uint ==
           XML_REGEXP_EPSILON as std::os::raw::c_int as std::os::raw::c_uint ||
           type1 as std::os::raw::c_uint ==
               XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint ||
           type1 as std::os::raw::c_uint ==
               XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint ||
           type1 as std::os::raw::c_uint ==
               XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint ||
           type1 as std::os::raw::c_uint ==
               XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint ||
           type1 as std::os::raw::c_uint ==
               XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint {
        return 1 as std::os::raw::c_int
    }
    if type2 as std::os::raw::c_uint ==
           XML_REGEXP_EPSILON as std::os::raw::c_int as std::os::raw::c_uint ||
           type2 as std::os::raw::c_uint ==
               XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint ||
           type2 as std::os::raw::c_uint ==
               XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint ||
           type2 as std::os::raw::c_uint ==
               XML_REGEXP_SUBREG as std::os::raw::c_int as std::os::raw::c_uint ||
           type2 as std::os::raw::c_uint ==
               XML_REGEXP_STRING as std::os::raw::c_int as std::os::raw::c_uint ||
           type2 as std::os::raw::c_uint ==
               XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint {
        return 1 as std::os::raw::c_int
    }
    if type1 as std::os::raw::c_uint == type2 as std::os::raw::c_uint {
        return 1 as std::os::raw::c_int
    }
    /* simplify subsequent compares by making sure type1 < type2 */
    if type1 as std::os::raw::c_uint > type2 as std::os::raw::c_uint {
        let mut tmp: xmlRegAtomType = type1;
        type1 = type2;
        type2 = tmp
    }
    match type1 as std::os::raw::c_uint {
        7 => {
            /* \s */
            /* can't be a letter, number, mark, pontuation, symbol */
            if type2 as std::os::raw::c_uint ==
                   XML_REGEXP_NOTSPACE as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_LETTER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_LETTER_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_NUMBER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_NUMBER_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_MARK as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_PUNCT as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SYMBOL as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint {
                return 0 as std::os::raw::c_int
            }
        }
        8 => { }
        9 => {
            /* \l */
            /* can't be a number, mark, separator, pontuation, symbol or other */
            if type2 as std::os::raw::c_uint ==
                   XML_REGEXP_NOTINITNAME as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_NUMBER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_NUMBER_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_MARK as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SEPAR as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_PUNCT as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SYMBOL as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_OTHER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_OTHER_NA as std::os::raw::c_int as std::os::raw::c_uint
               {
                return 0 as std::os::raw::c_int
            }
        }
        10 => { }
        11 => {
            /* \c */
            /* can't be a mark, separator, pontuation, symbol or other */
            if type2 as std::os::raw::c_uint ==
                   XML_REGEXP_NOTNAMECHAR as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_MARK as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_PUNCT as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SEPAR as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SYMBOL as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_OTHER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_OTHER_NA as std::os::raw::c_int as std::os::raw::c_uint
               {
                return 0 as std::os::raw::c_int
            }
        }
        12 => { }
        13 => {
            /* \d */
            /* can't be a letter, mark, separator, pontuation, symbol or other */
            if type2 as std::os::raw::c_uint ==
                   XML_REGEXP_NOTDECIMAL as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint ==
                       XML_REGEXP_REALCHAR as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_LETTER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_LETTER_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_MARK as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_PUNCT as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SEPAR as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SYMBOL as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_OTHER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_OTHER_NA as std::os::raw::c_int as std::os::raw::c_uint
               {
                return 0 as std::os::raw::c_int
            }
        }
        14 => { }
        15 => {
            /* \w */
            /* can't be a mark, separator, pontuation, symbol or other */
            if type2 as std::os::raw::c_uint ==
                   XML_REGEXP_NOTDECIMAL as std::os::raw::c_int as std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_MARK as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_PUNCT as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SEPAR as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_SYMBOL as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as
                               std::os::raw::c_uint ||
                   type2 as std::os::raw::c_uint >=
                       XML_REGEXP_OTHER as std::os::raw::c_int as std::os::raw::c_uint &&
                       type2 as std::os::raw::c_uint <=
                           XML_REGEXP_OTHER_NA as std::os::raw::c_int as std::os::raw::c_uint
               {
                return 0 as std::os::raw::c_int
            }
        }
        100 => {
            /*
	 * at that point we know both type 1 and type2 are from
	 * character categories are ordered and are different,
	 * it becomes simple because this is a partition
	 */
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_LETTER_OTHERS as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        101 | 102 | 103 | 104 | 105 => { return 0 as std::os::raw::c_int }
        106 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_MARK_ENCLOSING as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        107 | 108 | 109 => { return 0 as std::os::raw::c_int }
        110 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_NUMBER_OTHERS as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        111 | 112 | 113 => { return 0 as std::os::raw::c_int }
        114 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_PUNCT_OTHERS as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        115 | 116 | 117 | 118 | 119 | 120 | 121 => { return 0 as std::os::raw::c_int }
        122 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_SEPAR_PARA as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        123 | 124 | 125 => { return 0 as std::os::raw::c_int }
        126 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_SYMBOL_OTHERS as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        127 | 128 | 129 | 130 => { return 0 as std::os::raw::c_int }
        131 => {
            if type2 as std::os::raw::c_uint <=
                   XML_REGEXP_OTHER_NA as std::os::raw::c_int as std::os::raw::c_uint {
                return 1 as std::os::raw::c_int
            }
            return 0 as std::os::raw::c_int
        }
        132 | 133 | 134 | 135 => { return 0 as std::os::raw::c_int }
        16 | _ => { }
    }
    return 1 as std::os::raw::c_int;
}
/* *
 * xmlFAEqualAtoms:
 * @atom1:  an atom
 * @atom2:  an atom
 * @deep: if not set only compare string pointers
 *
 * Compares two atoms to check whether they are the same exactly
 * this is used to remove equivalent transitions
 *
 * Returns 1 if same and 0 otherwise
 */
unsafe extern "C" fn xmlFAEqualAtoms(mut atom1: xmlRegAtomPtr,
                                     mut atom2: xmlRegAtomPtr,
                                     mut deep: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if atom1 == atom2 { return 1 as std::os::raw::c_int }
    if atom1.is_null() || atom2.is_null() { return 0 as std::os::raw::c_int }
    if (*atom1).type_0 as std::os::raw::c_uint != (*atom2).type_0 as std::os::raw::c_uint {
        return 0 as std::os::raw::c_int
    }
    match (*atom1).type_0 as std::os::raw::c_uint {
        1 => { ret = 0 as std::os::raw::c_int }
        5 => {
            if deep == 0 {
                ret = ((*atom1).valuep == (*atom2).valuep) as std::os::raw::c_int
            } else {
                ret =
                    xmlStrEqual((*atom1).valuep as *mut xmlChar,
                                (*atom2).valuep as *mut xmlChar)
            }
        }
        2 => {
            ret = ((*atom1).codepoint == (*atom2).codepoint) as std::os::raw::c_int
        }
        3 => {
            /* too hard to do in the general case */
            ret = 0 as std::os::raw::c_int
        }
        _ => { }
    }
    return ret;
}
/* *
 * xmlFACompareAtoms:
 * @atom1:  an atom
 * @atom2:  an atom
 * @deep: if not set only compare string pointers
 *
 * Compares two atoms to check whether they intersect in some ways,
 * this is used by xmlFAComputesDeterminism and xmlFARecurseDeterminism only
 *
 * Returns 1 if yes and 0 otherwise
 */
unsafe extern "C" fn xmlFACompareAtoms(mut atom1: xmlRegAtomPtr,
                                       mut atom2: xmlRegAtomPtr,
                                       mut deep: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut current_block: u64;
    let mut ret: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if atom1 == atom2 { return 1 as std::os::raw::c_int }
    if atom1.is_null() || atom2.is_null() { return 0 as std::os::raw::c_int }
    if (*atom1).type_0 as std::os::raw::c_uint ==
           XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint ||
           (*atom2).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_ANYCHAR as std::os::raw::c_int as std::os::raw::c_uint {
        return 1 as std::os::raw::c_int
    }
    if (*atom1).type_0 as std::os::raw::c_uint > (*atom2).type_0 as std::os::raw::c_uint {
        let mut tmp: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
        tmp = atom1;
        atom1 = atom2;
        atom2 = tmp
    }
    if (*atom1).type_0 as std::os::raw::c_uint != (*atom2).type_0 as std::os::raw::c_uint {
        ret = xmlFACompareAtomTypes((*atom1).type_0, (*atom2).type_0);
        /* if they can't intersect at the type level break now */
        if ret == 0 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
    }
    match (*atom1).type_0 as std::os::raw::c_uint {
        5 => {
            if deep == 0 {
                ret = ((*atom1).valuep != (*atom2).valuep) as std::os::raw::c_int
            } else {
                ret =
                    xmlRegStrEqualWildcard((*atom1).valuep as *mut xmlChar,
                                           (*atom2).valuep as *mut xmlChar)
            }
            current_block = 355774860896271720;
        }
        2 => {
            if (*atom2).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_CHARVAL as std::os::raw::c_int as std::os::raw::c_uint {
                ret =
                    ((*atom1).codepoint == (*atom2).codepoint) as std::os::raw::c_int
            } else {
                ret = xmlRegCheckCharacter(atom2, (*atom1).codepoint);
                if ret < 0 as std::os::raw::c_int { ret = 1 as std::os::raw::c_int }
            }
            current_block = 355774860896271720;
        }
        3 => {
            if (*atom2).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
                let mut i: std::os::raw::c_int = 0;
                let mut j: std::os::raw::c_int = 0;
                let mut res: std::os::raw::c_int = 0;
                let mut r1: xmlRegRangePtr = 0 as *mut xmlRegRange;
                let mut r2: xmlRegRangePtr = 0 as *mut xmlRegRange;
                /*
		 * need to check that none of the ranges eventually matches
		 */
                i = 0 as std::os::raw::c_int;
                's_147:
                    loop  {
                        if !(i < (*atom1).nbRanges) {
                            current_block = 13131896068329595644;
                            break ;
                        }
                        j = 0 as std::os::raw::c_int;
                        while j < (*atom2).nbRanges {
                            r1 = *(*atom1).ranges.offset(i as isize);
                            r2 = *(*atom2).ranges.offset(j as isize);
                            res = xmlFACompareRanges(r1, r2);
                            if res == 1 as std::os::raw::c_int {
                                ret = 1 as std::os::raw::c_int;
                                current_block = 355774860896271720;
                                break 's_147 ;
                            } else { j += 1 }
                        }
                        i += 1
                    }
                match current_block {
                    355774860896271720 => { }
                    _ => {
                        ret = 0 as std::os::raw::c_int;
                        current_block = 355774860896271720;
                    }
                }
            } else { current_block = 355774860896271720; }
        }
        1 | _ => { current_block = 2552368870611970025; }
    }
    match current_block {
        355774860896271720 => {
            if (*atom1).neg != (*atom2).neg {
                ret = (ret == 0) as std::os::raw::c_int
            }
            if ret == 0 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
        }
        _ => { }
    }
    return 1 as std::os::raw::c_int;
}
/* *
 * xmlFARecurseDeterminism:
 * @ctxt:  a regexp parser context
 *
 * Check whether the associated regexp is determinist,
 * should be called after xmlFAEliminateEpsilonTransitions()
 *
 */
unsafe extern "C" fn xmlFARecurseDeterminism(mut ctxt: xmlRegParserCtxtPtr,
                                             mut state: xmlRegStatePtr,
                                             mut to: std::os::raw::c_int,
                                             mut atom: xmlRegAtomPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 1 as std::os::raw::c_int;
    let mut res: std::os::raw::c_int = 0;
    let mut transnr: std::os::raw::c_int = 0;
    let mut nbTrans: std::os::raw::c_int = 0;
    let mut t1: xmlRegTransPtr = 0 as *mut xmlRegTrans;
    let mut deep: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if state.is_null() { return ret }
    if (*state).markd as std::os::raw::c_uint ==
           XML_REGEXP_MARK_VISITED as std::os::raw::c_int as std::os::raw::c_uint {
        return ret
    }
    if (*ctxt).flags & 1 as std::os::raw::c_int != 0 { deep = 0 as std::os::raw::c_int }
    /*
     * don't recurse on transitions potentially added in the course of
     * the elimination.
     */
    nbTrans = (*state).nbTrans;
    transnr = 0 as std::os::raw::c_int;
    while transnr < nbTrans {
        t1 =
            &mut *(*state).trans.offset(transnr as isize) as *mut xmlRegTrans;
        /*
	 * check transitions conflicting with the one looked at
	 */
        if (*t1).atom.is_null() {
            if !((*t1).to < 0 as std::os::raw::c_int) {
                (*state).markd = XML_REGEXP_MARK_VISITED;
                res =
                    xmlFARecurseDeterminism(ctxt,
                                            *(*ctxt).states.offset((*t1).to as
                                                                       isize),
                                            to, atom);
                (*state).markd = XML_REGEXP_MARK_NORMAL;
                if res == 0 as std::os::raw::c_int {
                    ret = 0 as std::os::raw::c_int
                    /* t1->nd = 1; */
                }
            }
        } else if !((*t1).to != to) {
            if xmlFACompareAtoms((*t1).atom, atom, deep) != 0 {
                ret = 0 as std::os::raw::c_int;
                /* mark the transition as non-deterministic */
                (*t1).nd = 1 as std::os::raw::c_int
            }
        }
        transnr += 1
    }
    return ret;
}
/* ***********************************************************************
 *									*
 *			Allocation/Deallocation				*
 *									*
 ************************************************************************/
/* *
 * xmlFAComputesDeterminism:
 * @ctxt:  a regexp parser context
 *
 * Check whether the associated regexp is determinist,
 * should be called after xmlFAEliminateEpsilonTransitions()
 *
 */
unsafe extern "C" fn xmlFAComputesDeterminism(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut statenr: std::os::raw::c_int = 0;
    let mut transnr: std::os::raw::c_int = 0;
    let mut state: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut t1: xmlRegTransPtr = 0 as *mut xmlRegTrans;
    let mut t2: xmlRegTransPtr = 0 as *mut xmlRegTrans;
    let mut last: xmlRegTransPtr = 0 as *mut xmlRegTrans;
    let mut i: std::os::raw::c_int = 0;
    let mut ret: std::os::raw::c_int = 1 as std::os::raw::c_int;
    let mut deep: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if (*ctxt).determinist != -(1 as std::os::raw::c_int) {
        return (*ctxt).determinist
    }
    if (*ctxt).flags & 1 as std::os::raw::c_int != 0 { deep = 0 as std::os::raw::c_int }
    /*
     * First cleanup the automata removing cancelled transitions
     */
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() {
            if !((*state).nbTrans < 2 as std::os::raw::c_int) {
                transnr = 0 as std::os::raw::c_int;
                while transnr < (*state).nbTrans {
                    t1 =
                        &mut *(*state).trans.offset(transnr as isize) as
                            *mut xmlRegTrans;
                    /*
	     * Determinism checks in case of counted or all transitions
	     * will have to be handled separately
	     */
                    if !(*t1).atom.is_null() {
                        if !((*t1).to == -(1 as std::os::raw::c_int)) {
                            i = 0 as std::os::raw::c_int;
                            while i < transnr {
                                t2 =
                                    &mut *(*state).trans.offset(i as isize) as
                                        *mut xmlRegTrans;
                                if !((*t2).to == -(1 as std::os::raw::c_int)) {
                                    if !(*t2).atom.is_null() {
                                        if (*t1).to == (*t2).to {
                                            /*
                         * Here we use deep because we want to keep the
                         * transitions which indicate a conflict
                         */
                                            if xmlFAEqualAtoms((*t1).atom,
                                                               (*t2).atom,
                                                               deep) != 0 &&
                                                   (*t1).counter ==
                                                       (*t2).counter &&
                                                   (*t1).count == (*t2).count
                                               {
                                                (*t2).to = -(1 as std::os::raw::c_int)
                                            }
                                            /* eliminated */
                                        }
                                    }
                                }
                                /* eliminated */
                                i += 1
                            }
                        }
                    }
                    /* eliminated */
                    transnr += 1
                }
            }
        }
        statenr += 1
    }
    /*
     * Check for all states that there aren't 2 transitions
     * with the same atom and a different target.
     */
    statenr = 0 as std::os::raw::c_int;
    while statenr < (*ctxt).nbStates {
        state = *(*ctxt).states.offset(statenr as isize);
        if !state.is_null() {
            if !((*state).nbTrans < 2 as std::os::raw::c_int) {
                last = 0 as xmlRegTransPtr;
                transnr = 0 as std::os::raw::c_int;
                while transnr < (*state).nbTrans {
                    t1 =
                        &mut *(*state).trans.offset(transnr as isize) as
                            *mut xmlRegTrans;
                    /* don't shortcut the computation so all non deterministic
	   transition get marked down
	if (ret == 0)
	    break; */
                    /* don't shortcut the computation so all non deterministic
	       transition get marked down
	    if (ret == 0)
		break; */
                    /*
	     * Determinism checks in case of counted or all transitions
	     * will have to be handled separately
	     */
                    if !(*t1).atom.is_null() {
                        if !((*t1).to == -(1 as std::os::raw::c_int)) {
                            i = 0 as std::os::raw::c_int;
                            while i < transnr {
                                t2 =
                                    &mut *(*state).trans.offset(i as isize) as
                                        *mut xmlRegTrans;
                                if !((*t2).to == -(1 as std::os::raw::c_int)) {
                                    if !(*t2).atom.is_null() {
                                        /*
                     * But here we don't use deep because we want to
                     * find transitions which indicate a conflict
                     */
                                        if xmlFACompareAtoms((*t1).atom,
                                                             (*t2).atom,
                                                             1 as std::os::raw::c_int)
                                               != 0 {
                                            ret = 0 as std::os::raw::c_int;
                                            /* mark the transitions as non-deterministic ones */
                                            (*t1).nd = 1 as std::os::raw::c_int;
                                            (*t2).nd = 1 as std::os::raw::c_int;
                                            last = t1
                                        }
                                    } else if (*t1).to != -(1 as std::os::raw::c_int)
                                     {
                                        /*
		     * do the closure in case of remaining specific
		     * epsilon transitions like choices or all
		     */
                                        ret =
                                            xmlFARecurseDeterminism(ctxt,
                                                                    *(*ctxt).states.offset((*t1).to
                                                                                               as
                                                                                               isize),
                                                                    (*t2).to,
                                                                    (*t2).atom);
                                        /* don't shortcut the computation so all non deterministic
		       transition get marked down
		    if (ret == 0)
			return(0);
		     */
                                        if ret == 0 as std::os::raw::c_int {
                                            (*t1).nd = 1 as std::os::raw::c_int;
                                            /* t2->nd = 1; */
                                            last = t1
                                        }
                                    }
                                }
                                /* eliminated */
                                i += 1
                            }
                        }
                    }
                    transnr += 1
                }
                /* eliminated */
                /*
	 * mark specifically the last non-deterministic transition
	 * from a state since there is no need to set-up rollback
	 * from it
	 */
                if !last.is_null() { (*last).nd = 2 as std::os::raw::c_int }
            }
        }
        statenr += 1
    }
    (*ctxt).determinist = ret;
    return ret;
}
/* ***********************************************************************
 *									*
 *	Routines to check input against transition atoms		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlRegCheckCharacterRange(mut type_0: xmlRegAtomType,
                                               mut codepoint: std::os::raw::c_int,
                                               mut neg: std::os::raw::c_int,
                                               mut start: std::os::raw::c_int,
                                               mut end: std::os::raw::c_int,
                                               mut blockName: *const xmlChar)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut current_block_53: u64;
    match type_0 as std::os::raw::c_uint {
        5 | 4 | 3 | 1 => { return -(1 as std::os::raw::c_int) }
        6 => {
            ret =
                (codepoint != '\n' as i32 && codepoint != '\r' as i32) as
                    std::os::raw::c_int;
            current_block_53 = 3879520548144599102;
        }
        2 => {
            ret = (codepoint >= start && codepoint <= end) as std::os::raw::c_int;
            current_block_53 = 3879520548144599102;
        }
        8 => {
            neg = (neg == 0) as std::os::raw::c_int;
            current_block_53 = 15663857331018810243;
        }
        7 => { current_block_53 = 15663857331018810243; }
        10 => {
            neg = (neg == 0) as std::os::raw::c_int;
            current_block_53 = 9138667867906771777;
        }
        9 => { current_block_53 = 9138667867906771777; }
        12 => {
            neg = (neg == 0) as std::os::raw::c_int;
            current_block_53 = 9974888891378310179;
        }
        11 => { current_block_53 = 9974888891378310179; }
        14 => {
            neg = (neg == 0) as std::os::raw::c_int;
            current_block_53 = 5058420757003169425;
        }
        13 => { current_block_53 = 5058420757003169425; }
        15 => {
            neg = (neg == 0) as std::os::raw::c_int;
            current_block_53 = 16078222243483789903;
        }
        16 => { current_block_53 = 16078222243483789903; }
        100 => {
            ret = xmlUCSIsCatL(codepoint);
            current_block_53 = 3879520548144599102;
        }
        101 => {
            ret = xmlUCSIsCatLu(codepoint);
            current_block_53 = 3879520548144599102;
        }
        102 => {
            ret = xmlUCSIsCatLl(codepoint);
            current_block_53 = 3879520548144599102;
        }
        103 => {
            ret = xmlUCSIsCatLt(codepoint);
            current_block_53 = 3879520548144599102;
        }
        104 => {
            ret = xmlUCSIsCatLm(codepoint);
            current_block_53 = 3879520548144599102;
        }
        105 => {
            ret = xmlUCSIsCatLo(codepoint);
            current_block_53 = 3879520548144599102;
        }
        106 => {
            ret = xmlUCSIsCatM(codepoint);
            current_block_53 = 3879520548144599102;
        }
        107 => {
            ret = xmlUCSIsCatMn(codepoint);
            current_block_53 = 3879520548144599102;
        }
        108 => {
            ret = xmlUCSIsCatMc(codepoint);
            current_block_53 = 3879520548144599102;
        }
        109 => {
            ret = xmlUCSIsCatMe(codepoint);
            current_block_53 = 3879520548144599102;
        }
        110 => {
            ret = xmlUCSIsCatN(codepoint);
            current_block_53 = 3879520548144599102;
        }
        111 => {
            ret = xmlUCSIsCatNd(codepoint);
            current_block_53 = 3879520548144599102;
        }
        112 => {
            ret = xmlUCSIsCatNl(codepoint);
            current_block_53 = 3879520548144599102;
        }
        113 => {
            ret = xmlUCSIsCatNo(codepoint);
            current_block_53 = 3879520548144599102;
        }
        114 => {
            ret = xmlUCSIsCatP(codepoint);
            current_block_53 = 3879520548144599102;
        }
        115 => {
            ret = xmlUCSIsCatPc(codepoint);
            current_block_53 = 3879520548144599102;
        }
        116 => {
            ret = xmlUCSIsCatPd(codepoint);
            current_block_53 = 3879520548144599102;
        }
        117 => {
            ret = xmlUCSIsCatPs(codepoint);
            current_block_53 = 3879520548144599102;
        }
        118 => {
            ret = xmlUCSIsCatPe(codepoint);
            current_block_53 = 3879520548144599102;
        }
        119 => {
            ret = xmlUCSIsCatPi(codepoint);
            current_block_53 = 3879520548144599102;
        }
        120 => {
            ret = xmlUCSIsCatPf(codepoint);
            current_block_53 = 3879520548144599102;
        }
        121 => {
            ret = xmlUCSIsCatPo(codepoint);
            current_block_53 = 3879520548144599102;
        }
        122 => {
            ret = xmlUCSIsCatZ(codepoint);
            current_block_53 = 3879520548144599102;
        }
        123 => {
            ret = xmlUCSIsCatZs(codepoint);
            current_block_53 = 3879520548144599102;
        }
        124 => {
            ret = xmlUCSIsCatZl(codepoint);
            current_block_53 = 3879520548144599102;
        }
        125 => {
            ret = xmlUCSIsCatZp(codepoint);
            current_block_53 = 3879520548144599102;
        }
        126 => {
            ret = xmlUCSIsCatS(codepoint);
            current_block_53 = 3879520548144599102;
        }
        127 => {
            ret = xmlUCSIsCatSm(codepoint);
            current_block_53 = 3879520548144599102;
        }
        128 => {
            ret = xmlUCSIsCatSc(codepoint);
            current_block_53 = 3879520548144599102;
        }
        129 => {
            ret = xmlUCSIsCatSk(codepoint);
            current_block_53 = 3879520548144599102;
        }
        130 => {
            ret = xmlUCSIsCatSo(codepoint);
            current_block_53 = 3879520548144599102;
        }
        131 => {
            ret = xmlUCSIsCatC(codepoint);
            current_block_53 = 3879520548144599102;
        }
        132 => {
            ret = xmlUCSIsCatCc(codepoint);
            current_block_53 = 3879520548144599102;
        }
        133 => {
            ret = xmlUCSIsCatCf(codepoint);
            current_block_53 = 3879520548144599102;
        }
        134 => {
            ret = xmlUCSIsCatCo(codepoint);
            current_block_53 = 3879520548144599102;
        }
        135 => {
            /* ret = xmlUCSIsCatCn(codepoint); */
	    /* Seems it doesn't exist anymore in recent Unicode releases */
            ret = 0 as std::os::raw::c_int;
            current_block_53 = 3879520548144599102;
        }
        136 => {
            ret = xmlUCSIsBlock(codepoint, blockName as *const std::os::raw::c_char);
            current_block_53 = 3879520548144599102;
        }
        _ => { current_block_53 = 3879520548144599102; }
    }
    match current_block_53 {
        16078222243483789903 =>
        /* Falls through. */
        {
            ret = xmlUCSIsCatP(codepoint);
            if ret == 0 as std::os::raw::c_int { ret = xmlUCSIsCatZ(codepoint) }
            if ret == 0 as std::os::raw::c_int { ret = xmlUCSIsCatC(codepoint) }
        }
        15663857331018810243 =>
        /* Falls through. */
        {
            ret =
                (codepoint == '\n' as i32 || codepoint == '\r' as i32 ||
                     codepoint == '\t' as i32 || codepoint == ' ' as i32) as
                    std::os::raw::c_int
        }
        9138667867906771777 =>
        /* Falls through. */
        {
            ret =
                ((if codepoint < 0x100 as std::os::raw::c_int {
                      (0x41 as std::os::raw::c_int <= codepoint &&
                           codepoint <= 0x5a as std::os::raw::c_int ||
                           0x61 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0x7a as std::os::raw::c_int ||
                           0xc0 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0xd6 as std::os::raw::c_int ||
                           0xd8 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0xf6 as std::os::raw::c_int ||
                           0xf8 as std::os::raw::c_int <= codepoint) as std::os::raw::c_int
                  } else {
                      xmlCharInRange(codepoint as std::os::raw::c_uint,
                                     &xmlIsBaseCharGroup)
                  }) != 0 ||
                     (if codepoint < 0x100 as std::os::raw::c_int {
                          0 as std::os::raw::c_int
                      } else {
                          (0x4e00 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0x9fa5 as std::os::raw::c_int ||
                               codepoint == 0x3007 as std::os::raw::c_int ||
                               0x3021 as std::os::raw::c_int <= codepoint &&
                                   codepoint <= 0x3029 as std::os::raw::c_int) as
                              std::os::raw::c_int
                      }) != 0 || codepoint == '_' as i32 ||
                     codepoint == ':' as i32) as std::os::raw::c_int
        }
        9974888891378310179 =>
        /* Falls through. */
        {
            ret =
                ((if codepoint < 0x100 as std::os::raw::c_int {
                      (0x41 as std::os::raw::c_int <= codepoint &&
                           codepoint <= 0x5a as std::os::raw::c_int ||
                           0x61 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0x7a as std::os::raw::c_int ||
                           0xc0 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0xd6 as std::os::raw::c_int ||
                           0xd8 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0xf6 as std::os::raw::c_int ||
                           0xf8 as std::os::raw::c_int <= codepoint) as std::os::raw::c_int
                  } else {
                      xmlCharInRange(codepoint as std::os::raw::c_uint,
                                     &xmlIsBaseCharGroup)
                  }) != 0 ||
                     (if codepoint < 0x100 as std::os::raw::c_int {
                          0 as std::os::raw::c_int
                      } else {
                          (0x4e00 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0x9fa5 as std::os::raw::c_int ||
                               codepoint == 0x3007 as std::os::raw::c_int ||
                               0x3021 as std::os::raw::c_int <= codepoint &&
                                   codepoint <= 0x3029 as std::os::raw::c_int) as
                              std::os::raw::c_int
                      }) != 0 ||
                     (if codepoint < 0x100 as std::os::raw::c_int {
                          (0x30 as std::os::raw::c_int <= codepoint &&
                               codepoint <= 0x39 as std::os::raw::c_int) as
                              std::os::raw::c_int
                      } else {
                          xmlCharInRange(codepoint as std::os::raw::c_uint,
                                         &xmlIsDigitGroup)
                      }) != 0 || codepoint == '.' as i32 ||
                     codepoint == '-' as i32 || codepoint == '_' as i32 ||
                     codepoint == ':' as i32 ||
                     (if codepoint < 0x100 as std::os::raw::c_int {
                          0 as std::os::raw::c_int
                      } else {
                          xmlCharInRange(codepoint as std::os::raw::c_uint,
                                         &xmlIsCombiningGroup)
                      }) != 0 ||
                     (if codepoint < 0x100 as std::os::raw::c_int {
                          (codepoint == 0xb7 as std::os::raw::c_int) as std::os::raw::c_int
                      } else {
                          xmlCharInRange(codepoint as std::os::raw::c_uint,
                                         &xmlIsExtenderGroup)
                      }) != 0) as std::os::raw::c_int
        }
        5058420757003169425 =>
        /* Falls through. */
        {
            ret = xmlUCSIsCatNd(codepoint)
        }
        _ => { }
    }
    if neg != 0 { return (ret == 0) as std::os::raw::c_int }
    return ret;
}
unsafe extern "C" fn xmlRegCheckCharacter(mut atom: xmlRegAtomPtr,
                                          mut codepoint: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut i: std::os::raw::c_int = 0;
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut range: xmlRegRangePtr = 0 as *mut xmlRegRange;
    if atom.is_null() ||
           (if codepoint < 0x100 as std::os::raw::c_int {
                (0x9 as std::os::raw::c_int <= codepoint &&
                     codepoint <= 0xa as std::os::raw::c_int ||
                     codepoint == 0xd as std::os::raw::c_int ||
                     0x20 as std::os::raw::c_int <= codepoint) as std::os::raw::c_int
            } else {
                (0x100 as std::os::raw::c_int <= codepoint &&
                     codepoint <= 0xd7ff as std::os::raw::c_int ||
                     0xe000 as std::os::raw::c_int <= codepoint &&
                         codepoint <= 0xfffd as std::os::raw::c_int ||
                     0x10000 as std::os::raw::c_int <= codepoint &&
                         codepoint <= 0x10ffff as std::os::raw::c_int) as std::os::raw::c_int
            }) == 0 {
        return -(1 as std::os::raw::c_int)
    }
    match (*atom).type_0 as std::os::raw::c_uint {
        4 | 1 => { return -(1 as std::os::raw::c_int) }
        2 => { return (codepoint == (*atom).codepoint) as std::os::raw::c_int }
        3 => {
            let mut accept: std::os::raw::c_int = 0 as std::os::raw::c_int;
            i = 0 as std::os::raw::c_int;
            while i < (*atom).nbRanges {
                range = *(*atom).ranges.offset(i as isize);
                if (*range).neg == 2 as std::os::raw::c_int {
                    ret =
                        xmlRegCheckCharacterRange((*range).type_0, codepoint,
                                                  0 as std::os::raw::c_int,
                                                  (*range).start,
                                                  (*range).end,
                                                  (*range).blockName);
                    if ret != 0 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
                    /* excluded char */
                } else if (*range).neg != 0 {
                    ret =
                        xmlRegCheckCharacterRange((*range).type_0, codepoint,
                                                  0 as std::os::raw::c_int,
                                                  (*range).start,
                                                  (*range).end,
                                                  (*range).blockName);
                    if ret == 0 as std::os::raw::c_int {
                        accept = 1 as std::os::raw::c_int
                    } else { return 0 as std::os::raw::c_int }
                } else {
                    ret =
                        xmlRegCheckCharacterRange((*range).type_0, codepoint,
                                                  0 as std::os::raw::c_int,
                                                  (*range).start,
                                                  (*range).end,
                                                  (*range).blockName);
                    if ret != 0 as std::os::raw::c_int { accept = 1 as std::os::raw::c_int }
                    /* might still be excluded */
                }
                i += 1
            }
            return accept
        }
        5 => {
            printf(b"TODO: XML_REGEXP_STRING\n\x00" as *const u8 as
                       *const std::os::raw::c_char);
            return -(1 as std::os::raw::c_int)
        }
        6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 100 | 101 | 102 |
        103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
        | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 |
        126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 => {
            ret =
                xmlRegCheckCharacterRange((*atom).type_0, codepoint,
                                          0 as std::os::raw::c_int, 0 as std::os::raw::c_int,
                                          0 as std::os::raw::c_int,
                                          (*atom).valuep as *const xmlChar);
            if (*atom).neg != 0 { ret = (ret == 0) as std::os::raw::c_int }
        }
        _ => { }
    }
    return ret;
}
/* ***********************************************************************
 *									*
 *	Saving and restoring state of an execution context		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlFARegExecSave(mut exec: xmlRegExecCtxtPtr) {
    if (*exec).nbPush > 10000000 as std::os::raw::c_int { return }
    (*exec).nbPush += 1;
    if (*exec).maxRollbacks == 0 as std::os::raw::c_int {
        (*exec).maxRollbacks = 4 as std::os::raw::c_int;
        (*exec).rollbacks =
            xmlMalloc.expect("non-null function pointer")(((*exec).maxRollbacks
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegExecRollback>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut xmlRegExecRollback;
        if (*exec).rollbacks.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"saving regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*exec).maxRollbacks = 0 as std::os::raw::c_int;
            return
        }
        memset((*exec).rollbacks as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ((*exec).maxRollbacks as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegExecRollback>()
                                                    as std::os::raw::c_ulong));
    } else if (*exec).nbRollbacks >= (*exec).maxRollbacks {
        let mut tmp: *mut xmlRegExecRollback = 0 as *mut xmlRegExecRollback;
        let mut len: std::os::raw::c_int = (*exec).maxRollbacks;
        (*exec).maxRollbacks *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*exec).rollbacks
                                                               as
                                                               *mut std::os::raw::c_void,
                                                           ((*exec).maxRollbacks
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegExecRollback>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut xmlRegExecRollback;
        if tmp.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"saving regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*exec).maxRollbacks /= 2 as std::os::raw::c_int;
            return
        }
        (*exec).rollbacks = tmp;
        tmp =
            &mut *(*exec).rollbacks.offset(len as isize) as
                *mut xmlRegExecRollback;
        memset(tmp as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               (((*exec).maxRollbacks - len) as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegExecRollback>()
                                                    as std::os::raw::c_ulong));
    }
    let ref mut fresh13 =
        (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).state;
    *fresh13 = (*exec).state;
    (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).index =
        (*exec).index;
    (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).nextbranch =
        (*exec).transno + 1 as std::os::raw::c_int;
    if (*(*exec).comp).nbCounters > 0 as std::os::raw::c_int {
        if (*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                          isize)).counts.is_null() {
            let ref mut fresh14 =
                (*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                               isize)).counts;
            *fresh14 =
                xmlMalloc.expect("non-null function pointer")(((*(*exec).comp).nbCounters
                                                                   as
                                                                   std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                                   as
                                                                                                   std::os::raw::c_ulong))
                    as *mut std::os::raw::c_int;
            if (*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                              isize)).counts.is_null() {
                xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                                   b"saving regexp\x00" as *const u8 as
                                       *const std::os::raw::c_char);
                (*exec).status = -(5 as std::os::raw::c_int);
                return
            }
        }
        memcpy((*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                              isize)).counts as
                   *mut std::os::raw::c_void, (*exec).counts as *const std::os::raw::c_void,
               ((*(*exec).comp).nbCounters as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                    as std::os::raw::c_ulong));
    }
    (*exec).nbRollbacks += 1;
}
unsafe extern "C" fn xmlFARegExecRollBack(mut exec: xmlRegExecCtxtPtr) {
    if (*exec).nbRollbacks <= 0 as std::os::raw::c_int {
        (*exec).status = -(1 as std::os::raw::c_int);
        return
    }
    (*exec).nbRollbacks -= 1;
    (*exec).state =
        (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).state;
    (*exec).index =
        (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).index;
    (*exec).transno =
        (*(*exec).rollbacks.offset((*exec).nbRollbacks as isize)).nextbranch;
    if (*(*exec).comp).nbCounters > 0 as std::os::raw::c_int {
        if (*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                          isize)).counts.is_null() {
            fprintf(stderr,
                    b"exec save: allocation failed\x00" as *const u8 as
                        *const std::os::raw::c_char);
            (*exec).status = -(6 as std::os::raw::c_int);
            return
        }
        if !(*exec).counts.is_null() {
            memcpy((*exec).counts as *mut std::os::raw::c_void,
                   (*(*exec).rollbacks.offset((*exec).nbRollbacks as
                                                  isize)).counts as
                       *const std::os::raw::c_void,
                   ((*(*exec).comp).nbCounters as
                        std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                        as std::os::raw::c_ulong));
        }
    };
}
/* ***********************************************************************
 *									*
 *	Verifier, running an input against a compiled regexp		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlFARegExec(mut comp: xmlRegexpPtr,
                                  mut content: *const xmlChar)
 -> std::os::raw::c_int {
    let mut current_block: u64;
    let mut execval: xmlRegExecCtxt =
        xmlRegExecCtxt{status: 0,
                       determinist: 0,
                       comp: 0 as *mut xmlRegexp,
                       callback: None,
                       data: 0 as *mut std::os::raw::c_void,
                       state: 0 as *mut xmlRegState,
                       transno: 0,
                       transcount: 0,
                       maxRollbacks: 0,
                       nbRollbacks: 0,
                       rollbacks: 0 as *mut xmlRegExecRollback,
                       counts: 0 as *mut std::os::raw::c_int,
                       inputStackMax: 0,
                       inputStackNr: 0,
                       index: 0,
                       charStack: 0 as *mut std::os::raw::c_int,
                       inputString: 0 as *const xmlChar,
                       inputStack: 0 as *mut xmlRegInputToken,
                       errStateNo: 0,
                       errState: 0 as *mut xmlRegState,
                       errString: 0 as *mut xmlChar,
                       errCounts: 0 as *mut std::os::raw::c_int,
                       nbPush: 0,};
    let mut exec: xmlRegExecCtxtPtr = &mut execval;
    let mut ret: std::os::raw::c_int = 0;
    let mut codepoint: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut len: std::os::raw::c_int = 0;
    let mut deter: std::os::raw::c_int = 0;
    (*exec).inputString = content;
    (*exec).index = 0 as std::os::raw::c_int;
    (*exec).nbPush = 0 as std::os::raw::c_int;
    (*exec).determinist = 1 as std::os::raw::c_int;
    (*exec).maxRollbacks = 0 as std::os::raw::c_int;
    (*exec).nbRollbacks = 0 as std::os::raw::c_int;
    (*exec).rollbacks = 0 as *mut xmlRegExecRollback;
    (*exec).status = 0 as std::os::raw::c_int;
    (*exec).comp = comp;
    (*exec).state = *(*comp).states.offset(0 as std::os::raw::c_int as isize);
    (*exec).transno = 0 as std::os::raw::c_int;
    (*exec).transcount = 0 as std::os::raw::c_int;
    (*exec).inputStack = 0 as xmlRegInputTokenPtr;
    (*exec).inputStackMax = 0 as std::os::raw::c_int;
    if (*comp).nbCounters > 0 as std::os::raw::c_int {
        (*exec).counts =
            xmlMalloc.expect("non-null function pointer")(((*comp).nbCounters
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if (*exec).counts.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"running regexp\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            return -(1 as std::os::raw::c_int)
        }
        memset((*exec).counts as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ((*comp).nbCounters as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                    as std::os::raw::c_ulong));
    } else { (*exec).counts = 0 as *mut std::os::raw::c_int }
    's_105:
        while (*exec).status == 0 as std::os::raw::c_int && !(*exec).state.is_null()
                  &&
                  (*(*exec).inputString.offset((*exec).index as isize) as
                       std::os::raw::c_int != 0 as std::os::raw::c_int ||
                       !(*exec).state.is_null() &&
                           (*(*exec).state).type_0 as std::os::raw::c_uint !=
                               XML_REGEXP_FINAL_STATE as std::os::raw::c_int as
                                   std::os::raw::c_uint) {
            let mut trans: xmlRegTransPtr = 0 as *mut xmlRegTrans;
            let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
            /*
	 * If end of input on non-terminal state, rollback, however we may
	 * still have epsilon like transition for counted transitions
	 * on counters, in that case don't break too early.  Additionally,
	 * if we are working on a range like "AB{0,2}", where B is not present,
	 * we don't want to break.
	 */
            len = 1 as std::os::raw::c_int;
            if *(*exec).inputString.offset((*exec).index as isize) as
                   std::os::raw::c_int == 0 as std::os::raw::c_int && (*exec).counts.is_null()
               {
                /*
	     * if there is a transition, we must check if
	     *  atom allows minOccurs of 0
	     */
                if (*exec).transno < (*(*exec).state).nbTrans {
                    trans =
                        &mut *(*(*exec).state).trans.offset((*exec).transno as
                                                                isize) as
                            *mut xmlRegTrans;
                    if (*trans).to >= 0 as std::os::raw::c_int {
                        atom = (*trans).atom;
                        if !((*atom).min == 0 as std::os::raw::c_int &&
                                 (*atom).max > 0 as std::os::raw::c_int) {
                            current_block = 4258490364004459937;
                        } else { current_block = 17281240262373992796; }
                    } else { current_block = 17281240262373992796; }
                } else { current_block = 4258490364004459937; }
            } else { current_block = 17281240262373992796; }
            match current_block {
                17281240262373992796 => {
                    (*exec).transcount = 0 as std::os::raw::c_int;
                    loop  {
                        if !((*exec).transno < (*(*exec).state).nbTrans) {
                            current_block = 2222055338596505704;
                            break ;
                        }
                        trans =
                            &mut *(*(*exec).state).trans.offset((*exec).transno
                                                                    as isize)
                                as *mut xmlRegTrans;
                        if !((*trans).to < 0 as std::os::raw::c_int) {
                            atom = (*trans).atom;
                            ret = 0 as std::os::raw::c_int;
                            deter = 1 as std::os::raw::c_int;
                            if (*trans).count >= 0 as std::os::raw::c_int {
                                let mut count: std::os::raw::c_int = 0;
                                let mut counter: xmlRegCounterPtr =
                                    0 as *mut xmlRegCounter;
                                if (*exec).counts.is_null() {
                                    (*exec).status = -(1 as std::os::raw::c_int);
                                    break 's_105 ;
                                } else {
                                    /*
		 * A counted transition.
		 */
                                    count =
                                        *(*exec).counts.offset((*trans).count
                                                                   as isize);
                                    counter =
                                        &mut *(*(*exec).comp).counters.offset((*trans).count
                                                                                  as
                                                                                  isize)
                                            as *mut xmlRegCounter;
                                    ret =
                                        (count >= (*counter).min &&
                                             count <= (*counter).max) as
                                            std::os::raw::c_int;
                                    if ret != 0 &&
                                           (*counter).min != (*counter).max {
                                        deter = 0 as std::os::raw::c_int
                                    }
                                }
                                current_block = 562309032768341766;
                            } else if atom.is_null() {
                                fprintf(stderr,
                                        b"epsilon transition left at runtime\n\x00"
                                            as *const u8 as
                                            *const std::os::raw::c_char);
                                (*exec).status = -(2 as std::os::raw::c_int);
                                current_block = 2222055338596505704;
                                break ;
                            } else if *(*exec).inputString.offset((*exec).index
                                                                      as
                                                                      isize)
                                          as std::os::raw::c_int != 0 as std::os::raw::c_int {
                                codepoint =
                                    xmlStringCurrentChar(0 as
                                                             xmlParserCtxtPtr,
                                                         &*(*exec).inputString.offset((*exec).index
                                                                                          as
                                                                                          isize),
                                                         &mut len);
                                ret = xmlRegCheckCharacter(atom, codepoint);
                                if ret == 1 as std::os::raw::c_int &&
                                       (*atom).min >= 0 as std::os::raw::c_int &&
                                       (*atom).max > 0 as std::os::raw::c_int {
                                    let mut to: xmlRegStatePtr =
                                        *(*comp).states.offset((*trans).to as
                                                                   isize);
                                    /*
		     * this is a multiple input sequence
		     * If there is a counter associated increment it now.
		     * before potentially saving and rollback
		     * do not increment if the counter is already over the
		     * maximum limit in which case get to next transition
		     */
                                    if (*trans).counter >= 0 as std::os::raw::c_int {
                                        let mut counter_0: xmlRegCounterPtr =
                                            0 as
                                                *mut xmlRegCounter; /* for loop on transitions */
                                        if (*exec).counts.is_null() ||
                                               (*exec).comp.is_null() ||
                                               (*(*exec).comp).counters.is_null()
                                           {
                                            (*exec).status =
                                                -(1 as std::os::raw::c_int);
                                            break 's_105 ;
                                        } else {
                                            counter_0 =
                                                &mut *(*(*exec).comp).counters.offset((*trans).counter
                                                                                          as
                                                                                          isize)
                                                    as *mut xmlRegCounter;
                                            if *(*exec).counts.offset((*trans).counter
                                                                          as
                                                                          isize)
                                                   >= (*counter_0).max {
                                                current_block =
                                                    17500079516916021833;
                                            } else {
                                                let ref mut fresh15 =
                                                    *(*exec).counts.offset((*trans).counter
                                                                               as
                                                                               isize);
                                                *fresh15 += 1;
                                                current_block =
                                                    1623252117315916725;
                                            }
                                        }
                                    } else {
                                        current_block = 1623252117315916725;
                                    }
                                    match current_block {
                                        17500079516916021833 => { }
                                        _ => {
                                            if (*(*exec).state).nbTrans >
                                                   (*exec).transno +
                                                       1 as std::os::raw::c_int {
                                                xmlFARegExecSave(exec);
                                            }
                                            (*exec).transcount =
                                                1 as std::os::raw::c_int;
                                            /*
			 * Try to progress as much as possible on the input
			 */
                                            while !((*exec).transcount ==
                                                        (*atom).max) {
                                                (*exec).index += len;
                                                /*
			 * End of input: stop here
			 */
                                                if *(*exec).inputString.offset((*exec).index
                                                                                   as
                                                                                   isize)
                                                       as std::os::raw::c_int ==
                                                       0 as std::os::raw::c_int {
                                                    (*exec).index -= len;
                                                    break ;
                                                } else {
                                                    if (*exec).transcount >=
                                                           (*atom).min {
                                                        let mut transno:
                                                                std::os::raw::c_int =
                                                            (*exec).transno;
                                                        let mut state:
                                                                xmlRegStatePtr =
                                                            (*exec).state;
                                                        /*
			     * The transition is acceptable save it
			     */
                                                        (*exec).transno =
                                                            -(1 as
                                                                  std::os::raw::c_int); /* trick */
                                                        (*exec).state = to;
                                                        xmlFARegExecSave(exec);
                                                        (*exec).transno =
                                                            transno;
                                                        (*exec).state = state
                                                    }
                                                    codepoint =
                                                        xmlStringCurrentChar(0
                                                                                 as
                                                                                 xmlParserCtxtPtr,
                                                                             &*(*exec).inputString.offset((*exec).index
                                                                                                              as
                                                                                                              isize),
                                                                             &mut len);
                                                    ret =
                                                        xmlRegCheckCharacter(atom,
                                                                             codepoint);
                                                    (*exec).transcount += 1;
                                                    if !(ret ==
                                                             1 as std::os::raw::c_int)
                                                       {
                                                        break ;
                                                    }
                                                }
                                            }
                                            if (*exec).transcount <
                                                   (*atom).min {
                                                ret = 0 as std::os::raw::c_int
                                            }
                                            /*
		     * If the last check failed but one transition was found
		     * possible, rollback
		     */
                                            if ret < 0 as std::os::raw::c_int {
                                                ret = 0 as std::os::raw::c_int
                                            }
                                            if ret == 0 as std::os::raw::c_int {
                                                current_block =
                                                    4258490364004459937;
                                                break ;
                                            }
                                            if (*trans).counter >=
                                                   0 as std::os::raw::c_int {
                                                if (*exec).counts.is_null() {
                                                    (*exec).status =
                                                        -(1 as std::os::raw::c_int);
                                                    break 's_105 ;
                                                } else {
                                                    let ref mut fresh16 =
                                                        *(*exec).counts.offset((*trans).counter
                                                                                   as
                                                                                   isize);
                                                    *fresh16 -= 1
                                                }
                                                current_block =
                                                    562309032768341766;
                                            } else {
                                                current_block =
                                                    562309032768341766;
                                            }
                                        }
                                    }
                                } else {
                                    if ret == 0 as std::os::raw::c_int &&
                                           (*atom).min == 0 as std::os::raw::c_int &&
                                           (*atom).max > 0 as std::os::raw::c_int {
                                        /*
		     * we don't match on the codepoint, but minOccurs of 0
		     * says that's ok.  Setting len to 0 inhibits stepping
		     * over the codepoint.
		     */
                                        (*exec).transcount = 1 as std::os::raw::c_int;
                                        len = 0 as std::os::raw::c_int;
                                        ret = 1 as std::os::raw::c_int
                                    }
                                    current_block = 562309032768341766;
                                }
                            } else {
                                if (*atom).min == 0 as std::os::raw::c_int &&
                                       (*atom).max > 0 as std::os::raw::c_int {
                                    /* another spot to match when minOccurs is 0 */
                                    (*exec).transcount = 1 as std::os::raw::c_int;
                                    len = 0 as std::os::raw::c_int;
                                    ret = 1 as std::os::raw::c_int
                                }
                                current_block = 562309032768341766;
                            }
                            match current_block {
                                17500079516916021833 => { }
                                _ => {
                                    if ret == 1 as std::os::raw::c_int {
                                        if (*trans).nd == 1 as std::os::raw::c_int ||
                                               (*trans).count >=
                                                   0 as std::os::raw::c_int &&
                                                   deter == 0 as std::os::raw::c_int
                                                   &&
                                                   (*(*exec).state).nbTrans >
                                                       (*exec).transno +
                                                           1 as std::os::raw::c_int {
                                            xmlFARegExecSave(exec);
                                        }
                                        if (*trans).counter >=
                                               0 as std::os::raw::c_int {
                                            let mut counter_1:
                                                    xmlRegCounterPtr =
                                                0 as *mut xmlRegCounter;
                                            /* make sure we don't go over the counter maximum value */
                                            if (*exec).counts.is_null() ||
                                                   (*exec).comp.is_null() ||
                                                   (*(*exec).comp).counters.is_null()
                                               {
                                                (*exec).status =
                                                    -(1 as
                                                          std::os::raw::c_int); /* for loop on transitions */
                                                break 's_105 ;
                                            } else {
                                                counter_1 =
                                                    &mut *(*(*exec).comp).counters.offset((*trans).counter
                                                                                              as
                                                                                              isize)
                                                        as *mut xmlRegCounter;
                                                if *(*exec).counts.offset((*trans).counter
                                                                              as
                                                                              isize)
                                                       >= (*counter_1).max {
                                                    current_block =
                                                        17500079516916021833;
                                                } else {
                                                    let ref mut fresh17 =
                                                        *(*exec).counts.offset((*trans).counter
                                                                                   as
                                                                                   isize);
                                                    *fresh17 += 1;
                                                    current_block =
                                                        16778110326724371720;
                                                }
                                            }
                                        } else {
                                            current_block =
                                                16778110326724371720;
                                        }
                                        match current_block {
                                            17500079516916021833 => { }
                                            _ => {
                                                if (*trans).count >=
                                                       0 as std::os::raw::c_int &&
                                                       (*trans).count <
                                                           0x123456 as
                                                               std::os::raw::c_int {
                                                    if (*exec).counts.is_null()
                                                       {
                                                        (*exec).status =
                                                            -(1 as
                                                                  std::os::raw::c_int);
                                                        break 's_105 ;
                                                    } else {
                                                        *(*exec).counts.offset((*trans).count
                                                                                   as
                                                                                   isize)
                                                            = 0 as std::os::raw::c_int
                                                    }
                                                }
                                                (*exec).state =
                                                    *(*comp).states.offset((*trans).to
                                                                               as
                                                                               isize);
                                                (*exec).transno =
                                                    0 as std::os::raw::c_int;
                                                if !(*trans).atom.is_null() {
                                                    (*exec).index += len
                                                }
                                                continue 's_105 ;
                                            }
                                        }
                                    } else if ret < 0 as std::os::raw::c_int {
                                        (*exec).status = -(4 as std::os::raw::c_int);
                                        current_block = 2222055338596505704;
                                        break ;
                                    }
                                }
                            }
                        }
                        (*exec).transno += 1
                    }
                    match current_block {
                        4258490364004459937 => { }
                        _ => {
                            if !((*exec).transno != 0 as std::os::raw::c_int ||
                                     (*(*exec).state).nbTrans ==
                                         0 as std::os::raw::c_int) {
                                continue ;
                            }
                        }
                    }
                }
                _ => { }
            }
            /*
	     * Failed to find a way out
	     */
            (*exec).determinist = 0 as std::os::raw::c_int;
            xmlFARegExecRollBack(exec);
        }
    if !(*exec).rollbacks.is_null() {
        if !(*exec).counts.is_null() {
            let mut i: std::os::raw::c_int = 0;
            i = 0 as std::os::raw::c_int;
            while i < (*exec).maxRollbacks {
                if !(*(*exec).rollbacks.offset(i as isize)).counts.is_null() {
                    xmlFree.expect("non-null function pointer")((*(*exec).rollbacks.offset(i
                                                                                               as
                                                                                               isize)).counts
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                i += 1
            }
        }
        xmlFree.expect("non-null function pointer")((*exec).rollbacks as
                                                        *mut std::os::raw::c_void);
    }
    if (*exec).state.is_null() { return -(1 as std::os::raw::c_int) }
    if !(*exec).counts.is_null() {
        xmlFree.expect("non-null function pointer")((*exec).counts as
                                                        *mut std::os::raw::c_void);
    }
    if (*exec).status == 0 as std::os::raw::c_int { return 1 as std::os::raw::c_int }
    if (*exec).status == -(1 as std::os::raw::c_int) {
        if (*exec).nbPush > 10000000 as std::os::raw::c_int {
            return -(1 as std::os::raw::c_int)
        }
        return 0 as std::os::raw::c_int
    }
    return (*exec).status;
}
/* ***********************************************************************
 *									*
 *	Progressive interface to the verifier one atom at a time	*
 *									*
 ************************************************************************/
/* *
 * xmlRegNewExecCtxt:
 * @comp: a precompiled regular expression
 * @callback: a callback function used for handling progresses in the
 *            automata matching phase
 * @data: the context data associated to the callback in this context
 *
 * Build a context used for progressive evaluation of a regexp.
 *
 * Returns the new context
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegNewExecCtxt(mut comp: xmlRegexpPtr,
                                           mut callback: xmlRegExecCallbacks,
                                           mut data: *mut std::os::raw::c_void)
 -> xmlRegExecCtxtPtr {
    let mut exec: xmlRegExecCtxtPtr = 0 as *mut xmlRegExecCtxt;
    if comp.is_null() { return 0 as xmlRegExecCtxtPtr }
    if (*comp).compact.is_null() && (*comp).states.is_null() {
        return 0 as xmlRegExecCtxtPtr
    }
    exec =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRegExecCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlRegExecCtxtPtr;
    if exec.is_null() {
        xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                           b"creating execution context\x00" as *const u8 as
                               *const std::os::raw::c_char);
        return 0 as xmlRegExecCtxtPtr
    }
    memset(exec as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlRegExecCtxt>() as std::os::raw::c_ulong);
    (*exec).inputString = 0 as *const xmlChar;
    (*exec).index = 0 as std::os::raw::c_int;
    (*exec).determinist = 1 as std::os::raw::c_int;
    (*exec).maxRollbacks = 0 as std::os::raw::c_int;
    (*exec).nbRollbacks = 0 as std::os::raw::c_int;
    (*exec).rollbacks = 0 as *mut xmlRegExecRollback;
    (*exec).status = 0 as std::os::raw::c_int;
    (*exec).comp = comp;
    if (*comp).compact.is_null() {
        (*exec).state = *(*comp).states.offset(0 as std::os::raw::c_int as isize)
    }
    (*exec).transno = 0 as std::os::raw::c_int;
    (*exec).transcount = 0 as std::os::raw::c_int;
    (*exec).callback = callback;
    (*exec).data = data;
    if (*comp).nbCounters > 0 as std::os::raw::c_int {
        /*
	 * For error handling, exec->counts is allocated twice the size
	 * the second half is used to store the data in case of rollback
	 */
        (*exec).counts =
            xmlMalloc.expect("non-null function pointer")(((*comp).nbCounters
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                                               as
                                                                                               std::os::raw::c_ulong).wrapping_mul(2
                                                                                                                               as
                                                                                                                               std::os::raw::c_int
                                                                                                                               as
                                                                                                                               std::os::raw::c_ulong))
                as *mut std::os::raw::c_int;
        if (*exec).counts.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"creating execution context\x00" as *const u8
                                   as *const std::os::raw::c_char);
            xmlFree.expect("non-null function pointer")(exec as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlRegExecCtxtPtr
        }
        memset((*exec).counts as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ((*comp).nbCounters as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                    as
                                                    std::os::raw::c_ulong).wrapping_mul(2
                                                                                    as
                                                                                    std::os::raw::c_int
                                                                                    as
                                                                                    std::os::raw::c_ulong));
        (*exec).errCounts =
            &mut *(*exec).counts.offset((*comp).nbCounters as isize) as
                *mut std::os::raw::c_int
    } else {
        (*exec).counts = 0 as *mut std::os::raw::c_int;
        (*exec).errCounts = 0 as *mut std::os::raw::c_int
    }
    (*exec).inputStackMax = 0 as std::os::raw::c_int;
    (*exec).inputStackNr = 0 as std::os::raw::c_int;
    (*exec).inputStack = 0 as xmlRegInputTokenPtr;
    (*exec).errStateNo = -(1 as std::os::raw::c_int);
    (*exec).errString = 0 as *mut xmlChar;
    (*exec).nbPush = 0 as std::os::raw::c_int;
    return exec;
}
/* *
 * xmlRegFreeExecCtxt:
 * @exec: a regular expression evaulation context
 *
 * Free the structures associated to a regular expression evaulation context.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegFreeExecCtxt(mut exec: xmlRegExecCtxtPtr) {
    if exec.is_null() { return }
    if !(*exec).rollbacks.is_null() {
        if !(*exec).counts.is_null() {
            let mut i: std::os::raw::c_int = 0;
            i = 0 as std::os::raw::c_int;
            while i < (*exec).maxRollbacks {
                if !(*(*exec).rollbacks.offset(i as isize)).counts.is_null() {
                    xmlFree.expect("non-null function pointer")((*(*exec).rollbacks.offset(i
                                                                                               as
                                                                                               isize)).counts
                                                                    as
                                                                    *mut std::os::raw::c_void);
                }
                i += 1
            }
        }
        xmlFree.expect("non-null function pointer")((*exec).rollbacks as
                                                        *mut std::os::raw::c_void);
    }
    if !(*exec).counts.is_null() {
        xmlFree.expect("non-null function pointer")((*exec).counts as
                                                        *mut std::os::raw::c_void);
    }
    if !(*exec).inputStack.is_null() {
        let mut i_0: std::os::raw::c_int = 0;
        i_0 = 0 as std::os::raw::c_int;
        while i_0 < (*exec).inputStackNr {
            if !(*(*exec).inputStack.offset(i_0 as isize)).value.is_null() {
                xmlFree.expect("non-null function pointer")((*(*exec).inputStack.offset(i_0
                                                                                            as
                                                                                            isize)).value
                                                                as
                                                                *mut std::os::raw::c_void);
            }
            i_0 += 1
        }
        xmlFree.expect("non-null function pointer")((*exec).inputStack as
                                                        *mut std::os::raw::c_void);
    }
    if !(*exec).errString.is_null() {
        xmlFree.expect("non-null function pointer")((*exec).errString as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(exec as *mut std::os::raw::c_void);
}
unsafe extern "C" fn xmlFARegExecSaveInputString(mut exec: xmlRegExecCtxtPtr,
                                                 mut value: *const xmlChar,
                                                 mut data:
                                                     *mut std::os::raw::c_void) {
    if (*exec).inputStackMax == 0 as std::os::raw::c_int {
        (*exec).inputStackMax = 4 as std::os::raw::c_int;
        (*exec).inputStack =
            xmlMalloc.expect("non-null function pointer")(((*exec).inputStackMax
                                                               as
                                                               std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegInputToken>()
                                                                                               as
                                                                                               std::os::raw::c_ulong))
                as xmlRegInputTokenPtr;
        if (*exec).inputStack.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"pushing input string\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*exec).inputStackMax = 0 as std::os::raw::c_int;
            return
        }
    } else if (*exec).inputStackNr + 1 as std::os::raw::c_int >= (*exec).inputStackMax
     {
        let mut tmp: xmlRegInputTokenPtr = 0 as *mut xmlRegInputToken;
        (*exec).inputStackMax *= 2 as std::os::raw::c_int;
        tmp =
            xmlRealloc.expect("non-null function pointer")((*exec).inputStack
                                                               as
                                                               *mut std::os::raw::c_void,
                                                           ((*exec).inputStackMax
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlRegInputToken>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as xmlRegInputTokenPtr;
        if tmp.is_null() {
            xmlRegexpErrMemory(0 as xmlRegParserCtxtPtr,
                               b"pushing input string\x00" as *const u8 as
                                   *const std::os::raw::c_char);
            (*exec).inputStackMax /= 2 as std::os::raw::c_int;
            return
        }
        (*exec).inputStack = tmp
    }
    let ref mut fresh18 =
        (*(*exec).inputStack.offset((*exec).inputStackNr as isize)).value;
    *fresh18 = xmlStrdup(value);
    let ref mut fresh19 =
        (*(*exec).inputStack.offset((*exec).inputStackNr as isize)).data;
    *fresh19 = data;
    (*exec).inputStackNr += 1;
    let ref mut fresh20 =
        (*(*exec).inputStack.offset((*exec).inputStackNr as isize)).value;
    *fresh20 = 0 as *mut xmlChar;
    let ref mut fresh21 =
        (*(*exec).inputStack.offset((*exec).inputStackNr as isize)).data;
    *fresh21 = 0 as *mut std::os::raw::c_void;
}
/* *
 * xmlRegStrEqualWildcard:
 * @expStr:  the string to be evaluated
 * @valStr:  the validation string
 *
 * Checks if both strings are equal or have the same content. "*"
 * can be used as a wildcard in @valStr; "|" is used as a seperator of
 * substrings in both @expStr and @valStr.
 *
 * Returns 1 if the comparison is satisfied and the number of substrings
 * is equal, 0 otherwise.
 */
unsafe extern "C" fn xmlRegStrEqualWildcard(mut expStr: *const xmlChar,
                                            mut valStr: *const xmlChar)
 -> std::os::raw::c_int {
    if expStr == valStr { return 1 as std::os::raw::c_int }
    if expStr.is_null() { return 0 as std::os::raw::c_int }
    if valStr.is_null() { return 0 as std::os::raw::c_int }
    loop 
         /*
	* Eval if we have a wildcard for the current item.
	*/
         {
        if *expStr as std::os::raw::c_int != *valStr as std::os::raw::c_int {
            /* if one of them starts with a wildcard make valStr be it */
            if *valStr as std::os::raw::c_int == '*' as i32 {
                let mut tmp: *const xmlChar = 0 as *const xmlChar;
                tmp = valStr;
                valStr = expStr;
                expStr = tmp
            }
            if *valStr as std::os::raw::c_int != 0 as std::os::raw::c_int &&
                   *expStr as std::os::raw::c_int != 0 as std::os::raw::c_int &&
                   {
                       let fresh22 = expStr;
                       expStr = expStr.offset(1);
                       (*fresh22 as std::os::raw::c_int) == '*' as i32
                   } {
                while !(*valStr as std::os::raw::c_int == '|' as i32) {
                    valStr = valStr.offset(1);
                    if !(*valStr as std::os::raw::c_int != 0 as std::os::raw::c_int) {
                        break ;
                    }
                }
            } else { return 0 as std::os::raw::c_int }
        } else { expStr = expStr.offset(1); valStr = valStr.offset(1) }
        if !(*valStr as std::os::raw::c_int != 0 as std::os::raw::c_int) { break ; }
    }
    if *expStr as std::os::raw::c_int != 0 as std::os::raw::c_int {
        return 0 as std::os::raw::c_int
    } else { return 1 as std::os::raw::c_int };
}
/* *
 * xmlRegCompactPushString:
 * @exec: a regexp execution context
 * @comp:  the precompiled exec with a compact table
 * @value: a string token input
 * @data: data associated to the token to reuse in callbacks
 *
 * Push one input token in the execution context
 *
 * Returns: 1 if the regexp reached a final state, 0 if non-final, and
 *     a negative value in case of error.
 */
unsafe extern "C" fn xmlRegCompactPushString(mut exec: xmlRegExecCtxtPtr,
                                             mut comp: xmlRegexpPtr,
                                             mut value: *const xmlChar,
                                             mut data: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut state: std::os::raw::c_int = (*exec).index;
    let mut i: std::os::raw::c_int = 0;
    let mut target: std::os::raw::c_int = 0;
    if comp.is_null() || (*comp).compact.is_null() ||
           (*comp).stringMap.is_null() {
        return -(1 as std::os::raw::c_int)
    }
    if value.is_null() {
        /*
	 * are we at a final state ?
	 */
        if *(*comp).compact.offset((state *
                                        ((*comp).nbstrings +
                                             1 as std::os::raw::c_int)) as isize) ==
               XML_REGEXP_FINAL_STATE as std::os::raw::c_int {
            return 1 as std::os::raw::c_int
        }
        return 0 as std::os::raw::c_int
    }
    /*
     * Examine all outside transitions from current state
     */
    i = 0 as std::os::raw::c_int; /* to avoid 0 */
    while i < (*comp).nbstrings {
        target =
            *(*comp).compact.offset((state *
                                         ((*comp).nbstrings +
                                              1 as std::os::raw::c_int) + i +
                                         1 as std::os::raw::c_int) as isize);
        if target > 0 as std::os::raw::c_int && target <= (*comp).nbstates {
            target -= 1;
            if xmlRegStrEqualWildcard(*(*comp).stringMap.offset(i as isize),
                                      value) != 0 {
                (*exec).index = target;
                if (*exec).callback.is_some() && !(*comp).transdata.is_null()
                   {
                    (*exec).callback.expect("non-null function pointer")((*exec).data
                                                                             as
                                                                             xmlRegExecCtxtPtr,
                                                                         value,
                                                                         *(*comp).transdata.offset((state
                                                                                                        *
                                                                                                        (*comp).nbstrings
                                                                                                        +
                                                                                                        i)
                                                                                                       as
                                                                                                       isize),
                                                                         data);
                }
                if *(*comp).compact.offset((target *
                                                ((*comp).nbstrings +
                                                     1 as std::os::raw::c_int)) as
                                               isize) ==
                       XML_REGEXP_SINK_STATE as std::os::raw::c_int {
                    break ;
                }
                if *(*comp).compact.offset((target *
                                                ((*comp).nbstrings +
                                                     1 as std::os::raw::c_int)) as
                                               isize) ==
                       XML_REGEXP_FINAL_STATE as std::os::raw::c_int {
                    return 1 as std::os::raw::c_int
                }
                return 0 as std::os::raw::c_int
            }
        }
        i += 1
    }
    /*
     * Failed to find an exit transition out from current state for the
     * current token
     */
    if !(*exec).errString.is_null() {
        xmlFree.expect("non-null function pointer")((*exec).errString as
                                                        *mut std::os::raw::c_void);
    }
    (*exec).errString = xmlStrdup(value);
    (*exec).errStateNo = state;
    (*exec).status = -(1 as std::os::raw::c_int);
    return -(1 as std::os::raw::c_int);
}
/* *
 * xmlRegExecPushStringInternal:
 * @exec: a regexp execution context or NULL to indicate the end
 * @value: a string token input
 * @data: data associated to the token to reuse in callbacks
 * @compound: value was assembled from 2 strings
 *
 * Push one input token in the execution context
 *
 * Returns: 1 if the regexp reached a final state, 0 if non-final, and
 *     a negative value in case of error.
 */
unsafe extern "C" fn xmlRegExecPushStringInternal(mut exec: xmlRegExecCtxtPtr,
                                                  mut value: *const xmlChar,
                                                  mut data: *mut std::os::raw::c_void,
                                                  mut compound: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut current_block: u64;
    let mut trans: xmlRegTransPtr = 0 as *mut xmlRegTrans;
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut ret: std::os::raw::c_int = 0;
    let mut final_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut progress: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if exec.is_null() { return -(1 as std::os::raw::c_int) }
    if (*exec).comp.is_null() { return -(1 as std::os::raw::c_int) }
    if (*exec).status != 0 as std::os::raw::c_int { return (*exec).status }
    if !(*(*exec).comp).compact.is_null() {
        return xmlRegCompactPushString(exec, (*exec).comp, value, data)
    }
    if value.is_null() {
        if (*(*exec).state).type_0 as std::os::raw::c_uint ==
               XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint {
            return 1 as std::os::raw::c_int
        }
        final_0 = 1 as std::os::raw::c_int
    }
    /*
     * If we have an active rollback stack push the new value there
     * and get back to where we were left
     */
    if !value.is_null() && (*exec).inputStackNr > 0 as std::os::raw::c_int {
        xmlFARegExecSaveInputString(exec, value, data);
        value = (*(*exec).inputStack.offset((*exec).index as isize)).value;
        data = (*(*exec).inputStack.offset((*exec).index as isize)).data
    }
    while (*exec).status == 0 as std::os::raw::c_int &&
              (!value.is_null() ||
                   final_0 == 1 as std::os::raw::c_int &&
                       (*(*exec).state).type_0 as std::os::raw::c_uint !=
                           XML_REGEXP_FINAL_STATE as std::os::raw::c_int as
                               std::os::raw::c_uint) {
        /*
	 * End of input on non-terminal state, rollback, however we may
	 * still have epsilon like transition for counted transitions
	 * on counters, in that case don't break too early.
	 */
        if !(value.is_null() && (*exec).counts.is_null()) {
            (*exec).transcount = 0 as std::os::raw::c_int;
            loop  {
                if !((*exec).transno < (*(*exec).state).nbTrans) {
                    current_block = 5511877782510663281;
                    break ;
                }
                trans =
                    &mut *(*(*exec).state).trans.offset((*exec).transno as
                                                            isize) as
                        *mut xmlRegTrans;
                if !((*trans).to < 0 as std::os::raw::c_int) {
                    atom = (*trans).atom;
                    ret = 0 as std::os::raw::c_int;
                    if (*trans).count == 0x123457 as std::os::raw::c_int {
                        let mut i: std::os::raw::c_int = 0;
                        let mut count: std::os::raw::c_int = 0;
                        let mut t: xmlRegTransPtr = 0 as *mut xmlRegTrans;
                        let mut counter: xmlRegCounterPtr =
                            0 as *mut xmlRegCounter;
                        ret = 0 as std::os::raw::c_int;
                        /*
		 * Check all counted transitions from the current state
		 */
                        if value.is_null() && final_0 != 0 {
                            ret = 1 as std::os::raw::c_int
                        } else if !value.is_null() {
                            i = 0 as std::os::raw::c_int;
                            while i < (*(*exec).state).nbTrans {
                                t =
                                    &mut *(*(*exec).state).trans.offset(i as
                                                                            isize)
                                        as *mut xmlRegTrans;
                                if !((*t).counter < 0 as std::os::raw::c_int ||
                                         t == trans) {
                                    counter =
                                        &mut *(*(*exec).comp).counters.offset((*t).counter
                                                                                  as
                                                                                  isize)
                                            as *mut xmlRegCounter;
                                    count =
                                        *(*exec).counts.offset((*t).counter as
                                                                   isize);
                                    if count < (*counter).max &&
                                           !(*t).atom.is_null() &&
                                           xmlStrEqual(value,
                                                       (*(*t).atom).valuep as
                                                           *const xmlChar) !=
                                               0 {
                                        ret = 0 as std::os::raw::c_int;
                                        break ;
                                    } else if count >= (*counter).min &&
                                                  count < (*counter).max &&
                                                  !(*t).atom.is_null() &&
                                                  xmlStrEqual(value,
                                                              (*(*t).atom).valuep
                                                                  as
                                                                  *const xmlChar)
                                                      != 0 {
                                        ret = 1 as std::os::raw::c_int;
                                        break ;
                                    }
                                }
                                i += 1
                            }
                        }
                    } else if (*trans).count == 0x123456 as std::os::raw::c_int {
                        let mut i_0: std::os::raw::c_int = 0;
                        let mut count_0: std::os::raw::c_int = 0;
                        let mut t_0: xmlRegTransPtr = 0 as *mut xmlRegTrans;
                        let mut counter_0: xmlRegCounterPtr =
                            0 as *mut xmlRegCounter;
                        ret = 1 as std::os::raw::c_int;
                        /*
		 * Check all counted transitions from the current state
		 */
                        i_0 = 0 as std::os::raw::c_int;
                        while i_0 < (*(*exec).state).nbTrans {
                            t_0 =
                                &mut *(*(*exec).state).trans.offset(i_0 as
                                                                        isize)
                                    as *mut xmlRegTrans;
                            if !((*t_0).counter < 0 as std::os::raw::c_int ||
                                     t_0 == trans) {
                                counter_0 =
                                    &mut *(*(*exec).comp).counters.offset((*t_0).counter
                                                                              as
                                                                              isize)
                                        as *mut xmlRegCounter;
                                count_0 =
                                    *(*exec).counts.offset((*t_0).counter as
                                                               isize);
                                if count_0 < (*counter_0).min ||
                                       count_0 > (*counter_0).max {
                                    ret = 0 as std::os::raw::c_int;
                                    break ;
                                }
                            }
                            i_0 += 1
                        }
                    } else if (*trans).count >= 0 as std::os::raw::c_int {
                        let mut count_1: std::os::raw::c_int = 0;
                        let mut counter_1: xmlRegCounterPtr =
                            0 as *mut xmlRegCounter;
                        /*
		 * A counted transition.
		 */
                        count_1 =
                            *(*exec).counts.offset((*trans).count as isize);
                        counter_1 =
                            &mut *(*(*exec).comp).counters.offset((*trans).count
                                                                      as
                                                                      isize)
                                as *mut xmlRegCounter;
                        ret =
                            (count_1 >= (*counter_1).min &&
                                 count_1 <= (*counter_1).max) as std::os::raw::c_int
                    } else if atom.is_null() {
                        fprintf(stderr,
                                b"epsilon transition left at runtime\n\x00" as
                                    *const u8 as *const std::os::raw::c_char);
                        (*exec).status = -(2 as std::os::raw::c_int);
                        current_block = 5511877782510663281;
                        break ;
                    } else if !value.is_null() {
                        ret =
                            xmlRegStrEqualWildcard((*atom).valuep as
                                                       *const xmlChar, value);
                        if (*atom).neg != 0 {
                            ret = (ret == 0) as std::os::raw::c_int;
                            if compound == 0 { ret = 0 as std::os::raw::c_int }
                        }
                        if ret == 1 as std::os::raw::c_int &&
                               (*trans).counter >= 0 as std::os::raw::c_int {
                            let mut counter_2: xmlRegCounterPtr =
                                0 as *mut xmlRegCounter;
                            let mut count_2: std::os::raw::c_int = 0;
                            count_2 =
                                *(*exec).counts.offset((*trans).counter as
                                                           isize);
                            counter_2 =
                                &mut *(*(*exec).comp).counters.offset((*trans).counter
                                                                          as
                                                                          isize)
                                    as *mut xmlRegCounter;
                            if count_2 >= (*counter_2).max {
                                ret = 0 as std::os::raw::c_int
                            }
                        }
                        if ret == 1 as std::os::raw::c_int &&
                               (*atom).min > 0 as std::os::raw::c_int &&
                               (*atom).max > 0 as std::os::raw::c_int {
                            let mut to: xmlRegStatePtr =
                                *(*(*exec).comp).states.offset((*trans).to as
                                                                   isize);
                            /*
		     * this is a multiple input sequence
		     */
                            if (*(*exec).state).nbTrans >
                                   (*exec).transno + 1 as std::os::raw::c_int {
                                if (*exec).inputStackNr <= 0 as std::os::raw::c_int {
                                    xmlFARegExecSaveInputString(exec, value,
                                                                data);
                                }
                                xmlFARegExecSave(exec);
                            }
                            (*exec).transcount = 1 as std::os::raw::c_int;
                            /*
			 * Try to progress as much as possible on the input
			 */
                            while !((*exec).transcount == (*atom).max) {
                                (*exec).index += 1;
                                value =
                                    (*(*exec).inputStack.offset((*exec).index
                                                                    as
                                                                    isize)).value;
                                data =
                                    (*(*exec).inputStack.offset((*exec).index
                                                                    as
                                                                    isize)).data;
                                /*
			 * End of input: stop here
			 */
                                if value.is_null() {
                                    (*exec).index -= 1;
                                    break ;
                                } else {
                                    if (*exec).transcount >= (*atom).min {
                                        let mut transno: std::os::raw::c_int =
                                            (*exec).transno;
                                        let mut state: xmlRegStatePtr =
                                            (*exec).state;
                                        /*
			     * The transition is acceptable save it
			     */
                                        (*exec).transno =
                                            -(1 as std::os::raw::c_int); /* trick */
                                        (*exec).state = to;
                                        if (*exec).inputStackNr <=
                                               0 as std::os::raw::c_int {
                                            xmlFARegExecSaveInputString(exec,
                                                                        value,
                                                                        data);
                                        }
                                        xmlFARegExecSave(exec);
                                        (*exec).transno = transno;
                                        (*exec).state = state
                                    }
                                    ret =
                                        xmlStrEqual(value,
                                                    (*atom).valuep as
                                                        *const xmlChar);
                                    (*exec).transcount += 1;
                                    if !(ret == 1 as std::os::raw::c_int) { break ; }
                                }
                            }
                            if (*exec).transcount < (*atom).min {
                                ret = 0 as std::os::raw::c_int
                            }
                            /*
		     * If the last check failed but one transition was found
		     * possible, rollback
		     */
                            if ret < 0 as std::os::raw::c_int {
                                ret = 0 as std::os::raw::c_int
                            }
                            if ret == 0 as std::os::raw::c_int {
                                current_block = 9684321055053295576;
                                break ;
                            }
                        }
                    }
                    if ret == 1 as std::os::raw::c_int {
                        if (*exec).callback.is_some() && !atom.is_null() &&
                               !data.is_null() {
                            (*exec).callback.expect("non-null function pointer")((*exec).data
                                                                                     as
                                                                                     xmlRegExecCtxtPtr,
                                                                                 (*atom).valuep
                                                                                     as
                                                                                     *const xmlChar,
                                                                                 (*atom).data,
                                                                                 data);
                        }
                        if (*(*exec).state).nbTrans >
                               (*exec).transno + 1 as std::os::raw::c_int {
                            if (*exec).inputStackNr <= 0 as std::os::raw::c_int {
                                xmlFARegExecSaveInputString(exec, value,
                                                            data);
                            }
                            xmlFARegExecSave(exec);
                        }
                        if (*trans).counter >= 0 as std::os::raw::c_int {
                            let ref mut fresh23 =
                                *(*exec).counts.offset((*trans).counter as
                                                           isize);
                            *fresh23 += 1
                        }
                        if (*trans).count >= 0 as std::os::raw::c_int &&
                               (*trans).count < 0x123456 as std::os::raw::c_int {
                            *(*exec).counts.offset((*trans).count as isize) =
                                0 as std::os::raw::c_int
                        }
                        if !(*(*(*exec).comp).states.offset((*trans).to as
                                                                isize)).is_null()
                               &&
                               (**(*(*exec).comp).states.offset((*trans).to as
                                                                    isize)).type_0
                                   as std::os::raw::c_uint ==
                                   XML_REGEXP_SINK_STATE as std::os::raw::c_int as
                                       std::os::raw::c_uint {
                            /*
		     * entering a sink state, save the current state as error
		     * state.
		     */
                            if !(*exec).errString.is_null() {
                                xmlFree.expect("non-null function pointer")((*exec).errString
                                                                                as
                                                                                *mut std::os::raw::c_void);
                            }
                            (*exec).errString = xmlStrdup(value);
                            (*exec).errState = (*exec).state;
                            memcpy((*exec).errCounts as *mut std::os::raw::c_void,
                                   (*exec).counts as *const std::os::raw::c_void,
                                   ((*(*exec).comp).nbCounters as
                                        std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                                        as
                                                                        std::os::raw::c_ulong));
                        }
                        (*exec).state =
                            *(*(*exec).comp).states.offset((*trans).to as
                                                               isize);
                        (*exec).transno = 0 as std::os::raw::c_int;
                        if !(*trans).atom.is_null() {
                            if !(*exec).inputStack.is_null() {
                                (*exec).index += 1;
                                if (*exec).index < (*exec).inputStackNr {
                                    value =
                                        (*(*exec).inputStack.offset((*exec).index
                                                                        as
                                                                        isize)).value;
                                    data =
                                        (*(*exec).inputStack.offset((*exec).index
                                                                        as
                                                                        isize)).data
                                } else {
                                    value = 0 as *const xmlChar;
                                    data = 0 as *mut std::os::raw::c_void
                                }
                            } else {
                                value = 0 as *const xmlChar;
                                data = 0 as *mut std::os::raw::c_void
                            }
                        }
                        current_block = 7612256501369941622;
                        break ;
                    } else if ret < 0 as std::os::raw::c_int {
                        (*exec).status = -(4 as std::os::raw::c_int);
                        current_block = 5511877782510663281;
                        break ;
                    }
                }
                (*exec).transno += 1
            }
            match current_block {
                9684321055053295576 => { }
                _ => {
                    match current_block {
                        7612256501369941622 => {
                            progress = 1 as std::os::raw::c_int;
                            continue ;
                        }
                        _ => {
                            if !((*exec).transno != 0 as std::os::raw::c_int ||
                                     (*(*exec).state).nbTrans ==
                                         0 as std::os::raw::c_int) {
                                continue ;
                            }
                        }
                    }
                }
            }
        }
        /*
	     * if we didn't yet rollback on the current input
	     * store the current state as the error state.
	     */
        if progress != 0 && !(*exec).state.is_null() &&
               (*(*exec).state).type_0 as std::os::raw::c_uint !=
                   XML_REGEXP_SINK_STATE as std::os::raw::c_int as std::os::raw::c_uint {
            progress = 0 as std::os::raw::c_int;
            if !(*exec).errString.is_null() {
                xmlFree.expect("non-null function pointer")((*exec).errString
                                                                as
                                                                *mut std::os::raw::c_void);
            }
            (*exec).errString = xmlStrdup(value);
            (*exec).errState = (*exec).state;
            if (*(*exec).comp).nbCounters != 0 {
                memcpy((*exec).errCounts as *mut std::os::raw::c_void,
                       (*exec).counts as *const std::os::raw::c_void,
                       ((*(*exec).comp).nbCounters as
                            std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_int>()
                                                            as
                                                            std::os::raw::c_ulong));
            }
        }
        /*
	     * Failed to find a way out
	     */
        (*exec).determinist = 0 as std::os::raw::c_int;
        xmlFARegExecRollBack(exec);
        if !(*exec).inputStack.is_null() && (*exec).status == 0 as std::os::raw::c_int
           {
            value =
                (*(*exec).inputStack.offset((*exec).index as isize)).value;
            data = (*(*exec).inputStack.offset((*exec).index as isize)).data
        }
    }
    if (*exec).status == 0 as std::os::raw::c_int {
        return ((*(*exec).state).type_0 as std::os::raw::c_uint ==
                    XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint) as
                   std::os::raw::c_int
    }
    return (*exec).status;
}
/* *
 * xmlRegExecPushString:
 * @exec: a regexp execution context or NULL to indicate the end
 * @value: a string token input
 * @data: data associated to the token to reuse in callbacks
 *
 * Push one input token in the execution context
 *
 * Returns: 1 if the regexp reached a final state, 0 if non-final, and
 *     a negative value in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegExecPushString(mut exec: xmlRegExecCtxtPtr,
                                              mut value: *const xmlChar,
                                              mut data: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    return xmlRegExecPushStringInternal(exec, value, data, 0 as std::os::raw::c_int);
}
/* *
 * xmlRegExecPushString2:
 * @exec: a regexp execution context or NULL to indicate the end
 * @value: the first string token input
 * @value2: the second string token input
 * @data: data associated to the token to reuse in callbacks
 *
 * Push one input token in the execution context
 *
 * Returns: 1 if the regexp reached a final state, 0 if non-final, and
 *     a negative value in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegExecPushString2(mut exec: xmlRegExecCtxtPtr,
                                               mut value: *const xmlChar,
                                               mut value2: *const xmlChar,
                                               mut data: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut buf: [xmlChar; 150] = [0; 150];
    let mut lenn: std::os::raw::c_int = 0;
    let mut lenp: std::os::raw::c_int = 0;
    let mut ret: std::os::raw::c_int = 0;
    let mut str: *mut xmlChar = 0 as *mut xmlChar;
    if exec.is_null() { return -(1 as std::os::raw::c_int) }
    if (*exec).comp.is_null() { return -(1 as std::os::raw::c_int) }
    if (*exec).status != 0 as std::os::raw::c_int { return (*exec).status }
    if value2.is_null() { return xmlRegExecPushString(exec, value, data) }
    lenn = strlen(value2 as *mut std::os::raw::c_char) as std::os::raw::c_int;
    lenp = strlen(value as *mut std::os::raw::c_char) as std::os::raw::c_int;
    if (150 as std::os::raw::c_int) < lenn + lenp + 2 as std::os::raw::c_int {
        str =
            xmlMallocAtomic.expect("non-null function pointer")((lenn + lenp +
                                                                     2 as
                                                                         std::os::raw::c_int)
                                                                    as size_t)
                as *mut xmlChar;
        if str.is_null() {
            (*exec).status = -(1 as std::os::raw::c_int);
            return -(1 as std::os::raw::c_int)
        }
    } else { str = buf.as_mut_ptr() }
    memcpy(&mut *str.offset(0 as std::os::raw::c_int as isize) as *mut xmlChar as
               *mut std::os::raw::c_void, value as *const std::os::raw::c_void,
           lenp as std::os::raw::c_ulong);
    *str.offset(lenp as isize) = '|' as i32 as xmlChar;
    memcpy(&mut *str.offset((lenp + 1 as std::os::raw::c_int) as isize) as
               *mut xmlChar as *mut std::os::raw::c_void,
           value2 as *const std::os::raw::c_void, lenn as std::os::raw::c_ulong);
    *str.offset((lenn + lenp + 1 as std::os::raw::c_int) as isize) =
        0 as std::os::raw::c_int as xmlChar;
    if !(*(*exec).comp).compact.is_null() {
        ret = xmlRegCompactPushString(exec, (*exec).comp, str, data)
    } else {
        ret = xmlRegExecPushStringInternal(exec, str, data, 1 as std::os::raw::c_int)
    }
    if str != buf.as_mut_ptr() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    }
    return ret;
}
/* *
 * xmlRegExecGetValues:
 * @exec: a regexp execution context
 * @err: error extraction or normal one
 * @nbval: pointer to the number of accepted values IN/OUT
 * @nbneg: return number of negative transitions
 * @values: pointer to the array of acceptable values
 * @terminal: return value if this was a terminal state
 *
 * Extract informations from the regexp execution, internal routine to
 * implement xmlRegExecNextValues() and xmlRegExecErrInfo()
 *
 * Returns: 0 in case of success or -1 in case of error.
 */
unsafe extern "C" fn xmlRegExecGetValues(mut exec: xmlRegExecCtxtPtr,
                                         mut err: std::os::raw::c_int,
                                         mut nbval: *mut std::os::raw::c_int,
                                         mut nbneg: *mut std::os::raw::c_int,
                                         mut values: *mut *mut xmlChar,
                                         mut terminal: *mut std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut maxval: std::os::raw::c_int = 0;
    let mut nb: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if exec.is_null() || nbval.is_null() || nbneg.is_null() ||
           values.is_null() || *nbval <= 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    maxval = *nbval;
    *nbval = 0 as std::os::raw::c_int;
    *nbneg = 0 as std::os::raw::c_int;
    if !(*exec).comp.is_null() && !(*(*exec).comp).compact.is_null() {
        let mut comp: xmlRegexpPtr = 0 as *mut xmlRegexp;
        let mut target: std::os::raw::c_int = 0;
        let mut i: std::os::raw::c_int = 0;
        let mut state: std::os::raw::c_int = 0;
        comp = (*exec).comp;
        if err != 0 {
            if (*exec).errStateNo == -(1 as std::os::raw::c_int) {
                return -(1 as std::os::raw::c_int)
            }
            state = (*exec).errStateNo
        } else { state = (*exec).index }
        if !terminal.is_null() {
            if *(*comp).compact.offset((state *
                                            ((*comp).nbstrings +
                                                 1 as std::os::raw::c_int)) as isize)
                   == XML_REGEXP_FINAL_STATE as std::os::raw::c_int {
                *terminal = 1 as std::os::raw::c_int
            } else { *terminal = 0 as std::os::raw::c_int }
        }
        i = 0 as std::os::raw::c_int;
        while i < (*comp).nbstrings && nb < maxval {
            target =
                *(*comp).compact.offset((state *
                                             ((*comp).nbstrings +
                                                  1 as std::os::raw::c_int) + i +
                                             1 as std::os::raw::c_int) as isize);
            if target > 0 as std::os::raw::c_int && target <= (*comp).nbstates &&
                   *(*comp).compact.offset(((target - 1 as std::os::raw::c_int) *
                                                ((*comp).nbstrings +
                                                     1 as std::os::raw::c_int)) as
                                               isize) !=
                       XML_REGEXP_SINK_STATE as std::os::raw::c_int {
                let fresh24 = nb;
                nb = nb + 1;
                let ref mut fresh25 = *values.offset(fresh24 as isize);
                *fresh25 = *(*comp).stringMap.offset(i as isize);
                *nbval += 1
            }
            i += 1
        }
        i = 0 as std::os::raw::c_int;
        while i < (*comp).nbstrings && nb < maxval {
            target =
                *(*comp).compact.offset((state *
                                             ((*comp).nbstrings +
                                                  1 as std::os::raw::c_int) + i +
                                             1 as std::os::raw::c_int) as isize);
            if target > 0 as std::os::raw::c_int && target <= (*comp).nbstates &&
                   *(*comp).compact.offset(((target - 1 as std::os::raw::c_int) *
                                                ((*comp).nbstrings +
                                                     1 as std::os::raw::c_int)) as
                                               isize) ==
                       XML_REGEXP_SINK_STATE as std::os::raw::c_int {
                let fresh26 = nb;
                nb = nb + 1;
                let ref mut fresh27 = *values.offset(fresh26 as isize);
                *fresh27 = *(*comp).stringMap.offset(i as isize);
                *nbneg += 1
            }
            i += 1
        }
    } else {
        let mut transno: std::os::raw::c_int = 0;
        let mut trans: xmlRegTransPtr = 0 as *mut xmlRegTrans;
        let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
        let mut state_0: xmlRegStatePtr = 0 as *mut xmlRegState;
        if !terminal.is_null() {
            if (*(*exec).state).type_0 as std::os::raw::c_uint ==
                   XML_REGEXP_FINAL_STATE as std::os::raw::c_int as std::os::raw::c_uint {
                *terminal = 1 as std::os::raw::c_int
            } else { *terminal = 0 as std::os::raw::c_int }
        }
        if err != 0 {
            if (*exec).errState.is_null() { return -(1 as std::os::raw::c_int) }
            state_0 = (*exec).errState
        } else {
            if (*exec).state.is_null() { return -(1 as std::os::raw::c_int) }
            state_0 = (*exec).state
        }
        transno = 0 as std::os::raw::c_int;
        while transno < (*state_0).nbTrans && nb < maxval {
            trans =
                &mut *(*state_0).trans.offset(transno as isize) as
                    *mut xmlRegTrans;
            if !((*trans).to < 0 as std::os::raw::c_int) {
                atom = (*trans).atom;
                if !(atom.is_null() || (*atom).valuep.is_null()) {
                    if (*trans).count == 0x123457 as std::os::raw::c_int {
                        /* this should not be reached but ... */
                        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                                   b"Unimplemented block at %s:%d\n\x00"
                                                                                       as
                                                                                       *const u8
                                                                                       as
                                                                                       *const std::os::raw::c_char,
                                                                                   b"xmlregexp.c\x00"
                                                                                       as
                                                                                       *const u8
                                                                                       as
                                                                                       *const std::os::raw::c_char,
                                                                                   4300
                                                                                       as
                                                                                       std::os::raw::c_int);
                    } else if (*trans).count == 0x123456 as std::os::raw::c_int {
                        /* this should not be reached but ... */
                        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                                   b"Unimplemented block at %s:%d\n\x00"
                                                                                       as
                                                                                       *const u8
                                                                                       as
                                                                                       *const std::os::raw::c_char,
                                                                                   b"xmlregexp.c\x00"
                                                                                       as
                                                                                       *const u8
                                                                                       as
                                                                                       *const std::os::raw::c_char,
                                                                                   4303
                                                                                       as
                                                                                       std::os::raw::c_int);
                    } else if (*trans).counter >= 0 as std::os::raw::c_int {
                        let mut counter: xmlRegCounterPtr =
                            0 as xmlRegCounterPtr;
                        let mut count: std::os::raw::c_int = 0;
                        if err != 0 {
                            count =
                                *(*exec).errCounts.offset((*trans).counter as
                                                              isize)
                        } else {
                            count =
                                *(*exec).counts.offset((*trans).counter as
                                                           isize)
                        }
                        if !(*exec).comp.is_null() {
                            counter =
                                &mut *(*(*exec).comp).counters.offset((*trans).counter
                                                                          as
                                                                          isize)
                                    as *mut xmlRegCounter
                        }
                        if counter.is_null() || count < (*counter).max {
                            if (*atom).neg != 0 {
                                let fresh28 = nb;
                                nb = nb + 1;
                                let ref mut fresh29 =
                                    *values.offset(fresh28 as isize);
                                *fresh29 = (*atom).valuep2 as *mut xmlChar
                            } else {
                                let fresh30 = nb;
                                nb = nb + 1;
                                let ref mut fresh31 =
                                    *values.offset(fresh30 as isize);
                                *fresh31 = (*atom).valuep as *mut xmlChar
                            }
                            *nbval += 1
                        }
                    } else if !(*exec).comp.is_null() &&
                                  !(*(*(*exec).comp).states.offset((*trans).to
                                                                       as
                                                                       isize)).is_null()
                                  &&
                                  (**(*(*exec).comp).states.offset((*trans).to
                                                                       as
                                                                       isize)).type_0
                                      as std::os::raw::c_uint !=
                                      XML_REGEXP_SINK_STATE as std::os::raw::c_int as
                                          std::os::raw::c_uint {
                        if (*atom).neg != 0 {
                            let fresh32 = nb;
                            nb = nb + 1;
                            let ref mut fresh33 =
                                *values.offset(fresh32 as isize);
                            *fresh33 = (*atom).valuep2 as *mut xmlChar
                        } else {
                            let fresh34 = nb;
                            nb = nb + 1;
                            let ref mut fresh35 =
                                *values.offset(fresh34 as isize);
                            *fresh35 = (*atom).valuep as *mut xmlChar
                        }
                        *nbval += 1
                    }
                }
            }
            transno += 1
        }
        transno = 0 as std::os::raw::c_int;
        while transno < (*state_0).nbTrans && nb < maxval {
            trans =
                &mut *(*state_0).trans.offset(transno as isize) as
                    *mut xmlRegTrans;
            if !((*trans).to < 0 as std::os::raw::c_int) {
                atom = (*trans).atom;
                if !(atom.is_null() || (*atom).valuep.is_null()) {
                    if !((*trans).count == 0x123457 as std::os::raw::c_int) {
                        if !((*trans).count == 0x123456 as std::os::raw::c_int) {
                            if !((*trans).counter >= 0 as std::os::raw::c_int) {
                                if !(*(*(*exec).comp).states.offset((*trans).to
                                                                        as
                                                                        isize)).is_null()
                                       &&
                                       (**(*(*exec).comp).states.offset((*trans).to
                                                                            as
                                                                            isize)).type_0
                                           as std::os::raw::c_uint ==
                                           XML_REGEXP_SINK_STATE as
                                               std::os::raw::c_int as std::os::raw::c_uint {
                                    if (*atom).neg != 0 {
                                        let fresh36 = nb;
                                        nb = nb + 1;
                                        let ref mut fresh37 =
                                            *values.offset(fresh36 as isize);
                                        *fresh37 =
                                            (*atom).valuep2 as *mut xmlChar
                                    } else {
                                        let fresh38 = nb;
                                        nb = nb + 1;
                                        let ref mut fresh39 =
                                            *values.offset(fresh38 as isize);
                                        *fresh39 =
                                            (*atom).valuep as *mut xmlChar
                                    }
                                    *nbneg += 1
                                }
                            }
                        }
                    }
                }
            }
            transno += 1
        }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlRegExecNextValues:
 * @exec: a regexp execution context
 * @nbval: pointer to the number of accepted values IN/OUT
 * @nbneg: return number of negative transitions
 * @values: pointer to the array of acceptable values
 * @terminal: return value if this was a terminal state
 *
 * Extract informations from the regexp execution,
 * the parameter @values must point to an array of @nbval string pointers
 * on return nbval will contain the number of possible strings in that
 * state and the @values array will be updated with them. The string values
 * returned will be freed with the @exec context and don't need to be
 * deallocated.
 *
 * Returns: 0 in case of success or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegExecNextValues(mut exec: xmlRegExecCtxtPtr,
                                              mut nbval: *mut std::os::raw::c_int,
                                              mut nbneg: *mut std::os::raw::c_int,
                                              mut values: *mut *mut xmlChar,
                                              mut terminal: *mut std::os::raw::c_int)
 -> std::os::raw::c_int {
    return xmlRegExecGetValues(exec, 0 as std::os::raw::c_int, nbval, nbneg, values,
                               terminal);
}
/* *
 * xmlRegExecErrInfo:
 * @exec: a regexp execution context generating an error
 * @string: return value for the error string
 * @nbval: pointer to the number of accepted values IN/OUT
 * @nbneg: return number of negative transitions
 * @values: pointer to the array of acceptable values
 * @terminal: return value if this was a terminal state
 *
 * Extract error informations from the regexp execution, the parameter
 * @string will be updated with the value pushed and not accepted,
 * the parameter @values must point to an array of @nbval string pointers
 * on return nbval will contain the number of possible strings in that
 * state and the @values array will be updated with them. The string values
 * returned will be freed with the @exec context and don't need to be
 * deallocated.
 *
 * Returns: 0 in case of success or -1 in case of error.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegExecErrInfo(mut exec: xmlRegExecCtxtPtr,
                                           mut string: *mut *const xmlChar,
                                           mut nbval: *mut std::os::raw::c_int,
                                           mut nbneg: *mut std::os::raw::c_int,
                                           mut values: *mut *mut xmlChar,
                                           mut terminal: *mut std::os::raw::c_int)
 -> std::os::raw::c_int {
    if exec.is_null() { return -(1 as std::os::raw::c_int) }
    if !string.is_null() {
        if (*exec).status != 0 as std::os::raw::c_int {
            *string = (*exec).errString
        } else { *string = 0 as *const xmlChar }
    }
    return xmlRegExecGetValues(exec, 1 as std::os::raw::c_int, nbval, nbneg, values,
                               terminal);
}
/* ***********************************************************************
 *									*
 *	Parser for the Schemas Datatype Regular Expressions		*
 *	http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/#regexs	*
 *									*
 ************************************************************************/
/* *
 * xmlFAIsChar:
 * @ctxt:  a regexp parser context
 *
 * [10]   Char   ::=   [^.\?*+()|#x5B#x5D]
 */
unsafe extern "C" fn xmlFAIsChar(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut cur: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    cur = xmlStringCurrentChar(0 as xmlParserCtxtPtr, (*ctxt).cur, &mut len);
    if cur == '.' as i32 || cur == '\\' as i32 || cur == '?' as i32 ||
           cur == '*' as i32 || cur == '+' as i32 || cur == '(' as i32 ||
           cur == ')' as i32 || cur == '|' as i32 ||
           cur == 0x5b as std::os::raw::c_int || cur == 0x5d as std::os::raw::c_int ||
           cur == 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    return cur;
}
/* *
 * xmlFAParseCharProp:
 * @ctxt:  a regexp parser context
 *
 * [27]   charProp   ::=   IsCategory | IsBlock
 * [28]   IsCategory ::= Letters | Marks | Numbers | Punctuation |
 *                       Separators | Symbols | Others
 * [29]   Letters   ::=   'L' [ultmo]?
 * [30]   Marks   ::=   'M' [nce]?
 * [31]   Numbers   ::=   'N' [dlo]?
 * [32]   Punctuation   ::=   'P' [cdseifo]?
 * [33]   Separators   ::=   'Z' [slp]?
 * [34]   Symbols   ::=   'S' [mcko]?
 * [35]   Others   ::=   'C' [cfon]?
 * [36]   IsBlock   ::=   'Is' [a-zA-Z0-9#x2D]+
 */
unsafe extern "C" fn xmlFAParseCharProp(mut ctxt: xmlRegParserCtxtPtr) {
    let mut cur: std::os::raw::c_int = 0;
    let mut type_0: xmlRegAtomType = 0 as xmlRegAtomType;
    let mut blockName: *mut xmlChar = 0 as *mut xmlChar;
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur == 'L' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'u' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_LETTER_UPPERCASE
        } else if cur == 'l' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_LETTER_LOWERCASE
        } else if cur == 't' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_LETTER_TITLECASE
        } else if cur == 'm' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_LETTER_MODIFIER
        } else if cur == 'o' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_LETTER_OTHERS
        } else { type_0 = XML_REGEXP_LETTER }
    } else if cur == 'M' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'n' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* nonspacing */
            type_0 = XML_REGEXP_MARK_NONSPACING
        } else if cur == 'c' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* spacing combining */
            type_0 = XML_REGEXP_MARK_SPACECOMBINING
        } else if cur == 'e' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* enclosing */
            type_0 = XML_REGEXP_MARK_ENCLOSING
        } else {
            /* all marks */
            type_0 = XML_REGEXP_MARK
        }
    } else if cur == 'N' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'd' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* digital */
            type_0 = XML_REGEXP_NUMBER_DECIMAL
        } else if cur == 'l' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* letter */
            type_0 = XML_REGEXP_NUMBER_LETTER
        } else if cur == 'o' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* other */
            type_0 = XML_REGEXP_NUMBER_OTHERS
        } else {
            /* all numbers */
            type_0 = XML_REGEXP_NUMBER
        }
    } else if cur == 'P' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'c' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* connector */
            type_0 = XML_REGEXP_PUNCT_CONNECTOR
        } else if cur == 'd' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* dash */
            type_0 = XML_REGEXP_PUNCT_DASH
        } else if cur == 's' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* open */
            type_0 = XML_REGEXP_PUNCT_OPEN
        } else if cur == 'e' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* close */
            type_0 = XML_REGEXP_PUNCT_CLOSE
        } else if cur == 'i' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* initial quote */
            type_0 = XML_REGEXP_PUNCT_INITQUOTE
        } else if cur == 'f' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* final quote */
            type_0 = XML_REGEXP_PUNCT_FINQUOTE
        } else if cur == 'o' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* other */
            type_0 = XML_REGEXP_PUNCT_OTHERS
        } else {
            /* all punctuation */
            type_0 = XML_REGEXP_PUNCT
        }
    } else if cur == 'Z' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 's' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* space */
            type_0 = XML_REGEXP_SEPAR_SPACE
        } else if cur == 'l' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* line */
            type_0 = XML_REGEXP_SEPAR_LINE
        } else if cur == 'p' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* paragraph */
            type_0 = XML_REGEXP_SEPAR_PARA
        } else {
            /* all separators */
            type_0 = XML_REGEXP_SEPAR
        }
    } else if cur == 'S' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'm' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_SYMBOL_MATH
            /* math */
        } else if cur == 'c' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_SYMBOL_CURRENCY
            /* currency */
        } else if cur == 'k' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_SYMBOL_MODIFIER
            /* modifiers */
        } else if cur == 'o' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            type_0 = XML_REGEXP_SYMBOL_OTHERS
            /* other */
        } else {
            /* all symbols */
            type_0 = XML_REGEXP_SYMBOL
        }
    } else if cur == 'C' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur == 'c' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* control */
            type_0 = XML_REGEXP_OTHER_CONTROL
        } else if cur == 'f' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* format */
            type_0 = XML_REGEXP_OTHER_FORMAT
        } else if cur == 'o' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* private use */
            type_0 = XML_REGEXP_OTHER_PRIVATE
        } else if cur == 'n' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            /* not assigned */
            type_0 = XML_REGEXP_OTHER_NA
        } else {
            /* all others */
            type_0 = XML_REGEXP_OTHER
        }
    } else if cur == 'I' as i32 {
        let mut start: *const xmlChar = 0 as *const xmlChar;
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur != 's' as i32 {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"IsXXXX expected\x00" as *const u8 as
                                    *const std::os::raw::c_char);
            return
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        start = (*ctxt).cur;
        cur = *(*ctxt).cur as std::os::raw::c_int;
        if cur >= 'a' as i32 && cur <= 'z' as i32 ||
               cur >= 'A' as i32 && cur <= 'Z' as i32 ||
               cur >= '0' as i32 && cur <= '9' as i32 ||
               cur == 0x2d as std::os::raw::c_int {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            cur = *(*ctxt).cur as std::os::raw::c_int;
            while cur >= 'a' as i32 && cur <= 'z' as i32 ||
                      cur >= 'A' as i32 && cur <= 'Z' as i32 ||
                      cur >= '0' as i32 && cur <= '9' as i32 ||
                      cur == 0x2d as std::os::raw::c_int {
                (*ctxt).cur = (*ctxt).cur.offset(1);
                cur = *(*ctxt).cur as std::os::raw::c_int
            }
        }
        type_0 = XML_REGEXP_BLOCK_NAME;
        blockName =
            xmlStrndup(start,
                       (*ctxt).cur.offset_from(start) as std::os::raw::c_long
                           as std::os::raw::c_int)
    } else {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Unknown char property\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    if (*ctxt).atom.is_null() {
        (*ctxt).atom = xmlRegNewAtom(ctxt, type_0);
        if !(*ctxt).atom.is_null() {
            (*(*ctxt).atom).valuep = blockName as *mut std::os::raw::c_void
        }
    } else if (*(*ctxt).atom).type_0 as std::os::raw::c_uint ==
                  XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
        xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg, type_0,
                           0 as std::os::raw::c_int, 0 as std::os::raw::c_int, blockName);
    };
}
/* *
 * xmlFAParseCharClassEsc:
 * @ctxt:  a regexp parser context
 *
 * [23] charClassEsc ::= ( SingleCharEsc | MultiCharEsc | catEsc | complEsc )
 * [24] SingleCharEsc ::= '\' [nrt\|.?*+(){}#x2D#x5B#x5D#x5E]
 * [25] catEsc   ::=   '\p{' charProp '}'
 * [26] complEsc ::=   '\P{' charProp '}'
 * [37] MultiCharEsc ::= '.' | ('\' [sSiIcCdDwW])
 */
unsafe extern "C" fn xmlFAParseCharClassEsc(mut ctxt: xmlRegParserCtxtPtr) {
    let mut cur: std::os::raw::c_int = 0;
    if *(*ctxt).cur as std::os::raw::c_int == '.' as i32 {
        if (*ctxt).atom.is_null() {
            (*ctxt).atom = xmlRegNewAtom(ctxt, XML_REGEXP_ANYCHAR)
        } else if (*(*ctxt).atom).type_0 as std::os::raw::c_uint ==
                      XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
            xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg,
                               XML_REGEXP_ANYCHAR, 0 as std::os::raw::c_int,
                               0 as std::os::raw::c_int, 0 as *mut xmlChar);
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        return
    }
    if *(*ctxt).cur as std::os::raw::c_int != '\\' as i32 {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Escaped sequence: expecting \\\x00" as *const u8
                                as *const std::os::raw::c_char);
        return
    }
    (*ctxt).cur = (*ctxt).cur.offset(1);
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur == 'p' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        if *(*ctxt).cur as std::os::raw::c_int != '{' as i32 {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"Expecting \'{\'\x00" as *const u8 as
                                    *const std::os::raw::c_char);
            return
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        xmlFAParseCharProp(ctxt);
        if *(*ctxt).cur as std::os::raw::c_int != '}' as i32 {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"Expecting \'}\'\x00" as *const u8 as
                                    *const std::os::raw::c_char);
            return
        }
        (*ctxt).cur = (*ctxt).cur.offset(1)
    } else if cur == 'P' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        if *(*ctxt).cur as std::os::raw::c_int != '{' as i32 {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"Expecting \'{\'\x00" as *const u8 as
                                    *const std::os::raw::c_char);
            return
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        xmlFAParseCharProp(ctxt);
        if !(*ctxt).atom.is_null() { (*(*ctxt).atom).neg = 1 as std::os::raw::c_int }
        if *(*ctxt).cur as std::os::raw::c_int != '}' as i32 {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"Expecting \'}\'\x00" as *const u8 as
                                    *const std::os::raw::c_char);
            return
        }
        (*ctxt).cur = (*ctxt).cur.offset(1)
    } else if cur == 'n' as i32 || cur == 'r' as i32 || cur == 't' as i32 ||
                  cur == '\\' as i32 || cur == '|' as i32 || cur == '.' as i32
                  || cur == '?' as i32 || cur == '*' as i32 ||
                  cur == '+' as i32 || cur == '(' as i32 || cur == ')' as i32
                  || cur == '{' as i32 || cur == '}' as i32 ||
                  cur == 0x2d as std::os::raw::c_int || cur == 0x5b as std::os::raw::c_int ||
                  cur == 0x5d as std::os::raw::c_int || cur == 0x5e as std::os::raw::c_int {
        if (*ctxt).atom.is_null() {
            (*ctxt).atom = xmlRegNewAtom(ctxt, XML_REGEXP_CHARVAL);
            if !(*ctxt).atom.is_null() {
                match cur {
                    110 => { (*(*ctxt).atom).codepoint = '\n' as i32 }
                    114 => { (*(*ctxt).atom).codepoint = '\r' as i32 }
                    116 => { (*(*ctxt).atom).codepoint = '\t' as i32 }
                    _ => { (*(*ctxt).atom).codepoint = cur }
                }
            }
        } else if (*(*ctxt).atom).type_0 as std::os::raw::c_uint ==
                      XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
            match cur {
                110 => { cur = '\n' as i32 }
                114 => { cur = '\r' as i32 }
                116 => { cur = '\t' as i32 }
                _ => { }
            }
            xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg,
                               XML_REGEXP_CHARVAL, cur, cur,
                               0 as *mut xmlChar);
        }
        (*ctxt).cur = (*ctxt).cur.offset(1)
    } else if cur == 's' as i32 || cur == 'S' as i32 || cur == 'i' as i32 ||
                  cur == 'I' as i32 || cur == 'c' as i32 || cur == 'C' as i32
                  || cur == 'd' as i32 || cur == 'D' as i32 ||
                  cur == 'w' as i32 || cur == 'W' as i32 {
        let mut type_0: xmlRegAtomType = XML_REGEXP_ANYSPACE;
        match cur {
            115 => { type_0 = XML_REGEXP_ANYSPACE }
            83 => { type_0 = XML_REGEXP_NOTSPACE }
            105 => { type_0 = XML_REGEXP_INITNAME }
            73 => { type_0 = XML_REGEXP_NOTINITNAME }
            99 => { type_0 = XML_REGEXP_NAMECHAR }
            67 => { type_0 = XML_REGEXP_NOTNAMECHAR }
            100 => { type_0 = XML_REGEXP_DECIMAL }
            68 => { type_0 = XML_REGEXP_NOTDECIMAL }
            119 => { type_0 = XML_REGEXP_REALCHAR }
            87 => { type_0 = XML_REGEXP_NOTREALCHAR }
            _ => { }
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        if (*ctxt).atom.is_null() {
            (*ctxt).atom = xmlRegNewAtom(ctxt, type_0)
        } else if (*(*ctxt).atom).type_0 as std::os::raw::c_uint ==
                      XML_REGEXP_RANGES as std::os::raw::c_int as std::os::raw::c_uint {
            xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg, type_0,
                               0 as std::os::raw::c_int, 0 as std::os::raw::c_int,
                               0 as *mut xmlChar);
        }
    } else {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Wrong escape sequence, misuse of character \'\\\'\x00"
                                as *const u8 as *const std::os::raw::c_char);
    };
}
/* *
 * xmlFAParseCharRange:
 * @ctxt:  a regexp parser context
 *
 * [17]   charRange   ::=     seRange | XmlCharRef | XmlCharIncDash
 * [18]   seRange   ::=   charOrEsc '-' charOrEsc
 * [20]   charOrEsc   ::=   XmlChar | SingleCharEsc
 * [21]   XmlChar   ::=   [^\#x2D#x5B#x5D]
 * [22]   XmlCharIncDash   ::=   [^\#x5B#x5D]
 */
unsafe extern "C" fn xmlFAParseCharRange(mut ctxt: xmlRegParserCtxtPtr) {
    let mut cur: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    let mut start: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut end: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    if *(*ctxt).cur as std::os::raw::c_int == '\u{0}' as i32 {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Expecting \']\'\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur == '\\' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        match cur {
            110 => { start = 0xa as std::os::raw::c_int }
            114 => { start = 0xd as std::os::raw::c_int }
            116 => { start = 0x9 as std::os::raw::c_int }
            92 | 124 | 46 | 45 | 94 | 63 | 42 | 43 | 123 | 125 | 40 | 41 | 91
            | 93 => {
                start = cur
            }
            _ => {
                (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
                xmlRegexpErrCompile(ctxt,
                                    b"Invalid escape value\x00" as *const u8
                                        as *const std::os::raw::c_char);
                return
            }
        }
        end = start;
        len = 1 as std::os::raw::c_int
    } else if cur != 0x5b as std::os::raw::c_int && cur != 0x5d as std::os::raw::c_int {
        start =
            xmlStringCurrentChar(0 as xmlParserCtxtPtr, (*ctxt).cur,
                                 &mut len);
        end = start
    } else {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Expecting a char range\x00" as *const u8 as
                                *const std::os::raw::c_char);
        return
    }
    /*
     * Since we are "inside" a range, we can assume ctxt->cur is past
     * the start of ctxt->string, and PREV should be safe
     */
    if start == '-' as i32 &&
           *(*ctxt).cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int !=
               ']' as i32 &&
           *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               '[' as i32 &&
           *(*ctxt).cur.offset(-(1 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               '^' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(len as isize);
        return
    }
    (*ctxt).cur = (*ctxt).cur.offset(len as isize);
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur != '-' as i32 ||
           *(*ctxt).cur.offset(1 as std::os::raw::c_int as isize) as std::os::raw::c_int ==
               ']' as i32 {
        xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg,
                           XML_REGEXP_CHARVAL, start, end, 0 as *mut xmlChar);
        return
    }
    (*ctxt).cur = (*ctxt).cur.offset(1);
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur == '\\' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = *(*ctxt).cur as std::os::raw::c_int;
        match cur {
            110 => { end = 0xa as std::os::raw::c_int }
            114 => { end = 0xd as std::os::raw::c_int }
            116 => { end = 0x9 as std::os::raw::c_int }
            92 | 124 | 46 | 45 | 94 | 63 | 42 | 43 | 123 | 125 | 40 | 41 | 91
            | 93 => {
                end = cur
            }
            _ => {
                (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
                xmlRegexpErrCompile(ctxt,
                                    b"Invalid escape value\x00" as *const u8
                                        as *const std::os::raw::c_char);
                return
            }
        }
        len = 1 as std::os::raw::c_int
    } else if cur != '\u{0}' as i32 && cur != 0x5b as std::os::raw::c_int &&
                  cur != 0x5d as std::os::raw::c_int {
        end =
            xmlStringCurrentChar(0 as xmlParserCtxtPtr, (*ctxt).cur, &mut len)
    } else {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"Expecting the end of a char range\x00" as
                                *const u8 as *const std::os::raw::c_char);
        return
    }
    /* TODO check that the values are acceptable character ranges for XML */
    if end < start {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"End of range is before start of range\x00" as
                                *const u8 as *const std::os::raw::c_char);
    } else {
        (*ctxt).cur = (*ctxt).cur.offset(len as isize);
        xmlRegAtomAddRange(ctxt, (*ctxt).atom, (*ctxt).neg,
                           XML_REGEXP_CHARVAL, start, end, 0 as *mut xmlChar);
    };
}
/* *
 * xmlFAParsePosCharGroup:
 * @ctxt:  a regexp parser context
 *
 * [14]   posCharGroup ::= ( charRange | charClassEsc  )+
 */
unsafe extern "C" fn xmlFAParsePosCharGroup(mut ctxt: xmlRegParserCtxtPtr) {
    loop  {
        if *(*ctxt).cur as std::os::raw::c_int == '\\' as i32 {
            xmlFAParseCharClassEsc(ctxt);
        } else { xmlFAParseCharRange(ctxt); }
        if !(*(*ctxt).cur as std::os::raw::c_int != ']' as i32 &&
                 *(*ctxt).cur as std::os::raw::c_int != '^' as i32 &&
                 *(*ctxt).cur as std::os::raw::c_int != '-' as i32 &&
                 *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int &&
                 (*ctxt).error == 0 as std::os::raw::c_int) {
            break ;
        }
    };
}
/* *
 * xmlFAParseCharGroup:
 * @ctxt:  a regexp parser context
 *
 * [13]   charGroup    ::= posCharGroup | negCharGroup | charClassSub
 * [15]   negCharGroup ::= '^' posCharGroup
 * [16]   charClassSub ::= ( posCharGroup | negCharGroup ) '-' charClassExpr
 * [12]   charClassExpr ::= '[' charGroup ']'
 */
unsafe extern "C" fn xmlFAParseCharGroup(mut ctxt: xmlRegParserCtxtPtr) {
    let mut n: std::os::raw::c_int = (*ctxt).neg; /* eat the '-' */
    while *(*ctxt).cur as std::os::raw::c_int != ']' as i32 &&
              (*ctxt).error == 0 as std::os::raw::c_int {
        if *(*ctxt).cur as std::os::raw::c_int == '^' as i32 {
            let mut neg: std::os::raw::c_int = (*ctxt).neg; /* eat the '[' */
            (*ctxt).cur = (*ctxt).cur.offset(1);
            (*ctxt).neg = ((*ctxt).neg == 0) as std::os::raw::c_int;
            xmlFAParsePosCharGroup(ctxt);
            (*ctxt).neg = neg
        } else if *(*ctxt).cur as std::os::raw::c_int == '-' as i32 &&
                      *(*ctxt).cur.offset(1 as std::os::raw::c_int as isize) as
                          std::os::raw::c_int == '[' as i32 {
            let mut neg_0: std::os::raw::c_int = (*ctxt).neg;
            (*ctxt).neg = 2 as std::os::raw::c_int;
            (*ctxt).cur = (*ctxt).cur.offset(1);
            (*ctxt).cur = (*ctxt).cur.offset(1);
            xmlFAParseCharGroup(ctxt);
            if *(*ctxt).cur as std::os::raw::c_int == ']' as i32 {
                (*ctxt).cur = (*ctxt).cur.offset(1);
                (*ctxt).neg = neg_0;
                break ;
            } else {
                (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
                xmlRegexpErrCompile(ctxt,
                                    b"charClassExpr: \']\' expected\x00" as
                                        *const u8 as *const std::os::raw::c_char);
                break ;
            }
        } else if *(*ctxt).cur as std::os::raw::c_int != ']' as i32 {
            xmlFAParsePosCharGroup(ctxt);
        }
    }
    (*ctxt).neg = n;
}
/* *
 * xmlFAParseCharClass:
 * @ctxt:  a regexp parser context
 *
 * [11]   charClass   ::=     charClassEsc | charClassExpr
 * [12]   charClassExpr   ::=   '[' charGroup ']'
 */
unsafe extern "C" fn xmlFAParseCharClass(mut ctxt: xmlRegParserCtxtPtr) {
    if *(*ctxt).cur as std::os::raw::c_int == '[' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        (*ctxt).atom = xmlRegNewAtom(ctxt, XML_REGEXP_RANGES);
        if (*ctxt).atom.is_null() { return }
        xmlFAParseCharGroup(ctxt);
        if *(*ctxt).cur as std::os::raw::c_int == ']' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"xmlFAParseCharClass: \']\' expected\x00" as
                                    *const u8 as *const std::os::raw::c_char);
        }
    } else { xmlFAParseCharClassEsc(ctxt); };
}
/* *
 * xmlFAParseQuantExact:
 * @ctxt:  a regexp parser context
 *
 * [8]   QuantExact   ::=   [0-9]+
 *
 * Returns 0 if success or -1 in case of error
 */
unsafe extern "C" fn xmlFAParseQuantExact(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut ok: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while *(*ctxt).cur as std::os::raw::c_int >= '0' as i32 &&
              *(*ctxt).cur as std::os::raw::c_int <= '9' as i32 {
        ret =
            ret * 10 as std::os::raw::c_int +
                (*(*ctxt).cur as std::os::raw::c_int - '0' as i32);
        ok = 1 as std::os::raw::c_int;
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    if ok != 1 as std::os::raw::c_int { return -(1 as std::os::raw::c_int) }
    return ret;
}
/* *
 * xmlFAParseQuantifier:
 * @ctxt:  a regexp parser context
 *
 * [4]   quantifier   ::=   [?*+] | ( '{' quantity '}' )
 * [5]   quantity   ::=   quantRange | quantMin | QuantExact
 * [6]   quantRange   ::=   QuantExact ',' QuantExact
 * [7]   quantMin   ::=   QuantExact ','
 * [8]   QuantExact   ::=   [0-9]+
 */
unsafe extern "C" fn xmlFAParseQuantifier(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut cur: std::os::raw::c_int = 0;
    cur = *(*ctxt).cur as std::os::raw::c_int;
    if cur == '?' as i32 || cur == '*' as i32 || cur == '+' as i32 {
        if !(*ctxt).atom.is_null() {
            if cur == '?' as i32 {
                (*(*ctxt).atom).quant = XML_REGEXP_QUANT_OPT
            } else if cur == '*' as i32 {
                (*(*ctxt).atom).quant = XML_REGEXP_QUANT_MULT
            } else if cur == '+' as i32 {
                (*(*ctxt).atom).quant = XML_REGEXP_QUANT_PLUS
            }
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        return 1 as std::os::raw::c_int
    }
    if cur == '{' as i32 {
        let mut min: std::os::raw::c_int = 0 as std::os::raw::c_int;
        let mut max: std::os::raw::c_int = 0 as std::os::raw::c_int;
        (*ctxt).cur = (*ctxt).cur.offset(1);
        cur = xmlFAParseQuantExact(ctxt);
        if cur >= 0 as std::os::raw::c_int { min = cur }
        if *(*ctxt).cur as std::os::raw::c_int == ',' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            if *(*ctxt).cur as std::os::raw::c_int == '}' as i32 {
                max = 2147483647 as std::os::raw::c_int
            } else {
                cur = xmlFAParseQuantExact(ctxt);
                if cur >= 0 as std::os::raw::c_int {
                    max = cur
                } else {
                    (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
                    xmlRegexpErrCompile(ctxt,
                                        b"Improper quantifier\x00" as
                                            *const u8 as *const std::os::raw::c_char);
                }
            }
        }
        if *(*ctxt).cur as std::os::raw::c_int == '}' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        } else {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"Unterminated quantifier\x00" as *const u8 as
                                    *const std::os::raw::c_char);
        }
        if max == 0 as std::os::raw::c_int { max = min }
        if !(*ctxt).atom.is_null() {
            (*(*ctxt).atom).quant = XML_REGEXP_QUANT_RANGE;
            (*(*ctxt).atom).min = min;
            (*(*ctxt).atom).max = max
        }
        return 1 as std::os::raw::c_int
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlFAParseAtom:
 * @ctxt:  a regexp parser context
 *
 * [9]   atom   ::=   Char | charClass | ( '(' regExp ')' )
 */
unsafe extern "C" fn xmlFAParseAtom(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut codepoint: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    codepoint = xmlFAIsChar(ctxt);
    if codepoint > 0 as std::os::raw::c_int {
        (*ctxt).atom = xmlRegNewAtom(ctxt, XML_REGEXP_CHARVAL);
        if (*ctxt).atom.is_null() { return -(1 as std::os::raw::c_int) }
        codepoint =
            xmlStringCurrentChar(0 as xmlParserCtxtPtr, (*ctxt).cur,
                                 &mut len);
        (*(*ctxt).atom).codepoint = codepoint;
        (*ctxt).cur = (*ctxt).cur.offset(len as isize);
        return 1 as std::os::raw::c_int
    } else {
        if *(*ctxt).cur as std::os::raw::c_int == '|' as i32 {
            return 0 as std::os::raw::c_int
        } else {
            if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
                return 0 as std::os::raw::c_int
            } else {
                if *(*ctxt).cur as std::os::raw::c_int == ')' as i32 {
                    return 0 as std::os::raw::c_int
                } else {
                    if *(*ctxt).cur as std::os::raw::c_int == '(' as i32 {
                        let mut start: xmlRegStatePtr = 0 as *mut xmlRegState;
                        let mut oldend: xmlRegStatePtr =
                            0 as *mut xmlRegState;
                        let mut start0: xmlRegStatePtr =
                            0 as *mut xmlRegState;
                        (*ctxt).cur = (*ctxt).cur.offset(1);
                        /*
	 * this extra Epsilon transition is needed if we count with 0 allowed
	 * unfortunately this can't be known at that point
	 */
                        xmlFAGenerateEpsilonTransition(ctxt, (*ctxt).state,
                                                       0 as xmlRegStatePtr);
                        start0 = (*ctxt).state;
                        xmlFAGenerateEpsilonTransition(ctxt, (*ctxt).state,
                                                       0 as xmlRegStatePtr);
                        start = (*ctxt).state;
                        oldend = (*ctxt).end;
                        (*ctxt).end = 0 as xmlRegStatePtr;
                        (*ctxt).atom = 0 as xmlRegAtomPtr;
                        xmlFAParseRegExp(ctxt, 0 as std::os::raw::c_int);
                        if *(*ctxt).cur as std::os::raw::c_int == ')' as i32 {
                            (*ctxt).cur = (*ctxt).cur.offset(1)
                        } else {
                            (*ctxt).error =
                                XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
                            xmlRegexpErrCompile(ctxt,
                                                b"xmlFAParseAtom: expecting \')\'\x00"
                                                    as *const u8 as
                                                    *const std::os::raw::c_char);
                        }
                        (*ctxt).atom = xmlRegNewAtom(ctxt, XML_REGEXP_SUBREG);
                        if (*ctxt).atom.is_null() {
                            return -(1 as std::os::raw::c_int)
                        }
                        (*(*ctxt).atom).start = start;
                        (*(*ctxt).atom).start0 = start0;
                        (*(*ctxt).atom).stop = (*ctxt).state;
                        (*ctxt).end = oldend;
                        return 1 as std::os::raw::c_int
                    } else {
                        if *(*ctxt).cur as std::os::raw::c_int == '[' as i32 ||
                               *(*ctxt).cur as std::os::raw::c_int == '\\' as i32 ||
                               *(*ctxt).cur as std::os::raw::c_int == '.' as i32 {
                            xmlFAParseCharClass(ctxt);
                            return 1 as std::os::raw::c_int
                        }
                    }
                }
            }
        }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlFAParsePiece:
 * @ctxt:  a regexp parser context
 *
 * [3]   piece   ::=   atom quantifier?
 */
unsafe extern "C" fn xmlFAParsePiece(mut ctxt: xmlRegParserCtxtPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0;
    (*ctxt).atom = 0 as xmlRegAtomPtr;
    ret = xmlFAParseAtom(ctxt);
    if ret == 0 as std::os::raw::c_int { return 0 as std::os::raw::c_int }
    if (*ctxt).atom.is_null() {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"internal: no atom generated\x00" as *const u8 as
                                *const std::os::raw::c_char);
    }
    xmlFAParseQuantifier(ctxt);
    return 1 as std::os::raw::c_int;
}
/* *
 * xmlFAParseBranch:
 * @ctxt:  a regexp parser context
 * @to: optional target to the end of the branch
 *
 * @to is used to optimize by removing duplicate path in automata
 * in expressions like (a|b)(c|d)
 *
 * [2]   branch   ::=   piece*
 */
unsafe extern "C" fn xmlFAParseBranch(mut ctxt: xmlRegParserCtxtPtr,
                                      mut to: xmlRegStatePtr) -> std::os::raw::c_int {
    let mut previous: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut ret: std::os::raw::c_int = 0;
    previous = (*ctxt).state;
    ret = xmlFAParsePiece(ctxt);
    if ret != 0 as std::os::raw::c_int {
        if xmlFAGenerateTransitions(ctxt, previous,
                                    (if *(*ctxt).cur as std::os::raw::c_int ==
                                            '|' as i32 ||
                                            *(*ctxt).cur as std::os::raw::c_int ==
                                                ')' as i32 {
                                         to
                                     } else { 0 as xmlRegStatePtr }),
                                    (*ctxt).atom) < 0 as std::os::raw::c_int {
            return -(1 as std::os::raw::c_int)
        }
        previous = (*ctxt).state;
        (*ctxt).atom = 0 as xmlRegAtomPtr
    }
    while ret != 0 as std::os::raw::c_int && (*ctxt).error == 0 as std::os::raw::c_int {
        ret = xmlFAParsePiece(ctxt);
        if ret != 0 as std::os::raw::c_int {
            if xmlFAGenerateTransitions(ctxt, previous,
                                        (if *(*ctxt).cur as std::os::raw::c_int ==
                                                '|' as i32 ||
                                                *(*ctxt).cur as std::os::raw::c_int ==
                                                    ')' as i32 {
                                             to
                                         } else { 0 as xmlRegStatePtr }),
                                        (*ctxt).atom) < 0 as std::os::raw::c_int {
                return -(1 as std::os::raw::c_int)
            }
            previous = (*ctxt).state;
            (*ctxt).atom = 0 as xmlRegAtomPtr
        }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlFAParseRegExp:
 * @ctxt:  a regexp parser context
 * @top:  is this the top-level expression ?
 *
 * [1]   regExp   ::=     branch  ( '|' branch )*
 */
unsafe extern "C" fn xmlFAParseRegExp(mut ctxt: xmlRegParserCtxtPtr,
                                      mut top: std::os::raw::c_int) {
    let mut start: xmlRegStatePtr = 0 as *mut xmlRegState;
    let mut end: xmlRegStatePtr = 0 as *mut xmlRegState;
    /* if not top start should have been generated by an epsilon trans */
    start = (*ctxt).state;
    (*ctxt).end = 0 as xmlRegStatePtr;
    xmlFAParseBranch(ctxt, 0 as xmlRegStatePtr);
    if top != 0 { (*(*ctxt).state).type_0 = XML_REGEXP_FINAL_STATE }
    if *(*ctxt).cur as std::os::raw::c_int != '|' as i32 {
        (*ctxt).end = (*ctxt).state;
        return
    }
    end = (*ctxt).state;
    while *(*ctxt).cur as std::os::raw::c_int == '|' as i32 &&
              (*ctxt).error == 0 as std::os::raw::c_int {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        if *(*ctxt).cur as std::os::raw::c_int == 0 as std::os::raw::c_int {
            (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
            xmlRegexpErrCompile(ctxt,
                                b"expecting a branch after |\x00" as *const u8
                                    as *const std::os::raw::c_char);
            return
        }
        (*ctxt).state = start;
        (*ctxt).end = 0 as xmlRegStatePtr;
        xmlFAParseBranch(ctxt, end);
    }
    if top == 0 { (*ctxt).state = end; (*ctxt).end = end };
}
/* ***********************************************************************
 *									*
 *			The basic API					*
 *									*
 ************************************************************************/
/* *
 * xmlRegexpPrint:
 * @output: the file for the output debug
 * @regexp: the compiled regexp
 *
 * Print the content of the compiled regular expression
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegexpPrint(mut output: *mut FILE,
                                        mut regexp: xmlRegexpPtr) {
    let mut i: std::os::raw::c_int = 0;
    if output.is_null() { return }
    fprintf(output, b" regexp: \x00" as *const u8 as *const std::os::raw::c_char);
    if regexp.is_null() {
        fprintf(output, b"NULL\n\x00" as *const u8 as *const std::os::raw::c_char);
        return
    }
    fprintf(output, b"\'%s\' \x00" as *const u8 as *const std::os::raw::c_char,
            (*regexp).string);
    fprintf(output, b"\n\x00" as *const u8 as *const std::os::raw::c_char);
    fprintf(output, b"%d atoms:\n\x00" as *const u8 as *const std::os::raw::c_char,
            (*regexp).nbAtoms);
    i = 0 as std::os::raw::c_int;
    while i < (*regexp).nbAtoms {
        fprintf(output, b" %02d \x00" as *const u8 as *const std::os::raw::c_char, i);
        xmlRegPrintAtom(output, *(*regexp).atoms.offset(i as isize));
        i += 1
    }
    fprintf(output, b"%d states:\x00" as *const u8 as *const std::os::raw::c_char,
            (*regexp).nbStates);
    fprintf(output, b"\n\x00" as *const u8 as *const std::os::raw::c_char);
    i = 0 as std::os::raw::c_int;
    while i < (*regexp).nbStates {
        xmlRegPrintState(output, *(*regexp).states.offset(i as isize));
        i += 1
    }
    fprintf(output, b"%d counters:\n\x00" as *const u8 as *const std::os::raw::c_char,
            (*regexp).nbCounters);
    i = 0 as std::os::raw::c_int;
    while i < (*regexp).nbCounters {
        fprintf(output,
                b" %d: min %d max %d\n\x00" as *const u8 as
                    *const std::os::raw::c_char, i,
                (*(*regexp).counters.offset(i as isize)).min,
                (*(*regexp).counters.offset(i as isize)).max);
        i += 1
    };
}
/* *
 * xmlRegexpCompile:
 * @regexp:  a regular expression string
 *
 * Parses a regular expression conforming to XML Schemas Part 2 Datatype
 * Appendix F and builds an automata suitable for testing strings against
 * that regular expression
 *
 * Returns the compiled expression or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegexpCompile(mut regexp: *const xmlChar)
 -> xmlRegexpPtr {
    let mut ret: xmlRegexpPtr = 0 as *mut xmlRegexp;
    let mut ctxt: xmlRegParserCtxtPtr = 0 as *mut xmlRegParserCtxt;
    ctxt = xmlRegNewParserCtxt(regexp);
    if ctxt.is_null() { return 0 as xmlRegexpPtr }
    /* initialize the parser */
    (*ctxt).end = 0 as xmlRegStatePtr;
    (*ctxt).state = xmlRegNewState(ctxt);
    (*ctxt).start = (*ctxt).state;
    xmlRegStatePush(ctxt, (*ctxt).start);
    /* parse the expression building an automata */
    xmlFAParseRegExp(ctxt, 1 as std::os::raw::c_int);
    if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
        (*ctxt).error = XML_REGEXP_COMPILE_ERROR as std::os::raw::c_int;
        xmlRegexpErrCompile(ctxt,
                            b"xmlFAParseRegExp: extra characters\x00" as
                                *const u8 as *const std::os::raw::c_char);
    }
    if (*ctxt).error != 0 as std::os::raw::c_int {
        xmlRegFreeParserCtxt(ctxt);
        return 0 as xmlRegexpPtr
    }
    (*ctxt).end = (*ctxt).state;
    (*(*ctxt).start).type_0 = XML_REGEXP_START_STATE;
    (*(*ctxt).end).type_0 = XML_REGEXP_FINAL_STATE;
    /* remove the Epsilon except for counted transitions */
    xmlFAEliminateEpsilonTransitions(ctxt);
    if (*ctxt).error != 0 as std::os::raw::c_int {
        xmlRegFreeParserCtxt(ctxt);
        return 0 as xmlRegexpPtr
    }
    ret = xmlRegEpxFromParse(ctxt);
    xmlRegFreeParserCtxt(ctxt);
    return ret;
}
/* *
 * xmlRegexpExec:
 * @comp:  the compiled regular expression
 * @content:  the value to check against the regular expression
 *
 * Check if the regular expression generates the value
 *
 * Returns 1 if it matches, 0 if not and a negative value in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegexpExec(mut comp: xmlRegexpPtr,
                                       mut content: *const xmlChar)
 -> std::os::raw::c_int {
    if comp.is_null() || content.is_null() { return -(1 as std::os::raw::c_int) }
    return xmlFARegExec(comp, content);
}
/* *
 * xmlRegexpIsDeterminist:
 * @comp:  the compiled regular expression
 *
 * Check if the regular expression is determinist
 *
 * Returns 1 if it yes, 0 if not and a negative value in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegexpIsDeterminist(mut comp: xmlRegexpPtr)
 -> std::os::raw::c_int {
    let mut am: xmlAutomataPtr = 0 as *mut xmlAutomata;
    let mut ret: std::os::raw::c_int = 0;
    if comp.is_null() { return -(1 as std::os::raw::c_int) }
    if (*comp).determinist != -(1 as std::os::raw::c_int) {
        return (*comp).determinist
    }
    am = xmlNewAutomata();
    if !(*am).states.is_null() {
        let mut i: std::os::raw::c_int = 0;
        i = 0 as std::os::raw::c_int;
        while i < (*am).nbStates {
            xmlRegFreeState(*(*am).states.offset(i as isize));
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*am).states as
                                                        *mut std::os::raw::c_void);
    }
    (*am).nbAtoms = (*comp).nbAtoms;
    (*am).atoms = (*comp).atoms;
    (*am).nbStates = (*comp).nbStates;
    (*am).states = (*comp).states;
    (*am).determinist = -(1 as std::os::raw::c_int);
    (*am).flags = (*comp).flags;
    ret = xmlFAComputesDeterminism(am);
    (*am).atoms = 0 as *mut xmlRegAtomPtr;
    (*am).states = 0 as *mut xmlRegStatePtr;
    xmlFreeAutomata(am);
    (*comp).determinist = ret;
    return ret;
}
/* *
 * xmlRegFreeRegexp:
 * @regexp:  the regexp
 *
 * Free a regexp
 */
#[no_mangle]
pub unsafe extern "C" fn xmlRegFreeRegexp(mut regexp: xmlRegexpPtr) {
    let mut i: std::os::raw::c_int = 0;
    if regexp.is_null() { return }
    if !(*regexp).string.is_null() {
        xmlFree.expect("non-null function pointer")((*regexp).string as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).states.is_null() {
        i = 0 as std::os::raw::c_int;
        while i < (*regexp).nbStates {
            xmlRegFreeState(*(*regexp).states.offset(i as isize));
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*regexp).states as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).atoms.is_null() {
        i = 0 as std::os::raw::c_int;
        while i < (*regexp).nbAtoms {
            xmlRegFreeAtom(*(*regexp).atoms.offset(i as isize));
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*regexp).atoms as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).counters.is_null() {
        xmlFree.expect("non-null function pointer")((*regexp).counters as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).compact.is_null() {
        xmlFree.expect("non-null function pointer")((*regexp).compact as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).transdata.is_null() {
        xmlFree.expect("non-null function pointer")((*regexp).transdata as
                                                        *mut std::os::raw::c_void);
    }
    if !(*regexp).stringMap.is_null() {
        i = 0 as std::os::raw::c_int;
        while i < (*regexp).nbstrings {
            xmlFree.expect("non-null function pointer")(*(*regexp).stringMap.offset(i
                                                                                        as
                                                                                        isize)
                                                            as
                                                            *mut std::os::raw::c_void);
            i += 1
        }
        xmlFree.expect("non-null function pointer")((*regexp).stringMap as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(regexp as *mut std::os::raw::c_void);
}
/* ***********************************************************************
 *									*
 *			The Automata interface				*
 *									*
 ************************************************************************/
/* *
 * xmlNewAutomata:
 *
 * Create a new automata
 *
 * Returns the new object or NULL in case of failure
 */
#[no_mangle]
pub unsafe extern "C" fn xmlNewAutomata() -> xmlAutomataPtr {
    let mut ctxt: xmlAutomataPtr = 0 as *mut xmlAutomata;
    ctxt = xmlRegNewParserCtxt(0 as *const xmlChar);
    if ctxt.is_null() { return 0 as xmlAutomataPtr }
    /* initialize the parser */
    (*ctxt).end = 0 as xmlRegStatePtr;
    (*ctxt).state = xmlRegNewState(ctxt);
    (*ctxt).start = (*ctxt).state;
    if (*ctxt).start.is_null() {
        xmlFreeAutomata(ctxt);
        return 0 as xmlAutomataPtr
    }
    (*(*ctxt).start).type_0 = XML_REGEXP_START_STATE;
    if xmlRegStatePush(ctxt, (*ctxt).start) < 0 as std::os::raw::c_int {
        xmlRegFreeState((*ctxt).start);
        xmlFreeAutomata(ctxt);
        return 0 as xmlAutomataPtr
    }
    (*ctxt).flags = 0 as std::os::raw::c_int;
    return ctxt;
}
/* *
 * xmlFreeAutomata:
 * @am: an automata
 *
 * Free an automata
 */
#[no_mangle]
pub unsafe extern "C" fn xmlFreeAutomata(mut am: xmlAutomataPtr) {
    if am.is_null() { return }
    xmlRegFreeParserCtxt(am);
}
/* *
 * xmlAutomataSetFlags:
 * @am: an automata
 * @flags:  a set of internal flags
 *
 * Set some flags on the automata
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataSetFlags(mut am: xmlAutomataPtr,
                                             mut flags: std::os::raw::c_int) {
    if am.is_null() { return }
    (*am).flags |= flags;
}
/* *
 * xmlAutomataGetInitState:
 * @am: an automata
 *
 * Initial state lookup
 *
 * Returns the initial state of the automata
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataGetInitState(mut am: xmlAutomataPtr)
 -> xmlAutomataStatePtr {
    if am.is_null() { return 0 as xmlAutomataStatePtr }
    return (*am).start;
}
/* *
 * xmlAutomataSetFinalState:
 * @am: an automata
 * @state: a state in this automata
 *
 * Makes that state a final state
 *
 * Returns 0 or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataSetFinalState(mut am: xmlAutomataPtr,
                                                  mut state:
                                                      xmlAutomataStatePtr)
 -> std::os::raw::c_int {
    if am.is_null() || state.is_null() { return -(1 as std::os::raw::c_int) }
    (*state).type_0 = XML_REGEXP_FINAL_STATE;
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlAutomataNewTransition:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the input string associated to that transition
 * @data: data passed to the callback function if the transition is activated
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by the value of @token
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewTransition(mut am: xmlAutomataPtr,
                                                  mut from:
                                                      xmlAutomataStatePtr,
                                                  mut to: xmlAutomataStatePtr,
                                                  mut token: *const xmlChar,
                                                  mut data: *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    (*atom).data = data;
    (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void;
    if xmlFAGenerateTransitions(am, from, to, atom) < 0 as std::os::raw::c_int {
        xmlRegFreeAtom(atom);
        return 0 as xmlAutomataStatePtr
    }
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewTransition2:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the first input string associated to that transition
 * @token2: the second input string associated to that transition
 * @data: data passed to the callback function if the transition is activated
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by the value of @token
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewTransition2(mut am: xmlAutomataPtr,
                                                   mut from:
                                                       xmlAutomataStatePtr,
                                                   mut to:
                                                       xmlAutomataStatePtr,
                                                   mut token: *const xmlChar,
                                                   mut token2: *const xmlChar,
                                                   mut data:
                                                       *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    (*atom).data = data;
    if token2.is_null() || *token2 as std::os::raw::c_int == 0 as std::os::raw::c_int {
        (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void
    } else {
        let mut lenn: std::os::raw::c_int = 0;
        let mut lenp: std::os::raw::c_int = 0;
        let mut str: *mut xmlChar = 0 as *mut xmlChar;
        lenn = strlen(token2 as *mut std::os::raw::c_char) as std::os::raw::c_int;
        lenp = strlen(token as *mut std::os::raw::c_char) as std::os::raw::c_int;
        str =
            xmlMallocAtomic.expect("non-null function pointer")((lenn + lenp +
                                                                     2 as
                                                                         std::os::raw::c_int)
                                                                    as size_t)
                as *mut xmlChar;
        if str.is_null() {
            xmlRegFreeAtom(atom);
            return 0 as xmlAutomataStatePtr
        }
        memcpy(&mut *str.offset(0 as std::os::raw::c_int as isize) as *mut xmlChar as
                   *mut std::os::raw::c_void, token as *const std::os::raw::c_void,
               lenp as std::os::raw::c_ulong);
        *str.offset(lenp as isize) = '|' as i32 as xmlChar;
        memcpy(&mut *str.offset((lenp + 1 as std::os::raw::c_int) as isize) as
                   *mut xmlChar as *mut std::os::raw::c_void,
               token2 as *const std::os::raw::c_void, lenn as std::os::raw::c_ulong);
        *str.offset((lenn + lenp + 1 as std::os::raw::c_int) as isize) =
            0 as std::os::raw::c_int as xmlChar;
        (*atom).valuep = str as *mut std::os::raw::c_void
    }
    if xmlFAGenerateTransitions(am, from, to, atom) < 0 as std::os::raw::c_int {
        xmlRegFreeAtom(atom);
        return 0 as xmlAutomataStatePtr
    }
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewNegTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the first input string associated to that transition
 * @token2: the second input string associated to that transition
 * @data: data passed to the callback function if the transition is activated
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by any value except (@token,@token2)
 * Note that if @token2 is not NULL, then (X, NULL) won't match to follow
 # the semantic of XSD ##other
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewNegTrans(mut am: xmlAutomataPtr,
                                                mut from: xmlAutomataStatePtr,
                                                mut to: xmlAutomataStatePtr,
                                                mut token: *const xmlChar,
                                                mut token2: *const xmlChar,
                                                mut data: *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut err_msg: [xmlChar; 200] = [0; 200];
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    (*atom).data = data;
    (*atom).neg = 1 as std::os::raw::c_int;
    if token2.is_null() || *token2 as std::os::raw::c_int == 0 as std::os::raw::c_int {
        (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void
    } else {
        let mut lenn: std::os::raw::c_int = 0;
        let mut lenp: std::os::raw::c_int = 0;
        let mut str: *mut xmlChar = 0 as *mut xmlChar;
        lenn = strlen(token2 as *mut std::os::raw::c_char) as std::os::raw::c_int;
        lenp = strlen(token as *mut std::os::raw::c_char) as std::os::raw::c_int;
        str =
            xmlMallocAtomic.expect("non-null function pointer")((lenn + lenp +
                                                                     2 as
                                                                         std::os::raw::c_int)
                                                                    as size_t)
                as *mut xmlChar;
        if str.is_null() {
            xmlRegFreeAtom(atom);
            return 0 as xmlAutomataStatePtr
        }
        memcpy(&mut *str.offset(0 as std::os::raw::c_int as isize) as *mut xmlChar as
                   *mut std::os::raw::c_void, token as *const std::os::raw::c_void,
               lenp as std::os::raw::c_ulong);
        *str.offset(lenp as isize) = '|' as i32 as xmlChar;
        memcpy(&mut *str.offset((lenp + 1 as std::os::raw::c_int) as isize) as
                   *mut xmlChar as *mut std::os::raw::c_void,
               token2 as *const std::os::raw::c_void, lenn as std::os::raw::c_ulong);
        *str.offset((lenn + lenp + 1 as std::os::raw::c_int) as isize) =
            0 as std::os::raw::c_int as xmlChar;
        (*atom).valuep = str as *mut std::os::raw::c_void
    }
    snprintf(err_msg.as_mut_ptr() as *mut std::os::raw::c_char,
             199 as std::os::raw::c_int as std::os::raw::c_ulong,
             b"not %s\x00" as *const u8 as *const std::os::raw::c_char,
             (*atom).valuep as *const std::os::raw::c_char);
    err_msg[199 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as xmlChar;
    (*atom).valuep2 = xmlStrdup(err_msg.as_mut_ptr()) as *mut std::os::raw::c_void;
    if xmlFAGenerateTransitions(am, from, to, atom) < 0 as std::os::raw::c_int {
        xmlRegFreeAtom(atom);
        return 0 as xmlAutomataStatePtr
    }
    (*am).negs += 1;
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewCountTrans2:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the input string associated to that transition
 * @token2: the second input string associated to that transition
 * @min:  the minimum successive occurences of token
 * @max:  the maximum successive occurences of token
 * @data:  data associated to the transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by a succession of input of value @token and @token2 and
 * whose number is between @min and @max
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewCountTrans2(mut am: xmlAutomataPtr,
                                                   mut from:
                                                       xmlAutomataStatePtr,
                                                   mut to:
                                                       xmlAutomataStatePtr,
                                                   mut token: *const xmlChar,
                                                   mut token2: *const xmlChar,
                                                   mut min: std::os::raw::c_int,
                                                   mut max: std::os::raw::c_int,
                                                   mut data:
                                                       *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut counter: std::os::raw::c_int = 0;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    if min < 0 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    if max < min || max < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    if token2.is_null() || *token2 as std::os::raw::c_int == 0 as std::os::raw::c_int {
        (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void
    } else {
        let mut lenn: std::os::raw::c_int = 0;
        let mut lenp: std::os::raw::c_int = 0;
        let mut str: *mut xmlChar = 0 as *mut xmlChar;
        lenn = strlen(token2 as *mut std::os::raw::c_char) as std::os::raw::c_int;
        lenp = strlen(token as *mut std::os::raw::c_char) as std::os::raw::c_int;
        str =
            xmlMallocAtomic.expect("non-null function pointer")((lenn + lenp +
                                                                     2 as
                                                                         std::os::raw::c_int)
                                                                    as size_t)
                as *mut xmlChar;
        if str.is_null() {
            xmlRegFreeAtom(atom);
            return 0 as xmlAutomataStatePtr
        }
        memcpy(&mut *str.offset(0 as std::os::raw::c_int as isize) as *mut xmlChar as
                   *mut std::os::raw::c_void, token as *const std::os::raw::c_void,
               lenp as std::os::raw::c_ulong);
        *str.offset(lenp as isize) = '|' as i32 as xmlChar;
        memcpy(&mut *str.offset((lenp + 1 as std::os::raw::c_int) as isize) as
                   *mut xmlChar as *mut std::os::raw::c_void,
               token2 as *const std::os::raw::c_void, lenn as std::os::raw::c_ulong);
        *str.offset((lenn + lenp + 1 as std::os::raw::c_int) as isize) =
            0 as std::os::raw::c_int as xmlChar;
        (*atom).valuep = str as *mut std::os::raw::c_void
    }
    (*atom).data = data;
    if min == 0 as std::os::raw::c_int {
        (*atom).min = 1 as std::os::raw::c_int
    } else { (*atom).min = min }
    (*atom).max = max;
    /*
     * associate a counter to the transition.
     */
    counter = xmlRegGetCounter(am);
    (*(*am).counters.offset(counter as isize)).min = min;
    (*(*am).counters.offset(counter as isize)).max = max;
    /* xmlFAGenerateTransitions(am, from, to, atom); */
    if to.is_null() { to = xmlRegNewState(am); xmlRegStatePush(am, to); }
    xmlRegStateAddTrans(am, from, atom, to, counter, -(1 as std::os::raw::c_int));
    xmlRegAtomPush(am, atom);
    (*am).state = to;
    if to.is_null() { to = (*am).state }
    if to.is_null() { return 0 as xmlAutomataStatePtr }
    if min == 0 as std::os::raw::c_int {
        xmlFAGenerateEpsilonTransition(am, from, to);
    }
    return to;
}
/* *
 * xmlAutomataNewCountTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the input string associated to that transition
 * @min:  the minimum successive occurences of token
 * @max:  the maximum successive occurences of token
 * @data:  data associated to the transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by a succession of input of value @token and whose number
 * is between @min and @max
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewCountTrans(mut am: xmlAutomataPtr,
                                                  mut from:
                                                      xmlAutomataStatePtr,
                                                  mut to: xmlAutomataStatePtr,
                                                  mut token: *const xmlChar,
                                                  mut min: std::os::raw::c_int,
                                                  mut max: std::os::raw::c_int,
                                                  mut data: *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut counter: std::os::raw::c_int = 0;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    if min < 0 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    if max < min || max < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void;
    (*atom).data = data;
    if min == 0 as std::os::raw::c_int {
        (*atom).min = 1 as std::os::raw::c_int
    } else { (*atom).min = min }
    (*atom).max = max;
    /*
     * associate a counter to the transition.
     */
    counter = xmlRegGetCounter(am);
    (*(*am).counters.offset(counter as isize)).min = min;
    (*(*am).counters.offset(counter as isize)).max = max;
    /* xmlFAGenerateTransitions(am, from, to, atom); */
    if to.is_null() { to = xmlRegNewState(am); xmlRegStatePush(am, to); }
    xmlRegStateAddTrans(am, from, atom, to, counter, -(1 as std::os::raw::c_int));
    xmlRegAtomPush(am, atom);
    (*am).state = to;
    if to.is_null() { to = (*am).state }
    if to.is_null() { return 0 as xmlAutomataStatePtr }
    if min == 0 as std::os::raw::c_int {
        xmlFAGenerateEpsilonTransition(am, from, to);
    }
    return to;
}
/* *
 * xmlAutomataNewOnceTrans2:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the input string associated to that transition
 * @token2: the second input string associated to that transition
 * @min:  the minimum successive occurences of token
 * @max:  the maximum successive occurences of token
 * @data:  data associated to the transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by a succession of input of value @token and @token2 and whose
 * number is between @min and @max, moreover that transition can only be
 * crossed once.
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewOnceTrans2(mut am: xmlAutomataPtr,
                                                  mut from:
                                                      xmlAutomataStatePtr,
                                                  mut to: xmlAutomataStatePtr,
                                                  mut token: *const xmlChar,
                                                  mut token2: *const xmlChar,
                                                  mut min: std::os::raw::c_int,
                                                  mut max: std::os::raw::c_int,
                                                  mut data: *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut counter: std::os::raw::c_int = 0;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    if min < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    if max < min || max < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    if token2.is_null() || *token2 as std::os::raw::c_int == 0 as std::os::raw::c_int {
        (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void
    } else {
        let mut lenn: std::os::raw::c_int = 0;
        let mut lenp: std::os::raw::c_int = 0;
        let mut str: *mut xmlChar = 0 as *mut xmlChar;
        lenn = strlen(token2 as *mut std::os::raw::c_char) as std::os::raw::c_int;
        lenp = strlen(token as *mut std::os::raw::c_char) as std::os::raw::c_int;
        str =
            xmlMallocAtomic.expect("non-null function pointer")((lenn + lenp +
                                                                     2 as
                                                                         std::os::raw::c_int)
                                                                    as size_t)
                as *mut xmlChar;
        if str.is_null() {
            xmlRegFreeAtom(atom);
            return 0 as xmlAutomataStatePtr
        }
        memcpy(&mut *str.offset(0 as std::os::raw::c_int as isize) as *mut xmlChar as
                   *mut std::os::raw::c_void, token as *const std::os::raw::c_void,
               lenp as std::os::raw::c_ulong);
        *str.offset(lenp as isize) = '|' as i32 as xmlChar;
        memcpy(&mut *str.offset((lenp + 1 as std::os::raw::c_int) as isize) as
                   *mut xmlChar as *mut std::os::raw::c_void,
               token2 as *const std::os::raw::c_void, lenn as std::os::raw::c_ulong);
        *str.offset((lenn + lenp + 1 as std::os::raw::c_int) as isize) =
            0 as std::os::raw::c_int as xmlChar;
        (*atom).valuep = str as *mut std::os::raw::c_void
    }
    (*atom).data = data;
    (*atom).quant = XML_REGEXP_QUANT_ONCEONLY;
    (*atom).min = min;
    (*atom).max = max;
    /*
     * associate a counter to the transition.
     */
    counter = xmlRegGetCounter(am);
    (*(*am).counters.offset(counter as isize)).min = 1 as std::os::raw::c_int;
    (*(*am).counters.offset(counter as isize)).max = 1 as std::os::raw::c_int;
    /* xmlFAGenerateTransitions(am, from, to, atom); */
    if to.is_null() { to = xmlRegNewState(am); xmlRegStatePush(am, to); }
    xmlRegStateAddTrans(am, from, atom, to, counter, -(1 as std::os::raw::c_int));
    xmlRegAtomPush(am, atom);
    (*am).state = to;
    return to;
}
/* *
 * xmlAutomataNewOnceTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @token: the input string associated to that transition
 * @min:  the minimum successive occurences of token
 * @max:  the maximum successive occurences of token
 * @data:  data associated to the transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a transition from the @from state to the target state
 * activated by a succession of input of value @token and whose number
 * is between @min and @max, moreover that transition can only be crossed
 * once.
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewOnceTrans(mut am: xmlAutomataPtr,
                                                 mut from:
                                                     xmlAutomataStatePtr,
                                                 mut to: xmlAutomataStatePtr,
                                                 mut token: *const xmlChar,
                                                 mut min: std::os::raw::c_int,
                                                 mut max: std::os::raw::c_int,
                                                 mut data: *mut std::os::raw::c_void)
 -> xmlAutomataStatePtr {
    let mut atom: xmlRegAtomPtr = 0 as *mut xmlRegAtom;
    let mut counter: std::os::raw::c_int = 0;
    if am.is_null() || from.is_null() || token.is_null() {
        return 0 as xmlAutomataStatePtr
    }
    if min < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    if max < min || max < 1 as std::os::raw::c_int { return 0 as xmlAutomataStatePtr }
    atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
    if atom.is_null() { return 0 as xmlAutomataStatePtr }
    (*atom).valuep = xmlStrdup(token) as *mut std::os::raw::c_void;
    (*atom).data = data;
    (*atom).quant = XML_REGEXP_QUANT_ONCEONLY;
    (*atom).min = min;
    (*atom).max = max;
    /*
     * associate a counter to the transition.
     */
    counter = xmlRegGetCounter(am);
    (*(*am).counters.offset(counter as isize)).min = 1 as std::os::raw::c_int;
    (*(*am).counters.offset(counter as isize)).max = 1 as std::os::raw::c_int;
    /* xmlFAGenerateTransitions(am, from, to, atom); */
    if to.is_null() { to = xmlRegNewState(am); xmlRegStatePush(am, to); }
    xmlRegStateAddTrans(am, from, atom, to, counter, -(1 as std::os::raw::c_int));
    xmlRegAtomPush(am, atom);
    (*am).state = to;
    return to;
}
/* *
 * xmlAutomataNewState:
 * @am: an automata
 *
 * Create a new disconnected state in the automata
 *
 * Returns the new state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewState(mut am: xmlAutomataPtr)
 -> xmlAutomataStatePtr {
    let mut to: xmlAutomataStatePtr = 0 as *mut xmlAutomataState;
    if am.is_null() { return 0 as xmlAutomataStatePtr }
    to = xmlRegNewState(am);
    xmlRegStatePush(am, to);
    return to;
}
/* *
 * xmlAutomataNewEpsilon:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds an epsilon transition from the @from state to the
 * target state
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewEpsilon(mut am: xmlAutomataPtr,
                                               mut from: xmlAutomataStatePtr,
                                               mut to: xmlAutomataStatePtr)
 -> xmlAutomataStatePtr {
    if am.is_null() || from.is_null() { return 0 as xmlAutomataStatePtr }
    xmlFAGenerateEpsilonTransition(am, from, to);
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewAllTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @lax: allow to transition if not all all transitions have been activated
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds a an ALL transition from the @from state to the
 * target state. That transition is an epsilon transition allowed only when
 * all transitions from the @from node have been activated.
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewAllTrans(mut am: xmlAutomataPtr,
                                                mut from: xmlAutomataStatePtr,
                                                mut to: xmlAutomataStatePtr,
                                                mut lax: std::os::raw::c_int)
 -> xmlAutomataStatePtr {
    if am.is_null() || from.is_null() { return 0 as xmlAutomataStatePtr }
    xmlFAGenerateAllTransition(am, from, to, lax);
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewCounter:
 * @am: an automata
 * @min:  the minimal value on the counter
 * @max:  the maximal value on the counter
 *
 * Create a new counter
 *
 * Returns the counter number or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewCounter(mut am: xmlAutomataPtr,
                                               mut min: std::os::raw::c_int,
                                               mut max: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0;
    if am.is_null() { return -(1 as std::os::raw::c_int) }
    ret = xmlRegGetCounter(am);
    if ret < 0 as std::os::raw::c_int { return -(1 as std::os::raw::c_int) }
    (*(*am).counters.offset(ret as isize)).min = min;
    (*(*am).counters.offset(ret as isize)).max = max;
    return ret;
}
/* *
 * xmlAutomataNewCountedTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @counter: the counter associated to that transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds an epsilon transition from the @from state to the target state
 * which will increment the counter provided
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewCountedTrans(mut am: xmlAutomataPtr,
                                                    mut from:
                                                        xmlAutomataStatePtr,
                                                    mut to:
                                                        xmlAutomataStatePtr,
                                                    mut counter: std::os::raw::c_int)
 -> xmlAutomataStatePtr {
    if am.is_null() || from.is_null() || counter < 0 as std::os::raw::c_int {
        return 0 as xmlAutomataStatePtr
    }
    xmlFAGenerateCountedEpsilonTransition(am, from, to, counter);
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataNewCounterTrans:
 * @am: an automata
 * @from: the starting point of the transition
 * @to: the target point of the transition or NULL
 * @counter: the counter associated to that transition
 *
 * If @to is NULL, this creates first a new target state in the automata
 * and then adds an epsilon transition from the @from state to the target state
 * which will be allowed only if the counter is within the right range.
 *
 * Returns the target state or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataNewCounterTrans(mut am: xmlAutomataPtr,
                                                    mut from:
                                                        xmlAutomataStatePtr,
                                                    mut to:
                                                        xmlAutomataStatePtr,
                                                    mut counter: std::os::raw::c_int)
 -> xmlAutomataStatePtr {
    if am.is_null() || from.is_null() || counter < 0 as std::os::raw::c_int {
        return 0 as xmlAutomataStatePtr
    }
    xmlFAGenerateCountedTransition(am, from, to, counter);
    if to.is_null() { return (*am).state }
    return to;
}
/* *
 * xmlAutomataCompile:
 * @am: an automata
 *
 * Compile the automata into a Reg Exp ready for being executed.
 * The automata should be free after this point.
 *
 * Returns the compiled regexp or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataCompile(mut am: xmlAutomataPtr)
 -> xmlRegexpPtr {
    let mut ret: xmlRegexpPtr = 0 as *mut xmlRegexp;
    if am.is_null() || (*am).error != 0 as std::os::raw::c_int {
        return 0 as xmlRegexpPtr
    }
    xmlFAEliminateEpsilonTransitions(am);
    /* xmlFAComputesDeterminism(am); */
    ret = xmlRegEpxFromParse(am);
    return ret;
}
/*
 * Building API
 */
/* *
 * xmlAutomataIsDeterminist:
 * @am: an automata
 *
 * Checks if an automata is determinist.
 *
 * Returns 1 if true, 0 if not, and -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlAutomataIsDeterminist(mut am: xmlAutomataPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0;
    if am.is_null() { return -(1 as std::os::raw::c_int) }
    ret = xmlFAComputesDeterminism(am);
    return ret;
}
/* *
 * xmlExpNewCtxt:
 * @maxNodes:  the maximum number of nodes
 * @dict:  optional dictionary to use internally
 *
 * Creates a new context for manipulating expressions
 *
 * Returns the context or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpNewCtxt(mut maxNodes: std::os::raw::c_int,
                                       mut dict: xmlDictPtr)
 -> xmlExpCtxtPtr {
    let mut ret: xmlExpCtxtPtr = 0 as *mut xmlExpCtxt;
    let mut size: std::os::raw::c_int = 256 as std::os::raw::c_int;
    if maxNodes <= 4096 as std::os::raw::c_int { maxNodes = 4096 as std::os::raw::c_int }
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlExpCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlExpCtxtPtr;
    if ret.is_null() { return 0 as xmlExpCtxtPtr }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlExpCtxt>() as std::os::raw::c_ulong);
    (*ret).size = size;
    (*ret).nbElems = 0 as std::os::raw::c_int;
    (*ret).maxNodes = maxNodes;
    (*ret).table =
        xmlMalloc.expect("non-null function pointer")((size as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlExpNodePtr>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut xmlExpNodePtr;
    if (*ret).table.is_null() {
        xmlFree.expect("non-null function pointer")(ret as *mut std::os::raw::c_void);
        return 0 as xmlExpCtxtPtr
    }
    memset((*ret).table as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           (size as
                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlExpNodePtr>()
                                                as std::os::raw::c_ulong));
    if dict.is_null() {
        (*ret).dict = xmlDictCreate();
        if (*ret).dict.is_null() {
            xmlFree.expect("non-null function pointer")((*ret).table as
                                                            *mut std::os::raw::c_void);
            xmlFree.expect("non-null function pointer")(ret as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlExpCtxtPtr
        }
    } else { (*ret).dict = dict; xmlDictReference((*ret).dict); }
    return ret;
}
/* *
 * xmlExpFreeCtxt:
 * @ctxt:  an expression context
 *
 * Free an expression context
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpFreeCtxt(mut ctxt: xmlExpCtxtPtr) {
    if ctxt.is_null() { return }
    xmlDictFree((*ctxt).dict);
    if !(*ctxt).table.is_null() {
        xmlFree.expect("non-null function pointer")((*ctxt).table as
                                                        *mut std::os::raw::c_void);
    }
    xmlFree.expect("non-null function pointer")(ctxt as *mut std::os::raw::c_void);
}
static mut forbiddenExpNode: xmlExpNode =
    {
        let mut init =
            _xmlExpNode{type_0:
                            XML_EXP_FORBID as std::os::raw::c_int as std::os::raw::c_uchar,
                        info: 0 as std::os::raw::c_int as std::os::raw::c_uchar,
                        key: 0 as std::os::raw::c_int as std::os::raw::c_ushort,
                        ref_0: 0 as std::os::raw::c_int as std::os::raw::c_uint,
                        c_max: 0 as std::os::raw::c_int,
                        exp_left: 0 as *const xmlExpNode as xmlExpNodePtr,
                        next: 0 as *const xmlExpNode as xmlExpNodePtr,
                        field:
                            C2RustUnnamed{count:
                                              {
                                                  let mut init =
                                                      C2RustUnnamed_1{f_min:
                                                                          0 as
                                                                              std::os::raw::c_int,
                                                                      f_max:
                                                                          0 as
                                                                              std::os::raw::c_int,};
                                                  init
                                              },},};
        init
    };
#[no_mangle]
pub static mut forbiddenExp: xmlExpNodePtr =
    unsafe { &forbiddenExpNode as *const xmlExpNode as *mut xmlExpNode };
static mut emptyExpNode: xmlExpNode =
    {
        let mut init =
            _xmlExpNode{type_0: XML_EXP_EMPTY as std::os::raw::c_int as std::os::raw::c_uchar,
                        info: 1 as std::os::raw::c_int as std::os::raw::c_uchar,
                        key: 0 as std::os::raw::c_int as std::os::raw::c_ushort,
                        ref_0: 0 as std::os::raw::c_int as std::os::raw::c_uint,
                        c_max: 0 as std::os::raw::c_int,
                        exp_left: 0 as *const xmlExpNode as xmlExpNodePtr,
                        next: 0 as *const xmlExpNode as xmlExpNodePtr,
                        field:
                            C2RustUnnamed{count:
                                              {
                                                  let mut init =
                                                      C2RustUnnamed_1{f_min:
                                                                          0 as
                                                                              std::os::raw::c_int,
                                                                      f_max:
                                                                          0 as
                                                                              std::os::raw::c_int,};
                                                  init
                                              },},};
        init
    };
#[no_mangle]
pub static mut emptyExp: xmlExpNodePtr =
    unsafe { &emptyExpNode as *const xmlExpNode as *mut xmlExpNode };
/* ***********************************************************************
 *									*
 *  The custom hash table for unicity and canonicalization		*
 *  of sub-expressions pointers						*
 *									*
 ************************************************************************/
/*
 * xmlExpHashNameComputeKey:
 * Calculate the hash key for a token
 */
unsafe extern "C" fn xmlExpHashNameComputeKey(mut name: *const xmlChar)
 -> std::os::raw::c_ushort {
    let mut value: std::os::raw::c_ushort = 0 as std::os::raw::c_long as std::os::raw::c_ushort;
    let mut ch: std::os::raw::c_char = 0;
    if !name.is_null() {
        value =
            (value as std::os::raw::c_int + 30 as std::os::raw::c_int * *name as std::os::raw::c_int)
                as std::os::raw::c_ushort;
        loop  {
            let fresh40 = name;
            name = name.offset(1);
            ch = *fresh40 as std::os::raw::c_char;
            if !(ch as std::os::raw::c_int != 0 as std::os::raw::c_int) { break ; }
            value =
                (value as std::os::raw::c_ulong ^
                     ((((value as std::os::raw::c_int) << 5 as std::os::raw::c_int) +
                           (value as std::os::raw::c_int >> 3 as std::os::raw::c_int)) as
                          std::os::raw::c_ulong).wrapping_add(ch as std::os::raw::c_ulong)) as
                    std::os::raw::c_ushort
        }
    }
    return value;
}
/*
 * xmlExpHashComputeKey:
 * Calculate the hash key for a compound expression
 */
unsafe extern "C" fn xmlExpHashComputeKey(mut type_0: xmlExpNodeType,
                                          mut left: xmlExpNodePtr,
                                          mut right: xmlExpNodePtr)
 -> std::os::raw::c_ushort {
    let mut value: std::os::raw::c_ulong = 0;
    let mut ret: std::os::raw::c_ushort = 0;
    match type_0 as std::os::raw::c_uint {
        3 => {
            value = (*left).key as std::os::raw::c_ulong;
            value = value.wrapping_add((*right).key as std::os::raw::c_ulong);
            value = value.wrapping_mul(3 as std::os::raw::c_int as std::os::raw::c_ulong);
            ret = value as std::os::raw::c_ushort
        }
        4 => {
            value = (*left).key as std::os::raw::c_ulong;
            value = value.wrapping_add((*right).key as std::os::raw::c_ulong);
            value = value.wrapping_mul(7 as std::os::raw::c_int as std::os::raw::c_ulong);
            ret = value as std::os::raw::c_ushort
        }
        5 => {
            value = (*left).key as std::os::raw::c_ulong;
            value = value.wrapping_add((*right).key as std::os::raw::c_ulong);
            ret = value as std::os::raw::c_ushort
        }
        _ => { ret = 0 as std::os::raw::c_int as std::os::raw::c_ushort }
    }
    return ret;
}
/* #define exp_left field.children.f_left */
unsafe extern "C" fn xmlExpNewNode(mut ctxt: xmlExpCtxtPtr,
                                   mut type_0: xmlExpNodeType)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    if (*ctxt).nb_nodes >= 10000 as std::os::raw::c_int { return 0 as xmlExpNodePtr }
    ret =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlExpNode>()
                                                          as std::os::raw::c_ulong) as
            xmlExpNodePtr;
    if ret.is_null() { return 0 as xmlExpNodePtr }
    memset(ret as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlExpNode>() as std::os::raw::c_ulong);
    (*ret).type_0 = type_0 as std::os::raw::c_uchar;
    (*ret).next = 0 as xmlExpNodePtr;
    (*ctxt).nb_nodes += 1;
    (*ctxt).nb_cons += 1;
    return ret;
}
/* *
 * xmlExpHashGetEntry:
 * @table: the hash table
 *
 * Get the unique entry from the hash table. The entry is created if
 * needed. @left and @right are consumed, i.e. their ref count will
 * be decremented by the operation.
 *
 * Returns the pointer or NULL in case of error
 */
unsafe extern "C" fn xmlExpHashGetEntry(mut ctxt: xmlExpCtxtPtr,
                                        mut type_0: xmlExpNodeType,
                                        mut left: xmlExpNodePtr,
                                        mut right: xmlExpNodePtr,
                                        mut name: *const xmlChar,
                                        mut min: std::os::raw::c_int,
                                        mut max: std::os::raw::c_int)
 -> xmlExpNodePtr {
    let mut kbase: std::os::raw::c_ushort = 0;
    let mut key: std::os::raw::c_ushort = 0;
    let mut entry: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut insert: xmlExpNodePtr = 0 as *mut xmlExpNode;
    if ctxt.is_null() { return 0 as xmlExpNodePtr }
    /*
     * Check for duplicate and insertion location.
     */
    if type_0 as std::os::raw::c_uint == XML_EXP_ATOM as std::os::raw::c_int as std::os::raw::c_uint {
        kbase = xmlExpHashNameComputeKey(name)
    } else if type_0 as std::os::raw::c_uint ==
                  XML_EXP_COUNT as std::os::raw::c_int as std::os::raw::c_uint {
        /* COUNT reduction rule 1 */
	/* a{1} -> a */
        if min == max {
            if min == 1 as std::os::raw::c_int { return left }
            if min == 0 as std::os::raw::c_int {
                xmlExpFree(ctxt, left);
                return emptyExp
            }
        }
        if min < 0 as std::os::raw::c_int {
            xmlExpFree(ctxt, left);
            return forbiddenExp
        }
        if max == -(1 as std::os::raw::c_int) {
            kbase = (min + 79 as std::os::raw::c_int) as std::os::raw::c_ushort
        } else { kbase = (max - min) as std::os::raw::c_ushort }
        kbase =
            (kbase as std::os::raw::c_int + (*left).key as std::os::raw::c_int) as
                std::os::raw::c_ushort
    } else if type_0 as std::os::raw::c_uint ==
                  XML_EXP_OR as std::os::raw::c_int as std::os::raw::c_uint {
        /* Forbid reduction rules */
        if (*left).type_0 as std::os::raw::c_int == XML_EXP_FORBID as std::os::raw::c_int {
            xmlExpFree(ctxt, left);
            return right
        }
        if (*right).type_0 as std::os::raw::c_int == XML_EXP_FORBID as std::os::raw::c_int {
            xmlExpFree(ctxt, right);
            return left
        }
        /* OR reduction rule 1 */
	/* a | a reduced to a */
        if left == right {
            (*left).ref_0 = (*left).ref_0.wrapping_sub(1);
            return left
        }
        /* OR canonicalization rule 1 */
	/* linearize (a | b) | c into a | (b | c) */
        if (*left).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int &&
               (*right).type_0 as std::os::raw::c_int != XML_EXP_OR as std::os::raw::c_int {
            let mut tmp: xmlExpNodePtr = left;
            left = right;
            right = tmp
        }
        /* OR reduction rule 2 */
	/* a | (a | b) and b | (a | b) are reduced to a | b */
        if (*right).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
            if left == (*right).exp_left ||
                   left == (*right).field.children.f_right {
                xmlExpFree(ctxt, left);
                return right
            }
        }
        /* OR canonicalization rule 2 */
	/* linearize (a | b) | c into a | (b | c) */
        if (*left).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
            let mut tmp_0: xmlExpNodePtr = 0 as *mut xmlExpNode;
            /* OR canonicalization rule 2 */
            if (*(*left).field.children.f_right).type_0 as std::os::raw::c_int !=
                   XML_EXP_OR as std::os::raw::c_int &&
                   ((*(*left).field.children.f_right).key as std::os::raw::c_int) <
                       (*(*left).exp_left).key as std::os::raw::c_int {
                tmp_0 = (*left).field.children.f_right;
                (*left).field.children.f_right = (*left).exp_left;
                (*left).exp_left = tmp_0
            }
            (*(*left).field.children.f_right).ref_0 =
                (*(*left).field.children.f_right).ref_0.wrapping_add(1);
            tmp_0 =
                xmlExpHashGetEntry(ctxt, XML_EXP_OR,
                                   (*left).field.children.f_right, right,
                                   0 as *const xmlChar, 0 as std::os::raw::c_int,
                                   0 as std::os::raw::c_int);
            (*(*left).exp_left).ref_0 =
                (*(*left).exp_left).ref_0.wrapping_add(1);
            tmp_0 =
                xmlExpHashGetEntry(ctxt, XML_EXP_OR, (*left).exp_left, tmp_0,
                                   0 as *const xmlChar, 0 as std::os::raw::c_int,
                                   0 as std::os::raw::c_int);
            xmlExpFree(ctxt, left);
            return tmp_0
        }
        if (*right).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
            /* Ordering in the tree */
	    /* C | (A | B) -> A | (B | C) */
            if (*left).key as std::os::raw::c_int >
                   (*(*right).field.children.f_right).key as std::os::raw::c_int {
                let mut tmp_1: xmlExpNodePtr = 0 as *mut xmlExpNode;
                (*(*right).field.children.f_right).ref_0 =
                    (*(*right).field.children.f_right).ref_0.wrapping_add(1);
                tmp_1 =
                    xmlExpHashGetEntry(ctxt, XML_EXP_OR,
                                       (*right).field.children.f_right, left,
                                       0 as *const xmlChar, 0 as std::os::raw::c_int,
                                       0 as std::os::raw::c_int);
                (*(*right).exp_left).ref_0 =
                    (*(*right).exp_left).ref_0.wrapping_add(1);
                tmp_1 =
                    xmlExpHashGetEntry(ctxt, XML_EXP_OR, (*right).exp_left,
                                       tmp_1, 0 as *const xmlChar,
                                       0 as std::os::raw::c_int, 0 as std::os::raw::c_int);
                xmlExpFree(ctxt, right);
                return tmp_1
            }
            /* Ordering in the tree */
	    /* B | (A | C) -> A | (B | C) */
            if (*left).key as std::os::raw::c_int >
                   (*(*right).exp_left).key as std::os::raw::c_int {
                let mut tmp_2: xmlExpNodePtr = 0 as *mut xmlExpNode;
                (*(*right).field.children.f_right).ref_0 =
                    (*(*right).field.children.f_right).ref_0.wrapping_add(1);
                tmp_2 =
                    xmlExpHashGetEntry(ctxt, XML_EXP_OR, left,
                                       (*right).field.children.f_right,
                                       0 as *const xmlChar, 0 as std::os::raw::c_int,
                                       0 as std::os::raw::c_int);
                (*(*right).exp_left).ref_0 =
                    (*(*right).exp_left).ref_0.wrapping_add(1);
                tmp_2 =
                    xmlExpHashGetEntry(ctxt, XML_EXP_OR, (*right).exp_left,
                                       tmp_2, 0 as *const xmlChar,
                                       0 as std::os::raw::c_int, 0 as std::os::raw::c_int);
                xmlExpFree(ctxt, right);
                return tmp_2
            }
        } else if (*left).key as std::os::raw::c_int > (*right).key as std::os::raw::c_int {
            let mut tmp_3: xmlExpNodePtr = left;
            left = right;
            right = tmp_3
        }
        kbase = xmlExpHashComputeKey(type_0, left, right)
    } else if type_0 as std::os::raw::c_uint ==
                  XML_EXP_SEQ as std::os::raw::c_int as std::os::raw::c_uint {
        /* we know both types are != XML_EXP_OR here */
        /* Forbid reduction rules */
        if (*left).type_0 as std::os::raw::c_int == XML_EXP_FORBID as std::os::raw::c_int {
            xmlExpFree(ctxt, right);
            return left
        }
        if (*right).type_0 as std::os::raw::c_int == XML_EXP_FORBID as std::os::raw::c_int {
            xmlExpFree(ctxt, left);
            return right
        }
        /* Empty reduction rules */
        if (*right).type_0 as std::os::raw::c_int == XML_EXP_EMPTY as std::os::raw::c_int {
            return left
        }
        if (*left).type_0 as std::os::raw::c_int == XML_EXP_EMPTY as std::os::raw::c_int {
            return right
        }
        kbase = xmlExpHashComputeKey(type_0, left, right)
    } else { return 0 as xmlExpNodePtr }
    key = (kbase as std::os::raw::c_int % (*ctxt).size) as std::os::raw::c_ushort;
    if !(*(*ctxt).table.offset(key as isize)).is_null() {
        insert = *(*ctxt).table.offset(key as isize);
        while !insert.is_null() {
            if (*insert).key as std::os::raw::c_int == kbase as std::os::raw::c_int &&
                   (*insert).type_0 as std::os::raw::c_uint == type_0 as std::os::raw::c_uint
               {
                if type_0 as std::os::raw::c_uint ==
                       XML_EXP_ATOM as std::os::raw::c_int as std::os::raw::c_uint {
                    if name == (*insert).field.f_str {
                        (*insert).ref_0 = (*insert).ref_0.wrapping_add(1);
                        return insert
                    }
                } else if type_0 as std::os::raw::c_uint ==
                              XML_EXP_COUNT as std::os::raw::c_int as std::os::raw::c_uint {
                    if (*insert).field.count.f_min == min &&
                           (*insert).field.count.f_max == max &&
                           (*insert).exp_left == left {
                        (*insert).ref_0 = (*insert).ref_0.wrapping_add(1);
                        (*left).ref_0 = (*left).ref_0.wrapping_sub(1);
                        return insert
                    }
                } else if (*insert).exp_left == left &&
                              (*insert).field.children.f_right == right {
                    (*insert).ref_0 = (*insert).ref_0.wrapping_add(1);
                    (*left).ref_0 = (*left).ref_0.wrapping_sub(1);
                    (*right).ref_0 = (*right).ref_0.wrapping_sub(1);
                    return insert
                }
            }
            insert = (*insert).next
        }
    }
    entry = xmlExpNewNode(ctxt, type_0);
    if entry.is_null() { return 0 as xmlExpNodePtr }
    (*entry).key = kbase;
    if type_0 as std::os::raw::c_uint == XML_EXP_ATOM as std::os::raw::c_int as std::os::raw::c_uint {
        (*entry).field.f_str = name;
        (*entry).c_max = 1 as std::os::raw::c_int
    } else if type_0 as std::os::raw::c_uint ==
                  XML_EXP_COUNT as std::os::raw::c_int as std::os::raw::c_uint {
        (*entry).field.count.f_min = min;
        (*entry).field.count.f_max = max;
        (*entry).exp_left = left;
        if min == 0 as std::os::raw::c_int ||
               (*left).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int !=
                   0 {
            (*entry).info =
                ((*entry).info as std::os::raw::c_int |
                     XML_EXP_NILABLE as std::os::raw::c_int) as std::os::raw::c_uchar
        }
        if max < 0 as std::os::raw::c_int {
            (*entry).c_max = -(1 as std::os::raw::c_int)
        } else { (*entry).c_max = max * (*(*entry).exp_left).c_max }
    } else {
        (*entry).exp_left = left;
        (*entry).field.children.f_right = right;
        if type_0 as std::os::raw::c_uint == XML_EXP_OR as std::os::raw::c_int as std::os::raw::c_uint
           {
            if (*left).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int !=
                   0 ||
                   (*right).info as std::os::raw::c_int &
                       XML_EXP_NILABLE as std::os::raw::c_int != 0 {
                (*entry).info =
                    ((*entry).info as std::os::raw::c_int |
                         XML_EXP_NILABLE as std::os::raw::c_int) as std::os::raw::c_uchar
            }
            if (*(*entry).exp_left).c_max == -(1 as std::os::raw::c_int) ||
                   (*(*entry).field.children.f_right).c_max ==
                       -(1 as std::os::raw::c_int) {
                (*entry).c_max = -(1 as std::os::raw::c_int)
            } else if (*(*entry).exp_left).c_max >
                          (*(*entry).field.children.f_right).c_max {
                (*entry).c_max = (*(*entry).exp_left).c_max
            } else {
                (*entry).c_max = (*(*entry).field.children.f_right).c_max
            }
        } else {
            if (*left).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int !=
                   0 &&
                   (*right).info as std::os::raw::c_int &
                       XML_EXP_NILABLE as std::os::raw::c_int != 0 {
                (*entry).info =
                    ((*entry).info as std::os::raw::c_int |
                         XML_EXP_NILABLE as std::os::raw::c_int) as std::os::raw::c_uchar
            }
            if (*(*entry).exp_left).c_max == -(1 as std::os::raw::c_int) ||
                   (*(*entry).field.children.f_right).c_max ==
                       -(1 as std::os::raw::c_int) {
                (*entry).c_max = -(1 as std::os::raw::c_int)
            } else {
                (*entry).c_max =
                    (*(*entry).exp_left).c_max +
                        (*(*entry).field.children.f_right).c_max
            }
        }
    }
    (*entry).ref_0 = 1 as std::os::raw::c_int as std::os::raw::c_uint;
    if !(*(*ctxt).table.offset(key as isize)).is_null() {
        (*entry).next = *(*ctxt).table.offset(key as isize)
    }
    let ref mut fresh41 = *(*ctxt).table.offset(key as isize);
    *fresh41 = entry;
    (*ctxt).nbElems += 1;
    return entry;
}
/* *
 * xmlExpFree:
 * @ctxt: the expression context
 * @exp: the expression
 *
 * Dereference the expression
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpFree(mut ctxt: xmlExpCtxtPtr,
                                    mut exp: xmlExpNodePtr) {
    if exp.is_null() || exp == forbiddenExp || exp == emptyExp { return }
    (*exp).ref_0 = (*exp).ref_0.wrapping_sub(1);
    if (*exp).ref_0 == 0 as std::os::raw::c_int as std::os::raw::c_uint {
        let mut key: std::os::raw::c_ushort = 0;
        /* Unlink it first from the hash table */
        key = ((*exp).key as std::os::raw::c_int % (*ctxt).size) as std::os::raw::c_ushort;
        if *(*ctxt).table.offset(key as isize) == exp {
            let ref mut fresh42 = *(*ctxt).table.offset(key as isize);
            *fresh42 = (*exp).next
        } else {
            let mut tmp: xmlExpNodePtr = 0 as *mut xmlExpNode;
            tmp = *(*ctxt).table.offset(key as isize);
            while !tmp.is_null() {
                if (*tmp).next == exp {
                    (*tmp).next = (*exp).next;
                    break ;
                } else { tmp = (*tmp).next }
            }
        }
        if (*exp).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
               (*exp).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
            xmlExpFree(ctxt, (*exp).exp_left);
            xmlExpFree(ctxt, (*exp).field.children.f_right);
        } else if (*exp).type_0 as std::os::raw::c_int == XML_EXP_COUNT as std::os::raw::c_int
         {
            xmlExpFree(ctxt, (*exp).exp_left);
        }
        xmlFree.expect("non-null function pointer")(exp as *mut std::os::raw::c_void);
        (*ctxt).nb_nodes -= 1
    };
}
/* *
 * xmlExpRef:
 * @exp: the expression
 *
 * Increase the reference count of the expression
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpRef(mut exp: xmlExpNodePtr) {
    if !exp.is_null() { (*exp).ref_0 = (*exp).ref_0.wrapping_add(1) };
}
/* *
 * xmlExpNewAtom:
 * @ctxt: the expression context
 * @name: the atom name
 * @len: the atom name length in byte (or -1);
 *
 * Get the atom associated to this name from that context
 *
 * Returns the node or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpNewAtom(mut ctxt: xmlExpCtxtPtr,
                                       mut name: *const xmlChar,
                                       mut len: std::os::raw::c_int)
 -> xmlExpNodePtr {
    if ctxt.is_null() || name.is_null() { return 0 as xmlExpNodePtr }
    name = xmlDictLookup((*ctxt).dict, name, len);
    if name.is_null() { return 0 as xmlExpNodePtr }
    return xmlExpHashGetEntry(ctxt, XML_EXP_ATOM, 0 as xmlExpNodePtr,
                              0 as xmlExpNodePtr, name, 0 as std::os::raw::c_int,
                              0 as std::os::raw::c_int);
}
/* *
 * xmlExpNewOr:
 * @ctxt: the expression context
 * @left: left expression
 * @right: right expression
 *
 * Get the atom associated to the choice @left | @right
 * Note that @left and @right are consumed in the operation, to keep
 * an handle on them use xmlExpRef() and use xmlExpFree() to release them,
 * this is true even in case of failure (unless ctxt == NULL).
 *
 * Returns the node or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpNewOr(mut ctxt: xmlExpCtxtPtr,
                                     mut left: xmlExpNodePtr,
                                     mut right: xmlExpNodePtr)
 -> xmlExpNodePtr {
    if ctxt.is_null() { return 0 as xmlExpNodePtr }
    if left.is_null() || right.is_null() {
        xmlExpFree(ctxt, left);
        xmlExpFree(ctxt, right);
        return 0 as xmlExpNodePtr
    }
    return xmlExpHashGetEntry(ctxt, XML_EXP_OR, left, right,
                              0 as *const xmlChar, 0 as std::os::raw::c_int,
                              0 as std::os::raw::c_int);
}
/* *
 * xmlExpNewSeq:
 * @ctxt: the expression context
 * @left: left expression
 * @right: right expression
 *
 * Get the atom associated to the sequence @left , @right
 * Note that @left and @right are consumed in the operation, to keep
 * an handle on them use xmlExpRef() and use xmlExpFree() to release them,
 * this is true even in case of failure (unless ctxt == NULL).
 *
 * Returns the node or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpNewSeq(mut ctxt: xmlExpCtxtPtr,
                                      mut left: xmlExpNodePtr,
                                      mut right: xmlExpNodePtr)
 -> xmlExpNodePtr {
    if ctxt.is_null() { return 0 as xmlExpNodePtr }
    if left.is_null() || right.is_null() {
        xmlExpFree(ctxt, left);
        xmlExpFree(ctxt, right);
        return 0 as xmlExpNodePtr
    }
    return xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, left, right,
                              0 as *const xmlChar, 0 as std::os::raw::c_int,
                              0 as std::os::raw::c_int);
}
/* *
 * xmlExpNewRange:
 * @ctxt: the expression context
 * @subset: the expression to be repeated
 * @min: the lower bound for the repetition
 * @max: the upper bound for the repetition, -1 means infinite
 *
 * Get the atom associated to the range (@subset){@min, @max}
 * Note that @subset is consumed in the operation, to keep
 * an handle on it use xmlExpRef() and use xmlExpFree() to release it,
 * this is true even in case of failure (unless ctxt == NULL).
 *
 * Returns the node or NULL in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpNewRange(mut ctxt: xmlExpCtxtPtr,
                                        mut subset: xmlExpNodePtr,
                                        mut min: std::os::raw::c_int,
                                        mut max: std::os::raw::c_int)
 -> xmlExpNodePtr {
    if ctxt.is_null() { return 0 as xmlExpNodePtr }
    if subset.is_null() || min < 0 as std::os::raw::c_int || max < -(1 as std::os::raw::c_int)
           || max >= 0 as std::os::raw::c_int && min > max {
        xmlExpFree(ctxt, subset);
        return 0 as xmlExpNodePtr
    }
    return xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, subset, 0 as xmlExpNodePtr,
                              0 as *const xmlChar, min, max);
}
/* ***********************************************************************
 *									*
 *		Public API for operations on expressions		*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlExpGetLanguageInt(mut ctxt: xmlExpCtxtPtr,
                                          mut exp: xmlExpNodePtr,
                                          mut list: *mut *const xmlChar,
                                          mut len: std::os::raw::c_int,
                                          mut nb: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut tmp: std::os::raw::c_int = 0;
    let mut tmp2: std::os::raw::c_int = 0;
    's_91:
        {
            loop  {
                match (*exp).type_0 as std::os::raw::c_int {
                    0 => { return 0 as std::os::raw::c_int }
                    2 => {
                        tmp = 0 as std::os::raw::c_int;
                        while tmp < nb {
                            if *list.offset(tmp as isize) ==
                                   (*exp).field.f_str {
                                return 0 as std::os::raw::c_int
                            }
                            tmp += 1
                        }
                        if nb >= len { return -(2 as std::os::raw::c_int) }
                        let ref mut fresh43 = *list.offset(nb as isize);
                        *fresh43 = (*exp).field.f_str;
                        return 1 as std::os::raw::c_int
                    }
                    5 => { exp = (*exp).exp_left }
                    3 | 4 => {
                        tmp =
                            xmlExpGetLanguageInt(ctxt, (*exp).exp_left, list,
                                                 len, nb);
                        if tmp < 0 as std::os::raw::c_int { return tmp }
                        tmp2 =
                            xmlExpGetLanguageInt(ctxt,
                                                 (*exp).field.children.f_right,
                                                 list, len, nb + tmp);
                        if tmp2 < 0 as std::os::raw::c_int { return tmp2 }
                        return tmp + tmp2
                    }
                    _ => { break 's_91 ; }
                }
            }
        }
    return -(1 as std::os::raw::c_int);
}
/* *
 * xmlExpGetLanguage:
 * @ctxt: the expression context
 * @exp: the expression
 * @langList: where to store the tokens
 * @len: the allocated length of @list
 *
 * Find all the strings used in @exp and store them in @list
 *
 * Returns the number of unique strings found, -1 in case of errors and
 *         -2 if there is more than @len strings
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpGetLanguage(mut ctxt: xmlExpCtxtPtr,
                                           mut exp: xmlExpNodePtr,
                                           mut langList: *mut *const xmlChar,
                                           mut len: std::os::raw::c_int)
 -> std::os::raw::c_int {
    if ctxt.is_null() || exp.is_null() || langList.is_null() ||
           len <= 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    return xmlExpGetLanguageInt(ctxt, exp, langList, len, 0 as std::os::raw::c_int);
}
unsafe extern "C" fn xmlExpGetStartInt(mut ctxt: xmlExpCtxtPtr,
                                       mut exp: xmlExpNodePtr,
                                       mut list: *mut *const xmlChar,
                                       mut len: std::os::raw::c_int,
                                       mut nb: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut tmp: std::os::raw::c_int = 0;
    let mut tmp2: std::os::raw::c_int = 0;
    's_136:
        {
            loop  {
                match (*exp).type_0 as std::os::raw::c_int {
                    1 => { return 0 as std::os::raw::c_int }
                    0 => { return 0 as std::os::raw::c_int }
                    2 => {
                        tmp = 0 as std::os::raw::c_int;
                        while tmp < nb {
                            if *list.offset(tmp as isize) ==
                                   (*exp).field.f_str {
                                return 0 as std::os::raw::c_int
                            }
                            tmp += 1
                        }
                        if nb >= len { return -(2 as std::os::raw::c_int) }
                        let ref mut fresh44 = *list.offset(nb as isize);
                        *fresh44 = (*exp).field.f_str;
                        return 1 as std::os::raw::c_int
                    }
                    5 => { exp = (*exp).exp_left }
                    3 => {
                        tmp =
                            xmlExpGetStartInt(ctxt, (*exp).exp_left, list,
                                              len, nb);
                        if tmp < 0 as std::os::raw::c_int { return tmp }
                        if (*(*exp).exp_left).info as std::os::raw::c_int &
                               XML_EXP_NILABLE as std::os::raw::c_int != 0 {
                            tmp2 =
                                xmlExpGetStartInt(ctxt,
                                                  (*exp).field.children.f_right,
                                                  list, len, nb + tmp);
                            if tmp2 < 0 as std::os::raw::c_int { return tmp2 }
                            tmp += tmp2
                        }
                        return tmp
                    }
                    4 => {
                        tmp =
                            xmlExpGetStartInt(ctxt, (*exp).exp_left, list,
                                              len, nb);
                        if tmp < 0 as std::os::raw::c_int { return tmp }
                        tmp2 =
                            xmlExpGetStartInt(ctxt,
                                              (*exp).field.children.f_right,
                                              list, len, nb + tmp);
                        if tmp2 < 0 as std::os::raw::c_int { return tmp2 }
                        return tmp + tmp2
                    }
                    _ => { break 's_136 ; }
                }
            }
        }
    return -(1 as std::os::raw::c_int);
}
/* *
 * xmlExpGetStart:
 * @ctxt: the expression context
 * @exp: the expression
 * @tokList: where to store the tokens
 * @len: the allocated length of @list
 *
 * Find all the strings that appears at the start of the languages
 * accepted by @exp and store them in @list. E.g. for (a, b) | c
 * it will return the list [a, c]
 *
 * Returns the number of unique strings found, -1 in case of errors and
 *         -2 if there is more than @len strings
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpGetStart(mut ctxt: xmlExpCtxtPtr,
                                        mut exp: xmlExpNodePtr,
                                        mut tokList: *mut *const xmlChar,
                                        mut len: std::os::raw::c_int) -> std::os::raw::c_int {
    if ctxt.is_null() || exp.is_null() || tokList.is_null() ||
           len <= 0 as std::os::raw::c_int {
        return -(1 as std::os::raw::c_int)
    }
    return xmlExpGetStartInt(ctxt, exp, tokList, len, 0 as std::os::raw::c_int);
}
/* *
 * xmlExpIsNillable:
 * @exp: the expression
 *
 * Finds if the expression is nillable, i.e. if it accepts the empty sequqnce
 *
 * Returns 1 if nillable, 0 if not and -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpIsNillable(mut exp: xmlExpNodePtr)
 -> std::os::raw::c_int {
    if exp.is_null() { return -(1 as std::os::raw::c_int) }
    return ((*exp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int !=
                0 as std::os::raw::c_int) as std::os::raw::c_int;
}
unsafe extern "C" fn xmlExpStringDeriveInt(mut ctxt: xmlExpCtxtPtr,
                                           mut exp: xmlExpNodePtr,
                                           mut str: *const xmlChar)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    match (*exp).type_0 as std::os::raw::c_int {
        0 => { return forbiddenExp }
        1 => { return forbiddenExp }
        2 => {
            if (*exp).field.f_str == str {
                ret = emptyExp
            } else {
                /* TODO wildcards here */
                ret = forbiddenExp
            }
            return ret
        }
        4 => {
            let mut tmp: xmlExpNodePtr = 0 as *mut xmlExpNode;
            tmp = xmlExpStringDeriveInt(ctxt, (*exp).exp_left, str);
            if tmp.is_null() { return 0 as xmlExpNodePtr }
            ret =
                xmlExpStringDeriveInt(ctxt, (*exp).field.children.f_right,
                                      str);
            if ret.is_null() {
                xmlExpFree(ctxt, tmp);
                return 0 as xmlExpNodePtr
            }
            ret =
                xmlExpHashGetEntry(ctxt, XML_EXP_OR, tmp, ret,
                                   0 as *const xmlChar, 0 as std::os::raw::c_int,
                                   0 as std::os::raw::c_int);
            return ret
        }
        3 => {
            ret = xmlExpStringDeriveInt(ctxt, (*exp).exp_left, str);
            if ret.is_null() {
                return 0 as xmlExpNodePtr
            } else {
                if ret == forbiddenExp {
                    if (*(*exp).exp_left).info as std::os::raw::c_int &
                           XML_EXP_NILABLE as std::os::raw::c_int != 0 {
                        ret =
                            xmlExpStringDeriveInt(ctxt,
                                                  (*exp).field.children.f_right,
                                                  str)
                    }
                } else {
                    (*(*exp).field.children.f_right).ref_0 =
                        (*(*exp).field.children.f_right).ref_0.wrapping_add(1);
                    ret =
                        xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, ret,
                                           (*exp).field.children.f_right,
                                           0 as *const xmlChar,
                                           0 as std::os::raw::c_int, 0 as std::os::raw::c_int)
                }
            }
            return ret
        }
        5 => {
            let mut min: std::os::raw::c_int = 0;
            let mut max: std::os::raw::c_int = 0;
            let mut tmp_0: xmlExpNodePtr = 0 as *mut xmlExpNode;
            if (*exp).field.count.f_max == 0 as std::os::raw::c_int {
                return forbiddenExp
            }
            ret = xmlExpStringDeriveInt(ctxt, (*exp).exp_left, str);
            if ret.is_null() { return 0 as xmlExpNodePtr }
            if ret == forbiddenExp { return ret }
            if (*exp).field.count.f_max == 1 as std::os::raw::c_int { return ret }
            if (*exp).field.count.f_max < 0 as std::os::raw::c_int {
                /* unbounded */
                max = -(1 as std::os::raw::c_int)
            } else { max = (*exp).field.count.f_max - 1 as std::os::raw::c_int }
            if (*exp).field.count.f_min > 0 as std::os::raw::c_int {
                min = (*exp).field.count.f_min - 1 as std::os::raw::c_int
            } else { min = 0 as std::os::raw::c_int }
            (*(*exp).exp_left).ref_0 =
                (*(*exp).exp_left).ref_0.wrapping_add(1);
            tmp_0 =
                xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, (*exp).exp_left,
                                   0 as xmlExpNodePtr, 0 as *const xmlChar,
                                   min, max);
            if ret == emptyExp { return tmp_0 }
            return xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, ret, tmp_0,
                                      0 as *const xmlChar, 0 as std::os::raw::c_int,
                                      0 as std::os::raw::c_int)
        }
        _ => { }
    }
    return 0 as xmlExpNodePtr;
}
/* *
 * xmlExpStringDerive:
 * @ctxt: the expression context
 * @exp: the expression
 * @str: the string
 * @len: the string len in bytes if available
 *
 * Do one step of Brzozowski derivation of the expression @exp with
 * respect to the input string
 *
 * Returns the resulting expression or NULL in case of internal error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpStringDerive(mut ctxt: xmlExpCtxtPtr,
                                            mut exp: xmlExpNodePtr,
                                            mut str: *const xmlChar,
                                            mut len: std::os::raw::c_int)
 -> xmlExpNodePtr {
    let mut input: *const xmlChar = 0 as *const xmlChar;
    if exp.is_null() || ctxt.is_null() || str.is_null() {
        return 0 as xmlExpNodePtr
    }
    /*
     * check the string is in the dictionary, if yes use an interned
     * copy, otherwise we know it's not an acceptable input
     */
    input = xmlDictExists((*ctxt).dict, str, len);
    if input.is_null() { return forbiddenExp }
    return xmlExpStringDeriveInt(ctxt, exp, input);
}
unsafe extern "C" fn xmlExpCheckCard(mut exp: xmlExpNodePtr,
                                     mut sub: xmlExpNodePtr) -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 1 as std::os::raw::c_int;
    if (*sub).c_max == -(1 as std::os::raw::c_int) {
        if (*exp).c_max != -(1 as std::os::raw::c_int) { ret = 0 as std::os::raw::c_int }
    } else if (*exp).c_max >= 0 as std::os::raw::c_int && (*exp).c_max < (*sub).c_max
     {
        ret = 0 as std::os::raw::c_int
    }
    return ret;
}
/* *
 * xmlExpDivide:
 * @ctxt: the expressions context
 * @exp: the englobing expression
 * @sub: the subexpression
 * @mult: the multiple expression
 * @remain: the remain from the derivation of the multiple
 *
 * Check if exp is a multiple of sub, i.e. if there is a finite number n
 * so that sub{n} subsume exp
 *
 * Returns the multiple value if successful, 0 if it is not a multiple
 *         and -1 in case of internel error.
 */
unsafe extern "C" fn xmlExpDivide(mut ctxt: xmlExpCtxtPtr,
                                  mut exp: xmlExpNodePtr,
                                  mut sub: xmlExpNodePtr,
                                  mut mult: *mut xmlExpNodePtr,
                                  mut remain: *mut xmlExpNodePtr)
 -> std::os::raw::c_int {
    let mut i: std::os::raw::c_int = 0;
    let mut tmp: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut tmp2: xmlExpNodePtr = 0 as *mut xmlExpNode;
    if !mult.is_null() { *mult = 0 as xmlExpNodePtr }
    if !remain.is_null() { *remain = 0 as xmlExpNodePtr }
    if (*exp).c_max == -(1 as std::os::raw::c_int) { return 0 as std::os::raw::c_int }
    if (*exp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int != 0 &&
           (*sub).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int == 0 {
        return 0 as std::os::raw::c_int
    }
    i = 1 as std::os::raw::c_int;
    while i <= (*exp).c_max {
        (*sub).ref_0 = (*sub).ref_0.wrapping_add(1);
        tmp =
            xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, sub, 0 as xmlExpNodePtr,
                               0 as *const xmlChar, i, i);
        if tmp.is_null() { return -(1 as std::os::raw::c_int) }
        if xmlExpCheckCard(tmp, exp) == 0 {
            xmlExpFree(ctxt, tmp);
        } else {
            tmp2 = xmlExpExpDeriveInt(ctxt, tmp, exp);
            if tmp2.is_null() {
                xmlExpFree(ctxt, tmp);
                return -(1 as std::os::raw::c_int)
            }
            if tmp2 != forbiddenExp &&
                   (*tmp2).info as std::os::raw::c_int &
                       XML_EXP_NILABLE as std::os::raw::c_int != 0 {
                if !remain.is_null() {
                    *remain = tmp2
                } else { xmlExpFree(ctxt, tmp2); }
                if !mult.is_null() {
                    *mult = tmp
                } else { xmlExpFree(ctxt, tmp); }
                return i
            }
            xmlExpFree(ctxt, tmp);
            xmlExpFree(ctxt, tmp2);
        }
        i += 1
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlExpExpDeriveInt:
 * @ctxt: the expressions context
 * @exp: the englobing expression
 * @sub: the subexpression
 *
 * Try to do a step of Brzozowski derivation but at a higher level
 * the input being a subexpression.
 *
 * Returns the resulting expression or NULL in case of internal error
 */
unsafe extern "C" fn xmlExpExpDeriveInt(mut ctxt: xmlExpCtxtPtr,
                                        mut exp: xmlExpNodePtr,
                                        mut sub: xmlExpNodePtr)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut tmp: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut tmp2: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut tmp3: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut tab: *mut *const xmlChar = 0 as *mut *const xmlChar;
    let mut len: std::os::raw::c_int = 0;
    let mut i: std::os::raw::c_int = 0;
    /*
     * In case of equality and if the expression can only consume a finite
     * amount, then the derivation is empty
     */
    if exp == sub && (*exp).c_max >= 0 as std::os::raw::c_int { return emptyExp }
    /*
     * decompose sub sequence first
     */
    if (*sub).type_0 as std::os::raw::c_int == XML_EXP_EMPTY as std::os::raw::c_int {
        (*exp).ref_0 = (*exp).ref_0.wrapping_add(1);
        return exp
    }
    if (*sub).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int {
        tmp = xmlExpExpDeriveInt(ctxt, exp, (*sub).exp_left);
        if tmp.is_null() { return 0 as xmlExpNodePtr }
        if tmp == forbiddenExp { return tmp }
        ret = xmlExpExpDeriveInt(ctxt, tmp, (*sub).field.children.f_right);
        xmlExpFree(ctxt, tmp);
        return ret
    }
    if (*sub).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
        tmp = xmlExpExpDeriveInt(ctxt, exp, (*sub).exp_left);
        if tmp == forbiddenExp { return tmp }
        if tmp.is_null() { return 0 as xmlExpNodePtr }
        ret = xmlExpExpDeriveInt(ctxt, exp, (*sub).field.children.f_right);
        if ret.is_null() || ret == forbiddenExp {
            xmlExpFree(ctxt, tmp);
            return ret
        }
        return xmlExpHashGetEntry(ctxt, XML_EXP_OR, tmp, ret,
                                  0 as *const xmlChar, 0 as std::os::raw::c_int,
                                  0 as std::os::raw::c_int)
    }
    if xmlExpCheckCard(exp, sub) == 0 { return forbiddenExp }
    match (*exp).type_0 as std::os::raw::c_int {
        0 => { if sub == emptyExp { return emptyExp } return forbiddenExp }
        1 => { return forbiddenExp }
        2 => {
            if (*sub).type_0 as std::os::raw::c_int == XML_EXP_ATOM as std::os::raw::c_int {
                /* TODO: handle wildcards */
                if (*exp).field.f_str == (*sub).field.f_str {
                    return emptyExp
                }
                return forbiddenExp
            }
            if (*sub).type_0 as std::os::raw::c_int == XML_EXP_COUNT as std::os::raw::c_int &&
                   (*sub).field.count.f_max == 1 as std::os::raw::c_int &&
                   (*(*sub).exp_left).type_0 as std::os::raw::c_int ==
                       XML_EXP_ATOM as std::os::raw::c_int {
                /* TODO: handle wildcards */
                if (*exp).field.f_str == (*(*sub).exp_left).field.f_str {
                    return emptyExp
                }
                return forbiddenExp
            }
            return forbiddenExp
        }
        3 => {
            /* try to get the sequence consumed only if possible */
            if xmlExpCheckCard((*exp).exp_left, sub) != 0 {
                /* See if the sequence can be consumed directly */
                ret = xmlExpExpDeriveInt(ctxt, (*exp).exp_left, sub);
                if ret != forbiddenExp && !ret.is_null() {
                    /*
		     * TODO: assumption here that we are determinist
		     *       i.e. we won't get to a nillable exp left
		     *       subset which could be matched by the right
		     *       part too.
		     * e.g.: (a | b)+,(a | c) and 'a+,a'
		     */
                    (*(*exp).field.children.f_right).ref_0 =
                        (*(*exp).field.children.f_right).ref_0.wrapping_add(1);
                    return xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, ret,
                                              (*exp).field.children.f_right,
                                              0 as *const xmlChar,
                                              0 as std::os::raw::c_int,
                                              0 as std::os::raw::c_int)
                }
            }
            /* Try instead to decompose */
            if (*sub).type_0 as std::os::raw::c_int == XML_EXP_COUNT as std::os::raw::c_int {
                let mut min: std::os::raw::c_int = 0;
                let mut max: std::os::raw::c_int = 0;
                ret =
                    xmlExpExpDeriveInt(ctxt, (*exp).exp_left,
                                       (*sub).exp_left);
                if ret.is_null() { return 0 as xmlExpNodePtr }
                if ret != forbiddenExp {
                    if (*sub).field.count.f_max < 0 as std::os::raw::c_int {
                        max = -(1 as std::os::raw::c_int)
                    } else {
                        max = (*sub).field.count.f_max - 1 as std::os::raw::c_int
                    }
                    if (*sub).field.count.f_min > 0 as std::os::raw::c_int {
                        min = (*sub).field.count.f_min - 1 as std::os::raw::c_int
                    } else { min = 0 as std::os::raw::c_int }
                    (*(*exp).field.children.f_right).ref_0 =
                        (*(*exp).field.children.f_right).ref_0.wrapping_add(1);
                    tmp =
                        xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, ret,
                                           (*exp).field.children.f_right,
                                           0 as *const xmlChar,
                                           0 as std::os::raw::c_int,
                                           0 as std::os::raw::c_int);
                    if tmp.is_null() { return 0 as xmlExpNodePtr }
                    (*(*sub).exp_left).ref_0 =
                        (*(*sub).exp_left).ref_0.wrapping_add(1);
                    tmp2 =
                        xmlExpHashGetEntry(ctxt, XML_EXP_COUNT,
                                           (*sub).exp_left,
                                           0 as xmlExpNodePtr,
                                           0 as *const xmlChar, min, max);
                    if tmp2.is_null() {
                        xmlExpFree(ctxt, tmp);
                        return 0 as xmlExpNodePtr
                    }
                    ret = xmlExpExpDeriveInt(ctxt, tmp, tmp2);
                    xmlExpFree(ctxt, tmp);
                    xmlExpFree(ctxt, tmp2);
                    return ret
                }
            }
        }
        4 => {
            ret = xmlExpExpDeriveInt(ctxt, (*exp).exp_left, sub);
            if ret.is_null() { return 0 as xmlExpNodePtr }
            tmp =
                xmlExpExpDeriveInt(ctxt, (*exp).field.children.f_right, sub);
            if tmp.is_null() {
                xmlExpFree(ctxt, ret);
                return 0 as xmlExpNodePtr
            }
            return xmlExpHashGetEntry(ctxt, XML_EXP_OR, ret, tmp,
                                      0 as *const xmlChar, 0 as std::os::raw::c_int,
                                      0 as std::os::raw::c_int)
        }
        5 => {
            let mut min_0: std::os::raw::c_int = 0;
            let mut max_0: std::os::raw::c_int = 0;
            if (*sub).type_0 as std::os::raw::c_int == XML_EXP_COUNT as std::os::raw::c_int {
                /*
		 * Try to see if the loop is completely subsumed
		 */
                tmp =
                    xmlExpExpDeriveInt(ctxt, (*exp).exp_left,
                                       (*sub).exp_left);
                if tmp.is_null() { return 0 as xmlExpNodePtr }
                if tmp == forbiddenExp {
                    let mut mult: std::os::raw::c_int = 0;
                    mult =
                        xmlExpDivide(ctxt, (*sub).exp_left, (*exp).exp_left,
                                     0 as *mut xmlExpNodePtr, &mut tmp);
                    if mult <= 0 as std::os::raw::c_int { return forbiddenExp }
                    if (*sub).field.count.f_max == -(1 as std::os::raw::c_int) {
                        max_0 = -(1 as std::os::raw::c_int);
                        if (*exp).field.count.f_max == -(1 as std::os::raw::c_int) {
                            if (*exp).field.count.f_min <=
                                   (*sub).field.count.f_min * mult {
                                min_0 = 0 as std::os::raw::c_int
                            } else {
                                min_0 =
                                    (*exp).field.count.f_min -
                                        (*sub).field.count.f_min * mult
                            }
                        } else { xmlExpFree(ctxt, tmp); return forbiddenExp }
                    } else if (*exp).field.count.f_max == -(1 as std::os::raw::c_int)
                     {
                        if (*exp).field.count.f_min >
                               (*sub).field.count.f_min * mult {
                            max_0 = -(1 as std::os::raw::c_int);
                            min_0 =
                                (*exp).field.count.f_min -
                                    (*sub).field.count.f_min * mult
                        } else {
                            max_0 = -(1 as std::os::raw::c_int);
                            min_0 = 0 as std::os::raw::c_int
                        }
                    } else {
                        if (*exp).field.count.f_max <
                               (*sub).field.count.f_max * mult {
                            xmlExpFree(ctxt, tmp);
                            return forbiddenExp
                        }
                        if (*sub).field.count.f_max * mult >
                               (*exp).field.count.f_min {
                            min_0 = 0 as std::os::raw::c_int
                        } else {
                            min_0 =
                                (*exp).field.count.f_min -
                                    (*sub).field.count.f_max * mult
                        }
                        max_0 =
                            (*exp).field.count.f_max -
                                (*sub).field.count.f_max * mult
                    }
                } else if (*tmp).info as std::os::raw::c_int &
                              XML_EXP_NILABLE as std::os::raw::c_int == 0 {
                    /*
		     * TODO: loop here to try to grow if working on finite
		     *       blocks.
		     */
                    xmlExpFree(ctxt, tmp);
                    return forbiddenExp
                } else {
                    if (*sub).field.count.f_max == -(1 as std::os::raw::c_int) {
                        if (*exp).field.count.f_max == -(1 as std::os::raw::c_int) {
                            if (*exp).field.count.f_min <=
                                   (*sub).field.count.f_min {
                                max_0 = -(1 as std::os::raw::c_int);
                                min_0 = 0 as std::os::raw::c_int
                            } else {
                                max_0 = -(1 as std::os::raw::c_int);
                                min_0 =
                                    (*exp).field.count.f_min -
                                        (*sub).field.count.f_min
                            }
                        } else if (*exp).field.count.f_min >
                                      (*sub).field.count.f_min {
                            xmlExpFree(ctxt, tmp);
                            return forbiddenExp
                        } else {
                            max_0 = -(1 as std::os::raw::c_int);
                            min_0 = 0 as std::os::raw::c_int
                        }
                    } else if (*exp).field.count.f_max == -(1 as std::os::raw::c_int)
                     {
                        if (*exp).field.count.f_min > (*sub).field.count.f_min
                           {
                            max_0 = -(1 as std::os::raw::c_int);
                            min_0 =
                                (*exp).field.count.f_min -
                                    (*sub).field.count.f_min
                        } else {
                            max_0 = -(1 as std::os::raw::c_int);
                            min_0 = 0 as std::os::raw::c_int
                        }
                    } else {
                        if (*exp).field.count.f_max < (*sub).field.count.f_max
                           {
                            xmlExpFree(ctxt, tmp);
                            return forbiddenExp
                        }
                        if (*sub).field.count.f_max > (*exp).field.count.f_min
                           {
                            min_0 = 0 as std::os::raw::c_int
                        } else {
                            min_0 =
                                (*exp).field.count.f_min -
                                    (*sub).field.count.f_max
                        }
                        max_0 =
                            (*exp).field.count.f_max -
                                (*sub).field.count.f_max
                    }
                }
                (*(*exp).exp_left).ref_0 =
                    (*(*exp).exp_left).ref_0.wrapping_add(1);
                tmp2 =
                    xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, (*exp).exp_left,
                                       0 as xmlExpNodePtr,
                                       0 as *const xmlChar, min_0, max_0);
                if tmp2.is_null() { return 0 as xmlExpNodePtr }
                ret =
                    xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, tmp, tmp2,
                                       0 as *const xmlChar, 0 as std::os::raw::c_int,
                                       0 as std::os::raw::c_int);
                return ret
            }
            tmp = xmlExpExpDeriveInt(ctxt, (*exp).exp_left, sub);
            if tmp.is_null() { return 0 as xmlExpNodePtr }
            if tmp == forbiddenExp { return forbiddenExp }
            if (*exp).field.count.f_min > 0 as std::os::raw::c_int {
                min_0 = (*exp).field.count.f_min - 1 as std::os::raw::c_int
            } else { min_0 = 0 as std::os::raw::c_int }
            if (*exp).field.count.f_max < 0 as std::os::raw::c_int {
                max_0 = -(1 as std::os::raw::c_int)
            } else { max_0 = (*exp).field.count.f_max - 1 as std::os::raw::c_int }
            (*(*exp).exp_left).ref_0 =
                (*(*exp).exp_left).ref_0.wrapping_add(1);
            tmp2 =
                xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, (*exp).exp_left,
                                   0 as xmlExpNodePtr, 0 as *const xmlChar,
                                   min_0, max_0);
            if tmp2.is_null() { return 0 as xmlExpNodePtr }
            ret =
                xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, tmp, tmp2,
                                   0 as *const xmlChar, 0 as std::os::raw::c_int,
                                   0 as std::os::raw::c_int);
            return ret
        }
        _ => { }
    }
    if (*sub).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int != 0 {
        if (*exp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int == 0 {
            return forbiddenExp
        } else { ret = emptyExp }
    } else { ret = 0 as xmlExpNodePtr }
    /*
     * here the structured derivation made no progress so
     * we use the default token based derivation to force one more step
     */
    if (*ctxt).tabSize == 0 as std::os::raw::c_int {
        (*ctxt).tabSize = 40 as std::os::raw::c_int
    }
    tab =
        xmlMalloc.expect("non-null function pointer")(((*ctxt).tabSize as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<*const xmlChar>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut *const xmlChar;
    if tab.is_null() { return 0 as xmlExpNodePtr }
    /*
     * collect all the strings accepted by the subexpression on input
     */
    len =
        xmlExpGetStartInt(ctxt, sub, tab, (*ctxt).tabSize, 0 as std::os::raw::c_int);
    while len < 0 as std::os::raw::c_int {
        let mut temp: *mut *const xmlChar = 0 as *mut *const xmlChar;
        temp =
            xmlRealloc.expect("non-null function pointer")(tab as
                                                               *mut *mut xmlChar
                                                               as
                                                               *mut std::os::raw::c_void,
                                                           (((*ctxt).tabSize *
                                                                 2 as
                                                                     std::os::raw::c_int)
                                                                as
                                                                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<*const xmlChar>()
                                                                                                as
                                                                                                std::os::raw::c_ulong))
                as *mut *const xmlChar;
        if temp.is_null() {
            xmlFree.expect("non-null function pointer")(tab as
                                                            *mut *mut xmlChar
                                                            as
                                                            *mut std::os::raw::c_void);
            return 0 as xmlExpNodePtr
        }
        tab = temp;
        (*ctxt).tabSize *= 2 as std::os::raw::c_int;
        len =
            xmlExpGetStartInt(ctxt, sub, tab, (*ctxt).tabSize,
                              0 as std::os::raw::c_int)
    }
    i = 0 as std::os::raw::c_int;
    while i < len {
        tmp = xmlExpStringDeriveInt(ctxt, exp, *tab.offset(i as isize));
        if tmp.is_null() || tmp == forbiddenExp {
            xmlExpFree(ctxt, ret);
            xmlFree.expect("non-null function pointer")(tab as
                                                            *mut *mut xmlChar
                                                            as
                                                            *mut std::os::raw::c_void);
            return tmp
        }
        tmp2 = xmlExpStringDeriveInt(ctxt, sub, *tab.offset(i as isize));
        if tmp2.is_null() || tmp2 == forbiddenExp {
            xmlExpFree(ctxt, tmp);
            xmlExpFree(ctxt, ret);
            xmlFree.expect("non-null function pointer")(tab as
                                                            *mut *mut xmlChar
                                                            as
                                                            *mut std::os::raw::c_void);
            return tmp
        }
        tmp3 = xmlExpExpDeriveInt(ctxt, tmp, tmp2);
        xmlExpFree(ctxt, tmp);
        xmlExpFree(ctxt, tmp2);
        if tmp3.is_null() || tmp3 == forbiddenExp {
            xmlExpFree(ctxt, ret);
            xmlFree.expect("non-null function pointer")(tab as
                                                            *mut *mut xmlChar
                                                            as
                                                            *mut std::os::raw::c_void);
            return tmp3
        }
        if ret.is_null() {
            ret = tmp3
        } else {
            ret =
                xmlExpHashGetEntry(ctxt, XML_EXP_OR, ret, tmp3,
                                   0 as *const xmlChar, 0 as std::os::raw::c_int,
                                   0 as std::os::raw::c_int);
            if ret.is_null() {
                xmlFree.expect("non-null function pointer")(tab as
                                                                *mut *mut xmlChar
                                                                as
                                                                *mut std::os::raw::c_void);
                return 0 as xmlExpNodePtr
            }
        }
        i += 1
    }
    xmlFree.expect("non-null function pointer")(tab as *mut *mut xmlChar as
                                                    *mut std::os::raw::c_void);
    return ret;
}
/* *
 * xmlExpExpDerive:
 * @ctxt: the expressions context
 * @exp: the englobing expression
 * @sub: the subexpression
 *
 * Evaluates the expression resulting from @exp consuming a sub expression @sub
 * Based on algebraic derivation and sometimes direct Brzozowski derivation
 * it usually tatkes less than linear time and can handle expressions generating
 * infinite languages.
 *
 * Returns the resulting expression or NULL in case of internal error, the
 *         result must be freed
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpExpDerive(mut ctxt: xmlExpCtxtPtr,
                                         mut exp: xmlExpNodePtr,
                                         mut sub: xmlExpNodePtr)
 -> xmlExpNodePtr {
    if exp.is_null() || ctxt.is_null() || sub.is_null() {
        return 0 as xmlExpNodePtr
    }
    /*
     * O(1) speedups
     */
    if (*sub).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int != 0 &&
           (*exp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int == 0 {
        return forbiddenExp
    }
    if xmlExpCheckCard(exp, sub) == 0 as std::os::raw::c_int { return forbiddenExp }
    return xmlExpExpDeriveInt(ctxt, exp, sub);
}
/* *
 * xmlExpSubsume:
 * @ctxt: the expressions context
 * @exp: the englobing expression
 * @sub: the subexpression
 *
 * Check whether @exp accepts all the languages accexpted by @sub
 * the input being a subexpression.
 *
 * Returns 1 if true 0 if false and -1 in case of failure.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpSubsume(mut ctxt: xmlExpCtxtPtr,
                                       mut exp: xmlExpNodePtr,
                                       mut sub: xmlExpNodePtr)
 -> std::os::raw::c_int {
    let mut tmp: xmlExpNodePtr = 0 as *mut xmlExpNode;
    if exp.is_null() || ctxt.is_null() || sub.is_null() {
        return -(1 as std::os::raw::c_int)
    }
    /*
     * TODO: speedup by checking the language of sub is a subset of the
     *       language of exp
     */
    /*
     * O(1) speedups
     */
    if (*sub).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int != 0 &&
           (*exp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int == 0 {
        return 0 as std::os::raw::c_int
    }
    if xmlExpCheckCard(exp, sub) == 0 as std::os::raw::c_int {
        return 0 as std::os::raw::c_int
    }
    tmp = xmlExpExpDeriveInt(ctxt, exp, sub);
    if tmp.is_null() { return -(1 as std::os::raw::c_int) }
    if tmp == forbiddenExp { return 0 as std::os::raw::c_int }
    if tmp == emptyExp { return 1 as std::os::raw::c_int }
    if !tmp.is_null() &&
           (*tmp).info as std::os::raw::c_int & XML_EXP_NILABLE as std::os::raw::c_int != 0 {
        xmlExpFree(ctxt, tmp);
        return 1 as std::os::raw::c_int
    }
    xmlExpFree(ctxt, tmp);
    return 0 as std::os::raw::c_int;
}
unsafe extern "C" fn xmlExpParseNumber(mut ctxt: xmlExpCtxtPtr)
 -> std::os::raw::c_int {
    let mut ret: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        return -(1 as std::os::raw::c_int)
    }
    if (*(*ctxt).cur as std::os::raw::c_int) < '0' as i32 ||
           *(*ctxt).cur as std::os::raw::c_int > '9' as i32 {
        return -(1 as std::os::raw::c_int)
    }
    while *(*ctxt).cur as std::os::raw::c_int >= '0' as i32 &&
              *(*ctxt).cur as std::os::raw::c_int <= '9' as i32 {
        ret =
            ret * 10 as std::os::raw::c_int +
                (*(*ctxt).cur as std::os::raw::c_int - '0' as i32);
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    return ret;
}
unsafe extern "C" fn xmlExpParseOr(mut ctxt: xmlExpCtxtPtr) -> xmlExpNodePtr {
    let mut base: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut val: *const xmlChar = 0 as *const xmlChar;
    while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    base = (*ctxt).cur;
    if *(*ctxt).cur as std::os::raw::c_int == '(' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        ret = xmlExpParseExpr(ctxt);
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
        if *(*ctxt).cur as std::os::raw::c_int != ')' as i32 {
            fprintf(stderr,
                    b"unbalanced \'(\' : %s\n\x00" as *const u8 as
                        *const std::os::raw::c_char, base);
            xmlExpFree(ctxt, ret);
            return 0 as xmlExpNodePtr
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    } else {
        while *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int &&
                  !(*(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                        *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                        *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                        *(*ctxt).cur as std::os::raw::c_int == '\t' as i32) &&
                  *(*ctxt).cur as std::os::raw::c_int != '(' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != ')' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '|' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != ',' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '{' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '*' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '+' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '?' as i32 &&
                  *(*ctxt).cur as std::os::raw::c_int != '}' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
        val =
            xmlDictLookup((*ctxt).dict, base as *mut xmlChar,
                          (*ctxt).cur.offset_from(base) as
                              std::os::raw::c_long as std::os::raw::c_int);
        if val.is_null() { return 0 as xmlExpNodePtr }
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_ATOM, 0 as xmlExpNodePtr,
                               0 as xmlExpNodePtr, val, 0 as std::os::raw::c_int,
                               0 as std::os::raw::c_int);
        if ret.is_null() { return 0 as xmlExpNodePtr }
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    }
    if *(*ctxt).cur as std::os::raw::c_int == '{' as i32 {
        let mut min: std::os::raw::c_int = 0;
        let mut max: std::os::raw::c_int = 0;
        (*ctxt).cur = (*ctxt).cur.offset(1);
        min = xmlExpParseNumber(ctxt);
        if min < 0 as std::os::raw::c_int {
            xmlExpFree(ctxt, ret);
            return 0 as xmlExpNodePtr
        }
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
        if *(*ctxt).cur as std::os::raw::c_int == ',' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1);
            max = xmlExpParseNumber(ctxt);
            while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                      *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                      *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                      *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
                (*ctxt).cur = (*ctxt).cur.offset(1)
            }
        } else { max = min }
        if *(*ctxt).cur as std::os::raw::c_int != '}' as i32 {
            xmlExpFree(ctxt, ret);
            return 0 as xmlExpNodePtr
        }
        (*ctxt).cur = (*ctxt).cur.offset(1);
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, ret, 0 as xmlExpNodePtr,
                               0 as *const xmlChar, min, max);
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    } else if *(*ctxt).cur as std::os::raw::c_int == '?' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, ret, 0 as xmlExpNodePtr,
                               0 as *const xmlChar, 0 as std::os::raw::c_int,
                               1 as std::os::raw::c_int);
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    } else if *(*ctxt).cur as std::os::raw::c_int == '+' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, ret, 0 as xmlExpNodePtr,
                               0 as *const xmlChar, 1 as std::os::raw::c_int,
                               -(1 as std::os::raw::c_int));
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    } else if *(*ctxt).cur as std::os::raw::c_int == '*' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_COUNT, ret, 0 as xmlExpNodePtr,
                               0 as *const xmlChar, 0 as std::os::raw::c_int,
                               -(1 as std::os::raw::c_int));
        while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
                  *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
            (*ctxt).cur = (*ctxt).cur.offset(1)
        }
    }
    return ret;
}
unsafe extern "C" fn xmlExpParseSeq(mut ctxt: xmlExpCtxtPtr)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut right: xmlExpNodePtr = 0 as *mut xmlExpNode;
    ret = xmlExpParseOr(ctxt);
    while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    while *(*ctxt).cur as std::os::raw::c_int == '|' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        right = xmlExpParseOr(ctxt);
        if right.is_null() {
            xmlExpFree(ctxt, ret);
            return 0 as xmlExpNodePtr
        }
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_OR, ret, right,
                               0 as *const xmlChar, 0 as std::os::raw::c_int,
                               0 as std::os::raw::c_int);
        if ret.is_null() { return 0 as xmlExpNodePtr }
    }
    return ret;
}
/* ***********************************************************************
 *									*
 *			Parsing expression				*
 *									*
 ************************************************************************/
unsafe extern "C" fn xmlExpParseExpr(mut ctxt: xmlExpCtxtPtr)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    let mut right: xmlExpNodePtr = 0 as *mut xmlExpNode;
    ret = xmlExpParseSeq(ctxt);
    while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    while *(*ctxt).cur as std::os::raw::c_int == ',' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1);
        right = xmlExpParseSeq(ctxt);
        if right.is_null() {
            xmlExpFree(ctxt, ret);
            return 0 as xmlExpNodePtr
        }
        ret =
            xmlExpHashGetEntry(ctxt, XML_EXP_SEQ, ret, right,
                               0 as *const xmlChar, 0 as std::os::raw::c_int,
                               0 as std::os::raw::c_int);
        if ret.is_null() { return 0 as xmlExpNodePtr }
    }
    return ret;
}
/* *
 * xmlExpParse:
 * @ctxt: the expressions context
 * @expr: the 0 terminated string
 *
 * Minimal parser for regexps, it understand the following constructs
 *  - string terminals
 *  - choice operator |
 *  - sequence operator ,
 *  - subexpressions (...)
 *  - usual cardinality operators + * and ?
 *  - finite sequences  { min, max }
 *  - infinite sequences { min, * }
 * There is minimal checkings made especially no checking on strings values
 *
 * Returns a new expression or NULL in case of failure
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpParse(mut ctxt: xmlExpCtxtPtr,
                                     mut expr: *const std::os::raw::c_char)
 -> xmlExpNodePtr {
    let mut ret: xmlExpNodePtr = 0 as *mut xmlExpNode;
    (*ctxt).expr = expr;
    (*ctxt).cur = expr;
    ret = xmlExpParseExpr(ctxt);
    while *(*ctxt).cur as std::os::raw::c_int == ' ' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\n' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\r' as i32 ||
              *(*ctxt).cur as std::os::raw::c_int == '\t' as i32 {
        (*ctxt).cur = (*ctxt).cur.offset(1)
    }
    if *(*ctxt).cur as std::os::raw::c_int != 0 as std::os::raw::c_int {
        xmlExpFree(ctxt, ret);
        return 0 as xmlExpNodePtr
    }
    return ret;
}
unsafe extern "C" fn xmlExpDumpInt(mut buf: xmlBufferPtr,
                                   mut expr: xmlExpNodePtr,
                                   mut glob: std::os::raw::c_int) {
    let mut c: xmlExpNodePtr = 0 as *mut xmlExpNode;
    if expr.is_null() { return }
    if glob != 0 {
        xmlBufferWriteChar(buf, b"(\x00" as *const u8 as *const std::os::raw::c_char);
    }
    match (*expr).type_0 as std::os::raw::c_int {
        0 => {
            xmlBufferWriteChar(buf,
                               b"empty\x00" as *const u8 as
                                   *const std::os::raw::c_char);
        }
        1 => {
            xmlBufferWriteChar(buf,
                               b"forbidden\x00" as *const u8 as
                                   *const std::os::raw::c_char);
        }
        2 => { xmlBufferWriteCHAR(buf, (*expr).field.f_str); }
        3 => {
            c = (*expr).exp_left;
            if (*c).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
                   (*c).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
                xmlExpDumpInt(buf, c, 1 as std::os::raw::c_int);
            } else { xmlExpDumpInt(buf, c, 0 as std::os::raw::c_int); }
            xmlBufferWriteChar(buf,
                               b" , \x00" as *const u8 as
                                   *const std::os::raw::c_char);
            c = (*expr).field.children.f_right;
            if (*c).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
                   (*c).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
                xmlExpDumpInt(buf, c, 1 as std::os::raw::c_int);
            } else { xmlExpDumpInt(buf, c, 0 as std::os::raw::c_int); }
        }
        4 => {
            c = (*expr).exp_left;
            if (*c).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
                   (*c).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
                xmlExpDumpInt(buf, c, 1 as std::os::raw::c_int);
            } else { xmlExpDumpInt(buf, c, 0 as std::os::raw::c_int); }
            xmlBufferWriteChar(buf,
                               b" | \x00" as *const u8 as
                                   *const std::os::raw::c_char);
            c = (*expr).field.children.f_right;
            if (*c).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
                   (*c).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
                xmlExpDumpInt(buf, c, 1 as std::os::raw::c_int);
            } else { xmlExpDumpInt(buf, c, 0 as std::os::raw::c_int); }
        }
        5 => {
            let mut rep: [std::os::raw::c_char; 40] = [0; 40];
            c = (*expr).exp_left;
            if (*c).type_0 as std::os::raw::c_int == XML_EXP_SEQ as std::os::raw::c_int ||
                   (*c).type_0 as std::os::raw::c_int == XML_EXP_OR as std::os::raw::c_int {
                xmlExpDumpInt(buf, c, 1 as std::os::raw::c_int);
            } else { xmlExpDumpInt(buf, c, 0 as std::os::raw::c_int); }
            if (*expr).field.count.f_min == 0 as std::os::raw::c_int &&
                   (*expr).field.count.f_max == 1 as std::os::raw::c_int {
                rep[0 as std::os::raw::c_int as usize] = '?' as i32 as std::os::raw::c_char;
                rep[1 as std::os::raw::c_int as usize] =
                    0 as std::os::raw::c_int as std::os::raw::c_char
            } else if (*expr).field.count.f_min == 0 as std::os::raw::c_int &&
                          (*expr).field.count.f_max == -(1 as std::os::raw::c_int) {
                rep[0 as std::os::raw::c_int as usize] = '*' as i32 as std::os::raw::c_char;
                rep[1 as std::os::raw::c_int as usize] =
                    0 as std::os::raw::c_int as std::os::raw::c_char
            } else if (*expr).field.count.f_min == 1 as std::os::raw::c_int &&
                          (*expr).field.count.f_max == -(1 as std::os::raw::c_int) {
                rep[0 as std::os::raw::c_int as usize] = '+' as i32 as std::os::raw::c_char;
                rep[1 as std::os::raw::c_int as usize] =
                    0 as std::os::raw::c_int as std::os::raw::c_char
            } else if (*expr).field.count.f_max == (*expr).field.count.f_min {
                snprintf(rep.as_mut_ptr(), 39 as std::os::raw::c_int as std::os::raw::c_ulong,
                         b"{%d}\x00" as *const u8 as *const std::os::raw::c_char,
                         (*expr).field.count.f_min);
            } else if (*expr).field.count.f_max < 0 as std::os::raw::c_int {
                snprintf(rep.as_mut_ptr(), 39 as std::os::raw::c_int as std::os::raw::c_ulong,
                         b"{%d,inf}\x00" as *const u8 as *const std::os::raw::c_char,
                         (*expr).field.count.f_min);
            } else {
                snprintf(rep.as_mut_ptr(), 39 as std::os::raw::c_int as std::os::raw::c_ulong,
                         b"{%d,%d}\x00" as *const u8 as *const std::os::raw::c_char,
                         (*expr).field.count.f_min,
                         (*expr).field.count.f_max);
            }
            rep[39 as std::os::raw::c_int as usize] =
                0 as std::os::raw::c_int as std::os::raw::c_char;
            xmlBufferWriteChar(buf, rep.as_mut_ptr());
        }
        _ => {
            fprintf(stderr,
                    b"Error in tree\n\x00" as *const u8 as
                        *const std::os::raw::c_char);
        }
    }
    if glob != 0 {
        xmlBufferWriteChar(buf, b")\x00" as *const u8 as *const std::os::raw::c_char);
    };
}
/* *
 * xmlExpDump:
 * @buf:  a buffer to receive the output
 * @expr:  the compiled expression
 *
 * Serialize the expression as compiled to the buffer
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpDump(mut buf: xmlBufferPtr,
                                    mut expr: xmlExpNodePtr) {
    if buf.is_null() || expr.is_null() { return }
    xmlExpDumpInt(buf, expr, 0 as std::os::raw::c_int);
}
/* Expressions are trees but the tree is opaque */
/*
 * 2 core expressions shared by all for the empty language set
 * and for the set with just the empty token
 */
/*
 * Expressions are reference counted internally
 */
/*
 * constructors can be either manual or from a string
 */
/*
 * The really interesting APIs
 */
/* *
 * xmlExpMaxToken:
 * @expr: a compiled expression
 *
 * Indicate the maximum number of input a expression can accept
 *
 * Returns the maximum length or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpMaxToken(mut expr: xmlExpNodePtr)
 -> std::os::raw::c_int {
    if expr.is_null() { return -(1 as std::os::raw::c_int) }
    return (*expr).c_max;
}
/* *
 * xmlExpCtxtNbNodes:
 * @ctxt: an expression context
 *
 * Debugging facility provides the number of allocated nodes at a that point
 *
 * Returns the number of nodes in use or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpCtxtNbNodes(mut ctxt: xmlExpCtxtPtr)
 -> std::os::raw::c_int {
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    return (*ctxt).nb_nodes;
}
/*
 * Summary: regular expressions handling
 * Description: basic API for libxml regular expressions handling used
 *              for XML Schemas and validation.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlRegexpPtr:
 *
 * A libxml regular expression, they can actually be far more complex
 * thank the POSIX regex expressions.
 */
/* *
 * xmlRegExecCtxtPtr:
 *
 * A libxml progressive regular expression evaluation context
 */
/*
 * The POSIX like API
 */
/* *
 * xmlRegExecCallbacks:
 * @exec: the regular expression context
 * @token: the current token string
 * @transdata: transition data
 * @inputdata: input data
 *
 * Callback function when doing a transition in the automata
 */
/*
 * The progressive API
 */
/*
 * Formal regular expression handling
 * Its goal is to do some formal work on content models
 */
/* expressions are used within a context */
/* *
 * xmlExpCtxtNbCons:
 * @ctxt: an expression context
 *
 * Debugging facility provides the number of allocated nodes over lifetime
 *
 * Returns the number of nodes ever allocated or -1 in case of error
 */
#[no_mangle]
pub unsafe extern "C" fn xmlExpCtxtNbCons(mut ctxt: xmlExpCtxtPtr)
 -> std::os::raw::c_int {
    if ctxt.is_null() { return -(1 as std::os::raw::c_int) }
    return (*ctxt).nb_cons;
}
/* LIBXML_REGEXP_ENABLED */
/* __INCLUDE_ELFGCCHACK */
/* LIBXML_EXPR_ENABLED */


use ::c2rust_asm_casts;
use c2rust_asm_casts::AsmCastTrait;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type _xmlBuf;
    pub type _xmlDict;
    pub type _xmlHashTable;
    pub type _xmlAutomataState;
    pub type _xmlAutomata;
    pub type _xmlValidState;
    pub type _xmlRelaxNG;
    pub type _xmlRelaxNGValidCtxt;
    /*
    XML_SCHEMA_VAL_XSI_ASSEMBLE			= 1<<1,
	* assemble schemata using
	* xsi:schemaLocation and
	* xsi:noNamespaceSchemaLocation
*/
    /* *
 * The schemas related types are kept internal
 */
    pub type _xmlSchema;
    pub type _xmlSchemaValidCtxt;
    pub type _xmlPattern;
    pub type _xmlXIncludeCtxt;
    pub type _xmlTextWriter;
    #[no_mangle]
    static mut stdout: *mut FILE;
    #[no_mangle]
    static mut stderr: *mut FILE;
    #[no_mangle]
    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn vfprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn snprintf(_: *mut std::os::raw::c_char, _: std::os::raw::c_ulong,
                _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn vsnprintf(_: *mut std::os::raw::c_char, _: std::os::raw::c_ulong,
                 _: *const std::os::raw::c_char, _: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn __xmlIOErr(domain: std::os::raw::c_int, code: std::os::raw::c_int,
                  extra: *const std::os::raw::c_char);
    #[no_mangle]
    fn xmlStrlen(str: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    /* LIBXML_TREE_ENABLED */
    /*
 * Navigating.
 */
    #[no_mangle]
    fn xmlGetLineNo(node: *const xmlNode) -> std::os::raw::c_long;
    #[no_mangle]
    fn xmlGetProp(node: *const xmlNode, name: *const xmlChar) -> *mut xmlChar;
    #[no_mangle]
    fn xmlParserPrintFileContext(input: xmlParserInputPtr);
    /*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 */
    /* *
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /* *
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
 */
    /*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 */
    /* *
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
 */
    /* *
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
 */
    /* * DOC_DISABLE */
/*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 */
    /* !LIBXML_THREAD_ALLOC_ENABLED */
    /* LIBXML_THREAD_ALLOC_ENABLED */
    /*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 */
    #[no_mangle]
    fn __xmlGenericErrorContext() -> *mut *mut std::os::raw::c_void;
    #[no_mangle]
    fn __xmlGenericError() -> *mut xmlGenericErrorFunc;
    #[no_mangle]
    fn xmlParserPrintFileInfo(input: xmlParserInputPtr);
    #[no_mangle]
    static mut xmlFree: xmlFreeFunc;
    #[no_mangle]
    static mut xmlRealloc: xmlReallocFunc;
    #[no_mangle]
    static mut xmlMalloc: xmlMallocFunc;
    #[no_mangle]
    fn xmlResetError(err: xmlErrorPtr);
    #[no_mangle]
    fn xmlCopyError(from: xmlErrorPtr, to: xmlErrorPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn __xmlLastError() -> *mut xmlError;
    #[no_mangle]
    fn __xmlStructuredError() -> *mut xmlStructuredErrorFunc;
    #[no_mangle]
    fn __xmlStructuredErrorContext() -> *mut *mut std::os::raw::c_void;
    #[no_mangle]
    fn __xmlGetWarningsDefaultValue() -> *mut std::os::raw::c_int;
    /* LIBXML_LEGACY_ENABLED */
    #[no_mangle]
    fn xmlEncodeEntitiesReentrant(doc: xmlDocPtr, input: *const xmlChar)
     -> *mut xmlChar;
    #[no_mangle]
    fn select(__nfds: std::os::raw::c_int, __readfds: *mut fd_set,
              __writefds: *mut fd_set, __exceptfds: *mut fd_set,
              __timeout: *mut timeval) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatComment(writer: xmlTextWriterPtr,
                                        format: *const std::os::raw::c_char,
                                        argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatElement(writer: xmlTextWriterPtr,
                                        name: *const xmlChar,
                                        format: *const std::os::raw::c_char,
                                        argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatElementNS(writer: xmlTextWriterPtr,
                                          prefix: *const xmlChar,
                                          name: *const xmlChar,
                                          namespaceURI: *const xmlChar,
                                          format: *const std::os::raw::c_char,
                                          argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatRaw(writer: xmlTextWriterPtr,
                                    format: *const std::os::raw::c_char,
                                    argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatString(writer: xmlTextWriterPtr,
                                       format: *const std::os::raw::c_char,
                                       argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatAttribute(writer: xmlTextWriterPtr,
                                          name: *const xmlChar,
                                          format: *const std::os::raw::c_char,
                                          argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatAttributeNS(writer: xmlTextWriterPtr,
                                            prefix: *const xmlChar,
                                            name: *const xmlChar,
                                            namespaceURI: *const xmlChar,
                                            format: *const std::os::raw::c_char,
                                            argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatPI(writer: xmlTextWriterPtr,
                                   target: *const xmlChar,
                                   format: *const std::os::raw::c_char,
                                   argptr: ::std::ffi::VaList) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatCDATA(writer: xmlTextWriterPtr,
                                      format: *const std::os::raw::c_char,
                                      argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatDTD(writer: xmlTextWriterPtr,
                                    name: *const xmlChar,
                                    pubid: *const xmlChar,
                                    sysid: *const xmlChar,
                                    format: *const std::os::raw::c_char,
                                    argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatDTDElement(writer: xmlTextWriterPtr,
                                           name: *const xmlChar,
                                           format: *const std::os::raw::c_char,
                                           argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatDTDAttlist(writer: xmlTextWriterPtr,
                                           name: *const xmlChar,
                                           format: *const std::os::raw::c_char,
                                           argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlTextWriterWriteVFormatDTDInternalEntity(writer: xmlTextWriterPtr,
                                                  pe: std::os::raw::c_int,
                                                  name: *const xmlChar,
                                                  format: *const std::os::raw::c_char,
                                                  argptr: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    /*
 * Used by variadic.c
 */
    #[no_mangle]
    fn xmlWriterErrMsg(ctxt: xmlTextWriterPtr, error: xmlParserErrors,
                       msg: *const std::os::raw::c_char);
    #[no_mangle]
    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;
    /*
 * Rather internal commands.
 */
    #[no_mangle]
    fn xmlNanoFTPGetResponse(ctx: *mut std::os::raw::c_void) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlNanoFTPReadResponse(ctx: *mut std::os::raw::c_void) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlReportError(err: xmlErrorPtr, ctxt: xmlParserCtxtPtr,
                      str: *const std::os::raw::c_char, channel: xmlGenericErrorFunc,
                      data: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlTextReaderGenericError(ctxt: *mut std::os::raw::c_void,
                                 severity: xmlParserSeverities,
                                 str: *mut std::os::raw::c_char);
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: std::os::raw::c_uint,
    pub fp_offset: std::os::raw::c_uint,
    pub overflow_arg_area: *mut std::os::raw::c_void,
    pub reg_save_area: *mut std::os::raw::c_void,
}
pub type va_list = __builtin_va_list;
pub type xmlChar = std::os::raw::c_uchar;
pub type size_t = std::os::raw::c_ulong;
pub type __off_t = std::os::raw::c_long;
pub type __off64_t = std::os::raw::c_long;
pub type __time_t = std::os::raw::c_long;
pub type __suseconds_t = std::os::raw::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: std::os::raw::c_int,
    pub _IO_read_ptr: *mut std::os::raw::c_char,
    pub _IO_read_end: *mut std::os::raw::c_char,
    pub _IO_read_base: *mut std::os::raw::c_char,
    pub _IO_write_base: *mut std::os::raw::c_char,
    pub _IO_write_ptr: *mut std::os::raw::c_char,
    pub _IO_write_end: *mut std::os::raw::c_char,
    pub _IO_buf_base: *mut std::os::raw::c_char,
    pub _IO_buf_end: *mut std::os::raw::c_char,
    pub _IO_save_base: *mut std::os::raw::c_char,
    pub _IO_backup_base: *mut std::os::raw::c_char,
    pub _IO_save_end: *mut std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: std::os::raw::c_int,
    pub _flags2: std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: std::os::raw::c_ushort,
    pub _vtable_offset: std::os::raw::c_schar,
    pub _shortbuf: [std::os::raw::c_char; 1],
    pub _lock: *mut std::os::raw::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: std::os::raw::c_int,
    pub _unused2: [std::os::raw::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
/*
 * Summary: interface for the I/O interfaces used by the parser
 * Description: interface for the I/O interfaces used by the parser
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Those are the functions and datatypes for the parser input
 * I/O structures.
 */
/* *
 * xmlInputMatchCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Input API to detect if the current handler
 * can provide input fonctionnalities for this resource.
 *
 * Returns 1 if yes and 0 if another Input module should be used
 */
/* *
 * xmlInputOpenCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Input API to open the resource
 *
 * Returns an Input context or NULL in case or error
 */
/* *
 * xmlInputReadCallback:
 * @context:  an Input context
 * @buffer:  the buffer to store data read
 * @len:  the length of the buffer in bytes
 *
 * Callback used in the I/O Input API to read the resource
 *
 * Returns the number of bytes read or -1 in case of error
 */
/* *
 * xmlInputCloseCallback:
 * @context:  an Input context
 *
 * Callback used in the I/O Input API to close the resource
 *
 * Returns 0 or -1 in case of error
 */
/*
 * Those are the functions and datatypes for the library output
 * I/O structures.
 */
/* *
 * xmlOutputMatchCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Output API to detect if the current handler
 * can provide output fonctionnalities for this resource.
 *
 * Returns 1 if yes and 0 if another Output module should be used
 */
/* *
 * xmlOutputOpenCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Output API to open the resource
 *
 * Returns an Output context or NULL in case or error
 */
/* *
 * xmlOutputWriteCallback:
 * @context:  an Output context
 * @buffer:  the buffer of data to write
 * @len:  the length of the buffer in bytes
 *
 * Callback used in the I/O Output API to write to the resource
 *
 * Returns the number of bytes written or -1 in case of error
 */
/* *
 * xmlOutputCloseCallback:
 * @context:  an Output context
 *
 * Callback used in the I/O Output API to close the resource
 *
 * Returns 0 or -1 in case of error
 */
/* LIBXML_OUTPUT_ENABLED */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
    pub compressed: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
    pub rawconsumed: std::os::raw::c_ulong,
}
pub type xmlBufPtr = *mut xmlBuf;
pub type xmlBuf = _xmlBuf;
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
/* *
 * xmlCharEncodingInputFunc:
 * @out:  a pointer to an array of bytes to store the UTF-8 result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of chars in the original encoding
 * @inlen:  the length of @in
 *
 * Take a block of chars in the original encoding and try to convert
 * it to an UTF-8 block of chars out.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets consumed.
 */
/* *
 * xmlCharEncodingOutputFunc:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of UTF-8 chars
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and try to convert it to another
 * encoding.
 * Note: a first call designed to produce heading info is called with
 * in = NULL. If stateful this should also initialize the encoder state.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets produced.
 */
/*
 * Block defining the handlers for non UTF-8 encodings.
 * If iconv is supported, there are two extra fields.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut std::os::raw::c_void;
pub type xmlCharEncodingOutputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlCharEncodingInputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlInputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlInputReadCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *mut std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const std::os::raw::c_char,
    pub directory: *const std::os::raw::c_char,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
    pub length: std::os::raw::c_int,
    pub line: std::os::raw::c_int,
    pub col: std::os::raw::c_int,
    pub consumed: std::os::raw::c_ulong,
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub id: std::os::raw::c_int,
}
pub type xmlParserInputDeallocate
    =
    Option<unsafe extern "C" fn(_: *mut xmlChar) -> ()>;
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut std::os::raw::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: std::os::raw::c_int,
    pub replaceEntities: std::os::raw::c_int,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub html: std::os::raw::c_int,
    pub input: xmlParserInputPtr,
    pub inputNr: std::os::raw::c_int,
    pub inputMax: std::os::raw::c_int,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: std::os::raw::c_int,
    pub node_seq: xmlParserNodeInfoSeq,
    pub errNo: std::os::raw::c_int,
    pub hasExternalSubset: std::os::raw::c_int,
    pub hasPErefs: std::os::raw::c_int,
    pub external: std::os::raw::c_int,
    pub valid: std::os::raw::c_int,
    pub validate: std::os::raw::c_int,
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: std::os::raw::c_int,
    pub directory: *mut std::os::raw::c_char,
    pub name: *const xmlChar,
    pub nameNr: std::os::raw::c_int,
    pub nameMax: std::os::raw::c_int,
    pub nameTab: *mut *const xmlChar,
    pub nbChars: std::os::raw::c_long,
    pub checkIndex: std::os::raw::c_long,
    pub keepBlanks: std::os::raw::c_int,
    pub disableSAX: std::os::raw::c_int,
    pub inSubset: std::os::raw::c_int,
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut std::os::raw::c_int,
    pub spaceNr: std::os::raw::c_int,
    pub spaceMax: std::os::raw::c_int,
    pub spaceTab: *mut std::os::raw::c_int,
    pub depth: std::os::raw::c_int,
    pub entity: xmlParserInputPtr,
    pub charset: std::os::raw::c_int,
    pub nodelen: std::os::raw::c_int,
    pub nodemem: std::os::raw::c_int,
    pub pedantic: std::os::raw::c_int,
    pub _private: *mut std::os::raw::c_void,
    pub loadsubset: std::os::raw::c_int,
    pub linenumbers: std::os::raw::c_int,
    pub catalogs: *mut std::os::raw::c_void,
    pub recovery: std::os::raw::c_int,
    pub progressive: std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: std::os::raw::c_int,
    pub docdict: std::os::raw::c_int,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: std::os::raw::c_int,
    pub nsNr: std::os::raw::c_int,
    pub nsMax: std::os::raw::c_int,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut std::os::raw::c_int,
    pub pushTab: *mut *mut std::os::raw::c_void,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
    pub nsWellFormed: std::os::raw::c_int,
    pub options: std::os::raw::c_int,
    pub dictNames: std::os::raw::c_int,
    pub freeElemsNr: std::os::raw::c_int,
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: std::os::raw::c_int,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: std::os::raw::c_ulong,
    pub sizeentities: std::os::raw::c_ulong,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: std::os::raw::c_int,
    pub nodeInfoMax: std::os::raw::c_int,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: std::os::raw::c_int,
    pub sizeentcopy: std::os::raw::c_ulong,
}
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
    pub begin_pos: std::os::raw::c_ulong,
    pub begin_line: std::os::raw::c_ulong,
    pub end_pos: std::os::raw::c_ulong,
    pub end_line: std::os::raw::c_ulong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut std::os::raw::c_void,
    pub line: std::os::raw::c_ushort,
    pub extra: std::os::raw::c_ushort,
}
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *mut std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: std::os::raw::c_int,
    pub standalone: std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut std::os::raw::c_void,
    pub refs: *mut std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut std::os::raw::c_void,
    pub parseFlags: std::os::raw::c_int,
    pub properties: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut std::os::raw::c_void,
    pub elements: *mut std::os::raw::c_void,
    pub attributes: *mut std::os::raw::c_void,
    pub entities: *mut std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut std::os::raw::c_void,
}
pub type xmlElementType = std::os::raw::c_uint;
pub const XML_DOCB_DOCUMENT_NODE: xmlElementType = 21;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
pub type xmlNsType = xmlElementType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut std::os::raw::c_void,
}
pub type xmlAttributeType = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlParserMode = std::os::raw::c_uint;
pub const XML_PARSE_READER: xmlParserMode = 5;
pub const XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const XML_PARSE_SAX: xmlParserMode = 2;
pub const XML_PARSE_DOM: xmlParserMode = 1;
pub const XML_PARSE_UNKNOWN: xmlParserMode = 0;
pub type xmlError = _xmlError;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlError {
    pub domain: std::os::raw::c_int,
    pub code: std::os::raw::c_int,
    pub message: *mut std::os::raw::c_char,
    pub level: xmlErrorLevel,
    pub file: *mut std::os::raw::c_char,
    pub line: std::os::raw::c_int,
    pub str1: *mut std::os::raw::c_char,
    pub str2: *mut std::os::raw::c_char,
    pub str3: *mut std::os::raw::c_char,
    pub int1: std::os::raw::c_int,
    pub int2: std::os::raw::c_int,
    pub ctxt: *mut std::os::raw::c_void,
    pub node: *mut std::os::raw::c_void,
}
pub type xmlErrorLevel = std::os::raw::c_uint;
pub const XML_ERR_FATAL: xmlErrorLevel = 3;
pub const XML_ERR_ERROR: xmlErrorLevel = 2;
pub const XML_ERR_WARNING: xmlErrorLevel = 1;
pub const XML_ERR_NONE: xmlErrorLevel = 0;
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
/*
 * Summary: interfaces for tree manipulation
 * Description: this module describes the structures found in an tree resulting
 *              from an XML or HTML parsing, as well as the API provided for
 *              various processing on that tree
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Some of the basic types pointer to structures:
 */
/* xmlIO.h */
/* parser.h */
/* entities.h */
/* *
 * BASE_BUFFER_SIZE:
 *
 * default buffer size 4000.
 */
/* *
 * LIBXML_NAMESPACE_DICT:
 *
 * Defines experimental behaviour:
 * 1) xmlNs gets an additional field @context (a xmlDoc)
 * 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.
 */
/* #define LIBXML_NAMESPACE_DICT */
/* *
 * xmlBufferAllocationScheme:
 *
 * A buffer allocation scheme can be defined to either match exactly the
 * need or double it's allocated size each time it is found too small.
 */
/* double each time one need to grow */
/* grow only to the minimal size */
/* immutable buffer */
/* special allocation scheme used for I/O */
/* exact up to a threshold, and doubleit thereafter */
/* limit the upper size of the buffer */
/* *
 * xmlBuffer:
 *
 * A buffer structure, this old construct is limited to 2GB and
 * is being deprecated, use API with xmlBuf instead
 */
/* The buffer content UTF8 */
/* The buffer size used */
/* The buffer size */
/* The realloc method */
/* in IO mode we may have a different base */
/* *
 * xmlBuf:
 *
 * A buffer structure, new one, the actual structure internals are not public
 */
/* *
 * xmlBufPtr:
 *
 * A pointer to a buffer structure, the actual structure internals are not
 * public
 */
/*
 * A few public routines for xmlBuf. As those are expected to be used
 * mostly internally the bulk of the routines are internal in buf.h
 */
/*
 * LIBXML2_NEW_BUFFER:
 *
 * Macro used to express that the API use the new buffers for
 * xmlParserInputBuffer and xmlOutputBuffer. The change was
 * introduced in 2.9.0.
 */
/* *
 * XML_XML_NAMESPACE:
 *
 * This is the namespace for the special xml: prefix predefined in the
 * XML Namespace specification.
 */
/* *
 * XML_XML_ID:
 *
 * This is the name for the special xml:id attribute
 */
/*
 * The different element types carried by an XML tree.
 *
 * NOTE: This is synchronized with DOM Level1 values
 *       See http://www.w3.org/TR/REC-DOM-Level-1/
 *
 * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should
 * be deprecated to use an XML_DTD_NODE.
 */
/* *
 * xmlNotation:
 *
 * A DTD Notation definition.
 */
/* Notation name */
/* Public identifier, if any */
/* System identifier, if any */
/* *
 * xmlAttributeType:
 *
 * A DTD Attribute type definition.
 */
/* *
 * xmlAttributeDefault:
 *
 * A DTD Attribute default definition.
 */
/* *
 * xmlEnumeration:
 *
 * List structure used when there is an enumeration in DTDs.
 */
/* next one */
/* Enumeration name */
/* *
 * xmlAttribute:
 *
 * An Attribute declaration in a DTD.
 */
/* application data */
/* XML_ATTRIBUTE_DECL, must be second ! */
/* Attribute name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* next in hash table */
/* The attribute type */
/* the default */
/* or the default value */
/* or the enumeration tree if any */
/* the namespace prefix if any */
/* Element holding the attribute */
/* *
 * xmlElementContentType:
 *
 * Possible definitions of element content types.
 */
/* *
 * xmlElementContentOccur:
 *
 * Possible definitions of element content occurrences.
 */
/* *
 * xmlElementContent:
 *
 * An XML Element content as stored after parsing an element definition
 * in a DTD.
 */
/* PCDATA, ELEMENT, SEQ or OR */
/* ONCE, OPT, MULT or PLUS */
/* Element name */
/* first child */
/* second child */
/* parent */
/* Namespace prefix */
/* *
 * xmlElementTypeVal:
 *
 * The different possibilities for an element content type.
 */
/* *
 * xmlElement:
 *
 * An XML Element declaration from a DTD.
 */
/* application data */
/* XML_ELEMENT_DECL, must be second ! */
/* Element name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* The type */
/* the allowed element content */
/* List of the declared attributes */
/* the namespace prefix if any */
/* the validating regexp */
/* *
 * XML_LOCAL_NAMESPACE:
 *
 * A namespace declaration node.
 */
/* *
 * xmlNs:
 *
 * An XML namespace.
 * Note that prefix == NULL is valid, it defines the default namespace
 * within the subtree (until overridden).
 *
 * xmlNsType is unified with xmlElementType.
 */
/* next Ns link for this node  */
/* global or local */
/* URL for the namespace */
/* prefix for the namespace */
/* application data */
/* normally an xmlDoc */
/* *
 * xmlDtd:
 *
 * An XML DTD, as defined by <!DOCTYPE ... There is actually one for
 * the internal subset and for the external subset.
 */
/* application data */
/* XML_DTD_NODE, must be second ! */
/* Name of the DTD */
/* the value of the property link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* Hash table for notations if any */
/* Hash table for elements if any */
/* Hash table for attributes if any */
/* Hash table for entities if any */
/* External identifier for PUBLIC DTD */
/* URI for a SYSTEM or PUBLIC DTD */
/* Hash table for param entities if any */
/* *
 * xmlAttr:
 *
 * An attribute on an XML node.
 */
/* application data */
/* XML_ATTRIBUTE_NODE, must be second ! */
/* the name of the property */
/* the value of the property */
/* NULL */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* pointer to the associated namespace */
/* the attribute type if validating */
/* for type/PSVI informations */
/* *
 * xmlID:
 *
 * An XML ID instance.
 */
/* next ID */
/* The ID name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* The document holding the ID */
/* *
 * xmlRef:
 *
 * An XML IDREF instance.
 */
/* next Ref */
/* The Ref name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* *
 * xmlNode:
 *
 * A node in an XML tree.
 */
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
/*
 * Summary: Chained hash tables
 * Description: This module implements the hash table support used in
 *		various places in the library.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Bjorn Reese <bjorn.reese@systematic.dk>
 */
/*
 * The hash table.
 */
pub type xmlHashTablePtr = *mut xmlHashTable;
pub type xmlHashTable = _xmlHashTable;
/*
 * Summary: string dictionary
 * Description: dictionary of reusable strings, just used to avoid allocation
 *         and freeing operations.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The dictionary.
 */
pub type xmlDictPtr = *mut xmlDict;
pub type xmlDict = _xmlDict;
pub type xmlParserInputState = std::os::raw::c_int;
pub const XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const XML_PARSER_DTD: xmlParserInputState = 3;
pub const XML_PARSER_PI: xmlParserInputState = 2;
pub const XML_PARSER_MISC: xmlParserInputState = 1;
pub const XML_PARSER_START: xmlParserInputState = 0;
pub const XML_PARSER_EOF: xmlParserInputState = -1;
/*
 * Summary: The DTD validation
 * Description: API for the DTD handling and the validity checking
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Validation state added for non-determinist content model.
 */
/* *
 * xmlValidityErrorFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity error is found. This is a message
 * oriented function similar to an *printf function.
 */
/* *
 * xmlValidityWarningFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity warning is found. This is a message
 * oriented function similar to an *printf function.
 */
/* *
 * XML_CTXT_FINISH_DTD_0:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/* *
 * XML_CTXT_FINISH_DTD_1:
 *
 * Special value for finishDtd field when embedded in an xmlParserCtxt
 */
/*
 * xmlValidCtxt:
 * An xmlValidCtxt is used for error reporting when validating.
 */
pub type xmlValidCtxt = _xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: *mut std::os::raw::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub finishDtd: std::os::raw::c_uint,
    pub doc: xmlDocPtr,
    pub valid: std::os::raw::c_int,
    pub vstate: *mut xmlValidState,
    pub vstateNr: std::os::raw::c_int,
    pub vstateMax: std::os::raw::c_int,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
/*
 * Summary: API to build regexp automata
 * Description: the API to build regexp automata
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlAutomataPtr:
 *
 * A libxml automata description, It can be compiled into a regexp
 */
/* *
 * xmlAutomataStatePtr:
 *
 * A state int the automata description,
 */
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
pub type xmlAutomataState = _xmlAutomataState;
pub type xmlAutomataPtr = *mut xmlAutomata;
pub type xmlAutomata = _xmlAutomata;
pub type xmlValidState = _xmlValidState;
/* application data */
/* type number, must be second ! */
/* the name of the node, or the entity */
/* parent->childs link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* pointer to the associated namespace */
/* the content */
/* properties list */
/* namespace definitions on this node */
/* for type/PSVI informations */
/* line number */
/* extra data for XPath/XSLT */
/* *
 * XML_GET_CONTENT:
 *
 * Macro to extract the content pointer of a node.
 */
/* *
 * XML_GET_LINE:
 *
 * Macro to extract the line number of an element node.
 */
/* *
 * xmlDocProperty
 *
 * Set of properties of the document as found by the parser
 * Some of them are linked to similary named xmlParserOption
 */
/* document is XML well formed */
/* document is Namespace valid */
/* parsed with old XML-1.0 parser */
/* DTD validation was successful */
/* XInclude substitution was done */
/* Document was built using the API
                                           and not by parsing an instance */
/* built for internal processing */
/* parsed or built HTML document */
/* *
 * xmlDoc:
 *
 * An XML document.
 */
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
pub type xmlValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: std::os::raw::c_ulong,
    pub length: std::os::raw::c_ulong,
    pub buffer: *mut xmlParserNodeInfo,
}
/* *
 * XML_DETECT_IDS:
 *
 * Bit in the loadsubset context field to tell to do ID/REFs lookups.
 * Use it to initialize xmlLoadExtDtdDefaultValue.
 */
/* *
 * XML_COMPLETE_ATTRS:
 *
 * Bit in the loadsubset context field to tell to do complete the
 * elements attributes lists with the ones defaulted from the DTDs.
 * Use it to initialize xmlLoadExtDtdDefaultValue.
 */
/* *
 * XML_SKIP_IDS:
 *
 * Bit in the loadsubset context field to tell to not do ID/REFs registration.
 * Used to initialize xmlLoadExtDtdDefaultValue in some special cases.
 */
/* *
 * xmlParserMode:
 *
 * A parser can operate in various modes
 */
/* *
 * xmlParserCtxt:
 *
 * The parser context.
 * NOTE This doesn't completely define the parser state, the (current ?)
 *      design of the parser uses recursive function calls since this allow
 *      and easy mapping from the production rules of the specification
 *      to the actual code. The drawback is that the actual function call
 *      also reflect the parser state. However most of the parsing routines
 *      takes as the only argument the parser context pointer, so migrating
 *      to a state based parser for progressive parsing shouldn't be too hard.
 */
/* The SAX handler */
/* For SAX interface only, used by DOM build */
/* the document being built */
/* is the document well formed */
/* shall we replace entities ? */
/* the XML version string */
/* the declared encoding, if any */
/* standalone document */
/* an HTML(1)/Docbook(2) document
                                       * 3 is HTML after <head>
                                       * 10 is HTML after <body>
                                       */
/* Input stream stack */
/* Current input stream */
/* Number of current input streams */
/* Max number of input streams */
/* stack of inputs */
/* Node analysis stack only used for DOM building */
/* Current parsed Node */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodes */
/* Whether node info should be kept */
/* info about each node parsed */
/* error code */
/* reference and external subset */
/* the internal subset has PE refs */
/* are we parsing an external entity */
/* is the document valid */
/* shall we try to validate ? */
/* The validity context */
/* current type of input */
/* next char look-ahead */
/* the data directory */
/* Node name stack */
/* Current parsed Node */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodes */
/* number of xmlChar processed */
/* used by progressive parsing lookup */
/* ugly but ... */
/* SAX callbacks are disabled */
/* Parsing is in int 1/ext 2 subset */
/* name of subset */
/* URI of external subset */
/* SYSTEM ID of external subset */
/* xml:space values */
/* Should the parser preserve spaces */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of space infos */
/* to prevent entity substitution loops */
/* used to check entities boundaries */
/* encoding of the in-memory content
				         actually an xmlCharEncoding */
/* Those two fields are there to */
/* Speed up large node parsing */
/* signal pedantic warnings */
/* For user data, libxml won't touch it */
/* should the external subset be loaded */
/* set line number in element content */
/* document's own catalog */
/* run in recovery mode */
/* is this a progressive parsing */
/* dictionary for the parser */
/* array for the attributes callbacks */
/* the size of the array */
/* use strings from dict to build tree */
/*
     * pre-interned strings
     */
/*
     * Everything below is used only by the new SAX mode
     */
/* operating in the new SAX mode */
/* the number of inherited namespaces */
/* the size of the arrays */
/* the array of prefix/namespace name */
/* which attribute were allocated */
/* array of data for push */
/* defaulted attributes if any */
/* non-CDATA attributes if any */
/* is the document XML Nanespace okay */
/* Extra options */
/*
     * Those fields are needed only for treaming parsing so far
     */
/* Use dictionary names for the tree */
/* number of freed element nodes */
/* List of freed element nodes */
/* number of freed attributes nodes */
/* List of freed attributes nodes */
/*
     * the complete error informations for the last error.
     */
/* the parser mode */
/* number of entities references */
/* size of parsed entities */
/* for use by HTML non-recursive parser */
/* Current NodeInfo */
/* Depth of the parsing stack */
/* Max depth of the parsing stack */
/* array of nodeInfos */
/* we need to label inputs */
/* volume of entity copy */
/* *
 * xmlSAXLocator:
 *
 * A SAX Locator.
 */
/* *
 * xmlSAXHandler:
 *
 * A SAX handler is bunch of callbacks called by the parser when processing
 * of the input generate data or structure informations.
 */
/* *
 * resolveEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 *
 * Callback:
 * The entity loader, to control the loading of external entities,
 * the application can either:
 *    - override this resolveEntity() callback in the SAX block
 *    - or better use the xmlSetExternalEntityLoader() function to
 *      set up it's own entity resolution routine
 *
 * Returns the xmlParserInputPtr if inlined or NULL for DOM behaviour.
 */
/* *
 * internalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the root element name
 * @ExternalID:  the external ID
 * @SystemID:  the SYSTEM ID (e.g. filename or URL)
 *
 * Callback on internal subset declaration.
 */
/* *
 * externalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the root element name
 * @ExternalID:  the external ID
 * @SystemID:  the SYSTEM ID (e.g. filename or URL)
 *
 * Callback on external subset declaration.
 */
/* *
 * getEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The entity name
 *
 * Get an entity by name.
 *
 * Returns the xmlEntityPtr if found.
 */
/* *
 * getParameterEntitySAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The entity name
 *
 * Get a parameter entity by name.
 *
 * Returns the xmlEntityPtr if found.
 */
/* *
 * entityDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the entity name
 * @type:  the entity type
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 * @content: the entity value (without processing).
 *
 * An entity definition has been parsed.
 */
/* *
 * notationDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The name of the notation
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 *
 * What to do when a notation declaration has been parsed.
 */
/* *
 * attributeDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @elem:  the name of the element
 * @fullname:  the attribute name
 * @type:  the attribute type
 * @def:  the type of default value
 * @defaultValue: the attribute default value
 * @tree:  the tree of enumerated value set
 *
 * An attribute definition has been parsed.
 */
/* *
 * elementDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  the element name
 * @type:  the element type
 * @content: the element value tree
 *
 * An element definition has been parsed.
 */
/* *
 * unparsedEntityDeclSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name: The name of the entity
 * @publicId: The public ID of the entity
 * @systemId: The system ID of the entity
 * @notationName: the name of the notation
 *
 * What to do when an unparsed entity declaration is parsed.
 */
/* *
 * setDocumentLocatorSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @loc: A SAX Locator
 *
 * Receive the document locator at startup, actually xmlDefaultSAXLocator.
 * Everything is available on the context, so this is useless in our case.
 */
/* *
 * startDocumentSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Called when the document start being processed.
 */
/* *
 * endDocumentSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Called when the document end has been detected.
 */
/* *
 * startElementSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The element name, including namespace prefix
 * @atts:  An array of name/value attributes pairs, NULL terminated
 *
 * Called when an opening tag has been processed.
 */
/* *
 * endElementSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The element name
 *
 * Called when the end of an element has been detected.
 */
/* *
 * attributeSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The attribute name, including namespace prefix
 * @value:  The attribute value
 *
 * Handle an attribute that has been read by the parser.
 * The default handling is to convert the attribute into an
 * DOM subtree and past it in a new xmlAttr element added to
 * the element.
 */
/* *
 * referenceSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @name:  The entity name
 *
 * Called when an entity reference is detected.
 */
/* *
 * charactersSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @ch:  a xmlChar string
 * @len: the number of xmlChar
 *
 * Receiving some chars from the parser.
 */
/* *
 * ignorableWhitespaceSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @ch:  a xmlChar string
 * @len: the number of xmlChar
 *
 * Receiving some ignorable whitespaces from the parser.
 * UNUSED: by default the DOM building will use characters.
 */
/* *
 * processingInstructionSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @target:  the target name
 * @data: the PI data's
 *
 * A processing instruction has been parsed.
 */
/* *
 * commentSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @value:  the comment content
 *
 * A comment has been parsed.
 */
/* *
 * cdataBlockSAXFunc:
 * @ctx:  the user data (XML parser context)
 * @value:  The pcdata content
 * @len:  the block length
 *
 * Called when a pcdata block has been parsed.
 */
/* *
 * warningSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a warning messages, callback.
 */
/* *
 * errorSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format an error messages, callback.
 */
/* *
 * fatalErrorSAXFunc:
 * @ctx:  an XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format fatal error messages, callback.
 * Note: so far fatalError() SAX callbacks are not used, error()
 *       get all the callbacks for errors.
 */
/* *
 * isStandaloneSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Is this document tagged standalone?
 *
 * Returns 1 if true
 */
/* *
 * hasInternalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Does this document has an internal subset.
 *
 * Returns 1 if true
 */
/* *
 * hasExternalSubsetSAXFunc:
 * @ctx:  the user data (XML parser context)
 *
 * Does this document has an external subset?
 *
 * Returns 1 if true
 */
/* ***********************************************************************
 *									*
 *			The SAX version 2 API extensions		*
 *									*
 ************************************************************************/
/* *
 * XML_SAX2_MAGIC:
 *
 * Special constant found in SAX2 blocks initialized fields
 */
/* *
 * startElementNsSAX2Func:
 * @ctx:  the user data (XML parser context)
 * @localname:  the local name of the element
 * @prefix:  the element namespace prefix if available
 * @URI:  the element namespace name if available
 * @nb_namespaces:  number of namespace definitions on that node
 * @namespaces:  pointer to the array of prefix/URI pairs namespace definitions
 * @nb_attributes:  the number of attributes on that node
 * @nb_defaulted:  the number of defaulted attributes. The defaulted
 *                  ones are at the end of the array
 * @attributes:  pointer to the array of (localname/prefix/URI/value/end)
 *               attribute values.
 *
 * SAX2 callback when an element start has been detected by the parser.
 * It provides the namespace informations for the element, as well as
 * the new namespace declarations on the element.
 */
/* *
 * endElementNsSAX2Func:
 * @ctx:  the user data (XML parser context)
 * @localname:  the local name of the element
 * @prefix:  the element namespace prefix if available
 * @URI:  the element namespace name if available
 *
 * SAX2 callback when an element end has been detected by the parser.
 * It provides the namespace informations for the element.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: std::os::raw::c_uint,
    pub _private: *mut std::os::raw::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
/*
 * Summary: error handling
 * Description: the API used to report errors
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Summary: error handling
 * Description: the API used to report errors
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlErrorLevel:
 *
 * Indicates the level of an error
 */
/* A simple warning */
/* A recoverable error */
/* A fatal error */
/* *
 * xmlErrorDomain:
 *
 * Indicates where an error may have come from
 */
/* The XML parser */
/* The tree module */
/* The XML Namespace module */
/* The XML DTD validation with parser context*/
/* The HTML parser */
/* The memory allocator */
/* The serialization code */
/* The Input/Output stack */
/* The FTP module */
/* The HTTP module */
/* The XInclude processing */
/* The XPath module */
/* The XPointer module */
/* The regular expressions module */
/* The W3C XML Schemas Datatype module */
/* The W3C XML Schemas parser module */
/* The W3C XML Schemas validation module */
/* The Relax-NG parser module */
/* The Relax-NG validator module */
/* The Catalog module */
/* The Canonicalization module */
/* The XSLT engine from libxslt */
/* The XML DTD validation with valid context */
/* The error checking module */
/* The xmlwriter module */
/* The dynamically loaded module module*/
/* The module handling character conversion */
/* The Schematron validator module */
/* The buffers module */
/* The URI module */
/* *
 * xmlError:
 *
 * An XML Error instance.
 */
/* What part of the library raised this error */
/* The error code, e.g. an xmlParserError */
/* human-readable informative error message */
/* how consequent is the error */
/* the filename */
/* the line number if available */
/* extra string information */
/* extra string information */
/* extra string information */
/* extra number information */
/* error column # or 0 if N/A (todo: rename field when we would brk ABI) */
/* the parser context if available */
/* the node in the tree */
/* *
 * xmlParserError:
 *
 * This is an error that the XML (or HTML) parser can generate
 */
/* 1 */
/* 2 */
/* 3 */
/* 4 */
/* 5 */
/* 6 */
/* 7 */
/* 8 */
/* 9 */
/* 10 */
/* 11 */
/* 12 */
/* 13 */
/* 14 */
/* 15 */
/* 16 */
/* 17 */
/* 18 */
/* 19 */
/* 20 */
/* 21 */
/* 22 */
/* 23 */
/* 24 */
/* 25 */
/* 26 */
/* 27 */
/* 28 */
/* 29 */
/* 30 */
/* 31 */
/* 32 */
/* 33 */
/* 34 */
/* 35 */
/* 36 */
/* 37 */
/* 38 */
/* 39 */
/* 40 */
/* 41 */
/* 42 */
/* 43 */
/* 44 */
/* 45 */
/* 46 */
/* 47 */
/* 48 */
/* 49 */
/* 50 */
/* 51 */
/* 52 */
/* 53 */
/* 54 */
/* 55 */
/* 56 */
/* 57 */
/* 58 */
/* 59 */
/* 60 */
/* 61 */
/* 62 */
/* 63 */
/* 64 */
/* 65 */
/* 66 */
/* 67 */
/* 68 */
/* 69 */
/* 70 */
/* 71 */
/* 72 */
/* 73 */
/* 74 */
/* 75 */
/* 76 */
/* 77 */
/* 78 */
/* 79 */
/* 80 */
/* 81 */
/* 82 */
/* 83 */
/* 84 */
/* 85 */
/* 86 */
/* 87 */
/* 88 */
/* 89 */
/* 90 */
/* 91 */
/* 92 */
/* 93 */
/* 94 */
/* 95 */
/* 96 */
/* 97 */
/* 98 */
/* 99 */
/* 100 */
/* 101 */
/* 102 */
/* 103 */
/* 104 */
/* 105 */
/* 106 */
/* 107 */
/* 108 */
/* 109 */
/* 110 */
/* 111 */
/* 201 */
/* 202 */
/* 203 */
/* 204 */
/* 205 */
/* 501 */
/* 502 */
/* 503 */
/* 504 */
/* 505 */
/* 506 */
/* 507 */
/* 508 */
/* 509 */
/* 510 */
/* 511 */
/* 512 */
/* 513 */
/* 514 */
/* 515 */
/* 516 */
/* 517 */
/* 518 */
/* 519 */
/* 520 */
/* 521 */
/* 522 */
/* 523 */
/* 524 */
/* 525 */
/* 526 */
/* 527 */
/* 528 */
/* 529 */
/* 530 */
/* 531 */
/* 532 */
/* 533 */
/* 534 */
/* 535 */
/* 536 */
/* 537 */
/* 538 */
/* 539 */
/* 540 */
/* 541 */
/* 801 */
/* 1001 */
/* 1002 */
/* 1003 */
/* 1004 */
/* 1005 */
/* 1006 */
/* 1007 */
/* 1008 */
/* 1009 */
/* 1010 */
/* 1011 */
/* 1012 */
/* 1013 */
/* 1014 */
/* 1015 */
/* 1016 */
/* 1017 */
/* 1018 */
/* 1019 */
/* 1020 */
/* 1021 */
/* 1022 */
/* 1023 */
/* 1024 */
/* 1025 */
/* 1026 */
/* 1027 */
/* 1028 */
/* 1029 */
/* 1030 */
/* 1031 */
/* 1032 */
/* 1033 */
/* 1034 */
/* 1035 */
/* 1036 */
/* 1037 */
/* 1038 */
/* 1039 */
/* 1040 */
/* 1041 */
/* 1042 */
/* 1043 */
/* 1044 */
/* 1045 */
/* 1046 */
/* 1047 */
/* 1048 */
/* 1049 */
/* 1050 */
/* 1051 */
/* 1052 */
/* 1053 */
/* 1054 */
/* 1055 */
/* 1056 */
/* 1057 */
/* 1058 */
/* 1059 */
/* 1060 */
/* 1061 */
/* 1062 */
/* 1063 */
/* 1064 */
/* 1065 */
/* 1066 */
/* 1067 */
/* 1068 */
/* 1069 */
/* 1070 */
/* 1071 */
/* 1072 */
/* 1073 */
/* 1074 */
/* 1075 */
/* 1076 */
/* 1077 */
/* 1078 */
/* 1079 */
/* 1080 */
/* 1081 */
/* 1082 */
/* 1083 */
/* 1084 */
/* 1085 */
/* 1086 */
/* 1087 */
/* 1088 */
/* 1089 */
/* 1090 */
/* 1091 */
/* 1092 */
/* 1093 */
/* 1094 */
/* 1095 */
/* 1096 */
/* 1097 */
/* 1098 */
/* 1099 */
/* 1100 */
/* 1101 */
/* 1102 */
/* 1103 */
/* 1104 */
/* 1105 */
/* 1106 */
/* 1107 */
/* 1108 */
/* 1109 */
/* 1110 */
/* 1111 */
/* 1112 */
/* 1113 */
/* 1114 */
/* 1115 */
/* 1116 */
/* 1117 */
/* 1118 */
/* 1119 */
/* 1120 */
/* 1121 */
/* 1122 */
/* 1201 */
/* 1202 */
/* 1203 */
/* 1204 */
/* 1205 */
/* 1206 */
/* 1207 */
/* 1208 */
/* 1209 */
/* 1210 */
/* 1211 */
/* 1212 */
/* 1213 */
/* 1214 */
/* 1215 */
/* 1216 */
/* 1217 */
/* 1218 */
/* 1219 */
/* 1220 */
/* 1221 */
/* 1301 */
/* 1302 */
/* 1303 */
/* 1401 */
/* 1402 */
/* 1403 */
/* 1501 */
/* 1502 */
/* 1503 */
/* 1504 */
/* 1505 */
/* 1506 */
/* 1507 */
/* 1508 */
/* 1509 */
/* 1510 */
/* 1511 */
/* 1512 */
/* 1513 */
/* 1514 */
/* 1515 */
/* 1516 */
/* 1517 */
/* 1518 */
/* 1519 */
/* 1520 */
/* 1521 */
/* 1522 */
/* 1523 */
/* 1524 */
/* 1525 */
/* 1526 */
/* 1527 */
/* 1528 */
/* 1529 */
/* 1530 */
/* 1531 */
/* 1532 */
/* 1533 */
/* 1534 */
/* 1535 */
/* 1536 */
/* 1537 */
/* 1538 */
/* 1539 */
/* 1540 */
/* 1541 */
/* 1542 */
/* 1543 */
/* 1544 */
/* 1545 */
/* 1546 */
/* 1547 */
/* 1548 */
/* 1549 */
/* 1550 */
/* 1551 */
/* 1552 */
/* 1553 */
/* 1554 */
/* 1555 */
/* 1556 */
/* 1601 */
/* 1602 */
/* 1603 */
/* 1604 */
/* 1605 */
/* 1606 */
/* 1607 */
/* 1608 */
/* 1609 */
/* 1610 */
/* 1611 */
/* 1612 */
/* 1613 */
/* 1614 */
/* 1615 */
/* 1616 */
/* 1617 */
/* 1618 */
/* 1651 */
/* 1652 */
/* 1653 */
/* 1654 */
/* 1701 */
/* 1702 */
/* 1703 */
/* 1704 */
/* 1705 */
/* 1706 */
/* 1707 */
/* 1708 */
/* 1709 */
/* 1710 */
/* 1711 */
/* 1712 */
/* 1713 */
/* 1714 */
/* 1715 */
/* 1716 */
/* 1717 */
/* 1718 */
/* 1719 */
/* 1720 */
/* 1721 */
/* 1722 */
/* 1723 */
/* 1724 */
/* 1725 */
/* 1726 */
/* 1727 */
/* 1728 */
/* 1729 */
/* 1730 */
/* 1731 */
/* 1732 */
/* 1733 */
/* 1734 */
/* 1735 */
/* 1736 */
/* 1737 */
/* 1738 */
/* 1739 */
/* 1740 */
/* 1741 */
/* 1742 */
/* 1743 */
/* 1744 */
/* 1745 */
/* 1746 */
/* 1747 */
/* 1748 */
/* 1749 */
/* 1750 */
/* 1751 */
/* 1752 */
/* 1753 */
/* 1754 */
/* 1755 */
/* 1756 */
/* 1757 */
/* 1758 */
/* 1759 */
/* 1760 */
/* 1761 */
/* 1762 */
/* 1763 */
/* 1764 */
/* 1765 */
/* 1766 */
/* 1767 */
/* 1768 */
/* 1769 */
/* 1770 */
/* 1771 */
/* 1772 */
/* 1773 */
/* 1774 */
/* 1775 */
/* 1776 */
/* 1777 */
/* 1778 */
/* 1779 */
/* 1780 */
/* 1781 */
/* 1782 */
/* 1783 */
/* 1784 */
/* 1785 */
/* 1786 */
/* 1787 */
/* 1788 */
/* 1789 */
/* 1790 */
/* 1791 */
/* 1792 */
/* 1793 */
/* 1794 */
/* 1795 */
/* 1796 */
/* 1797 */
/* 1798 */
/* 1799 */
/* 1800 */
/* 1802 */
/* 1803 */
/* 1804 */
/* 1805 */
/* 1806 */
/* 1807 */
/* 1808 */
/* 1809 */
/* 1810 */
/* 1811 */
/* 1812 */
/* 1813 */
/* 1814 */
/* 1815 */
/* 1816 */
/* 1817 */
/* 1818 */
/* 1819 */
/* 1820 */
/* 1821 */
/* 1822 */
/* 1823 */
/* 1824 */
/* 1825 */
/* 1826 */
/* 1827 */
/* 1828 */
/* 1829 */
/* 1830 */
/* 1831 */
/* 1832 */
/* 1833 */
/* 1834 */
/* 1835 */
/* 1836 */
/* 1837 */
/* 1838 */
/* 1839 */
/* 1840 */
/* 1841 */
/* 1842 */
/* 1843 */
/* 1844 */
/* 1845 */
/* 1846 */
/* 1847 */
/* 1848 */
/* 1849 */
/* 1850 */
/* 1851 */
/* 1852 */
/* 1853 */
/* 1854 */
/* 1855 */
/* 1856 */
/* 1857 */
/* 1858 */
/* 1859 */
/* 1860 */
/* 1861 */
/* 1862 */
/* 1863 */
/* 1864 */
/* 1865 */
/* 1866 */
/* 1867 */
/* 1868 */
/* 1869 */
/* 1870 */
/* 1871 */
/* 1872 */
/* 1873 */
/* 1874 */
/* 1875 */
/* 1876 */
/* 1877 */
/* 1878 */
/* 1879 */
/* 1901 */
/* 1902 */
/* 1903 */
/* 1951 */
/* 1952 */
/* 1953 */
/* 1954 */
/* 1955 */
/* 2001 */
/* 2002 */
/* 2003 */
/* 2021 */
/* 2022 */
/* 3001 */
/* 3002 */
/* 3003 */
/* 3004 */
/* 3005 */
/* 3006 */
/* 3007 */
/* 3008 */
/* 3009 */
/* 3010 */
/* 3011 */
/* 3012 */
/* 3013 */
/* 3014 */
/* 3015 */
/* 3016 */
/* 3017 */
/* 3018 */
/* 3019 */
/* 3020 */
/* 3021 */
/* 3022 */
/* 3023 */
/* 3024 */
/* 3025 */
/* 3026 */
/* 3027 */
/* 3028 */
/* 3029 */
/* 3030 */
/* 3031 */
/* 3032 */
/* 3033 */
/* 3034 */
/* 3035 */
/* 3036 */
/* 3037 */
/* 3038 */
/* 3039 */
/* 3040 */
/* 3041 */
/* 3042 */
/* 3043 */
/* 3044 */
/* 3045 */
/* 3046 */
/* 3047 */
/* 3048 */
/* 3049 */
/* 3050 */
/* 3051 */
/* 3052 */
/* 3053 */
/* 3054 */
/* 3055 */
/* 3056 */
/* 3057 */
/* 3058 */
/* 3059 */
/* 3060 */
/* 3061 */
/* 3062 */
/* 3063 */
/* 3064 */
/* 3065 */
/* 3066 */
/* 3067 */
/* 3068 */
/* 3069 non-W3C */
/* 3070 non-W3C */
/* 3071 */
/* 3072 */
/* 3073 */
/* 3074 */
/* 3075 */
/* 3076 */
/* 3077 */
/* 3078 */
/* 3079 */
/* 3080 */
/* 3081 */
/* 3082 */
/* 3083 */
/* 3084 */
/* 3085 */
/* 3085 */
/* 3086 */
/* 3087 */
/* 3088 */
/* 3089 */
/* 3090 */
/* 4000 */
/* 4900 */
/* 4901 */
/* 5001 */
/* 5002 */
/* 5003 */
/* 5004 */
/* 5005 */
/* 5006 */
/* 5007 */
/* 5008 */
/* 5009 */
/* 5010 */
/* 5011 */
/* 5012 */
/* 5013 */
/* 5014 */
/* 5015 */
/* 5016 */
/* 5017 */
/* 5018 */
/* 5019 */
/* 5020 */
/* 5021 */
/* 5022 */
/* 5023 */
/* 5024 */
/* 5025 */
/* 5026 */
/* 5027 */
/* 5028 */
/* 5029 */
/* 5030 */
/* 5031 */
/* 5032 */
/* 5033 */
/* 5034 */
/* 5035 */
/* 5036 */
/* 5037 */
/* 6001 */
/* 6002 */
/* 6003 */
/* 6004 */
/* *
 * xmlGenericErrorFunc:
 * @ctx:  a parsing context
 * @msg:  the message
 * @...:  the extra arguments of the varags to format the message
 *
 * Signature of the function to use when there is an error and
 * no parsing or validity context available .
 */
/* *
 * xmlStructuredErrorFunc:
 * @userData:  user provided data for the error callback
 * @error:  the error being raised.
 *
 * Signature of the function to use when there is an error and
 * the module handles the new error reporting mechanism.
 */
pub type xmlStructuredErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlErrorPtr) -> ()>;
pub type xmlErrorPtr = *mut xmlError;
pub type endElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type startElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *mut *const xmlChar,
                                _: std::os::raw::c_int, _: std::os::raw::c_int,
                                _: *mut *const xmlChar) -> ()>;
pub type externalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type cdataBlockSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type getParameterEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
/*
 * Summary: interface for the XML entities handling
 * Description: this module provides some of the entity API needed
 *              for the parser and applications.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The different valid entity types.
 */
/*
 * An unit of storage for an entity, contains the string, the value
 * and the linkind data needed for the linking in the hash table.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: std::os::raw::c_int,
    pub checked: std::os::raw::c_int,
}
pub type xmlEntityType = std::os::raw::c_uint;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub type fatalErrorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type errorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type warningSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type commentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type processingInstructionSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type ignorableWhitespaceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type charactersSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type referenceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type endElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type startElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *mut *const xmlChar) -> ()>;
pub type endDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type startDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type setDocumentLocatorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlSAXLocatorPtr)
               -> ()>;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlSAXLocator = _xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getSystemId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getLineNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                  -> std::os::raw::c_int>,
    pub getColumnNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                    -> std::os::raw::c_int>,
}
pub type unparsedEntityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type elementDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: xmlElementContentPtr)
               -> ()>;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
pub type xmlElementContentOccur = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub type attributeDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: std::os::raw::c_int,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: xmlEnumerationPtr) -> ()>;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type notationDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type entityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: *const xmlChar, _: *mut xmlChar) -> ()>;
pub type getEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type resolveEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlParserInputPtr>;
pub type hasExternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type hasInternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type isStandaloneSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type internalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
pub type xmlSAXHandler = _xmlSAXHandler;
pub type xmlSAXHandlerPtr = *mut xmlSAXHandler;
pub type C2RustUnnamed = std::os::raw::c_uint;
pub const XML_FROM_URI: C2RustUnnamed = 30;
pub const XML_FROM_BUFFER: C2RustUnnamed = 29;
pub const XML_FROM_SCHEMATRONV: C2RustUnnamed = 28;
pub const XML_FROM_I18N: C2RustUnnamed = 27;
pub const XML_FROM_MODULE: C2RustUnnamed = 26;
pub const XML_FROM_WRITER: C2RustUnnamed = 25;
pub const XML_FROM_CHECK: C2RustUnnamed = 24;
pub const XML_FROM_VALID: C2RustUnnamed = 23;
pub const XML_FROM_XSLT: C2RustUnnamed = 22;
pub const XML_FROM_C14N: C2RustUnnamed = 21;
pub const XML_FROM_CATALOG: C2RustUnnamed = 20;
pub const XML_FROM_RELAXNGV: C2RustUnnamed = 19;
pub const XML_FROM_RELAXNGP: C2RustUnnamed = 18;
pub const XML_FROM_SCHEMASV: C2RustUnnamed = 17;
pub const XML_FROM_SCHEMASP: C2RustUnnamed = 16;
pub const XML_FROM_DATATYPE: C2RustUnnamed = 15;
pub const XML_FROM_REGEXP: C2RustUnnamed = 14;
pub const XML_FROM_XPOINTER: C2RustUnnamed = 13;
pub const XML_FROM_XPATH: C2RustUnnamed = 12;
pub const XML_FROM_XINCLUDE: C2RustUnnamed = 11;
pub const XML_FROM_HTTP: C2RustUnnamed = 10;
pub const XML_FROM_FTP: C2RustUnnamed = 9;
pub const XML_FROM_IO: C2RustUnnamed = 8;
pub const XML_FROM_OUTPUT: C2RustUnnamed = 7;
pub const XML_FROM_MEMORY: C2RustUnnamed = 6;
pub const XML_FROM_HTML: C2RustUnnamed = 5;
pub const XML_FROM_DTD: C2RustUnnamed = 4;
pub const XML_FROM_NAMESPACE: C2RustUnnamed = 3;
pub const XML_FROM_TREE: C2RustUnnamed = 2;
pub const XML_FROM_PARSER: C2RustUnnamed = 1;
pub const XML_FROM_NONE: C2RustUnnamed = 0;
pub type xmlParserErrors = std::os::raw::c_uint;
pub const XML_BUF_OVERFLOW: xmlParserErrors = 7000;
pub const XML_I18N_NO_OUTPUT: xmlParserErrors = 6004;
pub const XML_I18N_CONV_FAILED: xmlParserErrors = 6003;
pub const XML_I18N_EXCESS_HANDLER: xmlParserErrors = 6002;
pub const XML_I18N_NO_HANDLER: xmlParserErrors = 6001;
pub const XML_I18N_NO_NAME: xmlParserErrors = 6000;
pub const XML_CHECK_NAME_NOT_NULL: xmlParserErrors = 5037;
pub const XML_CHECK_WRONG_NAME: xmlParserErrors = 5036;
pub const XML_CHECK_OUTSIDE_DICT: xmlParserErrors = 5035;
pub const XML_CHECK_NOT_NCNAME: xmlParserErrors = 5034;
pub const XML_CHECK_NO_DICT: xmlParserErrors = 5033;
pub const XML_CHECK_NOT_UTF8: xmlParserErrors = 5032;
pub const XML_CHECK_NS_ANCESTOR: xmlParserErrors = 5031;
pub const XML_CHECK_NS_SCOPE: xmlParserErrors = 5030;
pub const XML_CHECK_WRONG_PARENT: xmlParserErrors = 5029;
pub const XML_CHECK_NO_HREF: xmlParserErrors = 5028;
pub const XML_CHECK_NOT_NS_DECL: xmlParserErrors = 5027;
pub const XML_CHECK_NOT_ENTITY_DECL: xmlParserErrors = 5026;
pub const XML_CHECK_NOT_ELEM_DECL: xmlParserErrors = 5025;
pub const XML_CHECK_NOT_ATTR_DECL: xmlParserErrors = 5024;
pub const XML_CHECK_NOT_ATTR: xmlParserErrors = 5023;
pub const XML_CHECK_NOT_DTD: xmlParserErrors = 5022;
pub const XML_CHECK_WRONG_NEXT: xmlParserErrors = 5021;
pub const XML_CHECK_NO_NEXT: xmlParserErrors = 5020;
pub const XML_CHECK_WRONG_PREV: xmlParserErrors = 5019;
pub const XML_CHECK_NO_PREV: xmlParserErrors = 5018;
pub const XML_CHECK_WRONG_DOC: xmlParserErrors = 5017;
pub const XML_CHECK_NO_ELEM: xmlParserErrors = 5016;
pub const XML_CHECK_NO_NAME: xmlParserErrors = 5015;
pub const XML_CHECK_NO_DOC: xmlParserErrors = 5014;
pub const XML_CHECK_NO_PARENT: xmlParserErrors = 5013;
pub const XML_CHECK_ENTITY_TYPE: xmlParserErrors = 5012;
pub const XML_CHECK_UNKNOWN_NODE: xmlParserErrors = 5011;
pub const XML_CHECK_FOUND_NOTATION: xmlParserErrors = 5010;
pub const XML_CHECK_FOUND_FRAGMENT: xmlParserErrors = 5009;
pub const XML_CHECK_FOUND_DOCTYPE: xmlParserErrors = 5008;
pub const XML_CHECK_FOUND_COMMENT: xmlParserErrors = 5007;
pub const XML_CHECK_FOUND_PI: xmlParserErrors = 5006;
pub const XML_CHECK_FOUND_ENTITY: xmlParserErrors = 5005;
pub const XML_CHECK_FOUND_ENTITYREF: xmlParserErrors = 5004;
pub const XML_CHECK_FOUND_CDATA: xmlParserErrors = 5003;
pub const XML_CHECK_FOUND_TEXT: xmlParserErrors = 5002;
pub const XML_CHECK_FOUND_ATTRIBUTE: xmlParserErrors = 5001;
pub const XML_CHECK_FOUND_ELEMENT: xmlParserErrors = 5000;
pub const XML_MODULE_CLOSE: xmlParserErrors = 4901;
pub const XML_MODULE_OPEN: xmlParserErrors = 4900;
pub const XML_SCHEMATRONV_REPORT: xmlParserErrors = 4001;
pub const XML_SCHEMATRONV_ASSERT: xmlParserErrors = 4000;
pub const XML_SCHEMAP_COS_ALL_LIMITED: xmlParserErrors = 3091;
pub const XML_SCHEMAP_A_PROPS_CORRECT_3: xmlParserErrors = 3090;
pub const XML_SCHEMAP_AU_PROPS_CORRECT: xmlParserErrors = 3089;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_2: xmlParserErrors = 3088;
pub const XML_SCHEMAP_AG_PROPS_CORRECT: xmlParserErrors = 3087;
pub const XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH: xmlParserErrors = 3086;
pub const XML_SCHEMAP_WARN_ATTR_REDECL_PROH: xmlParserErrors = 3085;
pub const XML_SCHEMAP_WARN_UNLOCATED_SCHEMA: xmlParserErrors = 3084;
pub const XML_SCHEMAP_WARN_SKIP_SCHEMA: xmlParserErrors = 3083;
pub const XML_SCHEMAP_SRC_IMPORT: xmlParserErrors = 3082;
pub const XML_SCHEMAP_SRC_REDEFINE: xmlParserErrors = 3081;
pub const XML_SCHEMAP_C_PROPS_CORRECT: xmlParserErrors = 3080;
pub const XML_SCHEMAP_A_PROPS_CORRECT_2: xmlParserErrors = 3079;
pub const XML_SCHEMAP_AU_PROPS_CORRECT_2: xmlParserErrors = 3078;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3: xmlParserErrors = 3077;
pub const XML_SCHEMAP_SRC_CT_1: xmlParserErrors = 3076;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_2: xmlParserErrors = 3075;
pub const XML_SCHEMAP_MG_PROPS_CORRECT_1: xmlParserErrors = 3074;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3: xmlParserErrors = 3073;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2: xmlParserErrors = 3072;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1: xmlParserErrors = 3071;
pub const XML_SCHEMAP_NOT_DETERMINISTIC: xmlParserErrors = 3070;
pub const XML_SCHEMAP_INTERNAL: xmlParserErrors = 3069;
pub const XML_SCHEMAP_SRC_IMPORT_2_2: xmlParserErrors = 3068;
pub const XML_SCHEMAP_SRC_IMPORT_2_1: xmlParserErrors = 3067;
pub const XML_SCHEMAP_SRC_IMPORT_2: xmlParserErrors = 3066;
pub const XML_SCHEMAP_SRC_IMPORT_1_2: xmlParserErrors = 3065;
pub const XML_SCHEMAP_SRC_IMPORT_1_1: xmlParserErrors = 3064;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_1: xmlParserErrors = 3063;
pub const XML_SCHEMAP_CVC_SIMPLE_TYPE: xmlParserErrors = 3062;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2: xmlParserErrors = 3061;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1: xmlParserErrors = 3060;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_2_1: xmlParserErrors = 3059;
pub const XML_SCHEMAP_COS_VALID_DEFAULT_1: xmlParserErrors = 3058;
pub const XML_SCHEMAP_NO_XSI: xmlParserErrors = 3057;
pub const XML_SCHEMAP_NO_XMLNS: xmlParserErrors = 3056;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_4: xmlParserErrors = 3055;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_2: xmlParserErrors = 3054;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_3_1: xmlParserErrors = 3053;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_2: xmlParserErrors = 3052;
pub const XML_SCHEMAP_SRC_ATTRIBUTE_1: xmlParserErrors = 3051;
pub const XML_SCHEMAP_SRC_INCLUDE: xmlParserErrors = 3050;
pub const XML_SCHEMAP_E_PROPS_CORRECT_6: xmlParserErrors = 3049;
pub const XML_SCHEMAP_E_PROPS_CORRECT_5: xmlParserErrors = 3048;
pub const XML_SCHEMAP_E_PROPS_CORRECT_4: xmlParserErrors = 3047;
pub const XML_SCHEMAP_E_PROPS_CORRECT_3: xmlParserErrors = 3046;
pub const XML_SCHEMAP_E_PROPS_CORRECT_2: xmlParserErrors = 3045;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_2: xmlParserErrors = 3044;
pub const XML_SCHEMAP_P_PROPS_CORRECT_2_1: xmlParserErrors = 3043;
pub const XML_SCHEMAP_P_PROPS_CORRECT_1: xmlParserErrors = 3042;
pub const XML_SCHEMAP_SRC_ELEMENT_3: xmlParserErrors = 3041;
pub const XML_SCHEMAP_SRC_ELEMENT_2_2: xmlParserErrors = 3040;
pub const XML_SCHEMAP_SRC_ELEMENT_2_1: xmlParserErrors = 3039;
pub const XML_SCHEMAP_SRC_ELEMENT_1: xmlParserErrors = 3038;
pub const XML_SCHEMAP_S4S_ATTR_INVALID_VALUE: xmlParserErrors = 3037;
pub const XML_SCHEMAP_S4S_ATTR_MISSING: xmlParserErrors = 3036;
pub const XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED: xmlParserErrors = 3035;
pub const XML_SCHEMAP_S4S_ELEM_MISSING: xmlParserErrors = 3034;
pub const XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED: xmlParserErrors = 3033;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_2: xmlParserErrors = 3032;
pub const XML_SCHEMAP_COS_ST_DERIVED_OK_2_1: xmlParserErrors = 3031;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5: xmlParserErrors = 3030;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4: xmlParserErrors = 3029;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3: xmlParserErrors = 3028;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1: xmlParserErrors = 3027;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2: xmlParserErrors = 3026;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2: xmlParserErrors = 3025;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1: xmlParserErrors = 3024;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_3_1: xmlParserErrors = 3023;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5: xmlParserErrors = 3022;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4: xmlParserErrors = 3021;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3: xmlParserErrors = 3020;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2: xmlParserErrors = 3019;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1: xmlParserErrors = 3018;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2: xmlParserErrors = 3017;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1: xmlParserErrors = 3016;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_2_1: xmlParserErrors = 3015;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2: xmlParserErrors = 3014;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1: xmlParserErrors = 3013;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_2: xmlParserErrors = 3012;
pub const XML_SCHEMAP_COS_ST_RESTRICTS_1_1: xmlParserErrors = 3011;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_3: xmlParserErrors = 3010;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_2: xmlParserErrors = 3009;
pub const XML_SCHEMAP_ST_PROPS_CORRECT_1: xmlParserErrors = 3008;
pub const XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES: xmlParserErrors =
    3007;
pub const XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE: xmlParserErrors = 3006;
pub const XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE: xmlParserErrors =
    3005;
pub const XML_SCHEMAP_SRC_RESOLVE: xmlParserErrors = 3004;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_4: xmlParserErrors = 3003;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_3: xmlParserErrors = 3002;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_2: xmlParserErrors = 3001;
pub const XML_SCHEMAP_SRC_SIMPLE_TYPE_1: xmlParserErrors = 3000;
pub const XML_HTTP_UNKNOWN_HOST: xmlParserErrors = 2022;
pub const XML_HTTP_USE_IP: xmlParserErrors = 2021;
pub const XML_HTTP_URL_SYNTAX: xmlParserErrors = 2020;
pub const XML_FTP_URL_SYNTAX: xmlParserErrors = 2003;
pub const XML_FTP_ACCNT: xmlParserErrors = 2002;
pub const XML_FTP_EPSV_ANSWER: xmlParserErrors = 2001;
pub const XML_FTP_PASV_ANSWER: xmlParserErrors = 2000;
pub const XML_C14N_RELATIVE_NAMESPACE: xmlParserErrors = 1955;
pub const XML_C14N_UNKNOW_NODE: xmlParserErrors = 1954;
pub const XML_C14N_INVALID_NODE: xmlParserErrors = 1953;
pub const XML_C14N_CREATE_STACK: xmlParserErrors = 1952;
pub const XML_C14N_REQUIRES_UTF8: xmlParserErrors = 1951;
pub const XML_C14N_CREATE_CTXT: xmlParserErrors = 1950;
pub const XML_XPTR_EXTRA_OBJECTS: xmlParserErrors = 1903;
pub const XML_XPTR_EVAL_FAILED: xmlParserErrors = 1902;
pub const XML_XPTR_CHILDSEQ_START: xmlParserErrors = 1901;
pub const XML_XPTR_UNKNOWN_SCHEME: xmlParserErrors = 1900;
pub const XML_SCHEMAV_MISC: xmlParserErrors = 1879;
pub const XML_SCHEMAV_CVC_WILDCARD: xmlParserErrors = 1878;
pub const XML_SCHEMAV_CVC_IDC: xmlParserErrors = 1877;
pub const XML_SCHEMAV_CVC_TYPE_2: xmlParserErrors = 1876;
pub const XML_SCHEMAV_CVC_TYPE_1: xmlParserErrors = 1875;
pub const XML_SCHEMAV_CVC_AU: xmlParserErrors = 1874;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_1: xmlParserErrors = 1873;
pub const XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING: xmlParserErrors = 1872;
pub const XML_SCHEMAV_ELEMENT_CONTENT: xmlParserErrors = 1871;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2: xmlParserErrors = 1870;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1: xmlParserErrors = 1869;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_4: xmlParserErrors = 1868;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2: xmlParserErrors = 1867;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1: xmlParserErrors = 1866;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1: xmlParserErrors = 1865;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_4: xmlParserErrors = 1864;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_3: xmlParserErrors = 1863;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_2: xmlParserErrors = 1862;
pub const XML_SCHEMAV_CVC_ATTRIBUTE_1: xmlParserErrors = 1861;
pub const XML_SCHEMAV_CVC_ELT_7: xmlParserErrors = 1860;
pub const XML_SCHEMAV_CVC_ELT_6: xmlParserErrors = 1859;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_2: xmlParserErrors = 1858;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_2_1: xmlParserErrors = 1857;
pub const XML_SCHEMAV_CVC_ELT_5_2_2_1: xmlParserErrors = 1856;
pub const XML_SCHEMAV_CVC_ELT_5_2_1: xmlParserErrors = 1855;
pub const XML_SCHEMAV_CVC_ELT_5_1_2: xmlParserErrors = 1854;
pub const XML_SCHEMAV_CVC_ELT_5_1_1: xmlParserErrors = 1853;
pub const XML_SCHEMAV_CVC_ELT_4_3: xmlParserErrors = 1852;
pub const XML_SCHEMAV_CVC_ELT_4_2: xmlParserErrors = 1851;
pub const XML_SCHEMAV_CVC_ELT_4_1: xmlParserErrors = 1850;
pub const XML_SCHEMAV_CVC_ELT_3_2_2: xmlParserErrors = 1849;
pub const XML_SCHEMAV_CVC_ELT_3_2_1: xmlParserErrors = 1848;
pub const XML_SCHEMAV_CVC_ELT_3_1: xmlParserErrors = 1847;
pub const XML_SCHEMAV_CVC_ELT_2: xmlParserErrors = 1846;
pub const XML_SCHEMAV_CVC_ELT_1: xmlParserErrors = 1845;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4: xmlParserErrors = 1844;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3: xmlParserErrors = 1843;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2: xmlParserErrors = 1842;
pub const XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1: xmlParserErrors = 1841;
pub const XML_SCHEMAV_CVC_ENUMERATION_VALID: xmlParserErrors = 1840;
pub const XML_SCHEMAV_CVC_PATTERN_VALID: xmlParserErrors = 1839;
pub const XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID: xmlParserErrors = 1838;
pub const XML_SCHEMAV_CVC_TOTALDIGITS_VALID: xmlParserErrors = 1837;
pub const XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID: xmlParserErrors = 1836;
pub const XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID: xmlParserErrors = 1835;
pub const XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID: xmlParserErrors = 1834;
pub const XML_SCHEMAV_CVC_MININCLUSIVE_VALID: xmlParserErrors = 1833;
pub const XML_SCHEMAV_CVC_MAXLENGTH_VALID: xmlParserErrors = 1832;
pub const XML_SCHEMAV_CVC_MINLENGTH_VALID: xmlParserErrors = 1831;
pub const XML_SCHEMAV_CVC_LENGTH_VALID: xmlParserErrors = 1830;
pub const XML_SCHEMAV_CVC_FACET_VALID: xmlParserErrors = 1829;
pub const XML_SCHEMAV_CVC_TYPE_3_1_2: xmlParserErrors = 1828;
pub const XML_SCHEMAV_CVC_TYPE_3_1_1: xmlParserErrors = 1827;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3: xmlParserErrors = 1826;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2: xmlParserErrors = 1825;
pub const XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1: xmlParserErrors = 1824;
pub const XML_SCHEMAV_FACET: xmlParserErrors = 1823;
pub const XML_SCHEMAV_VALUE: xmlParserErrors = 1822;
pub const XML_SCHEMAV_ATTRINVALID: xmlParserErrors = 1821;
pub const XML_SCHEMAV_ATTRUNKNOWN: xmlParserErrors = 1820;
pub const XML_SCHEMAV_NOTSIMPLE: xmlParserErrors = 1819;
pub const XML_SCHEMAV_INTERNAL: xmlParserErrors = 1818;
pub const XML_SCHEMAV_CONSTRUCT: xmlParserErrors = 1817;
pub const XML_SCHEMAV_NOTDETERMINIST: xmlParserErrors = 1816;
pub const XML_SCHEMAV_INVALIDELEM: xmlParserErrors = 1815;
pub const XML_SCHEMAV_INVALIDATTR: xmlParserErrors = 1814;
pub const XML_SCHEMAV_EXTRACONTENT: xmlParserErrors = 1813;
pub const XML_SCHEMAV_NOTNILLABLE: xmlParserErrors = 1812;
pub const XML_SCHEMAV_HAVEDEFAULT: xmlParserErrors = 1811;
pub const XML_SCHEMAV_ELEMCONT: xmlParserErrors = 1810;
pub const XML_SCHEMAV_NOTEMPTY: xmlParserErrors = 1809;
pub const XML_SCHEMAV_ISABSTRACT: xmlParserErrors = 1808;
pub const XML_SCHEMAV_NOROLLBACK: xmlParserErrors = 1807;
pub const XML_SCHEMAV_NOTYPE: xmlParserErrors = 1806;
pub const XML_SCHEMAV_WRONGELEM: xmlParserErrors = 1805;
pub const XML_SCHEMAV_MISSING: xmlParserErrors = 1804;
pub const XML_SCHEMAV_NOTTOPLEVEL: xmlParserErrors = 1803;
pub const XML_SCHEMAV_UNDECLAREDELEM: xmlParserErrors = 1802;
pub const XML_SCHEMAV_NOROOT: xmlParserErrors = 1801;
pub const XML_SCHEMAP_COS_CT_EXTENDS_1_3: xmlParserErrors = 1800;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3: xmlParserErrors = 1799;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2: xmlParserErrors = 1798;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1: xmlParserErrors = 1797;
pub const XML_SCHEMAP_SRC_IMPORT_3_2: xmlParserErrors = 1796;
pub const XML_SCHEMAP_SRC_IMPORT_3_1: xmlParserErrors = 1795;
pub const XML_SCHEMAP_UNION_NOT_EXPRESSIBLE: xmlParserErrors = 1794;
pub const XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE: xmlParserErrors = 1793;
pub const XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER: xmlParserErrors = 1792;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3: xmlParserErrors = 1791;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2: xmlParserErrors = 1790;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2: xmlParserErrors = 1789;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1: xmlParserErrors = 1788;
pub const XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1: xmlParserErrors = 1787;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_5: xmlParserErrors = 1786;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_4: xmlParserErrors = 1785;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_3: xmlParserErrors = 1784;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_2: xmlParserErrors = 1783;
pub const XML_SCHEMAP_CT_PROPS_CORRECT_1: xmlParserErrors = 1782;
pub const XML_SCHEMAP_REF_AND_CONTENT: xmlParserErrors = 1781;
pub const XML_SCHEMAP_INVALID_ATTR_NAME: xmlParserErrors = 1780;
pub const XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD: xmlParserErrors = 1779;
pub const XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION: xmlParserErrors = 1778;
pub const XML_SCHEMAP_INVALID_ATTR_COMBINATION: xmlParserErrors = 1777;
pub const XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE: xmlParserErrors = 1776;
pub const XML_SCHEMAP_RECURSIVE: xmlParserErrors = 1775;
pub const XML_SCHEMAP_INVALID_ATTR_USE: xmlParserErrors = 1774;
pub const XML_SCHEMAP_UNKNOWN_MEMBER_TYPE: xmlParserErrors = 1773;
pub const XML_SCHEMAP_NOT_SCHEMA: xmlParserErrors = 1772;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI: xmlParserErrors = 1771;
pub const XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI: xmlParserErrors = 1770;
pub const XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD: xmlParserErrors = 1769;
pub const XML_SCHEMAP_DEF_AND_PREFIX: xmlParserErrors = 1768;
pub const XML_SCHEMAP_UNKNOWN_PREFIX: xmlParserErrors = 1767;
pub const XML_SCHEMAP_FAILED_PARSE: xmlParserErrors = 1766;
pub const XML_SCHEMAP_REDEFINED_NOTATION: xmlParserErrors = 1765;
pub const XML_SCHEMAP_REDEFINED_ATTR: xmlParserErrors = 1764;
pub const XML_SCHEMAP_REDEFINED_ATTRGROUP: xmlParserErrors = 1763;
pub const XML_SCHEMAP_REDEFINED_ELEMENT: xmlParserErrors = 1762;
pub const XML_SCHEMAP_REDEFINED_TYPE: xmlParserErrors = 1761;
pub const XML_SCHEMAP_REDEFINED_GROUP: xmlParserErrors = 1760;
pub const XML_SCHEMAP_NOROOT: xmlParserErrors = 1759;
pub const XML_SCHEMAP_NOTHING_TO_PARSE: xmlParserErrors = 1758;
pub const XML_SCHEMAP_FAILED_LOAD: xmlParserErrors = 1757;
pub const XML_SCHEMAP_REGEXP_INVALID: xmlParserErrors = 1756;
pub const XML_SCHEMAP_ELEM_DEFAULT_FIXED: xmlParserErrors = 1755;
pub const XML_SCHEMAP_UNKNOWN_UNION_CHILD: xmlParserErrors = 1754;
pub const XML_SCHEMAP_UNKNOWN_TYPE: xmlParserErrors = 1753;
pub const XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD: xmlParserErrors = 1752;
pub const XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD: xmlParserErrors = 1751;
pub const XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD: xmlParserErrors = 1750;
pub const XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD: xmlParserErrors = 1749;
pub const XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD: xmlParserErrors = 1748;
pub const XML_SCHEMAP_UNKNOWN_REF: xmlParserErrors = 1747;
pub const XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD: xmlParserErrors = 1746;
pub const XML_SCHEMAP_UNKNOWN_NOTATION_CHILD: xmlParserErrors = 1745;
pub const XML_SCHEMAP_UNKNOWN_LIST_CHILD: xmlParserErrors = 1744;
pub const XML_SCHEMAP_UNKNOWN_IMPORT_CHILD: xmlParserErrors = 1743;
pub const XML_SCHEMAP_UNKNOWN_GROUP_CHILD: xmlParserErrors = 1742;
pub const XML_SCHEMAP_UNKNOWN_FACET_TYPE: xmlParserErrors = 1741;
pub const XML_SCHEMAP_UNKNOWN_FACET_CHILD: xmlParserErrors = 1740;
pub const XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD: xmlParserErrors = 1739;
pub const XML_SCHEMAP_UNKNOWN_ELEM_CHILD: xmlParserErrors = 1738;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD: xmlParserErrors = 1737;
pub const XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD: xmlParserErrors = 1736;
pub const XML_SCHEMAP_UNKNOWN_CHOICE_CHILD: xmlParserErrors = 1735;
pub const XML_SCHEMAP_UNKNOWN_BASE_TYPE: xmlParserErrors = 1734;
pub const XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP: xmlParserErrors = 1733;
pub const XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD: xmlParserErrors = 1732;
pub const XML_SCHEMAP_UNKNOWN_ATTR_CHILD: xmlParserErrors = 1731;
pub const XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD: xmlParserErrors = 1730;
pub const XML_SCHEMAP_UNKNOWN_ALL_CHILD: xmlParserErrors = 1729;
pub const XML_SCHEMAP_TYPE_AND_SUBTYPE: xmlParserErrors = 1728;
pub const XML_SCHEMAP_SIMPLETYPE_NONAME: xmlParserErrors = 1727;
pub const XML_SCHEMAP_RESTRICTION_NONAME_NOREF: xmlParserErrors = 1726;
pub const XML_SCHEMAP_REF_AND_SUBTYPE: xmlParserErrors = 1725;
pub const XML_SCHEMAP_NOTYPE_NOREF: xmlParserErrors = 1724;
pub const XML_SCHEMAP_NOTATION_NO_NAME: xmlParserErrors = 1723;
pub const XML_SCHEMAP_NOATTR_NOREF: xmlParserErrors = 1722;
pub const XML_SCHEMAP_INVALID_WHITE_SPACE: xmlParserErrors = 1721;
pub const XML_SCHEMAP_INVALID_REF_AND_SUBTYPE: xmlParserErrors = 1720;
pub const XML_SCHEMAP_INVALID_MINOCCURS: xmlParserErrors = 1719;
pub const XML_SCHEMAP_INVALID_MAXOCCURS: xmlParserErrors = 1718;
pub const XML_SCHEMAP_INVALID_FACET_VALUE: xmlParserErrors = 1717;
pub const XML_SCHEMAP_INVALID_FACET: xmlParserErrors = 1716;
pub const XML_SCHEMAP_INVALID_ENUM: xmlParserErrors = 1715;
pub const XML_SCHEMAP_INVALID_BOOLEAN: xmlParserErrors = 1714;
pub const XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI: xmlParserErrors = 1713;
pub const XML_SCHEMAP_IMPORT_REDEFINE_NSNAME: xmlParserErrors = 1712;
pub const XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI: xmlParserErrors = 1711;
pub const XML_SCHEMAP_GROUP_NONAME_NOREF: xmlParserErrors = 1710;
pub const XML_SCHEMAP_FAILED_BUILD_IMPORT: xmlParserErrors = 1709;
pub const XML_SCHEMAP_FACET_NO_VALUE: xmlParserErrors = 1708;
pub const XML_SCHEMAP_EXTENSION_NO_BASE: xmlParserErrors = 1707;
pub const XML_SCHEMAP_ELEM_NONAME_NOREF: xmlParserErrors = 1706;
pub const XML_SCHEMAP_ELEMFORMDEFAULT_VALUE: xmlParserErrors = 1705;
pub const XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF: xmlParserErrors = 1704;
pub const XML_SCHEMAP_ATTR_NONAME_NOREF: xmlParserErrors = 1703;
pub const XML_SCHEMAP_ATTRGRP_NONAME_NOREF: xmlParserErrors = 1702;
pub const XML_SCHEMAP_ATTRFORMDEFAULT_VALUE: xmlParserErrors = 1701;
pub const XML_SCHEMAP_PREFIX_UNDEFINED: xmlParserErrors = 1700;
pub const XML_CATALOG_RECURSION: xmlParserErrors = 1654;
pub const XML_CATALOG_NOT_CATALOG: xmlParserErrors = 1653;
pub const XML_CATALOG_PREFER_VALUE: xmlParserErrors = 1652;
pub const XML_CATALOG_ENTRY_BROKEN: xmlParserErrors = 1651;
pub const XML_CATALOG_MISSING_ATTR: xmlParserErrors = 1650;
pub const XML_XINCLUDE_FRAGMENT_ID: xmlParserErrors = 1618;
pub const XML_XINCLUDE_DEPRECATED_NS: xmlParserErrors = 1617;
pub const XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE: xmlParserErrors = 1616;
pub const XML_XINCLUDE_FALLBACKS_IN_INCLUDE: xmlParserErrors = 1615;
pub const XML_XINCLUDE_INCLUDE_IN_INCLUDE: xmlParserErrors = 1614;
pub const XML_XINCLUDE_XPTR_RESULT: xmlParserErrors = 1613;
pub const XML_XINCLUDE_XPTR_FAILED: xmlParserErrors = 1612;
pub const XML_XINCLUDE_MULTIPLE_ROOT: xmlParserErrors = 1611;
pub const XML_XINCLUDE_UNKNOWN_ENCODING: xmlParserErrors = 1610;
pub const XML_XINCLUDE_BUILD_FAILED: xmlParserErrors = 1609;
pub const XML_XINCLUDE_INVALID_CHAR: xmlParserErrors = 1608;
pub const XML_XINCLUDE_TEXT_DOCUMENT: xmlParserErrors = 1607;
pub const XML_XINCLUDE_TEXT_FRAGMENT: xmlParserErrors = 1606;
pub const XML_XINCLUDE_HREF_URI: xmlParserErrors = 1605;
pub const XML_XINCLUDE_NO_FALLBACK: xmlParserErrors = 1604;
pub const XML_XINCLUDE_NO_HREF: xmlParserErrors = 1603;
pub const XML_XINCLUDE_ENTITY_DEF_MISMATCH: xmlParserErrors = 1602;
pub const XML_XINCLUDE_PARSE_VALUE: xmlParserErrors = 1601;
pub const XML_XINCLUDE_RECURSION: xmlParserErrors = 1600;
pub const XML_IO_EAFNOSUPPORT: xmlParserErrors = 1556;
pub const XML_IO_EALREADY: xmlParserErrors = 1555;
pub const XML_IO_EADDRINUSE: xmlParserErrors = 1554;
pub const XML_IO_ENETUNREACH: xmlParserErrors = 1553;
pub const XML_IO_ECONNREFUSED: xmlParserErrors = 1552;
pub const XML_IO_EISCONN: xmlParserErrors = 1551;
pub const XML_IO_ENOTSOCK: xmlParserErrors = 1550;
pub const XML_IO_LOAD_ERROR: xmlParserErrors = 1549;
pub const XML_IO_BUFFER_FULL: xmlParserErrors = 1548;
pub const XML_IO_NO_INPUT: xmlParserErrors = 1547;
pub const XML_IO_WRITE: xmlParserErrors = 1546;
pub const XML_IO_FLUSH: xmlParserErrors = 1545;
pub const XML_IO_ENCODER: xmlParserErrors = 1544;
pub const XML_IO_NETWORK_ATTEMPT: xmlParserErrors = 1543;
pub const XML_IO_EXDEV: xmlParserErrors = 1542;
pub const XML_IO_ETIMEDOUT: xmlParserErrors = 1541;
pub const XML_IO_ESRCH: xmlParserErrors = 1540;
pub const XML_IO_ESPIPE: xmlParserErrors = 1539;
pub const XML_IO_EROFS: xmlParserErrors = 1538;
pub const XML_IO_ERANGE: xmlParserErrors = 1537;
pub const XML_IO_EPIPE: xmlParserErrors = 1536;
pub const XML_IO_EPERM: xmlParserErrors = 1535;
pub const XML_IO_ENXIO: xmlParserErrors = 1534;
pub const XML_IO_ENOTTY: xmlParserErrors = 1533;
pub const XML_IO_ENOTSUP: xmlParserErrors = 1532;
pub const XML_IO_ENOTEMPTY: xmlParserErrors = 1531;
pub const XML_IO_ENOTDIR: xmlParserErrors = 1530;
pub const XML_IO_ENOSYS: xmlParserErrors = 1529;
pub const XML_IO_ENOSPC: xmlParserErrors = 1528;
pub const XML_IO_ENOMEM: xmlParserErrors = 1527;
pub const XML_IO_ENOLCK: xmlParserErrors = 1526;
pub const XML_IO_ENOEXEC: xmlParserErrors = 1525;
pub const XML_IO_ENOENT: xmlParserErrors = 1524;
pub const XML_IO_ENODEV: xmlParserErrors = 1523;
pub const XML_IO_ENFILE: xmlParserErrors = 1522;
pub const XML_IO_ENAMETOOLONG: xmlParserErrors = 1521;
pub const XML_IO_EMSGSIZE: xmlParserErrors = 1520;
pub const XML_IO_EMLINK: xmlParserErrors = 1519;
pub const XML_IO_EMFILE: xmlParserErrors = 1518;
pub const XML_IO_EISDIR: xmlParserErrors = 1517;
pub const XML_IO_EIO: xmlParserErrors = 1516;
pub const XML_IO_EINVAL: xmlParserErrors = 1515;
pub const XML_IO_EINTR: xmlParserErrors = 1514;
pub const XML_IO_EINPROGRESS: xmlParserErrors = 1513;
pub const XML_IO_EFBIG: xmlParserErrors = 1512;
pub const XML_IO_EFAULT: xmlParserErrors = 1511;
pub const XML_IO_EEXIST: xmlParserErrors = 1510;
pub const XML_IO_EDOM: xmlParserErrors = 1509;
pub const XML_IO_EDEADLK: xmlParserErrors = 1508;
pub const XML_IO_ECHILD: xmlParserErrors = 1507;
pub const XML_IO_ECANCELED: xmlParserErrors = 1506;
pub const XML_IO_EBUSY: xmlParserErrors = 1505;
pub const XML_IO_EBADMSG: xmlParserErrors = 1504;
pub const XML_IO_EBADF: xmlParserErrors = 1503;
pub const XML_IO_EAGAIN: xmlParserErrors = 1502;
pub const XML_IO_EACCES: xmlParserErrors = 1501;
pub const XML_IO_UNKNOWN: xmlParserErrors = 1500;
pub const XML_REGEXP_COMPILE_ERROR: xmlParserErrors = 1450;
pub const XML_SAVE_UNKNOWN_ENCODING: xmlParserErrors = 1403;
pub const XML_SAVE_NO_DOCTYPE: xmlParserErrors = 1402;
pub const XML_SAVE_CHAR_INVALID: xmlParserErrors = 1401;
pub const XML_SAVE_NOT_UTF8: xmlParserErrors = 1400;
pub const XML_TREE_NOT_UTF8: xmlParserErrors = 1303;
pub const XML_TREE_UNTERMINATED_ENTITY: xmlParserErrors = 1302;
pub const XML_TREE_INVALID_DEC: xmlParserErrors = 1301;
pub const XML_TREE_INVALID_HEX: xmlParserErrors = 1300;
pub const XML_XPATH_INVALID_CHAR_ERROR: xmlParserErrors = 1221;
pub const XML_XPATH_ENCODING_ERROR: xmlParserErrors = 1220;
pub const XML_XPATH_UNDEF_PREFIX_ERROR: xmlParserErrors = 1219;
pub const XML_XPTR_SUB_RESOURCE_ERROR: xmlParserErrors = 1218;
pub const XML_XPTR_RESOURCE_ERROR: xmlParserErrors = 1217;
pub const XML_XPTR_SYNTAX_ERROR: xmlParserErrors = 1216;
pub const XML_XPATH_MEMORY_ERROR: xmlParserErrors = 1215;
pub const XML_XPATH_INVALID_CTXT_POSITION: xmlParserErrors = 1214;
pub const XML_XPATH_INVALID_CTXT_SIZE: xmlParserErrors = 1213;
pub const XML_XPATH_INVALID_ARITY: xmlParserErrors = 1212;
pub const XML_XPATH_INVALID_TYPE: xmlParserErrors = 1211;
pub const XML_XPATH_INVALID_OPERAND: xmlParserErrors = 1210;
pub const XML_XPATH_UNKNOWN_FUNC_ERROR: xmlParserErrors = 1209;
pub const XML_XPATH_UNCLOSED_ERROR: xmlParserErrors = 1208;
pub const XML_XPATH_EXPR_ERROR: xmlParserErrors = 1207;
pub const XML_XPATH_INVALID_PREDICATE_ERROR: xmlParserErrors = 1206;
pub const XML_XPATH_UNDEF_VARIABLE_ERROR: xmlParserErrors = 1205;
pub const XML_XPATH_VARIABLE_REF_ERROR: xmlParserErrors = 1204;
pub const XML_XPATH_START_LITERAL_ERROR: xmlParserErrors = 1203;
pub const XML_XPATH_UNFINISHED_LITERAL_ERROR: xmlParserErrors = 1202;
pub const XML_XPATH_NUMBER_ERROR: xmlParserErrors = 1201;
pub const XML_XPATH_EXPRESSION_OK: xmlParserErrors = 1200;
pub const XML_RNGP_XML_NS: xmlParserErrors = 1122;
pub const XML_RNGP_XMLNS_NAME: xmlParserErrors = 1121;
pub const XML_RNGP_VALUE_NO_CONTENT: xmlParserErrors = 1120;
pub const XML_RNGP_VALUE_EMPTY: xmlParserErrors = 1119;
pub const XML_RNGP_URI_NOT_ABSOLUTE: xmlParserErrors = 1118;
pub const XML_RNGP_URI_FRAGMENT: xmlParserErrors = 1117;
pub const XML_RNGP_UNKNOWN_TYPE_LIB: xmlParserErrors = 1116;
pub const XML_RNGP_UNKNOWN_CONSTRUCT: xmlParserErrors = 1115;
pub const XML_RNGP_UNKNOWN_COMBINE: xmlParserErrors = 1114;
pub const XML_RNGP_UNKNOWN_ATTRIBUTE: xmlParserErrors = 1113;
pub const XML_RNGP_TYPE_VALUE: xmlParserErrors = 1112;
pub const XML_RNGP_TYPE_NOT_FOUND: xmlParserErrors = 1111;
pub const XML_RNGP_TYPE_MISSING: xmlParserErrors = 1110;
pub const XML_RNGP_TEXT_HAS_CHILD: xmlParserErrors = 1109;
pub const XML_RNGP_TEXT_EXPECTED: xmlParserErrors = 1108;
pub const XML_RNGP_START_MISSING: xmlParserErrors = 1107;
pub const XML_RNGP_START_EMPTY: xmlParserErrors = 1106;
pub const XML_RNGP_START_CONTENT: xmlParserErrors = 1105;
pub const XML_RNGP_START_CHOICE_AND_INTERLEAVE: xmlParserErrors = 1104;
pub const XML_RNGP_REF_NOT_EMPTY: xmlParserErrors = 1103;
pub const XML_RNGP_REF_NO_NAME: xmlParserErrors = 1102;
pub const XML_RNGP_REF_NO_DEF: xmlParserErrors = 1101;
pub const XML_RNGP_REF_NAME_INVALID: xmlParserErrors = 1100;
pub const XML_RNGP_REF_CYCLE: xmlParserErrors = 1099;
pub const XML_RNGP_REF_CREATE_FAILED: xmlParserErrors = 1098;
pub const XML_RNGP_PREFIX_UNDEFINED: xmlParserErrors = 1097;
pub const XML_RNGP_PAT_START_VALUE: xmlParserErrors = 1096;
pub const XML_RNGP_PAT_START_TEXT: xmlParserErrors = 1095;
pub const XML_RNGP_PAT_START_ONEMORE: xmlParserErrors = 1094;
pub const XML_RNGP_PAT_START_LIST: xmlParserErrors = 1093;
pub const XML_RNGP_PAT_START_INTERLEAVE: xmlParserErrors = 1092;
pub const XML_RNGP_PAT_START_GROUP: xmlParserErrors = 1091;
pub const XML_RNGP_PAT_START_EMPTY: xmlParserErrors = 1090;
pub const XML_RNGP_PAT_START_DATA: xmlParserErrors = 1089;
pub const XML_RNGP_PAT_START_ATTR: xmlParserErrors = 1088;
pub const XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR: xmlParserErrors = 1087;
pub const XML_RNGP_PAT_ONEMORE_GROUP_ATTR: xmlParserErrors = 1086;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME: xmlParserErrors = 1085;
pub const XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME: xmlParserErrors = 1084;
pub const XML_RNGP_PAT_LIST_TEXT: xmlParserErrors = 1083;
pub const XML_RNGP_PAT_LIST_REF: xmlParserErrors = 1082;
pub const XML_RNGP_PAT_LIST_LIST: xmlParserErrors = 1081;
pub const XML_RNGP_PAT_LIST_INTERLEAVE: xmlParserErrors = 1080;
pub const XML_RNGP_PAT_LIST_ELEM: xmlParserErrors = 1079;
pub const XML_RNGP_PAT_LIST_ATTR: xmlParserErrors = 1078;
pub const XML_RNGP_PAT_DATA_EXCEPT_TEXT: xmlParserErrors = 1077;
pub const XML_RNGP_PAT_DATA_EXCEPT_REF: xmlParserErrors = 1076;
pub const XML_RNGP_PAT_DATA_EXCEPT_ONEMORE: xmlParserErrors = 1075;
pub const XML_RNGP_PAT_DATA_EXCEPT_LIST: xmlParserErrors = 1074;
pub const XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE: xmlParserErrors = 1073;
pub const XML_RNGP_PAT_DATA_EXCEPT_GROUP: xmlParserErrors = 1072;
pub const XML_RNGP_PAT_DATA_EXCEPT_EMPTY: xmlParserErrors = 1071;
pub const XML_RNGP_PAT_DATA_EXCEPT_ELEM: xmlParserErrors = 1070;
pub const XML_RNGP_PAT_DATA_EXCEPT_ATTR: xmlParserErrors = 1069;
pub const XML_RNGP_PAT_ATTR_ELEM: xmlParserErrors = 1068;
pub const XML_RNGP_PAT_ATTR_ATTR: xmlParserErrors = 1067;
pub const XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME: xmlParserErrors = 1066;
pub const XML_RNGP_PARSE_ERROR: xmlParserErrors = 1065;
pub const XML_RNGP_PARENTREF_NOT_EMPTY: xmlParserErrors = 1064;
pub const XML_RNGP_PARENTREF_NO_PARENT: xmlParserErrors = 1063;
pub const XML_RNGP_PARENTREF_NO_NAME: xmlParserErrors = 1062;
pub const XML_RNGP_PARENTREF_NAME_INVALID: xmlParserErrors = 1061;
pub const XML_RNGP_PARENTREF_CREATE_FAILED: xmlParserErrors = 1060;
pub const XML_RNGP_PARAM_NAME_MISSING: xmlParserErrors = 1059;
pub const XML_RNGP_PARAM_FORBIDDEN: xmlParserErrors = 1058;
pub const XML_RNGP_NSNAME_NO_NS: xmlParserErrors = 1057;
pub const XML_RNGP_NSNAME_ATTR_ANCESTOR: xmlParserErrors = 1056;
pub const XML_RNGP_NOTALLOWED_NOT_EMPTY: xmlParserErrors = 1055;
pub const XML_RNGP_NEED_COMBINE: xmlParserErrors = 1054;
pub const XML_RNGP_NAME_MISSING: xmlParserErrors = 1053;
pub const XML_RNGP_MISSING_HREF: xmlParserErrors = 1052;
pub const XML_RNGP_INVALID_VALUE: xmlParserErrors = 1051;
pub const XML_RNGP_INVALID_URI: xmlParserErrors = 1050;
pub const XML_RNGP_INVALID_DEFINE_NAME: xmlParserErrors = 1049;
pub const XML_RNGP_INTERLEAVE_NO_CONTENT: xmlParserErrors = 1048;
pub const XML_RNGP_INTERLEAVE_EMPTY: xmlParserErrors = 1047;
pub const XML_RNGP_INTERLEAVE_CREATE_FAILED: xmlParserErrors = 1046;
pub const XML_RNGP_INTERLEAVE_ADD: xmlParserErrors = 1045;
pub const XML_RNGP_INCLUDE_RECURSE: xmlParserErrors = 1044;
pub const XML_RNGP_INCLUDE_FAILURE: xmlParserErrors = 1043;
pub const XML_RNGP_INCLUDE_EMPTY: xmlParserErrors = 1042;
pub const XML_RNGP_HREF_ERROR: xmlParserErrors = 1041;
pub const XML_RNGP_GROUP_ATTR_CONFLICT: xmlParserErrors = 1040;
pub const XML_RNGP_GRAMMAR_NO_START: xmlParserErrors = 1039;
pub const XML_RNGP_GRAMMAR_MISSING: xmlParserErrors = 1038;
pub const XML_RNGP_GRAMMAR_EMPTY: xmlParserErrors = 1037;
pub const XML_RNGP_GRAMMAR_CONTENT: xmlParserErrors = 1036;
pub const XML_RNGP_FOREIGN_ELEMENT: xmlParserErrors = 1035;
pub const XML_RNGP_FORBIDDEN_ATTRIBUTE: xmlParserErrors = 1034;
pub const XML_RNGP_EXTERNALREF_RECURSE: xmlParserErrors = 1033;
pub const XML_RNGP_EXTERNAL_REF_FAILURE: xmlParserErrors = 1032;
pub const XML_RNGP_EXTERNALREF_EMTPY: xmlParserErrors = 1031;
pub const XML_RNGP_EXCEPT_NO_CONTENT: xmlParserErrors = 1030;
pub const XML_RNGP_EXCEPT_MULTIPLE: xmlParserErrors = 1029;
pub const XML_RNGP_EXCEPT_MISSING: xmlParserErrors = 1028;
pub const XML_RNGP_EXCEPT_EMPTY: xmlParserErrors = 1027;
pub const XML_RNGP_ERROR_TYPE_LIB: xmlParserErrors = 1026;
pub const XML_RNGP_EMPTY_NOT_EMPTY: xmlParserErrors = 1025;
pub const XML_RNGP_EMPTY_CONTENT: xmlParserErrors = 1024;
pub const XML_RNGP_EMPTY_CONSTRUCT: xmlParserErrors = 1023;
pub const XML_RNGP_EMPTY: xmlParserErrors = 1022;
pub const XML_RNGP_ELEM_TEXT_CONFLICT: xmlParserErrors = 1021;
pub const XML_RNGP_ELEMENT_NO_CONTENT: xmlParserErrors = 1020;
pub const XML_RNGP_ELEMENT_NAME: xmlParserErrors = 1019;
pub const XML_RNGP_ELEMENT_CONTENT: xmlParserErrors = 1018;
pub const XML_RNGP_ELEMENT_EMPTY: xmlParserErrors = 1017;
pub const XML_RNGP_ELEM_CONTENT_ERROR: xmlParserErrors = 1016;
pub const XML_RNGP_ELEM_CONTENT_EMPTY: xmlParserErrors = 1015;
pub const XML_RNGP_DEFINE_NAME_MISSING: xmlParserErrors = 1014;
pub const XML_RNGP_DEFINE_MISSING: xmlParserErrors = 1013;
pub const XML_RNGP_DEFINE_EMPTY: xmlParserErrors = 1012;
pub const XML_RNGP_DEFINE_CREATE_FAILED: xmlParserErrors = 1011;
pub const XML_RNGP_DEF_CHOICE_AND_INTERLEAVE: xmlParserErrors = 1010;
pub const XML_RNGP_DATA_CONTENT: xmlParserErrors = 1009;
pub const XML_RNGP_CREATE_FAILURE: xmlParserErrors = 1008;
pub const XML_RNGP_CHOICE_EMPTY: xmlParserErrors = 1007;
pub const XML_RNGP_CHOICE_CONTENT: xmlParserErrors = 1006;
pub const XML_RNGP_ATTRIBUTE_NOOP: xmlParserErrors = 1005;
pub const XML_RNGP_ATTRIBUTE_EMPTY: xmlParserErrors = 1004;
pub const XML_RNGP_ATTRIBUTE_CONTENT: xmlParserErrors = 1003;
pub const XML_RNGP_ATTRIBUTE_CHILDREN: xmlParserErrors = 1002;
pub const XML_RNGP_ATTR_CONFLICT: xmlParserErrors = 1001;
pub const XML_RNGP_ANYNAME_ATTR_ANCESTOR: xmlParserErrors = 1000;
pub const XML_HTML_UNKNOWN_TAG: xmlParserErrors = 801;
pub const XML_HTML_STRUCURE_ERROR: xmlParserErrors = 800;
pub const XML_DTD_DUP_TOKEN: xmlParserErrors = 541;
pub const XML_DTD_XMLID_TYPE: xmlParserErrors = 540;
pub const XML_DTD_XMLID_VALUE: xmlParserErrors = 539;
pub const XML_DTD_STANDALONE_DEFAULTED: xmlParserErrors = 538;
pub const XML_DTD_UNKNOWN_NOTATION: xmlParserErrors = 537;
pub const XML_DTD_UNKNOWN_ID: xmlParserErrors = 536;
pub const XML_DTD_UNKNOWN_ENTITY: xmlParserErrors = 535;
pub const XML_DTD_UNKNOWN_ELEM: xmlParserErrors = 534;
pub const XML_DTD_UNKNOWN_ATTRIBUTE: xmlParserErrors = 533;
pub const XML_DTD_STANDALONE_WHITE_SPACE: xmlParserErrors = 532;
pub const XML_DTD_ROOT_NAME: xmlParserErrors = 531;
pub const XML_DTD_NOT_STANDALONE: xmlParserErrors = 530;
pub const XML_DTD_NOT_PCDATA: xmlParserErrors = 529;
pub const XML_DTD_NOT_EMPTY: xmlParserErrors = 528;
pub const XML_DTD_NOTATION_VALUE: xmlParserErrors = 527;
pub const XML_DTD_NOTATION_REDEFINED: xmlParserErrors = 526;
pub const XML_DTD_NO_ROOT: xmlParserErrors = 525;
pub const XML_DTD_NO_PREFIX: xmlParserErrors = 524;
pub const XML_DTD_NO_ELEM_NAME: xmlParserErrors = 523;
pub const XML_DTD_NO_DTD: xmlParserErrors = 522;
pub const XML_DTD_NO_DOC: xmlParserErrors = 521;
pub const XML_DTD_MULTIPLE_ID: xmlParserErrors = 520;
pub const XML_DTD_MIXED_CORRUPT: xmlParserErrors = 519;
pub const XML_DTD_MISSING_ATTRIBUTE: xmlParserErrors = 518;
pub const XML_DTD_LOAD_ERROR: xmlParserErrors = 517;
pub const XML_DTD_INVALID_DEFAULT: xmlParserErrors = 516;
pub const XML_DTD_INVALID_CHILD: xmlParserErrors = 515;
pub const XML_DTD_ID_SUBSET: xmlParserErrors = 514;
pub const XML_DTD_ID_REDEFINED: xmlParserErrors = 513;
pub const XML_DTD_ID_FIXED: xmlParserErrors = 512;
pub const XML_DTD_ENTITY_TYPE: xmlParserErrors = 511;
pub const XML_DTD_EMPTY_NOTATION: xmlParserErrors = 510;
pub const XML_DTD_ELEM_REDEFINED: xmlParserErrors = 509;
pub const XML_DTD_ELEM_NAMESPACE: xmlParserErrors = 508;
pub const XML_DTD_ELEM_DEFAULT_NAMESPACE: xmlParserErrors = 507;
pub const XML_DTD_DIFFERENT_PREFIX: xmlParserErrors = 506;
pub const XML_DTD_CONTENT_NOT_DETERMINIST: xmlParserErrors = 505;
pub const XML_DTD_CONTENT_MODEL: xmlParserErrors = 504;
pub const XML_DTD_CONTENT_ERROR: xmlParserErrors = 503;
pub const XML_DTD_ATTRIBUTE_VALUE: xmlParserErrors = 502;
pub const XML_DTD_ATTRIBUTE_REDEFINED: xmlParserErrors = 501;
pub const XML_DTD_ATTRIBUTE_DEFAULT: xmlParserErrors = 500;
pub const XML_NS_ERR_COLON: xmlParserErrors = 205;
pub const XML_NS_ERR_EMPTY: xmlParserErrors = 204;
pub const XML_NS_ERR_ATTRIBUTE_REDEFINED: xmlParserErrors = 203;
pub const XML_NS_ERR_QNAME: xmlParserErrors = 202;
pub const XML_NS_ERR_UNDEFINED_NAMESPACE: xmlParserErrors = 201;
pub const XML_NS_ERR_XML_NAMESPACE: xmlParserErrors = 200;
pub const XML_ERR_USER_STOP: xmlParserErrors = 111;
pub const XML_ERR_NAME_TOO_LONG: xmlParserErrors = 110;
pub const XML_ERR_VERSION_MISMATCH: xmlParserErrors = 109;
pub const XML_ERR_UNKNOWN_VERSION: xmlParserErrors = 108;
pub const XML_WAR_ENTITY_REDEFINED: xmlParserErrors = 107;
pub const XML_WAR_NS_COLUMN: xmlParserErrors = 106;
pub const XML_ERR_NOTATION_PROCESSING: xmlParserErrors = 105;
pub const XML_ERR_ENTITY_PROCESSING: xmlParserErrors = 104;
pub const XML_ERR_NOT_STANDALONE: xmlParserErrors = 103;
pub const XML_WAR_SPACE_VALUE: xmlParserErrors = 102;
pub const XML_ERR_MISSING_ENCODING: xmlParserErrors = 101;
pub const XML_WAR_NS_URI_RELATIVE: xmlParserErrors = 100;
pub const XML_WAR_NS_URI: xmlParserErrors = 99;
pub const XML_WAR_LANG_VALUE: xmlParserErrors = 98;
pub const XML_WAR_UNKNOWN_VERSION: xmlParserErrors = 97;
pub const XML_ERR_VERSION_MISSING: xmlParserErrors = 96;
pub const XML_ERR_CONDSEC_INVALID_KEYWORD: xmlParserErrors = 95;
pub const XML_ERR_NO_DTD: xmlParserErrors = 94;
pub const XML_WAR_CATALOG_PI: xmlParserErrors = 93;
pub const XML_ERR_URI_FRAGMENT: xmlParserErrors = 92;
pub const XML_ERR_INVALID_URI: xmlParserErrors = 91;
pub const XML_ERR_ENTITY_BOUNDARY: xmlParserErrors = 90;
pub const XML_ERR_ENTITY_LOOP: xmlParserErrors = 89;
pub const XML_ERR_ENTITY_PE_INTERNAL: xmlParserErrors = 88;
pub const XML_ERR_ENTITY_CHAR_ERROR: xmlParserErrors = 87;
pub const XML_ERR_EXTRA_CONTENT: xmlParserErrors = 86;
pub const XML_ERR_NOT_WELL_BALANCED: xmlParserErrors = 85;
pub const XML_ERR_VALUE_REQUIRED: xmlParserErrors = 84;
pub const XML_ERR_CONDSEC_INVALID: xmlParserErrors = 83;
pub const XML_ERR_EXT_ENTITY_STANDALONE: xmlParserErrors = 82;
pub const XML_ERR_INVALID_ENCODING: xmlParserErrors = 81;
pub const XML_ERR_HYPHEN_IN_COMMENT: xmlParserErrors = 80;
pub const XML_ERR_ENCODING_NAME: xmlParserErrors = 79;
pub const XML_ERR_STANDALONE_VALUE: xmlParserErrors = 78;
pub const XML_ERR_TAG_NOT_FINISHED: xmlParserErrors = 77;
pub const XML_ERR_TAG_NAME_MISMATCH: xmlParserErrors = 76;
pub const XML_ERR_EQUAL_REQUIRED: xmlParserErrors = 75;
pub const XML_ERR_LTSLASH_REQUIRED: xmlParserErrors = 74;
pub const XML_ERR_GT_REQUIRED: xmlParserErrors = 73;
pub const XML_ERR_LT_REQUIRED: xmlParserErrors = 72;
pub const XML_ERR_PUBID_REQUIRED: xmlParserErrors = 71;
pub const XML_ERR_URI_REQUIRED: xmlParserErrors = 70;
pub const XML_ERR_PCDATA_REQUIRED: xmlParserErrors = 69;
pub const XML_ERR_NAME_REQUIRED: xmlParserErrors = 68;
pub const XML_ERR_NMTOKEN_REQUIRED: xmlParserErrors = 67;
pub const XML_ERR_SEPARATOR_REQUIRED: xmlParserErrors = 66;
pub const XML_ERR_SPACE_REQUIRED: xmlParserErrors = 65;
pub const XML_ERR_RESERVED_XML_NAME: xmlParserErrors = 64;
pub const XML_ERR_CDATA_NOT_FINISHED: xmlParserErrors = 63;
pub const XML_ERR_MISPLACED_CDATA_END: xmlParserErrors = 62;
pub const XML_ERR_DOCTYPE_NOT_FINISHED: xmlParserErrors = 61;
pub const XML_ERR_EXT_SUBSET_NOT_FINISHED: xmlParserErrors = 60;
pub const XML_ERR_CONDSEC_NOT_FINISHED: xmlParserErrors = 59;
pub const XML_ERR_CONDSEC_NOT_STARTED: xmlParserErrors = 58;
pub const XML_ERR_XMLDECL_NOT_FINISHED: xmlParserErrors = 57;
pub const XML_ERR_XMLDECL_NOT_STARTED: xmlParserErrors = 56;
pub const XML_ERR_ELEMCONTENT_NOT_FINISHED: xmlParserErrors = 55;
pub const XML_ERR_ELEMCONTENT_NOT_STARTED: xmlParserErrors = 54;
pub const XML_ERR_MIXED_NOT_FINISHED: xmlParserErrors = 53;
pub const XML_ERR_MIXED_NOT_STARTED: xmlParserErrors = 52;
pub const XML_ERR_ATTLIST_NOT_FINISHED: xmlParserErrors = 51;
pub const XML_ERR_ATTLIST_NOT_STARTED: xmlParserErrors = 50;
pub const XML_ERR_NOTATION_NOT_FINISHED: xmlParserErrors = 49;
pub const XML_ERR_NOTATION_NOT_STARTED: xmlParserErrors = 48;
pub const XML_ERR_PI_NOT_FINISHED: xmlParserErrors = 47;
pub const XML_ERR_PI_NOT_STARTED: xmlParserErrors = 46;
pub const XML_ERR_COMMENT_NOT_FINISHED: xmlParserErrors = 45;
pub const XML_ERR_LITERAL_NOT_FINISHED: xmlParserErrors = 44;
pub const XML_ERR_LITERAL_NOT_STARTED: xmlParserErrors = 43;
pub const XML_ERR_ATTRIBUTE_REDEFINED: xmlParserErrors = 42;
pub const XML_ERR_ATTRIBUTE_WITHOUT_VALUE: xmlParserErrors = 41;
pub const XML_ERR_ATTRIBUTE_NOT_FINISHED: xmlParserErrors = 40;
pub const XML_ERR_ATTRIBUTE_NOT_STARTED: xmlParserErrors = 39;
pub const XML_ERR_LT_IN_ATTRIBUTE: xmlParserErrors = 38;
pub const XML_ERR_ENTITY_NOT_FINISHED: xmlParserErrors = 37;
pub const XML_ERR_ENTITY_NOT_STARTED: xmlParserErrors = 36;
pub const XML_ERR_NS_DECL_ERROR: xmlParserErrors = 35;
pub const XML_ERR_STRING_NOT_CLOSED: xmlParserErrors = 34;
pub const XML_ERR_STRING_NOT_STARTED: xmlParserErrors = 33;
pub const XML_ERR_UNSUPPORTED_ENCODING: xmlParserErrors = 32;
pub const XML_ERR_UNKNOWN_ENCODING: xmlParserErrors = 31;
pub const XML_ERR_ENTITY_IS_PARAMETER: xmlParserErrors = 30;
pub const XML_ERR_ENTITY_IS_EXTERNAL: xmlParserErrors = 29;
pub const XML_ERR_UNPARSED_ENTITY: xmlParserErrors = 28;
pub const XML_WAR_UNDECLARED_ENTITY: xmlParserErrors = 27;
pub const XML_ERR_UNDECLARED_ENTITY: xmlParserErrors = 26;
pub const XML_ERR_PEREF_SEMICOL_MISSING: xmlParserErrors = 25;
pub const XML_ERR_PEREF_NO_NAME: xmlParserErrors = 24;
pub const XML_ERR_ENTITYREF_SEMICOL_MISSING: xmlParserErrors = 23;
pub const XML_ERR_ENTITYREF_NO_NAME: xmlParserErrors = 22;
pub const XML_ERR_PEREF_IN_INT_SUBSET: xmlParserErrors = 21;
pub const XML_ERR_PEREF_IN_EPILOG: xmlParserErrors = 20;
pub const XML_ERR_PEREF_IN_PROLOG: xmlParserErrors = 19;
pub const XML_ERR_PEREF_AT_EOF: xmlParserErrors = 18;
pub const XML_ERR_ENTITYREF_IN_DTD: xmlParserErrors = 17;
pub const XML_ERR_ENTITYREF_IN_EPILOG: xmlParserErrors = 16;
pub const XML_ERR_ENTITYREF_IN_PROLOG: xmlParserErrors = 15;
pub const XML_ERR_ENTITYREF_AT_EOF: xmlParserErrors = 14;
pub const XML_ERR_CHARREF_IN_DTD: xmlParserErrors = 13;
pub const XML_ERR_CHARREF_IN_EPILOG: xmlParserErrors = 12;
pub const XML_ERR_CHARREF_IN_PROLOG: xmlParserErrors = 11;
pub const XML_ERR_CHARREF_AT_EOF: xmlParserErrors = 10;
pub const XML_ERR_INVALID_CHAR: xmlParserErrors = 9;
pub const XML_ERR_INVALID_CHARREF: xmlParserErrors = 8;
pub const XML_ERR_INVALID_DEC_CHARREF: xmlParserErrors = 7;
pub const XML_ERR_INVALID_HEX_CHARREF: xmlParserErrors = 6;
pub const XML_ERR_DOCUMENT_END: xmlParserErrors = 5;
pub const XML_ERR_DOCUMENT_EMPTY: xmlParserErrors = 4;
pub const XML_ERR_DOCUMENT_START: xmlParserErrors = 3;
pub const XML_ERR_NO_MEMORY: xmlParserErrors = 2;
pub const XML_ERR_INTERNAL_ERROR: xmlParserErrors = 1;
pub const XML_ERR_OK: xmlParserErrors = 0;
pub type xmlGenericErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
/*
 * Summary: interface for the memory allocator
 * Description: provides interfaces for the memory allocator,
 *              including debugging capabilities.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * DEBUG_MEMORY:
 *
 * DEBUG_MEMORY replaces the allocator with a collect and debug
 * shell to the libc allocator.
 * DEBUG_MEMORY should only be activated when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/* #define DEBUG_MEMORY_FREED */
/* #define DEBUG_MEMORY_LOCATION */
/* *
 * DEBUG_MEMORY_LOCATION:
 *
 * DEBUG_MEMORY_LOCATION should be activated only when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/*
 * The XML memory wrapper support 4 basic overloadable functions.
 */
/* *
 * xmlFreeFunc:
 * @mem: an already allocated block of memory
 *
 * Signature for a free() implementation.
 */
pub type xmlFreeFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
/* *
 * xmlMallocFunc:
 * @size:  the size requested in bytes
 *
 * Signature for a malloc() implementation.
 *
 * Returns a pointer to the newly allocated block or NULL in case of error.
 */
/* *
 * xmlReallocFunc:
 * @mem: an already allocated block of memory
 * @size:  the new size requested in bytes
 *
 * Signature for a realloc() implementation.
 *
 * Returns a pointer to the newly reallocated block or NULL in case of error.
 */
pub type xmlReallocFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: size_t)
               -> *mut std::os::raw::c_void>;
pub type xmlMallocFunc
    =
    Option<unsafe extern "C" fn(_: size_t) -> *mut std::os::raw::c_void>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type __fd_mask = std::os::raw::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16],
}
pub type xmlRelaxNG = _xmlRelaxNG;
pub type xmlRelaxNGPtr = *mut xmlRelaxNG;
/*
 * Summary: implementation of the Relax-NG validation
 * Description: implementation of the Relax-NG validation
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlRelaxNGValidityErrorFunc:
 * @ctx: the validation context
 * @msg: the message
 * @...: extra arguments
 *
 * Signature of an error callback from a Relax-NG validation
 */
/* *
 * xmlRelaxNGValidityWarningFunc:
 * @ctx: the validation context
 * @msg: the message
 * @...: extra arguments
 *
 * Signature of a warning callback from a Relax-NG validation
 */
/* *
 * A schemas validation context
 */
pub type xmlRelaxNGValidCtxt = _xmlRelaxNGValidCtxt;
pub type xmlRelaxNGValidCtxtPtr = *mut xmlRelaxNGValidCtxt;
pub type xmlSchema = _xmlSchema;
pub type xmlSchemaPtr = *mut xmlSchema;
pub type xmlSchemaValidCtxt = _xmlSchemaValidCtxt;
pub type xmlSchemaValidCtxtPtr = *mut xmlSchemaValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSchemaSAXPlug {
    pub magic: std::os::raw::c_uint,
    pub user_sax_ptr: *mut xmlSAXHandlerPtr,
    pub user_sax: xmlSAXHandlerPtr,
    pub user_data_ptr: *mut *mut std::os::raw::c_void,
    pub user_data: *mut std::os::raw::c_void,
    pub schemas_sax: xmlSAXHandler,
    pub ctxt: xmlSchemaValidCtxtPtr,
}
/*
 * Interface to insert Schemas SAX validation in a SAX stream
 */
pub type xmlSchemaSAXPlugStruct = _xmlSchemaSAXPlug;
pub type xmlSchemaSAXPlugPtr = *mut xmlSchemaSAXPlugStruct;
pub type xmlParserSeverities = std::os::raw::c_uint;
pub const XML_PARSER_SEVERITY_ERROR: xmlParserSeverities = 4;
pub const XML_PARSER_SEVERITY_WARNING: xmlParserSeverities = 3;
pub const XML_PARSER_SEVERITY_VALIDITY_ERROR: xmlParserSeverities = 2;
pub const XML_PARSER_SEVERITY_VALIDITY_WARNING: xmlParserSeverities = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlTextReader {
    pub mode: std::os::raw::c_int,
    pub doc: xmlDocPtr,
    pub validate: xmlTextReaderValidate,
    pub allocs: std::os::raw::c_int,
    pub state: xmlTextReaderState,
    pub ctxt: xmlParserCtxtPtr,
    pub sax: xmlSAXHandlerPtr,
    pub input: xmlParserInputBufferPtr,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub characters: charactersSAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub base: std::os::raw::c_uint,
    pub cur: std::os::raw::c_uint,
    pub node: xmlNodePtr,
    pub curnode: xmlNodePtr,
    pub depth: std::os::raw::c_int,
    pub faketext: xmlNodePtr,
    pub preserve: std::os::raw::c_int,
    pub buffer: xmlBufPtr,
    pub dict: xmlDictPtr,
    pub ent: xmlNodePtr,
    pub entNr: std::os::raw::c_int,
    pub entMax: std::os::raw::c_int,
    pub entTab: *mut xmlNodePtr,
    pub errorFunc: xmlTextReaderErrorFunc,
    pub errorFuncArg: *mut std::os::raw::c_void,
    pub rngSchemas: xmlRelaxNGPtr,
    pub rngValidCtxt: xmlRelaxNGValidCtxtPtr,
    pub rngPreserveCtxt: std::os::raw::c_int,
    pub rngValidErrors: std::os::raw::c_int,
    pub rngFullNode: xmlNodePtr,
    pub xsdSchemas: xmlSchemaPtr,
    pub xsdValidCtxt: xmlSchemaValidCtxtPtr,
    pub xsdPreserveCtxt: std::os::raw::c_int,
    pub xsdValidErrors: std::os::raw::c_int,
    pub xsdPlug: xmlSchemaSAXPlugPtr,
    pub xinclude: std::os::raw::c_int,
    pub xinclude_name: *const xmlChar,
    pub xincctxt: xmlXIncludeCtxtPtr,
    pub in_xinclude: std::os::raw::c_int,
    pub patternNr: std::os::raw::c_int,
    pub patternMax: std::os::raw::c_int,
    pub patternTab: *mut xmlPatternPtr,
    pub preserves: std::os::raw::c_int,
    pub parserFlags: std::os::raw::c_int,
    pub sErrorFunc: xmlStructuredErrorFunc,
}
pub type xmlPatternPtr = *mut xmlPattern;
pub type xmlPattern = _xmlPattern;
pub type xmlXIncludeCtxtPtr = *mut xmlXIncludeCtxt;
pub type xmlXIncludeCtxt = _xmlXIncludeCtxt;
pub type xmlTextReaderErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: xmlParserSeverities,
                                _: xmlTextReaderLocatorPtr) -> ()>;
pub type xmlTextReaderLocatorPtr = *mut std::os::raw::c_void;
pub type xmlTextReaderState = std::os::raw::c_int;
pub const XML_TEXTREADER_ERROR: xmlTextReaderState = 6;
pub const XML_TEXTREADER_DONE: xmlTextReaderState = 5;
pub const XML_TEXTREADER_BACKTRACK: xmlTextReaderState = 4;
pub const XML_TEXTREADER_EMPTY: xmlTextReaderState = 3;
pub const XML_TEXTREADER_END: xmlTextReaderState = 2;
pub const XML_TEXTREADER_ELEMENT: xmlTextReaderState = 1;
pub const XML_TEXTREADER_START: xmlTextReaderState = 0;
pub const XML_TEXTREADER_NONE: xmlTextReaderState = -1;
pub type xmlTextReaderValidate = std::os::raw::c_uint;
pub const XML_TEXTREADER_VALIDATE_XSD: xmlTextReaderValidate = 4;
pub const XML_TEXTREADER_VALIDATE_RNG: xmlTextReaderValidate = 2;
pub const XML_TEXTREADER_VALIDATE_DTD: xmlTextReaderValidate = 1;
pub const XML_TEXTREADER_NOT_VALIDATE: xmlTextReaderValidate = 0;
/* *
 * xmlTextReader:
 *
 * Structure for an xmlReader context.
 */
pub type xmlTextReader = _xmlTextReader;
/* *
 * xmlTextReaderPtr:
 *
 * Pointer to an xmlReader context.
 */
pub type xmlTextReaderPtr = *mut xmlTextReader;
/*
 * Summary: text writing API for XML
 * Description: text writing API for XML
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Alfred Mickautsch <alfred@mickautsch.de>
 */
pub type xmlTextWriter = _xmlTextWriter;
pub type xmlTextWriterPtr = *mut xmlTextWriter;
pub type xmlNanoFTPCtxtPtr = *mut xmlNanoFTPCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlNanoFTPCtxt {
    pub protocol: *mut std::os::raw::c_char,
    pub hostname: *mut std::os::raw::c_char,
    pub port: std::os::raw::c_int,
    pub path: *mut std::os::raw::c_char,
    pub user: *mut std::os::raw::c_char,
    pub passwd: *mut std::os::raw::c_char,
    pub ftpAddr: sockaddr_storage,
    pub passive: std::os::raw::c_int,
    pub controlFd: std::os::raw::c_int,
    pub dataFd: std::os::raw::c_int,
    pub state: std::os::raw::c_int,
    pub returnValue: std::os::raw::c_int,
    pub controlBuf: [std::os::raw::c_char; 1025],
    pub controlBufIndex: std::os::raw::c_int,
    pub controlBufUsed: std::os::raw::c_int,
    pub controlBufAnswer: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [std::os::raw::c_char; 118],
    pub __ss_align: std::os::raw::c_ulong,
}
pub type sa_family_t = std::os::raw::c_ushort;
pub type xmllintReturnCode = std::os::raw::c_uint;
pub const XMLLINT_ERR_XPATH: xmllintReturnCode = 10;
pub const XMLLINT_ERR_MEM: xmllintReturnCode = 9;
pub const XMLLINT_ERR_RDREGIS: xmllintReturnCode = 8;
pub const XMLLINT_ERR_SCHEMAPAT: xmllintReturnCode = 7;
pub const XMLLINT_ERR_OUT: xmllintReturnCode = 6;
pub const XMLLINT_ERR_SCHEMACOMP: xmllintReturnCode = 5;
pub const XMLLINT_ERR_RDFILE: xmllintReturnCode = 4;
pub const XMLLINT_ERR_VALID: xmllintReturnCode = 3;
pub const XMLLINT_ERR_DTD: xmllintReturnCode = 2;
pub const XMLLINT_ERR_UNCLASS: xmllintReturnCode = 1;
pub const XMLLINT_RETURN_OK: xmllintReturnCode = 0;
// from xmllint.c:
#[no_mangle]
pub static mut xmllint_callbacks: std::os::raw::c_int = 0;
#[no_mangle]
pub static mut xmllint_buffer: [std::os::raw::c_char; 50000] = [0; 50000];
#[no_mangle]
pub static mut xmllint_progresult: xmllintReturnCode = XMLLINT_RETURN_OK;
#[no_mangle]
pub static mut xmllint_noout: std::os::raw::c_int = 0 as std::os::raw::c_int;
// from xmllint.c
#[no_mangle]
pub static mut xmllint_begin: timeval = timeval{tv_sec: 0, tv_usec: 0,};
#[no_mangle]
pub static mut xmllint_end: timeval = timeval{tv_sec: 0, tv_usec: 0,};
#[no_mangle]
pub unsafe extern "C" fn xmllint_endTimer(mut fmt: *const std::os::raw::c_char,
                                          mut args: ...) {
    let mut msec: std::os::raw::c_long = 0;
    let mut ap: ::std::ffi::VaListImpl;
    gettimeofday(&mut xmllint_end, 0 as *mut std::os::raw::c_void);
    msec = xmllint_end.tv_sec - xmllint_begin.tv_sec;
    msec *= 1000 as std::os::raw::c_int as std::os::raw::c_long;
    msec +=
        (xmllint_end.tv_usec - xmllint_begin.tv_usec) /
            1000 as std::os::raw::c_int as std::os::raw::c_long;
    ap = args.clone();
    vfprintf(stderr, fmt, ap.as_va_list());
    fprintf(stderr, b" took %ld ms\n\x00" as *const u8 as *const std::os::raw::c_char,
            msec);
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLPrintFileContext(mut input:
                                                     xmlParserInputPtr) {
    let mut cur: *const xmlChar = 0 as *const xmlChar;
    let mut base: *const xmlChar = 0 as *const xmlChar;
    let mut len: std::os::raw::c_int = 0;
    let mut n: std::os::raw::c_int = 0;
    if input.is_null() { return }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<pre>\n\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    cur = (*input).cur;
    base = (*input).base;
    while cur > base &&
              (*cur as std::os::raw::c_int == '\n' as i32 ||
                   *cur as std::os::raw::c_int == '\r' as i32) {
        cur = cur.offset(-1)
    }
    n = 0 as std::os::raw::c_int;
    loop  {
        let fresh0 = n;
        n = n + 1;
        if !(fresh0 < 80 as std::os::raw::c_int && cur > base &&
                 *cur as std::os::raw::c_int != '\n' as i32 &&
                 *cur as std::os::raw::c_int != '\r' as i32) {
            break ;
        }
        cur = cur.offset(-1)
    }
    if *cur as std::os::raw::c_int == '\n' as i32 ||
           *cur as std::os::raw::c_int == '\r' as i32 {
        cur = cur.offset(1)
    }
    base = cur;
    n = 0 as std::os::raw::c_int;
    while *cur as std::os::raw::c_int != 0 as std::os::raw::c_int &&
              *cur as std::os::raw::c_int != '\n' as i32 &&
              *cur as std::os::raw::c_int != '\r' as i32 && n < 79 as std::os::raw::c_int {
        len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
        let fresh1 = cur;
        cur = cur.offset(1);
        snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                     *mut std::os::raw::c_char,
                 (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                      std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
                 b"%c\x00" as *const u8 as *const std::os::raw::c_char,
                 *fresh1 as std::os::raw::c_int);
        n += 1
    }
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                 *mut std::os::raw::c_char,
             (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                  std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
             b"\n\x00" as *const u8 as *const std::os::raw::c_char);
    cur = (*input).cur;
    while *cur as std::os::raw::c_int == '\n' as i32 ||
              *cur as std::os::raw::c_int == '\r' as i32 {
        cur = cur.offset(-1)
    }
    n = 0 as std::os::raw::c_int;
    while cur != base &&
              { let fresh2 = n; n = n + 1; (fresh2) < 80 as std::os::raw::c_int } {
        len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
        snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                     *mut std::os::raw::c_char,
                 (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                      std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
                 b" \x00" as *const u8 as *const std::os::raw::c_char);
        base = base.offset(1)
    }
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                 *mut std::os::raw::c_char,
             (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                  std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
             b"^\n\x00" as *const u8 as *const std::os::raw::c_char);
    xmlHTMLEncodeSend();
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"</pre>\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLEncodeSend() {
    let mut result: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    result =
        xmlEncodeEntitiesReentrant(0 as xmlDocPtr,
                                   xmllint_buffer.as_mut_ptr() as
                                       *mut xmlChar) as *mut std::os::raw::c_char;
    if !result.is_null() {
        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                   b"%s\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   result);
        xmlFree.expect("non-null function pointer")(result as
                                                        *mut std::os::raw::c_void);
    }
    xmllint_buffer[0 as std::os::raw::c_int as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLPrintFileInfo(mut input: xmlParserInputPtr) {
    let mut len: std::os::raw::c_int = 0;
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<p>\x00" as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    if !input.is_null() {
        if !(*input).filename.is_null() {
            snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                         *mut std::os::raw::c_char,
                     (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                          std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
                     b"%s:%d: \x00" as *const u8 as *const std::os::raw::c_char,
                     (*input).filename, (*input).line);
        } else {
            snprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize) as
                         *mut std::os::raw::c_char,
                     (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                          std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong),
                     b"Entity: line %d: \x00" as *const u8 as
                         *const std::os::raw::c_char, (*input).line);
        }
    }
    xmlHTMLEncodeSend();
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLError(mut ctx: *mut std::os::raw::c_void,
                                      mut msg: *const std::os::raw::c_char,
                                      mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = 0;
    xmllint_buffer[0 as std::os::raw::c_int as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
    input = (*ctxt).input;
    if !input.is_null() && (*input).filename.is_null() &&
           (*ctxt).inputNr > 1 as std::os::raw::c_int {
        input =
            *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int) as
                                         isize)
    }
    xmlHTMLPrintFileInfo(input);
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<b>error</b>: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    args_0 = args.clone();
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    vsnprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize),
              (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                   std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong), msg,
              args_0.as_va_list());
    xmlHTMLEncodeSend();
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"</p>\n\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    xmlHTMLPrintFileContext(input);
    xmlHTMLEncodeSend();
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLWarning(mut ctx: *mut std::os::raw::c_void,
                                        mut msg: *const std::os::raw::c_char,
                                        mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = 0;
    xmllint_buffer[0 as std::os::raw::c_int as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
    input = (*ctxt).input;
    if !input.is_null() && (*input).filename.is_null() &&
           (*ctxt).inputNr > 1 as std::os::raw::c_int {
        input =
            *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int) as
                                         isize)
    }
    xmlHTMLPrintFileInfo(input);
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<b>warning</b>: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    args_0 = args.clone();
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    vsnprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize),
              (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                   std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong), msg,
              args_0.as_va_list());
    xmlHTMLEncodeSend();
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"</p>\n\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    xmlHTMLPrintFileContext(input);
    xmlHTMLEncodeSend();
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLValidityError(mut ctx: *mut std::os::raw::c_void,
                                              mut msg: *const std::os::raw::c_char,
                                              mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = 0;
    xmllint_buffer[0 as std::os::raw::c_int as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
    input = (*ctxt).input;
    if (*input).filename.is_null() && (*ctxt).inputNr > 1 as std::os::raw::c_int {
        input =
            *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int) as
                                         isize)
    }
    xmlHTMLPrintFileInfo(input);
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<b>validity error</b>: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    args_0 = args.clone();
    vsnprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize),
              (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                   std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong), msg,
              args_0.as_va_list());
    xmlHTMLEncodeSend();
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"</p>\n\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    xmlHTMLPrintFileContext(input);
    xmlHTMLEncodeSend();
    xmllint_progresult = XMLLINT_ERR_VALID;
}
#[no_mangle]
pub unsafe extern "C" fn xmlHTMLValidityWarning(mut ctx: *mut std::os::raw::c_void,
                                                mut msg: *const std::os::raw::c_char,
                                                mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = 0;
    xmllint_buffer[0 as std::os::raw::c_int as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
    input = (*ctxt).input;
    if (*input).filename.is_null() && (*ctxt).inputNr > 1 as std::os::raw::c_int {
        input =
            *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int) as
                                         isize)
    }
    xmlHTMLPrintFileInfo(input);
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"<b>validity warning</b>: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    args_0 = args.clone();
    len = strlen(xmllint_buffer.as_mut_ptr()) as std::os::raw::c_int;
    vsnprintf(&mut *xmllint_buffer.as_mut_ptr().offset(len as isize),
              (::std::mem::size_of::<[std::os::raw::c_char; 50000]>() as
                   std::os::raw::c_ulong).wrapping_sub(len as std::os::raw::c_ulong), msg,
              args_0.as_va_list());
    xmlHTMLEncodeSend();
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"</p>\n\x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    xmlHTMLPrintFileContext(input);
    xmlHTMLEncodeSend();
}
#[no_mangle]
pub unsafe extern "C" fn xmllint_warningDebug(mut ctx: *mut std::os::raw::c_void,
                                              mut msg: *const std::os::raw::c_char,
                                              mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    xmllint_callbacks += 1;
    if xmllint_noout != 0 { return }
    args_0 = args.clone();
    fprintf(stdout, b"SAX.warning: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn xmllint_errorDebug(mut ctx: *mut std::os::raw::c_void,
                                            mut msg: *const std::os::raw::c_char,
                                            mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    xmllint_callbacks += 1;
    if xmllint_noout != 0 { return }
    args_0 = args.clone();
    fprintf(stdout, b"SAX.error: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn xmllint_fatalErrorDebug(mut ctx: *mut std::os::raw::c_void,
                                                 mut msg: *const std::os::raw::c_char,
                                                 mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    xmllint_callbacks += 1;
    if xmllint_noout != 0 { return }
    args_0 = args.clone();
    fprintf(stdout,
            b"SAX.fatalError: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
// from error.c:
#[no_mangle]
pub unsafe extern "C" fn xmlGenericErrorDefaultFunc(mut ctx:
                                                        *mut std::os::raw::c_void,
                                                    mut msg:
                                                        *const std::os::raw::c_char,
                                                    mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    if (*__xmlGenericErrorContext()).is_null() {
        let ref mut fresh3 = *__xmlGenericErrorContext();
        *fresh3 = stderr as *mut std::os::raw::c_void
    }
    args_0 = args.clone();
    vfprintf(*__xmlGenericErrorContext() as *mut FILE, msg,
             args_0.as_va_list());
}
/*
 * Internal callback reporting routine
 */
#[no_mangle]
pub unsafe extern "C" fn __xmlRaiseError(mut schannel: xmlStructuredErrorFunc,
                                         mut channel: xmlGenericErrorFunc,
                                         mut data: *mut std::os::raw::c_void,
                                         mut ctx: *mut std::os::raw::c_void,
                                         mut nod: *mut std::os::raw::c_void,
                                         mut domain: std::os::raw::c_int,
                                         mut code: std::os::raw::c_int,
                                         mut level: xmlErrorLevel,
                                         mut file: *const std::os::raw::c_char,
                                         mut line: std::os::raw::c_int,
                                         mut str1: *const std::os::raw::c_char,
                                         mut str2: *const std::os::raw::c_char,
                                         mut str3: *const std::os::raw::c_char,
                                         mut int1: std::os::raw::c_int,
                                         mut col: std::os::raw::c_int,
                                         mut msg: *const std::os::raw::c_char,
                                         mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = 0 as xmlParserCtxtPtr;
    let mut node: xmlNodePtr = nod as xmlNodePtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut input: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut to: xmlErrorPtr = __xmlLastError();
    let mut baseptr: xmlNodePtr = 0 as xmlNodePtr;
    if code == XML_ERR_OK as std::os::raw::c_int { return }
    if *__xmlGetWarningsDefaultValue() == 0 as std::os::raw::c_int &&
           level as std::os::raw::c_uint ==
               XML_ERR_WARNING as std::os::raw::c_int as std::os::raw::c_uint {
        return
    }
    if domain == XML_FROM_PARSER as std::os::raw::c_int ||
           domain == XML_FROM_HTML as std::os::raw::c_int ||
           domain == XML_FROM_DTD as std::os::raw::c_int ||
           domain == XML_FROM_NAMESPACE as std::os::raw::c_int ||
           domain == XML_FROM_IO as std::os::raw::c_int ||
           domain == XML_FROM_VALID as std::os::raw::c_int {
        ctxt = ctx as xmlParserCtxtPtr;
        if schannel.is_none() && !ctxt.is_null() && !(*ctxt).sax.is_null() &&
               (*(*ctxt).sax).initialized == 0xdeedbeaf as std::os::raw::c_uint &&
               (*(*ctxt).sax).serror.is_some() {
            schannel = (*(*ctxt).sax).serror;
            data = (*ctxt).userData
        }
    }
    /*
     * Check if structured error handler set
     */
    if schannel.is_none() {
        schannel = *__xmlStructuredError();
        /*
	 * if user has defined handler, change data ptr to user's choice
	 */
        if schannel.is_some() { data = *__xmlStructuredErrorContext() }
    }
    /*
     * Formatting the message
     */
    if msg.is_null() {
        str =
            xmlStrdup(b"No error message provided\x00" as *const u8 as
                          *const std::os::raw::c_char as *mut xmlChar) as
                *mut std::os::raw::c_char
    } else {
        let mut size: std::os::raw::c_int = 0;
        let mut prev_size: std::os::raw::c_int = -(1 as std::os::raw::c_int);
        let mut chars: std::os::raw::c_int = 0;
        let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
        let mut ap: ::std::ffi::VaListImpl;
        str =
            xmlMalloc.expect("non-null function pointer")(150 as std::os::raw::c_int
                                                              as size_t) as
                *mut std::os::raw::c_char;
        if !str.is_null() {
            size = 150 as std::os::raw::c_int;
            while size < 64000 as std::os::raw::c_int {
                ap = args.clone();
                chars =
                    vsnprintf(str, size as std::os::raw::c_ulong, msg,
                              ap.as_va_list());
                if chars > -(1 as std::os::raw::c_int) && chars < size {
                    if prev_size == chars { break ; }
                    prev_size = chars
                }
                if chars > -(1 as std::os::raw::c_int) {
                    size += chars + 1 as std::os::raw::c_int
                } else { size += 100 as std::os::raw::c_int }
                larger =
                    xmlRealloc.expect("non-null function pointer")(str as
                                                                       *mut std::os::raw::c_void,
                                                                   size as
                                                                       size_t)
                        as *mut std::os::raw::c_char;
                if larger.is_null() { break ; }
                str = larger
            }
        }
    }
    /*
     * specific processing if a parser context is provided
     */
    if !ctxt.is_null() {
        if file.is_null() {
            input = (*ctxt).input;
            if !input.is_null() && (*input).filename.is_null() &&
                   (*ctxt).inputNr > 1 as std::os::raw::c_int {
                input =
                    *(*ctxt).inputTab.offset(((*ctxt).inputNr -
                                                  2 as std::os::raw::c_int) as isize)
            }
            if !input.is_null() {
                file = (*input).filename;
                line = (*input).line;
                col = (*input).col
            }
        }
        to = &mut (*ctxt).lastError
    } else if !node.is_null() && file.is_null() {
        let mut i: std::os::raw::c_int = 0;
        if !(*node).doc.is_null() && !(*(*node).doc).URL.is_null() {
            baseptr = node
            /*	    file = (const char *) node->doc->URL; */
        }
        i = 0 as std::os::raw::c_int;
        while i < 10 as std::os::raw::c_int && !node.is_null() &&
                  (*node).type_0 as std::os::raw::c_uint !=
                      XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
            node = (*node).parent;
            i += 1
        }
        if baseptr.is_null() && !node.is_null() && !(*node).doc.is_null() &&
               !(*(*node).doc).URL.is_null() {
            baseptr = node
        }
        if !node.is_null() &&
               (*node).type_0 as std::os::raw::c_uint ==
                   XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
            line = (*node).line as std::os::raw::c_int
        }
        if line == 0 as std::os::raw::c_int || line == 65535 as std::os::raw::c_int {
            line = xmlGetLineNo(node as *const xmlNode) as std::os::raw::c_int
        }
    }
    /*
     * Save the information about the error
     */
    xmlResetError(to);
    (*to).domain = domain;
    (*to).code = code;
    (*to).message = str;
    (*to).level = level;
    if !file.is_null() {
        (*to).file = xmlStrdup(file as *const xmlChar) as *mut std::os::raw::c_char
    } else if !baseptr.is_null() {
        /*
	 * We check if the error is within an XInclude section and,
	 * if so, attempt to print out the href of the XInclude instead
	 * of the usual "base" (doc->URL) for the node (bug 152623).
	 */
        let mut prev: xmlNodePtr = baseptr;
        let mut inclcount: std::os::raw::c_int = 0 as std::os::raw::c_int;
        while !prev.is_null() {
            if (*prev).prev.is_null() {
                prev = (*prev).parent
            } else {
                prev = (*prev).prev;
                if (*prev).type_0 as std::os::raw::c_uint ==
                       XML_XINCLUDE_START as std::os::raw::c_int as std::os::raw::c_uint {
                    inclcount -= 1;
                    if inclcount < 0 as std::os::raw::c_int { break ; }
                } else if (*prev).type_0 as std::os::raw::c_uint ==
                              XML_XINCLUDE_END as std::os::raw::c_int as std::os::raw::c_uint
                 {
                    inclcount += 1
                }
            }
        }
        if !prev.is_null() {
            if (*prev).type_0 as std::os::raw::c_uint ==
                   XML_XINCLUDE_START as std::os::raw::c_int as std::os::raw::c_uint {
                (*prev).type_0 = XML_ELEMENT_NODE;
                (*to).file =
                    xmlGetProp(prev as *const xmlNode,
                               b"href\x00" as *const u8 as *const std::os::raw::c_char
                                   as *mut xmlChar) as *mut std::os::raw::c_char;
                (*prev).type_0 = XML_XINCLUDE_START
            } else {
                (*to).file =
                    xmlGetProp(prev as *const xmlNode,
                               b"href\x00" as *const u8 as *const std::os::raw::c_char
                                   as *mut xmlChar) as *mut std::os::raw::c_char
            }
        } else {
            (*to).file = xmlStrdup((*(*baseptr).doc).URL) as *mut std::os::raw::c_char
        }
        if (*to).file.is_null() && !node.is_null() && !(*node).doc.is_null() {
            (*to).file = xmlStrdup((*(*node).doc).URL) as *mut std::os::raw::c_char
        }
    }
    (*to).line = line;
    if !str1.is_null() {
        (*to).str1 = xmlStrdup(str1 as *const xmlChar) as *mut std::os::raw::c_char
    }
    if !str2.is_null() {
        (*to).str2 = xmlStrdup(str2 as *const xmlChar) as *mut std::os::raw::c_char
    }
    if !str3.is_null() {
        (*to).str3 = xmlStrdup(str3 as *const xmlChar) as *mut std::os::raw::c_char
    }
    (*to).int1 = int1;
    (*to).int2 = col;
    (*to).node = node as *mut std::os::raw::c_void;
    (*to).ctxt = ctx;
    if to != __xmlLastError() { xmlCopyError(to, __xmlLastError()); }
    if schannel.is_some() {
        schannel.expect("non-null function pointer")(data, to);
        return
    }
    /*
     * Find the callback channel if channel param is NULL
     */
    if !ctxt.is_null() && channel.is_none() &&
           (*__xmlStructuredError()).is_none() && !(*ctxt).sax.is_null() {
        if level as std::os::raw::c_uint ==
               XML_ERR_WARNING as std::os::raw::c_int as std::os::raw::c_uint {
            channel = (*(*ctxt).sax).warning
        } else { channel = (*(*ctxt).sax).error }
        data = (*ctxt).userData
    } else if channel.is_none() {
        channel = *__xmlGenericError();
        if !ctxt.is_null() {
            data = ctxt as *mut std::os::raw::c_void
        } else { data = *__xmlGenericErrorContext() }
    }
    if channel.is_none() { return }
    if channel ==
           Some(xmlParserError as
                    unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                         _: *const std::os::raw::c_char, _: ...)
                        -> ()) ||
           channel ==
               Some(xmlParserWarning as
                        unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                             _: *const std::os::raw::c_char, _: ...)
                            -> ()) ||
           channel ==
               Some(xmlParserValidityError as
                        unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                             _: *const std::os::raw::c_char, _: ...)
                            -> ()) ||
           channel ==
               Some(xmlParserValidityWarning as
                        unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                             _: *const std::os::raw::c_char, _: ...)
                            -> ()) {
        xmlReportError(to, ctxt, str, None, 0 as *mut std::os::raw::c_void);
    } else if channel ==
                  ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                          *mut FILE,
                                                                      _:
                                                                          *const std::os::raw::c_char,
                                                                      _: ...)
                                                     -> std::os::raw::c_int>,
                                          xmlGenericErrorFunc>(Some(fprintf as
                                                                        unsafe extern "C" fn(_:
                                                                                                 *mut FILE,
                                                                                             _:
                                                                                                 *const std::os::raw::c_char,
                                                                                             _:
                                                                                                 ...)
                                                                            ->
                                                                                std::os::raw::c_int))
                  ||
                  channel ==
                      Some(xmlGenericErrorDefaultFunc as
                               unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                                    _: *const std::os::raw::c_char,
                                                    _: ...) -> ()) {
        xmlReportError(to, ctxt, str, channel, data);
    } else {
        channel.expect("non-null function pointer")(data,
                                                    b"%s\x00" as *const u8 as
                                                        *const std::os::raw::c_char,
                                                    str);
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlParserError(mut ctx: *mut std::os::raw::c_void,
                                        mut msg: *const std::os::raw::c_char,
                                        mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut cur: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    if !ctxt.is_null() {
        input = (*ctxt).input;
        if !input.is_null() && (*input).filename.is_null() &&
               (*ctxt).inputNr > 1 as std::os::raw::c_int {
            cur = input;
            input =
                *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int)
                                             as isize)
        }
        xmlParserPrintFileInfo(input);
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"error: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    let mut size: std::os::raw::c_int = 0;
    let mut prev_size: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut chars: std::os::raw::c_int = 0;
    let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    str =
        xmlMalloc.expect("non-null function pointer")(150 as std::os::raw::c_int as
                                                          size_t) as
            *mut std::os::raw::c_char;
    if !str.is_null() {
        size = 150 as std::os::raw::c_int;
        while size < 64000 as std::os::raw::c_int {
            ap = args.clone();
            chars =
                vsnprintf(str, size as std::os::raw::c_ulong, msg, ap.as_va_list());
            if chars > -(1 as std::os::raw::c_int) && chars < size {
                if prev_size == chars { break ; }
                prev_size = chars
            }
            if chars > -(1 as std::os::raw::c_int) {
                size += chars + 1 as std::os::raw::c_int
            } else { size += 100 as std::os::raw::c_int }
            larger =
                xmlRealloc.expect("non-null function pointer")(str as
                                                                   *mut std::os::raw::c_void,
                                                               size as size_t)
                    as *mut std::os::raw::c_char;
            if larger.is_null() { break ; }
            str = larger
        }
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"%s\x00" as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char,
                                                               str);
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    }
    if !ctxt.is_null() {
        xmlParserPrintFileContext(input);
        if !cur.is_null() {
            xmlParserPrintFileInfo(cur);
            (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                       b"\n\x00"
                                                                           as
                                                                           *const u8
                                                                           as
                                                                           *const std::os::raw::c_char);
            xmlParserPrintFileContext(cur);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlParserWarning(mut ctx: *mut std::os::raw::c_void,
                                          mut msg: *const std::os::raw::c_char,
                                          mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut cur: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    if !ctxt.is_null() {
        input = (*ctxt).input;
        if !input.is_null() && (*input).filename.is_null() &&
               (*ctxt).inputNr > 1 as std::os::raw::c_int {
            cur = input;
            input =
                *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int)
                                             as isize)
        }
        xmlParserPrintFileInfo(input);
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"warning: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    let mut size: std::os::raw::c_int = 0;
    let mut prev_size: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut chars: std::os::raw::c_int = 0;
    let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    str =
        xmlMalloc.expect("non-null function pointer")(150 as std::os::raw::c_int as
                                                          size_t) as
            *mut std::os::raw::c_char;
    if !str.is_null() {
        size = 150 as std::os::raw::c_int;
        while size < 64000 as std::os::raw::c_int {
            ap = args.clone();
            chars =
                vsnprintf(str, size as std::os::raw::c_ulong, msg, ap.as_va_list());
            if chars > -(1 as std::os::raw::c_int) && chars < size {
                if prev_size == chars { break ; }
                prev_size = chars
            }
            if chars > -(1 as std::os::raw::c_int) {
                size += chars + 1 as std::os::raw::c_int
            } else { size += 100 as std::os::raw::c_int }
            larger =
                xmlRealloc.expect("non-null function pointer")(str as
                                                                   *mut std::os::raw::c_void,
                                                               size as size_t)
                    as *mut std::os::raw::c_char;
            if larger.is_null() { break ; }
            str = larger
        }
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"%s\x00" as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char,
                                                               str);
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    }
    if !ctxt.is_null() {
        xmlParserPrintFileContext(input);
        if !cur.is_null() {
            xmlParserPrintFileInfo(cur);
            (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                       b"\n\x00"
                                                                           as
                                                                           *const u8
                                                                           as
                                                                           *const std::os::raw::c_char);
            xmlParserPrintFileContext(cur);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlParserValidityError(mut ctx: *mut std::os::raw::c_void,
                                                mut msg: *const std::os::raw::c_char,
                                                mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut len: std::os::raw::c_int = xmlStrlen(msg as *const xmlChar);
    static mut had_info: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if len > 1 as std::os::raw::c_int &&
           *msg.offset((len - 2 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               ':' as i32 {
        if !ctxt.is_null() {
            input = (*ctxt).input;
            if (*input).filename.is_null() &&
                   (*ctxt).inputNr > 1 as std::os::raw::c_int {
                input =
                    *(*ctxt).inputTab.offset(((*ctxt).inputNr -
                                                  2 as std::os::raw::c_int) as isize)
            }
            if had_info == 0 as std::os::raw::c_int { xmlParserPrintFileInfo(input); }
        }
        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                   b"validity error: \x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char);
        had_info = 0 as std::os::raw::c_int
    } else { had_info = 1 as std::os::raw::c_int }
    let mut size: std::os::raw::c_int = 0;
    let mut prev_size: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut chars: std::os::raw::c_int = 0;
    let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    str =
        xmlMalloc.expect("non-null function pointer")(150 as std::os::raw::c_int as
                                                          size_t) as
            *mut std::os::raw::c_char;
    if !str.is_null() {
        size = 150 as std::os::raw::c_int;
        while size < 64000 as std::os::raw::c_int {
            ap = args.clone();
            chars =
                vsnprintf(str, size as std::os::raw::c_ulong, msg, ap.as_va_list());
            if chars > -(1 as std::os::raw::c_int) && chars < size {
                if prev_size == chars { break ; }
                prev_size = chars
            }
            if chars > -(1 as std::os::raw::c_int) {
                size += chars + 1 as std::os::raw::c_int
            } else { size += 100 as std::os::raw::c_int }
            larger =
                xmlRealloc.expect("non-null function pointer")(str as
                                                                   *mut std::os::raw::c_void,
                                                               size as size_t)
                    as *mut std::os::raw::c_char;
            if larger.is_null() { break ; }
            str = larger
        }
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"%s\x00" as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char,
                                                               str);
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    }
    if !ctxt.is_null() && !input.is_null() {
        xmlParserPrintFileContext(input);
    };
}
/*
 * Default message routines used by SAX and Valid context for error
 * and warning reporting.
 */
#[no_mangle]
pub unsafe extern "C" fn xmlParserValidityWarning(mut ctx: *mut std::os::raw::c_void,
                                                  mut msg:
                                                      *const std::os::raw::c_char,
                                                  mut args: ...) {
    let mut ctxt: xmlParserCtxtPtr = ctx as xmlParserCtxtPtr;
    let mut input: xmlParserInputPtr = 0 as xmlParserInputPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut len: std::os::raw::c_int = xmlStrlen(msg as *const xmlChar);
    if !ctxt.is_null() && len != 0 as std::os::raw::c_int &&
           *msg.offset((len - 1 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               ':' as i32 {
        input = (*ctxt).input;
        if (*input).filename.is_null() && (*ctxt).inputNr > 1 as std::os::raw::c_int {
            input =
                *(*ctxt).inputTab.offset(((*ctxt).inputNr - 2 as std::os::raw::c_int)
                                             as isize)
        }
        xmlParserPrintFileInfo(input);
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"validity warning: \x00"
                                                                   as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char);
    let mut size: std::os::raw::c_int = 0;
    let mut prev_size: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut chars: std::os::raw::c_int = 0;
    let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    str =
        xmlMalloc.expect("non-null function pointer")(150 as std::os::raw::c_int as
                                                          size_t) as
            *mut std::os::raw::c_char;
    if !str.is_null() {
        size = 150 as std::os::raw::c_int;
        while size < 64000 as std::os::raw::c_int {
            ap = args.clone();
            chars =
                vsnprintf(str, size as std::os::raw::c_ulong, msg, ap.as_va_list());
            if chars > -(1 as std::os::raw::c_int) && chars < size {
                if prev_size == chars { break ; }
                prev_size = chars
            }
            if chars > -(1 as std::os::raw::c_int) {
                size += chars + 1 as std::os::raw::c_int
            } else { size += 100 as std::os::raw::c_int }
            larger =
                xmlRealloc.expect("non-null function pointer")(str as
                                                                   *mut std::os::raw::c_void,
                                                               size as size_t)
                    as *mut std::os::raw::c_char;
            if larger.is_null() { break ; }
            str = larger
        }
    }
    (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                               b"%s\x00" as
                                                                   *const u8
                                                                   as
                                                                   *const std::os::raw::c_char,
                                                               str);
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    }
    if !ctxt.is_null() { xmlParserPrintFileContext(input); };
}
// from valid.c:
#[no_mangle]
pub unsafe extern "C" fn xmlNoValidityErr(mut ctx: *mut std::os::raw::c_void,
                                          mut msg: *const std::os::raw::c_char,
                                          mut args: ...) {
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderValidityErrorRelay(mut ctx:
                                                             *mut std::os::raw::c_void,
                                                         mut msg:
                                                             *const std::os::raw::c_char,
                                                         mut args: ...) {
    let mut reader: xmlTextReaderPtr = ctx as xmlTextReaderPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    str = xmlTextReaderBuildMessage(msg, ap.as_va_list());
    if (*reader).errorFunc.is_none() {
        xmlTextReaderValidityError(ctx,
                                   b"%s\x00" as *const u8 as
                                       *const std::os::raw::c_char, str);
    } else {
        (*reader).errorFunc.expect("non-null function pointer")((*reader).errorFuncArg,
                                                                str,
                                                                XML_PARSER_SEVERITY_VALIDITY_ERROR,
                                                                0 as
                                                                    *mut std::os::raw::c_void);
    }
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderValidityWarningRelay(mut ctx:
                                                               *mut std::os::raw::c_void,
                                                           mut msg:
                                                               *const std::os::raw::c_char,
                                                           mut args: ...) {
    let mut reader: xmlTextReaderPtr = ctx as xmlTextReaderPtr;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    str = xmlTextReaderBuildMessage(msg, ap.as_va_list());
    if (*reader).errorFunc.is_none() {
        xmlTextReaderValidityWarning(ctx,
                                     b"%s\x00" as *const u8 as
                                         *const std::os::raw::c_char, str);
    } else {
        (*reader).errorFunc.expect("non-null function pointer")((*reader).errorFuncArg,
                                                                str,
                                                                XML_PARSER_SEVERITY_VALIDITY_WARNING,
                                                                0 as
                                                                    *mut std::os::raw::c_void);
    }
    if !str.is_null() {
        xmlFree.expect("non-null function pointer")(str as *mut std::os::raw::c_void);
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderError(mut ctxt: *mut std::os::raw::c_void,
                                            mut msg: *const std::os::raw::c_char,
                                            mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    xmlTextReaderGenericError(ctxt, XML_PARSER_SEVERITY_ERROR,
                              xmlTextReaderBuildMessage(msg,
                                                        ap.as_va_list()));
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderWarning(mut ctxt: *mut std::os::raw::c_void,
                                              mut msg: *const std::os::raw::c_char,
                                              mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    xmlTextReaderGenericError(ctxt, XML_PARSER_SEVERITY_WARNING,
                              xmlTextReaderBuildMessage(msg,
                                                        ap.as_va_list()));
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderValidityError(mut ctxt:
                                                        *mut std::os::raw::c_void,
                                                    mut msg:
                                                        *const std::os::raw::c_char,
                                                    mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = xmlStrlen(msg as *const xmlChar);
    if len > 1 as std::os::raw::c_int &&
           *msg.offset((len - 2 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               ':' as i32 {
        /*
         * some callbacks only report locator information:
         * skip them (mimicking behaviour in error.c)
         */
        ap = args.clone();
        xmlTextReaderGenericError(ctxt, XML_PARSER_SEVERITY_VALIDITY_ERROR,
                                  xmlTextReaderBuildMessage(msg,
                                                            ap.as_va_list()));
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderValidityWarning(mut ctxt:
                                                          *mut std::os::raw::c_void,
                                                      mut msg:
                                                          *const std::os::raw::c_char,
                                                      mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    let mut len: std::os::raw::c_int = xmlStrlen(msg as *const xmlChar);
    if len != 0 as std::os::raw::c_int &&
           *msg.offset((len - 1 as std::os::raw::c_int) as isize) as std::os::raw::c_int !=
               ':' as i32 {
        /*
         * some callbacks only report locator information:
         * skip them (mimicking behaviour in error.c)
         */
        ap = args.clone();
        xmlTextReaderGenericError(ctxt, XML_PARSER_SEVERITY_VALIDITY_WARNING,
                                  xmlTextReaderBuildMessage(msg,
                                                            ap.as_va_list()));
    };
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextReaderBuildMessage(mut msg:
                                                       *const std::os::raw::c_char,
                                                   mut ap: ::std::ffi::VaList)
 -> *mut std::os::raw::c_char {
    let mut size: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut chars: std::os::raw::c_int = 0;
    let mut larger: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut aq: ::std::ffi::VaListImpl;
    loop  {
        aq = ap.clone();
        chars = vsnprintf(str, size as std::os::raw::c_ulong, msg, aq.as_va_list());
        if chars < 0 as std::os::raw::c_int {
            (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                       b"vsnprintf failed !\n\x00"
                                                                           as
                                                                           *const u8
                                                                           as
                                                                           *const std::os::raw::c_char);
            if !str.is_null() {
                xmlFree.expect("non-null function pointer")(str as
                                                                *mut std::os::raw::c_void);
            }
            return 0 as *mut std::os::raw::c_char
        }
        if chars < size || size == 64000 as std::os::raw::c_int { break ; }
        if chars < 64000 as std::os::raw::c_int {
            size = chars + 1 as std::os::raw::c_int
        } else { size = 64000 as std::os::raw::c_int }
        larger =
            xmlRealloc.expect("non-null function pointer")(str as
                                                               *mut std::os::raw::c_void,
                                                           size as size_t) as
                *mut std::os::raw::c_char;
        if larger.is_null() {
            (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                       b"xmlRealloc failed !\n\x00"
                                                                           as
                                                                           *const u8
                                                                           as
                                                                           *const std::os::raw::c_char);
            if !str.is_null() {
                xmlFree.expect("non-null function pointer")(str as
                                                                *mut std::os::raw::c_void);
            }
            return 0 as *mut std::os::raw::c_char
        }
        str = larger
    }
    return str;
}
// from xmlchemas.c:
#[no_mangle]
pub unsafe extern "C" fn warningSplit(mut ctx: *mut std::os::raw::c_void,
                                      mut msg: *const std::os::raw::c_char,
                                      mut args: ...) {
    let mut ctxt: xmlSchemaSAXPlugPtr = ctx as xmlSchemaSAXPlugPtr;
    if !ctxt.is_null() && !(*ctxt).user_sax.is_null() &&
           (*(*ctxt).user_sax).warning.is_some() {
        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                   b"Unimplemented block at %s:%d\n\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   b"variadic.c\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   834 as
                                                                       std::os::raw::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn errorSplit(mut ctx: *mut std::os::raw::c_void,
                                    mut msg: *const std::os::raw::c_char,
                                    mut args: ...) {
    let mut ctxt: xmlSchemaSAXPlugPtr = ctx as xmlSchemaSAXPlugPtr;
    if !ctxt.is_null() && !(*ctxt).user_sax.is_null() &&
           (*(*ctxt).user_sax).error.is_some() {
        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                   b"Unimplemented block at %s:%d\n\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   b"variadic.c\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   842 as
                                                                       std::os::raw::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn fatalErrorSplit(mut ctx: *mut std::os::raw::c_void,
                                         mut msg: *const std::os::raw::c_char,
                                         mut args: ...) {
    let mut ctxt: xmlSchemaSAXPlugPtr = ctx as xmlSchemaSAXPlugPtr;
    if !ctxt.is_null() && !(*ctxt).user_sax.is_null() &&
           (*(*ctxt).user_sax).fatalError.is_some() {
        (*__xmlGenericError()).expect("non-null function pointer")(*__xmlGenericErrorContext(),
                                                                   b"Unimplemented block at %s:%d\n\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   b"variadic.c\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const std::os::raw::c_char,
                                                                   850 as
                                                                       std::os::raw::c_int);
    };
}
/*
 * Summary: set of routines to process strings
 * Description: type and interfaces needed for the internal string handling
 *              of the library, especially UTF8 processing.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlChar:
 *
 * This is a basic byte in an UTF-8 encoded string.
 * It's unsigned allowing to pinpoint case where char * are assigned
 * to xmlChar * (possibly making serialization back impossible).
 */
/* *
 * BAD_CAST:
 *
 * Macro to cast a string to an xmlChar * when one know its safe.
 */
/*
 * xmlChar handling
 */
// from xmlstring.c:
#[no_mangle]
pub unsafe extern "C" fn xmlStrPrintf(mut buf: *mut xmlChar,
                                      mut len: std::os::raw::c_int,
                                      mut msg: *const std::os::raw::c_char,
                                      mut args: ...) -> std::os::raw::c_int {
    let mut args_0: ::std::ffi::VaListImpl; /* be safe ! */
    let mut ret: std::os::raw::c_int = 0;
    if buf.is_null() || msg.is_null() { return -(1 as std::os::raw::c_int) }
    args_0 = args.clone();
    ret =
        vsnprintf(buf as *mut std::os::raw::c_char, len as std::os::raw::c_ulong, msg,
                  args_0.as_va_list());
    *buf.offset((len - 1 as std::os::raw::c_int) as isize) =
        0 as std::os::raw::c_int as xmlChar;
    return ret;
}
// from xmlwriter.c:
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatComment(mut writer:
                                                             xmlTextWriterPtr,
                                                         mut format:
                                                             *const std::os::raw::c_char,
                                                         mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc = xmlTextWriterWriteVFormatComment(writer, format, ap.as_va_list());
    return rc;
}
/*
 * Text
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatRaw(mut writer:
                                                         xmlTextWriterPtr,
                                                     mut format:
                                                         *const std::os::raw::c_char,
                                                     mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc = xmlTextWriterWriteVFormatRaw(writer, format, ap.as_va_list());
    return rc;
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatString(mut writer:
                                                            xmlTextWriterPtr,
                                                        mut format:
                                                            *const std::os::raw::c_char,
                                                        mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    if writer.is_null() || format.is_null() { return -(1 as std::os::raw::c_int) }
    ap = args.clone();
    rc = xmlTextWriterWriteVFormatString(writer, format, ap.as_va_list());
    return rc;
}
/*
 * Attributes conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatAttribute(mut writer:
                                                               xmlTextWriterPtr,
                                                           mut name:
                                                               *const xmlChar,
                                                           mut format:
                                                               *const std::os::raw::c_char,
                                                           mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatAttribute(writer, name, format,
                                           ap.as_va_list());
    return rc;
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatAttributeNS(mut writer:
                                                                 xmlTextWriterPtr,
                                                             mut prefix:
                                                                 *const xmlChar,
                                                             mut name:
                                                                 *const xmlChar,
                                                             mut namespaceURI:
                                                                 *const xmlChar,
                                                             mut format:
                                                                 *const std::os::raw::c_char,
                                                             mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name,
                                             namespaceURI, format,
                                             ap.as_va_list());
    return rc;
}
/*
 * Elements conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatElement(mut writer:
                                                             xmlTextWriterPtr,
                                                         mut name:
                                                             *const xmlChar,
                                                         mut format:
                                                             *const std::os::raw::c_char,
                                                         mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatElement(writer, name, format,
                                         ap.as_va_list());
    return rc;
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatElementNS(mut writer:
                                                               xmlTextWriterPtr,
                                                           mut prefix:
                                                               *const xmlChar,
                                                           mut name:
                                                               *const xmlChar,
                                                           mut namespaceURI:
                                                               *const xmlChar,
                                                           mut format:
                                                               *const std::os::raw::c_char,
                                                           mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatElementNS(writer, prefix, name, namespaceURI,
                                           format, ap.as_va_list());
    return rc;
}
/*
 * PI conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatPI(mut writer:
                                                        xmlTextWriterPtr,
                                                    mut target:
                                                        *const xmlChar,
                                                    mut format:
                                                        *const std::os::raw::c_char,
                                                    mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc = xmlTextWriterWriteVFormatPI(writer, target, format, ap.as_va_list());
    return rc;
}
/*
 * CDATA conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatCDATA(mut writer:
                                                           xmlTextWriterPtr,
                                                       mut format:
                                                           *const std::os::raw::c_char,
                                                       mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc = xmlTextWriterWriteVFormatCDATA(writer, format, ap.as_va_list());
    return rc;
}
/*
 * DTD conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatDTD(mut writer:
                                                         xmlTextWriterPtr,
                                                     mut name: *const xmlChar,
                                                     mut pubid:
                                                         *const xmlChar,
                                                     mut sysid:
                                                         *const xmlChar,
                                                     mut format:
                                                         *const std::os::raw::c_char,
                                                     mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format,
                                     ap.as_va_list());
    return rc;
}
/*
 * DTD element definition conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatDTDElement(mut writer:
                                                                xmlTextWriterPtr,
                                                            mut name:
                                                                *const xmlChar,
                                                            mut format:
                                                                *const std::os::raw::c_char,
                                                            mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatDTDElement(writer, name, format,
                                            ap.as_va_list());
    return rc;
}
/*
 * DTD attribute list definition conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatDTDAttlist(mut writer:
                                                                xmlTextWriterPtr,
                                                            mut name:
                                                                *const xmlChar,
                                                            mut format:
                                                                *const std::os::raw::c_char,
                                                            mut args: ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatDTDAttlist(writer, name, format,
                                            ap.as_va_list());
    return rc;
}
/*
 * DTD entity definition conveniency functions
 */
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterWriteFormatDTDInternalEntity(mut writer:
                                                                       xmlTextWriterPtr,
                                                                   mut pe:
                                                                       std::os::raw::c_int,
                                                                   mut name:
                                                                       *const xmlChar,
                                                                   mut format:
                                                                       *const std::os::raw::c_char,
                                                                   mut args:
                                                                       ...)
 -> std::os::raw::c_int {
    let mut rc: std::os::raw::c_int = 0;
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    rc =
        xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name, format,
                                                   ap.as_va_list());
    return rc;
}
#[no_mangle]
pub unsafe extern "C" fn xmlTextWriterVSprintf(mut format:
                                                   *const std::os::raw::c_char,
                                               mut argptr: ::std::ffi::VaList)
 -> *mut xmlChar {
    let mut size: std::os::raw::c_int = 0;
    let mut count: std::os::raw::c_int = 0;
    let mut buf: *mut xmlChar = 0 as *mut xmlChar;
    let mut locarg: ::std::ffi::VaListImpl;
    size = 8192 as std::os::raw::c_int;
    buf =
        xmlMalloc.expect("non-null function pointer")(size as size_t) as
            *mut xmlChar;
    if buf.is_null() {
        xmlWriterErrMsg(0 as xmlTextWriterPtr, XML_ERR_NO_MEMORY,
                        b"xmlTextWriterVSprintf : out of memory!\n\x00" as
                            *const u8 as *const std::os::raw::c_char);
        return 0 as *mut xmlChar
    }
    locarg = argptr.clone();
    loop  {
        count =
            vsnprintf(buf as *mut std::os::raw::c_char, size as std::os::raw::c_ulong, format,
                      locarg.as_va_list());
        if !(count < 0 as std::os::raw::c_int || count == size - 1 as std::os::raw::c_int ||
                 count == size || count > size) {
            break ;
        }
        xmlFree.expect("non-null function pointer")(buf as *mut std::os::raw::c_void);
        size += 8192 as std::os::raw::c_int;
        buf =
            xmlMalloc.expect("non-null function pointer")(size as size_t) as
                *mut xmlChar;
        if buf.is_null() {
            xmlWriterErrMsg(0 as xmlTextWriterPtr, XML_ERR_NO_MEMORY,
                            b"xmlTextWriterVSprintf : out of memory!\n\x00" as
                                *const u8 as *const std::os::raw::c_char);
            return 0 as *mut xmlChar
        }
        locarg = argptr.clone();
    }
    return buf;
}
// from nanoftp.c:
// not really variadic, but generates ASM:
#[no_mangle]
pub unsafe extern "C" fn xmlNanoFTPCloseConnection(mut ctx: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut ctxt: xmlNanoFTPCtxtPtr = ctx as xmlNanoFTPCtxtPtr;
    let mut res: std::os::raw::c_int = 0;
    let mut rfd: fd_set = fd_set{__fds_bits: [0; 16],};
    let mut efd: fd_set = fd_set{__fds_bits: [0; 16],};
    let mut tv: timeval = timeval{tv_sec: 0, tv_usec: 0,};
    if ctxt.is_null() || (*ctxt).controlFd == -(1 as std::os::raw::c_int) {
        return -(1 as std::os::raw::c_int)
    }
    close((*ctxt).dataFd);
    (*ctxt).dataFd = -(1 as std::os::raw::c_int);
    tv.tv_sec = 15 as std::os::raw::c_int as __time_t;
    tv.tv_usec = 0 as std::os::raw::c_int as __suseconds_t;
    let mut __d0: std::os::raw::c_int = 0;
    let mut __d1: std::os::raw::c_int = 0;
    let fresh4 = &mut __d0;
    let fresh5;
    let fresh6 = &mut __d1;
    let fresh7;
    let fresh8 =
        (::std::mem::size_of::<fd_set>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<__fd_mask>() as
                                             std::os::raw::c_ulong);
    let fresh9 =
        &mut *rfd.__fds_bits.as_mut_ptr().offset(0 as std::os::raw::c_int as isize) as
            *mut __fd_mask;
    llvm_asm!("cld; rep; stosq" : "={cx}" (fresh5), "={di}" (fresh7) : "{ax}"
         (0 as std::os::raw::c_int), "0"
         (c2rust_asm_casts::AsmCast::cast_in(fresh4, fresh8)), "1"
         (c2rust_asm_casts::AsmCast::cast_in(fresh6, fresh9)) : "memory" :
         "volatile");
    c2rust_asm_casts::AsmCast::cast_out(fresh4, fresh8, fresh5);
    c2rust_asm_casts::AsmCast::cast_out(fresh6, fresh9, fresh7);
    rfd.__fds_bits[((*ctxt).controlFd /
                        (8 as std::os::raw::c_int *
                             ::std::mem::size_of::<__fd_mask>() as
                                 std::os::raw::c_ulong as std::os::raw::c_int)) as usize] |=
        ((1 as std::os::raw::c_ulong) <<
             (*ctxt).controlFd %
                 (8 as std::os::raw::c_int *
                      ::std::mem::size_of::<__fd_mask>() as std::os::raw::c_ulong as
                          std::os::raw::c_int)) as __fd_mask;
    let mut __d0_0: std::os::raw::c_int = 0;
    let mut __d1_0: std::os::raw::c_int = 0;
    let fresh10 = &mut __d0_0;
    let fresh11;
    let fresh12 = &mut __d1_0;
    let fresh13;
    let fresh14 =
        (::std::mem::size_of::<fd_set>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<__fd_mask>() as
                                             std::os::raw::c_ulong);
    let fresh15 =
        &mut *efd.__fds_bits.as_mut_ptr().offset(0 as std::os::raw::c_int as isize) as
            *mut __fd_mask;
    llvm_asm!("cld; rep; stosq" : "={cx}" (fresh11), "={di}" (fresh13) : "{ax}"
         (0 as std::os::raw::c_int), "0"
         (c2rust_asm_casts::AsmCast::cast_in(fresh10, fresh14)), "1"
         (c2rust_asm_casts::AsmCast::cast_in(fresh12, fresh15)) : "memory" :
         "volatile");
    c2rust_asm_casts::AsmCast::cast_out(fresh10, fresh14, fresh11);
    c2rust_asm_casts::AsmCast::cast_out(fresh12, fresh15, fresh13);
    efd.__fds_bits[((*ctxt).controlFd /
                        (8 as std::os::raw::c_int *
                             ::std::mem::size_of::<__fd_mask>() as
                                 std::os::raw::c_ulong as std::os::raw::c_int)) as usize] |=
        ((1 as std::os::raw::c_ulong) <<
             (*ctxt).controlFd %
                 (8 as std::os::raw::c_int *
                      ::std::mem::size_of::<__fd_mask>() as std::os::raw::c_ulong as
                          std::os::raw::c_int)) as __fd_mask;
    res =
        select((*ctxt).controlFd + 1 as std::os::raw::c_int, &mut rfd,
               0 as *mut fd_set, &mut efd, &mut tv);
    if res < 0 as std::os::raw::c_int {
        close((*ctxt).controlFd);
        (*ctxt).controlFd = -(1 as std::os::raw::c_int);
        return -(1 as std::os::raw::c_int)
    }
    if res == 0 as std::os::raw::c_int {
        close((*ctxt).controlFd);
        (*ctxt).controlFd = -(1 as std::os::raw::c_int)
    } else {
        res = xmlNanoFTPGetResponse(ctxt as *mut std::os::raw::c_void);
        if res != 2 as std::os::raw::c_int {
            close((*ctxt).controlFd);
            (*ctxt).controlFd = -(1 as std::os::raw::c_int);
            return -(1 as std::os::raw::c_int)
        }
    }
    return 0 as std::os::raw::c_int;
}
/*
 * Trapping the error messages at the generic level to grab the equivalent of
 * stderr messages on CLI tools.
 */
static mut testErrors: [std::os::raw::c_char; 32769] = [0; 32769];
static mut testErrorsSize: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub static mut callbacks_testlimits: std::os::raw::c_ulong =
    0 as std::os::raw::c_int as std::os::raw::c_ulong;
#[no_mangle]
pub unsafe extern "C" fn channel_testlimits(mut ctx: *mut std::os::raw::c_void,
                                            mut msg: *const std::os::raw::c_char,
                                            mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    let mut res: std::os::raw::c_int = 0;
    if testErrorsSize >= 32768 as std::os::raw::c_int { return }
    args_0 = args.clone();
    res =
        vsnprintf(&mut *testErrors.as_mut_ptr().offset(testErrorsSize as
                                                           isize),
                  (32768 as std::os::raw::c_int - testErrorsSize) as std::os::raw::c_ulong,
                  msg, args_0.as_va_list());
    if testErrorsSize + res >= 32768 as std::os::raw::c_int {
        /* buffer is full */
        testErrorsSize = 32768 as std::os::raw::c_int;
        testErrors[testErrorsSize as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char
    } else { testErrorsSize += res }
    testErrors[testErrorsSize as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;
}
/* *
 * warningCallback:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a warning messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn warningCallback_testlimits(mut ctx:
                                                        *mut std::os::raw::c_void,
                                                    mut msg:
                                                        *const std::os::raw::c_char,
                                                    mut args: ...) {
    callbacks_testlimits = callbacks_testlimits.wrapping_add(1);
}
/* *
 * errorCallback:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a error messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn errorCallback_testlimits(mut ctx: *mut std::os::raw::c_void,
                                                  mut msg:
                                                      *const std::os::raw::c_char,
                                                  mut args: ...) {
    callbacks_testlimits = callbacks_testlimits.wrapping_add(1);
}
/* *
 * fatalErrorCallback:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a fatalError messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn fatalErrorCallback_testlimits(mut ctx:
                                                           *mut std::os::raw::c_void,
                                                       mut msg:
                                                           *const std::os::raw::c_char,
                                                       mut args: ...) {
}
/* *
 * xmlNanoFTPCheckResponse:
 * @ctx:  an FTP context
 *
 * Check if there is a response from the FTP server after a command.
 * Returns the code number, or 0
 */
#[no_mangle]
pub unsafe extern "C" fn xmlNanoFTPCheckResponse(mut ctx: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut ctxt: xmlNanoFTPCtxtPtr = ctx as xmlNanoFTPCtxtPtr;
    let mut rfd: fd_set = fd_set{__fds_bits: [0; 16],};
    let mut tv: timeval = timeval{tv_sec: 0, tv_usec: 0,};
    if ctxt.is_null() || (*ctxt).controlFd == -(1 as std::os::raw::c_int) {
        return -(1 as std::os::raw::c_int)
    }
    tv.tv_sec = 0 as std::os::raw::c_int as __time_t;
    tv.tv_usec = 0 as std::os::raw::c_int as __suseconds_t;
    let mut __d0: std::os::raw::c_int = 0;
    let mut __d1: std::os::raw::c_int = 0;
    let fresh16 = &mut __d0;
    let fresh17;
    let fresh18 = &mut __d1;
    let fresh19;
    let fresh20 =
        (::std::mem::size_of::<fd_set>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<__fd_mask>() as
                                             std::os::raw::c_ulong);
    let fresh21 =
        &mut *rfd.__fds_bits.as_mut_ptr().offset(0 as std::os::raw::c_int as isize) as
            *mut __fd_mask;
    llvm_asm!("cld; rep; stosq" : "={cx}" (fresh17), "={di}" (fresh19) : "{ax}"
         (0 as std::os::raw::c_int), "0"
         (c2rust_asm_casts::AsmCast::cast_in(fresh16, fresh20)), "1"
         (c2rust_asm_casts::AsmCast::cast_in(fresh18, fresh21)) : "memory" :
         "volatile");
    c2rust_asm_casts::AsmCast::cast_out(fresh16, fresh20, fresh17);
    c2rust_asm_casts::AsmCast::cast_out(fresh18, fresh21, fresh19);
    rfd.__fds_bits[((*ctxt).controlFd /
                        (8 as std::os::raw::c_int *
                             ::std::mem::size_of::<__fd_mask>() as
                                 std::os::raw::c_ulong as std::os::raw::c_int)) as usize] |=
        ((1 as std::os::raw::c_ulong) <<
             (*ctxt).controlFd %
                 (8 as std::os::raw::c_int *
                      ::std::mem::size_of::<__fd_mask>() as std::os::raw::c_ulong as
                          std::os::raw::c_int)) as __fd_mask;
    match select((*ctxt).controlFd + 1 as std::os::raw::c_int, &mut rfd,
                 0 as *mut fd_set, 0 as *mut fd_set, &mut tv) {
        0 => { return 0 as std::os::raw::c_int }
        -1 => {
            __xmlIOErr(XML_FROM_FTP as std::os::raw::c_int, 0 as std::os::raw::c_int,
                       b"select\x00" as *const u8 as *const std::os::raw::c_char);
            return -(1 as std::os::raw::c_int)
        }
        _ => { }
    }
    return xmlNanoFTPReadResponse(ctx);
}
// from testrecurse.c:
#[no_mangle]
pub static mut testErrors_recurse: [std::os::raw::c_char; 32769] = [0; 32769];
#[no_mangle]
pub static mut testErrorsSize_recurse: std::os::raw::c_int = 0 as std::os::raw::c_int;
/*
 * Trapping the error messages at the generic level to grab the equivalent of
 * stderr messages on CLI tools.
 */
#[no_mangle]
pub unsafe extern "C" fn channel_testrecurse(mut ctx: *mut std::os::raw::c_void,
                                             mut msg: *const std::os::raw::c_char,
                                             mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    let mut res: std::os::raw::c_int = 0;
    if testErrorsSize_recurse >= 32768 as std::os::raw::c_int { return }
    args_0 = args.clone();
    res =
        vsnprintf(&mut *testErrors_recurse.as_mut_ptr().offset(testErrorsSize_recurse
                                                                   as isize),
                  (32768 as std::os::raw::c_int - testErrorsSize_recurse) as
                      std::os::raw::c_ulong, msg, args_0.as_va_list());
    if testErrorsSize_recurse + res >= 32768 as std::os::raw::c_int {
        /* buffer is full */
        testErrorsSize_recurse = 32768 as std::os::raw::c_int;
        testErrors_recurse[testErrorsSize_recurse as usize] =
            0 as std::os::raw::c_int as std::os::raw::c_char
    } else { testErrorsSize_recurse += res }
    testErrors_recurse[testErrorsSize_recurse as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
}
// from testHTML.c:
#[no_mangle]
pub unsafe extern "C" fn testHTML_warningDebug(mut ctx: *mut std::os::raw::c_void,
                                               mut msg: *const std::os::raw::c_char,
                                               mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    args_0 = args.clone();
    fprintf(stdout, b"SAX.warning: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn testHTML_errorDebug(mut ctx: *mut std::os::raw::c_void,
                                             mut msg: *const std::os::raw::c_char,
                                             mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    args_0 = args.clone();
    fprintf(stdout, b"SAX.error: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn testHTML_fatalErrorDebug(mut ctx: *mut std::os::raw::c_void,
                                                  mut msg:
                                                      *const std::os::raw::c_char,
                                                  mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    args_0 = args.clone();
    fprintf(stdout,
            b"SAX.fatalError: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
// from testSAX.c:
#[no_mangle]
pub static mut testSAX_callbacks: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub static mut testSAX_quiet: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub unsafe extern "C" fn testSAX_warningDebug(mut ctx: *mut std::os::raw::c_void,
                                              mut msg: *const std::os::raw::c_char,
                                              mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    testSAX_callbacks += 1;
    if testSAX_quiet != 0 { return }
    args_0 = args.clone();
    fprintf(stdout, b"SAX.warning: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn testSAX_errorDebug(mut ctx: *mut std::os::raw::c_void,
                                            mut msg: *const std::os::raw::c_char,
                                            mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    testSAX_callbacks += 1;
    if testSAX_quiet != 0 { return }
    args_0 = args.clone();
    fprintf(stdout, b"SAX.error: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
#[no_mangle]
pub unsafe extern "C" fn testSAX_fatalErrorDebug(mut ctx: *mut std::os::raw::c_void,
                                                 mut msg: *const std::os::raw::c_char,
                                                 mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    testSAX_callbacks += 1;
    if testSAX_quiet != 0 { return }
    args_0 = args.clone();
    fprintf(stdout,
            b"SAX.fatalError: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(stdout, msg, args_0.as_va_list());
}
static mut testSAX_begin: timeval = timeval{tv_sec: 0, tv_usec: 0,};
static mut testSAX_end: timeval = timeval{tv_sec: 0, tv_usec: 0,};
/*
 * testSAX_startTimer: call where you want to start timing
 */
#[no_mangle]
pub unsafe extern "C" fn testSAX_startTimer() {
    gettimeofday(&mut testSAX_begin, 0 as *mut std::os::raw::c_void);
}
/*
 * testSAX_endTimer: call where you want to stop timing and to print out a
 *           message about the timing performed; format is a printf
 *           type argument
 */
#[no_mangle]
pub unsafe extern "C" fn testSAX_endTimer(mut fmt: *const std::os::raw::c_char,
                                          mut args: ...) {
    let mut msec: std::os::raw::c_long = 0;
    let mut ap: ::std::ffi::VaListImpl;
    gettimeofday(&mut testSAX_end, 0 as *mut std::os::raw::c_void);
    msec = testSAX_end.tv_sec - testSAX_begin.tv_sec;
    msec *= 1000 as std::os::raw::c_int as std::os::raw::c_long;
    msec +=
        (testSAX_end.tv_usec - testSAX_begin.tv_usec) /
            1000 as std::os::raw::c_int as std::os::raw::c_long;
    ap = args.clone();
    vfprintf(stderr, fmt, ap.as_va_list());
    fprintf(stderr, b" took %ld ms\n\x00" as *const u8 as *const std::os::raw::c_char,
            msec);
}
/*
 * Trapping the error messages at the generic level to grab the equivalent of
 * stderr messages on CLI tools.
 */
#[no_mangle]
pub static mut testErrors_runtest: [std::os::raw::c_char; 32769] = [0; 32769];
#[no_mangle]
pub static mut testErrorsSize_runtest: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub unsafe extern "C" fn testErrorHandler_runtest(mut ctx: *mut std::os::raw::c_void,
                                                  mut msg:
                                                      *const std::os::raw::c_char,
                                                  mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    let mut res: std::os::raw::c_int = 0;
    if testErrorsSize_runtest >= 32768 as std::os::raw::c_int { return }
    args_0 = args.clone();
    res =
        vsnprintf(&mut *testErrors_runtest.as_mut_ptr().offset(testErrorsSize_runtest
                                                                   as isize),
                  (32768 as std::os::raw::c_int - testErrorsSize_runtest) as
                      std::os::raw::c_ulong, msg, args_0.as_va_list());
    if testErrorsSize_runtest + res >= 32768 as std::os::raw::c_int {
        /* buffer is full */
        testErrorsSize_runtest = 32768 as std::os::raw::c_int;
        testErrors_runtest[testErrorsSize_runtest as usize] =
            0 as std::os::raw::c_int as std::os::raw::c_char
    } else { testErrorsSize_runtest += res }
    testErrors_runtest[testErrorsSize_runtest as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn channel_runtest(mut ctx: *mut std::os::raw::c_void,
                                         mut msg: *const std::os::raw::c_char,
                                         mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    let mut res: std::os::raw::c_int = 0;
    if testErrorsSize_runtest >= 32768 as std::os::raw::c_int { return }
    args_0 = args.clone();
    res =
        vsnprintf(&mut *testErrors_runtest.as_mut_ptr().offset(testErrorsSize_runtest
                                                                   as isize),
                  (32768 as std::os::raw::c_int - testErrorsSize_runtest) as
                      std::os::raw::c_ulong, msg, args_0.as_va_list());
    if testErrorsSize_runtest + res >= 32768 as std::os::raw::c_int {
        /* buffer is full */
        testErrorsSize_runtest = 32768 as std::os::raw::c_int;
        testErrors_runtest[testErrorsSize_runtest as usize] =
            0 as std::os::raw::c_int as std::os::raw::c_char
    } else { testErrorsSize_runtest += res }
    testErrors_runtest[testErrorsSize_runtest as usize] =
        0 as std::os::raw::c_int as std::os::raw::c_char;
}
#[no_mangle]
pub static mut callbacks_runtest: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub static mut quiet_runtest: std::os::raw::c_int = 0 as std::os::raw::c_int;
#[no_mangle]
pub static mut SAXdebug_runtest: *mut FILE = 0 as *const FILE as *mut FILE;
/* *
 * warningDebug:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a warning messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn warningDebug_runtest(mut ctx: *mut std::os::raw::c_void,
                                              mut msg: *const std::os::raw::c_char,
                                              mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    callbacks_runtest += 1;
    if quiet_runtest != 0 { return }
    args_0 = args.clone();
    fprintf(SAXdebug_runtest,
            b"SAX.warning: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(SAXdebug_runtest, msg, args_0.as_va_list());
}
/* *
 * errorDebug:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a error messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn errorDebug_runtest(mut ctx: *mut std::os::raw::c_void,
                                            mut msg: *const std::os::raw::c_char,
                                            mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    callbacks_runtest += 1;
    if quiet_runtest != 0 { return }
    args_0 = args.clone();
    fprintf(SAXdebug_runtest,
            b"SAX.error: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(SAXdebug_runtest, msg, args_0.as_va_list());
}
/* *
 * fatalErrorDebug:
 * @ctxt:  An XML parser context
 * @msg:  the message to display/transmit
 * @...:  extra parameters for the message display
 *
 * Display and format a fatalError messages, gives file, line, position and
 * extra parameters.
 */
#[no_mangle]
pub unsafe extern "C" fn fatalErrorDebug_runtest(mut ctx: *mut std::os::raw::c_void,
                                                 mut msg: *const std::os::raw::c_char,
                                                 mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    callbacks_runtest += 1;
    if quiet_runtest != 0 { return }
    args_0 = args.clone();
    fprintf(SAXdebug_runtest,
            b"SAX.fatalError: \x00" as *const u8 as *const std::os::raw::c_char);
    vfprintf(SAXdebug_runtest, msg, args_0.as_va_list());
}
// #include <libxml/xmlwriter.h>
// from xmllint.c:
// from xmlreader.c:
/* the parsing mode */
/* when walking an existing doc */
/* is there any validation */
/* what structure were deallocated */
/* the parser context */
/* the parser SAX callbacks */
/* the input */
/* initial SAX callbacks */
/* idem */
/* idem */
/* idem */
/* base of the segment in the input */
/* current position in the input */
/* current node */
/* current attribute node */
/* depth of the current node */
/* fake xmlNs chld */
/* preserve the resulting document */
/* used to return const xmlChar * */
/* the context dictionary */
/* entity stack when traversing entities content */
/* Current Entity Ref Node */
/* Depth of the entities stack */
/* Max depth of the entities stack */
/* array of entities */
/* error handling */
/* callback function */
/* callback function user argument */
/* Handling of RelaxNG validation */
/* The Relax NG schemas */
/* The Relax NG validation context */
/* 1 if the context was provided by the user */
/* The number of errors detected */
/* the node if RNG not progressive */
/* Handling of Schemas validation */
/* The Schemas schemas */
/* The Schemas validation context */
/* 1 if the context was provided by the user */
/* The number of errors detected */
/* the schemas plug in SAX pipeline */
/* Handling of XInclude processing */
/* is xinclude asked for */
/* the xinclude name from dict */
/* the xinclude context */
/* counts for xinclude */
/* number of preserve patterns */
/* max preserve patterns */
/* array of preserve patterns */
/* level of preserves */
/* the set of options set */
/* Structured error handling */
/* callback function */
// from xmlschemas.c:
/* the original callbacks informations */
/* the block plugged back and validation informations */
// from nanoftp.c:
/* the protocol name */
/* the host name */
/* the port */
/* the path within the URL */
/* user string */
/* passwd string */
/* this is large enough to hold IPv6 address*/
/* currently we support only passive !!! */
/* the file descriptor for the control socket */
/* the file descriptor for the data socket */
/* WRITE / READ / CLOSED */
/* the protocol return value */
/* buffer for data received from the control connection */
// from error.c:
// already in include/libxml2/xmlerror.h?:
// void XMLCDECL __xmlRaiseError(xmlStructuredErrorFunc schannel, xmlGenericErrorFunc channel, void *data, void *ctx,
//                               void *nod, int domain, int code, xmlErrorLevel level, const char *file, int line,
//                               const char *str1, const char *str2, const char *str3, int int1, int col, const char *msg, ...);
// void XMLCDECL xmlParserError(void *ctx, const char *msg, ...);
// void XMLCDECL xmlParserWarning(void *ctx, const char *msg, ...);
// void XMLCDECL xmlParserValidityError(void *ctx, const char *msg, ...);
// void XMLCDECL xmlParserValidityWarning(void *ctx, const char *msg, ...);
// from valid.c:
// from xmlreader.c:
// from xmlchemas.c:
// from xmlstring.c:
// int XMLCDECL xmlStrPrintf(xmlChar *buf, int len, const char *msg, ...);
// from xmlwriter.c:
// already in include/libxml/xmlwriter.h?:
// int XMLCDECL xmlTextWriterWriteFormatComment(xmlTextWriterPtr writer, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatRaw(xmlTextWriterPtr writer, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatString(xmlTextWriterPtr writer, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr writer, const xmlChar * name, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatAttributeNS(xmlTextWriterPtr writer, const xmlChar * prefix, const xmlChar * name, const xmlChar * namespaceURI, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatElement(xmlTextWriterPtr writer, const xmlChar * name, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatElementNS(xmlTextWriterPtr writer, const xmlChar * prefix, const xmlChar * name, const xmlChar * namespaceURI, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatPI(xmlTextWriterPtr writer, const xmlChar * target, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr writer, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatDTD(xmlTextWriterPtr writer, const xmlChar * name, const xmlChar * pubid, const xmlChar * sysid, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr writer, const xmlChar * name, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar * name, const char *format, ...);
// int XMLCDECL xmlTextWriterWriteFormatDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar * name, const char *format, ...);
/*
 * testlimits.c
 * changed from `func` to `func_testlimits`
 */
/*
 * nanoftp.c
 * xmlNanoFTPCheckResponse uses asm, so linking against it is possibly the best choice
 */
// Already included in another header afaict:
// int xmlNanoFTPCheckResponse(void *ctx);
/*
 * testapi.c
 * moved the `channel` function as well as some variables, and renamed them.
 */
// from testHTML.c:
// from testSAX.c:
// from runtest.c:
#[no_mangle]
pub unsafe extern "C" fn ignoreGenericError_runtest(mut ctx:
                                                        *mut std::os::raw::c_void,
                                                    mut msg:
                                                        *const std::os::raw::c_char,
                                                    mut args: ...) {
}

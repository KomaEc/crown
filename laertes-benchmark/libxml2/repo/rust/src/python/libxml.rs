
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type PyMemberDef;
    pub type _xmlBuf;
    /*
 * Summary: string dictionary
 * Description: dictionary of reusable strings, just used to avoid allocation
 *         and freeing operations.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
    /*
 * The dictionary.
 */
    pub type _xmlDict;
    pub type _xmlHashTable;
    pub type _xmlAutomataState;
    pub type _xmlAutomata;
    pub type _xmlValidState;
    pub type _xmlXPathCompExpr;
    pub type _xmlRelaxNGValidCtxt;
    pub type _xmlSchemaValidCtxt;
    pub type _xmlTextReader;
    pub type _xmlSaveCtxt;
    #[no_mangle]
    static mut stdout: *mut FILE;
    #[no_mangle]
    static mut stderr: *mut FILE;
    #[no_mangle]
    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn printf(_: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn vfprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn vsnprintf(_: *mut std::os::raw::c_char, _: std::os::raw::c_ulong,
                 _: *const std::os::raw::c_char, _: ::std::ffi::VaList)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn memcpy(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_void, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn memset(_: *mut std::os::raw::c_void, _: std::os::raw::c_int, _: std::os::raw::c_ulong)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn PyObject_CallMethod(o: *mut PyObject, m: *mut std::os::raw::c_char,
                           format: *mut std::os::raw::c_char, _: ...)
     -> *mut PyObject;
    #[no_mangle]
    fn PyObject_CallFunction(callable_object: *mut PyObject,
                             format: *mut std::os::raw::c_char, _: ...)
     -> *mut PyObject;
    #[no_mangle]
    fn PyEval_CallMethod(obj: *mut PyObject, methodname: *const std::os::raw::c_char,
                         format: *const std::os::raw::c_char, _: ...)
     -> *mut PyObject;
    #[no_mangle]
    fn PyEval_CallObjectWithKeywords(_: *mut PyObject, _: *mut PyObject,
                                     _: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn PyErr_Print();
    #[no_mangle]
    fn Py_InitModule4_64(name: *const std::os::raw::c_char, methods: *mut PyMethodDef,
                         doc: *const std::os::raw::c_char, self_0: *mut PyObject,
                         apiver: std::os::raw::c_int) -> *mut PyObject;
    #[no_mangle]
    fn Py_BuildValue(_: *const std::os::raw::c_char, _: ...) -> *mut PyObject;
    #[no_mangle]
    fn PyArg_ParseTuple(_: *mut PyObject, _: *const std::os::raw::c_char, _: ...)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn PyErr_NoMemory() -> *mut PyObject;
    #[no_mangle]
    static mut PyExc_ValueError: *mut PyObject;
    #[no_mangle]
    static mut PyExc_TypeError: *mut PyObject;
    #[no_mangle]
    static mut PyExc_MemoryError: *mut PyObject;
    #[no_mangle]
    static mut PyExc_IndexError: *mut PyObject;
    #[no_mangle]
    static mut PyExc_AssertionError: *mut PyObject;
    #[no_mangle]
    static mut PyExc_Exception: *mut PyObject;
    #[no_mangle]
    fn PyErr_Occurred() -> *mut PyObject;
    #[no_mangle]
    fn PyErr_SetString(_: *mut PyObject, _: *const std::os::raw::c_char);
    #[no_mangle]
    fn PyCapsule_GetName(capsule: *mut PyObject) -> *const std::os::raw::c_char;
    #[no_mangle]
    fn PyCapsule_GetPointer(capsule: *mut PyObject, name: *const std::os::raw::c_char)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    static mut PyCapsule_Type: PyTypeObject;
    #[no_mangle]
    fn PyFile_AsFile(_: *mut PyObject) -> *mut FILE;
    #[no_mangle]
    static mut PyFile_Type: PyTypeObject;
    #[no_mangle]
    fn PyDict_SetItem(mp: *mut PyObject, key: *mut PyObject,
                      item: *mut PyObject) -> std::os::raw::c_int;
    #[no_mangle]
    fn PyDict_New() -> *mut PyObject;
    #[no_mangle]
    fn PyList_SetItem(_: *mut PyObject, _: Py_ssize_t, _: *mut PyObject)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn PyList_New(size: Py_ssize_t) -> *mut PyObject;
    #[no_mangle]
    fn PyTuple_SetItem(_: *mut PyObject, _: Py_ssize_t, _: *mut PyObject)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn PyTuple_New(size: Py_ssize_t) -> *mut PyObject;
    #[no_mangle]
    fn PyString_AsString(_: *mut PyObject) -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn PyString_Size(_: *mut PyObject) -> Py_ssize_t;
    #[no_mangle]
    fn PyString_FromString(_: *const std::os::raw::c_char) -> *mut PyObject;
    #[no_mangle]
    fn PyString_FromStringAndSize(_: *const std::os::raw::c_char, _: Py_ssize_t)
     -> *mut PyObject;
    #[no_mangle]
    fn PyLong_FromVoidPtr(_: *mut std::os::raw::c_void) -> *mut PyObject;
    #[no_mangle]
    fn PyLong_AsLong(_: *mut PyObject) -> std::os::raw::c_long;
    #[no_mangle]
    fn PyLong_FromLong(_: std::os::raw::c_long) -> *mut PyObject;
    #[no_mangle]
    fn PyUnicodeUCS4_AsUTF8String(unicode: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn PyType_IsSubtype(_: *mut PyTypeObject, _: *mut PyTypeObject)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn PyObject_HasAttrString(_: *mut PyObject, _: *const std::os::raw::c_char)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn PyCallable_Check(_: *mut PyObject) -> std::os::raw::c_int;
    #[no_mangle]
    static mut _Py_NoneStruct: PyObject;
    /*
 * The 4 interfaces used for all memory handling within libxml.
LIBXML_DLL_IMPORT xmlFreeFunc xmlFree;
LIBXML_DLL_IMPORT xmlMallocFunc xmlMalloc;
LIBXML_DLL_IMPORT xmlMallocFunc xmlMallocAtomic;
LIBXML_DLL_IMPORT xmlReallocFunc xmlRealloc;
LIBXML_DLL_IMPORT xmlStrdupFunc xmlMemStrdup;
 */
    /*
 * The way to overload the existing functions.
 * The xmlGc function have an extra entry for atomic block
 * allocations useful for garbage collected memory allocators
 */
    #[no_mangle]
    fn xmlMemSetup(freeFunc_0: xmlFreeFunc, mallocFunc_0: xmlMallocFunc,
                   reallocFunc_0: xmlReallocFunc, strdupFunc_0: xmlStrdupFunc)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlMemGet(freeFunc_0: *mut xmlFreeFunc,
                 mallocFunc_0: *mut xmlMallocFunc,
                 reallocFunc_0: *mut xmlReallocFunc,
                 strdupFunc_0: *mut xmlStrdupFunc) -> std::os::raw::c_int;
    /*
 * These are specific to the XML debug memory wrapper.
 */
    #[no_mangle]
    fn xmlMemUsed() -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlBufferCreate() -> xmlBufferPtr;
    #[no_mangle]
    fn xmlBufferFree(buf: xmlBufferPtr);
    #[no_mangle]
    fn xmlNewNode(ns: xmlNsPtr, name: *const xmlChar) -> xmlNodePtr;
    #[no_mangle]
    fn xmlSaveFileTo(buf: xmlOutputBufferPtr, cur: xmlDocPtr,
                     encoding: *const std::os::raw::c_char) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlSaveFormatFileTo(buf: xmlOutputBufferPtr, cur: xmlDocPtr,
                           encoding: *const std::os::raw::c_char, format: std::os::raw::c_int)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlNodeDumpOutput(buf: xmlOutputBufferPtr, doc: xmlDocPtr,
                         cur: xmlNodePtr, level: std::os::raw::c_int,
                         format: std::os::raw::c_int, encoding: *const std::os::raw::c_char);
    /*
 * Use the following function to reset the two global variables
 * xmlGenericError and xmlGenericErrorContext.
 */
    #[no_mangle]
    fn xmlSetGenericErrorFunc(ctx: *mut std::os::raw::c_void,
                              handler: xmlGenericErrorFunc);
    /*
 * Default message routines used by SAX and Valid context for error
 * and warning reporting.
 */
    #[no_mangle]
    fn xmlParserError(ctx: *mut std::os::raw::c_void, msg: *const std::os::raw::c_char,
                      _: ...);
    #[no_mangle]
    fn xmlParserWarning(ctx: *mut std::os::raw::c_void, msg: *const std::os::raw::c_char,
                        _: ...);
    #[no_mangle]
    fn xmlParserValidityError(ctx: *mut std::os::raw::c_void,
                              msg: *const std::os::raw::c_char, _: ...);
    #[no_mangle]
    fn xmlParserValidityWarning(ctx: *mut std::os::raw::c_void,
                                msg: *const std::os::raw::c_char, _: ...);
    #[no_mangle]
    fn xmlFreeValidCtxt(_: xmlValidCtxtPtr);
    #[no_mangle]
    fn xmlFindCharEncodingHandler(name: *const std::os::raw::c_char)
     -> xmlCharEncodingHandlerPtr;
    #[no_mangle]
    fn xmlParseCharEncoding(name: *const std::os::raw::c_char) -> xmlCharEncoding;
    #[no_mangle]
    fn xmlPopInputCallbacks() -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlAllocParserInputBuffer(enc: xmlCharEncoding)
     -> xmlParserInputBufferPtr;
    #[no_mangle]
    fn xmlParserGetDirectory(filename: *const std::os::raw::c_char)
     -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn xmlRegisterInputCallbacks(matchFunc: xmlInputMatchCallback,
                                 openFunc: xmlInputOpenCallback,
                                 readFunc: xmlInputReadCallback,
                                 closeFunc: xmlInputCloseCallback)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlAllocOutputBuffer(encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferCreateFile(file: *mut FILE,
                                 encoder: xmlCharEncodingHandlerPtr)
     -> xmlOutputBufferPtr;
    #[no_mangle]
    fn xmlOutputBufferFlush(out: xmlOutputBufferPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlOutputBufferClose(out: xmlOutputBufferPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlInitParser();
    #[no_mangle]
    fn xmlCleanupParser();
    #[no_mangle]
    fn xmlMemoryStrdup(str: *const std::os::raw::c_char) -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn xmlMemFree(ptr: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlMemRealloc(ptr: *mut std::os::raw::c_void, size: size_t)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn xmlMemMalloc(size: size_t) -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn xmlMemoryDump();
    #[no_mangle]
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    #[no_mangle]
    fn xmlThrDefSetGenericErrorFunc(ctx: *mut std::os::raw::c_void,
                                    handler: xmlGenericErrorFunc);
    #[no_mangle]
    static mut xmlMalloc: xmlMallocFunc;
    #[no_mangle]
    static mut xmlRealloc: xmlReallocFunc;
    #[no_mangle]
    static mut xmlFree: xmlFreeFunc;
    #[no_mangle]
    fn xmlSAXUserParseFile(sax: xmlSAXHandlerPtr,
                           user_data: *mut std::os::raw::c_void,
                           filename: *const std::os::raw::c_char) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlFreeParserCtxt(ctxt: xmlParserCtxtPtr);
    #[no_mangle]
    fn xmlNewIOInputStream(ctxt: xmlParserCtxtPtr,
                           input: xmlParserInputBufferPtr,
                           enc: xmlCharEncoding) -> xmlParserInputPtr;
    #[no_mangle]
    fn xmlCreatePushParserCtxt(sax: xmlSAXHandlerPtr,
                               user_data: *mut std::os::raw::c_void,
                               chunk: *const std::os::raw::c_char, size: std::os::raw::c_int,
                               filename: *const std::os::raw::c_char)
     -> xmlParserCtxtPtr;
    #[no_mangle]
    fn xmlGetExternalEntityLoader() -> xmlExternalEntityLoader;
    #[no_mangle]
    fn xmlSetExternalEntityLoader(f: xmlExternalEntityLoader);
    /*
 * Function Lookup forwarding.
 */
    #[no_mangle]
    fn xmlXPathRegisterFuncLookup(ctxt: xmlXPathContextPtr,
                                  f: xmlXPathFuncLookupFunc,
                                  funcCtxt: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlXPathRegisterVariableNS(ctxt: xmlXPathContextPtr,
                                  name: *const xmlChar,
                                  ns_uri: *const xmlChar,
                                  value: xmlXPathObjectPtr) -> std::os::raw::c_int;
    /* TODO: remap to xmlXPathValuePop and Push. */
    #[no_mangle]
    fn valuePop(ctxt: xmlXPathParserContextPtr) -> xmlXPathObjectPtr;
    #[no_mangle]
    fn valuePush(ctxt: xmlXPathParserContextPtr, value: xmlXPathObjectPtr)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlC14NDocSaveTo(doc: xmlDocPtr, nodes: xmlNodeSetPtr,
                        mode: std::os::raw::c_int,
                        inclusive_ns_prefixes: *mut *mut xmlChar,
                        with_comments: std::os::raw::c_int, buf: xmlOutputBufferPtr)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlC14NDocDumpMemory(doc: xmlDocPtr, nodes: xmlNodeSetPtr,
                            mode: std::os::raw::c_int,
                            inclusive_ns_prefixes: *mut *mut xmlChar,
                            with_comments: std::os::raw::c_int,
                            doc_txt_ptr: *mut *mut xmlChar) -> std::os::raw::c_int;
    /* LIBXML_OUTPUT_ENABLED */
    /*
 * Interfaces for validating
 */
    #[no_mangle]
    fn xmlSchemaSetValidErrors(ctxt: xmlSchemaValidCtxtPtr,
                               err: xmlSchemaValidityErrorFunc,
                               warn: xmlSchemaValidityWarningFunc,
                               ctx: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlSchemaGetValidErrors(ctxt: xmlSchemaValidCtxtPtr,
                               err: *mut xmlSchemaValidityErrorFunc,
                               warn: *mut xmlSchemaValidityWarningFunc,
                               ctx: *mut *mut std::os::raw::c_void) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlSchemaFreeValidCtxt(ctxt: xmlSchemaValidCtxtPtr);
    #[no_mangle]
    fn xmlFreeTextReader(reader: xmlTextReaderPtr);
    /* LIBXML_OUTPUT_ENABLED */
    /*
 * Interfaces for validating
 */
    #[no_mangle]
    fn xmlRelaxNGSetValidErrors(ctxt: xmlRelaxNGValidCtxtPtr,
                                err: xmlRelaxNGValidityErrorFunc,
                                warn: xmlRelaxNGValidityWarningFunc,
                                ctx: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlRelaxNGGetValidErrors(ctxt: xmlRelaxNGValidCtxtPtr,
                                err: *mut xmlRelaxNGValidityErrorFunc,
                                warn: *mut xmlRelaxNGValidityWarningFunc,
                                ctx: *mut *mut std::os::raw::c_void) -> std::os::raw::c_int;
    #[no_mangle]
    fn xmlRelaxNGFreeValidCtxt(ctxt: xmlRelaxNGValidCtxtPtr);
    #[no_mangle]
    fn xmlTextReaderSetErrorHandler(reader: xmlTextReaderPtr,
                                    f: xmlTextReaderErrorFunc,
                                    arg: *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlTextReaderGetErrorHandler(reader: xmlTextReaderPtr,
                                    f: *mut xmlTextReaderErrorFunc,
                                    arg: *mut *mut std::os::raw::c_void);
    #[no_mangle]
    fn xmlSaveToBuffer(buffer: xmlBufferPtr, encoding: *const std::os::raw::c_char,
                       options: std::os::raw::c_int) -> xmlSaveCtxtPtr;
    #[no_mangle]
    fn xmlSaveDoc(ctxt: xmlSaveCtxtPtr, doc: xmlDocPtr) -> std::os::raw::c_long;
    #[no_mangle]
    fn xmlSaveTree(ctxt: xmlSaveCtxtPtr, node: xmlNodePtr) -> std::os::raw::c_long;
    #[no_mangle]
    fn xmlSaveClose(ctxt: xmlSaveCtxtPtr) -> std::os::raw::c_int;
    #[no_mangle]
    fn htmlCreatePushParserCtxt(sax: htmlSAXHandlerPtr,
                                user_data: *mut std::os::raw::c_void,
                                chunk: *const std::os::raw::c_char, size: std::os::raw::c_int,
                                filename: *const std::os::raw::c_char,
                                enc: xmlCharEncoding) -> htmlParserCtxtPtr;
    #[no_mangle]
    fn htmlSAXParseFile(filename: *const std::os::raw::c_char,
                        encoding: *const std::os::raw::c_char, sax: htmlSAXHandlerPtr,
                        userData: *mut std::os::raw::c_void) -> htmlDocPtr;
    #[no_mangle]
    fn xmlCatalogAddLocal(catalogs: *mut std::os::raw::c_void, URL: *const xmlChar)
     -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn htmlGetMetaEncoding(doc: htmlDocPtr) -> *const xmlChar;
    #[no_mangle]
    fn htmlNodeDumpFormatOutput(buf: xmlOutputBufferPtr, doc: xmlDocPtr,
                                cur: xmlNodePtr,
                                encoding: *const std::os::raw::c_char,
                                format: std::os::raw::c_int);
    #[no_mangle]
    fn htmlDocContentDumpFormatOutput(buf: xmlOutputBufferPtr, cur: xmlDocPtr,
                                      encoding: *const std::os::raw::c_char,
                                      format: std::os::raw::c_int);
    #[no_mangle]
    fn libxml_xmlXPathObjectPtrConvert(obj: *mut PyObject)
     -> xmlXPathObjectPtr;
    #[no_mangle]
    fn libxml_xmlTextReaderLocatorPtrWrap(locator: xmlTextReaderLocatorPtr)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserInputBufferPtrWrap(buffer: xmlParserInputBufferPtr)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlOutputBufferPtrWrap(buffer: xmlOutputBufferPtr)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlXPathObjectPtrWrap(obj: xmlXPathObjectPtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlXPathParserContextPtrWrap(ctxt: xmlXPathParserContextPtr)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserCtxtPtrWrap(ctxt: xmlParserCtxtPtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNsPtrWrap(ns: xmlNsPtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAttrPtrWrap(attr: xmlAttrPtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodePtrWrap(node: xmlNodePtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDocPtrWrap(doc: xmlDocPtr) -> *mut PyObject;
    #[no_mangle]
    fn libxml_charPtrConstWrap(str: *const std::os::raw::c_char) -> *mut PyObject;
    #[no_mangle]
    fn libxml_intWrap(val: std::os::raw::c_int) -> *mut PyObject;
    #[no_mangle]
    fn libxml_longWrap(val: std::os::raw::c_long) -> *mut PyObject;
    #[no_mangle]
    fn libxml_constxmlCharPtrWrap(str: *const xmlChar) -> *mut PyObject;
    #[no_mangle]
    fn libxml_charPtrWrap(str: *mut std::os::raw::c_char) -> *mut PyObject;
    /* Generated */
    #[no_mangle]
    fn libxml_docbDefaultSAXHandlerInit(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_DOCB_ENABLED) */
    #[no_mangle]
    fn libxml_htmlAutoCloseTag(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCreateFileParserCtxt(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCreateMemoryParserCtxt(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_htmlCtxtReadDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCtxtReadFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCtxtReadFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCtxtReadMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCtxtReset(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlCtxtUseOptions(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlDefaultSAXHandlerInit(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlDocContentDumpFormatOutput(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlDocContentDumpOutput(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlDocDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlFreeParserCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlGetMetaEncoding(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlHandleOmittedElem(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlInitAutoClose(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlIsAutoClosed(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlIsBooleanAttr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlIsScriptAttribute(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNewDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNewDocNoDtD(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNewParserCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNodeDumpFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNodeDumpFileFormat(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNodeDumpFormatOutput(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlNodeDumpOutput(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseCharRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseChunk(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_PUSH_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseDocument(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlParseFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlReadDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlReadFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlReadFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_htmlReadMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_htmlSaveFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlSaveFileEnc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlSaveFileFormat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_htmlSetMetaEncoding(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_namePop(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_namePush(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_nodePop(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_nodePush(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_valuePop(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogAdd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogRemove(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogResolve(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogResolvePublic(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogResolveSystem(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlACatalogResolveURI(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlAddChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddChildList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddDocEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddDtdEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddEncodingAlias(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddNextSibling(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlAddPrevSibling(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlAddSibling(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlBoolToText(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlBuildQName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlBuildRelativeURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlBuildURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlByteConsumed(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCanonicPath(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCatalogAdd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogCleanup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogConvert(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogGetPublic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogGetSystem(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogIsEmpty(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogRemove(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogResolve(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogResolvePublic(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogResolveSystem(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogResolveURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCatalogSetDebug(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCharStrdup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCharStrndup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCheckFilename(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCheckLanguageID(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCheckUTF8(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCheckVersion(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCleanupCharEncodingHandlers(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCleanupEncodingAliases(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCleanupGlobals(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCleanupInputCallbacks(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCleanupOutputCallbacks(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCleanupPredefinedEntities(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlClearParserCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlConvertSGMLCatalog(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCopyChar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyCharMultiByte(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCopyDtd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlCopyError(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyNamespace(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyNamespaceList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyNodeList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCopyPropList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateDocParserCtxt(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateEntityParserCtxt(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateFileParserCtxt(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateIntSubset(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateMemoryParserCtxt(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCreateURLParserCtxt(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtReadDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtReadFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtReadFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtReadMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtReset(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtResetPush(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlCtxtUseOptions(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDebugCheckDocument(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpAttr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpAttrList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpDTD(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpDocument(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpDocumentHead(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpEntities(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpNodeList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpOneNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDebugDumpString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDecodeEntities(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDefaultSAXHandlerInit(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDelEncodingAlias(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDictCleanup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDocCopyNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDocCopyNodeList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDocDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDocFormatDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlDocGetRootElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlDocSetRootElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlElemDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlEncodeEntities(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlEncodeEntitiesReentrant(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlEncodeSpecialChars(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetCode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetDomain(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetLevel(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetLine(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlErrorGetMessage(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFileMatch(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFirstElementChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlFreeCatalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlFreeDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeDtd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeNodeList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeNsList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeParserInputBuffer(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreePropList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlFreeURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetCompressMode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDocCompressMode(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDocEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDtdAttrDesc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDtdElementDesc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDtdEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDtdQAttrDesc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetDtdQElementDesc(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetEncodingAlias(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetID(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetIntSubset(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetLastChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetLastError(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetLineNo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetNoNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetNodePath(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlGetNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetParameterEntity(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetPredefinedEntity(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlGetProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlHandleEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlHasNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlHasProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIOFTPMatch(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_FTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlIOHTTPMatch(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlInitCharEncodingHandlers(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlInitGlobals(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlInitParser(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlInitParserCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlInitializeCatalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlInitializeDict(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlInitializePredefinedEntities(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlIsBaseChar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsBlank(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsBlankNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsChar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsCombining(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsDigit(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsExtender(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsID(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsIdeographic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsLetter(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsMixedElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsPubidChar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlIsXHTML(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlKeepBlanksDefault(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlLastElementChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLineNumbersDefault(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlLoadACatalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLoadCatalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLoadCatalogs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLoadSGMLSuperCatalog(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLsCountNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlLsOneNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNamespaceParseNCName(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNamespaceParseNSDef(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoFTPCleanup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_FTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoFTPInit(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_FTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoFTPProxy(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_FTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoFTPScanProxy(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_FTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoHTTPCleanup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoHTTPInit(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNanoHTTPScanProxy(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_HTTP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewCDataBlock(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewCatalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewCharRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewComment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocComment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocFragment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewDocNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocNodeEatName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocPI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocRawNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewDocText(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDocTextLen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewDtd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewGlobalNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewNodeEatName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewNsPropEatName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewPI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewParserCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewReference(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewText(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewTextChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewTextLen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNewTextReader(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewTextReaderFilename(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNewValidCtxt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNextChar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNextElementSibling(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeAddContent(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeAddContentLen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeDumpOutput(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeGetBase(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeGetContent(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeGetLang(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeGetSpacePreserve(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeIsText(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeListGetRawString(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeListGetString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeSetBase(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeSetContent(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNodeSetContentLen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeSetLang(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeSetName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNodeSetSpacePreserve(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlNormalizeURIPath(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlNormalizeWindowsPath(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlOutputBufferGetContent(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlOutputBufferWrite(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlOutputBufferWriteString(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseAttValue(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseAttributeListDecl(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseCDSect(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseCatalogFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_CATALOG_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseCharData(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseCharRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseChunk(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_PUSH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseComment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseContent(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseDTD(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseDocTypeDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseDocument(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseElementDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseEncName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseEncodingDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseEndTag(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseEntity(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseEntityDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseEntityRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseExtParsedEnt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseExternalSubset(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseMarkupDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseMisc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseNamespace(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseNmtoken(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseNotationDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParsePEReference(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParsePI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParsePITarget(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParsePubidLiteral(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseQuotedString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseReference(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseSDDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseStartTag(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParseSystemLiteral(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseTextDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseURIRaw(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseURIReference(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseVersionInfo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseVersionNum(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParseXMLDecl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserGetDirectory(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserGetDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserGetIsValid(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserGetWellFormed(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserHandlePEReference(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserHandleReference(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlParserInputBufferGrow(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserInputBufferPush(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserInputBufferRead(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserSetLineNumbers(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserSetLoadSubset(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserSetPedantic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserSetReplaceEntities(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlParserSetValidate(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlPathToURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlPedanticParserDefault(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlPopInput(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlPreviousElementSibling(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlPrintURI(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReadDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReadFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReadFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReadMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReaderForDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderForFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderForFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderForMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderNewDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderNewFd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderNewFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderNewMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderNewWalker(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReaderWalker(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlReconciliateNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRecoverDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRecoverFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRecoverMemory(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegFreeRegexp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegexpCompile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegexpExec(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegexpIsDeterminist(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegexpPrint(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegisterDefaultInputCallbacks(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlRegisterDefaultOutputCallbacks(self_0: *mut PyObject,
                                                args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRegisterHTTPPostCallbacks(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlRelaxNGCleanupTypes(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGDumpTree(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGFree(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGFreeParserCtxt(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGInitTypes(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGNewDocParserCtxt(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGNewMemParserCtxt(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGNewParserCtxt(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGNewValidCtxt(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGParse(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGValidateDoc(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGValidateFullElement(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGValidatePopElement(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGValidatePushCData(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxNGValidatePushElement(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRelaxParserSetFlag(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlRemoveID(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlRemoveProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlRemoveRef(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlReplaceNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlResetError(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlResetLastError(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSAXDefaultVersion(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSaveFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSaveFileEnc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSaveFormatFile(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSaveFormatFileEnc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSaveUri(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlScanName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaCleanupTypes(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaCollapseString(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaDump(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaFree(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaFreeParserCtxt(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaInitTypes(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaIsValid(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaNewDocParserCtxt(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaNewMemParserCtxt(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaNewParserCtxt(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaNewValidCtxt(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaParse(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaSetValidOptions(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidCtxtGetOptions(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidCtxtGetParserCtxt(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidateDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidateFile(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidateOneElement(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaValidateSetFilename(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSchemaWhiteSpaceReplace(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSearchNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSearchNsByHref(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetCompressMode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetDocCompressMode(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetListDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSetProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSetTreeDoc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSetupParserForBuffer(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_SAX1_ENABLED) */
    #[no_mangle]
    fn libxml_xmlShellPrintNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) && defined(LIBXML_XPATH_ENABLED) && defined(LIBXML_OUTPUT_ENABLED) */
    #[no_mangle]
    fn libxml_xmlShellPrintXPathError(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_DEBUG_ENABLED) && defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlSkipBlankChars(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStopParser(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrEqual(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrQEqual(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrcasecmp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrcasestr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrcat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrchr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrcmp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrdup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStringDecodeEntities(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStringGetNodeList(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStringLenDecodeEntities(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStringLenGetNodeList(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrlen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrncasecmp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrncat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrncatNew(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrncmp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrndup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrstr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlStrsub(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlSubstituteEntitiesDefault(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlTextConcat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlTextMerge(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlTextReaderAttributeCount(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderByteConsumed(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderClose(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstBaseUri(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstEncoding(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstLocalName(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstName(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstNamespaceUri(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstPrefix(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstString(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstValue(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstXmlLang(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderConstXmlVersion(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderCurrentDoc(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderCurrentNode(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderDepth(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderExpand(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetAttribute(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetAttributeNo(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetAttributeNs(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetParserColumnNumber(self_0: *mut PyObject,
                                                 args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetParserLineNumber(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetParserProp(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderGetRemainder(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderHasAttributes(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderHasValue(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderIsDefault(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderIsEmptyElement(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderIsNamespaceDecl(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderIsValid(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderLocatorBaseURI(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderLocatorLineNumber(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderLookupNamespace(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToAttribute(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToAttributeNo(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToAttributeNs(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToElement(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToFirstAttribute(self_0: *mut PyObject,
                                                args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderMoveToNextAttribute(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderNext(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderNextSibling(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderNodeType(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderNormalization(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderPreserve(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderQuoteChar(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderRead(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderReadAttributeValue(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderReadInnerXml(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_WRITER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderReadOuterXml(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_WRITER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderReadState(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderReadString(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderRelaxNGSetSchema(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderRelaxNGValidate(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderRelaxNGValidateCtxt(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderSchemaValidate(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderSchemaValidateCtxt(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderSetParserProp(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderSetSchema(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) && defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderSetup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlTextReaderStandalone(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_READER_ENABLED) */
    #[no_mangle]
    fn libxml_xmlThrDefDefaultBufferSize(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefDoValidityCheckingDefaultValue(self_0: *mut PyObject,
                                                      args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefGetWarningsDefaultValue(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefIndentTreeOutput(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefKeepBlanksDefaultValue(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefLineNumbersDefaultValue(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefLoadExtDtdDefaultValue(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefParserDebugEntities(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefPedanticParserDefaultValue(self_0: *mut PyObject,
                                                  args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefSaveNoEmptyTags(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefSubstituteEntitiesDefaultValue(self_0: *mut PyObject,
                                                      args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlThrDefTreeIndentString(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUCSIsAegeanNumbers(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsAlphabeticPresentationForms(self_0: *mut PyObject,
                                                  args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsArabic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsArabicPresentationFormsA(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsArabicPresentationFormsB(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsArmenian(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsArrows(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBasicLatin(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBengali(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBlock(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBlockElements(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBopomofo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBopomofoExtended(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBoxDrawing(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBraillePatterns(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsBuhid(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsByzantineMusicalSymbols(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKCompatibility(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKCompatibilityForms(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKCompatibilityIdeographs(self_0: *mut PyObject,
                                                 args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement(self_0:
                                                               *mut PyObject,
                                                           args:
                                                               *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKRadicalsSupplement(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKSymbolsandPunctuation(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKUnifiedIdeographs(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA(self_0: *mut PyObject,
                                                     args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB(self_0: *mut PyObject,
                                                     args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatC(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatCc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatCf(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatCo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatCs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatL(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatLl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatLm(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatLo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatLt(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatLu(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatM(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatMc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatMe(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatMn(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatN(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatNd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatNl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatNo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatP(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPe(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPf(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPi(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatPs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatS(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatSc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatSk(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatSm(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatSo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatZ(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatZl(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatZp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCatZs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCherokee(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCombiningDiacriticalMarks(self_0: *mut PyObject,
                                                args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols(self_0:
                                                              *mut PyObject,
                                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCombiningHalfMarks(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCombiningMarksforSymbols(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsControlPictures(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCurrencySymbols(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCypriotSyllabary(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCyrillic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsCyrillicSupplement(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsDeseret(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsDevanagari(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsDingbats(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsEnclosedAlphanumerics(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsEnclosedCJKLettersandMonths(self_0: *mut PyObject,
                                                  args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsEthiopic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGeneralPunctuation(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGeometricShapes(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGeorgian(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGothic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGreek(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGreekExtended(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGreekandCoptic(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGujarati(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsGurmukhi(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHalfwidthandFullwidthForms(self_0: *mut PyObject,
                                                 args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHangulCompatibilityJamo(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHangulJamo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHangulSyllables(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHanunoo(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHebrew(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHighPrivateUseSurrogates(self_0: *mut PyObject,
                                               args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHighSurrogates(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsHiragana(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsIPAExtensions(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsIdeographicDescriptionCharacters(self_0: *mut PyObject,
                                                       args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKanbun(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKangxiRadicals(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKannada(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKatakana(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKatakanaPhoneticExtensions(self_0: *mut PyObject,
                                                 args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKhmer(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsKhmerSymbols(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLao(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLatin1Supplement(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLatinExtendedA(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLatinExtendedAdditional(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLatinExtendedB(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLetterlikeSymbols(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLimbu(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLinearBIdeograms(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLinearBSyllabary(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsLowSurrogates(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMalayalam(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMathematicalAlphanumericSymbols(self_0: *mut PyObject,
                                                      args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMathematicalOperators(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA(self_0: *mut PyObject,
                                                        args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB(self_0: *mut PyObject,
                                                        args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMiscellaneousSymbols(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMiscellaneousSymbolsandArrows(self_0: *mut PyObject,
                                                    args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMiscellaneousTechnical(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMongolian(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMusicalSymbols(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsMyanmar(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsNumberForms(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsOgham(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsOldItalic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsOpticalCharacterRecognition(self_0: *mut PyObject,
                                                  args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsOriya(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsOsmanya(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsPhoneticExtensions(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsPrivateUse(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsPrivateUseArea(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsRunic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsShavian(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSinhala(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSmallFormVariants(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSpacingModifierLetters(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSpecials(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSuperscriptsandSubscripts(self_0: *mut PyObject,
                                                args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSupplementalArrowsA(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSupplementalArrowsB(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSupplementalMathematicalOperators(self_0: *mut PyObject,
                                                        args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSupplementaryPrivateUseAreaA(self_0: *mut PyObject,
                                                   args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSupplementaryPrivateUseAreaB(self_0: *mut PyObject,
                                                   args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsSyriac(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTagalog(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTagbanwa(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTags(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTaiLe(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTaiXuanJingSymbols(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTamil(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTelugu(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsThaana(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsThai(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsTibetan(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsUgaritic(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics(self_0:
                                                             *mut PyObject,
                                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsVariationSelectors(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsVariationSelectorsSupplement(self_0: *mut PyObject,
                                                   args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsYiRadicals(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsYiSyllables(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUCSIsYijingHexagramSymbols(self_0: *mut PyObject,
                                            args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_UNICODE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlURIEscape(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIEscapeStr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetAuthority(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetFragment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetOpaque(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetPath(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetPort(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetQuery(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetQueryRaw(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetScheme(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetServer(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIGetUser(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetAuthority(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetFragment(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetOpaque(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetPath(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetPort(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetQuery(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetQueryRaw(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetScheme(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetServer(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURISetUser(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlURIUnescapeString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Charcmp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Size(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strlen(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strloc(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strndup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strpos(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strsize(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUTF8Strsub(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUnlinkNode(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlUnsetNsProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlUnsetProp(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidCtxtNormalizeAttributeValue(self_0: *mut PyObject,
                                                  args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidNormalizeAttributeValue(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateDocument(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateDocumentFinal(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateDtd(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateDtdFinal(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateElement(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNCName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_DEBUG_ENABLED) || defined (LIBXML_HTML_ENABLED) || defined(LIBXML_SAX1_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_WRITER_ENABLED) || defined(LIBXML_DOCB_ENABLED) || defined(LIBXML_LEGACY_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNMToken(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNameValue(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNamesValue(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNmtokenValue(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNmtokensValue(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateNotationUse(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateOneAttribute(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateOneElement(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateOneNamespace(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidatePopElement(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) && defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidatePushCData(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) && defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidatePushElement(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) && defined(LIBXML_REGEXP_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateQName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlValidateRoot(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_VALID_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXIncludeProcess(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXIncludeProcessFlags(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXIncludeProcessTree(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXIncludeProcessTreeFlags(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XINCLUDE_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathAddValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathBooleanFunction(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastBooleanToNumber(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastBooleanToString(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastNodeToNumber(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastNodeToString(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastNumberToBoolean(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastNumberToString(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastStringToBoolean(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCastStringToNumber(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCeilingFunction(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCmpNodes(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCompareValues(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathConcatFunction(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathContainsFunction(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathContextSetCache(self_0: *mut PyObject,
                                      args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathCountFunction(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathDivValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathEqualValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathErr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathEval(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathEvalExpr(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathEvalExpression(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathFalseFunction(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathFloorFunction(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathFreeContext(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathFreeParserContext(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetContextDoc(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetContextNode(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetContextPosition(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetContextSize(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathGetFunctionURI(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathIdFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathInit(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathIsInf(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathIsNaN(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathIsNodeType(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathLangFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathLastFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathLocalNameFunction(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathModValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathMultValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNamespaceURIFunction(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewBoolean(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewCString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewContext(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewFloat(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewNodeSet(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewParserContext(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNewValueTree(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextAncestor(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextAncestorOrSelf(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextAttribute(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextChild(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextDescendant(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextDescendantOrSelf(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextFollowing(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextFollowingSibling(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextNamespace(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextParent(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextPreceding(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextPrecedingSibling(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNextSelf(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNodeEval(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNodeSetFreeNs(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNormalizeFunction(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNotEqualValues(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNotFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNsLookup(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathNumberFunction(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathOrderDocElems(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathParseNCName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathParseName(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathParserGetContext(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathPopBoolean(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathPopNumber(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathPopString(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathPositionFunction(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRegisterAllFunctions(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRegisterNs(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    #[no_mangle]
    fn libxml_xmlXPathRegisteredFuncsCleanup(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRegisteredNsCleanup(self_0: *mut PyObject,
                                          args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRegisteredVariablesCleanup(self_0: *mut PyObject,
                                                 args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRoot(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathRoundFunction(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSetContextDoc(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSetContextNode(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathStartsWithFunction(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathStringEvalNumber(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathStringFunction(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathStringLengthFunction(self_0: *mut PyObject,
                                           args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSubValues(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSubstringAfterFunction(self_0: *mut PyObject,
                                             args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSubstringBeforeFunction(self_0: *mut PyObject,
                                              args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSubstringFunction(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathSumFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathTranslateFunction(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathTrueFunction(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathValueFlipSign(self_0: *mut PyObject,
                                    args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathVariableLookup(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPathVariableLookupNS(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPatherror(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPATH_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrEval(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrEvalRangePredicate(self_0: *mut PyObject,
                                        args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrNewCollapsedRange(self_0: *mut PyObject,
                                       args: *mut PyObject) -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrNewContext(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrNewLocationSetNodes(self_0: *mut PyObject,
                                         args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrNewRange(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrNewRangeNodes(self_0: *mut PyObject, args: *mut PyObject)
     -> *mut PyObject;
    /* defined(LIBXML_XPTR_ENABLED) */
    #[no_mangle]
    fn libxml_xmlXPtrRangeToFunction(self_0: *mut PyObject,
                                     args: *mut PyObject) -> *mut PyObject;
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: std::os::raw::c_uint,
    pub fp_offset: std::os::raw::c_uint,
    pub overflow_arg_area: *mut std::os::raw::c_void,
    pub reg_save_area: *mut std::os::raw::c_void,
}
pub type size_t = std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __off_t = std::os::raw::c_long;
pub type __off64_t = std::os::raw::c_long;
pub type __ssize_t = std::os::raw::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: std::os::raw::c_int,
    pub _IO_read_ptr: *mut std::os::raw::c_char,
    pub _IO_read_end: *mut std::os::raw::c_char,
    pub _IO_read_base: *mut std::os::raw::c_char,
    pub _IO_write_base: *mut std::os::raw::c_char,
    pub _IO_write_ptr: *mut std::os::raw::c_char,
    pub _IO_write_end: *mut std::os::raw::c_char,
    pub _IO_buf_base: *mut std::os::raw::c_char,
    pub _IO_buf_end: *mut std::os::raw::c_char,
    pub _IO_save_base: *mut std::os::raw::c_char,
    pub _IO_backup_base: *mut std::os::raw::c_char,
    pub _IO_save_end: *mut std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: std::os::raw::c_int,
    pub _flags2: std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: std::os::raw::c_ushort,
    pub _vtable_offset: std::os::raw::c_schar,
    pub _shortbuf: [std::os::raw::c_char; 1],
    pub _lock: *mut std::os::raw::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: std::os::raw::c_int,
    pub _unused2: [std::os::raw::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
/* HAVE_UINTPTR_T */
/* Py_ssize_t is a signed integral type such that sizeof(Py_ssize_t) ==
 * sizeof(size_t).  C99 doesn't define such a thing directly (size_t is an
 * unsigned integral type).  See PEP 353 for details.
 */
pub type Py_ssize_t = ssize_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _typeobject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub tp_name: *const std::os::raw::c_char,
    pub tp_basicsize: Py_ssize_t,
    pub tp_itemsize: Py_ssize_t,
    pub tp_dealloc: destructor,
    pub tp_print: printfunc,
    pub tp_getattr: getattrfunc,
    pub tp_setattr: setattrfunc,
    pub tp_compare: cmpfunc,
    pub tp_repr: reprfunc,
    pub tp_as_number: *mut PyNumberMethods,
    pub tp_as_sequence: *mut PySequenceMethods,
    pub tp_as_mapping: *mut PyMappingMethods,
    pub tp_hash: hashfunc,
    pub tp_call: ternaryfunc,
    pub tp_str: reprfunc,
    pub tp_getattro: getattrofunc,
    pub tp_setattro: setattrofunc,
    pub tp_as_buffer: *mut PyBufferProcs,
    pub tp_flags: std::os::raw::c_long,
    pub tp_doc: *const std::os::raw::c_char,
    pub tp_traverse: traverseproc,
    pub tp_clear: inquiry,
    pub tp_richcompare: richcmpfunc,
    pub tp_weaklistoffset: Py_ssize_t,
    pub tp_iter: getiterfunc,
    pub tp_iternext: iternextfunc,
    pub tp_methods: *mut PyMethodDef,
    pub tp_members: *mut PyMemberDef,
    pub tp_getset: *mut PyGetSetDef,
    pub tp_base: *mut _typeobject,
    pub tp_dict: *mut PyObject,
    pub tp_descr_get: descrgetfunc,
    pub tp_descr_set: descrsetfunc,
    pub tp_dictoffset: Py_ssize_t,
    pub tp_init: initproc,
    pub tp_alloc: allocfunc,
    pub tp_new: newfunc,
    pub tp_free: freefunc,
    pub tp_is_gc: inquiry,
    pub tp_bases: *mut PyObject,
    pub tp_mro: *mut PyObject,
    pub tp_cache: *mut PyObject,
    pub tp_subclasses: *mut PyObject,
    pub tp_weaklist: *mut PyObject,
    pub tp_del: destructor,
    pub tp_version_tag: std::os::raw::c_uint,
}
pub type destructor = Option<unsafe extern "C" fn(_: *mut PyObject) -> ()>;
pub type PyObject = _object;
pub type inquiry
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> std::os::raw::c_int>;
pub type freefunc = Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type newfunc
    =
    Option<unsafe extern "C" fn(_: *mut _typeobject, _: *mut PyObject,
                                _: *mut PyObject) -> *mut PyObject>;
pub type allocfunc
    =
    Option<unsafe extern "C" fn(_: *mut _typeobject, _: Py_ssize_t)
               -> *mut PyObject>;
pub type initproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type descrsetfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type descrgetfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> *mut PyObject>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyGetSetDef {
    pub name: *mut std::os::raw::c_char,
    pub get: getter,
    pub set: setter,
    pub doc: *mut std::os::raw::c_char,
    pub closure: *mut std::os::raw::c_void,
}
pub type setter
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type getter
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut std::os::raw::c_void)
               -> *mut PyObject>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMethodDef {
    pub ml_name: *const std::os::raw::c_char,
    pub ml_meth: PyCFunction,
    pub ml_flags: std::os::raw::c_int,
    pub ml_doc: *const std::os::raw::c_char,
}
pub type PyCFunction
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject)
               -> *mut PyObject>;
pub type iternextfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> *mut PyObject>;
pub type getiterfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> *mut PyObject>;
pub type richcmpfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: std::os::raw::c_int) -> *mut PyObject>;
pub type traverseproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: visitproc,
                                _: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type visitproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut std::os::raw::c_void)
               -> std::os::raw::c_int>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyBufferProcs {
    pub bf_getreadbuffer: readbufferproc,
    pub bf_getwritebuffer: writebufferproc,
    pub bf_getsegcount: segcountproc,
    pub bf_getcharbuffer: charbufferproc,
    pub bf_getbuffer: getbufferproc,
    pub bf_releasebuffer: releasebufferproc,
}
pub type releasebufferproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut Py_buffer) -> ()>;
pub type Py_buffer = bufferinfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bufferinfo {
    pub buf: *mut std::os::raw::c_void,
    pub obj: *mut PyObject,
    pub len: Py_ssize_t,
    pub itemsize: Py_ssize_t,
    pub readonly: std::os::raw::c_int,
    pub ndim: std::os::raw::c_int,
    pub format: *mut std::os::raw::c_char,
    pub shape: *mut Py_ssize_t,
    pub strides: *mut Py_ssize_t,
    pub suboffsets: *mut Py_ssize_t,
    pub smalltable: [Py_ssize_t; 2],
    pub internal: *mut std::os::raw::c_void,
}
pub type getbufferproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut Py_buffer,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type charbufferproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: *mut *mut std::os::raw::c_char) -> Py_ssize_t>;
pub type segcountproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut Py_ssize_t)
               -> Py_ssize_t>;
pub type writebufferproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: *mut *mut std::os::raw::c_void) -> Py_ssize_t>;
pub type readbufferproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: *mut *mut std::os::raw::c_void) -> Py_ssize_t>;
pub type setattrofunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type getattrofunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject)
               -> *mut PyObject>;
pub type reprfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> *mut PyObject>;
pub type ternaryfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> *mut PyObject>;
pub type hashfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> std::os::raw::c_long>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMappingMethods {
    pub mp_length: lenfunc,
    pub mp_subscript: binaryfunc,
    pub mp_ass_subscript: objobjargproc,
}
pub type objobjargproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type binaryfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject)
               -> *mut PyObject>;
pub type lenfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> Py_ssize_t>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PySequenceMethods {
    pub sq_length: lenfunc,
    pub sq_concat: binaryfunc,
    pub sq_repeat: ssizeargfunc,
    pub sq_item: ssizeargfunc,
    pub sq_slice: ssizessizeargfunc,
    pub sq_ass_item: ssizeobjargproc,
    pub sq_ass_slice: ssizessizeobjargproc,
    pub sq_contains: objobjproc,
    pub sq_inplace_concat: binaryfunc,
    pub sq_inplace_repeat: ssizeargfunc,
}
pub type ssizeargfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t)
               -> *mut PyObject>;
pub type objobjproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject)
               -> std::os::raw::c_int>;
pub type ssizessizeobjargproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: Py_ssize_t, _: *mut PyObject)
               -> std::os::raw::c_int>;
pub type ssizeobjargproc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type ssizessizeargfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: Py_ssize_t,
                                _: Py_ssize_t) -> *mut PyObject>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyNumberMethods {
    pub nb_add: binaryfunc,
    pub nb_subtract: binaryfunc,
    pub nb_multiply: binaryfunc,
    pub nb_divide: binaryfunc,
    pub nb_remainder: binaryfunc,
    pub nb_divmod: binaryfunc,
    pub nb_power: ternaryfunc,
    pub nb_negative: unaryfunc,
    pub nb_positive: unaryfunc,
    pub nb_absolute: unaryfunc,
    pub nb_nonzero: inquiry,
    pub nb_invert: unaryfunc,
    pub nb_lshift: binaryfunc,
    pub nb_rshift: binaryfunc,
    pub nb_and: binaryfunc,
    pub nb_xor: binaryfunc,
    pub nb_or: binaryfunc,
    pub nb_coerce: coercion,
    pub nb_int: unaryfunc,
    pub nb_long: unaryfunc,
    pub nb_float: unaryfunc,
    pub nb_oct: unaryfunc,
    pub nb_hex: unaryfunc,
    pub nb_inplace_add: binaryfunc,
    pub nb_inplace_subtract: binaryfunc,
    pub nb_inplace_multiply: binaryfunc,
    pub nb_inplace_divide: binaryfunc,
    pub nb_inplace_remainder: binaryfunc,
    pub nb_inplace_power: ternaryfunc,
    pub nb_inplace_lshift: binaryfunc,
    pub nb_inplace_rshift: binaryfunc,
    pub nb_inplace_and: binaryfunc,
    pub nb_inplace_xor: binaryfunc,
    pub nb_inplace_or: binaryfunc,
    pub nb_floor_divide: binaryfunc,
    pub nb_true_divide: binaryfunc,
    pub nb_inplace_floor_divide: binaryfunc,
    pub nb_inplace_true_divide: binaryfunc,
    pub nb_index: unaryfunc,
}
pub type unaryfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject) -> *mut PyObject>;
pub type coercion
    =
    Option<unsafe extern "C" fn(_: *mut *mut PyObject, _: *mut *mut PyObject)
               -> std::os::raw::c_int>;
pub type cmpfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut PyObject)
               -> std::os::raw::c_int>;
pub type setattrfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut std::os::raw::c_char,
                                _: *mut PyObject) -> std::os::raw::c_int>;
pub type getattrfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut std::os::raw::c_char)
               -> *mut PyObject>;
pub type printfunc
    =
    Option<unsafe extern "C" fn(_: *mut PyObject, _: *mut FILE,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyVarObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
}
pub type PyTypeObject = _typeobject;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyTupleObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_item: [*mut PyObject; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyListObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_item: *mut *mut PyObject,
    pub allocated: Py_ssize_t,
}
/*
 * Summary: interface for the memory allocator
 * Description: provides interfaces for the memory allocator,
 *              including debugging capabilities.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * DEBUG_MEMORY:
 *
 * DEBUG_MEMORY replaces the allocator with a collect and debug
 * shell to the libc allocator.
 * DEBUG_MEMORY should only be activated when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/* #define DEBUG_MEMORY_FREED */
/* #define DEBUG_MEMORY_LOCATION */
/* *
 * DEBUG_MEMORY_LOCATION:
 *
 * DEBUG_MEMORY_LOCATION should be activated only when debugging
 * libxml i.e. if libxml has been configured with --with-debug-mem too.
 */
/*
 * The XML memory wrapper support 4 basic overloadable functions.
 */
/* *
 * xmlFreeFunc:
 * @mem: an already allocated block of memory
 *
 * Signature for a free() implementation.
 */
pub type xmlFreeFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
/* *
 * xmlMallocFunc:
 * @size:  the size requested in bytes
 *
 * Signature for a malloc() implementation.
 *
 * Returns a pointer to the newly allocated block or NULL in case of error.
 */
pub type xmlMallocFunc
    =
    Option<unsafe extern "C" fn(_: size_t) -> *mut std::os::raw::c_void>;
/* *
 * xmlReallocFunc:
 * @mem: an already allocated block of memory
 * @size:  the new size requested in bytes
 *
 * Signature for a realloc() implementation.
 *
 * Returns a pointer to the newly reallocated block or NULL in case of error.
 */
pub type xmlReallocFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: size_t)
               -> *mut std::os::raw::c_void>;
/* *
 * xmlStrdupFunc:
 * @str: a zero terminated string
 *
 * Signature for an strdup() implementation.
 *
 * Returns the copy of the string or NULL in case of error.
 */
pub type xmlStrdupFunc
    =
    Option<unsafe extern "C" fn(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_char>;
pub type xmlChar = std::os::raw::c_uchar;
/*
 * Summary: interface for the I/O interfaces used by the parser
 * Description: interface for the I/O interfaces used by the parser
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Those are the functions and datatypes for the parser input
 * I/O structures.
 */
/* *
 * xmlInputMatchCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Input API to detect if the current handler
 * can provide input fonctionnalities for this resource.
 *
 * Returns 1 if yes and 0 if another Input module should be used
 */
/* *
 * xmlInputOpenCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Input API to open the resource
 *
 * Returns an Input context or NULL in case or error
 */
/* *
 * xmlInputReadCallback:
 * @context:  an Input context
 * @buffer:  the buffer to store data read
 * @len:  the length of the buffer in bytes
 *
 * Callback used in the I/O Input API to read the resource
 *
 * Returns the number of bytes read or -1 in case of error
 */
/* *
 * xmlInputCloseCallback:
 * @context:  an Input context
 *
 * Callback used in the I/O Input API to close the resource
 *
 * Returns 0 or -1 in case of error
 */
/*
 * Those are the functions and datatypes for the library output
 * I/O structures.
 */
/* *
 * xmlOutputMatchCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Output API to detect if the current handler
 * can provide output fonctionnalities for this resource.
 *
 * Returns 1 if yes and 0 if another Output module should be used
 */
/* *
 * xmlOutputOpenCallback:
 * @filename: the filename or URI
 *
 * Callback used in the I/O Output API to open the resource
 *
 * Returns an Output context or NULL in case or error
 */
/* *
 * xmlOutputWriteCallback:
 * @context:  an Output context
 * @buffer:  the buffer of data to write
 * @len:  the length of the buffer in bytes
 *
 * Callback used in the I/O Output API to write to the resource
 *
 * Returns the number of bytes written or -1 in case of error
 */
/* *
 * xmlOutputCloseCallback:
 * @context:  an Output context
 *
 * Callback used in the I/O Output API to close the resource
 *
 * Returns 0 or -1 in case of error
 */
/* LIBXML_OUTPUT_ENABLED */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
    pub compressed: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
    pub rawconsumed: std::os::raw::c_ulong,
}
/* *
 * xmlBufPtr:
 *
 * A pointer to a buffer structure, the actual structure internals are not
 * public
 */
pub type xmlBufPtr = *mut xmlBuf;
/*
 * Summary: interfaces for tree manipulation
 * Description: this module describes the structures found in an tree resulting
 *              from an XML or HTML parsing, as well as the API provided for
 *              various processing on that tree
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Some of the basic types pointer to structures:
 */
/* xmlIO.h */
/* parser.h */
/* entities.h */
/* *
 * BASE_BUFFER_SIZE:
 *
 * default buffer size 4000.
 */
/* *
 * LIBXML_NAMESPACE_DICT:
 *
 * Defines experimental behaviour:
 * 1) xmlNs gets an additional field @context (a xmlDoc)
 * 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.
 */
/* #define LIBXML_NAMESPACE_DICT */
/* *
 * xmlBufferAllocationScheme:
 *
 * A buffer allocation scheme can be defined to either match exactly the
 * need or double it's allocated size each time it is found too small.
 */
/* double each time one need to grow */
/* grow only to the minimal size */
/* immutable buffer */
/* special allocation scheme used for I/O */
/* exact up to a threshold, and doubleit thereafter */
/* limit the upper size of the buffer */
/* *
 * xmlBuffer:
 *
 * A buffer structure, this old construct is limited to 2GB and
 * is being deprecated, use API with xmlBuf instead
 */
/* The buffer content UTF8 */
/* The buffer size used */
/* The buffer size */
/* The realloc method */
/* in IO mode we may have a different base */
/* *
 * xmlBuf:
 *
 * A buffer structure, new one, the actual structure internals are not public
 */
pub type xmlBuf = _xmlBuf;
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
/*
 * Summary: interface for the encoding conversion functions
 * Description: interface for the encoding conversion functions needed for
 *              XML basic encoding and iconv() support.
 *
 * Related specs are
 * rfc2044        (UTF-8 and UTF-16) F. Yergeau Alis Technologies
 * [ISO-10646]    UTF-8 and UTF-16 in Annexes
 * [ISO-8859-1]   ISO Latin-1 characters codes.
 * [UNICODE]      The Unicode Consortium, "The Unicode Standard --
 *                Worldwide Character Encoding -- Version 1.0", Addison-
 *                Wesley, Volume 1, 1991, Volume 2, 1992.  UTF-8 is
 *                described in Unicode Technical Report #4.
 * [US-ASCII]     Coded Character Set--7-bit American Standard Code for
 *                Information Interchange, ANSI X3.4-1986.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * xmlCharEncoding:
 *
 * Predefined values for some standard encodings.
 * Libxml does not do beforehand translation on UTF8 and ISOLatinX.
 * It also supports ASCII, ISO-8859-1, and UTF16 (LE and BE) by default.
 *
 * Anything else would have to be translated to UTF8 before being
 * given to the parser itself. The BOM for UTF16 and the encoding
 * declaration are looked at and a converter is looked for at that
 * point. If not found the parser stops here as asked by the XML REC. A
 * converter can be registered by the user using xmlRegisterCharEncodingHandler
 * but the current form doesn't allow stateful transcoding (a serious
 * problem agreed !). If iconv has been found it will be used
 * automatically and allow stateful transcoding, the simplest is then
 * to be sure to enable iconv and to provide iconv libs for the encoding
 * support needed.
 *
 * Note that the generic "UTF-16" is not a predefined value.  Instead, only
 * the specific UTF-16LE and UTF-16BE are present.
 */
/* No char encoding detected */
/* No char encoding detected */
/* UTF-8 */
/* UTF-16 little endian */
/* UTF-16 big endian */
/* UCS-4 little endian */
/* UCS-4 big endian */
/* EBCDIC uh! */
/* UCS-4 unusual ordering */
/* UCS-4 unusual ordering */
/* UCS-2 */
/* ISO-8859-1 ISO Latin 1 */
/* ISO-8859-2 ISO Latin 2 */
/* ISO-8859-3 */
/* ISO-8859-4 */
/* ISO-8859-5 */
/* ISO-8859-6 */
/* ISO-8859-7 */
/* ISO-8859-8 */
/* ISO-8859-9 */
/* ISO-2022-JP */
/* Shift_JIS */
/* EUC-JP */
/* pure ASCII */
/* *
 * xmlCharEncodingInputFunc:
 * @out:  a pointer to an array of bytes to store the UTF-8 result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of chars in the original encoding
 * @inlen:  the length of @in
 *
 * Take a block of chars in the original encoding and try to convert
 * it to an UTF-8 block of chars out.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets consumed.
 */
/* *
 * xmlCharEncodingOutputFunc:
 * @out:  a pointer to an array of bytes to store the result
 * @outlen:  the length of @out
 * @in:  a pointer to an array of UTF-8 chars
 * @inlen:  the length of @in
 *
 * Take a block of UTF-8 chars in and try to convert it to another
 * encoding.
 * Note: a first call designed to produce heading info is called with
 * in = NULL. If stateful this should also initialize the encoder state.
 *
 * Returns the number of bytes written, -1 if lack of space, or -2
 *     if the transcoding failed.
 * The value of @inlen after return is the number of octets consumed
 *     if the return value is positive, else unpredictiable.
 * The value of @outlen after return is the number of octets produced.
 */
/*
 * Block defining the handlers for non UTF-8 encodings.
 * If iconv is supported, there are two extra fields.
 */
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut std::os::raw::c_void;
pub type xmlCharEncodingOutputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlCharEncodingInputFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_uchar, _: *mut std::os::raw::c_int,
                                _: *const std::os::raw::c_uchar, _: *mut std::os::raw::c_int)
               -> std::os::raw::c_int>;
pub type xmlInputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlInputReadCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *mut std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
/* amount consumed from raw */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlOutputBuffer {
    pub context: *mut std::os::raw::c_void,
    pub writecallback: xmlOutputWriteCallback,
    pub closecallback: xmlOutputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub conv: xmlBufPtr,
    pub written: std::os::raw::c_int,
    pub error: std::os::raw::c_int,
}
pub type xmlOutputCloseCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type xmlOutputWriteCallback
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: std::os::raw::c_int) -> std::os::raw::c_int>;
pub type xmlOutputBuffer = _xmlOutputBuffer;
pub type xmlOutputBufferPtr = *mut xmlOutputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const std::os::raw::c_char,
    pub directory: *const std::os::raw::c_char,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
    pub length: std::os::raw::c_int,
    pub line: std::os::raw::c_int,
    pub col: std::os::raw::c_int,
    pub consumed: std::os::raw::c_ulong,
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub id: std::os::raw::c_int,
}
pub type xmlParserInputDeallocate
    =
    Option<unsafe extern "C" fn(_: *mut xmlChar) -> ()>;
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut std::os::raw::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: std::os::raw::c_int,
    pub replaceEntities: std::os::raw::c_int,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: std::os::raw::c_int,
    pub html: std::os::raw::c_int,
    pub input: xmlParserInputPtr,
    pub inputNr: std::os::raw::c_int,
    pub inputMax: std::os::raw::c_int,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: std::os::raw::c_int,
    pub node_seq: xmlParserNodeInfoSeq,
    pub errNo: std::os::raw::c_int,
    pub hasExternalSubset: std::os::raw::c_int,
    pub hasPErefs: std::os::raw::c_int,
    pub external: std::os::raw::c_int,
    pub valid: std::os::raw::c_int,
    pub validate: std::os::raw::c_int,
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: std::os::raw::c_int,
    pub directory: *mut std::os::raw::c_char,
    pub name: *const xmlChar,
    pub nameNr: std::os::raw::c_int,
    pub nameMax: std::os::raw::c_int,
    pub nameTab: *mut *const xmlChar,
    pub nbChars: std::os::raw::c_long,
    pub checkIndex: std::os::raw::c_long,
    pub keepBlanks: std::os::raw::c_int,
    pub disableSAX: std::os::raw::c_int,
    pub inSubset: std::os::raw::c_int,
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut std::os::raw::c_int,
    pub spaceNr: std::os::raw::c_int,
    pub spaceMax: std::os::raw::c_int,
    pub spaceTab: *mut std::os::raw::c_int,
    pub depth: std::os::raw::c_int,
    pub entity: xmlParserInputPtr,
    pub charset: std::os::raw::c_int,
    pub nodelen: std::os::raw::c_int,
    pub nodemem: std::os::raw::c_int,
    pub pedantic: std::os::raw::c_int,
    pub _private: *mut std::os::raw::c_void,
    pub loadsubset: std::os::raw::c_int,
    pub linenumbers: std::os::raw::c_int,
    pub catalogs: *mut std::os::raw::c_void,
    pub recovery: std::os::raw::c_int,
    pub progressive: std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: std::os::raw::c_int,
    pub docdict: std::os::raw::c_int,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: std::os::raw::c_int,
    pub nsNr: std::os::raw::c_int,
    pub nsMax: std::os::raw::c_int,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut std::os::raw::c_int,
    pub pushTab: *mut *mut std::os::raw::c_void,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
    pub nsWellFormed: std::os::raw::c_int,
    pub options: std::os::raw::c_int,
    pub dictNames: std::os::raw::c_int,
    pub freeElemsNr: std::os::raw::c_int,
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: std::os::raw::c_int,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: std::os::raw::c_ulong,
    pub sizeentities: std::os::raw::c_ulong,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: std::os::raw::c_int,
    pub nodeInfoMax: std::os::raw::c_int,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: std::os::raw::c_int,
    pub sizeentcopy: std::os::raw::c_ulong,
}
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
    pub begin_pos: std::os::raw::c_ulong,
    pub begin_line: std::os::raw::c_ulong,
    pub end_pos: std::os::raw::c_ulong,
    pub end_line: std::os::raw::c_ulong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut std::os::raw::c_void,
    pub line: std::os::raw::c_ushort,
    pub extra: std::os::raw::c_ushort,
}
/*
 * A few public routines for xmlBuf. As those are expected to be used
 * mostly internally the bulk of the routines are internal in buf.h
 */
/*
 * LIBXML2_NEW_BUFFER:
 *
 * Macro used to express that the API use the new buffers for
 * xmlParserInputBuffer and xmlOutputBuffer. The change was
 * introduced in 2.9.0.
 */
/* *
 * XML_XML_NAMESPACE:
 *
 * This is the namespace for the special xml: prefix predefined in the
 * XML Namespace specification.
 */
/* *
 * XML_XML_ID:
 *
 * This is the name for the special xml:id attribute
 */
/*
 * The different element types carried by an XML tree.
 *
 * NOTE: This is synchronized with DOM Level1 values
 *       See http://www.w3.org/TR/REC-DOM-Level-1/
 *
 * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should
 * be deprecated to use an XML_DTD_NODE.
 */
/* *
 * xmlNotation:
 *
 * A DTD Notation definition.
 */
/* Notation name */
/* Public identifier, if any */
/* System identifier, if any */
/* *
 * xmlAttributeType:
 *
 * A DTD Attribute type definition.
 */
/* *
 * xmlAttributeDefault:
 *
 * A DTD Attribute default definition.
 */
/* *
 * xmlEnumeration:
 *
 * List structure used when there is an enumeration in DTDs.
 */
/* next one */
/* Enumeration name */
/* *
 * xmlAttribute:
 *
 * An Attribute declaration in a DTD.
 */
/* application data */
/* XML_ATTRIBUTE_DECL, must be second ! */
/* Attribute name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* next in hash table */
/* The attribute type */
/* the default */
/* or the default value */
/* or the enumeration tree if any */
/* the namespace prefix if any */
/* Element holding the attribute */
/* *
 * xmlElementContentType:
 *
 * Possible definitions of element content types.
 */
/* *
 * xmlElementContentOccur:
 *
 * Possible definitions of element content occurrences.
 */
/* *
 * xmlElementContent:
 *
 * An XML Element content as stored after parsing an element definition
 * in a DTD.
 */
/* PCDATA, ELEMENT, SEQ or OR */
/* ONCE, OPT, MULT or PLUS */
/* Element name */
/* first child */
/* second child */
/* parent */
/* Namespace prefix */
/* *
 * xmlElementTypeVal:
 *
 * The different possibilities for an element content type.
 */
/* *
 * xmlElement:
 *
 * An XML Element declaration from a DTD.
 */
/* application data */
/* XML_ELEMENT_DECL, must be second ! */
/* Element name */
/* NULL */
/* NULL */
/* -> DTD */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* The type */
/* the allowed element content */
/* List of the declared attributes */
/* the namespace prefix if any */
/* the validating regexp */
/* *
 * XML_LOCAL_NAMESPACE:
 *
 * A namespace declaration node.
 */
/* *
 * xmlNs:
 *
 * An XML namespace.
 * Note that prefix == NULL is valid, it defines the default namespace
 * within the subtree (until overridden).
 *
 * xmlNsType is unified with xmlElementType.
 */
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *mut std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: std::os::raw::c_int,
    pub standalone: std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut std::os::raw::c_void,
    pub refs: *mut std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut std::os::raw::c_void,
    pub parseFlags: std::os::raw::c_int,
    pub properties: std::os::raw::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut std::os::raw::c_void,
    pub elements: *mut std::os::raw::c_void,
    pub attributes: *mut std::os::raw::c_void,
    pub entities: *mut std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut std::os::raw::c_void,
}
pub type xmlElementType = std::os::raw::c_uint;
pub const XML_DOCB_DOCUMENT_NODE: xmlElementType = 21;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
pub type xmlNsType = xmlElementType;
/* normally an xmlDoc */
/* *
 * xmlDtd:
 *
 * An XML DTD, as defined by <!DOCTYPE ... There is actually one for
 * the internal subset and for the external subset.
 */
/* application data */
/* XML_DTD_NODE, must be second ! */
/* Name of the DTD */
/* the value of the property link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* Hash table for notations if any */
/* Hash table for elements if any */
/* Hash table for attributes if any */
/* Hash table for entities if any */
/* External identifier for PUBLIC DTD */
/* URI for a SYSTEM or PUBLIC DTD */
/* Hash table for param entities if any */
/* *
 * xmlAttr:
 *
 * An attribute on an XML node.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut std::os::raw::c_void,
}
pub type xmlAttributeType = std::os::raw::c_uint;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlParserMode = std::os::raw::c_uint;
pub const XML_PARSE_READER: xmlParserMode = 5;
pub const XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const XML_PARSE_SAX: xmlParserMode = 2;
pub const XML_PARSE_DOM: xmlParserMode = 1;
pub const XML_PARSE_UNKNOWN: xmlParserMode = 0;
/*
 * Summary: error handling
 * Description: the API used to report errors
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlErrorLevel:
 *
 * Indicates the level of an error
 */
/* A simple warning */
/* A recoverable error */
/* A fatal error */
/* *
 * xmlErrorDomain:
 *
 * Indicates where an error may have come from
 */
/* The XML parser */
/* The tree module */
/* The XML Namespace module */
/* The XML DTD validation with parser context*/
/* The HTML parser */
/* The memory allocator */
/* The serialization code */
/* The Input/Output stack */
/* The FTP module */
/* The HTTP module */
/* The XInclude processing */
/* The XPath module */
/* The XPointer module */
/* The regular expressions module */
/* The W3C XML Schemas Datatype module */
/* The W3C XML Schemas parser module */
/* The W3C XML Schemas validation module */
/* The Relax-NG parser module */
/* The Relax-NG validator module */
/* The Catalog module */
/* The Canonicalization module */
/* The XSLT engine from libxslt */
/* The XML DTD validation with valid context */
/* The error checking module */
/* The xmlwriter module */
/* The dynamically loaded module module*/
/* The module handling character conversion */
/* The Schematron validator module */
/* The buffers module */
/* The URI module */
/* *
 * xmlError:
 *
 * An XML Error instance.
 */
pub type xmlError = _xmlError;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlError {
    pub domain: std::os::raw::c_int,
    pub code: std::os::raw::c_int,
    pub message: *mut std::os::raw::c_char,
    pub level: xmlErrorLevel,
    pub file: *mut std::os::raw::c_char,
    pub line: std::os::raw::c_int,
    pub str1: *mut std::os::raw::c_char,
    pub str2: *mut std::os::raw::c_char,
    pub str3: *mut std::os::raw::c_char,
    pub int1: std::os::raw::c_int,
    pub int2: std::os::raw::c_int,
    pub ctxt: *mut std::os::raw::c_void,
    pub node: *mut std::os::raw::c_void,
}
pub type xmlErrorLevel = std::os::raw::c_uint;
pub const XML_ERR_FATAL: xmlErrorLevel = 3;
pub const XML_ERR_ERROR: xmlErrorLevel = 2;
pub const XML_ERR_WARNING: xmlErrorLevel = 1;
pub const XML_ERR_NONE: xmlErrorLevel = 0;
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
/* for type/PSVI informations */
/* *
 * xmlID:
 *
 * An XML ID instance.
 */
/* next ID */
/* The ID name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* The document holding the ID */
/* *
 * xmlRef:
 *
 * An XML IDREF instance.
 */
/* next Ref */
/* The Ref name */
/* The attribute holding it */
/* The attribute if attr is not available */
/* The line number if attr is not available */
/* *
 * xmlNode:
 *
 * A node in an XML tree.
 */
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
/*
 * Summary: Chained hash tables
 * Description: This module implements the hash table support used in
 *		various places in the library.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Bjorn Reese <bjorn.reese@systematic.dk>
 */
/*
 * The hash table.
 */
pub type xmlHashTablePtr = *mut xmlHashTable;
pub type xmlHashTable = _xmlHashTable;
pub type xmlDictPtr = *mut xmlDict;
pub type xmlDict = _xmlDict;
pub type xmlParserInputState = std::os::raw::c_int;
pub const XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const XML_PARSER_DTD: xmlParserInputState = 3;
pub const XML_PARSER_PI: xmlParserInputState = 2;
pub const XML_PARSER_MISC: xmlParserInputState = 1;
pub const XML_PARSER_START: xmlParserInputState = 0;
pub const XML_PARSER_EOF: xmlParserInputState = -1;
/*
 * Summary: The DTD validation
 * Description: API for the DTD handling and the validity checking
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * Validation state added for non-determinist content model.
 */
/* *
 * xmlValidityErrorFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity error is found. This is a message
 * oriented function similar to an *printf function.
 */
/* *
 * xmlValidityWarningFunc:
 * @ctx:  usually an xmlValidCtxtPtr to a validity error context,
 *        but comes from ctxt->userData (which normally contains such
 *        a pointer); ctxt->userData can be changed by the user.
 * @msg:  the string to format *printf like vararg
 * @...:  remaining arguments to the format
 *
 * Callback called when a validity warning is found. This is a message
 * oriented function similar to an *printf function.
 */
/*
 * xmlValidCtxt:
 * An xmlValidCtxt is used for error reporting when validating.
 */
pub type xmlValidCtxt = _xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: *mut std::os::raw::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub finishDtd: std::os::raw::c_uint,
    pub doc: xmlDocPtr,
    pub valid: std::os::raw::c_int,
    pub vstate: *mut xmlValidState,
    pub vstateNr: std::os::raw::c_int,
    pub vstateMax: std::os::raw::c_int,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
/*
 * Summary: API to build regexp automata
 * Description: the API to build regexp automata
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* *
 * xmlAutomataPtr:
 *
 * A libxml automata description, It can be compiled into a regexp
 */
/* *
 * xmlAutomataStatePtr:
 *
 * A state int the automata description,
 */
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
pub type xmlAutomataState = _xmlAutomataState;
pub type xmlAutomataPtr = *mut xmlAutomata;
pub type xmlAutomata = _xmlAutomata;
pub type xmlValidState = _xmlValidState;
/* application data */
/* type number, must be second ! */
/* the name of the node, or the entity */
/* parent->childs link */
/* last child link */
/* child->parent link */
/* next sibling link  */
/* previous sibling link  */
/* the containing document */
/* End of common part */
/* pointer to the associated namespace */
/* the content */
/* properties list */
/* namespace definitions on this node */
/* for type/PSVI informations */
/* line number */
/* extra data for XPath/XSLT */
/* *
 * XML_GET_CONTENT:
 *
 * Macro to extract the content pointer of a node.
 */
/* *
 * XML_GET_LINE:
 *
 * Macro to extract the line number of an element node.
 */
/* *
 * xmlDocProperty
 *
 * Set of properties of the document as found by the parser
 * Some of them are linked to similary named xmlParserOption
 */
/* document is XML well formed */
/* document is Namespace valid */
/* parsed with old XML-1.0 parser */
/* DTD validation was successful */
/* XInclude substitution was done */
/* Document was built using the API
                                           and not by parsing an instance */
/* built for internal processing */
/* parsed or built HTML document */
/* *
 * xmlDoc:
 *
 * An XML document.
 */
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
pub type xmlValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: std::os::raw::c_ulong,
    pub length: std::os::raw::c_ulong,
    pub buffer: *mut xmlParserNodeInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: std::os::raw::c_uint,
    pub _private: *mut std::os::raw::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
/* the node in the tree */
/* *
 * xmlParserError:
 *
 * This is an error that the XML (or HTML) parser can generate
 */
/* 1 */
/* 2 */
/* 3 */
/* 4 */
/* 5 */
/* 6 */
/* 7 */
/* 8 */
/* 9 */
/* 10 */
/* 11 */
/* 12 */
/* 13 */
/* 14 */
/* 15 */
/* 16 */
/* 17 */
/* 18 */
/* 19 */
/* 20 */
/* 21 */
/* 22 */
/* 23 */
/* 24 */
/* 25 */
/* 26 */
/* 27 */
/* 28 */
/* 29 */
/* 30 */
/* 31 */
/* 32 */
/* 33 */
/* 34 */
/* 35 */
/* 36 */
/* 37 */
/* 38 */
/* 39 */
/* 40 */
/* 41 */
/* 42 */
/* 43 */
/* 44 */
/* 45 */
/* 46 */
/* 47 */
/* 48 */
/* 49 */
/* 50 */
/* 51 */
/* 52 */
/* 53 */
/* 54 */
/* 55 */
/* 56 */
/* 57 */
/* 58 */
/* 59 */
/* 60 */
/* 61 */
/* 62 */
/* 63 */
/* 64 */
/* 65 */
/* 66 */
/* 67 */
/* 68 */
/* 69 */
/* 70 */
/* 71 */
/* 72 */
/* 73 */
/* 74 */
/* 75 */
/* 76 */
/* 77 */
/* 78 */
/* 79 */
/* 80 */
/* 81 */
/* 82 */
/* 83 */
/* 84 */
/* 85 */
/* 86 */
/* 87 */
/* 88 */
/* 89 */
/* 90 */
/* 91 */
/* 92 */
/* 93 */
/* 94 */
/* 95 */
/* 96 */
/* 97 */
/* 98 */
/* 99 */
/* 100 */
/* 101 */
/* 102 */
/* 103 */
/* 104 */
/* 105 */
/* 106 */
/* 107 */
/* 108 */
/* 109 */
/* 110 */
/* 111 */
/* 201 */
/* 202 */
/* 203 */
/* 204 */
/* 205 */
/* 501 */
/* 502 */
/* 503 */
/* 504 */
/* 505 */
/* 506 */
/* 507 */
/* 508 */
/* 509 */
/* 510 */
/* 511 */
/* 512 */
/* 513 */
/* 514 */
/* 515 */
/* 516 */
/* 517 */
/* 518 */
/* 519 */
/* 520 */
/* 521 */
/* 522 */
/* 523 */
/* 524 */
/* 525 */
/* 526 */
/* 527 */
/* 528 */
/* 529 */
/* 530 */
/* 531 */
/* 532 */
/* 533 */
/* 534 */
/* 535 */
/* 536 */
/* 537 */
/* 538 */
/* 539 */
/* 540 */
/* 541 */
/* 801 */
/* 1001 */
/* 1002 */
/* 1003 */
/* 1004 */
/* 1005 */
/* 1006 */
/* 1007 */
/* 1008 */
/* 1009 */
/* 1010 */
/* 1011 */
/* 1012 */
/* 1013 */
/* 1014 */
/* 1015 */
/* 1016 */
/* 1017 */
/* 1018 */
/* 1019 */
/* 1020 */
/* 1021 */
/* 1022 */
/* 1023 */
/* 1024 */
/* 1025 */
/* 1026 */
/* 1027 */
/* 1028 */
/* 1029 */
/* 1030 */
/* 1031 */
/* 1032 */
/* 1033 */
/* 1034 */
/* 1035 */
/* 1036 */
/* 1037 */
/* 1038 */
/* 1039 */
/* 1040 */
/* 1041 */
/* 1042 */
/* 1043 */
/* 1044 */
/* 1045 */
/* 1046 */
/* 1047 */
/* 1048 */
/* 1049 */
/* 1050 */
/* 1051 */
/* 1052 */
/* 1053 */
/* 1054 */
/* 1055 */
/* 1056 */
/* 1057 */
/* 1058 */
/* 1059 */
/* 1060 */
/* 1061 */
/* 1062 */
/* 1063 */
/* 1064 */
/* 1065 */
/* 1066 */
/* 1067 */
/* 1068 */
/* 1069 */
/* 1070 */
/* 1071 */
/* 1072 */
/* 1073 */
/* 1074 */
/* 1075 */
/* 1076 */
/* 1077 */
/* 1078 */
/* 1079 */
/* 1080 */
/* 1081 */
/* 1082 */
/* 1083 */
/* 1084 */
/* 1085 */
/* 1086 */
/* 1087 */
/* 1088 */
/* 1089 */
/* 1090 */
/* 1091 */
/* 1092 */
/* 1093 */
/* 1094 */
/* 1095 */
/* 1096 */
/* 1097 */
/* 1098 */
/* 1099 */
/* 1100 */
/* 1101 */
/* 1102 */
/* 1103 */
/* 1104 */
/* 1105 */
/* 1106 */
/* 1107 */
/* 1108 */
/* 1109 */
/* 1110 */
/* 1111 */
/* 1112 */
/* 1113 */
/* 1114 */
/* 1115 */
/* 1116 */
/* 1117 */
/* 1118 */
/* 1119 */
/* 1120 */
/* 1121 */
/* 1122 */
/* 1201 */
/* 1202 */
/* 1203 */
/* 1204 */
/* 1205 */
/* 1206 */
/* 1207 */
/* 1208 */
/* 1209 */
/* 1210 */
/* 1211 */
/* 1212 */
/* 1213 */
/* 1214 */
/* 1215 */
/* 1216 */
/* 1217 */
/* 1218 */
/* 1219 */
/* 1220 */
/* 1221 */
/* 1301 */
/* 1302 */
/* 1303 */
/* 1401 */
/* 1402 */
/* 1403 */
/* 1501 */
/* 1502 */
/* 1503 */
/* 1504 */
/* 1505 */
/* 1506 */
/* 1507 */
/* 1508 */
/* 1509 */
/* 1510 */
/* 1511 */
/* 1512 */
/* 1513 */
/* 1514 */
/* 1515 */
/* 1516 */
/* 1517 */
/* 1518 */
/* 1519 */
/* 1520 */
/* 1521 */
/* 1522 */
/* 1523 */
/* 1524 */
/* 1525 */
/* 1526 */
/* 1527 */
/* 1528 */
/* 1529 */
/* 1530 */
/* 1531 */
/* 1532 */
/* 1533 */
/* 1534 */
/* 1535 */
/* 1536 */
/* 1537 */
/* 1538 */
/* 1539 */
/* 1540 */
/* 1541 */
/* 1542 */
/* 1543 */
/* 1544 */
/* 1545 */
/* 1546 */
/* 1547 */
/* 1548 */
/* 1549 */
/* 1550 */
/* 1551 */
/* 1552 */
/* 1553 */
/* 1554 */
/* 1555 */
/* 1556 */
/* 1601 */
/* 1602 */
/* 1603 */
/* 1604 */
/* 1605 */
/* 1606 */
/* 1607 */
/* 1608 */
/* 1609 */
/* 1610 */
/* 1611 */
/* 1612 */
/* 1613 */
/* 1614 */
/* 1615 */
/* 1616 */
/* 1617 */
/* 1618 */
/* 1651 */
/* 1652 */
/* 1653 */
/* 1654 */
/* 1701 */
/* 1702 */
/* 1703 */
/* 1704 */
/* 1705 */
/* 1706 */
/* 1707 */
/* 1708 */
/* 1709 */
/* 1710 */
/* 1711 */
/* 1712 */
/* 1713 */
/* 1714 */
/* 1715 */
/* 1716 */
/* 1717 */
/* 1718 */
/* 1719 */
/* 1720 */
/* 1721 */
/* 1722 */
/* 1723 */
/* 1724 */
/* 1725 */
/* 1726 */
/* 1727 */
/* 1728 */
/* 1729 */
/* 1730 */
/* 1731 */
/* 1732 */
/* 1733 */
/* 1734 */
/* 1735 */
/* 1736 */
/* 1737 */
/* 1738 */
/* 1739 */
/* 1740 */
/* 1741 */
/* 1742 */
/* 1743 */
/* 1744 */
/* 1745 */
/* 1746 */
/* 1747 */
/* 1748 */
/* 1749 */
/* 1750 */
/* 1751 */
/* 1752 */
/* 1753 */
/* 1754 */
/* 1755 */
/* 1756 */
/* 1757 */
/* 1758 */
/* 1759 */
/* 1760 */
/* 1761 */
/* 1762 */
/* 1763 */
/* 1764 */
/* 1765 */
/* 1766 */
/* 1767 */
/* 1768 */
/* 1769 */
/* 1770 */
/* 1771 */
/* 1772 */
/* 1773 */
/* 1774 */
/* 1775 */
/* 1776 */
/* 1777 */
/* 1778 */
/* 1779 */
/* 1780 */
/* 1781 */
/* 1782 */
/* 1783 */
/* 1784 */
/* 1785 */
/* 1786 */
/* 1787 */
/* 1788 */
/* 1789 */
/* 1790 */
/* 1791 */
/* 1792 */
/* 1793 */
/* 1794 */
/* 1795 */
/* 1796 */
/* 1797 */
/* 1798 */
/* 1799 */
/* 1800 */
/* 1802 */
/* 1803 */
/* 1804 */
/* 1805 */
/* 1806 */
/* 1807 */
/* 1808 */
/* 1809 */
/* 1810 */
/* 1811 */
/* 1812 */
/* 1813 */
/* 1814 */
/* 1815 */
/* 1816 */
/* 1817 */
/* 1818 */
/* 1819 */
/* 1820 */
/* 1821 */
/* 1822 */
/* 1823 */
/* 1824 */
/* 1825 */
/* 1826 */
/* 1827 */
/* 1828 */
/* 1829 */
/* 1830 */
/* 1831 */
/* 1832 */
/* 1833 */
/* 1834 */
/* 1835 */
/* 1836 */
/* 1837 */
/* 1838 */
/* 1839 */
/* 1840 */
/* 1841 */
/* 1842 */
/* 1843 */
/* 1844 */
/* 1845 */
/* 1846 */
/* 1847 */
/* 1848 */
/* 1849 */
/* 1850 */
/* 1851 */
/* 1852 */
/* 1853 */
/* 1854 */
/* 1855 */
/* 1856 */
/* 1857 */
/* 1858 */
/* 1859 */
/* 1860 */
/* 1861 */
/* 1862 */
/* 1863 */
/* 1864 */
/* 1865 */
/* 1866 */
/* 1867 */
/* 1868 */
/* 1869 */
/* 1870 */
/* 1871 */
/* 1872 */
/* 1873 */
/* 1874 */
/* 1875 */
/* 1876 */
/* 1877 */
/* 1878 */
/* 1879 */
/* 1901 */
/* 1902 */
/* 1903 */
/* 1951 */
/* 1952 */
/* 1953 */
/* 1954 */
/* 1955 */
/* 2001 */
/* 2002 */
/* 2003 */
/* 2021 */
/* 2022 */
/* 3001 */
/* 3002 */
/* 3003 */
/* 3004 */
/* 3005 */
/* 3006 */
/* 3007 */
/* 3008 */
/* 3009 */
/* 3010 */
/* 3011 */
/* 3012 */
/* 3013 */
/* 3014 */
/* 3015 */
/* 3016 */
/* 3017 */
/* 3018 */
/* 3019 */
/* 3020 */
/* 3021 */
/* 3022 */
/* 3023 */
/* 3024 */
/* 3025 */
/* 3026 */
/* 3027 */
/* 3028 */
/* 3029 */
/* 3030 */
/* 3031 */
/* 3032 */
/* 3033 */
/* 3034 */
/* 3035 */
/* 3036 */
/* 3037 */
/* 3038 */
/* 3039 */
/* 3040 */
/* 3041 */
/* 3042 */
/* 3043 */
/* 3044 */
/* 3045 */
/* 3046 */
/* 3047 */
/* 3048 */
/* 3049 */
/* 3050 */
/* 3051 */
/* 3052 */
/* 3053 */
/* 3054 */
/* 3055 */
/* 3056 */
/* 3057 */
/* 3058 */
/* 3059 */
/* 3060 */
/* 3061 */
/* 3062 */
/* 3063 */
/* 3064 */
/* 3065 */
/* 3066 */
/* 3067 */
/* 3068 */
/* 3069 non-W3C */
/* 3070 non-W3C */
/* 3071 */
/* 3072 */
/* 3073 */
/* 3074 */
/* 3075 */
/* 3076 */
/* 3077 */
/* 3078 */
/* 3079 */
/* 3080 */
/* 3081 */
/* 3082 */
/* 3083 */
/* 3084 */
/* 3085 */
/* 3085 */
/* 3086 */
/* 3087 */
/* 3088 */
/* 3089 */
/* 3090 */
/* 4000 */
/* 4900 */
/* 4901 */
/* 5001 */
/* 5002 */
/* 5003 */
/* 5004 */
/* 5005 */
/* 5006 */
/* 5007 */
/* 5008 */
/* 5009 */
/* 5010 */
/* 5011 */
/* 5012 */
/* 5013 */
/* 5014 */
/* 5015 */
/* 5016 */
/* 5017 */
/* 5018 */
/* 5019 */
/* 5020 */
/* 5021 */
/* 5022 */
/* 5023 */
/* 5024 */
/* 5025 */
/* 5026 */
/* 5027 */
/* 5028 */
/* 5029 */
/* 5030 */
/* 5031 */
/* 5032 */
/* 5033 */
/* 5034 */
/* 5035 */
/* 5036 */
/* 5037 */
/* 6001 */
/* 6002 */
/* 6003 */
/* 6004 */
/* *
 * xmlGenericErrorFunc:
 * @ctx:  a parsing context
 * @msg:  the message
 * @...:  the extra arguments of the varags to format the message
 *
 * Signature of the function to use when there is an error and
 * no parsing or validity context available .
 */
/* *
 * xmlStructuredErrorFunc:
 * @userData:  user provided data for the error callback
 * @error:  the error being raised.
 *
 * Signature of the function to use when there is an error and
 * the module handles the new error reporting mechanism.
 */
pub type xmlStructuredErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlErrorPtr) -> ()>;
pub type xmlErrorPtr = *mut xmlError;
pub type endElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type startElementNsSAX2Func
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *mut *const xmlChar,
                                _: std::os::raw::c_int, _: std::os::raw::c_int,
                                _: *mut *const xmlChar) -> ()>;
pub type externalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type cdataBlockSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type getParameterEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
/*
 * Summary: interface for the XML entities handling
 * Description: this module provides some of the entity API needed
 *              for the parser and applications.
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/*
 * The different valid entity types.
 */
/*
 * An unit of storage for an entity, contains the string, the value
 * and the linkind data needed for the linking in the hash table.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut std::os::raw::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: std::os::raw::c_int,
    pub checked: std::os::raw::c_int,
}
pub type xmlEntityType = std::os::raw::c_uint;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub type fatalErrorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type errorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type warningSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type commentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type processingInstructionSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type ignorableWhitespaceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type charactersSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int) -> ()>;
pub type referenceSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type endElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> ()>;
pub type startElementSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *mut *const xmlChar) -> ()>;
pub type endDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type startDocumentSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>;
pub type setDocumentLocatorSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: xmlSAXLocatorPtr)
               -> ()>;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlSAXLocator = _xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getSystemId: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                -> *const xmlChar>,
    pub getLineNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                  -> std::os::raw::c_int>,
    pub getColumnNumber: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                    -> std::os::raw::c_int>,
}
pub type unparsedEntityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar,
                                _: *const xmlChar) -> ()>;
pub type elementDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: xmlElementContentPtr)
               -> ()>;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
pub type xmlElementContentOccur = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = std::os::raw::c_uint;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub type attributeDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: std::os::raw::c_int,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: xmlEnumerationPtr) -> ()>;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type notationDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type entityDeclSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: std::os::raw::c_int, _: *const xmlChar,
                                _: *const xmlChar, _: *mut xmlChar) -> ()>;
pub type getEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar)
               -> xmlEntityPtr>;
pub type resolveEntitySAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlParserInputPtr>;
pub type hasExternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type hasInternalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type isStandaloneSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int>;
pub type internalSubsetSAXFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar, _: *const xmlChar) -> ()>;
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
pub type xmlSAXHandler = _xmlSAXHandler;
pub type xmlSAXHandlerPtr = *mut xmlSAXHandler;
pub type xmlBufferAllocationScheme = std::os::raw::c_uint;
pub const XML_BUFFER_ALLOC_BOUNDED: xmlBufferAllocationScheme = 5;
pub const XML_BUFFER_ALLOC_HYBRID: xmlBufferAllocationScheme = 4;
pub const XML_BUFFER_ALLOC_IO: xmlBufferAllocationScheme = 3;
pub const XML_BUFFER_ALLOC_IMMUTABLE: xmlBufferAllocationScheme = 2;
pub const XML_BUFFER_ALLOC_EXACT: xmlBufferAllocationScheme = 1;
pub const XML_BUFFER_ALLOC_DOUBLEIT: xmlBufferAllocationScheme = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlBuffer {
    pub content: *mut xmlChar,
    pub use_0: std::os::raw::c_uint,
    pub size: std::os::raw::c_uint,
    pub alloc: xmlBufferAllocationScheme,
    pub contentIO: *mut xmlChar,
}
pub type xmlBuffer = _xmlBuffer;
pub type xmlBufferPtr = *mut xmlBuffer;
pub type xmlNsPtr = *mut xmlNs;
pub type xmlGenericErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlValidCtxtPtr = *mut xmlValidCtxt;
pub type xmlExternalEntityLoader
    =
    Option<unsafe extern "C" fn(_: *const std::os::raw::c_char,
                                _: *const std::os::raw::c_char, _: xmlParserCtxtPtr)
               -> xmlParserInputPtr>;
pub type xmlCharEncoding = std::os::raw::c_int;
pub const XML_CHAR_ENCODING_ASCII: xmlCharEncoding = 22;
pub const XML_CHAR_ENCODING_EUC_JP: xmlCharEncoding = 21;
pub const XML_CHAR_ENCODING_SHIFT_JIS: xmlCharEncoding = 20;
pub const XML_CHAR_ENCODING_2022_JP: xmlCharEncoding = 19;
pub const XML_CHAR_ENCODING_8859_9: xmlCharEncoding = 18;
pub const XML_CHAR_ENCODING_8859_8: xmlCharEncoding = 17;
pub const XML_CHAR_ENCODING_8859_7: xmlCharEncoding = 16;
pub const XML_CHAR_ENCODING_8859_6: xmlCharEncoding = 15;
pub const XML_CHAR_ENCODING_8859_5: xmlCharEncoding = 14;
pub const XML_CHAR_ENCODING_8859_4: xmlCharEncoding = 13;
pub const XML_CHAR_ENCODING_8859_3: xmlCharEncoding = 12;
pub const XML_CHAR_ENCODING_8859_2: xmlCharEncoding = 11;
pub const XML_CHAR_ENCODING_8859_1: xmlCharEncoding = 10;
pub const XML_CHAR_ENCODING_UCS2: xmlCharEncoding = 9;
pub const XML_CHAR_ENCODING_UCS4_3412: xmlCharEncoding = 8;
pub const XML_CHAR_ENCODING_UCS4_2143: xmlCharEncoding = 7;
pub const XML_CHAR_ENCODING_EBCDIC: xmlCharEncoding = 6;
pub const XML_CHAR_ENCODING_UCS4BE: xmlCharEncoding = 5;
pub const XML_CHAR_ENCODING_UCS4LE: xmlCharEncoding = 4;
pub const XML_CHAR_ENCODING_UTF16BE: xmlCharEncoding = 3;
pub const XML_CHAR_ENCODING_UTF16LE: xmlCharEncoding = 2;
pub const XML_CHAR_ENCODING_UTF8: xmlCharEncoding = 1;
pub const XML_CHAR_ENCODING_NONE: xmlCharEncoding = 0;
pub const XML_CHAR_ENCODING_ERROR: xmlCharEncoding = -1;
pub type xmlInputMatchCallback
    =
    Option<unsafe extern "C" fn(_: *const std::os::raw::c_char) -> std::os::raw::c_int>;
pub type xmlInputOpenCallback
    =
    Option<unsafe extern "C" fn(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_void>;
/* *
 * xmlXPathFlags:
 * Flags for XPath engine compilation and runtime
 */
/* *
 * XML_XPATH_CHECKNS:
 *
 * check namespaces at compilation
 */
/* *
 * XML_XPATH_NOVAR:
 *
 * forbid variables in expression
 */
/* *
 * xmlXPathContext:
 *
 * Expression evaluation occurs with respect to a context.
 * he context consists of:
 *    - a node (the context node)
 *    - a node list (the context node list)
 *    - a set of variable bindings
 *    - a function library
 *    - the set of namespace declarations in scope for the expression
 * Following the switch to hash tables, this need to be trimmed up at
 * the next binary incompatible release.
 * The node may be modified when the context is passed to libxml2
 * for an XPath evaluation so you may need to initialize it again
 * before the next call.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathContext {
    pub doc: xmlDocPtr,
    pub node: xmlNodePtr,
    pub nb_variables_unused: std::os::raw::c_int,
    pub max_variables_unused: std::os::raw::c_int,
    pub varHash: xmlHashTablePtr,
    pub nb_types: std::os::raw::c_int,
    pub max_types: std::os::raw::c_int,
    pub types: xmlXPathTypePtr,
    pub nb_funcs_unused: std::os::raw::c_int,
    pub max_funcs_unused: std::os::raw::c_int,
    pub funcHash: xmlHashTablePtr,
    pub nb_axis: std::os::raw::c_int,
    pub max_axis: std::os::raw::c_int,
    pub axis: xmlXPathAxisPtr,
    pub namespaces: *mut xmlNsPtr,
    pub nsNr: std::os::raw::c_int,
    pub user: *mut std::os::raw::c_void,
    pub contextSize: std::os::raw::c_int,
    pub proximityPosition: std::os::raw::c_int,
    pub xptr: std::os::raw::c_int,
    pub here: xmlNodePtr,
    pub origin: xmlNodePtr,
    pub nsHash: xmlHashTablePtr,
    pub varLookupFunc: xmlXPathVariableLookupFunc,
    pub varLookupData: *mut std::os::raw::c_void,
    pub extra: *mut std::os::raw::c_void,
    pub function: *const xmlChar,
    pub functionURI: *const xmlChar,
    pub funcLookupFunc: xmlXPathFuncLookupFunc,
    pub funcLookupData: *mut std::os::raw::c_void,
    pub tmpNsList: *mut xmlNsPtr,
    pub tmpNsNr: std::os::raw::c_int,
    pub userData: *mut std::os::raw::c_void,
    pub error: xmlStructuredErrorFunc,
    pub lastError: xmlError,
    pub debugNode: xmlNodePtr,
    pub dict: xmlDictPtr,
    pub flags: std::os::raw::c_int,
    pub cache: *mut std::os::raw::c_void,
}
/* *
 * xmlXPathFuncLookupFunc:
 * @ctxt:  an XPath context
 * @name:  name of the function
 * @ns_uri:  the namespace name hosting this function
 *
 * Prototype for callbacks used to plug function lookup in the XPath
 * engine.
 *
 * Returns the XPath function or NULL if not found.
 */
pub type xmlXPathFuncLookupFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlXPathFunction>;
/* the search function */
/* *
 * xmlXPathFunction:
 * @ctxt:  the XPath interprestation context
 * @nargs:  the number of arguments
 *
 * An XPath function.
 * The arguments (if any) are popped out from the context stack
 * and the result is pushed on the stack.
 */
pub type xmlXPathFunction
    =
    Option<unsafe extern "C" fn(_: xmlXPathParserContextPtr, _: std::os::raw::c_int)
               -> ()>;
pub type xmlXPathParserContextPtr = *mut xmlXPathParserContext;
pub type xmlXPathParserContext = _xmlXPathParserContext;
/* *
 * xmlXPathParserContext:
 *
 * An XPath parser context. It contains pure parsing informations,
 * an xmlXPathContext, and the stack of objects.
 */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathParserContext {
    pub cur: *const xmlChar,
    pub base: *const xmlChar,
    pub error: std::os::raw::c_int,
    pub context: xmlXPathContextPtr,
    pub value: xmlXPathObjectPtr,
    pub valueNr: std::os::raw::c_int,
    pub valueMax: std::os::raw::c_int,
    pub valueTab: *mut xmlXPathObjectPtr,
    pub comp: xmlXPathCompExprPtr,
    pub xptr: std::os::raw::c_int,
    pub ancestor: xmlNodePtr,
    pub valueFrame: std::os::raw::c_int,
}
pub type xmlXPathCompExprPtr = *mut xmlXPathCompExpr;
/*
 * The structure of a compiled expression form is not public.
 */
pub type xmlXPathCompExpr = _xmlXPathCompExpr;
pub type xmlXPathObjectPtr = *mut xmlXPathObject;
pub type xmlXPathObject = _xmlXPathObject;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathObject {
    pub type_0: xmlXPathObjectType,
    pub nodesetval: xmlNodeSetPtr,
    pub boolval: std::os::raw::c_int,
    pub floatval: std::os::raw::c_double,
    pub stringval: *mut xmlChar,
    pub user: *mut std::os::raw::c_void,
    pub index: std::os::raw::c_int,
    pub user2: *mut std::os::raw::c_void,
    pub index2: std::os::raw::c_int,
}
pub type xmlNodeSetPtr = *mut xmlNodeSet;
/*
 * A node-set (an unordered collection of nodes without duplicates).
 */
pub type xmlNodeSet = _xmlNodeSet;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNodeSet {
    pub nodeNr: std::os::raw::c_int,
    pub nodeMax: std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
}
pub type xmlXPathObjectType = std::os::raw::c_uint;
pub const XPATH_XSLT_TREE: xmlXPathObjectType = 9;
pub const XPATH_USERS: xmlXPathObjectType = 8;
pub const XPATH_LOCATIONSET: xmlXPathObjectType = 7;
pub const XPATH_RANGE: xmlXPathObjectType = 6;
pub const XPATH_POINT: xmlXPathObjectType = 5;
pub const XPATH_STRING: xmlXPathObjectType = 4;
pub const XPATH_NUMBER: xmlXPathObjectType = 3;
pub const XPATH_BOOLEAN: xmlXPathObjectType = 2;
pub const XPATH_NODESET: xmlXPathObjectType = 1;
pub const XPATH_UNDEFINED: xmlXPathObjectType = 0;
pub type xmlXPathContextPtr = *mut xmlXPathContext;
/*
 * Summary: XML Path Language implementation
 * Description: API for the XML Path Language implementation
 *
 * XML Path Language implementation
 * XPath is a language for addressing parts of an XML document,
 * designed to be used by both XSLT and XPointer
 *     http://www.w3.org/TR/xpath
 *
 * Implements
 * W3C Recommendation 16 November 1999
 *     http://www.w3.org/TR/1999/REC-xpath-19991116
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Daniel Veillard
 */
/* LIBXML_XPATH_ENABLED */
/* LIBXML_XPATH_ENABLED or LIBXML_SCHEMAS_ENABLED */
pub type xmlXPathContext = _xmlXPathContext;
/*
 * Function and Variable Lookup.
 */
/* *
 * xmlXPathVariableLookupFunc:
 * @ctxt:  an XPath context
 * @name:  name of the variable
 * @ns_uri:  the namespace name hosting this variable
 *
 * Prototype for callbacks used to plug variable lookup in the XPath
 * engine.
 *
 * Returns the XPath object value or NULL if not found.
 */
pub type xmlXPathVariableLookupFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const xmlChar,
                                _: *const xmlChar) -> xmlXPathObjectPtr>;
pub type xmlXPathAxisPtr = *mut xmlXPathAxis;
/*
 * Extra axis: a name and an axis function.
 */
pub type xmlXPathAxis = _xmlXPathAxis;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathAxis {
    pub name: *const xmlChar,
    pub func: xmlXPathAxisFunc,
}
/* the evaluation function */
/* *
 * xmlXPathAxisFunc:
 * @ctxt:  the XPath interpreter context
 * @cur:  the previous node being explored on that axis
 *
 * An axis traversal function. To traverse an axis, the engine calls
 * the first time with cur == NULL and repeat until the function returns
 * NULL indicating the end of the axis traversal.
 *
 * Returns the next node in that axis or NULL if at the end of the axis.
 */
pub type xmlXPathAxisFunc
    =
    Option<unsafe extern "C" fn(_: xmlXPathParserContextPtr,
                                _: xmlXPathObjectPtr) -> xmlXPathObjectPtr>;
pub type xmlXPathTypePtr = *mut xmlXPathType;
/*
 * Extra type: a name and a conversion function.
 */
pub type xmlXPathType = _xmlXPathType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathType {
    pub name: *const xmlChar,
    pub func: xmlXPathConvertFunc,
}
/* *
 * xmlXPathConvertFunc:
 * @obj:  an XPath object
 * @type:  the number of the target type
 *
 * A conversion function is associated to a type and used to cast
 * the new type to primitive values.
 *
 * Returns -1 in case of error, 0 otherwise
 */
pub type xmlXPathConvertFunc
    =
    Option<unsafe extern "C" fn(_: xmlXPathObjectPtr, _: std::os::raw::c_int)
               -> std::os::raw::c_int>;
/* *
 * xmlRelaxNGValidityErrorFunc:
 * @ctx: the validation context
 * @msg: the message
 * @...: extra arguments
 *
 * Signature of an error callback from a Relax-NG validation
 */
pub type xmlRelaxNGValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
/* *
 * xmlRelaxNGValidityWarningFunc:
 * @ctx: the validation context
 * @msg: the message
 * @...: extra arguments
 *
 * Signature of a warning callback from a Relax-NG validation
 */
pub type xmlRelaxNGValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlRelaxNGValidCtxt = _xmlRelaxNGValidCtxt;
pub type xmlRelaxNGValidCtxtPtr = *mut xmlRelaxNGValidCtxt;
pub type xmlSchemaValidityErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlSchemaValidityWarningFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: ...) -> ()>;
pub type xmlSchemaValidCtxt = _xmlSchemaValidCtxt;
pub type xmlSchemaValidCtxtPtr = *mut xmlSchemaValidCtxt;
pub type xmlParserSeverities = std::os::raw::c_uint;
pub const XML_PARSER_SEVERITY_ERROR: xmlParserSeverities = 4;
pub const XML_PARSER_SEVERITY_WARNING: xmlParserSeverities = 3;
pub const XML_PARSER_SEVERITY_VALIDITY_ERROR: xmlParserSeverities = 2;
pub const XML_PARSER_SEVERITY_VALIDITY_WARNING: xmlParserSeverities = 1;
pub type xmlTextReader = _xmlTextReader;
pub type xmlTextReaderPtr = *mut xmlTextReader;
/*
 * Error handling extensions
 */
pub type xmlTextReaderLocatorPtr = *mut std::os::raw::c_void;
/* *
 * xmlTextReaderErrorFunc:
 * @arg: the user argument
 * @msg: the message
 * @severity: the severity of the error
 * @locator: a locator indicating where the error occurred
 *
 * Signature of an error callback from a reader parser
 */
pub type xmlTextReaderErrorFunc
    =
    Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: *const std::os::raw::c_char,
                                _: xmlParserSeverities,
                                _: xmlTextReaderLocatorPtr) -> ()>;
pub type C2RustUnnamed = std::os::raw::c_uint;
pub const XML_SAVE_WSNONSIG: C2RustUnnamed = 128;
pub const XML_SAVE_AS_HTML: C2RustUnnamed = 64;
pub const XML_SAVE_AS_XML: C2RustUnnamed = 32;
pub const XML_SAVE_XHTML: C2RustUnnamed = 16;
pub const XML_SAVE_NO_XHTML: C2RustUnnamed = 8;
pub const XML_SAVE_NO_EMPTY: C2RustUnnamed = 4;
pub const XML_SAVE_NO_DECL: C2RustUnnamed = 2;
pub const XML_SAVE_FORMAT: C2RustUnnamed = 1;
pub type xmlSaveCtxt = _xmlSaveCtxt;
pub type xmlSaveCtxtPtr = *mut xmlSaveCtxt;
pub type htmlParserCtxtPtr = xmlParserCtxtPtr;
pub type htmlSAXHandlerPtr = xmlSAXHandlerPtr;
pub type htmlDocPtr = xmlDocPtr;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlNode_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlNodePtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlXPathContext_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlXPathContextPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyparserCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlParserCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlValidCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlTextReader_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlTextReaderPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyoutputBuffer_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlOutputBufferPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyrelaxNgValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlRelaxNGValidCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PySchemaValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlSchemaValidCtxtPtr,
}
pub type xmlSchemaValidCtxtPyCtxtPtr = *mut xmlSchemaValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlSchemaValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type libxml_xpathCallbackArray = [libxml_xpathCallback; 0];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct libxml_xpathCallback {
    pub ctx: xmlXPathContextPtr,
    pub name: *mut xmlChar,
    pub ns_uri: *mut xmlChar,
    pub function: *mut PyObject,
}
pub type xmlRelaxNGValidCtxtPyCtxtPtr = *mut xmlRelaxNGValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlRelaxNGValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlTextReaderPyCtxtPtr = *mut xmlTextReaderPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlTextReaderPyCtxt {
    pub f: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlParserCtxtPyCtxtPtr = *mut xmlParserCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlParserCtxtPyCtxt {
    pub f: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlValidCtxtPyCtxtPtr = *mut xmlValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
/* *
 * TODO:
 *
 * macro to flag unimplemented blocks
 */
/*
 * the following vars are used for XPath extensions, but
 * are also referenced within the parser cleanup routine.
 */
static mut libxml_xpathCallbacksInitialized: std::os::raw::c_int = 0 as std::os::raw::c_int;
static mut libxml_xpathCallbacksAllocd: std::os::raw::c_int = 10 as std::os::raw::c_int;
static mut libxml_xpathCallbacks: *mut libxml_xpathCallbackArray =
    0 as *const libxml_xpathCallbackArray as *mut libxml_xpathCallbackArray;
static mut libxml_xpathCallbacksNb: std::os::raw::c_int = 0 as std::os::raw::c_int;
/* ***********************************************************************
 *									*
 *		Memory debug interface					*
 *									*
 ************************************************************************/
static mut libxmlMemoryDebugActivated: std::os::raw::c_int = 0 as std::os::raw::c_int;
static mut libxmlMemoryAllocatedBase: std::os::raw::c_long =
    0 as std::os::raw::c_int as std::os::raw::c_long;
static mut libxmlMemoryDebug: std::os::raw::c_int = 0 as std::os::raw::c_int;
static mut freeFunc: xmlFreeFunc = None;
static mut mallocFunc: xmlMallocFunc = None;
static mut reallocFunc: xmlReallocFunc = None;
static mut strdupFunc: xmlStrdupFunc = None;
/* defined(LIBXML_DEBUG_ENABLED) */
/* forward declare */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlMemoryUsed(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut ret: std::os::raw::c_long = 0;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    ret = xmlMemUsed() as std::os::raw::c_long;
    py_retval = libxml_longWrap(ret);
    return py_retval;
}
/* defined(LIBXML_DEBUG_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlDebugMemory(mut self_0: *mut PyObject,
                                               mut args: *mut PyObject)
 -> *mut PyObject {
    let mut current_block: u64;
    let mut activate: std::os::raw::c_int = 0;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ret: std::os::raw::c_long = 0;
    if PyArg_ParseTuple(args,
                        b"i:xmlDebugMemory\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut activate as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    if activate != 0 as std::os::raw::c_int {
        if libxmlMemoryDebug == 0 as std::os::raw::c_int {
            /*
             * First initialize the library and grab the old memory handlers
             * and switch the library to memory debugging
             */
            xmlMemGet(&mut freeFunc as *mut xmlFreeFunc,
                      &mut mallocFunc as *mut xmlMallocFunc,
                      &mut reallocFunc as *mut xmlReallocFunc,
                      &mut strdupFunc as *mut xmlStrdupFunc);
            if freeFunc ==
                   Some(xmlMemFree as
                            unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ())
                   &&
                   mallocFunc ==
                       Some(xmlMemMalloc as
                                unsafe extern "C" fn(_: size_t)
                                    -> *mut std::os::raw::c_void) &&
                   reallocFunc ==
                       Some(xmlMemRealloc as
                                unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                                     _: size_t)
                                    -> *mut std::os::raw::c_void) &&
                   strdupFunc ==
                       Some(xmlMemoryStrdup as
                                unsafe extern "C" fn(_: *const std::os::raw::c_char)
                                    -> *mut std::os::raw::c_char) {
                libxmlMemoryAllocatedBase = xmlMemUsed() as std::os::raw::c_long;
                current_block = 10048703153582371463;
            } else {
                /* 
                 * cleanup first, because some memory has been
                 * allocated with the non-debug malloc in xmlInitParser
                 * when the python module was imported
                 */
                xmlCleanupParser();
                ret =
                    xmlMemSetup(Some(xmlMemFree as
                                         unsafe extern "C" fn(_:
                                                                  *mut std::os::raw::c_void)
                                             -> ()),
                                Some(xmlMemMalloc as
                                         unsafe extern "C" fn(_: size_t)
                                             -> *mut std::os::raw::c_void),
                                Some(xmlMemRealloc as
                                         unsafe extern "C" fn(_:
                                                                  *mut std::os::raw::c_void,
                                                              _: size_t)
                                             -> *mut std::os::raw::c_void),
                                Some(xmlMemoryStrdup as
                                         unsafe extern "C" fn(_:
                                                                  *const std::os::raw::c_char)
                                             -> *mut std::os::raw::c_char)) as
                        std::os::raw::c_long;
                if ret < 0 as std::os::raw::c_int as std::os::raw::c_long {
                    current_block = 16366935457830388243;
                } else {
                    libxmlMemoryAllocatedBase = xmlMemUsed() as std::os::raw::c_long;
                    /* reinitialize */
                    xmlInitParser();
                    libxml_xmlErrorInitialize();
                    current_block = 10048703153582371463;
                }
            }
            match current_block {
                16366935457830388243 => { }
                _ => {
                    ret = 0 as std::os::raw::c_int as std::os::raw::c_long;
                    current_block = 4495394744059808450;
                }
            }
        } else {
            if libxmlMemoryDebugActivated == 0 as std::os::raw::c_int {
                libxmlMemoryAllocatedBase = xmlMemUsed() as std::os::raw::c_long;
                ret = 0 as std::os::raw::c_int as std::os::raw::c_long
            } else {
                ret = xmlMemUsed() as std::os::raw::c_long - libxmlMemoryAllocatedBase
            }
            current_block = 4495394744059808450;
        }
        match current_block {
            16366935457830388243 => { }
            _ => {
                libxmlMemoryDebug = 1 as std::os::raw::c_int;
                libxmlMemoryDebugActivated = 1 as std::os::raw::c_int
            }
        }
    } else {
        if libxmlMemoryDebugActivated == 1 as std::os::raw::c_int {
            ret = xmlMemUsed() as std::os::raw::c_long - libxmlMemoryAllocatedBase
        } else { ret = 0 as std::os::raw::c_int as std::os::raw::c_long }
        libxmlMemoryDebugActivated = 0 as std::os::raw::c_int
    }
    py_retval = libxml_longWrap(ret);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlPythonCleanupParser(mut self_0:
                                                           *mut PyObject,
                                                       mut args:
                                                           *mut PyObject)
 -> *mut PyObject {
    let mut ix: std::os::raw::c_int = 0;
    let mut freed: std::os::raw::c_long = -(1 as std::os::raw::c_int) as std::os::raw::c_long;
    if libxmlMemoryDebug != 0 { freed = xmlMemUsed() as std::os::raw::c_long }
    xmlCleanupParser();
    /*
     * Need to confirm whether we really want to do this (required for
     * memcheck) in all cases...
     */
    if !libxml_xpathCallbacks.is_null() {
        /* if ext funcs declared */
        ix = 0 as std::os::raw::c_int;
        while ix < libxml_xpathCallbacksNb {
            if !(*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as
                                                                   isize)).name.is_null()
               {
                xmlFree.expect("non-null function pointer")((*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix
                                                                                                               as
                                                                                                               isize)).name
                                                                as
                                                                *mut std::os::raw::c_void);
            }
            if !(*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as
                                                                   isize)).ns_uri.is_null()
               {
                xmlFree.expect("non-null function pointer")((*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix
                                                                                                               as
                                                                                                               isize)).ns_uri
                                                                as
                                                                *mut std::os::raw::c_void);
            }
            ix += 1
        }
        libxml_xpathCallbacksNb = 0 as std::os::raw::c_int;
        xmlFree.expect("non-null function pointer")(libxml_xpathCallbacks as
                                                        *mut std::os::raw::c_void);
        libxml_xpathCallbacks = 0 as *mut libxml_xpathCallbackArray
    }
    if libxmlMemoryDebug != 0 {
        freed -= xmlMemUsed() as std::os::raw::c_long;
        libxmlMemoryAllocatedBase -= freed;
        if libxmlMemoryAllocatedBase < 0 as std::os::raw::c_int as std::os::raw::c_long {
            libxmlMemoryAllocatedBase = 0 as std::os::raw::c_int as std::os::raw::c_long
        }
    }
    let ref mut fresh0 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh0 += 1;
    return &mut _Py_NoneStruct;
}
/* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlDumpMemory(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    if libxmlMemoryDebug != 0 as std::os::raw::c_int { xmlMemoryDump(); }
    let ref mut fresh1 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh1 += 1;
    return &mut _Py_NoneStruct;
}
/* ***********************************************************************
 *									*
 *		Handling Python FILE I/O at the C level			*
 *	The raw I/O attack diectly the File objects, while the		*
 *	other routines address the ioWrapper instance instead		*
 *									*
 ************************************************************************/
/* *
 * xmlPythonFileCloseUnref:
 * @context:  the I/O context
 *
 * Close an I/O channel
 */
unsafe extern "C" fn xmlPythonFileCloseRaw(mut context: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    file = context as *mut PyObject;
    if file.is_null() { return -(1 as std::os::raw::c_int) }
    ret =
        PyEval_CallMethod(file,
                          b"close\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut std::os::raw::c_char,
                          b"()\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut std::os::raw::c_char);
    if !ret.is_null() {
        (*ret).ob_refcnt -= 1;
        if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
        }
    }
    (*file).ob_refcnt -= 1;
    if !((*file).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
        Some((*(*file).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(file);
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlPythonFileReadRaw:
 * @context:  the I/O context
 * @buffer:  where to drop data
 * @len:  number of bytes to write
 *
 * Read @len bytes to @buffer from the Python file in the I/O channel
 *
 * Returns the number of bytes read
 */
unsafe extern "C" fn xmlPythonFileReadRaw(mut context: *mut std::os::raw::c_void,
                                          mut buffer: *mut std::os::raw::c_char,
                                          mut len: std::os::raw::c_int)
 -> std::os::raw::c_int {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    let mut lenread: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut data: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    file = context as *mut PyObject;
    if file.is_null() { return -(1 as std::os::raw::c_int) }
    ret =
        PyEval_CallMethod(file,
                          b"read\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut std::os::raw::c_char,
                          b"(i)\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut std::os::raw::c_char, len);
    if ret.is_null() {
        printf(b"xmlPythonFileReadRaw: result is NULL\n\x00" as *const u8 as
                   *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    } else {
        if (*(*ret).ob_type).tp_flags &
               (1 as std::os::raw::c_long) << 27 as std::os::raw::c_int !=
               0 as std::os::raw::c_int as std::os::raw::c_long {
            lenread = PyString_Size(ret) as std::os::raw::c_int;
            data = PyString_AsString(ret)
        } else if (*(*ret).ob_type).tp_flags &
                      (1 as std::os::raw::c_long) << 28 as std::os::raw::c_int !=
                      0 as std::os::raw::c_int as std::os::raw::c_long {
            let mut b: *mut PyObject = 0 as *mut PyObject;
            b = PyUnicodeUCS4_AsUTF8String(ret);
            if b.is_null() {
                printf(b"xmlPythonFileReadRaw: failed to convert to UTF-8\n\x00"
                           as *const u8 as *const std::os::raw::c_char);
                return -(1 as std::os::raw::c_int)
            }
            lenread = PyString_Size(b) as std::os::raw::c_int;
            data = PyString_AsString(b);
            (*b).ob_refcnt -= 1;
            if !((*b).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*b).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(b);
            }
        } else {
            printf(b"xmlPythonFileReadRaw: result is not a String\n\x00" as
                       *const u8 as *const std::os::raw::c_char);
            (*ret).ob_refcnt -= 1;
            if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
            }
            return -(1 as std::os::raw::c_int)
        }
    }
    if lenread > len {
        memcpy(buffer as *mut std::os::raw::c_void, data as *const std::os::raw::c_void,
               len as std::os::raw::c_ulong);
    } else {
        memcpy(buffer as *mut std::os::raw::c_void, data as *const std::os::raw::c_void,
               lenread as std::os::raw::c_ulong);
    }
    (*ret).ob_refcnt -= 1;
    if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
        Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
    }
    return lenread;
}
/* *
 * xmlPythonFileRead:
 * @context:  the I/O context
 * @buffer:  where to drop data
 * @len:  number of bytes to write
 *
 * Read @len bytes to @buffer from the I/O channel.
 *
 * Returns the number of bytes read
 */
unsafe extern "C" fn xmlPythonFileRead(mut context: *mut std::os::raw::c_void,
                                       mut buffer: *mut std::os::raw::c_char,
                                       mut len: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    let mut lenread: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    let mut data: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    file = context as *mut PyObject;
    if file.is_null() { return -(1 as std::os::raw::c_int) }
    ret =
        PyEval_CallMethod(file,
                          b"io_read\x00" as *const u8 as *const std::os::raw::c_char
                              as *mut std::os::raw::c_char,
                          b"(i)\x00" as *const u8 as *const std::os::raw::c_char as
                              *mut std::os::raw::c_char, len);
    if ret.is_null() {
        printf(b"xmlPythonFileRead: result is NULL\n\x00" as *const u8 as
                   *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    } else {
        if (*(*ret).ob_type).tp_flags &
               (1 as std::os::raw::c_long) << 27 as std::os::raw::c_int !=
               0 as std::os::raw::c_int as std::os::raw::c_long {
            lenread = PyString_Size(ret) as std::os::raw::c_int;
            data = PyString_AsString(ret)
        } else if (*(*ret).ob_type).tp_flags &
                      (1 as std::os::raw::c_long) << 28 as std::os::raw::c_int !=
                      0 as std::os::raw::c_int as std::os::raw::c_long {
            let mut b: *mut PyObject = 0 as *mut PyObject;
            b = PyUnicodeUCS4_AsUTF8String(ret);
            if b.is_null() {
                printf(b"xmlPythonFileRead: failed to convert to UTF-8\n\x00"
                           as *const u8 as *const std::os::raw::c_char);
                return -(1 as std::os::raw::c_int)
            }
            lenread = PyString_Size(b) as std::os::raw::c_int;
            data = PyString_AsString(b);
            (*b).ob_refcnt -= 1;
            if !((*b).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*b).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(b);
            }
        } else {
            printf(b"xmlPythonFileRead: result is not a String\n\x00" as
                       *const u8 as *const std::os::raw::c_char);
            (*ret).ob_refcnt -= 1;
            if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
            }
            return -(1 as std::os::raw::c_int)
        }
    }
    if lenread > len {
        memcpy(buffer as *mut std::os::raw::c_void, data as *const std::os::raw::c_void,
               len as std::os::raw::c_ulong);
    } else {
        memcpy(buffer as *mut std::os::raw::c_void, data as *const std::os::raw::c_void,
               lenread as std::os::raw::c_ulong);
    }
    (*ret).ob_refcnt -= 1;
    if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
        Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
    }
    return lenread;
}
/* *
 * xmlFileWrite:
 * @context:  the I/O context
 * @buffer:  where to drop data
 * @len:  number of bytes to write
 *
 * Write @len bytes from @buffer to the I/O channel.
 *
 * Returns the number of bytes written
 */
unsafe extern "C" fn xmlPythonFileWrite(mut context: *mut std::os::raw::c_void,
                                        mut buffer: *const std::os::raw::c_char,
                                        mut len: std::os::raw::c_int) -> std::os::raw::c_int {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut string: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    let mut written: std::os::raw::c_int = -(1 as std::os::raw::c_int);
    file = context as *mut PyObject;
    if file.is_null() { return -(1 as std::os::raw::c_int) }
    string = PyString_FromStringAndSize(buffer, len as Py_ssize_t);
    if string.is_null() { return -(1 as std::os::raw::c_int) }
    if PyObject_HasAttrString(file,
                              b"io_write\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        ret =
            PyEval_CallMethod(file,
                              b"io_write\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char,
                              b"(O)\x00" as *const u8 as *const std::os::raw::c_char
                                  as *mut std::os::raw::c_char, string)
    } else if PyObject_HasAttrString(file,
                                     b"write\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        ret =
            PyEval_CallMethod(file,
                              b"write\x00" as *const u8 as *const std::os::raw::c_char
                                  as *mut std::os::raw::c_char,
                              b"(O)\x00" as *const u8 as *const std::os::raw::c_char
                                  as *mut std::os::raw::c_char, string)
    }
    (*string).ob_refcnt -= 1;
    if !((*string).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
        Some((*(*string).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(string);
    }
    if ret.is_null() {
        printf(b"xmlPythonFileWrite: result is NULL\n\x00" as *const u8 as
                   *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    } else {
        if (*(*ret).ob_type).tp_flags &
               (1 as std::os::raw::c_long) << 24 as std::os::raw::c_int !=
               0 as std::os::raw::c_int as std::os::raw::c_long {
            written = PyLong_AsLong(ret) as std::os::raw::c_int;
            (*ret).ob_refcnt -= 1;
            if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
            }
        } else if ret == &mut _Py_NoneStruct as *mut PyObject {
            written = len;
            (*ret).ob_refcnt -= 1;
            if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
            }
        } else {
            printf(b"xmlPythonFileWrite: result is not an Int nor None\n\x00"
                       as *const u8 as *const std::os::raw::c_char);
            (*ret).ob_refcnt -= 1;
            if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
            }
        }
    }
    return written;
}
/* *
 * xmlPythonFileClose:
 * @context:  the I/O context
 *
 * Close an I/O channel
 */
unsafe extern "C" fn xmlPythonFileClose(mut context: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    file = context as *mut PyObject;
    if file.is_null() { return -(1 as std::os::raw::c_int) }
    if PyObject_HasAttrString(file,
                              b"io_close\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        ret =
            PyEval_CallMethod(file,
                              b"io_close\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char,
                              b"()\x00" as *const u8 as *const std::os::raw::c_char as
                                  *mut std::os::raw::c_char)
    } else if PyObject_HasAttrString(file,
                                     b"flush\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        ret =
            PyEval_CallMethod(file,
                              b"flush\x00" as *const u8 as *const std::os::raw::c_char
                                  as *mut std::os::raw::c_char,
                              b"()\x00" as *const u8 as *const std::os::raw::c_char as
                                  *mut std::os::raw::c_char)
    }
    if !ret.is_null() {
        (*ret).ob_refcnt -= 1;
        if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
        }
    }
    return 0 as std::os::raw::c_int;
}
/* *
 * xmlOutputBufferCreatePythonFile:
 * @file:  a PyFile_Type
 * @encoder:  the encoding converter or NULL
 *
 * Create a buffered output for the progressive saving to a PyFile_Type
 * buffered C I/O
 *
 * Returns the new parser output or NULL
 */
unsafe extern "C" fn xmlOutputBufferCreatePythonFile(mut file: *mut PyObject,
                                                     mut encoder:
                                                         xmlCharEncodingHandlerPtr)
 -> xmlOutputBufferPtr {
    let mut ret: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if file.is_null() { return 0 as xmlOutputBufferPtr }
    ret = xmlAllocOutputBuffer(encoder);
    if !ret.is_null() {
        (*ret).context = file as *mut std::os::raw::c_void;
        /* Py_INCREF(file); */
        (*ret).writecallback =
            Some(xmlPythonFileWrite as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char,
                                          _: std::os::raw::c_int) -> std::os::raw::c_int);
        (*ret).closecallback =
            Some(xmlPythonFileClose as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                         -> std::os::raw::c_int)
    }
    return ret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreateOutputBuffer(mut self_0:
                                                          *mut PyObject,
                                                      mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut xmlChar = 0 as *mut xmlChar;
    let mut handler: xmlCharEncodingHandlerPtr =
        0 as xmlCharEncodingHandlerPtr;
    let mut buffer: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if PyArg_ParseTuple(args,
                        b"Oz:xmlOutputBufferCreate\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut file as *mut *mut PyObject,
                        &mut encoding as *mut *mut xmlChar) == 0 {
        return 0 as *mut PyObject
    }
    if !encoding.is_null() &&
           *encoding.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int !=
               0 as std::os::raw::c_int {
        handler = xmlFindCharEncodingHandler(encoding as *const std::os::raw::c_char)
    }
    buffer = xmlOutputBufferCreatePythonFile(file, handler);
    if buffer.is_null() {
        printf(b"libxml_xmlCreateOutputBuffer: buffer == NULL\n\x00" as
                   *const u8 as *const std::os::raw::c_char);
    }
    py_retval = libxml_xmlOutputBufferPtrWrap(buffer);
    return py_retval;
}
/* *
 * libxml_outputBufferGetPythonFile:
 * @buffer:  the I/O buffer
 *
 * read the Python I/O from the CObject
 *
 * Returns the new parser output or NULL
 */
unsafe extern "C" fn libxml_outputBufferGetPythonFile(mut self_0:
                                                          *mut PyObject,
                                                      mut args: *mut PyObject)
 -> *mut PyObject {
    let mut buffer: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut obj: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    if PyArg_ParseTuple(args,
                        b"O:outputBufferGetPythonFile\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut buffer as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    obj =
        if buffer == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlOutputBufferPtr
        } else { (*(buffer as *mut PyoutputBuffer_Object)).obj };
    if obj.is_null() {
        fprintf(stderr,
                b"outputBufferGetPythonFile: obj == NULL\n\x00" as *const u8
                    as *const std::os::raw::c_char);
        let ref mut fresh2 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh2 += 1;
        return &mut _Py_NoneStruct
    }
    if (*obj).closecallback !=
           Some(xmlPythonFileClose as
                    unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> std::os::raw::c_int)
       {
        fprintf(stderr,
                b"outputBufferGetPythonFile: not a python file wrapper\n\x00"
                    as *const u8 as *const std::os::raw::c_char);
        let ref mut fresh3 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh3 += 1;
        return &mut _Py_NoneStruct
    }
    file = (*obj).context as *mut PyObject;
    if file.is_null() {
        let ref mut fresh4 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh4 += 1;
        return &mut _Py_NoneStruct
    }
    (*file).ob_refcnt += 1;
    return file;
}
unsafe extern "C" fn libxml_xmlOutputBufferClose(mut self_0: *mut PyObject,
                                                 mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0;
    let mut out: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlOutputBufferClose\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_out as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    out =
        if pyobj_out == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlOutputBufferPtr
        } else { (*(pyobj_out as *mut PyoutputBuffer_Object)).obj };
    /* Buffer may already have been destroyed elsewhere. This is harmless. */
    if out.is_null() {
        let ref mut fresh5 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh5 += 1;
        return &mut _Py_NoneStruct
    }
    c_retval = xmlOutputBufferClose(out);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlOutputBufferFlush(mut self_0: *mut PyObject,
                                                 mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0;
    let mut out: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlOutputBufferFlush\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_out as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    out =
        if pyobj_out == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlOutputBufferPtr
        } else { (*(pyobj_out as *mut PyoutputBuffer_Object)).obj };
    c_retval = xmlOutputBufferFlush(out);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSaveFileTo(mut self_0: *mut PyObject,
                                          mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlDocPtr = 0 as *mut xmlDoc;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    if PyArg_ParseTuple(args,
                        b"OOz:xmlSaveFileTo\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_buf as *mut *mut PyObject,
                        &mut pyobj_cur as *mut *mut PyObject,
                        &mut encoding as *mut *mut std::os::raw::c_char) == 0 {
        return 0 as *mut PyObject
    }
    buf =
        if pyobj_buf == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlOutputBufferPtr
        } else { (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj };
    cur =
        if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_cur as *mut PyxmlNode_Object)).obj } as xmlDocPtr;
    c_retval = xmlSaveFileTo(buf, cur, encoding);
    /* xmlSaveTo() freed the memory pointed to by buf, so record that in the
	 * Python object. */
    let ref mut fresh6 = (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj;
    *fresh6 = 0 as xmlOutputBufferPtr;
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSaveFormatFileTo(mut self_0: *mut PyObject,
                                                mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlDocPtr = 0 as *mut xmlDoc;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut format: std::os::raw::c_int = 0;
    if PyArg_ParseTuple(args,
                        b"OOzi:xmlSaveFormatFileTo\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_buf as *mut *mut PyObject,
                        &mut pyobj_cur as *mut *mut PyObject,
                        &mut encoding as *mut *mut std::os::raw::c_char,
                        &mut format as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    buf =
        if pyobj_buf == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlOutputBufferPtr
        } else { (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj };
    cur =
        if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_cur as *mut PyxmlNode_Object)).obj } as xmlDocPtr;
    c_retval = xmlSaveFormatFileTo(buf, cur, encoding, format);
    /* xmlSaveFormatFileTo() freed the memory pointed to by buf, so record that
	 * in the Python object */
    let ref mut fresh7 = (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj;
    *fresh7 = 0 as xmlOutputBufferPtr;
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
/* LIBXML_OUTPUT_ENABLED */
/* *
 * xmlParserInputBufferCreatePythonFile:
 * @file:  a PyFile_Type
 * @encoder:  the encoding converter or NULL
 *
 * Create a buffered output for the progressive saving to a PyFile_Type
 * buffered C I/O
 *
 * Returns the new parser output or NULL
 */
unsafe extern "C" fn xmlParserInputBufferCreatePythonFile(mut file:
                                                              *mut PyObject,
                                                          mut encoding:
                                                              xmlCharEncoding)
 -> xmlParserInputBufferPtr {
    let mut ret: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
    if file.is_null() { return 0 as xmlParserInputBufferPtr }
    ret = xmlAllocParserInputBuffer(encoding);
    if !ret.is_null() {
        (*ret).context = file as *mut std::os::raw::c_void;
        /* Py_INCREF(file); */
        (*ret).readcallback =
            Some(xmlPythonFileRead as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *mut std::os::raw::c_char,
                                          _: std::os::raw::c_int) -> std::os::raw::c_int);
        (*ret).closecallback =
            Some(xmlPythonFileClose as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                         -> std::os::raw::c_int)
    }
    return ret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreateInputBuffer(mut self_0:
                                                         *mut PyObject,
                                                     mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut xmlChar = 0 as *mut xmlChar;
    let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
    let mut buffer: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
    if PyArg_ParseTuple(args,
                        b"Oz:xmlParserInputBufferCreate\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut file as *mut *mut PyObject,
                        &mut encoding as *mut *mut xmlChar) == 0 {
        return 0 as *mut PyObject
    }
    if !encoding.is_null() &&
           *encoding.offset(0 as std::os::raw::c_int as isize) as std::os::raw::c_int !=
               0 as std::os::raw::c_int {
        enc = xmlParseCharEncoding(encoding as *const std::os::raw::c_char)
    }
    buffer = xmlParserInputBufferCreatePythonFile(file, enc);
    if buffer.is_null() {
        printf(b"libxml_xmlParserInputBufferCreate: buffer == NULL\n\x00" as
                   *const u8 as *const std::os::raw::c_char);
    }
    py_retval = libxml_xmlParserInputBufferPtrWrap(buffer);
    return py_retval;
}
/* ***********************************************************************
 *									*
 *		Providing the resolver at the Python level		*
 *									*
 ************************************************************************/
static mut defaultExternalEntityLoader: xmlExternalEntityLoader = None;
static mut pythonExternalEntityLoaderObjext: *mut PyObject =
    0 as *const PyObject as *mut PyObject;
unsafe extern "C" fn pythonExternalEntityLoader(mut URL: *const std::os::raw::c_char,
                                                mut ID: *const std::os::raw::c_char,
                                                mut ctxt: xmlParserCtxtPtr)
 -> xmlParserInputPtr {
    let mut result: xmlParserInputPtr = 0 as xmlParserInputPtr;
    if !pythonExternalEntityLoaderObjext.is_null() {
        let mut ret: *mut PyObject = 0 as *mut PyObject;
        let mut ctxtobj: *mut PyObject = 0 as *mut PyObject;
        ctxtobj = libxml_xmlParserCtxtPtrWrap(ctxt);
        ret =
            PyObject_CallFunction(pythonExternalEntityLoaderObjext,
                                  b"(ssO)\x00" as *const u8 as
                                      *const std::os::raw::c_char as
                                      *mut std::os::raw::c_char, URL, ID, ctxtobj);
        if !ctxtobj.is_null() {
            (*ctxtobj).ob_refcnt -= 1;
            if !((*ctxtobj).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*ctxtobj).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ctxtobj);
            }
        }
        if !ret.is_null() {
            if PyObject_HasAttrString(ret,
                                      b"read\x00" as *const u8 as
                                          *const std::os::raw::c_char as
                                          *mut std::os::raw::c_char) != 0 {
                let mut buf: xmlParserInputBufferPtr =
                    0 as *mut xmlParserInputBuffer;
                buf = xmlAllocParserInputBuffer(XML_CHAR_ENCODING_NONE);
                if !buf.is_null() {
                    (*buf).context = ret as *mut std::os::raw::c_void;
                    (*buf).readcallback =
                        Some(xmlPythonFileReadRaw as
                                 unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                                      _: *mut std::os::raw::c_char,
                                                      _: std::os::raw::c_int)
                                     -> std::os::raw::c_int);
                    (*buf).closecallback =
                        Some(xmlPythonFileCloseRaw as
                                 unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                                     -> std::os::raw::c_int);
                    result =
                        xmlNewIOInputStream(ctxt, buf, XML_CHAR_ENCODING_NONE)
                }
            }
            if result.is_null() {
                (*ret).ob_refcnt -= 1;
                if !((*ret).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*ret).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(ret);
                }
            } else if !URL.is_null() {
                (*result).filename =
                    xmlStrdup(URL as *const xmlChar) as *mut std::os::raw::c_char;
                (*result).directory = xmlParserGetDirectory(URL)
            }
        }
    }
    if result.is_null() && defaultExternalEntityLoader.is_some() {
        result =
            defaultExternalEntityLoader.expect("non-null function pointer")(URL,
                                                                            ID,
                                                                            ctxt)
    }
    return result;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSetEntityLoader(mut self_0: *mut PyObject,
                                                   mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut loader: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:libxml_xmlSetEntityLoader\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut loader as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    if PyCallable_Check(loader) == 0 {
        PyErr_SetString(PyExc_ValueError,
                        b"entity loader is not callable\x00" as *const u8 as
                            *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    if defaultExternalEntityLoader.is_none() {
        defaultExternalEntityLoader = xmlGetExternalEntityLoader()
    }
    if !pythonExternalEntityLoaderObjext.is_null() {
        (*pythonExternalEntityLoaderObjext).ob_refcnt -= 1;
        if !((*pythonExternalEntityLoaderObjext).ob_refcnt !=
                 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*pythonExternalEntityLoaderObjext).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(pythonExternalEntityLoaderObjext);
        }
    }
    pythonExternalEntityLoaderObjext = loader;
    if !pythonExternalEntityLoaderObjext.is_null() {
        (*pythonExternalEntityLoaderObjext).ob_refcnt += 1
    }
    xmlSetExternalEntityLoader(Some(pythonExternalEntityLoader as
                                        unsafe extern "C" fn(_:
                                                                 *const std::os::raw::c_char,
                                                             _:
                                                                 *const std::os::raw::c_char,
                                                             _:
                                                                 xmlParserCtxtPtr)
                                            -> xmlParserInputPtr));
    py_retval = PyLong_FromLong(0 as std::os::raw::c_int as std::os::raw::c_long);
    return py_retval;
}
/* ***********************************************************************
 *									*
 *		Input callback registration				*
 *									*
 ************************************************************************/
static mut pythonInputOpenCallbackObject: *mut PyObject =
    0 as *const PyObject as *mut PyObject;
static mut pythonInputCallbackID: std::os::raw::c_int = -(1 as std::os::raw::c_int);
unsafe extern "C" fn pythonInputMatchCallback(mut URI: *const std::os::raw::c_char)
 -> std::os::raw::c_int {
    /* Always return success, real decision whether URI is supported will be
     * made in open callback.  */
    return 1 as std::os::raw::c_int;
}
unsafe extern "C" fn pythonInputOpenCallback(mut URI: *const std::os::raw::c_char)
 -> *mut std::os::raw::c_void {
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    ret =
        PyObject_CallFunction(pythonInputOpenCallbackObject,
                              b"s\x00" as *const u8 as *const std::os::raw::c_char as
                                  *mut std::os::raw::c_char, URI);
    if ret == &mut _Py_NoneStruct as *mut PyObject {
        let ref mut fresh8 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh8 -= 1;
        if !(*fresh8 != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(&mut _Py_NoneStruct as
                          *mut PyObject)).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(&mut _Py_NoneStruct
                                                                                                                                           as
                                                                                                                                           *mut PyObject);
        }
        return 0 as *mut std::os::raw::c_void
    }
    return ret as *mut std::os::raw::c_void;
}
/* LIBXML_SCHEMAS_ENABLED */
/* LIBXML_REGEXP_ENABLED */
/* LIBXML_SCHEMAS_ENABLED */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlRegisterInputCallback(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut cb: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:libxml_xmlRegisterInputCallback\x00" as *const u8
                            as *const std::os::raw::c_char,
                        &mut cb as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    if PyCallable_Check(cb) == 0 {
        PyErr_SetString(PyExc_ValueError,
                        b"input callback is not callable\x00" as *const u8 as
                            *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    /* Python module registers a single callback and manages the list of
     * all callbacks internally. This is necessitated by xmlInputMatchCallback
     * API, which does not allow for passing of data objects to discriminate
     * different Python methods.  */
    if pythonInputCallbackID == -(1 as std::os::raw::c_int) {
        pythonInputCallbackID =
            xmlRegisterInputCallbacks(Some(pythonInputMatchCallback as
                                               unsafe extern "C" fn(_:
                                                                        *const std::os::raw::c_char)
                                                   -> std::os::raw::c_int),
                                      Some(pythonInputOpenCallback as
                                               unsafe extern "C" fn(_:
                                                                        *const std::os::raw::c_char)
                                                   -> *mut std::os::raw::c_void),
                                      Some(xmlPythonFileReadRaw as
                                               unsafe extern "C" fn(_:
                                                                        *mut std::os::raw::c_void,
                                                                    _:
                                                                        *mut std::os::raw::c_char,
                                                                    _:
                                                                        std::os::raw::c_int)
                                                   -> std::os::raw::c_int),
                                      Some(xmlPythonFileCloseRaw as
                                               unsafe extern "C" fn(_:
                                                                        *mut std::os::raw::c_void)
                                                   -> std::os::raw::c_int));
        if pythonInputCallbackID == -(1 as std::os::raw::c_int) {
            return PyErr_NoMemory()
        }
        pythonInputOpenCallbackObject = cb;
        (*pythonInputOpenCallbackObject).ob_refcnt += 1
    }
    let ref mut fresh9 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh9 += 1;
    return &mut _Py_NoneStruct;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlUnregisterInputCallback(mut self_0:
                                                               *mut PyObject,
                                                           mut args:
                                                               *mut PyObject)
 -> *mut PyObject {
    let mut ret: std::os::raw::c_int = 0;
    ret = xmlPopInputCallbacks();
    if pythonInputCallbackID != -(1 as std::os::raw::c_int) {
        /* Assert that the right input callback was popped. libxml's API does not
	 * allow removal by ID, so all that could be done is an assert.  */
        if pythonInputCallbackID == ret {
            pythonInputCallbackID = -(1 as std::os::raw::c_int);
            (*pythonInputOpenCallbackObject).ob_refcnt -= 1;
            if !((*pythonInputOpenCallbackObject).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*pythonInputOpenCallbackObject).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(pythonInputOpenCallbackObject);
            }
            pythonInputOpenCallbackObject = 0 as *mut PyObject
        } else {
            PyErr_SetString(PyExc_AssertionError,
                            b"popped non-python input callback\x00" as
                                *const u8 as *const std::os::raw::c_char);
            return 0 as *mut PyObject
        }
    } else if ret == -(1 as std::os::raw::c_int) {
        /* No more callbacks to pop */
        PyErr_SetString(PyExc_IndexError,
                        b"no input callbacks to pop\x00" as *const u8 as
                            *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    let ref mut fresh10 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh10 += 1;
    return &mut _Py_NoneStruct;
}
/* ***********************************************************************
 *									*
 *		Handling SAX/xmllib/sgmlop callback interfaces		*
 *									*
 ************************************************************************/
unsafe extern "C" fn pythonStartElement(mut user_data: *mut std::os::raw::c_void,
                                        mut name: *const xmlChar,
                                        mut attrs: *mut *const xmlChar) {
    let mut i: std::os::raw::c_int = 0;
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut dict: *mut PyObject = 0 as *mut PyObject;
    let mut attrname: *mut PyObject = 0 as *mut PyObject;
    let mut attrvalue: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut type_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"startElement\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        type_0 = 1 as std::os::raw::c_int
    } else if PyObject_HasAttrString(handler,
                                     b"start\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        type_0 = 2 as std::os::raw::c_int
    }
    if type_0 != 0 as std::os::raw::c_int {
        /*
         * the xmllib interface always generates a dictionary,
         * possibly empty
         */
        if attrs.is_null() && type_0 == 1 as std::os::raw::c_int {
            if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
                let ref mut fresh11 =
                    (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
                *fresh11 += 1
            }
            dict = &mut _Py_NoneStruct
        } else if attrs.is_null() {
            dict = PyDict_New()
        } else {
            dict = PyDict_New();
            i = 0 as std::os::raw::c_int;
            while !(*attrs.offset(i as isize)).is_null() {
                attrname =
                    PyString_FromString(*attrs.offset(i as isize) as
                                            *mut std::os::raw::c_char);
                i += 1;
                if !(*attrs.offset(i as isize)).is_null() {
                    attrvalue =
                        PyString_FromString(*attrs.offset(i as isize) as
                                                *mut std::os::raw::c_char)
                } else {
                    if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
                        let ref mut fresh12 =
                            (*(&mut _Py_NoneStruct as
                                   *mut PyObject)).ob_refcnt;
                        *fresh12 += 1
                    }
                    attrvalue = &mut _Py_NoneStruct
                }
                PyDict_SetItem(dict, attrname, attrvalue);
                (*attrname).ob_refcnt -= 1;
                if !((*attrname).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*attrname).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(attrname);
                }
                (*attrvalue).ob_refcnt -= 1;
                if !((*attrvalue).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*attrvalue).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(attrvalue);
                }
                i += 1
            }
        }
        if type_0 == 1 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"startElement\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"sO\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, name, dict)
        } else if type_0 == 2 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"start\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"sO\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, name, dict)
        }
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !dict.is_null() {
            (*dict).ob_refcnt -= 1;
            if !((*dict).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*dict).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(dict);
            }
        }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonStartDocument(mut user_data: *mut std::os::raw::c_void) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"startDocument\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"startDocument\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                0 as *mut std::os::raw::c_char);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonEndDocument(mut user_data: *mut std::os::raw::c_void) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"endDocument\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"endDocument\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                0 as *mut std::os::raw::c_char);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    }
    /*
     * The reference to the handler is released there
     */
    if !handler.is_null() {
        (*handler).ob_refcnt -= 1;
        if !((*handler).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*handler).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(handler);
        }
    };
}
unsafe extern "C" fn pythonEndElement(mut user_data: *mut std::os::raw::c_void,
                                      mut name: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"endElement\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"endElement\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    } else if PyObject_HasAttrString(handler,
                                     b"end\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        result =
            PyObject_CallMethod(handler,
                                b"end\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonReference(mut user_data: *mut std::os::raw::c_void,
                                     mut name: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"reference\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"reference\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonCharacters(mut user_data: *mut std::os::raw::c_void,
                                      mut ch: *const xmlChar,
                                      mut len: std::os::raw::c_int) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut type_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"characters\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        type_0 = 1 as std::os::raw::c_int
    } else if PyObject_HasAttrString(handler,
                                     b"data\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        type_0 = 2 as std::os::raw::c_int
    }
    if type_0 != 0 as std::os::raw::c_int {
        if type_0 == 1 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"characters\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        } else if type_0 == 2 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"data\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        }
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonIgnorableWhitespace(mut user_data:
                                                   *mut std::os::raw::c_void,
                                               mut ch: *const xmlChar,
                                               mut len: std::os::raw::c_int) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut type_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"ignorableWhitespace\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        type_0 = 1 as std::os::raw::c_int
    } else if PyObject_HasAttrString(handler,
                                     b"data\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        type_0 = 2 as std::os::raw::c_int
    }
    if type_0 != 0 as std::os::raw::c_int {
        if type_0 == 1 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"ignorableWhitespace\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        } else if type_0 == 2 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"data\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonProcessingInstruction(mut user_data:
                                                     *mut std::os::raw::c_void,
                                                 mut target: *const xmlChar,
                                                 mut data: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"processingInstruction\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"processingInstruction\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"ss\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, target, data);
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonComment(mut user_data: *mut std::os::raw::c_void,
                                   mut value: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"comment\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"comment\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, value);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonWarning(mut user_data: *mut std::os::raw::c_void,
                                   mut msg: *const std::os::raw::c_char,
                                   mut args: ...) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut buf: [std::os::raw::c_char; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"warning\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        args_0 = args.clone();
        vsnprintf(buf.as_mut_ptr(), 1023 as std::os::raw::c_int as std::os::raw::c_ulong, msg,
                  args_0.as_va_list());
        buf[1023 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;
        result =
            PyObject_CallMethod(handler,
                                b"warning\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, buf.as_mut_ptr());
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonError(mut user_data: *mut std::os::raw::c_void,
                                 mut msg: *const std::os::raw::c_char,
                                 mut args: ...) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut buf: [std::os::raw::c_char; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"error\x00" as *const u8 as *const std::os::raw::c_char
                                  as *mut std::os::raw::c_char) != 0 {
        args_0 = args.clone();
        vsnprintf(buf.as_mut_ptr(), 1023 as std::os::raw::c_int as std::os::raw::c_ulong, msg,
                  args_0.as_va_list());
        buf[1023 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;
        result =
            PyObject_CallMethod(handler,
                                b"error\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, buf.as_mut_ptr());
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonFatalError(mut user_data: *mut std::os::raw::c_void,
                                      mut msg: *const std::os::raw::c_char,
                                      mut args: ...) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut buf: [std::os::raw::c_char; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"fatalError\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        args_0 = args.clone();
        vsnprintf(buf.as_mut_ptr(), 1023 as std::os::raw::c_int as std::os::raw::c_ulong, msg,
                  args_0.as_va_list());
        buf[1023 as std::os::raw::c_int as usize] = 0 as std::os::raw::c_int as std::os::raw::c_char;
        result =
            PyObject_CallMethod(handler,
                                b"fatalError\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"s\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, buf.as_mut_ptr());
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonCdataBlock(mut user_data: *mut std::os::raw::c_void,
                                      mut ch: *const xmlChar,
                                      mut len: std::os::raw::c_int) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut type_0: std::os::raw::c_int = 0 as std::os::raw::c_int;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"cdataBlock\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        type_0 = 1 as std::os::raw::c_int
    } else if PyObject_HasAttrString(handler,
                                     b"cdata\x00" as *const u8 as
                                         *const std::os::raw::c_char as
                                         *mut std::os::raw::c_char) != 0 {
        type_0 = 2 as std::os::raw::c_int
    }
    if type_0 != 0 as std::os::raw::c_int {
        if type_0 == 1 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"cdataBlock\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        } else if type_0 == 2 as std::os::raw::c_int {
            result =
                PyObject_CallMethod(handler,
                                    b"cdata\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char,
                                    b"s#\x00" as *const u8 as
                                        *const std::os::raw::c_char as
                                        *mut std::os::raw::c_char, ch, len)
        }
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonExternalSubset(mut user_data: *mut std::os::raw::c_void,
                                          mut name: *const xmlChar,
                                          mut externalID: *const xmlChar,
                                          mut systemID: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"externalSubset\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"externalSubset\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"sss\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name, externalID,
                                systemID);
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonEntityDecl(mut user_data: *mut std::os::raw::c_void,
                                      mut name: *const xmlChar,
                                      mut type_0: std::os::raw::c_int,
                                      mut publicId: *const xmlChar,
                                      mut systemId: *const xmlChar,
                                      mut content: *mut xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"entityDecl\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"entityDecl\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"sisss\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                name, type_0, publicId, systemId, content);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonNotationDecl(mut user_data: *mut std::os::raw::c_void,
                                        mut name: *const xmlChar,
                                        mut publicId: *const xmlChar,
                                        mut systemId: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"notationDecl\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"notationDecl\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"sss\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name, publicId,
                                systemId);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonAttributeDecl(mut user_data: *mut std::os::raw::c_void,
                                         mut elem: *const xmlChar,
                                         mut name: *const xmlChar,
                                         mut type_0: std::os::raw::c_int,
                                         mut def: std::os::raw::c_int,
                                         mut defaultValue: *const xmlChar,
                                         mut tree: xmlEnumerationPtr) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut nameList: *mut PyObject = 0 as *mut PyObject;
    let mut newName: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut count: std::os::raw::c_int = 0;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"attributeDecl\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        count = 0 as std::os::raw::c_int;
        node = tree;
        while !node.is_null() { count += 1; node = (*node).next }
        nameList = PyList_New(count as Py_ssize_t);
        count = 0 as std::os::raw::c_int;
        node = tree;
        while !node.is_null() {
            newName = PyString_FromString((*node).name as *mut std::os::raw::c_char);
            PyList_SetItem(nameList, count as Py_ssize_t, newName);
            (*newName).ob_refcnt -= 1;
            if !((*newName).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*newName).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(newName);
            }
            count += 1;
            node = (*node).next
        }
        result =
            PyObject_CallMethod(handler,
                                b"attributeDecl\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"ssiisO\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                elem, name, type_0, def, defaultValue,
                                nameList);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !nameList.is_null() {
            (*nameList).ob_refcnt -= 1;
            if !((*nameList).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*nameList).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(nameList);
            }
        }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonElementDecl(mut user_data: *mut std::os::raw::c_void,
                                       mut name: *const xmlChar,
                                       mut type_0: std::os::raw::c_int,
                                       mut content: xmlElementContentPtr) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"elementDecl\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        /* TODO: wrap in an elementContent object */
        printf(b"pythonElementDecl: xmlElementContentPtr wrapper missing !\n\x00"
                   as *const u8 as *const std::os::raw::c_char);
        obj = &mut _Py_NoneStruct;
        /* Py_XINCREF(Py_None); isn't the reference just borrowed ??? */
        result =
            PyObject_CallMethod(handler,
                                b"elementDecl\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"siO\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name, type_0, obj);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonUnparsedEntityDecl(mut user_data:
                                                  *mut std::os::raw::c_void,
                                              mut name: *const xmlChar,
                                              mut publicId: *const xmlChar,
                                              mut systemId: *const xmlChar,
                                              mut notationName:
                                                  *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"unparsedEntityDecl\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"unparsedEntityDecl\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"ssss\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                name, publicId, systemId, notationName);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn pythonInternalSubset(mut user_data: *mut std::os::raw::c_void,
                                          mut name: *const xmlChar,
                                          mut ExternalID: *const xmlChar,
                                          mut SystemID: *const xmlChar) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(handler,
                              b"internalSubset\x00" as *const u8 as
                                  *const std::os::raw::c_char as *mut std::os::raw::c_char) !=
           0 {
        result =
            PyObject_CallMethod(handler,
                                b"internalSubset\x00" as *const u8 as
                                    *const std::os::raw::c_char as *mut std::os::raw::c_char,
                                b"sss\x00" as *const u8 as *const std::os::raw::c_char
                                    as *mut std::os::raw::c_char, name, ExternalID,
                                SystemID);
        if !PyErr_Occurred().is_null() { PyErr_Print(); }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
static mut pythonSaxHandler: xmlSAXHandler =
    unsafe {
        {
            let mut init =
                _xmlSAXHandler{internalSubset:
                                   Some(pythonInternalSubset as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               isStandalone: None,
                               hasInternalSubset: None,
                               hasExternalSubset: None,
                               resolveEntity: None,
                               getEntity: None,
                               entityDecl:
                                   Some(pythonEntityDecl as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *mut xmlChar)
                                                -> ()),
                               notationDecl:
                                   Some(pythonNotationDecl as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               attributeDecl:
                                   Some(pythonAttributeDecl as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int,
                                                                 _:
                                                                     std::os::raw::c_int,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     xmlEnumerationPtr)
                                                -> ()),
                               elementDecl:
                                   Some(pythonElementDecl as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int,
                                                                 _:
                                                                     xmlElementContentPtr)
                                                -> ()),
                               unparsedEntityDecl:
                                   Some(pythonUnparsedEntityDecl as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               setDocumentLocator: None,
                               startDocument:
                                   Some(pythonStartDocument as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void)
                                                -> ()),
                               endDocument:
                                   Some(pythonEndDocument as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void)
                                                -> ()),
                               startElement:
                                   Some(pythonStartElement as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *mut *const xmlChar)
                                                -> ()),
                               endElement:
                                   Some(pythonEndElement as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               reference:
                                   Some(pythonReference as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               characters:
                                   Some(pythonCharacters as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int)
                                                -> ()),
                               ignorableWhitespace:
                                   Some(pythonIgnorableWhitespace as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int)
                                                -> ()),
                               processingInstruction:
                                   Some(pythonProcessingInstruction as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               comment:
                                   Some(pythonComment as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               warning:
                                   Some(pythonWarning as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const std::os::raw::c_char,
                                                                 _: ...)
                                                -> ()),
                               error:
                                   Some(pythonError as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const std::os::raw::c_char,
                                                                 _: ...)
                                                -> ()),
                               fatalError:
                                   Some(pythonFatalError as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const std::os::raw::c_char,
                                                                 _: ...)
                                                -> ()),
                               getParameterEntity: None,
                               cdataBlock:
                                   Some(pythonCdataBlock as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     std::os::raw::c_int)
                                                -> ()),
                               externalSubset:
                                   Some(pythonExternalSubset as
                                            unsafe extern "C" fn(_:
                                                                     *mut std::os::raw::c_void,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar,
                                                                 _:
                                                                     *const xmlChar)
                                                -> ()),
                               initialized: 1 as std::os::raw::c_int as std::os::raw::c_uint,
                               _private:
                                   0 as *const std::os::raw::c_void as
                                       *mut std::os::raw::c_void,
                               startElementNs: None,
                               endElementNs: None,
                               serror: None,};
            init
        }
    };
/* ***********************************************************************
 *									*
 *		Handling of specific parser context			*
 *									*
 ************************************************************************/
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreatePushParser(mut self_0: *mut PyObject,
                                                    mut args: *mut PyObject)
 -> *mut PyObject {
    let mut chunk: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut size: std::os::raw::c_int = 0;
    let mut URI: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    let mut ret: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyret: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"Oziz:xmlCreatePushParser\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_SAX as *mut *mut PyObject,
                        &mut chunk as *mut *const std::os::raw::c_char,
                        &mut size as *mut std::os::raw::c_int,
                        &mut URI as *mut *const std::os::raw::c_char) == 0 {
        return 0 as *mut PyObject
    }
    if pyobj_SAX != &mut _Py_NoneStruct as *mut PyObject {
        SAX = &mut pythonSaxHandler;
        (*pyobj_SAX).ob_refcnt += 1
        /* The reference is released in pythonEndDocument() */
    }
    ret =
        xmlCreatePushParserCtxt(SAX, pyobj_SAX as *mut std::os::raw::c_void, chunk,
                                size, URI);
    pyret = libxml_xmlParserCtxtPtrWrap(ret);
    return pyret;
}
/* defined(LIBXML_HTML_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_htmlCreatePushParser(mut self_0:
                                                         *mut PyObject,
                                                     mut args: *mut PyObject)
 -> *mut PyObject {
    let mut chunk: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut size: std::os::raw::c_int = 0;
    let mut URI: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    let mut ret: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyret: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"Oziz:htmlCreatePushParser\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_SAX as *mut *mut PyObject,
                        &mut chunk as *mut *const std::os::raw::c_char,
                        &mut size as *mut std::os::raw::c_int,
                        &mut URI as *mut *const std::os::raw::c_char) == 0 {
        return 0 as *mut PyObject
    }
    if pyobj_SAX != &mut _Py_NoneStruct as *mut PyObject {
        SAX = &mut pythonSaxHandler;
        (*pyobj_SAX).ob_refcnt += 1
        /* The reference is released in pythonEndDocument() */
    }
    ret =
        htmlCreatePushParserCtxt(SAX, pyobj_SAX as *mut std::os::raw::c_void, chunk,
                                 size, URI, XML_CHAR_ENCODING_NONE);
    pyret = libxml_xmlParserCtxtPtrWrap(ret);
    return pyret;
    /* LIBXML_HTML_ENABLED */
}
/* defined(LIBXML_SAX1_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSAXParseFile(mut self_0: *mut PyObject,
                                                mut args: *mut PyObject)
 -> *mut PyObject {
    let mut recover: std::os::raw::c_int = 0;
    let mut URI: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    if PyArg_ParseTuple(args,
                        b"Osi:xmlSAXParseFile\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_SAX as *mut *mut PyObject,
                        &mut URI as *mut *const std::os::raw::c_char,
                        &mut recover as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    if pyobj_SAX == &mut _Py_NoneStruct as *mut PyObject {
        let ref mut fresh13 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh13 += 1;
        return &mut _Py_NoneStruct
    }
    SAX = &mut pythonSaxHandler;
    (*pyobj_SAX).ob_refcnt += 1;
    /* The reference is released in pythonEndDocument() */
    xmlSAXUserParseFile(SAX, pyobj_SAX as *mut std::os::raw::c_void, URI);
    /* LIBXML_SAX1_ENABLED */
    let ref mut fresh14 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh14 += 1;
    return &mut _Py_NoneStruct;
}
/* defined(LIBXML_HTML_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_htmlSAXParseFile(mut self_0: *mut PyObject,
                                                 mut args: *mut PyObject)
 -> *mut PyObject {
    let mut URI: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut encoding: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    if PyArg_ParseTuple(args,
                        b"Osz:htmlSAXParseFile\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_SAX as *mut *mut PyObject,
                        &mut URI as *mut *const std::os::raw::c_char,
                        &mut encoding as *mut *const std::os::raw::c_char) == 0 {
        return 0 as *mut PyObject
    }
    if pyobj_SAX == &mut _Py_NoneStruct as *mut PyObject {
        let ref mut fresh15 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh15 += 1;
        return &mut _Py_NoneStruct
    }
    SAX = &mut pythonSaxHandler;
    (*pyobj_SAX).ob_refcnt += 1;
    /* The reference is released in pythonEndDocument() */
    htmlSAXParseFile(URI, encoding, SAX, pyobj_SAX as *mut std::os::raw::c_void);
    let ref mut fresh16 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh16 += 1;
    return &mut _Py_NoneStruct;
    /* LIBXML_HTML_ENABLED */
}
/* ***********************************************************************
 *									*
 *			Error message callback				*
 *									*
 ************************************************************************/
static mut libxml_xmlPythonErrorFuncHandler: *mut PyObject =
    0 as *const PyObject as *mut PyObject;
static mut libxml_xmlPythonErrorFuncCtxt: *mut PyObject =
    0 as *const PyObject as *mut PyObject;
/* helper to build a xmlMalloc'ed string from a format and va_list */
/* 
 * disabled the loop, the repeated call to vsnprintf without reset of ap
 * in case the initial buffer was too small segfaulted on x86_64
 * we now directly vsnprintf on a large buffer.
 */
unsafe extern "C" fn libxml_buildMessage(mut msg: *const std::os::raw::c_char,
                                         mut ap: ::std::ffi::VaList)
 -> *mut std::os::raw::c_char {
    let mut chars: std::os::raw::c_int = 0;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    str =
        xmlMalloc.expect("non-null function pointer")(1000 as std::os::raw::c_int as
                                                          size_t) as
            *mut std::os::raw::c_char;
    if str.is_null() { return 0 as *mut std::os::raw::c_char }
    chars =
        vsnprintf(str, 999 as std::os::raw::c_int as std::os::raw::c_ulong, msg,
                  ap.as_va_list());
    if chars >= 998 as std::os::raw::c_int {
        *str.offset(999 as std::os::raw::c_int as isize) =
            0 as std::os::raw::c_int as std::os::raw::c_char
    }
    return str;
}
unsafe extern "C" fn libxml_xmlErrorFuncHandler(mut ctx: *mut std::os::raw::c_void,
                                                mut msg: *const std::os::raw::c_char,
                                                mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut message: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut str: [std::os::raw::c_char; 1000] = [0; 1000];
    if libxml_xmlPythonErrorFuncHandler.is_null() {
        ap = args.clone();
        vfprintf(stderr, msg, ap.as_va_list());
    } else {
        ap = args.clone();
        if vsnprintf(str.as_mut_ptr(), 999 as std::os::raw::c_int as std::os::raw::c_ulong,
                     msg, ap.as_va_list()) >= 998 as std::os::raw::c_int {
            str[999 as std::os::raw::c_int as usize] =
                0 as std::os::raw::c_int as std::os::raw::c_char
        }
        list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
        PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                        libxml_xmlPythonErrorFuncCtxt);
        if !libxml_xmlPythonErrorFuncCtxt.is_null() {
            (*libxml_xmlPythonErrorFuncCtxt).ob_refcnt += 1
        }
        message = libxml_charPtrConstWrap(str.as_mut_ptr());
        PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, message);
        result =
            PyEval_CallObjectWithKeywords(libxml_xmlPythonErrorFuncHandler,
                                          list,
                                          0 as *mut std::os::raw::c_void as
                                              *mut PyObject);
        if !list.is_null() {
            (*list).ob_refcnt -= 1;
            if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
            }
        }
        if !result.is_null() {
            (*result).ob_refcnt -= 1;
            if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn libxml_xmlErrorInitialize() {
    xmlSetGenericErrorFunc(0 as *mut std::os::raw::c_void,
                           Some(libxml_xmlErrorFuncHandler as
                                    unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                                         _:
                                                             *const std::os::raw::c_char,
                                                         _: ...) -> ()));
    xmlThrDefSetGenericErrorFunc(0 as *mut std::os::raw::c_void,
                                 Some(libxml_xmlErrorFuncHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut std::os::raw::c_void,
                                                               _:
                                                                   *const std::os::raw::c_char,
                                                               _: ...)
                                              -> ()));
}
unsafe extern "C" fn libxml_xmlRegisterErrorHandler(mut self_0: *mut PyObject,
                                                    mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"OO:xmlRegisterErrorHandler\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_f as *mut *mut PyObject,
                        &mut pyobj_ctx as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    if !libxml_xmlPythonErrorFuncHandler.is_null() {
        if !libxml_xmlPythonErrorFuncHandler.is_null() {
            (*libxml_xmlPythonErrorFuncHandler).ob_refcnt -= 1;
            if !((*libxml_xmlPythonErrorFuncHandler).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*libxml_xmlPythonErrorFuncHandler).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(libxml_xmlPythonErrorFuncHandler);
            }
        }
    }
    if !libxml_xmlPythonErrorFuncCtxt.is_null() {
        if !libxml_xmlPythonErrorFuncCtxt.is_null() {
            (*libxml_xmlPythonErrorFuncCtxt).ob_refcnt -= 1;
            if !((*libxml_xmlPythonErrorFuncCtxt).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*libxml_xmlPythonErrorFuncCtxt).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(libxml_xmlPythonErrorFuncCtxt);
            }
        }
    }
    if !pyobj_ctx.is_null() { (*pyobj_ctx).ob_refcnt += 1 }
    if !pyobj_f.is_null() { (*pyobj_f).ob_refcnt += 1 }
    /* TODO: check f is a function ! */
    libxml_xmlPythonErrorFuncHandler = pyobj_f;
    libxml_xmlPythonErrorFuncCtxt = pyobj_ctx;
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlParserCtxtGenericErrorFuncHandler(mut ctx:
                                                                     *mut std::os::raw::c_void,
                                                                 mut severity:
                                                                     std::os::raw::c_int,
                                                                 mut str:
                                                                     *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    ctxt = ctx as xmlParserCtxtPtr;
    pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
    list = PyTuple_New(4 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 2 as std::os::raw::c_int as Py_ssize_t,
                    libxml_intWrap(severity));
    PyTuple_SetItem(list, 3 as std::os::raw::c_int as Py_ssize_t,
                    &mut _Py_NoneStruct);
    let ref mut fresh17 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh17 += 1;
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).f, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlParserCtxtErrorFuncHandler(mut ctx:
                                                              *mut std::os::raw::c_void,
                                                          mut msg:
                                                              *const std::os::raw::c_char,
                                                          mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(ctx,
                                                XML_PARSER_SEVERITY_ERROR as
                                                    std::os::raw::c_int,
                                                libxml_buildMessage(msg,
                                                                    ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlParserCtxtWarningFuncHandler(mut ctx:
                                                                *mut std::os::raw::c_void,
                                                            mut msg:
                                                                *const std::os::raw::c_char,
                                                            mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(ctx,
                                                XML_PARSER_SEVERITY_WARNING as
                                                    std::os::raw::c_int,
                                                libxml_buildMessage(msg,
                                                                    ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlParserCtxtValidityErrorFuncHandler(mut ctx:
                                                                      *mut std::os::raw::c_void,
                                                                  mut msg:
                                                                      *const std::os::raw::c_char,
                                                                  mut args:
                                                                      ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(ctx,
                                                XML_PARSER_SEVERITY_VALIDITY_ERROR
                                                    as std::os::raw::c_int,
                                                libxml_buildMessage(msg,
                                                                    ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlParserCtxtValidityWarningFuncHandler(mut ctx:
                                                                        *mut std::os::raw::c_void,
                                                                    mut msg:
                                                                        *const std::os::raw::c_char,
                                                                    mut args:
                                                                        ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(ctx,
                                                XML_PARSER_SEVERITY_VALIDITY_WARNING
                                                    as std::os::raw::c_int,
                                                libxml_buildMessage(msg,
                                                                    ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlParserCtxtSetErrorHandler(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"OOO:xmlParserCtxtSetErrorHandler\x00" as *const u8
                            as *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject,
                        &mut pyobj_f as *mut *mut PyObject,
                        &mut pyobj_arg as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlParserCtxtPtr
        } else { (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj };
    if (*ctxt)._private.is_null() {
        pyCtxt =
            xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlParserCtxtPyCtxt>()
                                                              as
                                                              std::os::raw::c_ulong)
                as xmlParserCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
            return py_retval
        }
        memset(pyCtxt as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ::std::mem::size_of::<xmlParserCtxtPyCtxt>() as std::os::raw::c_ulong);
        (*ctxt)._private = pyCtxt as *mut std::os::raw::c_void
    } else { pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr }
    /* TODO: check f is a function ! */
    if !(*pyCtxt).f.is_null() {
        (*(*pyCtxt).f).ob_refcnt -= 1;
        if !((*(*pyCtxt).f).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(*pyCtxt).f).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).f);
        }
    }
    if !pyobj_f.is_null() { (*pyobj_f).ob_refcnt += 1 }
    (*pyCtxt).f = pyobj_f;
    if !(*pyCtxt).arg.is_null() {
        (*(*pyCtxt).arg).ob_refcnt -= 1;
        if !((*(*pyCtxt).arg).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() { (*pyobj_arg).ob_refcnt += 1 }
    (*pyCtxt).arg = pyobj_arg;
    if pyobj_f != &mut _Py_NoneStruct as *mut PyObject {
        (*(*ctxt).sax).error =
            Some(libxml_xmlParserCtxtErrorFuncHandler as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*(*ctxt).sax).warning =
            Some(libxml_xmlParserCtxtWarningFuncHandler as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*ctxt).vctxt.error =
            Some(libxml_xmlParserCtxtValidityErrorFuncHandler as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*ctxt).vctxt.warning =
            Some(libxml_xmlParserCtxtValidityWarningFuncHandler as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ())
    } else {
        (*(*ctxt).sax).error =
            Some(xmlParserError as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*ctxt).vctxt.error =
            Some(xmlParserValidityError as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*(*ctxt).sax).warning =
            Some(xmlParserWarning as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ());
        (*ctxt).vctxt.warning =
            Some(xmlParserValidityWarning as
                     unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                          _: *const std::os::raw::c_char, _: ...)
                         -> ())
    }
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlParserCtxtGetErrorHandler(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlParserCtxtGetErrorHandler\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlParserCtxtPtr
        } else { (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj };
    py_retval = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    if !(*ctxt)._private.is_null() {
        pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
        PyTuple_SetItem(py_retval, 0 as std::os::raw::c_int as Py_ssize_t,
                        (*pyCtxt).f);
        if !(*pyCtxt).f.is_null() { (*(*pyCtxt).f).ob_refcnt += 1 }
        PyTuple_SetItem(py_retval, 1 as std::os::raw::c_int as Py_ssize_t,
                        (*pyCtxt).arg);
        if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    } else {
        /* no python error handler registered */
        PyTuple_SetItem(py_retval, 0 as std::os::raw::c_int as Py_ssize_t,
                        &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh18 =
                (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh18 += 1
        }
        PyTuple_SetItem(py_retval, 1 as std::os::raw::c_int as Py_ssize_t,
                        &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh19 =
                (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh19 += 1
        }
    }
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeParserCtxt(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    if PyArg_ParseTuple(args,
                        b"O:xmlFreeParserCtxt\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlParserCtxtPtr
        } else { (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj };
    if !ctxt.is_null() {
        pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
        if !pyCtxt.is_null() {
            if !(*pyCtxt).f.is_null() {
                (*(*pyCtxt).f).ob_refcnt -= 1;
                if !((*(*pyCtxt).f).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).f).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !(*pyCtxt).arg.is_null() {
                (*(*pyCtxt).arg).ob_refcnt -= 1;
                if !((*(*pyCtxt).arg).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as
                                                            *mut std::os::raw::c_void);
        }
        xmlFreeParserCtxt(ctxt);
    }
    let ref mut fresh20 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh20 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlValidCtxtGenericErrorFuncHandler(mut ctx:
                                                                    *mut std::os::raw::c_void,
                                                                mut severity:
                                                                    std::os::raw::c_int,
                                                                mut str:
                                                                    *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
    pyCtxt = ctx as xmlValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).error, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlValidCtxtGenericWarningFuncHandler(mut ctx:
                                                                      *mut std::os::raw::c_void,
                                                                  mut severity:
                                                                      std::os::raw::c_int,
                                                                  mut str:
                                                                      *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
    pyCtxt = ctx as xmlValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).warn, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlValidCtxtErrorFuncHandler(mut ctx:
                                                             *mut std::os::raw::c_void,
                                                         mut msg:
                                                             *const std::os::raw::c_char,
                                                         mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlValidCtxtGenericErrorFuncHandler(ctx,
                                               XML_PARSER_SEVERITY_VALIDITY_ERROR
                                                   as std::os::raw::c_int,
                                               libxml_buildMessage(msg,
                                                                   ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlValidCtxtWarningFuncHandler(mut ctx:
                                                               *mut std::os::raw::c_void,
                                                           mut msg:
                                                               *const std::os::raw::c_char,
                                                           mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlValidCtxtGenericWarningFuncHandler(ctx,
                                                 XML_PARSER_SEVERITY_VALIDITY_WARNING
                                                     as std::os::raw::c_int,
                                                 libxml_buildMessage(msg,
                                                                     ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlSetValidErrors(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlValidCtxtPtr = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
    if PyArg_ParseTuple(args,
                        b"OOO|O:xmlSetValidErrors\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctx as *mut *mut PyObject,
                        &mut pyobj_error as *mut *mut PyObject,
                        &mut pyobj_warn as *mut *mut PyObject,
                        &mut pyobj_arg as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlValidCtxtPtr
        } else { (*(pyobj_ctx as *mut PyValidCtxt_Object)).obj };
    pyCtxt =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlValidCtxtPyCtxt>()
                                                          as std::os::raw::c_ulong) as
            xmlValidCtxtPyCtxtPtr;
    if pyCtxt.is_null() {
        py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
        return py_retval
    }
    memset(pyCtxt as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ::std::mem::size_of::<xmlValidCtxtPyCtxt>() as std::os::raw::c_ulong);
    /* TODO: check warn and error is a function ! */
    if !(*pyCtxt).error.is_null() {
        (*(*pyCtxt).error).ob_refcnt -= 1;
        if !((*(*pyCtxt).error).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() { (*pyobj_error).ob_refcnt += 1 }
    (*pyCtxt).error = pyobj_error;
    if !(*pyCtxt).warn.is_null() {
        (*(*pyCtxt).warn).ob_refcnt -= 1;
        if !((*(*pyCtxt).warn).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() { (*pyobj_warn).ob_refcnt += 1 }
    (*pyCtxt).warn = pyobj_warn;
    if !(*pyCtxt).arg.is_null() {
        (*(*pyCtxt).arg).ob_refcnt -= 1;
        if !((*(*pyCtxt).arg).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() { (*pyobj_arg).ob_refcnt += 1 }
    (*pyCtxt).arg = pyobj_arg;
    (*ctxt).error =
        Some(libxml_xmlValidCtxtErrorFuncHandler as
                 unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                      _: *const std::os::raw::c_char, _: ...) -> ());
    (*ctxt).warning =
        Some(libxml_xmlValidCtxtWarningFuncHandler as
                 unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                      _: *const std::os::raw::c_char, _: ...) -> ());
    (*ctxt).userData = pyCtxt as *mut std::os::raw::c_void;
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeValidCtxt(mut self_0: *mut PyObject,
                                             mut args: *mut PyObject)
 -> *mut PyObject {
    let mut cur: xmlValidCtxtPtr = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlFreeValidCtxt\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_cur as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlValidCtxtPtr
        } else { (*(pyobj_cur as *mut PyValidCtxt_Object)).obj };
    pyCtxt = (*cur).userData as xmlValidCtxtPyCtxtPtr;
    if !pyCtxt.is_null() {
        if !(*pyCtxt).error.is_null() {
            (*(*pyCtxt).error).ob_refcnt -= 1;
            if !((*(*pyCtxt).error).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
            }
        }
        if !(*pyCtxt).warn.is_null() {
            (*(*pyCtxt).warn).ob_refcnt -= 1;
            if !((*(*pyCtxt).warn).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
            }
        }
        if !(*pyCtxt).arg.is_null() {
            (*(*pyCtxt).arg).ob_refcnt -= 1;
            if !((*(*pyCtxt).arg).ob_refcnt !=
                     0 as std::os::raw::c_int as std::os::raw::c_long) {
                Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
            }
        }
        xmlFree.expect("non-null function pointer")(pyCtxt as
                                                        *mut std::os::raw::c_void);
    }
    xmlFreeValidCtxt(cur);
    let ref mut fresh21 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh21 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlTextReaderErrorCallback(mut arg:
                                                           *mut std::os::raw::c_void,
                                                       mut msg:
                                                           *const std::os::raw::c_char,
                                                       mut severity:
                                                           std::os::raw::c_int,
                                                       mut locator:
                                                           xmlTextReaderLocatorPtr) {
    let mut pyCtxt: *mut xmlTextReaderPyCtxt =
        arg as *mut xmlTextReaderPyCtxt;
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    list = PyTuple_New(4 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrConstWrap(msg));
    PyTuple_SetItem(list, 2 as std::os::raw::c_int as Py_ssize_t,
                    libxml_intWrap(severity));
    PyTuple_SetItem(list, 3 as std::os::raw::c_int as Py_ssize_t,
                    libxml_xmlTextReaderLocatorPtrWrap(locator));
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).f, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlTextReaderSetErrorHandler(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut std::os::raw::c_void = 0 as *mut std::os::raw::c_void;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = 0 as *mut PyObject;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"OOO:xmlTextReaderSetErrorHandler\x00" as *const u8
                            as *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_reader as *mut *mut PyObject,
                        &mut pyobj_f as *mut *mut PyObject,
                        &mut pyobj_arg as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    reader =
        if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlTextReaderPtr
        } else { (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj };
    /* clear previous error handler */
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    if !arg.is_null() {
        if f ==
               ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                       *mut std::os::raw::c_void,
                                                                   _:
                                                                       *const std::os::raw::c_char,
                                                                   _:
                                                                       std::os::raw::c_int,
                                                                   _:
                                                                       xmlTextReaderLocatorPtr)
                                                  -> ()>,
                                       xmlTextReaderErrorFunc>(Some(libxml_xmlTextReaderErrorCallback
                                                                        as
                                                                        unsafe extern "C" fn(_:
                                                                                                 *mut std::os::raw::c_void,
                                                                                             _:
                                                                                                 *const std::os::raw::c_char,
                                                                                             _:
                                                                                                 std::os::raw::c_int,
                                                                                             _:
                                                                                                 xmlTextReaderLocatorPtr)
                                                                            ->
                                                                                ()))
           {
            /* ok, it's our error handler! */
            pyCtxt = arg as xmlTextReaderPyCtxtPtr;
            if !(*pyCtxt).f.is_null() {
                (*(*pyCtxt).f).ob_refcnt -= 1;
                if !((*(*pyCtxt).f).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).f).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !(*pyCtxt).arg.is_null() {
                (*(*pyCtxt).arg).ob_refcnt -= 1;
                if !((*(*pyCtxt).arg).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as
                                                            *mut std::os::raw::c_void);
        } else {
            /* 
	     * there already an arg, and it's not ours,
	     * there is definitely something wrong going on here...
	     * we don't know how to free it, so we bail out... 
	     */
            py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
            return py_retval
        }
    }
    xmlTextReaderSetErrorHandler(reader, None, 0 as *mut std::os::raw::c_void);
    /* set new error handler */
    if pyobj_f != &mut _Py_NoneStruct as *mut PyObject {
        pyCtxt =
            xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlTextReaderPyCtxt>()
                                                              as
                                                              std::os::raw::c_ulong)
                as xmlTextReaderPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
            return py_retval
        }
        if !pyobj_f.is_null() { (*pyobj_f).ob_refcnt += 1 }
        (*pyCtxt).f = pyobj_f;
        if !pyobj_arg.is_null() { (*pyobj_arg).ob_refcnt += 1 }
        (*pyCtxt).arg = pyobj_arg;
        xmlTextReaderSetErrorHandler(reader,
                                     ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                             *mut std::os::raw::c_void,
                                                                                         _:
                                                                                             *const std::os::raw::c_char,
                                                                                         _:
                                                                                             std::os::raw::c_int,
                                                                                         _:
                                                                                             xmlTextReaderLocatorPtr)
                                                                        ->
                                                                            ()>,
                                                             xmlTextReaderErrorFunc>(Some(libxml_xmlTextReaderErrorCallback
                                                                                              as
                                                                                              unsafe extern "C" fn(_:
                                                                                                                       *mut std::os::raw::c_void,
                                                                                                                   _:
                                                                                                                       *const std::os::raw::c_char,
                                                                                                                   _:
                                                                                                                       std::os::raw::c_int,
                                                                                                                   _:
                                                                                                                       xmlTextReaderLocatorPtr)
                                                                                                  ->
                                                                                                      ())),
                                     pyCtxt as *mut std::os::raw::c_void);
    }
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlTextReaderGetErrorHandler(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut std::os::raw::c_void = 0 as *mut std::os::raw::c_void;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlTextReaderSetErrorHandler\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_reader as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    reader =
        if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlTextReaderPtr
        } else { (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj };
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    py_retval = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    if f ==
           ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                   *mut std::os::raw::c_void,
                                                               _:
                                                                   *const std::os::raw::c_char,
                                                               _: std::os::raw::c_int,
                                                               _:
                                                                   xmlTextReaderLocatorPtr)
                                              -> ()>,
                                   xmlTextReaderErrorFunc>(Some(libxml_xmlTextReaderErrorCallback
                                                                    as
                                                                    unsafe extern "C" fn(_:
                                                                                             *mut std::os::raw::c_void,
                                                                                         _:
                                                                                             *const std::os::raw::c_char,
                                                                                         _:
                                                                                             std::os::raw::c_int,
                                                                                         _:
                                                                                             xmlTextReaderLocatorPtr)
                                                                        ->
                                                                            ()))
       {
        /* ok, it's our error handler! */
        pyCtxt = arg as xmlTextReaderPyCtxtPtr;
        PyTuple_SetItem(py_retval, 0 as std::os::raw::c_int as Py_ssize_t,
                        (*pyCtxt).f);
        if !(*pyCtxt).f.is_null() { (*(*pyCtxt).f).ob_refcnt += 1 }
        PyTuple_SetItem(py_retval, 1 as std::os::raw::c_int as Py_ssize_t,
                        (*pyCtxt).arg);
        if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    } else {
        /* f is null or it's not our error handler */
        PyTuple_SetItem(py_retval, 0 as std::os::raw::c_int as Py_ssize_t,
                        &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh22 =
                (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh22 += 1
        }
        PyTuple_SetItem(py_retval, 1 as std::os::raw::c_int as Py_ssize_t,
                        &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh23 =
                (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh23 += 1
        }
    }
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeTextReader(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut std::os::raw::c_void = 0 as *mut std::os::raw::c_void;
    if PyArg_ParseTuple(args,
                        b"O:xmlFreeTextReader\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_reader as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    if !((*pyobj_reader).ob_type == &mut PyCapsule_Type as *mut PyTypeObject)
       {
        let ref mut fresh24 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh24 += 1;
        return &mut _Py_NoneStruct
    }
    reader =
        if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlTextReaderPtr
        } else { (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj };
    if reader.is_null() {
        let ref mut fresh25 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh25 += 1;
        return &mut _Py_NoneStruct
    }
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    if !arg.is_null() {
        if f ==
               ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                       *mut std::os::raw::c_void,
                                                                   _:
                                                                       *const std::os::raw::c_char,
                                                                   _:
                                                                       std::os::raw::c_int,
                                                                   _:
                                                                       xmlTextReaderLocatorPtr)
                                                  -> ()>,
                                       xmlTextReaderErrorFunc>(Some(libxml_xmlTextReaderErrorCallback
                                                                        as
                                                                        unsafe extern "C" fn(_:
                                                                                                 *mut std::os::raw::c_void,
                                                                                             _:
                                                                                                 *const std::os::raw::c_char,
                                                                                             _:
                                                                                                 std::os::raw::c_int,
                                                                                             _:
                                                                                                 xmlTextReaderLocatorPtr)
                                                                            ->
                                                                                ()))
           {
            /* ok, it's our error handler! */
            pyCtxt = arg as xmlTextReaderPyCtxtPtr;
            if !(*pyCtxt).f.is_null() {
                (*(*pyCtxt).f).ob_refcnt -= 1;
                if !((*(*pyCtxt).f).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).f).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !(*pyCtxt).arg.is_null() {
                (*(*pyCtxt).arg).ob_refcnt -= 1;
                if !((*(*pyCtxt).arg).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as
                                                            *mut std::os::raw::c_void);
        }
        /* 
	 * else, something wrong happened, because the error handler is
	 * not owned by the python bindings...
	 */
    }
    xmlFreeTextReader(reader);
    let ref mut fresh26 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh26 += 1;
    return &mut _Py_NoneStruct;
}
/* ***********************************************************************
 *									*
 *			XPath extensions				*
 *									*
 ************************************************************************/
unsafe extern "C" fn libxml_xmlXPathFuncCallback(mut ctxt:
                                                     xmlXPathParserContextPtr,
                                                 mut nargs: std::os::raw::c_int) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut cur: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
    let mut rctxt: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut current_function: *mut PyObject = 0 as *mut PyObject;
    let mut name: *const xmlChar = 0 as *const xmlChar;
    let mut ns_uri: *const xmlChar = 0 as *const xmlChar;
    let mut i: std::os::raw::c_int = 0;
    if ctxt.is_null() { return }
    rctxt = (*ctxt).context;
    if rctxt.is_null() { return }
    name = (*rctxt).function;
    ns_uri = (*rctxt).functionURI;
    /*
     * Find the function, it should be there it was there at lookup
     */
    i = 0 as std::os::raw::c_int;
    while i < libxml_xpathCallbacksNb {
        if xmlStrEqual(name,
                       (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                          isize)).name)
               != 0 &&
               xmlStrEqual(ns_uri,
                           (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                              isize)).ns_uri)
                   != 0 {
            current_function =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).function
        }
        i += 1
    }
    if current_function.is_null() {
        printf(b"libxml_xmlXPathFuncCallback: internal error %s not found !\n\x00"
                   as *const u8 as *const std::os::raw::c_char, name);
        return
    }
    list = PyTuple_New((nargs + 1 as std::os::raw::c_int) as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_xmlXPathParserContextPtrWrap(ctxt));
    i = nargs - 1 as std::os::raw::c_int;
    while i >= 0 as std::os::raw::c_int {
        obj = valuePop(ctxt);
        cur = libxml_xmlXPathObjectPtrWrap(obj);
        PyTuple_SetItem(list, (i + 1 as std::os::raw::c_int) as Py_ssize_t, cur);
        i -= 1
    }
    result =
        PyEval_CallObjectWithKeywords(current_function, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    (*list).ob_refcnt -= 1;
    if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
        Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
    }
    obj = libxml_xmlXPathObjectPtrConvert(result);
    valuePush(ctxt, obj);
}
unsafe extern "C" fn libxml_xmlXPathFuncLookupFunc(mut ctxt:
                                                       *mut std::os::raw::c_void,
                                                   mut name: *const xmlChar,
                                                   mut ns_uri: *const xmlChar)
 -> xmlXPathFunction {
    let mut i: std::os::raw::c_int = 0;
    /*
     * This is called once only. The address is then stored in the
     * XPath expression evaluation, the proper object to call can
     * then still be found using the execution context function
     * and functionURI fields.
     */
    i = 0 as std::os::raw::c_int;
    while i < libxml_xpathCallbacksNb {
        if ctxt ==
               (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ctx
                   as *mut std::os::raw::c_void &&
               xmlStrEqual(name,
                           (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                              isize)).name)
                   != 0 &&
               xmlStrEqual(ns_uri,
                           (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                              isize)).ns_uri)
                   != 0 {
            return Some(libxml_xmlXPathFuncCallback as
                            unsafe extern "C" fn(_: xmlXPathParserContextPtr,
                                                 _: std::os::raw::c_int) -> ())
        }
        i += 1
    }
    return None;
}
unsafe extern "C" fn libxml_xpathCallbacksInitialize() {
    let mut i: std::os::raw::c_int = 0;
    if libxml_xpathCallbacksInitialized != 0 as std::os::raw::c_int { return }
    libxml_xpathCallbacks =
        xmlMalloc.expect("non-null function pointer")((libxml_xpathCallbacksAllocd
                                                           as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<libxml_xpathCallback>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut libxml_xpathCallbackArray;
    i = 0 as std::os::raw::c_int;
    while i < libxml_xpathCallbacksAllocd {
        let ref mut fresh27 =
            (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ctx;
        *fresh27 = 0 as xmlXPathContextPtr;
        let ref mut fresh28 =
            (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).name;
        *fresh28 = 0 as *mut xmlChar;
        let ref mut fresh29 =
            (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                               isize)).ns_uri;
        *fresh29 = 0 as *mut xmlChar;
        let ref mut fresh30 =
            (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                               isize)).function;
        *fresh30 = 0 as *mut PyObject;
        i += 1
    }
    libxml_xpathCallbacksInitialized = 1 as std::os::raw::c_int;
}
/* defined(LIBXML_OUTPUT_ENABLED) && defined(LIBXML_HTTP_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlRegisterXPathFunction(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut current_block: u64;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut ns_uri: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctx: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut i: std::os::raw::c_int = 0;
    if PyArg_ParseTuple(args,
                        b"OszO:registerXPathFunction\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctx as *mut *mut PyObject,
                        &mut name as *mut *mut xmlChar,
                        &mut ns_uri as *mut *mut xmlChar,
                        &mut pyobj_f as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctx =
        if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlXPathContextPtr
        } else { (*(pyobj_ctx as *mut PyxmlXPathContext_Object)).obj };
    if libxml_xpathCallbacksInitialized == 0 as std::os::raw::c_int {
        libxml_xpathCallbacksInitialize();
    }
    xmlXPathRegisterFuncLookup(ctx,
                               Some(libxml_xmlXPathFuncLookupFunc as
                                        unsafe extern "C" fn(_:
                                                                 *mut std::os::raw::c_void,
                                                             _:
                                                                 *const xmlChar,
                                                             _:
                                                                 *const xmlChar)
                                            -> xmlXPathFunction),
                               ctx as *mut std::os::raw::c_void);
    if pyobj_ctx.is_null() || name.is_null() || pyobj_f.is_null() {
        py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
        return py_retval
    }
    i = 0 as std::os::raw::c_int;
    loop  {
        if !(i < libxml_xpathCallbacksNb) {
            current_block = 18377268871191777778;
            break ;
        }
        if ctx ==
               (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ctx
               &&
               xmlStrEqual(name,
                           (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                              isize)).name)
                   != 0 &&
               xmlStrEqual(ns_uri,
                           (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                              isize)).ns_uri)
                   != 0 {
            if !pyobj_f.is_null() { (*pyobj_f).ob_refcnt += 1 }
            if !(*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).function.is_null()
               {
                let ref mut fresh31 =
                    (*(*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                         isize)).function).ob_refcnt;
                *fresh31 -= 1;
                if !(*fresh31 != 0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*(*libxml_xpathCallbacks).as_mut_ptr().offset(i
                                                                                as
                                                                                isize)).function).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*(*libxml_xpathCallbacks).as_mut_ptr().offset(i
                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                  isize)).function);
                }
            }
            let ref mut fresh32 =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).function;
            *fresh32 = pyobj_f;
            c_retval = 1 as std::os::raw::c_int;
            current_block = 13439989967989935556;
            break ;
        } else { i += 1 }
    }
    match current_block {
        18377268871191777778 => {
            if libxml_xpathCallbacksNb >= libxml_xpathCallbacksAllocd {
                libxml_xpathCallbacksAllocd += 10 as std::os::raw::c_int;
                libxml_xpathCallbacks =
                    xmlRealloc.expect("non-null function pointer")(libxml_xpathCallbacks
                                                                       as
                                                                       *mut std::os::raw::c_void,
                                                                   (libxml_xpathCallbacksAllocd
                                                                        as
                                                                        std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<libxml_xpathCallback>()
                                                                                                        as
                                                                                                        std::os::raw::c_ulong))
                        as *mut libxml_xpathCallbackArray
            }
            let fresh33 = libxml_xpathCallbacksNb;
            libxml_xpathCallbacksNb = libxml_xpathCallbacksNb + 1;
            i = fresh33;
            if !pyobj_f.is_null() { (*pyobj_f).ob_refcnt += 1 }
            let ref mut fresh34 =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).ctx;
            *fresh34 = ctx;
            let ref mut fresh35 =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).name;
            *fresh35 = xmlStrdup(name);
            let ref mut fresh36 =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).ns_uri;
            *fresh36 = xmlStrdup(ns_uri);
            let ref mut fresh37 =
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as
                                                                   isize)).function;
            *fresh37 = pyobj_f;
            c_retval = 1 as std::os::raw::c_int
        }
        _ => { }
    }
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
/* defined(LIBXML_XPATH_ENABLED) */
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlXPathRegisterVariable(mut self_0:
                                                             *mut PyObject,
                                                         mut args:
                                                             *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut ns_uri: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctx: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut val: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_value: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"OszO:xpathRegisterVariable\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctx as *mut *mut PyObject,
                        &mut name as *mut *mut xmlChar,
                        &mut ns_uri as *mut *mut xmlChar,
                        &mut pyobj_value as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctx =
        if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlXPathContextPtr
        } else { (*(pyobj_ctx as *mut PyxmlXPathContext_Object)).obj };
    val = libxml_xmlXPathObjectPtrConvert(pyobj_value);
    c_retval = xmlXPathRegisterVariableNS(ctx, name, ns_uri, val);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
/* ***********************************************************************
 *									*
 *			Global properties access			*
 *									*
 ************************************************************************/
unsafe extern "C" fn libxml_name(mut self_0: *mut PyObject,
                                 mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: *const xmlChar = 0 as *const xmlChar;
    if PyArg_ParseTuple(args,
                        b"O:name\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        9 | 21 | 13 => {
            let mut doc: xmlDocPtr = cur as xmlDocPtr;
            res = (*doc).URL
        }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).name
        }
        18 => { let mut ns: xmlNsPtr = cur as xmlNsPtr; res = (*ns).prefix }
        _ => { res = (*cur).name }
    }
    resultobj = libxml_constxmlCharPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_doc(mut self_0: *mut PyObject,
                                mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlDocPtr = 0 as *mut xmlDoc;
    if PyArg_ParseTuple(args,
                        b"O:doc\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        9 | 21 | 13 => { res = 0 as xmlDocPtr }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).doc
        }
        18 => { res = 0 as xmlDocPtr }
        _ => { res = (*cur).doc }
    }
    resultobj = libxml_xmlDocPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_properties(mut self_0: *mut PyObject,
                                       mut args: *mut PyObject)
 -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlAttrPtr = 0 as *mut xmlAttr;
    if PyArg_ParseTuple(args,
                        b"O:properties\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut obj as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    if !cur.is_null() &&
           (*cur).type_0 as std::os::raw::c_uint ==
               XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        res = (*cur).properties
    } else { res = 0 as xmlAttrPtr }
    resultobj = libxml_xmlAttrPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_next(mut self_0: *mut PyObject,
                                 mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:next\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        9 | 21 | 13 => { res = 0 as xmlNodePtr }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).next as xmlNodePtr
        }
        18 => {
            let mut ns: xmlNsPtr = cur as xmlNsPtr;
            res = (*ns).next as xmlNodePtr
        }
        _ => { res = (*cur).next }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_prev(mut self_0: *mut PyObject,
                                 mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:prev\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        9 | 21 | 13 => { res = 0 as xmlNodePtr }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).prev as xmlNodePtr
        }
        18 => { res = 0 as xmlNodePtr }
        _ => { res = (*cur).prev }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_children(mut self_0: *mut PyObject,
                                     mut args: *mut PyObject)
 -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:children\x00" as *const u8 as *const std::os::raw::c_char
                            as *mut std::os::raw::c_char,
                        &mut obj as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        1 | 5 | 6 | 7 | 8 | 9 | 21 | 13 | 14 => { res = (*cur).children }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).children
        }
        _ => { res = 0 as xmlNodePtr }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_last(mut self_0: *mut PyObject,
                                 mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:last\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        1 | 5 | 6 | 7 | 8 | 9 | 21 | 13 | 14 => { res = (*cur).last }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).last
        }
        _ => { res = 0 as xmlNodePtr }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_parent(mut self_0: *mut PyObject,
                                   mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:parent\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    match (*cur).type_0 as std::os::raw::c_uint {
        9 | 13 | 21 => { res = 0 as xmlNodePtr }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).parent
        }
        17 | 18 | 19 | 20 => { res = 0 as xmlNodePtr }
        _ => { res = (*cur).parent }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_type(mut self_0: *mut PyObject,
                                 mut args: *mut PyObject) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: *const xmlChar = 0 as *const xmlChar;
    if PyArg_ParseTuple(args,
                        b"O:last\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char, &mut obj as *mut *mut PyObject)
           == 0 {
        return 0 as *mut PyObject
    }
    cur =
        if obj == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(obj as *mut PyxmlNode_Object)).obj };
    if cur.is_null() {
        let ref mut fresh38 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh38 += 1;
        return &mut _Py_NoneStruct
    }
    match (*cur).type_0 as std::os::raw::c_uint {
        1 => {
            res =
                b"element\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        2 => {
            res =
                b"attribute\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        3 => {
            res =
                b"text\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        4 => {
            res =
                b"cdata\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        5 => {
            res =
                b"entity_ref\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        6 => {
            res =
                b"entity\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        7 => {
            res =
                b"pi\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        8 => {
            res =
                b"comment\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        9 => {
            res =
                b"document_xml\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        10 => {
            res =
                b"doctype\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        11 => {
            res =
                b"fragment\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        12 => {
            res =
                b"notation\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        13 => {
            res =
                b"document_html\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        14 => {
            res =
                b"dtd\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        15 => {
            res =
                b"elem_decl\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        16 => {
            res =
                b"attribute_decl\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        17 => {
            res =
                b"entity_decl\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        18 => {
            res =
                b"namespace\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        19 => {
            res =
                b"xinclude_start\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        20 => {
            res =
                b"xinclude_end\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        21 => {
            res =
                b"document_docbook\x00" as *const u8 as *const std::os::raw::c_char as
                    *const xmlChar
        }
        _ => { }
    }
    resultobj = libxml_constxmlCharPtrWrap(res);
    return resultobj;
}
/* ***********************************************************************
 *									*
 *			Specific accessor functions			*
 *									*
 ************************************************************************/
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeGetNsDefs(mut self_0: *mut PyObject,
                                                 mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlNodeGetNsDefs\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_node as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    node =
        if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_node as *mut PyxmlNode_Object)).obj };
    if node.is_null() ||
           (*node).type_0 as std::os::raw::c_uint !=
               XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        let ref mut fresh39 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh39 += 1;
        return &mut _Py_NoneStruct
    }
    c_retval = (*node).nsDef;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeRemoveNsDef(mut self_0: *mut PyObject,
                                                   mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ns: xmlNsPtr = 0 as *mut xmlNs;
    let mut prev: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut href: *mut xmlChar = 0 as *mut xmlChar;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
    if PyArg_ParseTuple(args,
                        b"Oz:xmlNodeRemoveNsDef\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_node as *mut *mut PyObject,
                        &mut href as *mut *mut xmlChar) == 0 {
        return 0 as *mut PyObject
    }
    node =
        if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_node as *mut PyxmlNode_Object)).obj };
    ns = 0 as xmlNsPtr;
    if node.is_null() ||
           (*node).type_0 as std::os::raw::c_uint !=
               XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        let ref mut fresh40 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh40 += 1;
        return &mut _Py_NoneStruct
    }
    if href.is_null() {
        ns = (*node).nsDef;
        (*node).nsDef = 0 as *mut xmlNs;
        c_retval = 0 as xmlNsPtr
    } else {
        prev = 0 as xmlNsPtr;
        ns = (*node).nsDef;
        while !ns.is_null() {
            if xmlStrEqual((*ns).href, href) != 0 {
                if !prev.is_null() {
                    (*prev).next = (*ns).next
                } else { (*node).nsDef = (*ns).next }
                (*ns).next = 0 as *mut _xmlNs;
                c_retval = 0 as xmlNsPtr;
                break ;
            } else { prev = ns; ns = (*ns).next }
        }
    }
    c_retval = ns;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeGetNs(mut self_0: *mut PyObject,
                                             mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlNodeGetNs\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_node as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    node =
        if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_node as *mut PyxmlNode_Object)).obj };
    if node.is_null() ||
           (*node).type_0 as std::os::raw::c_uint !=
               XML_ELEMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint &&
               (*node).type_0 as std::os::raw::c_uint !=
                   XML_ATTRIBUTE_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        let ref mut fresh41 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh41 += 1;
        return &mut _Py_NoneStruct
    }
    c_retval = (*node).ns;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
/* ***********************************************************************
 *									*
 *			Serialization front-end				*
 *									*
 ************************************************************************/
unsafe extern "C" fn libxml_serializeNode(mut self_0: *mut PyObject,
                                          mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: *mut xmlChar = 0 as *mut xmlChar;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut encoding: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut format: std::os::raw::c_int = 0;
    let mut ctxt: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    let mut buf: xmlBufferPtr = 0 as *mut xmlBuffer;
    let mut options: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if PyArg_ParseTuple(args,
                        b"Ozi:serializeNode\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_node as *mut *mut PyObject,
                        &mut encoding as *mut *const std::os::raw::c_char,
                        &mut format as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    node =
        if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_node as *mut PyxmlNode_Object)).obj };
    if node.is_null() {
        let ref mut fresh42 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh42 += 1;
        return &mut _Py_NoneStruct
    }
    if (*node).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        doc = node as xmlDocPtr;
        node = 0 as xmlNodePtr
    } else if (*node).type_0 as std::os::raw::c_uint ==
                  XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        doc = node as xmlDocPtr;
        node = 0 as xmlNodePtr
    } else {
        if (*node).type_0 as std::os::raw::c_uint ==
               XML_NAMESPACE_DECL as std::os::raw::c_int as std::os::raw::c_uint {
            doc = 0 as xmlDocPtr
        } else { doc = (*node).doc }
        if !(doc.is_null() ||
                 (*doc).type_0 as std::os::raw::c_uint ==
                     XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint) {
            if (*doc).type_0 as std::os::raw::c_uint ==
                   XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
            } else {
                let ref mut fresh43 =
                    (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
                *fresh43 += 1;
                return &mut _Py_NoneStruct
            }
        }
    }
    buf = xmlBufferCreate();
    if buf.is_null() {
        let ref mut fresh44 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh44 += 1;
        return &mut _Py_NoneStruct
    }
    if format != 0 { options |= XML_SAVE_FORMAT as std::os::raw::c_int }
    ctxt = xmlSaveToBuffer(buf, encoding, options);
    if ctxt.is_null() {
        xmlBufferFree(buf);
        let ref mut fresh45 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh45 += 1;
        return &mut _Py_NoneStruct
    }
    if node.is_null() {
        xmlSaveDoc(ctxt, doc);
    } else { xmlSaveTree(ctxt, node); }
    xmlSaveClose(ctxt);
    c_retval = (*buf).content;
    (*buf).content = 0 as *mut xmlChar;
    xmlBufferFree(buf);
    py_retval = libxml_charPtrWrap(c_retval as *mut std::os::raw::c_char);
    return py_retval;
}
unsafe extern "C" fn libxml_saveNodeTo(mut self_0: *mut PyObject,
                                       mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_file: *mut PyObject = 0 as *mut PyObject;
    let mut output: *mut FILE = 0 as *mut FILE;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut encoding: *const std::os::raw::c_char = 0 as *const std::os::raw::c_char;
    let mut format: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut handler: xmlCharEncodingHandlerPtr =
        0 as xmlCharEncodingHandlerPtr;
    if PyArg_ParseTuple(args,
                        b"OOzi:serializeNode\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_node as *mut *mut PyObject,
                        &mut py_file as *mut *mut PyObject,
                        &mut encoding as *mut *const std::os::raw::c_char,
                        &mut format as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    node =
        if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_node as *mut PyxmlNode_Object)).obj };
    if node.is_null() {
        return PyLong_FromLong(-(1 as std::os::raw::c_int) as std::os::raw::c_long)
    }
    output =
        if py_file == &mut _Py_NoneStruct as *mut PyObject {
            0 as *mut FILE
        } else if (*py_file).ob_type == &mut PyFile_Type as *mut PyTypeObject
                      ||
                      PyType_IsSubtype((*py_file).ob_type, &mut PyFile_Type)
                          != 0 {
            PyFile_AsFile(py_file)
        } else { stdout };
    if output.is_null() {
        return PyLong_FromLong(-(1 as std::os::raw::c_int) as std::os::raw::c_long)
    }
    if (*node).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        doc = node as xmlDocPtr
    } else if (*node).type_0 as std::os::raw::c_uint ==
                  XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        doc = node as xmlDocPtr
    } else { doc = (*node).doc }
    if (*doc).type_0 as std::os::raw::c_uint ==
           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if encoding.is_null() {
            encoding = htmlGetMetaEncoding(doc) as *const std::os::raw::c_char
        }
    }
    /* LIBXML_HTML_ENABLED */
    if !encoding.is_null() {
        handler = xmlFindCharEncodingHandler(encoding);
        if handler.is_null() {
            return PyLong_FromLong(-(1 as std::os::raw::c_int) as std::os::raw::c_long)
        }
    }
    if (*doc).type_0 as std::os::raw::c_uint ==
           XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        if handler.is_null() {
            handler =
                xmlFindCharEncodingHandler(b"HTML\x00" as *const u8 as
                                               *const std::os::raw::c_char)
        }
        if handler.is_null() {
            handler =
                xmlFindCharEncodingHandler(b"ascii\x00" as *const u8 as
                                               *const std::os::raw::c_char)
        }
    }
    buf = xmlOutputBufferCreateFile(output, handler);
    if (*node).type_0 as std::os::raw::c_uint ==
           XML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        len = xmlSaveFormatFileTo(buf, doc, encoding, format)
    } else if (*node).type_0 as std::os::raw::c_uint ==
                  XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        htmlDocContentDumpFormatOutput(buf, doc, encoding, format);
        len = xmlOutputBufferClose(buf)
    } else if (*doc).type_0 as std::os::raw::c_uint ==
                  XML_HTML_DOCUMENT_NODE as std::os::raw::c_int as std::os::raw::c_uint {
        htmlNodeDumpFormatOutput(buf, doc, node, encoding, format);
        len = xmlOutputBufferClose(buf)
        /* LIBXML_HTML_ENABLED */
    } else {
        xmlNodeDumpOutput(buf, doc, node, 0 as std::os::raw::c_int, format, encoding);
        len = xmlOutputBufferClose(buf)
    }
    return PyLong_FromLong(len as std::os::raw::c_long);
}
/* defined(LIBXML_LEGACY_ENABLED) */
/* LIBXML_OUTPUT_ENABLED */
/* ***********************************************************************
 *									*
 *			Extra stuff					*
 *									*
 ************************************************************************/
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNewNode(mut self_0: *mut PyObject,
                                           mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"s:xmlNewNode\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut name as *mut *mut xmlChar) == 0 {
        return 0 as *mut PyObject
    }
    node = xmlNewNode(0 as xmlNsPtr, name);
    if node.is_null() {
        let ref mut fresh46 =
            (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh46 += 1;
        return &mut _Py_NoneStruct
    }
    py_retval = libxml_xmlNodePtrWrap(node);
    return py_retval;
}
/* ***********************************************************************
 *									*
 *			Local Catalog stuff				*
 *									*
 ************************************************************************/
unsafe extern "C" fn libxml_addLocalCatalog(mut self_0: *mut PyObject,
                                            mut args: *mut PyObject)
 -> *mut PyObject {
    let mut URL: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"Os:addLocalCatalog\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject,
                        &mut URL as *mut *mut xmlChar) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlParserCtxtPtr
        } else { (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj };
    if !URL.is_null() {
        (*ctxt).catalogs = xmlCatalogAddLocal((*ctxt).catalogs, URL)
    }
    let ref mut fresh47 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh47 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityGenericErrorFuncHandler(mut ctx:
                                                                          *mut std::os::raw::c_void,
                                                                      mut str:
                                                                          *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr =
        0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    pyCtxt = ctx as xmlRelaxNGValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).error, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityGenericWarningFuncHandler(mut ctx:
                                                                            *mut std::os::raw::c_void,
                                                                        mut str:
                                                                            *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr =
        0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    pyCtxt = ctx as xmlRelaxNGValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).warn, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityErrorFunc(mut ctx:
                                                            *mut std::os::raw::c_void,
                                                        mut msg:
                                                            *const std::os::raw::c_char,
                                                        mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlRelaxNGValidityGenericErrorFuncHandler(ctx,
                                                     libxml_buildMessage(msg,
                                                                         ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityWarningFunc(mut ctx:
                                                              *mut std::os::raw::c_void,
                                                          mut msg:
                                                              *const std::os::raw::c_char,
                                                          mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlRelaxNGValidityGenericWarningFuncHandler(ctx,
                                                       libxml_buildMessage(msg,
                                                                           ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlRelaxNGSetValidErrors(mut self_0:
                                                         *mut PyObject,
                                                     mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlRelaxNGValidCtxtPtr = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr =
        0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    if PyArg_ParseTuple(args,
                        b"OOO|O:xmlRelaxNGSetValidErrors\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctx as *mut *mut PyObject,
                        &mut pyobj_error as *mut *mut PyObject,
                        &mut pyobj_warn as *mut *mut PyObject,
                        &mut pyobj_arg as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlRelaxNGValidCtxtPtr
        } else { (*(pyobj_ctx as *mut PyrelaxNgValidCtxt_Object)).obj };
    if xmlRelaxNGGetValidErrors(ctxt, 0 as *mut xmlRelaxNGValidityErrorFunc,
                                0 as *mut xmlRelaxNGValidityWarningFunc,
                                &mut pyCtxt as
                                    *mut xmlRelaxNGValidCtxtPyCtxtPtr as
                                    *mut *mut std::os::raw::c_void) ==
           -(1 as std::os::raw::c_int) {
        py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
        return py_retval
    }
    if pyCtxt.is_null() {
        /* first time to set the error handlers */
        pyCtxt =
            xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlRelaxNGValidCtxtPyCtxt>()
                                                              as
                                                              std::os::raw::c_ulong)
                as xmlRelaxNGValidCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
            return py_retval
        }
        memset(pyCtxt as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ::std::mem::size_of::<xmlRelaxNGValidCtxtPyCtxt>() as
                   std::os::raw::c_ulong);
    }
    /* TODO: check warn and error is a function ! */
    if !(*pyCtxt).error.is_null() {
        (*(*pyCtxt).error).ob_refcnt -= 1;
        if !((*(*pyCtxt).error).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() { (*pyobj_error).ob_refcnt += 1 }
    (*pyCtxt).error = pyobj_error;
    if !(*pyCtxt).warn.is_null() {
        (*(*pyCtxt).warn).ob_refcnt -= 1;
        if !((*(*pyCtxt).warn).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() { (*pyobj_warn).ob_refcnt += 1 }
    (*pyCtxt).warn = pyobj_warn;
    if !(*pyCtxt).arg.is_null() {
        (*(*pyCtxt).arg).ob_refcnt -= 1;
        if !((*(*pyCtxt).arg).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() { (*pyobj_arg).ob_refcnt += 1 }
    (*pyCtxt).arg = pyobj_arg;
    xmlRelaxNGSetValidErrors(ctxt,
                             Some(libxml_xmlRelaxNGValidityErrorFunc as
                                      unsafe extern "C" fn(_:
                                                               *mut std::os::raw::c_void,
                                                           _:
                                                               *const std::os::raw::c_char,
                                                           _: ...) -> ()),
                             Some(libxml_xmlRelaxNGValidityWarningFunc as
                                      unsafe extern "C" fn(_:
                                                               *mut std::os::raw::c_void,
                                                           _:
                                                               *const std::os::raw::c_char,
                                                           _: ...) -> ()),
                             pyCtxt as *mut std::os::raw::c_void);
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlRelaxNGFreeValidCtxt(mut self_0: *mut PyObject,
                                                    mut args: *mut PyObject)
 -> *mut PyObject {
    let mut ctxt: xmlRelaxNGValidCtxtPtr = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr =
        0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlRelaxNGFreeValidCtxt\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlRelaxNGValidCtxtPtr
        } else { (*(pyobj_ctxt as *mut PyrelaxNgValidCtxt_Object)).obj };
    if xmlRelaxNGGetValidErrors(ctxt, 0 as *mut xmlRelaxNGValidityErrorFunc,
                                0 as *mut xmlRelaxNGValidityWarningFunc,
                                &mut pyCtxt as
                                    *mut xmlRelaxNGValidCtxtPyCtxtPtr as
                                    *mut *mut std::os::raw::c_void) ==
           0 as std::os::raw::c_int {
        if !pyCtxt.is_null() {
            if !(*pyCtxt).error.is_null() {
                (*(*pyCtxt).error).ob_refcnt -= 1;
                if !((*(*pyCtxt).error).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
                }
            }
            if !(*pyCtxt).warn.is_null() {
                (*(*pyCtxt).warn).ob_refcnt -= 1;
                if !((*(*pyCtxt).warn).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
                }
            }
            if !(*pyCtxt).arg.is_null() {
                (*(*pyCtxt).arg).ob_refcnt -= 1;
                if !((*(*pyCtxt).arg).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as
                                                            *mut std::os::raw::c_void);
        }
    }
    xmlRelaxNGFreeValidCtxt(ctxt);
    let ref mut fresh48 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh48 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlSchemaValidityGenericErrorFuncHandler(mut ctx:
                                                                         *mut std::os::raw::c_void,
                                                                     mut str:
                                                                         *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr =
        0 as *mut xmlSchemaValidCtxtPyCtxt;
    pyCtxt = ctx as xmlSchemaValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).error, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlSchemaValidityGenericWarningFuncHandler(mut ctx:
                                                                           *mut std::os::raw::c_void,
                                                                       mut str:
                                                                           *mut std::os::raw::c_char) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr =
        0 as *mut xmlSchemaValidCtxtPyCtxt;
    pyCtxt = ctx as xmlSchemaValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as std::os::raw::c_int as Py_ssize_t);
    PyTuple_SetItem(list, 0 as std::os::raw::c_int as Py_ssize_t,
                    libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as std::os::raw::c_int as Py_ssize_t, (*pyCtxt).arg);
    if !(*pyCtxt).arg.is_null() { (*(*pyCtxt).arg).ob_refcnt += 1 }
    result =
        PyEval_CallObjectWithKeywords((*pyCtxt).warn, list,
                                      0 as *mut std::os::raw::c_void as
                                          *mut PyObject);
    if result.is_null() {
        /* TODO: manage for the exception to be propagated... */
        PyErr_Print();
    }
    if !list.is_null() {
        (*list).ob_refcnt -= 1;
        if !((*list).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*list).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        (*result).ob_refcnt -= 1;
        if !((*result).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*result).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")(result);
        }
    };
}
unsafe extern "C" fn libxml_xmlSchemaValidityErrorFunc(mut ctx:
                                                           *mut std::os::raw::c_void,
                                                       mut msg:
                                                           *const std::os::raw::c_char,
                                                       mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlSchemaValidityGenericErrorFuncHandler(ctx,
                                                    libxml_buildMessage(msg,
                                                                        ap.as_va_list()));
}
unsafe extern "C" fn libxml_xmlSchemaValidityWarningFunc(mut ctx:
                                                             *mut std::os::raw::c_void,
                                                         mut msg:
                                                             *const std::os::raw::c_char,
                                                         mut args: ...) {
    let mut ap: ::std::ffi::VaListImpl;
    ap = args.clone();
    libxml_xmlSchemaValidityGenericWarningFuncHandler(ctx,
                                                      libxml_buildMessage(msg,
                                                                          ap.as_va_list()));
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSchemaSetValidErrors(mut self_0:
                                                            *mut PyObject,
                                                        mut args:
                                                            *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlSchemaValidCtxtPtr = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr =
        0 as *mut xmlSchemaValidCtxtPyCtxt;
    if PyArg_ParseTuple(args,
                        b"OOO|O:xmlSchemaSetValidErrors\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctx as *mut *mut PyObject,
                        &mut pyobj_error as *mut *mut PyObject,
                        &mut pyobj_warn as *mut *mut PyObject,
                        &mut pyobj_arg as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlSchemaValidCtxtPtr
        } else { (*(pyobj_ctx as *mut PySchemaValidCtxt_Object)).obj };
    if xmlSchemaGetValidErrors(ctxt, 0 as *mut xmlSchemaValidityErrorFunc,
                               0 as *mut xmlSchemaValidityWarningFunc,
                               &mut pyCtxt as *mut xmlSchemaValidCtxtPyCtxtPtr
                                   as *mut *mut std::os::raw::c_void) ==
           -(1 as std::os::raw::c_int) {
        py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
        return py_retval
    }
    if pyCtxt.is_null() {
        /* first time to set the error handlers */
        pyCtxt =
            xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlSchemaValidCtxtPyCtxt>()
                                                              as
                                                              std::os::raw::c_ulong)
                as xmlSchemaValidCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as std::os::raw::c_int));
            return py_retval
        }
        memset(pyCtxt as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
               ::std::mem::size_of::<xmlSchemaValidCtxtPyCtxt>() as
                   std::os::raw::c_ulong);
    }
    /* TODO: check warn and error is a function ! */
    if !(*pyCtxt).error.is_null() {
        (*(*pyCtxt).error).ob_refcnt -= 1;
        if !((*(*pyCtxt).error).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() { (*pyobj_error).ob_refcnt += 1 }
    (*pyCtxt).error = pyobj_error;
    if !(*pyCtxt).warn.is_null() {
        (*(*pyCtxt).warn).ob_refcnt -= 1;
        if !((*(*pyCtxt).warn).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long)
           {
            Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() { (*pyobj_warn).ob_refcnt += 1 }
    (*pyCtxt).warn = pyobj_warn;
    if !(*pyCtxt).arg.is_null() {
        (*(*pyCtxt).arg).ob_refcnt -= 1;
        if !((*(*pyCtxt).arg).ob_refcnt != 0 as std::os::raw::c_int as std::os::raw::c_long) {
            Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() { (*pyobj_arg).ob_refcnt += 1 }
    (*pyCtxt).arg = pyobj_arg;
    xmlSchemaSetValidErrors(ctxt,
                            Some(libxml_xmlSchemaValidityErrorFunc as
                                     unsafe extern "C" fn(_:
                                                              *mut std::os::raw::c_void,
                                                          _:
                                                              *const std::os::raw::c_char,
                                                          _: ...) -> ()),
                            Some(libxml_xmlSchemaValidityWarningFunc as
                                     unsafe extern "C" fn(_:
                                                              *mut std::os::raw::c_void,
                                                          _:
                                                              *const std::os::raw::c_char,
                                                          _: ...) -> ()),
                            pyCtxt as *mut std::os::raw::c_void);
    py_retval = libxml_intWrap(1 as std::os::raw::c_int);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSchemaFreeValidCtxt(mut self_0: *mut PyObject,
                                                   mut args: *mut PyObject)
 -> *mut PyObject {
    let mut ctxt: xmlSchemaValidCtxtPtr = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr =
        0 as *mut xmlSchemaValidCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    if PyArg_ParseTuple(args,
                        b"O:xmlSchemaFreeValidCtxt\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_ctxt as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    ctxt =
        if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlSchemaValidCtxtPtr
        } else { (*(pyobj_ctxt as *mut PySchemaValidCtxt_Object)).obj };
    if xmlSchemaGetValidErrors(ctxt, 0 as *mut xmlSchemaValidityErrorFunc,
                               0 as *mut xmlSchemaValidityWarningFunc,
                               &mut pyCtxt as *mut xmlSchemaValidCtxtPyCtxtPtr
                                   as *mut *mut std::os::raw::c_void) ==
           0 as std::os::raw::c_int {
        if !pyCtxt.is_null() {
            if !(*pyCtxt).error.is_null() {
                (*(*pyCtxt).error).ob_refcnt -= 1;
                if !((*(*pyCtxt).error).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).error).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).error);
                }
            }
            if !(*pyCtxt).warn.is_null() {
                (*(*pyCtxt).warn).ob_refcnt -= 1;
                if !((*(*pyCtxt).warn).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).warn).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).warn);
                }
            }
            if !(*pyCtxt).arg.is_null() {
                (*(*pyCtxt).arg).ob_refcnt -= 1;
                if !((*(*pyCtxt).arg).ob_refcnt !=
                         0 as std::os::raw::c_int as std::os::raw::c_long) {
                    Some((*(*(*pyCtxt).arg).ob_type).tp_dealloc.expect("non-null function pointer")).expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as
                                                            *mut std::os::raw::c_void);
        }
    }
    xmlSchemaFreeValidCtxt(ctxt);
    let ref mut fresh49 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh49 += 1;
    return &mut _Py_NoneStruct;
}
/* ***********************************************************************
 *                                                                      *
 * XML Canonicalization c14n                                            *
 *                                                                      *
 ************************************************************************/
unsafe extern "C" fn PyxmlNodeSet_Convert(mut py_nodeset: *mut PyObject,
                                          mut result: *mut xmlNodeSetPtr)
 -> std::os::raw::c_int {
    let mut nodeSet: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
    let mut is_tuple: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if (*(*py_nodeset).ob_type).tp_flags &
           (1 as std::os::raw::c_long) << 26 as std::os::raw::c_int !=
           0 as std::os::raw::c_int as std::os::raw::c_long {
        is_tuple = 1 as std::os::raw::c_int
    } else if (*(*py_nodeset).ob_type).tp_flags &
                  (1 as std::os::raw::c_long) << 25 as std::os::raw::c_int !=
                  0 as std::os::raw::c_int as std::os::raw::c_long {
        is_tuple = 0 as std::os::raw::c_int
    } else if py_nodeset == &mut _Py_NoneStruct as *mut PyObject {
        *result = 0 as xmlNodeSetPtr;
        return 0 as std::os::raw::c_int
    } else {
        PyErr_SetString(PyExc_TypeError,
                        b"must be a tuple or list of nodes.\x00" as *const u8
                            as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    nodeSet =
        xmlMalloc.expect("non-null function pointer")(::std::mem::size_of::<xmlNodeSet>()
                                                          as std::os::raw::c_ulong) as
            xmlNodeSetPtr;
    if nodeSet.is_null() {
        PyErr_SetString(PyExc_MemoryError,
                        b"\x00" as *const u8 as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    (*nodeSet).nodeNr = 0 as std::os::raw::c_int;
    (*nodeSet).nodeMax =
        if is_tuple != 0 {
            (*(py_nodeset as *mut PyVarObject)).ob_size
        } else { (*(py_nodeset as *mut PyVarObject)).ob_size } as std::os::raw::c_int;
    (*nodeSet).nodeTab =
        xmlMalloc.expect("non-null function pointer")(((*nodeSet).nodeMax as
                                                           std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlNodePtr>()
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut xmlNodePtr;
    if (*nodeSet).nodeTab.is_null() {
        xmlFree.expect("non-null function pointer")(nodeSet as
                                                        *mut std::os::raw::c_void);
        PyErr_SetString(PyExc_MemoryError,
                        b"\x00" as *const u8 as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    memset((*nodeSet).nodeTab as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           ((*nodeSet).nodeMax as
                std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<xmlNodePtr>()
                                                as std::os::raw::c_ulong));
    let mut idx: std::os::raw::c_int = 0;
    idx = 0 as std::os::raw::c_int;
    while idx < (*nodeSet).nodeMax {
        let mut pynode: xmlNodePtr =
            if (if is_tuple != 0 {
                    *(*(py_nodeset as
                            *mut PyTupleObject)).ob_item.as_mut_ptr().offset(idx
                                                                                 as
                                                                                 isize)
                } else {
                    *(*(py_nodeset as
                            *mut PyListObject)).ob_item.offset(idx as isize)
                }) == &mut _Py_NoneStruct as *mut PyObject {
                0 as xmlNodePtr
            } else {
                (*(if is_tuple != 0 {
                       *(*(py_nodeset as
                               *mut PyTupleObject)).ob_item.as_mut_ptr().offset(idx
                                                                                    as
                                                                                    isize)
                   } else {
                       *(*(py_nodeset as
                               *mut PyListObject)).ob_item.offset(idx as
                                                                      isize)
                   } as *mut PyxmlNode_Object)).obj
            };
        if !pynode.is_null() {
            let fresh50 = (*nodeSet).nodeNr;
            (*nodeSet).nodeNr = (*nodeSet).nodeNr + 1;
            let ref mut fresh51 =
                *(*nodeSet).nodeTab.offset(fresh50 as isize);
            *fresh51 = pynode
        }
        idx += 1
    }
    *result = nodeSet;
    return 0 as std::os::raw::c_int;
}
unsafe extern "C" fn PystringSet_Convert(mut py_strings: *mut PyObject,
                                         mut result: *mut *mut *mut xmlChar)
 -> std::os::raw::c_int {
    /* NOTE: the array should be freed, but the strings are shared
       with the python strings and so must not be freed. */
    let mut strings: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
    let mut is_tuple: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut count: std::os::raw::c_int = 0;
    let mut init_index: std::os::raw::c_int = 0 as std::os::raw::c_int;
    if (*(*py_strings).ob_type).tp_flags &
           (1 as std::os::raw::c_long) << 26 as std::os::raw::c_int !=
           0 as std::os::raw::c_int as std::os::raw::c_long {
        is_tuple = 1 as std::os::raw::c_int
    } else if (*(*py_strings).ob_type).tp_flags &
                  (1 as std::os::raw::c_long) << 25 as std::os::raw::c_int !=
                  0 as std::os::raw::c_int as std::os::raw::c_long {
        is_tuple = 0 as std::os::raw::c_int
    } else if py_strings == &mut _Py_NoneStruct as *mut PyObject {
        *result = 0 as *mut *mut xmlChar;
        return 0 as std::os::raw::c_int
    } else {
        PyErr_SetString(PyExc_TypeError,
                        b"must be a tuple or list of strings.\x00" as
                            *const u8 as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    count =
        if is_tuple != 0 {
            (*(py_strings as *mut PyVarObject)).ob_size
        } else { (*(py_strings as *mut PyVarObject)).ob_size } as std::os::raw::c_int;
    strings =
        xmlMalloc.expect("non-null function pointer")((::std::mem::size_of::<*mut xmlChar>()
                                                           as
                                                           std::os::raw::c_ulong).wrapping_mul(count
                                                                                           as
                                                                                           std::os::raw::c_ulong))
            as *mut *mut xmlChar;
    if strings.is_null() {
        PyErr_SetString(PyExc_MemoryError,
                        b"\x00" as *const u8 as *const std::os::raw::c_char);
        return -(1 as std::os::raw::c_int)
    }
    memset(strings as *mut std::os::raw::c_void, 0 as std::os::raw::c_int,
           (::std::mem::size_of::<*mut xmlChar>() as
                std::os::raw::c_ulong).wrapping_mul(count as std::os::raw::c_ulong));
    let mut idx: std::os::raw::c_int = 0;
    idx = 0 as std::os::raw::c_int;
    while idx < count {
        let mut s: *mut std::os::raw::c_char =
            PyString_AsString(if is_tuple != 0 {
                                  *(*(py_strings as
                                          *mut PyTupleObject)).ob_item.as_mut_ptr().offset(idx
                                                                                               as
                                                                                               isize)
                              } else {
                                  *(*(py_strings as
                                          *mut PyListObject)).ob_item.offset(idx
                                                                                 as
                                                                                 isize)
                              });
        if !s.is_null() {
            let fresh52 = init_index;
            init_index = init_index + 1;
            let ref mut fresh53 = *strings.offset(fresh52 as isize);
            *fresh53 = s as *mut xmlChar
        } else {
            xmlFree.expect("non-null function pointer")(strings as
                                                            *mut std::os::raw::c_void);
            PyErr_SetString(PyExc_TypeError,
                            b"must be a tuple or list of strings.\x00" as
                                *const u8 as *const std::os::raw::c_char);
            return -(1 as std::os::raw::c_int)
        }
        idx += 1
    }
    *result = strings;
    return 0 as std::os::raw::c_int;
}
unsafe extern "C" fn libxml_C14NDocDumpMemory(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_doc: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_nodes: *mut PyObject = 0 as *mut PyObject;
    let mut exclusive: std::os::raw::c_int = 0;
    let mut pyobj_prefixes: *mut PyObject = 0 as *mut PyObject;
    let mut with_comments: std::os::raw::c_int = 0;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut nodes: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
    let mut prefixes: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
    let mut doc_txt: *mut xmlChar = 0 as *mut xmlChar;
    let mut result: std::os::raw::c_int = 0;
    if PyArg_ParseTuple(args,
                        b"OOiOi:C14NDocDumpMemory\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_doc as *mut *mut PyObject,
                        &mut pyobj_nodes as *mut *mut PyObject,
                        &mut exclusive as *mut std::os::raw::c_int,
                        &mut pyobj_prefixes as *mut *mut PyObject,
                        &mut with_comments as *mut std::os::raw::c_int) == 0 {
        return 0 as *mut PyObject
    }
    doc =
        if pyobj_doc == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_doc as *mut PyxmlNode_Object)).obj } as xmlDocPtr;
    if doc.is_null() {
        PyErr_SetString(PyExc_TypeError,
                        b"bad document.\x00" as *const u8 as
                            *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    result = PyxmlNodeSet_Convert(pyobj_nodes, &mut nodes);
    if result < 0 as std::os::raw::c_int { return 0 as *mut PyObject }
    if exclusive != 0 {
        result = PystringSet_Convert(pyobj_prefixes, &mut prefixes);
        if result < 0 as std::os::raw::c_int {
            if !nodes.is_null() {
                xmlFree.expect("non-null function pointer")((*nodes).nodeTab
                                                                as
                                                                *mut std::os::raw::c_void);
                xmlFree.expect("non-null function pointer")(nodes as
                                                                *mut std::os::raw::c_void);
            }
            return 0 as *mut PyObject
        }
    }
    result =
        xmlC14NDocDumpMemory(doc, nodes, exclusive, prefixes, with_comments,
                             &mut doc_txt);
    if !nodes.is_null() {
        xmlFree.expect("non-null function pointer")((*nodes).nodeTab as
                                                        *mut std::os::raw::c_void);
        xmlFree.expect("non-null function pointer")(nodes as
                                                        *mut std::os::raw::c_void);
    }
    if !prefixes.is_null() {
        let mut idx: *mut *mut xmlChar = prefixes;
        while !(*idx).is_null() {
            let fresh54 = idx;
            idx = idx.offset(1);
            xmlFree.expect("non-null function pointer")(*fresh54 as
                                                            *mut std::os::raw::c_void);
        }
        xmlFree.expect("non-null function pointer")(prefixes as
                                                        *mut std::os::raw::c_void);
    }
    if result < 0 as std::os::raw::c_int {
        PyErr_SetString(PyExc_Exception,
                        b"libxml2 xmlC14NDocDumpMemory failure.\x00" as
                            *const u8 as *const std::os::raw::c_char);
        return 0 as *mut PyObject
    } else {
        py_retval =
            PyString_FromStringAndSize(doc_txt as *const std::os::raw::c_char,
                                       result as Py_ssize_t);
        xmlFree.expect("non-null function pointer")(doc_txt as
                                                        *mut std::os::raw::c_void);
        return py_retval
    };
}
unsafe extern "C" fn libxml_C14NDocSaveTo(mut self_0: *mut PyObject,
                                          mut args: *mut PyObject)
 -> *mut PyObject {
    let mut pyobj_doc: *mut PyObject = 0 as *mut PyObject;
    let mut py_file: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_nodes: *mut PyObject = 0 as *mut PyObject;
    let mut exclusive: std::os::raw::c_int = 0;
    let mut pyobj_prefixes: *mut PyObject = 0 as *mut PyObject;
    let mut with_comments: std::os::raw::c_int = 0;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut nodes: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
    let mut prefixes: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
    let mut output: *mut FILE = 0 as *mut FILE;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut result: std::os::raw::c_int = 0;
    let mut len: std::os::raw::c_int = 0;
    if PyArg_ParseTuple(args,
                        b"OOiOiO:C14NDocSaveTo\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut pyobj_doc as *mut *mut PyObject,
                        &mut pyobj_nodes as *mut *mut PyObject,
                        &mut exclusive as *mut std::os::raw::c_int,
                        &mut pyobj_prefixes as *mut *mut PyObject,
                        &mut with_comments as *mut std::os::raw::c_int,
                        &mut py_file as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    doc =
        if pyobj_doc == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(pyobj_doc as *mut PyxmlNode_Object)).obj } as xmlDocPtr;
    if doc.is_null() {
        PyErr_SetString(PyExc_TypeError,
                        b"bad document.\x00" as *const u8 as
                            *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    output =
        if py_file == &mut _Py_NoneStruct as *mut PyObject {
            0 as *mut FILE
        } else if (*py_file).ob_type == &mut PyFile_Type as *mut PyTypeObject
                      ||
                      PyType_IsSubtype((*py_file).ob_type, &mut PyFile_Type)
                          != 0 {
            PyFile_AsFile(py_file)
        } else { stdout };
    if output.is_null() {
        PyErr_SetString(PyExc_TypeError,
                        b"bad file.\x00" as *const u8 as *const std::os::raw::c_char);
        return 0 as *mut PyObject
    }
    buf = xmlOutputBufferCreateFile(output, 0 as xmlCharEncodingHandlerPtr);
    result = PyxmlNodeSet_Convert(pyobj_nodes, &mut nodes);
    if result < 0 as std::os::raw::c_int { return 0 as *mut PyObject }
    if exclusive != 0 {
        result = PystringSet_Convert(pyobj_prefixes, &mut prefixes);
        if result < 0 as std::os::raw::c_int {
            if !nodes.is_null() {
                xmlFree.expect("non-null function pointer")((*nodes).nodeTab
                                                                as
                                                                *mut std::os::raw::c_void);
                xmlFree.expect("non-null function pointer")(nodes as
                                                                *mut std::os::raw::c_void);
            }
            return 0 as *mut PyObject
        }
    }
    result =
        xmlC14NDocSaveTo(doc, nodes, exclusive, prefixes, with_comments, buf);
    if !nodes.is_null() {
        xmlFree.expect("non-null function pointer")((*nodes).nodeTab as
                                                        *mut std::os::raw::c_void);
        xmlFree.expect("non-null function pointer")(nodes as
                                                        *mut std::os::raw::c_void);
    }
    if !prefixes.is_null() {
        let mut idx: *mut *mut xmlChar = prefixes;
        while !(*idx).is_null() {
            let fresh55 = idx;
            idx = idx.offset(1);
            xmlFree.expect("non-null function pointer")(*fresh55 as
                                                            *mut std::os::raw::c_void);
        }
        xmlFree.expect("non-null function pointer")(prefixes as
                                                        *mut std::os::raw::c_void);
    }
    len = xmlOutputBufferClose(buf);
    if result < 0 as std::os::raw::c_int {
        PyErr_SetString(PyExc_Exception,
                        b"libxml2 xmlC14NDocSaveTo failure.\x00" as *const u8
                            as *const std::os::raw::c_char);
        return 0 as *mut PyObject
    } else { return PyLong_FromLong(len as std::os::raw::c_long) };
}
unsafe extern "C" fn libxml_getObjDesc(mut self_0: *mut PyObject,
                                       mut args: *mut PyObject)
 -> *mut PyObject {
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut str: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    if PyArg_ParseTuple(args,
                        b"O:getObjDesc\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut obj as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    str =
        PyCapsule_GetPointer(obj, PyCapsule_GetName(obj)) as
            *mut std::os::raw::c_char;
    return Py_BuildValue(b"s\x00" as *const u8 as *const std::os::raw::c_char as
                             *mut std::os::raw::c_char, str);
}
unsafe extern "C" fn libxml_compareNodesEqual(mut self_0: *mut PyObject,
                                              mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_node1: *mut PyObject = 0 as *mut PyObject;
    let mut py_node2: *mut PyObject = 0 as *mut PyObject;
    let mut node1: xmlNodePtr = 0 as *mut xmlNode;
    let mut node2: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"OO:compareNodesEqual\x00" as *const u8 as
                            *const std::os::raw::c_char as *mut std::os::raw::c_char,
                        &mut py_node1 as *mut *mut PyObject,
                        &mut py_node2 as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    /* To compare two node objects, we compare their pointer addresses */
    node1 =
        if py_node1 == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(py_node1 as *mut PyxmlNode_Object)).obj };
    node2 =
        if py_node2 == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(py_node2 as *mut PyxmlNode_Object)).obj };
    if node1 == node2 {
        return Py_BuildValue(b"i\x00" as *const u8 as *const std::os::raw::c_char as
                                 *mut std::os::raw::c_char, 1 as std::os::raw::c_int)
    } else {
        return Py_BuildValue(b"i\x00" as *const u8 as *const std::os::raw::c_char as
                                 *mut std::os::raw::c_char, 0 as std::os::raw::c_int)
    };
}
unsafe extern "C" fn libxml_nodeHash(mut self_0: *mut PyObject,
                                     mut args: *mut PyObject)
 -> *mut PyObject {
    let mut py_node1: *mut PyObject = 0 as *mut PyObject;
    let mut node1: xmlNodePtr = 0 as *mut xmlNode;
    if PyArg_ParseTuple(args,
                        b"O:nodeHash\x00" as *const u8 as *const std::os::raw::c_char
                            as *mut std::os::raw::c_char,
                        &mut py_node1 as *mut *mut PyObject) == 0 {
        return 0 as *mut PyObject
    }
    /* For simplicity, we use the node pointer address as a hash value */
    node1 =
        if py_node1 == &mut _Py_NoneStruct as *mut PyObject {
            0 as xmlNodePtr
        } else { (*(py_node1 as *mut PyxmlNode_Object)).obj };
    return PyLong_FromVoidPtr(node1 as *mut std::os::raw::c_void);
}
/* ***********************************************************************
 *									*
 *			The registration stuff				*
 *									*
 ************************************************************************/
static mut libxmlMethods: [PyMethodDef; 932] =
    unsafe {
        [{
             let mut init =
                 PyMethodDef{ml_name:
                                 b"docbDefaultSAXHandlerInit\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_docbDefaultSAXHandlerInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlAutoCloseTag\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlAutoCloseTag as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCreateFileParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCreateFileParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCreateMemoryParserCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCreateMemoryParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCreatePushParser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCreatePushParser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtReadDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtReadDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtReadFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtReadFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtReadFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtReadFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtReadMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtReadMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtReset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtReset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlCtxtUseOptions\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlCtxtUseOptions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlDefaultSAXHandlerInit\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlDefaultSAXHandlerInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlDocContentDumpFormatOutput\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlDocContentDumpFormatOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlDocContentDumpOutput\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlDocContentDumpOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlDocDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlDocDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlFreeParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlFreeParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlGetMetaEncoding\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlGetMetaEncoding as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlHandleOmittedElem\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlHandleOmittedElem as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlInitAutoClose\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlInitAutoClose as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlIsAutoClosed\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlIsAutoClosed as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlIsBooleanAttr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlIsBooleanAttr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlIsScriptAttribute\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlIsScriptAttribute as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNewDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNewDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNewDocNoDtD\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNewDocNoDtD as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNewParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNewParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNodeDumpFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNodeDumpFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNodeDumpFileFormat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNodeDumpFileFormat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNodeDumpFormatOutput\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNodeDumpFormatOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlNodeDumpOutput\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlNodeDumpOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseCharRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseCharRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseChunk\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseChunk as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseDocument\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseDocument as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlParseFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlParseFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlReadDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlReadDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlReadFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlReadFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlReadFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlReadFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlReadMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlReadMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlSAXParseFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlSAXParseFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlSaveFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlSaveFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlSaveFileEnc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlSaveFileEnc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlSaveFileFormat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlSaveFileFormat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"htmlSetMetaEncoding\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_htmlSetMetaEncoding as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"namePop\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_namePop as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"namePush\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_namePush as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"nodePop\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_nodePop as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"nodePush\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_nodePush as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"valuePop\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_valuePop as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogAdd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogAdd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogRemove\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogRemove as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogResolve\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogResolve as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogResolvePublic\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogResolvePublic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogResolveSystem\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogResolveSystem as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlACatalogResolveURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlACatalogResolveURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddChildList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddChildList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddDocEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddDocEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddDtdEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddDtdEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddEncodingAlias\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddEncodingAlias as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddNextSibling\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddNextSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddPrevSibling\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddPrevSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlAddSibling\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlAddSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlBoolToText\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlBoolToText as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlBuildQName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlBuildQName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlBuildRelativeURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlBuildRelativeURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlBuildURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlBuildURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlByteConsumed\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlByteConsumed as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCanonicPath\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCanonicPath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogAdd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogAdd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogCleanup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogConvert\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogConvert as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogGetPublic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogGetPublic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogGetSystem\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogGetSystem as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogIsEmpty\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogIsEmpty as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogRemove\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogRemove as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogResolve\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogResolve as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogResolvePublic\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogResolvePublic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogResolveSystem\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogResolveSystem as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogResolveURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogResolveURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCatalogSetDebug\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCatalogSetDebug as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCharStrdup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCharStrdup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCharStrndup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCharStrndup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCheckFilename\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCheckFilename as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCheckLanguageID\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCheckLanguageID as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCheckUTF8\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCheckUTF8 as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCheckVersion\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCheckVersion as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupCharEncodingHandlers\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupCharEncodingHandlers as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupEncodingAliases\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupEncodingAliases as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupGlobals\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupGlobals as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupInputCallbacks\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupInputCallbacks as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupOutputCallbacks\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupOutputCallbacks as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCleanupPredefinedEntities\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCleanupPredefinedEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlClearParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlClearParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlConvertSGMLCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlConvertSGMLCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyCharMultiByte\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyCharMultiByte as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyDtd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyDtd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyError\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyError as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyNamespace\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyNamespace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyNamespaceList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyNamespaceList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyNodeList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCopyPropList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCopyPropList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateDocParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateDocParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateEntityParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateEntityParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateFileParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateFileParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateInputBuffer\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateInputBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateIntSubset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateIntSubset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateMemoryParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateMemoryParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateOutputBuffer\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateOutputBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreatePushParser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreatePushParser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCreateURLParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateURLParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtReadDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtReadDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtReadFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtReadFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtReadFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtReadFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtReadMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtReadMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtReset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtReset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtResetPush\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtResetPush as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlCtxtUseOptions\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCtxtUseOptions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugCheckDocument\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugCheckDocument as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpAttr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpAttr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpAttrList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpAttrList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpDTD\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpDTD as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpDocument\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpDocument as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpDocumentHead\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpDocumentHead as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpEntities\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpNodeList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpOneNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpOneNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugDumpString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugDumpString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDebugMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDebugMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDecodeEntities\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDecodeEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDefaultSAXHandlerInit\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDefaultSAXHandlerInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDelEncodingAlias\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDelEncodingAlias as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDictCleanup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDictCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocCopyNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocCopyNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocCopyNodeList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocCopyNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocFormatDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocFormatDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocGetRootElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocGetRootElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDocSetRootElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDocSetRootElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlDumpMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlDumpMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlElemDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlElemDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlEncodeEntities\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlEncodeEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlEncodeEntitiesReentrant\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlEncodeEntitiesReentrant as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlEncodeSpecialChars\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlEncodeSpecialChars as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetCode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetCode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetDomain\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetDomain as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetLevel\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetLevel as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetLine\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetLine as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlErrorGetMessage\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlErrorGetMessage as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFileMatch\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFileMatch as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFirstElementChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFirstElementChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeDtd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeDtd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeNodeList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeNsList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeNsList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeParserInputBuffer\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeParserInputBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreePropList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreePropList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetCompressMode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetCompressMode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDocCompressMode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDocCompressMode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDocEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDocEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDtdAttrDesc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDtdAttrDesc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDtdElementDesc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDtdElementDesc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDtdEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDtdEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDtdQAttrDesc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDtdQAttrDesc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetDtdQElementDesc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetDtdQElementDesc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetEncodingAlias\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetEncodingAlias as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetID\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetID as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetIntSubset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetIntSubset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetLastChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetLastChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetLastError\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetLastError as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetLineNo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetLineNo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetNoNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetNoNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetNodePath\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetNodePath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetParameterEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetParameterEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetPredefinedEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetPredefinedEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlGetProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlGetProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlHandleEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlHandleEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlHasNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlHasNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlHasProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlHasProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIOFTPMatch\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIOFTPMatch as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIOHTTPMatch\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIOHTTPMatch as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitCharEncodingHandlers\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitCharEncodingHandlers as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitGlobals\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitGlobals as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitParser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitParser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitializeCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitializeCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitializeDict\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitializeDict as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlInitializePredefinedEntities\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlInitializePredefinedEntities
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsBaseChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsBaseChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsBlank\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsBlank as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsBlankNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsBlankNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsCombining\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsCombining as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsDigit\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsDigit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsExtender\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsExtender as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsID\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsID as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsIdeographic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsIdeographic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsLetter\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsLetter as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsMixedElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsMixedElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsPubidChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsPubidChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlIsXHTML\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlIsXHTML as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlKeepBlanksDefault\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlKeepBlanksDefault as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLastElementChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLastElementChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLineNumbersDefault\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLineNumbersDefault as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLoadACatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLoadACatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLoadCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLoadCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLoadCatalogs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLoadCatalogs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLoadSGMLSuperCatalog\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLoadSGMLSuperCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLsCountNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLsCountNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlLsOneNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlLsOneNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlMemoryUsed\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlMemoryUsed as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNamespaceParseNCName\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNamespaceParseNCName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNamespaceParseNSDef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNamespaceParseNSDef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoFTPCleanup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoFTPCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoFTPInit\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoFTPInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoFTPProxy\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoFTPProxy as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoFTPScanProxy\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoFTPScanProxy as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoHTTPCleanup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoHTTPCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoHTTPInit\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoHTTPInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNanoHTTPScanProxy\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNanoHTTPScanProxy as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewCDataBlock\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewCDataBlock as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewCharRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewCharRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewComment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewComment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocComment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocComment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocFragment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocFragment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocNodeEatName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocNodeEatName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocPI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocPI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocRawNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocRawNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocText\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocText as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDocTextLen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDocTextLen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewDtd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewDtd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewGlobalNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewGlobalNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNodeEatName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNodeEatName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNsPropEatName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNsPropEatName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewPI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewPI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewReference\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewText\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewText as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewTextChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewTextChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewTextLen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewTextLen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewTextReader\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewTextReader as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewTextReaderFilename\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewTextReaderFilename as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewValidCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNextChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNextChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNextElementSibling\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNextElementSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeAddContent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeAddContent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeAddContentLen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeAddContentLen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeDumpOutput\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeDumpOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetBase\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetBase as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetContent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetContent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetLang\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetLang as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetNsDefs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetNsDefs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeGetSpacePreserve\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeGetSpacePreserve as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeIsText\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeIsText as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeListGetRawString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeListGetRawString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeListGetString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeListGetString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetBase\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetBase as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetContent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetContent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetContentLen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetContentLen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetLang\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetLang as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeSetSpacePreserve\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeSetSpacePreserve as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNormalizeURIPath\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNormalizeURIPath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNormalizeWindowsPath\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNormalizeWindowsPath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlOutputBufferGetContent\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlOutputBufferGetContent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlOutputBufferWrite\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlOutputBufferWrite as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlOutputBufferWriteString\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlOutputBufferWriteString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseAttValue\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseAttValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseAttributeListDecl\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseAttributeListDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseCDSect\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseCDSect as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseCatalogFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseCatalogFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseCharData\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseCharData as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseCharRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseCharRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseChunk\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseChunk as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseComment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseComment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseContent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseContent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseDTD\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseDTD as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseDocTypeDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseDocTypeDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseDocument\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseDocument as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseElementDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseElementDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEncName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEncName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEncodingDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEncodingDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEndTag\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEndTag as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEntity\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEntity as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEntityDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEntityDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseEntityRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseEntityRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseExtParsedEnt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseExtParsedEnt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseExternalSubset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseExternalSubset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseMarkupDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseMarkupDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseMisc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseMisc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseNamespace\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseNamespace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseNmtoken\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseNmtoken as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseNotationDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseNotationDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParsePEReference\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParsePEReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParsePI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParsePI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParsePITarget\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParsePITarget as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParsePubidLiteral\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParsePubidLiteral as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseQuotedString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseQuotedString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseReference\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseSDDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseSDDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseStartTag\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseStartTag as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseSystemLiteral\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseSystemLiteral as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseTextDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseTextDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseURIRaw\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseURIRaw as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseURIReference\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseURIReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseVersionInfo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseVersionInfo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseVersionNum\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseVersionNum as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParseXMLDecl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParseXMLDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserGetDirectory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserGetDirectory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserGetDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserGetDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserGetIsValid\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserGetIsValid as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserGetWellFormed\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserGetWellFormed as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserHandlePEReference\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserHandlePEReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserHandleReference\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserHandleReference as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserInputBufferGrow\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserInputBufferGrow as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserInputBufferPush\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserInputBufferPush as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserInputBufferRead\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserInputBufferRead as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserSetLineNumbers\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserSetLineNumbers as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserSetLoadSubset\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserSetLoadSubset as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserSetPedantic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserSetPedantic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserSetReplaceEntities\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserSetReplaceEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserSetValidate\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserSetValidate as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPathToURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPathToURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPedanticParserDefault\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPedanticParserDefault as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPopInput\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPopInput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPreviousElementSibling\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPreviousElementSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPrintURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPrintURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlPythonCleanupParser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlPythonCleanupParser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReadDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReadDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReadFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReadFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReadFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReadFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReadMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReadMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderForDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderForDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderForFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderForFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderForFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderForFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderForMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderForMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderNewDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderNewDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderNewFd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderNewFd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderNewFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderNewFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderNewMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderNewMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderNewWalker\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderNewWalker as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReaderWalker\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReaderWalker as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReconciliateNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReconciliateNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRecoverDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRecoverDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRecoverFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRecoverFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRecoverMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRecoverMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegFreeRegexp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegFreeRegexp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegexpCompile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegexpCompile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegexpExec\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegexpExec as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegexpIsDeterminist\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegexpIsDeterminist as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegexpPrint\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegexpPrint as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterDefaultInputCallbacks\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterDefaultInputCallbacks
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterDefaultOutputCallbacks\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterDefaultOutputCallbacks
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterHTTPPostCallbacks\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterHTTPPostCallbacks as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterXPathFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterXPathFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGCleanupTypes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGCleanupTypes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGDumpTree\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGDumpTree as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGFree\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGFree as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGFreeParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGFreeParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGInitTypes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGInitTypes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGNewDocParserCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGNewDocParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGNewMemParserCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGNewMemParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGNewParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGNewParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGNewValidCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGNewValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGParse\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGParse as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGValidateDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGValidateDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGValidateFullElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGValidateFullElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGValidatePopElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGValidatePopElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGValidatePushCData\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGValidatePushCData as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGValidatePushElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGValidatePushElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxParserSetFlag\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxParserSetFlag as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRemoveID\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRemoveID as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRemoveProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRemoveProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRemoveRef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRemoveRef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlReplaceNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlReplaceNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlResetError\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlResetError as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlResetLastError\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlResetLastError as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSAXDefaultVersion\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSAXDefaultVersion as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSAXParseFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSAXParseFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFileEnc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFileEnc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFormatFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFormatFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFormatFileEnc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFormatFileEnc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveUri\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveUri as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlScanName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlScanName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaCleanupTypes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaCleanupTypes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaCollapseString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaCollapseString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaDump\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaDump as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaFree\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaFree as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaFreeParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaFreeParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaInitTypes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaInitTypes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaIsValid\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaIsValid as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaNewDocParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaNewDocParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaNewMemParserCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaNewMemParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaNewParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaNewParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaNewValidCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaNewValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaParse\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaParse as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaSetValidOptions\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaSetValidOptions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidCtxtGetOptions\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidCtxtGetOptions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidCtxtGetParserCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidCtxtGetParserCtxt
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidateDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidateDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidateFile\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidateFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidateOneElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidateOneElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaValidateSetFilename\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaValidateSetFilename as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaWhiteSpaceReplace\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaWhiteSpaceReplace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSearchNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSearchNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSearchNsByHref\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSearchNsByHref as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetCompressMode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetCompressMode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetDocCompressMode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetDocCompressMode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetEntityLoader\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetEntityLoader as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetListDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetListDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetTreeDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetTreeDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetupParserForBuffer\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetupParserForBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlShellPrintNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlShellPrintNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlShellPrintXPathError\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlShellPrintXPathError as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSkipBlankChars\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSkipBlankChars as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStopParser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStopParser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrEqual\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrEqual as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrQEqual\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrQEqual as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrcasecmp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrcasecmp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrcasestr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrcasestr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrcat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrcat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrchr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrchr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrcmp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrcmp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrdup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrdup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStringDecodeEntities\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStringDecodeEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStringGetNodeList\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStringGetNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStringLenDecodeEntities\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStringLenDecodeEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStringLenGetNodeList\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStringLenGetNodeList as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrlen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrlen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrncasecmp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrncasecmp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrncat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrncat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrncatNew\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrncatNew as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrncmp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrncmp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrndup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrndup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrstr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrstr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlStrsub\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlStrsub as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSubstituteEntitiesDefault\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSubstituteEntitiesDefault as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextConcat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextConcat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextMerge\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextMerge as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderAttributeCount\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderAttributeCount as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderByteConsumed\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderByteConsumed as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderClose\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderClose as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstBaseUri\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstBaseUri as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstEncoding\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstEncoding as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstLocalName\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstLocalName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstNamespaceUri\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstNamespaceUri as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstPrefix\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstPrefix as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstValue\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstXmlLang\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstXmlLang as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderConstXmlVersion\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderConstXmlVersion as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderCurrentDoc\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderCurrentDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderCurrentNode\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderCurrentNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderDepth\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderDepth as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderExpand\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderExpand as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetAttribute\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetAttribute as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetAttributeNo\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetAttributeNo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetAttributeNs\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetAttributeNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetParserColumnNumber\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetParserColumnNumber
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetParserLineNumber\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetParserLineNumber
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetParserProp\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetParserProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetRemainder\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetRemainder as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderHasAttributes\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderHasAttributes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderHasValue\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderHasValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderIsDefault\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderIsDefault as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderIsEmptyElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderIsEmptyElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderIsNamespaceDecl\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderIsNamespaceDecl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderIsValid\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderIsValid as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderLocatorBaseURI\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderLocatorBaseURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderLocatorLineNumber\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderLocatorLineNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderLookupNamespace\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderLookupNamespace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToAttribute\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToAttribute as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToAttributeNo\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToAttributeNo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToAttributeNs\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToAttributeNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToElement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToFirstAttribute\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToFirstAttribute
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderMoveToNextAttribute\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderMoveToNextAttribute
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderNext\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderNext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderNextSibling\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderNextSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderNodeType\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderNodeType as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderNormalization\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderNormalization as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderPreserve\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderPreserve as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderQuoteChar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderQuoteChar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderRead\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderRead as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderReadAttributeValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderReadAttributeValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderReadInnerXml\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderReadInnerXml as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderReadOuterXml\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderReadOuterXml as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderReadState\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderReadState as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderReadString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderReadString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderRelaxNGSetSchema\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderRelaxNGSetSchema as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderRelaxNGValidate\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderRelaxNGValidate as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderRelaxNGValidateCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderRelaxNGValidateCtxt
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSchemaValidate\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSchemaValidate as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSchemaValidateCtxt\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSchemaValidateCtxt
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSetParserProp\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSetParserProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSetSchema\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSetSchema as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSetup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSetup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderStandalone\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderStandalone as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefDefaultBufferSize\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefDefaultBufferSize as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefDoValidityCheckingDefaultValue\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefDoValidityCheckingDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefGetWarningsDefaultValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefGetWarningsDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefIndentTreeOutput\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefIndentTreeOutput as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefKeepBlanksDefaultValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefKeepBlanksDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefLineNumbersDefaultValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefLineNumbersDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefLoadExtDtdDefaultValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefLoadExtDtdDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefParserDebugEntities\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefParserDebugEntities as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefPedanticParserDefaultValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefPedanticParserDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefSaveNoEmptyTags\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefSaveNoEmptyTags as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefSubstituteEntitiesDefaultValue\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefSubstituteEntitiesDefaultValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlThrDefTreeIndentString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlThrDefTreeIndentString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsAegeanNumbers\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsAegeanNumbers as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsAlphabeticPresentationForms\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsAlphabeticPresentationForms
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsArabic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsArabic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsArabicPresentationFormsA\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsArabicPresentationFormsA
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsArabicPresentationFormsB\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsArabicPresentationFormsB
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsArmenian\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsArmenian as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsArrows\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsArrows as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBasicLatin\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBasicLatin as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBengali\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBengali as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBlock\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBlock as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBlockElements\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBlockElements as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBopomofo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBopomofo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBopomofoExtended\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBopomofoExtended as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBoxDrawing\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBoxDrawing as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBraillePatterns\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBraillePatterns as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsBuhid\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsBuhid as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsByzantineMusicalSymbols\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsByzantineMusicalSymbols
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKCompatibility\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKCompatibility as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKCompatibilityForms\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKCompatibilityForms as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKCompatibilityIdeographs\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKCompatibilityIdeographs
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKCompatibilityIdeographsSupplement\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKRadicalsSupplement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKRadicalsSupplement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKSymbolsandPunctuation\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKSymbolsandPunctuation
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKUnifiedIdeographs\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKUnifiedIdeographs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKUnifiedIdeographsExtensionA\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCJKUnifiedIdeographsExtensionB\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatC\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatC as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatCc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatCc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatCf\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatCf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatCo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatCo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatCs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatCs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatL\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatL as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatLl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatLl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatLm\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatLm as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatLo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatLo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatLt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatLt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatLu\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatLu as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatM\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatM as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatMc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatMc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatMe\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatMe as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatMn\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatMn as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatN\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatN as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatNd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatNd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatNl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatNl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatNo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatNo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatP\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatP as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPe\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPe as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPf\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPi\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPi as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatPs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatPs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatS\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatS as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatSc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatSc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatSk\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatSk as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatSm\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatSm as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatSo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatSo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatZ\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatZ as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatZl\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatZl as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatZp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatZp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCatZs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCatZs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCherokee\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCherokee as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCombiningDiacriticalMarks\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCombiningDiacriticalMarks
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCombiningDiacriticalMarksforSymbols\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCombiningHalfMarks\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCombiningHalfMarks as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCombiningMarksforSymbols\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCombiningMarksforSymbols
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsControlPictures\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsControlPictures as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCurrencySymbols\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCurrencySymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCypriotSyllabary\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCypriotSyllabary as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCyrillic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCyrillic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsCyrillicSupplement\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsCyrillicSupplement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsDeseret\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsDeseret as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsDevanagari\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsDevanagari as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsDingbats\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsDingbats as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsEnclosedAlphanumerics\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsEnclosedAlphanumerics as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsEnclosedCJKLettersandMonths\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsEnclosedCJKLettersandMonths
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsEthiopic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsEthiopic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGeneralPunctuation\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGeneralPunctuation as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGeometricShapes\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGeometricShapes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGeorgian\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGeorgian as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGothic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGothic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGreek\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGreek as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGreekExtended\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGreekExtended as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGreekandCoptic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGreekandCoptic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGujarati\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGujarati as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsGurmukhi\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsGurmukhi as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHalfwidthandFullwidthForms\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHalfwidthandFullwidthForms
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHangulCompatibilityJamo\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHangulCompatibilityJamo
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHangulJamo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHangulJamo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHangulSyllables\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHangulSyllables as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHanunoo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHanunoo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHebrew\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHebrew as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHighPrivateUseSurrogates\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHighPrivateUseSurrogates
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHighSurrogates\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHighSurrogates as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsHiragana\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsHiragana as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsIPAExtensions\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsIPAExtensions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsIdeographicDescriptionCharacters\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsIdeographicDescriptionCharacters
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKanbun\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKanbun as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKangxiRadicals\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKangxiRadicals as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKannada\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKannada as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKatakana\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKatakana as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKatakanaPhoneticExtensions\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKatakanaPhoneticExtensions
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKhmer\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKhmer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsKhmerSymbols\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsKhmerSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLao\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLao as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLatin1Supplement\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLatin1Supplement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLatinExtendedA\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLatinExtendedA as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLatinExtendedAdditional\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLatinExtendedAdditional
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLatinExtendedB\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLatinExtendedB as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLetterlikeSymbols\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLetterlikeSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLimbu\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLimbu as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLinearBIdeograms\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLinearBIdeograms as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLinearBSyllabary\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLinearBSyllabary as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsLowSurrogates\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsLowSurrogates as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMalayalam\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMalayalam as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMathematicalAlphanumericSymbols\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMathematicalAlphanumericSymbols
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMathematicalOperators\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMathematicalOperators as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMiscellaneousMathematicalSymbolsA\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMiscellaneousMathematicalSymbolsB\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMiscellaneousSymbols\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMiscellaneousSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMiscellaneousSymbolsandArrows\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMiscellaneousSymbolsandArrows
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMiscellaneousTechnical\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMiscellaneousTechnical as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMongolian\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMongolian as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMusicalSymbols\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMusicalSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsMyanmar\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsMyanmar as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsNumberForms\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsNumberForms as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsOgham\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsOgham as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsOldItalic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsOldItalic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsOpticalCharacterRecognition\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsOpticalCharacterRecognition
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsOriya\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsOriya as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsOsmanya\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsOsmanya as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsPhoneticExtensions\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsPhoneticExtensions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsPrivateUse\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsPrivateUse as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsPrivateUseArea\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsPrivateUseArea as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsRunic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsRunic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsShavian\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsShavian as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSinhala\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSinhala as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSmallFormVariants\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSmallFormVariants as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSpacingModifierLetters\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSpacingModifierLetters as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSpecials\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSpecials as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSuperscriptsandSubscripts\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSuperscriptsandSubscripts
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSupplementalArrowsA\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSupplementalArrowsA as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSupplementalArrowsB\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSupplementalArrowsB as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSupplementalMathematicalOperators\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSupplementalMathematicalOperators
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSupplementaryPrivateUseAreaA\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSupplementaryPrivateUseAreaA
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSupplementaryPrivateUseAreaB\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSupplementaryPrivateUseAreaB
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsSyriac\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsSyriac as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTagalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTagalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTagbanwa\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTagbanwa as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTags\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTags as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTaiLe\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTaiLe as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTaiXuanJingSymbols\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTaiXuanJingSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTamil\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTamil as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTelugu\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTelugu as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsThaana\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsThaana as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsThai\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsThai as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsTibetan\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsTibetan as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsUgaritic\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsUgaritic as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsUnifiedCanadianAboriginalSyllabics\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsVariationSelectors\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsVariationSelectors as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsVariationSelectorsSupplement\x00"
                                     as *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsVariationSelectorsSupplement
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsYiRadicals\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsYiRadicals as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsYiSyllables\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsYiSyllables as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUCSIsYijingHexagramSymbols\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUCSIsYijingHexagramSymbols as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIEscape\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIEscape as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIEscapeStr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIEscapeStr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetAuthority\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetAuthority as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetFragment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetFragment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetOpaque\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetOpaque as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetPath\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetPath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetPort\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetPort as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetQuery\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetQuery as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetQueryRaw\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetQueryRaw as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetScheme\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetScheme as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetServer\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetServer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIGetUser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIGetUser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetAuthority\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetAuthority as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetFragment\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetFragment as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetOpaque\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetOpaque as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetPath\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetPath as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetPort\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetPort as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetQuery\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetQuery as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetQueryRaw\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetQueryRaw as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetScheme\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetScheme as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetServer\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetServer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURISetUser\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURISetUser as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlURIUnescapeString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlURIUnescapeString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Charcmp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Charcmp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Size\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Size as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strlen\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strlen as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strloc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strloc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strndup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strndup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strpos\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strpos as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strsize\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strsize as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUTF8Strsub\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUTF8Strsub as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUnlinkNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUnlinkNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUnsetNsProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUnsetNsProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUnsetProp\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUnsetProp as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidCtxtNormalizeAttributeValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidCtxtNormalizeAttributeValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidNormalizeAttributeValue\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidNormalizeAttributeValue
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateDocument\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateDocument as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateDocumentFinal\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateDocumentFinal as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateDtd\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateDtd as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateDtdFinal\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateDtdFinal as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNCName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNCName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNMToken\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNMToken as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNameValue\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNameValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNamesValue\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNamesValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNmtokenValue\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNmtokenValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNmtokensValue\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNmtokensValue as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateNotationUse\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateNotationUse as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateOneAttribute\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateOneAttribute as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateOneElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateOneElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateOneNamespace\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateOneNamespace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidatePopElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidatePopElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidatePushCData\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidatePushCData as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidatePushElement\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidatePushElement as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateQName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateQName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlValidateRoot\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlValidateRoot as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXIncludeProcess\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXIncludeProcess as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXIncludeProcessFlags\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXIncludeProcessFlags as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXIncludeProcessTree\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXIncludeProcessTree as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXIncludeProcessTreeFlags\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXIncludeProcessTreeFlags as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathAddValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathAddValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathBooleanFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathBooleanFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastBooleanToNumber\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastBooleanToNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastBooleanToString\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastBooleanToString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastNodeToNumber\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastNodeToNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastNodeToString\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastNodeToString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastNumberToBoolean\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastNumberToBoolean as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastNumberToString\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastNumberToString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastStringToBoolean\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastStringToBoolean as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCastStringToNumber\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCastStringToNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCeilingFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCeilingFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCmpNodes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCmpNodes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCompareValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCompareValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathConcatFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathConcatFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathContainsFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathContainsFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathContextSetCache\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathContextSetCache as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathCountFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathCountFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathDivValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathDivValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathEqualValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathEqualValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathErr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathErr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathEval\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathEval as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathEvalExpr\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathEvalExpr as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathEvalExpression\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathEvalExpression as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathFalseFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathFalseFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathFloorFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathFloorFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathFreeContext\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathFreeContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathFreeParserContext\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathFreeParserContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetContextDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetContextDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetContextNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetContextNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetContextPosition\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetContextPosition as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetContextSize\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetContextSize as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathGetFunctionURI\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathGetFunctionURI as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathIdFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathIdFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathInit\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathInit as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathIsInf\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathIsInf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathIsNaN\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathIsNaN as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathIsNodeType\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathIsNodeType as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathLangFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathLangFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathLastFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathLastFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathLocalNameFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathLocalNameFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathModValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathModValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathMultValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathMultValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNamespaceURIFunction\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNamespaceURIFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewBoolean\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewBoolean as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewCString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewCString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewContext\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewFloat\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewFloat as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewNodeSet\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewNodeSet as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewParserContext\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewParserContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNewValueTree\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNewValueTree as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextAncestor\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextAncestor as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextAncestorOrSelf\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextAncestorOrSelf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextAttribute\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextAttribute as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextChild\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextChild as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextDescendant\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextDescendant as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextDescendantOrSelf\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextDescendantOrSelf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextFollowing\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextFollowing as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextFollowingSibling\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextFollowingSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextNamespace\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextNamespace as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextParent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextParent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextPreceding\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextPreceding as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextPrecedingSibling\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextPrecedingSibling as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNextSelf\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNextSelf as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNodeEval\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNodeEval as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNodeSetFreeNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNodeSetFreeNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNormalizeFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNormalizeFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNotEqualValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNotEqualValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNotFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNotFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNsLookup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNsLookup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathNumberFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathNumberFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathOrderDocElems\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathOrderDocElems as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathParseNCName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathParseNCName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathParseName\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathParseName as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathParserGetContext\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathParserGetContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathPopBoolean\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathPopBoolean as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathPopNumber\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathPopNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathPopString\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathPopString as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathPositionFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathPositionFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisterAllFunctions\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisterAllFunctions as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisterNs\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisterNs as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisterVariable\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisterVariable as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisteredFuncsCleanup\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisteredFuncsCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisteredNsCleanup\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisteredNsCleanup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRegisteredVariablesCleanup\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRegisteredVariablesCleanup
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRoot\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRoot as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathRoundFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathRoundFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSetContextDoc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSetContextDoc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSetContextNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSetContextNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathStartsWithFunction\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathStartsWithFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathStringEvalNumber\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathStringEvalNumber as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathStringFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathStringFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathStringLengthFunction\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathStringLengthFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSubValues\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSubValues as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSubstringAfterFunction\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSubstringAfterFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSubstringBeforeFunction\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSubstringBeforeFunction
                                          as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSubstringFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSubstringFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathSumFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathSumFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathTranslateFunction\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathTranslateFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathTrueFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathTrueFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathValueFlipSign\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathValueFlipSign as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathVariableLookup\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathVariableLookup as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPathVariableLookupNS\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPathVariableLookupNS as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPatherror\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPatherror as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrEval\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrEval as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrEvalRangePredicate\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrEvalRangePredicate as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrNewCollapsedRange\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrNewCollapsedRange as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrNewContext\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrNewContext as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrNewLocationSetNodes\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrNewLocationSetNodes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrNewRange\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrNewRange as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrNewRangeNodes\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrNewRangeNodes as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlXPtrRangeToFunction\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlXPtrRangeToFunction as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"name\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_name as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"children\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_children as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"properties\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_properties as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"last\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_last as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"prev\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_prev as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"next\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_next as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"parent\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_parent as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"type\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_type as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"doc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_doc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNewNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNewNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlNodeRemoveNsDef\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlNodeRemoveNsDef as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSetValidErrors\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetValidErrors as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeValidCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"serializeNode\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_serializeNode as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"saveNodeTo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_saveNodeTo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"outputBufferCreate\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateOutputBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"outputBufferGetPythonFile\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_outputBufferGetPythonFile as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlOutputBufferClose\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlOutputBufferClose as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlOutputBufferFlush\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlOutputBufferFlush as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFileTo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFileTo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSaveFormatFileTo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSaveFormatFileTo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"inputBufferCreate\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlCreateInputBuffer as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"setEntityLoader\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSetEntityLoader as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterErrorHandler\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterErrorHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserCtxtSetErrorHandler\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserCtxtSetErrorHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlParserCtxtGetErrorHandler\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlParserCtxtGetErrorHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeParserCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeParserCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderSetErrorHandler\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderSetErrorHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlTextReaderGetErrorHandler\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlTextReaderGetErrorHandler as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlFreeTextReader\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlFreeTextReader as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"addLocalCatalog\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_addLocalCatalog as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGSetValidErrors\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGSetValidErrors as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRelaxNGFreeValidCtxt\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRelaxNGFreeValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaSetValidErrors\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaSetValidErrors as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlSchemaFreeValidCtxt\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlSchemaFreeValidCtxt as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlC14NDocDumpMemory\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_C14NDocDumpMemory as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlC14NDocSaveTo\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_C14NDocSaveTo as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"getObjDesc\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_getObjDesc as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"compareNodesEqual\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_compareNodesEqual as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"nodeHash\x00" as *const u8 as
                                     *const std::os::raw::c_char as *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_nodeHash as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlRegisterInputCallback\x00" as *const u8
                                     as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlRegisterInputCallback as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name:
                                 b"xmlUnregisterInputCallback\x00" as
                                     *const u8 as *const std::os::raw::c_char as
                                     *mut std::os::raw::c_char,
                             ml_meth:
                                 Some(libxml_xmlUnregisterInputCallback as
                                          unsafe extern "C" fn(_:
                                                                   *mut PyObject,
                                                               _:
                                                                   *mut PyObject)
                                              -> *mut PyObject),
                             ml_flags: 0x1 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         },
         {
             let mut init =
                 PyMethodDef{ml_name: 0 as *const std::os::raw::c_char,
                             ml_meth: None,
                             ml_flags: 0 as std::os::raw::c_int,
                             ml_doc: 0 as *const std::os::raw::c_char,};
             init
         }]
    };
/*
 * libxml.c: this modules implements the main part of the glue of the
 *           libxml2 library and the Python interpreter. It provides the
 *           entry points where an automatically generated stub is either
 *           unpractical or would not match cleanly the Python model.
 *
 * If compiled with MERGED_MODULES, the entry point will be used to
 * initialize both the libxml2 and the libxslt wrappers
 *
 * See Copyright for the status of this software.
 *
 * daniel@veillard.com
 */
/* #include "config.h" */
/* #define DEBUG */
/* #define DEBUG_SAX */
/* #define DEBUG_XPATH */
/* #define DEBUG_ERROR */
/* #define DEBUG_MEMORY */
/* #define DEBUG_FILES */
/* #define DEBUG_LOADER */
#[no_mangle]
pub unsafe extern "C" fn initlibxml2mod() {
    let mut module: *mut PyObject = 0 as *mut PyObject;
    /* intialize the python extension module */
    module =
        Py_InitModule4_64(b"libxml2mod\x00" as *const u8 as
                              *const std::os::raw::c_char as *mut std::os::raw::c_char,
                          libxmlMethods.as_mut_ptr(),
                          0 as *mut std::os::raw::c_void as *mut std::os::raw::c_char,
                          0 as *mut std::os::raw::c_void as *mut PyObject,
                          1013 as std::os::raw::c_int);
    if module.is_null() { return }
    /* initialize libxml2 */
    xmlInitParser();
    /* TODO this probably need to be revamped for Python3 */
    libxml_xmlErrorInitialize();
}

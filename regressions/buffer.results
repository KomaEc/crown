Solving src::buffer::buffer_free with precision 1... ✅
Solving src::buffer::buffer_compact with precision 1... ✅
Solving src::buffer::buffer_new_with_size with precision 1... ✅
Solving src::buffer::buffer_new_with_string_length with precision 1... ✅
Solving src::buffer::buffer_resize with precision 1... ✅
Solving src::buffer::buffer_new with precision 1... ✅
Solving src::buffer::buffer_new_with_string with precision 1... ✅
Solving src::buffer::buffer_new_with_copy with precision 1... ✅
Solving src::buffer::buffer_size with precision 1... ✅
Solving src::buffer::buffer_length with precision 1... ✅
Solving src::buffer::buffer_append with precision 1... ✅
Solving src::buffer::buffer_append_n with precision 1... ✅
Solving src::buffer::buffer_prepend with precision 1... ✅
Solving src::buffer::buffer_slice with precision 1... ✅
Solving src::buffer::buffer_equals with precision 1... ✅
Solving src::buffer::buffer_indexof with precision 1... ✅
Solving src::buffer::buffer_trim_left with precision 1... ✅
Solving src::buffer::buffer_trim_right with precision 1... ✅
Solving src::buffer::buffer_trim with precision 1... ✅
Solving src::buffer::buffer_fill with precision 1... ✅
Solving src::buffer::buffer_clear with precision 1... ✅
Solving src::buffer::buffer_print with precision 1... ✅
Solving src::test::equal with precision 1... ✅
Solving src::test::test_buffer_new with precision 1... ✅
Solving src::test::test_buffer_new_with_size with precision 1... ✅
Solving src::test::test_buffer_append with precision 1... ✅
Solving src::test::test_buffer_append_n with precision 1... ✅
Solving src::test::test_buffer_append__grow with precision 1... ✅
Solving src::test::test_buffer_prepend with precision 1... ✅
Solving src::test::test_buffer_slice with precision 1... ✅
Solving src::test::test_buffer_slice__range_error with precision 1... ✅
Solving src::test::test_buffer_slice__end with precision 1... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 1... ✅
Solving src::test::test_buffer_equals with precision 1... ✅
Solving src::test::test_buffer_indexof with precision 1... ✅
Solving src::test::test_buffer_fill with precision 1... ✅
Solving src::test::test_buffer_clear with precision 1... ✅
Solving src::test::test_buffer_trim with precision 1... ✅
Solving src::test::test_buffer_compact with precision 1... ✅
Solving src::test::main_0 with precision 1... ✅
Solving src::test::main with precision 1... ✅
src::buffer::buffer_free: (&move) -> _
src::buffer::buffer_compact: (&uniq  ↓ &uniq ) -> _
src::buffer::buffer_new_with_size: (_) -> &move
src::buffer::buffer_new_with_string_length: (&, _) -> &move
src::buffer::buffer_resize: (&uniq  ↓ &uniq , _) -> _
src::buffer::buffer_new: () -> &move
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> &move
src::buffer::buffer_new_with_copy: (&) -> &move
src::buffer::buffer_size: (&) -> _
src::buffer::buffer_length: (&) -> _
src::buffer::buffer_append: (&uniq  ↓ &uniq , &) -> _
src::buffer::buffer_append_n: (&uniq  ↓ &uniq , &, _) -> _
src::buffer::buffer_prepend: (&uniq  ↓ &uniq , &) -> _
src::buffer::buffer_slice: (&, _, _) -> &move
src::buffer::buffer_equals: (&, &) -> _
src::buffer::buffer_indexof: (&, &) -> _
src::buffer::buffer_trim_left: (&uniq  ↓ &uniq ) -> _
src::buffer::buffer_trim_right: (&uniq  ↓ &uniq ) -> _
src::buffer::buffer_trim: (&uniq  ↓ &uniq ) -> _
src::buffer::buffer_fill: (&uniq  ↓ &uniq , _) -> _
src::buffer::buffer_clear: (&uniq  ↓ &uniq ) -> _
src::buffer::buffer_print: (&) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
Solving src::buffer::buffer_free with precision 2... ✅
Solving src::buffer::buffer_compact with precision 2... ✅
Solving src::buffer::buffer_new_with_size with precision 2... ✅
Solving src::buffer::buffer_new_with_string_length with precision 2... ❌
Solving src::buffer::buffer_resize with precision 2... ✅
Solving src::buffer::buffer_new with precision 2... ✅
Solving src::buffer::buffer_new_with_string with precision 2... ✅
Solving src::buffer::buffer_new_with_copy with precision 2... ✅
Solving src::buffer::buffer_size with precision 2... ✅
Solving src::buffer::buffer_length with precision 2... ✅
Solving src::buffer::buffer_append with precision 2... ✅
Solving src::buffer::buffer_append_n with precision 2... ✅
Solving src::buffer::buffer_prepend with precision 2... ✅
Solving src::buffer::buffer_slice with precision 2... ✅
Solving src::buffer::buffer_equals with precision 2... ✅
Solving src::buffer::buffer_indexof with precision 2... ✅
Solving src::buffer::buffer_trim_left with precision 2... ✅
Solving src::buffer::buffer_trim_right with precision 2... ✅
Solving src::buffer::buffer_trim with precision 2... ✅
Solving src::buffer::buffer_fill with precision 2... ✅
Solving src::buffer::buffer_clear with precision 2... ✅
Solving src::buffer::buffer_print with precision 2... ✅
Solving src::test::equal with precision 2... ✅
Solving src::test::test_buffer_new with precision 2... ✅
Solving src::test::test_buffer_new_with_size with precision 2... ✅
Solving src::test::test_buffer_append with precision 2... ✅
Solving src::test::test_buffer_append_n with precision 2... ✅
Solving src::test::test_buffer_append__grow with precision 2... ✅
Solving src::test::test_buffer_prepend with precision 2... ✅
Solving src::test::test_buffer_slice with precision 2... ✅
Solving src::test::test_buffer_slice__range_error with precision 2... ✅
Solving src::test::test_buffer_slice__end with precision 2... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 2... ✅
Solving src::test::test_buffer_equals with precision 2... ✅
Solving src::test::test_buffer_indexof with precision 2... ✅
Solving src::test::test_buffer_fill with precision 2... ✅
Solving src::test::test_buffer_clear with precision 2... ✅
Solving src::test::test_buffer_trim with precision 2... ✅
Solving src::test::test_buffer_compact with precision 2... ✅
Solving src::test::main_0 with precision 2... ✅
Solving src::test::main with precision 2... ✅
src::buffer::buffer_free: (&move &move &) -> _
src::buffer::buffer_compact: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_new_with_size: (_) -> &move &move &
src::buffer::buffer_new_with_string_length: (&, _) -> & & &
src::buffer::buffer_resize: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_new: () -> &move &move &
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> & & &
src::buffer::buffer_new_with_copy: (&) -> &move &move &
src::buffer::buffer_size: (& & &) -> _
src::buffer::buffer_length: (& & &) -> _
src::buffer::buffer_append: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_append_n: (&uniq &move & ↓ &uniq &move &, &, _) -> _
src::buffer::buffer_prepend: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_slice: (& & &, _, _) -> &move &move &
src::buffer::buffer_equals: (& & &, & & &) -> _
src::buffer::buffer_indexof: (& & &, &) -> _
src::buffer::buffer_trim_left: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim_right: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_fill: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_clear: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_print: (& & &) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
Solving src::buffer::buffer_free with precision 3... ✅
Solving src::buffer::buffer_compact with precision 3... ✅
Solving src::buffer::buffer_new_with_size with precision 3... ✅
Solving src::buffer::buffer_new_with_string_length with precision 2... ❌
Solving src::buffer::buffer_resize with precision 3... ✅
Solving src::buffer::buffer_new with precision 3... ✅
Solving src::buffer::buffer_new_with_string with precision 3... ✅
Solving src::buffer::buffer_new_with_copy with precision 3... ✅
Solving src::buffer::buffer_size with precision 3... ✅
Solving src::buffer::buffer_length with precision 3... ✅
Solving src::buffer::buffer_append with precision 3... ✅
Solving src::buffer::buffer_append_n with precision 3... ✅
Solving src::buffer::buffer_prepend with precision 3... ✅
Solving src::buffer::buffer_slice with precision 3... ✅
Solving src::buffer::buffer_equals with precision 3... ✅
Solving src::buffer::buffer_indexof with precision 3... ✅
Solving src::buffer::buffer_trim_left with precision 3... ✅
Solving src::buffer::buffer_trim_right with precision 3... ✅
Solving src::buffer::buffer_trim with precision 3... ✅
Solving src::buffer::buffer_fill with precision 3... ✅
Solving src::buffer::buffer_clear with precision 3... ✅
Solving src::buffer::buffer_print with precision 3... ✅
Solving src::test::equal with precision 3... ✅
Solving src::test::test_buffer_new with precision 3... ✅
Solving src::test::test_buffer_new_with_size with precision 3... ✅
Solving src::test::test_buffer_append with precision 3... ✅
Solving src::test::test_buffer_append_n with precision 3... ✅
Solving src::test::test_buffer_append__grow with precision 3... ✅
Solving src::test::test_buffer_prepend with precision 3... ✅
Solving src::test::test_buffer_slice with precision 3... ✅
Solving src::test::test_buffer_slice__range_error with precision 3... ✅
Solving src::test::test_buffer_slice__end with precision 3... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 3... ✅
Solving src::test::test_buffer_equals with precision 3... ✅
Solving src::test::test_buffer_indexof with precision 3... ✅
Solving src::test::test_buffer_fill with precision 3... ✅
Solving src::test::test_buffer_clear with precision 3... ✅
Solving src::test::test_buffer_trim with precision 3... ✅
Solving src::test::test_buffer_compact with precision 3... ✅
Solving src::test::main_0 with precision 3... ✅
Solving src::test::main with precision 3... ✅
src::buffer::buffer_free: (&move &move &) -> _
src::buffer::buffer_compact: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_new_with_size: (_) -> &move &move &
src::buffer::buffer_new_with_string_length: (&, _) -> & & &
src::buffer::buffer_resize: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_new: () -> &move &move &
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> & & &
src::buffer::buffer_new_with_copy: (&) -> &move &move &
src::buffer::buffer_size: (& & &) -> _
src::buffer::buffer_length: (& & &) -> _
src::buffer::buffer_append: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_append_n: (&uniq &move & ↓ &uniq &move &, &, _) -> _
src::buffer::buffer_prepend: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_slice: (& & &, _, _) -> &move &move &
src::buffer::buffer_equals: (& & &, & & &) -> _
src::buffer::buffer_indexof: (& & &, &) -> _
src::buffer::buffer_trim_left: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim_right: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_fill: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_clear: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_print: (& & &) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
Solving src::buffer::buffer_free with precision 3... ✅
Solving src::buffer::buffer_compact with precision 3... ✅
Solving src::buffer::buffer_new_with_size with precision 3... ✅
Solving src::buffer::buffer_new_with_string_length with precision 1... ✅
Solving src::buffer::buffer_resize with precision 3... ✅
Solving src::buffer::buffer_new with precision 3... ✅
Solving src::buffer::buffer_new_with_string with precision 3... ✅
Solving src::buffer::buffer_new_with_copy with precision 3... ✅
Solving src::buffer::buffer_size with precision 3... ✅
Solving src::buffer::buffer_length with precision 3... ✅
Solving src::buffer::buffer_append with precision 3... ✅
Solving src::buffer::buffer_append_n with precision 3... ✅
Solving src::buffer::buffer_prepend with precision 3... ✅
Solving src::buffer::buffer_slice with precision 3... ✅
Solving src::buffer::buffer_equals with precision 3... ✅
Solving src::buffer::buffer_indexof with precision 3... ✅
Solving src::buffer::buffer_trim_left with precision 3... ✅
Solving src::buffer::buffer_trim_right with precision 3... ✅
Solving src::buffer::buffer_trim with precision 3... ✅
Solving src::buffer::buffer_fill with precision 3... ✅
Solving src::buffer::buffer_clear with precision 3... ✅
Solving src::buffer::buffer_print with precision 3... ✅
Solving src::test::equal with precision 3... ✅
Solving src::test::test_buffer_new with precision 3... ✅
Solving src::test::test_buffer_new_with_size with precision 3... ✅
Solving src::test::test_buffer_append with precision 3... ✅
Solving src::test::test_buffer_append_n with precision 3... ✅
Solving src::test::test_buffer_append__grow with precision 3... ✅
Solving src::test::test_buffer_prepend with precision 3... ✅
Solving src::test::test_buffer_slice with precision 3... ✅
Solving src::test::test_buffer_slice__range_error with precision 3... ✅
Solving src::test::test_buffer_slice__end with precision 3... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 3... ✅
Solving src::test::test_buffer_equals with precision 3... ✅
Solving src::test::test_buffer_indexof with precision 3... ✅
Solving src::test::test_buffer_fill with precision 3... ✅
Solving src::test::test_buffer_clear with precision 3... ✅
Solving src::test::test_buffer_trim with precision 3... ✅
Solving src::test::test_buffer_compact with precision 3... ✅
Solving src::test::main_0 with precision 3... ✅
Solving src::test::main with precision 3... ✅
src::buffer::buffer_free: (&move &move &) -> _
src::buffer::buffer_compact: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_new_with_size: (_) -> &move &move &
src::buffer::buffer_new_with_string_length: (&, _) -> &move
src::buffer::buffer_resize: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_new: () -> &move &move &
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> &move &move &
src::buffer::buffer_new_with_copy: (&) -> &move &move &
src::buffer::buffer_size: (& & &) -> _
src::buffer::buffer_length: (& & &) -> _
src::buffer::buffer_append: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_append_n: (&uniq &move & ↓ &uniq &move &, &, _) -> _
src::buffer::buffer_prepend: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_slice: (& & &, _, _) -> &move &move &
src::buffer::buffer_equals: (& & &, & & &) -> _
src::buffer::buffer_indexof: (& & &, &) -> _
src::buffer::buffer_trim_left: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim_right: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_fill: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_clear: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_print: (& & &) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
Solving src::buffer::buffer_free with precision 3... ✅
Solving src::buffer::buffer_compact with precision 3... ✅
Solving src::buffer::buffer_new_with_size with precision 3... ✅
Solving src::buffer::buffer_new_with_string_length with precision 1... ✅
Solving src::buffer::buffer_resize with precision 3... ✅
Solving src::buffer::buffer_new with precision 3... ✅
Solving src::buffer::buffer_new_with_string with precision 3... ✅
Solving src::buffer::buffer_new_with_copy with precision 3... ✅
Solving src::buffer::buffer_size with precision 3... ✅
Solving src::buffer::buffer_length with precision 3... ✅
Solving src::buffer::buffer_append with precision 3... ✅
Solving src::buffer::buffer_append_n with precision 3... ✅
Solving src::buffer::buffer_prepend with precision 3... ✅
Solving src::buffer::buffer_slice with precision 3... ✅
Solving src::buffer::buffer_equals with precision 3... ✅
Solving src::buffer::buffer_indexof with precision 3... ✅
Solving src::buffer::buffer_trim_left with precision 3... ✅
Solving src::buffer::buffer_trim_right with precision 3... ✅
Solving src::buffer::buffer_trim with precision 3... ✅
Solving src::buffer::buffer_fill with precision 3... ✅
Solving src::buffer::buffer_clear with precision 3... ✅
Solving src::buffer::buffer_print with precision 3... ✅
Solving src::test::equal with precision 3... ✅
Solving src::test::test_buffer_new with precision 3... ✅
Solving src::test::test_buffer_new_with_size with precision 3... ✅
Solving src::test::test_buffer_append with precision 3... ✅
Solving src::test::test_buffer_append_n with precision 3... ✅
Solving src::test::test_buffer_append__grow with precision 3... ✅
Solving src::test::test_buffer_prepend with precision 3... ✅
Solving src::test::test_buffer_slice with precision 3... ✅
Solving src::test::test_buffer_slice__range_error with precision 3... ✅
Solving src::test::test_buffer_slice__end with precision 3... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 3... ✅
Solving src::test::test_buffer_equals with precision 3... ✅
Solving src::test::test_buffer_indexof with precision 3... ✅
Solving src::test::test_buffer_fill with precision 3... ✅
Solving src::test::test_buffer_clear with precision 3... ✅
Solving src::test::test_buffer_trim with precision 3... ✅
Solving src::test::test_buffer_compact with precision 3... ✅
Solving src::test::main_0 with precision 3... ✅
Solving src::test::main with precision 3... ✅
src::buffer::buffer_free: (&move &move &) -> _
src::buffer::buffer_compact: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_new_with_size: (_) -> &move &move &
src::buffer::buffer_new_with_string_length: (&, _) -> &move
src::buffer::buffer_resize: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_new: () -> &move &move &
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> &move &move &
src::buffer::buffer_new_with_copy: (&) -> &move &move &
src::buffer::buffer_size: (& & &) -> _
src::buffer::buffer_length: (& & &) -> _
src::buffer::buffer_append: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_append_n: (&uniq &move & ↓ &uniq &move &, &, _) -> _
src::buffer::buffer_prepend: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_slice: (& & &, _, _) -> &move &move &
src::buffer::buffer_equals: (& & &, & & &) -> _
src::buffer::buffer_indexof: (& & &, &) -> _
src::buffer::buffer_trim_left: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim_right: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_fill: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_clear: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_print: (& & &) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
Solving src::buffer::buffer_free with precision 3... ✅
Solving src::buffer::buffer_compact with precision 3... ✅
Solving src::buffer::buffer_new_with_size with precision 3... ✅
Solving src::buffer::buffer_new_with_string_length with precision 1... ✅
Solving src::buffer::buffer_resize with precision 3... ✅
Solving src::buffer::buffer_new with precision 3... ✅
Solving src::buffer::buffer_new_with_string with precision 3... ✅
Solving src::buffer::buffer_new_with_copy with precision 3... ✅
Solving src::buffer::buffer_size with precision 3... ✅
Solving src::buffer::buffer_length with precision 3... ✅
Solving src::buffer::buffer_append with precision 3... ✅
Solving src::buffer::buffer_append_n with precision 3... ✅
Solving src::buffer::buffer_prepend with precision 3... ✅
Solving src::buffer::buffer_slice with precision 3... ✅
Solving src::buffer::buffer_equals with precision 3... ✅
Solving src::buffer::buffer_indexof with precision 3... ✅
Solving src::buffer::buffer_trim_left with precision 3... ✅
Solving src::buffer::buffer_trim_right with precision 3... ✅
Solving src::buffer::buffer_trim with precision 3... ✅
Solving src::buffer::buffer_fill with precision 3... ✅
Solving src::buffer::buffer_clear with precision 3... ✅
Solving src::buffer::buffer_print with precision 3... ✅
Solving src::test::equal with precision 3... ✅
Solving src::test::test_buffer_new with precision 3... ✅
Solving src::test::test_buffer_new_with_size with precision 3... ✅
Solving src::test::test_buffer_append with precision 3... ✅
Solving src::test::test_buffer_append_n with precision 3... ✅
Solving src::test::test_buffer_append__grow with precision 3... ✅
Solving src::test::test_buffer_prepend with precision 3... ✅
Solving src::test::test_buffer_slice with precision 3... ✅
Solving src::test::test_buffer_slice__range_error with precision 3... ✅
Solving src::test::test_buffer_slice__end with precision 3... ✅
Solving src::test::test_buffer_slice__end_overflow with precision 3... ✅
Solving src::test::test_buffer_equals with precision 3... ✅
Solving src::test::test_buffer_indexof with precision 3... ✅
Solving src::test::test_buffer_fill with precision 3... ✅
Solving src::test::test_buffer_clear with precision 3... ✅
Solving src::test::test_buffer_trim with precision 3... ✅
Solving src::test::test_buffer_compact with precision 3... ✅
Solving src::test::main_0 with precision 3... ✅
Solving src::test::main with precision 3... ✅
src::buffer::buffer_free: (&move &move &) -> _
src::buffer::buffer_compact: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_new_with_size: (_) -> &move &move &
src::buffer::buffer_new_with_string_length: (&, _) -> &move
src::buffer::buffer_resize: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_new: () -> &move &move &
src::buffer::buffer_new_with_string: (&uniq  ↓ &uniq ) -> &move &move &
src::buffer::buffer_new_with_copy: (&) -> &move &move &
src::buffer::buffer_size: (& & &) -> _
src::buffer::buffer_length: (& & &) -> _
src::buffer::buffer_append: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_append_n: (&uniq &move & ↓ &uniq &move &, &, _) -> _
src::buffer::buffer_prepend: (&uniq &move & ↓ &uniq &move &, &) -> _
src::buffer::buffer_slice: (& & &, _, _) -> &move &move &
src::buffer::buffer_equals: (& & &, & & &) -> _
src::buffer::buffer_indexof: (& & &, &) -> _
src::buffer::buffer_trim_left: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim_right: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_trim: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_fill: (&uniq &move & ↓ &uniq &move &, _) -> _
src::buffer::buffer_clear: (&uniq &move & ↓ &uniq &move &) -> _
src::buffer::buffer_print: (& & &) -> _
src::test::equal: (&, &) -> _
src::test::test_buffer_new: () -> _
src::test::test_buffer_new_with_size: () -> _
src::test::test_buffer_append: () -> _
src::test::test_buffer_append_n: () -> _
src::test::test_buffer_append__grow: () -> _
src::test::test_buffer_prepend: () -> _
src::test::test_buffer_slice: () -> _
src::test::test_buffer_slice__range_error: () -> _
src::test::test_buffer_slice__end: () -> _
src::test::test_buffer_slice__end_overflow: () -> _
src::test::test_buffer_equals: () -> _
src::test::test_buffer_indexof: () -> _
src::test::test_buffer_fill: () -> _
src::test::test_buffer_clear: () -> _
src::test::test_buffer_trim: () -> _
src::test::test_buffer_compact: () -> _
src::test::main_0: () -> _
src::test::main: () -> _
@DefId(0:36 ~ lib[40c5]::src::buffer::buffer_new)
bb0:
  _1 = const 64_u64
  using: 
  _0 = src::buffer::buffer_new_with_size(move _1) -> bb1
  using: _1@Mir(bb0[0])
bb1:
  return
  using: _0@Mir(bb0[1])
@DefId(0:37 ~ lib[40c5]::src::buffer::buffer_new_with_size)
bb0:
  _5 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = src::buffer::malloc(move _4) -> bb2
  using: _4@Mir(bb1[0])
bb2:
  _2 = move _3 as *mut src::buffer::buffer_t (PtrToPtr)
  using: _3@Mir(bb1[1])
  _7 = _2
  using: _2@Mir(bb2[0])
  _6 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  switchInt(move _6) -> [0: bb5, otherwise: bb4]
  using: _6@Mir(bb2[2])
bb4:
  _10 = _2
  using: _2@Mir(bb2[0])
  _9 = move _10 as usize (PointerExposeAddress)
  using: _10@Mir(bb4[0])
  _8 = Eq(move _9, const 0_usize)
  using: _9@Mir(bb4[1])
  assume(move _8)
  using: _8@Mir(bb4[2])
  _0 = const {0x0 as *mut src::buffer::buffer_t}
  using: 
  goto -> bb8
  using: 
bb5:
  _11 = _1
  using: _1@Entry
  ((*_2).0: u64) = move _11
  using: _2@Mir(bb2[0]), _11@Mir(bb5[0])
  _14 = _1
  using: _1@Entry
  _15 = const 1_u64
  using: 
  _13 = core::num::<impl u64>::wrapping_add(move _14, move _15) -> bb6
  using: _14@Mir(bb5[2]), _15@Mir(bb5[3])
bb6:
  _16 = const 1_u64
  using: 
  _12 = src::buffer::calloc(move _13, move _16) -> bb7
  using: _13@Mir(bb5[4]), _16@Mir(bb6[0])
bb7:
  ((*_2).1: *mut i8) = move _12 as *mut i8 (PtrToPtr)
  using: _2@Mir(bb2[0]), _12@Mir(bb6[1])
  _17 = ((*_2).1: *mut i8)
  using: _2@Mir(bb2[0])
  ((*_2).2: *mut i8) = move _17
  using: _2@Mir(bb2[0]), _17@Mir(bb7[1])
  _0 = _2
  using: _2@Mir(bb2[0])
  goto -> bb8
  using: 
bb8:
  return
  using: _0@Phi(bb8)
rewrite call std::mem::size_of @ workspace/clibs-buffer/src/buffer.rs:65:29: 65:62 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:70:32: 70:61 (#0) by default
rewrite call src::buffer::calloc @ workspace/clibs-buffer/src/buffer.rs:70:23: 70:79 (#0) by default
@DefId(0:38 ~ lib[40c5]::src::buffer::buffer_new_with_string)
bb0:
  _2 = _1
  using: _1@Entry
  _5 = _1
  using: _1@Entry
  _4 = move _5 as *const i8 (Pointer(MutToConstPointer))
  using: _5@Mir(bb0[1])
  _3 = src::buffer::strlen(move _4) -> bb1
  using: _4@Mir(bb0[2])
bb1:
  _0 = src::buffer::buffer_new_with_string_length(move _2, move _3) -> bb2
  using: _2@Mir(bb0[0]), _3@Mir(bb0[3])
bb2:
  return
  using: _0@Mir(bb1[0])
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:79:47: 79:58 (#0) by default
@DefId(0:39 ~ lib[40c5]::src::buffer::buffer_new_with_string_length)
bb0:
  _6 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1
  using: 
bb1:
  _5 = move _6 as u64 (IntToInt)
  using: _6@Mir(bb0[0])
  _4 = src::buffer::malloc(move _5) -> bb2
  using: _5@Mir(bb1[0])
bb2:
  _3 = move _4 as *mut src::buffer::buffer_t (PtrToPtr)
  using: _4@Mir(bb1[1])
  _8 = _3
  using: _3@Mir(bb2[0])
  _7 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _8) -> bb3
  using: _8@Mir(bb2[1])
bb3:
  switchInt(move _7) -> [0: bb5, otherwise: bb4]
  using: _7@Mir(bb2[2])
bb4:
  _11 = _3
  using: _3@Mir(bb2[0])
  _10 = move _11 as usize (PointerExposeAddress)
  using: _11@Mir(bb4[0])
  _9 = Eq(move _10, const 0_usize)
  using: _10@Mir(bb4[1])
  assume(move _9)
  using: _9@Mir(bb4[2])
  _0 = const {0x0 as *mut src::buffer::buffer_t}
  using: 
  goto -> bb6
  using: 
bb5:
  _12 = _2
  using: _2@Entry
  ((*_3).0: u64) = move _12
  using: _3@Mir(bb2[0]), _12@Mir(bb5[0])
  _13 = _1
  using: _1@Entry
  ((*_3).1: *mut i8) = move _13
  using: _3@Mir(bb2[0]), _13@Mir(bb5[2])
  _14 = ((*_3).1: *mut i8)
  using: _3@Mir(bb2[0])
  ((*_3).2: *mut i8) = move _14
  using: _3@Mir(bb2[0]), _14@Mir(bb5[4])
  _0 = _3
  using: _3@Mir(bb2[0])
  goto -> bb6
  using: 
bb6:
  return
  using: _0@Phi(bb6)
rewrite call std::mem::size_of @ workspace/clibs-buffer/src/buffer.rs:89:29: 89:62 (#0) by default
@DefId(0:40 ~ lib[40c5]::src::buffer::buffer_new_with_copy)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = move _4 as *const i8 (Pointer(MutToConstPointer))
  using: _4@Mir(bb0[0])
  _2 = src::buffer::strlen(move _3) -> bb1
  using: _3@Mir(bb0[1])
bb1:
  _6 = _2
  using: _2@Mir(bb0[2])
  _5 = src::buffer::buffer_new_with_size(move _6) -> bb2
  using: _6@Mir(bb1[0])
bb2:
  _8 = _5
  using: _5@Mir(bb1[1])
  _7 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _8) -> bb3
  using: _8@Mir(bb2[0])
bb3:
  switchInt(move _7) -> [0: bb5, otherwise: bb4]
  using: _7@Mir(bb2[1])
bb4:
  _11 = _5
  using: _5@Mir(bb1[1])
  _10 = move _11 as usize (PointerExposeAddress)
  using: _11@Mir(bb4[0])
  _9 = Eq(move _10, const 0_usize)
  using: _10@Mir(bb4[1])
  assume(move _9)
  using: _9@Mir(bb4[2])
  _0 = const {0x0 as *mut src::buffer::buffer_t}
  using: 
  goto -> bb7
  using: 
bb5:
  _14 = ((*_5).1: *mut i8)
  using: _5@Mir(bb1[1])
  _13 = move _14 as *mut libc::c_void (PtrToPtr)
  using: _14@Mir(bb5[0])
  _16 = _1
  using: _1@Entry
  _15 = move _16 as *const libc::c_void (PtrToPtr)
  using: _16@Mir(bb5[2])
  _17 = _2
  using: _2@Mir(bb0[2])
  _12 = src::buffer::memcpy(move _13, move _15, move _17) -> bb6
  using: _13@Mir(bb5[1]), _15@Mir(bb5[3]), _17@Mir(bb5[4])
bb6:
  _18 = ((*_5).1: *mut i8)
  using: _5@Mir(bb1[1])
  ((*_5).2: *mut i8) = move _18
  using: _5@Mir(bb1[1]), _18@Mir(bb6[0])
  _0 = _5
  using: _5@Mir(bb1[1])
  goto -> bb7
  using: 
bb7:
  return
  using: _0@Phi(bb7)
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:103:19: 103:30 (#0) by default
rewrite call src::buffer::memcpy @ workspace/clibs-buffer/src/buffer.rs:108:5: 112:6 (#0) by default
@DefId(0:41 ~ lib[40c5]::src::buffer::buffer_compact)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = src::buffer::buffer_length(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _5 = ((*_1).0: u64)
  using: _1@Entry
  _6 = _2
  using: _2@Mir(bb0[1])
  _4 = core::num::<impl u64>::wrapping_sub(move _5, move _6) -> bb2
  using: _5@Mir(bb1[0]), _6@Mir(bb1[1])
bb2:
  _10 = _2
  using: _2@Mir(bb0[1])
  _11 = const 1_u64
  using: 
  _9 = core::num::<impl u64>::wrapping_add(move _10, move _11) -> bb3
  using: _10@Mir(bb2[0]), _11@Mir(bb2[1])
bb3:
  _12 = const 1_u64
  using: 
  _8 = src::buffer::calloc(move _9, move _12) -> bb4
  using: _9@Mir(bb2[2]), _12@Mir(bb3[0])
bb4:
  _7 = move _8 as *mut i8 (PtrToPtr)
  using: _8@Mir(bb3[1])
  _14 = _7
  using: _7@Mir(bb4[0])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb5
  using: _14@Mir(bb4[1])
bb5:
  switchInt(move _13) -> [0: bb7, otherwise: bb6]
  using: _13@Mir(bb4[2])
bb6:
  _17 = _7
  using: _7@Mir(bb4[0])
  _16 = move _17 as usize (PointerExposeAddress)
  using: _17@Mir(bb6[0])
  _15 = Eq(move _16, const 0_usize)
  using: _16@Mir(bb6[1])
  assume(move _15)
  using: _15@Mir(bb6[2])
  _0 = const -1_i64
  using: 
  goto -> bb10
  using: 
bb7:
  _20 = _7
  using: _7@Mir(bb4[0])
  _19 = move _20 as *mut libc::c_void (PtrToPtr)
  using: _20@Mir(bb7[0])
  _22 = ((*_1).2: *mut i8)
  using: _1@Entry
  _21 = move _22 as *const libc::c_void (PtrToPtr)
  using: _22@Mir(bb7[2])
  _23 = _2
  using: _2@Mir(bb0[1])
  _18 = src::buffer::memcpy(move _19, move _21, move _23) -> bb8
  using: _19@Mir(bb7[1]), _21@Mir(bb7[3]), _23@Mir(bb7[4])
bb8:
  _26 = ((*_1).1: *mut i8)
  using: _1@Entry
  _25 = move _26 as *mut libc::c_void (PtrToPtr)
  using: _26@Mir(bb8[0])
  _24 = src::buffer::free(move _25) -> bb9
  using: _25@Mir(bb8[1])
bb9:
  _27 = _2
  using: _2@Mir(bb0[1])
  ((*_1).0: u64) = move _27
  using: _1@Entry, _27@Mir(bb9[0])
  _28 = _7
  using: _7@Mir(bb4[0])
  ((*_1).1: *mut i8) = move _28
  using: _1@Entry, _28@Mir(bb9[2])
  _29 = ((*_1).1: *mut i8)
  using: _1@Entry
  ((*_1).2: *mut i8) = move _29
  using: _1@Entry, _29@Mir(bb9[4])
  _30 = _4
  using: _4@Mir(bb1[2])
  _0 = move _30 as i64 (IntToInt)
  using: _30@Mir(bb9[6])
  goto -> bb10
  using: 
bb10:
  return
  using: _0@Phi(bb10)
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/clibs-buffer/src/buffer.rs:123:33: 123:50 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:124:30: 124:59 (#0) by default
rewrite call src::buffer::calloc @ workspace/clibs-buffer/src/buffer.rs:124:19: 124:77 (#0) by default
rewrite call src::buffer::memcpy @ workspace/clibs-buffer/src/buffer.rs:128:5: 132:6 (#0) by default
@DefId(0:42 ~ lib[40c5]::src::buffer::buffer_free)
bb0:
  _4 = ((*_1).1: *mut i8)
  using: _1@Entry
  _3 = move _4 as *mut libc::c_void (PtrToPtr)
  using: _4@Mir(bb0[0])
  _2 = src::buffer::free(move _3) -> bb1
  using: _3@Mir(bb0[1])
bb1:
  _7 = _1
  using: _1@Entry
  _6 = move _7 as *mut libc::c_void (PtrToPtr)
  using: _7@Mir(bb1[0])
  _5 = src::buffer::free(move _6) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  return
  using: _0@Entry
@DefId(0:43 ~ lib[40c5]::src::buffer::buffer_size)
bb0:
  _0 = ((*_1).0: u64)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:44 ~ lib[40c5]::src::buffer::buffer_length)
bb0:
  _3 = ((*_1).2: *mut i8)
  using: _1@Entry
  _2 = move _3 as *const i8 (Pointer(MutToConstPointer))
  using: _3@Mir(bb0[0])
  _0 = src::buffer::strlen(move _2) -> bb1
  using: _2@Mir(bb0[1])
bb1:
  return
  using: _0@Mir(bb0[2])
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:159:12: 159:34 (#0) by default
@DefId(0:45 ~ lib[40c5]::src::buffer::buffer_resize)
bb0:
  _4 = _2
  using: _2@Entry
  _5 = const 1023_u64
  using: 
  _3 = core::num::<impl u64>::wrapping_add(move _4, move _5) -> bb1
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
bb1:
  _6 = const 18446744073709550592_u64
  using: 
  _2 = BitAnd(move _3, move _6)
  using: _3@Mir(bb0[2]), _6@Mir(bb1[0])
  _7 = _2
  using: _2@Mir(bb1[1])
  ((*_1).0: u64) = move _7
  using: _1@Entry, _7@Mir(bb1[2])
  _10 = ((*_1).1: *mut i8)
  using: _1@Entry
  _9 = move _10 as *mut libc::c_void (PtrToPtr)
  using: _10@Mir(bb1[4])
  _12 = _2
  using: _2@Mir(bb1[1])
  _13 = const 1_u64
  using: 
  _11 = core::num::<impl u64>::wrapping_add(move _12, move _13) -> bb2
  using: _12@Mir(bb1[6]), _13@Mir(bb1[7])
bb2:
  _8 = src::buffer::realloc(move _9, move _11) -> bb3
  using: _9@Mir(bb1[5]), _11@Mir(bb1[8])
bb3:
  ((*_1).2: *mut i8) = move _8 as *mut i8 (PtrToPtr)
  using: _1@Entry, _8@Mir(bb2[0])
  _14 = ((*_1).2: *mut i8)
  using: _1@Entry
  ((*_1).1: *mut i8) = move _14
  using: _1@Entry, _14@Mir(bb3[1])
  _16 = ((*_1).1: *mut i8)
  using: _1@Entry
  _15 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _16) -> bb4
  using: _16@Mir(bb3[3])
bb4:
  switchInt(move _15) -> [0: bb6, otherwise: bb5]
  using: _15@Mir(bb3[4])
bb5:
  _19 = ((*_1).1: *mut i8)
  using: _1@Entry
  _18 = move _19 as usize (PointerExposeAddress)
  using: _19@Mir(bb5[0])
  _17 = Eq(move _18, const 0_usize)
  using: _18@Mir(bb5[1])
  assume(move _17)
  using: _17@Mir(bb5[2])
  _0 = const -1_i32
  using: 
  goto -> bb8
  using: 
bb6:
  _20 = const 0_i32
  using: 
  _22 = ((*_1).1: *mut i8)
  using: _1@Entry
  _24 = _2
  using: _2@Mir(bb1[1])
  _23 = move _24 as isize (IntToInt)
  using: _24@Mir(bb6[2])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _22, move _23) -> bb7
  using: _22@Mir(bb6[1]), _23@Mir(bb6[3])
bb7:
  (*_21) = move _20 as i8 (IntToInt)
  using: _21@Mir(bb6[4]), _20@Mir(bb6[0])
  _0 = const 0_i32
  using: 
  goto -> bb8
  using: 
bb8:
  return
  using: _0@Phi(bb8)
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:166:11: 166:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:170:11: 170:40 (#0) by default
rewrite call src::buffer::realloc @ workspace/clibs-buffer/src/buffer.rs:168:22: 171:6 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:176:22: 176:40 (#0) by default
@DefId(0:46 ~ lib[40c5]::src::buffer::buffer_append)
bb0:
  _3 = _1
  using: _1@Entry
  _4 = _2
  using: _2@Entry
  _6 = _2
  using: _2@Entry
  _5 = src::buffer::strlen(move _6) -> bb1
  using: _6@Mir(bb0[2])
bb1:
  _0 = src::buffer::buffer_append_n(move _3, move _4, move _5) -> bb2
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1]), _5@Mir(bb0[3])
bb2:
  return
  using: _0@Mir(bb1[0])
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:225:41: 225:52 (#0) by default
@DefId(0:47 ~ lib[40c5]::src::buffer::buffer_append_n)
bb0:
  _6 = ((*_1).2: *mut i8)
  using: _1@Entry
  _5 = move _6 as *const i8 (Pointer(MutToConstPointer))
  using: _6@Mir(bb0[0])
  _4 = src::buffer::strlen(move _5) -> bb1
  using: _5@Mir(bb0[1])
bb1:
  _8 = _3
  using: _3@Entry
  _9 = _4
  using: _4@Mir(bb0[2])
  _7 = core::num::<impl u64>::wrapping_add(move _8, move _9) -> bb2
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1])
bb2:
  _11 = ((*_1).0: u64)
  using: _1@Entry
  _12 = _7
  using: _7@Mir(bb1[2])
  _10 = Gt(move _11, move _12)
  using: _11@Mir(bb2[0]), _12@Mir(bb2[1])
  switchInt(move _10) -> [0: bb5, otherwise: bb3]
  using: _10@Mir(bb2[2])
bb3:
  _14 = ((*_1).2: *mut i8)
  using: _1@Entry
  _15 = _2
  using: _2@Entry
  _16 = _3
  using: _3@Entry
  _13 = src::buffer::strncat(move _14, move _15, move _16) -> bb4
  using: _14@Mir(bb3[0]), _15@Mir(bb3[1]), _16@Mir(bb3[2])
bb4:
  _0 = const 0_i32
  using: 
  goto -> bb10
  using: 
bb5:
  _18 = _1
  using: _1@Entry
  _19 = _7
  using: _7@Mir(bb1[2])
  _17 = src::buffer::buffer_resize(move _18, move _19) -> bb6
  using: _18@Mir(bb5[0]), _19@Mir(bb5[1])
bb6:
  _21 = const -1_i32
  using: 
  _22 = _17
  using: _17@Mir(bb5[2])
  _20 = Eq(move _21, move _22)
  using: _21@Mir(bb6[0]), _22@Mir(bb6[1])
  switchInt(move _20) -> [0: bb8, otherwise: bb7]
  using: _20@Mir(bb6[2])
bb7:
  _0 = const -1_i32
  using: 
  goto -> bb10
  using: 
bb8:
  _24 = ((*_1).2: *mut i8)
  using: _1@Entry
  _25 = _2
  using: _2@Entry
  _26 = _3
  using: _3@Entry
  _23 = src::buffer::strncat(move _24, move _25, move _26) -> bb9
  using: _24@Mir(bb8[0]), _25@Mir(bb8[1]), _26@Mir(bb8[2])
bb9:
  _0 = const 0_i32
  using: 
  goto -> bb10
  using: 
bb10:
  return
  using: _0@Phi(bb10)
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:237:20: 237:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:238:26: 238:44 (#0) by default
rewrite call src::buffer::strncat @ workspace/clibs-buffer/src/buffer.rs:241:9: 241:42 (#0) by default
rewrite call src::buffer::strncat @ workspace/clibs-buffer/src/buffer.rs:249:5: 249:38 (#0) by default
@DefId(0:48 ~ lib[40c5]::src::buffer::buffer_prepend)
bb0:
  _3 = const 0_i32
  using: 
  _6 = _2
  using: _2@Entry
  _5 = move _6 as *const i8 (Pointer(MutToConstPointer))
  using: _6@Mir(bb0[1])
  _4 = src::buffer::strlen(move _5) -> bb1
  using: _5@Mir(bb0[2])
bb1:
  _9 = ((*_1).2: *mut i8)
  using: _1@Entry
  _8 = move _9 as *const i8 (Pointer(MutToConstPointer))
  using: _9@Mir(bb1[0])
  _7 = src::buffer::strlen(move _8) -> bb2
  using: _8@Mir(bb1[1])
bb2:
  _11 = _4
  using: _4@Mir(bb0[3])
  _12 = _7
  using: _7@Mir(bb1[2])
  _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb3
  using: _11@Mir(bb2[0]), _12@Mir(bb2[1])
bb3:
  _15 = ((*_1).0: u64)
  using: _1@Entry
  _16 = _10
  using: _10@Mir(bb2[2])
  _14 = Gt(move _15, move _16)
  using: _15@Mir(bb3[0]), _16@Mir(bb3[1])
  _13 = Not(move _14)
  using: _14@Mir(bb3[2])
  switchInt(move _13) -> [0: bb7, otherwise: bb4]
  using: _13@Mir(bb3[3])
bb4:
  _18 = _1
  using: _1@Entry
  _19 = _10
  using: _10@Mir(bb2[2])
  _17 = src::buffer::buffer_resize(move _18, move _19) -> bb5
  using: _18@Mir(bb4[0]), _19@Mir(bb4[1])
bb5:
  _3 = move _17
  using: _17@Mir(bb4[2])
  _21 = const -1_i32
  using: 
  _22 = _3
  using: _3@Mir(bb5[0])
  _20 = Eq(move _21, move _22)
  using: _21@Mir(bb5[1]), _22@Mir(bb5[2])
  switchInt(move _20) -> [0: bb7, otherwise: bb6]
  using: _20@Mir(bb5[3])
bb6:
  _0 = const -1_i32
  using: 
  goto -> bb12
  using: 
bb7:
  _26 = ((*_1).2: *mut i8)
  using: _1@Phi(bb7)
  _28 = _4
  using: _4@Mir(bb0[3])
  _27 = move _28 as isize (IntToInt)
  using: _28@Mir(bb7[1])
  _25 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _26, move _27) -> bb8
  using: _26@Mir(bb7[0]), _27@Mir(bb7[2])
bb8:
  _24 = move _25 as *mut libc::c_void (PtrToPtr)
  using: _25@Mir(bb7[3])
  _30 = ((*_1).2: *mut i8)
  using: _1@Phi(bb7)
  _29 = move _30 as *const libc::c_void (PtrToPtr)
  using: _30@Mir(bb8[1])
  _32 = _4
  using: _4@Mir(bb0[3])
  _33 = const 1_u64
  using: 
  _31 = core::num::<impl u64>::wrapping_add(move _32, move _33) -> bb9
  using: _32@Mir(bb8[3]), _33@Mir(bb8[4])
bb9:
  _23 = src::buffer::memmove(move _24, move _29, move _31) -> bb10
  using: _24@Mir(bb8[0]), _29@Mir(bb8[2]), _31@Mir(bb8[5])
bb10:
  _36 = ((*_1).2: *mut i8)
  using: _1@Phi(bb7)
  _35 = move _36 as *mut libc::c_void (PtrToPtr)
  using: _36@Mir(bb10[0])
  _38 = _2
  using: _2@Entry
  _37 = move _38 as *const libc::c_void (PtrToPtr)
  using: _38@Mir(bb10[2])
  _39 = _4
  using: _4@Mir(bb0[3])
  _34 = src::buffer::memcpy(move _35, move _37, move _39) -> bb11
  using: _35@Mir(bb10[1]), _37@Mir(bb10[3]), _39@Mir(bb10[4])
bb11:
  _0 = const 0_i32
  using: 
  goto -> bb12
  using: 
bb12:
  return
  using: _0@Phi(bb12)
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:261:19: 261:30 (#0) by default
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:262:20: 262:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:263:26: 263:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:274:24: 274:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/clibs-buffer/src/buffer.rs:276:13: 276:42 (#0) by default
rewrite call src::buffer::memmove @ workspace/clibs-buffer/src/buffer.rs:273:5: 277:6 (#0) by default
rewrite call src::buffer::memcpy @ workspace/clibs-buffer/src/buffer.rs:278:5: 282:6 (#0) by default
@DefId(0:49 ~ lib[40c5]::src::buffer::buffer_slice)
bb0:
  _6 = ((*_1).2: *mut i8)
  using: _1@Entry
  _5 = move _6 as *const i8 (Pointer(MutToConstPointer))
  using: _6@Mir(bb0[0])
  _4 = src::buffer::strlen(move _5) -> bb1
  using: _5@Mir(bb0[1])
bb1:
  _9 = _3
  using: _3@Entry
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb1[0])
  _10 = _2
  using: _2@Entry
  _7 = Lt(move _8, move _10)
  using: _8@Mir(bb1[1]), _10@Mir(bb1[2])
  switchInt(move _7) -> [0: bb3, otherwise: bb2]
  using: _7@Mir(bb1[3])
bb2:
  _0 = const {0x0 as *mut src::buffer::buffer_t}
  using: 
  goto -> bb13
  using: 
bb3:
  _12 = _3
  using: _3@Entry
  _13 = const 0_i64
  using: 
  _11 = Lt(move _12, move _13)
  using: _12@Mir(bb3[0]), _13@Mir(bb3[1])
  switchInt(move _11) -> [0: bb6, otherwise: bb4]
  using: _11@Mir(bb3[2])
bb4:
  _15 = _4
  using: _4@Mir(bb0[2])
  _18 = _3
  using: _3@Entry
  _17 = Not(move _18)
  using: _18@Mir(bb4[1])
  _16 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb4[2])
  _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> bb5
  using: _15@Mir(bb4[0]), _16@Mir(bb4[3])
bb5:
  _3 = move _14 as i64 (IntToInt)
  using: _14@Mir(bb4[4])
  goto -> bb6
  using: 
bb6:
  _21 = _3
  using: _3@Phi(bb6)
  _20 = move _21 as u64 (IntToInt)
  using: _21@Mir(bb6[0])
  _22 = _4
  using: _4@Phi(bb6)
  _19 = Gt(move _20, move _22)
  using: _20@Mir(bb6[1]), _22@Mir(bb6[2])
  switchInt(move _19) -> [0: bb8, otherwise: bb7]
  using: _19@Mir(bb6[3])
bb7:
  _23 = _4
  using: _4@Phi(bb6)
  _3 = move _23 as i64 (IntToInt)
  using: _23@Mir(bb7[0])
  goto -> bb8
  using: 
bb8:
  _26 = _3
  using: _3@Phi(bb8)
  _25 = move _26 as u64 (IntToInt)
  using: _26@Mir(bb8[0])
  _27 = _2
  using: _2@Entry
  _24 = core::num::<impl u64>::wrapping_sub(move _25, move _27) -> bb9
  using: _25@Mir(bb8[1]), _27@Mir(bb8[2])
bb9:
  _29 = _24
  using: _24@Mir(bb8[3])
  _28 = src::buffer::buffer_new_with_size(move _29) -> bb10
  using: _29@Mir(bb9[0])
bb10:
  _32 = ((*_28).2: *mut i8)
  using: _28@Mir(bb9[1])
  _31 = move _32 as *mut libc::c_void (PtrToPtr)
  using: _32@Mir(bb10[0])
  _35 = ((*_1).2: *mut i8)
  using: _1@Entry
  _37 = _2
  using: _2@Entry
  _36 = move _37 as isize (IntToInt)
  using: _37@Mir(bb10[3])
  _34 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _35, move _36) -> bb11
  using: _35@Mir(bb10[2]), _36@Mir(bb10[4])
bb11:
  _33 = move _34 as *const libc::c_void (PtrToPtr)
  using: _34@Mir(bb10[5])
  _38 = _24
  using: _24@Mir(bb8[3])
  _30 = src::buffer::memcpy(move _31, move _33, move _38) -> bb12
  using: _31@Mir(bb10[1]), _33@Mir(bb11[0]), _38@Mir(bb11[1])
bb12:
  _0 = _28
  using: _28@Mir(bb9[1])
  goto -> bb13
  using: 
bb13:
  return
  using: _0@Phi(bb13)
rewrite call src::buffer::strlen @ workspace/clibs-buffer/src/buffer.rs:295:19: 295:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/clibs-buffer/src/buffer.rs:302:18: 302:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/clibs-buffer/src/buffer.rs:308:29: 308:47 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:312:21: 312:42 (#0) by default
rewrite call src::buffer::memcpy @ workspace/clibs-buffer/src/buffer.rs:310:5: 314:6 (#0) by default
@DefId(0:50 ~ lib[40c5]::src::buffer::buffer_equals)
bb0:
  _4 = const 0_i32
  using: 
  _7 = ((*_1).2: *mut i8)
  using: _1@Entry
  _6 = move _7 as *const i8 (Pointer(MutToConstPointer))
  using: _7@Mir(bb0[1])
  _9 = ((*_2).2: *mut i8)
  using: _2@Entry
  _8 = move _9 as *const i8 (Pointer(MutToConstPointer))
  using: _9@Mir(bb0[3])
  _5 = src::buffer::strcmp(move _6, move _8) -> bb1
  using: _6@Mir(bb0[2]), _8@Mir(bb0[4])
bb1:
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[5])
  _0 = move _3 as i32 (IntToInt)
  using: _3@Mir(bb1[0])
  return
  using: _0@Mir(bb1[1])
rewrite call src::buffer::strcmp @ workspace/clibs-buffer/src/buffer.rs:322:25: 322:62 (#0) by default
@DefId(0:51 ~ lib[40c5]::src::buffer::buffer_indexof)
bb0:
  _5 = ((*_1).2: *mut i8)
  using: _1@Entry
  _4 = move _5 as *const i8 (Pointer(MutToConstPointer))
  using: _5@Mir(bb0[0])
  _7 = _2
  using: _2@Entry
  _6 = move _7 as *const i8 (Pointer(MutToConstPointer))
  using: _7@Mir(bb0[2])
  _3 = src::buffer::strstr(move _4, move _6) -> bb1
  using: _4@Mir(bb0[1]), _6@Mir(bb0[3])
bb1:
  _9 = _3
  using: _3@Mir(bb0[4])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb2
  using: _9@Mir(bb1[0])
bb2:
  switchInt(move _8) -> [0: bb4, otherwise: bb3]
  using: _8@Mir(bb1[1])
bb3:
  _12 = _3
  using: _3@Mir(bb0[4])
  _11 = move _12 as usize (PointerExposeAddress)
  using: _12@Mir(bb3[0])
  _10 = Eq(move _11, const 0_usize)
  using: _11@Mir(bb3[1])
  assume(move _10)
  using: _10@Mir(bb3[2])
  _0 = const -1_i64
  using: 
  goto -> bb6
  using: 
bb4:
  _14 = _3
  using: _3@Mir(bb0[4])
  _16 = ((*_1).2: *mut i8)
  using: _1@Entry
  _15 = move _16 as *const i8 (Pointer(MutToConstPointer))
  using: _16@Mir(bb4[1])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _14, move _15) -> bb5
  using: _14@Mir(bb4[0]), _15@Mir(bb4[2])
bb5:
  _0 = move _13 as i64 (IntToInt)
  using: _13@Mir(bb4[3])
  goto -> bb6
  using: 
bb6:
  return
  using: _0@Phi(bb6)
rewrite call src::buffer::strstr @ workspace/clibs-buffer/src/buffer.rs:332:19: 332:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/clibs-buffer/src/buffer.rs:336:16: 336:43 (#0) by default
@DefId(0:52 ~ lib[40c5]::src::buffer::buffer_trim_left)
bb0:
  _2 = const 0_i32
  using: 
  goto -> bb1
  using: 
bb1:
  _14 = deref_copy ((*_1).2: *mut i8)
  using: _1@Phi(bb1)
  _3 = (*_14)
  using: _14@Mir(bb1[0])
  _2 = move _3 as i32 (IntToInt)
  using: _3@Mir(bb1[1])
  _6 = _2
  using: _2@Mir(bb1[2])
  switchInt(move _6) -> [0: bb2, otherwise: bb3]
  using: _6@Mir(bb1[3])
bb2:
  _5 = const false
  using: 
  goto -> bb4
  using: 
bb3:
  _11 = _2
  using: _2@Mir(bb1[2])
  _10 = move _11 as u32 (IntToInt)
  using: _11@Mir(bb3[0])
  _9 = std::char::methods::<impl char>::from_u32(move _10) -> bb5
  using: _10@Mir(bb3[1])
bb4:
  _4 = Not(move _5)
  using: _5@Phi(bb4)
  switchInt(move _4) -> [0: bb9, otherwise: bb8]
  using: _4@Mir(bb4[0])
bb5:
  _8 = std::option::Option::<char>::unwrap(move _9) -> bb6
  using: _9@Mir(bb3[2])
bb6:
  _7 = std::char::methods::<impl char>::is_whitespace(move _8) -> bb7
  using: _8@Mir(bb5[0])
bb7:
  _5 = move _7
  using: _7@Mir(bb6[0])
  goto -> bb4
  using: 
bb8:
  return
  using: _0@Entry
bb9:
  _13 = ((*_1).2: *mut i8)
  using: _1@Phi(bb1)
  _12 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _13, const 1_isize) -> bb10
  using: _13@Mir(bb9[0])
bb10:
  ((*_1).2: *mut i8) = move _12
  using: _1@Phi(bb1), _12@Mir(bb9[1])
  goto -> bb1
  using: 
rewrite call std::char::methods::<impl char>::from_u32 @ workspace/clibs-buffer/src/buffer.rs:347:16: 347:40 (#0) by default
rewrite call std::option::Option::<T>::unwrap @ workspace/clibs-buffer/src/buffer.rs:347:41: 347:49 (#0) by default
rewrite call std::char::methods::<impl char>::is_whitespace @ workspace/clibs-buffer/src/buffer.rs:347:50: 347:65 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:355:41: 355:50 (#0) by default
@DefId(0:53 ~ lib[40c5]::src::buffer::buffer_trim_right)
bb0:
  _2 = const 0_i32
  using: 
  _5 = _1
  using: _1@Entry
  _4 = src::buffer::buffer_length(move _5) -> bb1
  using: _5@Mir(bb0[1])
bb1:
  _6 = const 1_u64
  using: 
  _3 = core::num::<impl u64>::wrapping_sub(move _4, move _6) -> bb2
  using: _4@Mir(bb0[2]), _6@Mir(bb1[0])
bb2:
  _9 = ((*_1).2: *mut i8)
  using: _1@Phi(bb2)
  _11 = _3
  using: _3@Phi(bb2)
  _10 = move _11 as isize (IntToInt)
  using: _11@Mir(bb2[1])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _9, move _10) -> bb3
  using: _9@Mir(bb2[0]), _10@Mir(bb2[2])
bb3:
  _7 = (*_8)
  using: _8@Mir(bb2[3])
  _2 = move _7 as i32 (IntToInt)
  using: _7@Mir(bb3[0])
  _14 = _2
  using: _2@Mir(bb3[1])
  switchInt(move _14) -> [0: bb4, otherwise: bb5]
  using: _14@Mir(bb3[2])
bb4:
  _13 = const false
  using: 
  goto -> bb6
  using: 
bb5:
  _19 = _2
  using: _2@Mir(bb3[1])
  _18 = move _19 as u32 (IntToInt)
  using: _19@Mir(bb5[0])
  _17 = std::char::methods::<impl char>::from_u32(move _18) -> bb7
  using: _18@Mir(bb5[1])
bb6:
  _12 = Not(move _13)
  using: _13@Phi(bb6)
  switchInt(move _12) -> [0: bb11, otherwise: bb10]
  using: _12@Mir(bb6[0])
bb7:
  _16 = std::option::Option::<char>::unwrap(move _17) -> bb8
  using: _17@Mir(bb5[2])
bb8:
  _15 = std::char::methods::<impl char>::is_whitespace(move _16) -> bb9
  using: _16@Mir(bb7[0])
bb9:
  _13 = move _15
  using: _15@Mir(bb8[0])
  goto -> bb6
  using: 
bb10:
  return
  using: _0@Entry
bb11:
  _20 = _3
  using: _3@Phi(bb2)
  _22 = _3
  using: _3@Phi(bb2)
  _21 = core::num::<impl u64>::wrapping_sub(move _22, const 1_u64) -> bb12
  using: _22@Mir(bb11[1])
bb12:
  _3 = move _21
  using: _21@Mir(bb11[2])
  _23 = const 0_i32
  using: 
  _25 = ((*_1).2: *mut i8)
  using: _1@Phi(bb2)
  _27 = _20
  using: _20@Mir(bb11[0])
  _26 = move _27 as isize (IntToInt)
  using: _27@Mir(bb12[3])
  _24 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _25, move _26) -> bb13
  using: _25@Mir(bb12[2]), _26@Mir(bb12[4])
bb13:
  (*_24) = move _23 as i8 (IntToInt)
  using: _24@Mir(bb12[5]), _23@Mir(bb12[1])
  goto -> bb2
  using: 
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/clibs-buffer/src/buffer.rs:364:39: 364:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:366:29: 366:47 (#0) by default
rewrite call std::char::methods::<impl char>::from_u32 @ workspace/clibs-buffer/src/buffer.rs:368:16: 368:40 (#0) by default
rewrite call std::option::Option::<T>::unwrap @ workspace/clibs-buffer/src/buffer.rs:368:41: 368:49 (#0) by default
rewrite call std::char::methods::<impl char>::is_whitespace @ workspace/clibs-buffer/src/buffer.rs:368:50: 368:65 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/clibs-buffer/src/buffer.rs:373:15: 373:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:374:25: 374:48 (#0) by default
@DefId(0:54 ~ lib[40c5]::src::buffer::buffer_trim)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = src::buffer::buffer_trim_left(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _5 = _1
  using: _1@Entry
  _4 = src::buffer::buffer_trim_right(move _5) -> bb2
  using: _5@Mir(bb1[0])
bb2:
  return
  using: _0@Entry
@DefId(0:55 ~ lib[40c5]::src::buffer::buffer_fill)
bb0:
  _5 = ((*_1).2: *mut i8)
  using: _1@Entry
  _4 = move _5 as *mut libc::c_void (PtrToPtr)
  using: _5@Mir(bb0[0])
  _6 = _2
  using: _2@Entry
  _7 = ((*_1).0: u64)
  using: _1@Entry
  _3 = src::buffer::memset(move _4, move _6, move _7) -> bb1
  using: _4@Mir(bb0[1]), _6@Mir(bb0[2]), _7@Mir(bb0[3])
bb1:
  return
  using: _0@Entry
rewrite call src::buffer::memset @ workspace/clibs-buffer/src/buffer.rs:390:5: 390:66 (#0) by default
@DefId(0:56 ~ lib[40c5]::src::buffer::buffer_clear)
bb0:
  _3 = _1
  using: _1@Entry
  _4 = const 0_i32
  using: 
  _2 = src::buffer::buffer_fill(move _3, move _4) -> bb1
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1])
bb1:
  return
  using: _0@Entry
@DefId(0:57 ~ lib[40c5]::src::buffer::buffer_print)
bb0:
  _2 = const 0_i32
  using: 
  _3 = ((*_1).0: u64)
  using: _1@Entry
  _8 = const b"\n \x00"
  using: 
  _7 = &raw const (*_8)
  using: _8@Mir(bb0[2])
  _6 = move _7 as *const u8 (Pointer(ArrayToPointer))
  using: _7@Mir(bb0[3])
  _5 = move _6 as *const i8 (PtrToPtr)
  using: _6@Mir(bb0[4])
  _4 = src::buffer::printf(move _5) -> bb1
  using: _5@Mir(bb0[5])
bb1:
  _2 = const 0_i32
  using: 
  goto -> bb2
  using: 
bb2:
  _11 = _2
  using: _2@Phi(bb2)
  _10 = move _11 as u64 (IntToInt)
  using: _11@Mir(bb2[0])
  _12 = _3
  using: _3@Mir(bb0[1])
  _9 = Lt(move _10, move _12)
  using: _10@Mir(bb2[1]), _12@Mir(bb2[2])
  switchInt(move _9) -> [0: bb11, otherwise: bb3]
  using: _9@Mir(bb2[3])
bb3:
  _17 = const b" %02x\x00"
  using: 
  _16 = &raw const (*_17)
  using: _17@Mir(bb3[0])
  _15 = move _16 as *const u8 (Pointer(ArrayToPointer))
  using: _16@Mir(bb3[1])
  _14 = move _15 as *const i8 (PtrToPtr)
  using: _15@Mir(bb3[2])
  _21 = ((*_1).1: *mut i8)
  using: _1@Phi(bb2)
  _23 = _2
  using: _2@Phi(bb2)
  _22 = move _23 as isize (IntToInt)
  using: _23@Mir(bb3[5])
  _20 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _21, move _22) -> bb4
  using: _21@Mir(bb3[4]), _22@Mir(bb3[6])
bb4:
  _19 = (*_20)
  using: _20@Mir(bb3[7])
  _18 = move _19 as i32 (IntToInt)
  using: _19@Mir(bb4[0])
  _13 = src::buffer::printf(move _14, move _18) -> bb5
  using: _14@Mir(bb3[3]), _18@Mir(bb4[1])
bb5:
  _27 = _2
  using: _2@Phi(bb2)
  _28 = const 1_i32
  using: 
  _29 = CheckedAdd(_27, _28)
  using: _27@Mir(bb5[0]), _28@Mir(bb5[1])
  assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _28) -> bb6
  using: _29@Entry, _27@Entry, _28@Entry
bb6:
  _26 = move (_29.0: i32)
  using: _29@Mir(bb5[2])
  _30 = const 8_i32
  using: 
  _31 = const false
  using: 
  _32 = Eq(_26, const i32::MIN)
  using: _26@Mir(bb6[0])
  _33 = BitAnd(move _31, move _32)
  using: _31@Mir(bb6[2]), _32@Mir(bb6[3])
  assert(!move _33, "attempt to compute the remainder of `{} % {}`, which would overflow", _26, _30) -> bb7
  using: _33@Entry, _26@Entry, _30@Entry
bb7:
  _25 = Rem(move _26, move _30)
  using: _26@Mir(bb6[0]), _30@Mir(bb6[1])
  _34 = const 0_i32
  using: 
  _24 = Eq(move _25, move _34)
  using: _25@Mir(bb7[0]), _34@Mir(bb7[1])
  switchInt(move _24) -> [0: bb9, otherwise: bb8]
  using: _24@Mir(bb7[2])
bb8:
  _39 = const b"\n \x00"
  using: 
  _38 = &raw const (*_39)
  using: _39@Mir(bb8[0])
  _37 = move _38 as *const u8 (Pointer(ArrayToPointer))
  using: _38@Mir(bb8[1])
  _36 = move _37 as *const i8 (PtrToPtr)
  using: _37@Mir(bb8[2])
  _35 = src::buffer::printf(move _36) -> bb9
  using: _36@Mir(bb8[3])
bb9:
  _40 = CheckedAdd(_2, const 1_i32)
  using: _2@Phi(bb2)
  assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb10
  using: _40@Entry, _2@Entry
bb10:
  _2 = move (_40.0: i32)
  using: _40@Mir(bb9[0])
  goto -> bb2
  using: 
bb11:
  _45 = const b"\n\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb11[0])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb11[1])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb11[2])
  _41 = src::buffer::printf(move _42) -> bb12
  using: _42@Mir(bb11[3])
bb12:
  return
  using: _0@Entry
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/clibs-buffer/src/buffer.rs:412:30: 412:48 (#0) by default
@DefId(0:69 ~ lib[40c5]::src::test::equal)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = move _5 as *const i8 (Pointer(MutToConstPointer))
  using: _5@Mir(bb0[0])
  _7 = _2
  using: _2@Entry
  _6 = move _7 as *const i8 (Pointer(MutToConstPointer))
  using: _7@Mir(bb0[2])
  _3 = src::test::strcmp(move _4, move _6) -> bb1
  using: _4@Mir(bb0[1]), _6@Mir(bb0[3])
bb1:
  switchInt(move _3) -> [0: bb7, otherwise: bb2]
  using: _3@Mir(bb0[4])
bb2:
  _12 = const b"\n\x00"
  using: 
  _11 = &raw const (*_12)
  using: _12@Mir(bb2[0])
  _10 = move _11 as *const u8 (Pointer(ArrayToPointer))
  using: _11@Mir(bb2[1])
  _9 = move _10 as *const i8 (PtrToPtr)
  using: _10@Mir(bb2[2])
  _8 = src::test::printf(move _9) -> bb3
  using: _9@Mir(bb2[3])
bb3:
  _17 = const b"  expected: \'%s\'\n\x00"
  using: 
  _16 = &raw const (*_17)
  using: _17@Mir(bb3[0])
  _15 = move _16 as *const u8 (Pointer(ArrayToPointer))
  using: _16@Mir(bb3[1])
  _14 = move _15 as *const i8 (PtrToPtr)
  using: _15@Mir(bb3[2])
  _18 = _1
  using: _1@Entry
  _13 = src::test::printf(move _14, move _18) -> bb4
  using: _14@Mir(bb3[3]), _18@Mir(bb3[4])
bb4:
  _23 = const b"    actual: \'%s\'\n\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb4[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb4[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb4[2])
  _24 = _2
  using: _2@Entry
  _19 = src::test::printf(move _20, move _24) -> bb5
  using: _20@Mir(bb4[3]), _24@Mir(bb4[4])
bb5:
  _29 = const b"\n\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb5[0])
  _27 = move _28 as *const u8 (Pointer(ArrayToPointer))
  using: _28@Mir(bb5[1])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb5[2])
  _25 = src::test::printf(move _26) -> bb6
  using: _26@Mir(bb5[3])
bb6:
  _31 = const 1_i32
  using: 
  _30 = src::test::exit(move _31)
  using: _31@Mir(bb6[0])
bb7:
  return
  using: _0@Entry
rewrite call src::test::strcmp @ workspace/clibs-buffer/src/test.rs:70:8: 70:20 (#0) by default
rewrite call src::test::exit @ workspace/clibs-buffer/src/test.rs:81:9: 81:23 (#0) by default
@DefId(0:70 ~ lib[40c5]::src::test::test_buffer_new)
bb0:
  _1 = src::buffer::buffer_new() -> bb1
  using: 
bb1:
  _3 = const 64_u64
  using: 
  _5 = _1
  using: _1@Mir(bb0[0])
  _4 = src::buffer::buffer_size(move _5) -> bb2
  using: _5@Mir(bb1[1])
bb2:
  _2 = Eq(move _3, move _4)
  using: _3@Mir(bb1[0]), _4@Mir(bb1[2])
  switchInt(move _2) -> [0: bb4, otherwise: bb3]
  using: _2@Mir(bb2[0])
bb3:
  _21 = const 0_u64
  using: 
  _23 = _1
  using: _1@Mir(bb0[0])
  _22 = src::buffer::buffer_length(move _23) -> bb5
  using: _23@Mir(bb3[1])
bb4:
  _10 = const b"BUFFER_DEFAULT_SIZE == buffer_size(buf)\x00"
  using: 
  _9 = &raw const (*_10)
  using: _10@Mir(bb4[0])
  _8 = move _9 as *const u8 (Pointer(ArrayToPointer))
  using: _9@Mir(bb4[1])
  _7 = move _8 as *const i8 (PtrToPtr)
  using: _8@Mir(bb4[2])
  _14 = const b"test.c\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb4[4])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb4[5])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb4[6])
  _15 = const 28_u32
  using: 
  _19 = const b"void test_buffer_new()\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb4[9])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb4[10])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb4[11])
  _6 = src::test::__assert_fail(move _7, move _11, move _15, move _16)
  using: _7@Mir(bb4[3]), _11@Mir(bb4[7]), _15@Mir(bb4[8]), _16@Mir(bb4[12])
bb5:
  _20 = Eq(move _21, move _22)
  using: _21@Mir(bb3[0]), _22@Mir(bb3[2])
  switchInt(move _20) -> [0: bb7, otherwise: bb6]
  using: _20@Mir(bb5[0])
bb6:
  _39 = _1
  using: _1@Mir(bb0[0])
  _38 = src::buffer::buffer_free(move _39) -> bb8
  using: _39@Mir(bb6[0])
bb7:
  _28 = const b"0 == buffer_length(buf)\x00"
  using: 
  _27 = &raw const (*_28)
  using: _28@Mir(bb7[0])
  _26 = move _27 as *const u8 (Pointer(ArrayToPointer))
  using: _27@Mir(bb7[1])
  _25 = move _26 as *const i8 (PtrToPtr)
  using: _26@Mir(bb7[2])
  _32 = const b"test.c\x00"
  using: 
  _31 = &raw const (*_32)
  using: _32@Mir(bb7[4])
  _30 = move _31 as *const u8 (Pointer(ArrayToPointer))
  using: _31@Mir(bb7[5])
  _29 = move _30 as *const i8 (PtrToPtr)
  using: _30@Mir(bb7[6])
  _33 = const 29_u32
  using: 
  _37 = const b"void test_buffer_new()\x00"
  using: 
  _36 = &raw const (*_37)
  using: _37@Mir(bb7[9])
  _35 = move _36 as *const u8 (Pointer(ArrayToPointer))
  using: _36@Mir(bb7[10])
  _34 = move _35 as *const i8 (PtrToPtr)
  using: _35@Mir(bb7[11])
  _24 = src::test::__assert_fail(move _25, move _29, move _33, move _34)
  using: _25@Mir(bb7[3]), _29@Mir(bb7[7]), _33@Mir(bb7[8]), _34@Mir(bb7[12])
bb8:
  return
  using: _0@Entry
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:89:9: 94:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:98:9: 103:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:71 ~ lib[40c5]::src::test::test_buffer_new_with_size)
bb0:
  _2 = const 1024_u64
  using: 
  _1 = src::buffer::buffer_new_with_size(move _2) -> bb1
  using: _2@Mir(bb0[0])
bb1:
  _4 = const 1024_u64
  using: 
  _6 = _1
  using: _1@Mir(bb0[1])
  _5 = src::buffer::buffer_size(move _6) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb1[0]), _5@Mir(bb1[2])
  switchInt(move _3) -> [0: bb4, otherwise: bb3]
  using: _3@Mir(bb2[0])
bb3:
  _22 = const 0_u64
  using: 
  _24 = _1
  using: _1@Mir(bb0[1])
  _23 = src::buffer::buffer_length(move _24) -> bb5
  using: _24@Mir(bb3[1])
bb4:
  _11 = const b"1024 == buffer_size(buf)\x00"
  using: 
  _10 = &raw const (*_11)
  using: _11@Mir(bb4[0])
  _9 = move _10 as *const u8 (Pointer(ArrayToPointer))
  using: _10@Mir(bb4[1])
  _8 = move _9 as *const i8 (PtrToPtr)
  using: _9@Mir(bb4[2])
  _15 = const b"test.c\x00"
  using: 
  _14 = &raw const (*_15)
  using: _15@Mir(bb4[4])
  _13 = move _14 as *const u8 (Pointer(ArrayToPointer))
  using: _14@Mir(bb4[5])
  _12 = move _13 as *const i8 (PtrToPtr)
  using: _13@Mir(bb4[6])
  _16 = const 36_u32
  using: 
  _20 = const b"void test_buffer_new_with_size()\x00"
  using: 
  _19 = &raw const (*_20)
  using: _20@Mir(bb4[9])
  _18 = move _19 as *const u8 (Pointer(ArrayToPointer))
  using: _19@Mir(bb4[10])
  _17 = move _18 as *const i8 (PtrToPtr)
  using: _18@Mir(bb4[11])
  _7 = src::test::__assert_fail(move _8, move _12, move _16, move _17)
  using: _8@Mir(bb4[3]), _12@Mir(bb4[7]), _16@Mir(bb4[8]), _17@Mir(bb4[12])
bb5:
  _21 = Eq(move _22, move _23)
  using: _22@Mir(bb3[0]), _23@Mir(bb3[2])
  switchInt(move _21) -> [0: bb7, otherwise: bb6]
  using: _21@Mir(bb5[0])
bb6:
  _40 = _1
  using: _1@Mir(bb0[1])
  _39 = src::buffer::buffer_free(move _40) -> bb8
  using: _40@Mir(bb6[0])
bb7:
  _29 = const b"0 == buffer_length(buf)\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb7[0])
  _27 = move _28 as *const u8 (Pointer(ArrayToPointer))
  using: _28@Mir(bb7[1])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb7[2])
  _33 = const b"test.c\x00"
  using: 
  _32 = &raw const (*_33)
  using: _33@Mir(bb7[4])
  _31 = move _32 as *const u8 (Pointer(ArrayToPointer))
  using: _32@Mir(bb7[5])
  _30 = move _31 as *const i8 (PtrToPtr)
  using: _31@Mir(bb7[6])
  _34 = const 37_u32
  using: 
  _38 = const b"void test_buffer_new_with_size()\x00"
  using: 
  _37 = &raw const (*_38)
  using: _38@Mir(bb7[9])
  _36 = move _37 as *const u8 (Pointer(ArrayToPointer))
  using: _37@Mir(bb7[10])
  _35 = move _36 as *const i8 (PtrToPtr)
  using: _36@Mir(bb7[11])
  _25 = src::test::__assert_fail(move _26, move _30, move _34, move _35)
  using: _26@Mir(bb7[3]), _30@Mir(bb7[7]), _34@Mir(bb7[8]), _35@Mir(bb7[12])
bb8:
  return
  using: _0@Entry
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:112:9: 117:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:121:9: 126:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:72 ~ lib[40c5]::src::test::test_buffer_append)
bb0:
  _1 = src::buffer::buffer_new() -> bb1
  using: 
bb1:
  _3 = const 0_i32
  using: 
  _5 = _1
  using: _1@Mir(bb0[0])
  _9 = const b"Hello\x00"
  using: 
  _8 = &raw const (*_9)
  using: _9@Mir(bb1[2])
  _7 = move _8 as *const u8 (Pointer(ArrayToPointer))
  using: _8@Mir(bb1[3])
  _6 = move _7 as *const i8 (PtrToPtr)
  using: _7@Mir(bb1[4])
  _4 = src::buffer::buffer_append(move _5, move _6) -> bb2
  using: _5@Mir(bb1[1]), _6@Mir(bb1[5])
bb2:
  _2 = Eq(move _3, move _4)
  using: _3@Mir(bb1[0]), _4@Mir(bb1[6])
  switchInt(move _2) -> [0: bb4, otherwise: bb3]
  using: _2@Mir(bb2[0])
bb3:
  _25 = const 0_i32
  using: 
  _27 = _1
  using: _1@Mir(bb0[0])
  _31 = const b" World\x00"
  using: 
  _30 = &raw const (*_31)
  using: _31@Mir(bb3[2])
  _29 = move _30 as *const u8 (Pointer(ArrayToPointer))
  using: _30@Mir(bb3[3])
  _28 = move _29 as *const i8 (PtrToPtr)
  using: _29@Mir(bb3[4])
  _26 = src::buffer::buffer_append(move _27, move _28) -> bb5
  using: _27@Mir(bb3[1]), _28@Mir(bb3[5])
bb4:
  _14 = const b"0 == buffer_append(buf, \"Hello\")\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb4[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb4[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb4[2])
  _18 = const b"test.c\x00"
  using: 
  _17 = &raw const (*_18)
  using: _18@Mir(bb4[4])
  _16 = move _17 as *const u8 (Pointer(ArrayToPointer))
  using: _17@Mir(bb4[5])
  _15 = move _16 as *const i8 (PtrToPtr)
  using: _16@Mir(bb4[6])
  _19 = const 44_u32
  using: 
  _23 = const b"void test_buffer_append()\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb4[9])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb4[10])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb4[11])
  _10 = src::test::__assert_fail(move _11, move _15, move _19, move _20)
  using: _11@Mir(bb4[3]), _15@Mir(bb4[7]), _19@Mir(bb4[8]), _20@Mir(bb4[12])
bb5:
  _24 = Eq(move _25, move _26)
  using: _25@Mir(bb3[0]), _26@Mir(bb3[6])
  switchInt(move _24) -> [0: bb7, otherwise: bb6]
  using: _24@Mir(bb5[0])
bb6:
  _51 = const b"Hello World\x00"
  using: 
  _50 = &raw const (*_51)
  using: _51@Mir(bb6[0])
  _49 = move _50 as *const u8 (Pointer(ArrayToPointer))
  using: _50@Mir(bb6[1])
  _48 = move _49 as *const i8 (PtrToPtr)
  using: _49@Mir(bb6[2])
  _47 = src::test::strlen(move _48) -> bb8
  using: _48@Mir(bb6[3])
bb7:
  _36 = const b"0 == buffer_append(buf, \" World\")\x00"
  using: 
  _35 = &raw const (*_36)
  using: _36@Mir(bb7[0])
  _34 = move _35 as *const u8 (Pointer(ArrayToPointer))
  using: _35@Mir(bb7[1])
  _33 = move _34 as *const i8 (PtrToPtr)
  using: _34@Mir(bb7[2])
  _40 = const b"test.c\x00"
  using: 
  _39 = &raw const (*_40)
  using: _40@Mir(bb7[4])
  _38 = move _39 as *const u8 (Pointer(ArrayToPointer))
  using: _39@Mir(bb7[5])
  _37 = move _38 as *const i8 (PtrToPtr)
  using: _38@Mir(bb7[6])
  _41 = const 45_u32
  using: 
  _45 = const b"void test_buffer_append()\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb7[9])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb7[10])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb7[11])
  _32 = src::test::__assert_fail(move _33, move _37, move _41, move _42)
  using: _33@Mir(bb7[3]), _37@Mir(bb7[7]), _41@Mir(bb7[8]), _42@Mir(bb7[12])
bb8:
  _53 = _1
  using: _1@Mir(bb0[0])
  _52 = src::buffer::buffer_length(move _53) -> bb9
  using: _53@Mir(bb8[0])
bb9:
  _46 = Eq(move _47, move _52)
  using: _47@Mir(bb6[4]), _52@Mir(bb8[1])
  switchInt(move _46) -> [0: bb11, otherwise: bb10]
  using: _46@Mir(bb9[0])
bb10:
  _73 = const b"Hello World\x00"
  using: 
  _72 = &raw const (*_73)
  using: _73@Mir(bb10[0])
  _71 = move _72 as *const u8 (Pointer(ArrayToPointer))
  using: _72@Mir(bb10[1])
  _70 = move _71 as *const i8 (PtrToPtr)
  using: _71@Mir(bb10[2])
  _69 = move _70 as *mut i8 (PtrToPtr)
  using: _70@Mir(bb10[3])
  _74 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[0])
  _68 = src::test::equal(move _69, move _74) -> bb12
  using: _69@Mir(bb10[4]), _74@Mir(bb10[5])
bb11:
  _58 = const b"strlen(\"Hello World\") == buffer_length(buf)\x00"
  using: 
  _57 = &raw const (*_58)
  using: _58@Mir(bb11[0])
  _56 = move _57 as *const u8 (Pointer(ArrayToPointer))
  using: _57@Mir(bb11[1])
  _55 = move _56 as *const i8 (PtrToPtr)
  using: _56@Mir(bb11[2])
  _62 = const b"test.c\x00"
  using: 
  _61 = &raw const (*_62)
  using: _62@Mir(bb11[4])
  _60 = move _61 as *const u8 (Pointer(ArrayToPointer))
  using: _61@Mir(bb11[5])
  _59 = move _60 as *const i8 (PtrToPtr)
  using: _60@Mir(bb11[6])
  _63 = const 46_u32
  using: 
  _67 = const b"void test_buffer_append()\x00"
  using: 
  _66 = &raw const (*_67)
  using: _67@Mir(bb11[9])
  _65 = move _66 as *const u8 (Pointer(ArrayToPointer))
  using: _66@Mir(bb11[10])
  _64 = move _65 as *const i8 (PtrToPtr)
  using: _65@Mir(bb11[11])
  _54 = src::test::__assert_fail(move _55, move _59, move _63, move _64)
  using: _55@Mir(bb11[3]), _59@Mir(bb11[7]), _63@Mir(bb11[8]), _64@Mir(bb11[12])
bb12:
  _76 = _1
  using: _1@Mir(bb0[0])
  _75 = src::buffer::buffer_free(move _76) -> bb13
  using: _76@Mir(bb12[0])
bb13:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:135:9: 140:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::strlen @ workspace/clibs-buffer/src/test.rs:151:8: 151:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:144:9: 149:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:153:9: 159:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:73 ~ lib[40c5]::src::test::test_buffer_append_n)
bb0:
  _1 = src::buffer::buffer_new() -> bb1
  using: 
bb1:
  _3 = const 0_i32
  using: 
  _5 = _1
  using: _1@Mir(bb0[0])
  _9 = const b"subway\x00"
  using: 
  _8 = &raw const (*_9)
  using: _9@Mir(bb1[2])
  _7 = move _8 as *const u8 (Pointer(ArrayToPointer))
  using: _8@Mir(bb1[3])
  _6 = move _7 as *const i8 (PtrToPtr)
  using: _7@Mir(bb1[4])
  _10 = const 3_u64
  using: 
  _4 = src::buffer::buffer_append_n(move _5, move _6, move _10) -> bb2
  using: _5@Mir(bb1[1]), _6@Mir(bb1[5]), _10@Mir(bb1[6])
bb2:
  _2 = Eq(move _3, move _4)
  using: _3@Mir(bb1[0]), _4@Mir(bb1[7])
  switchInt(move _2) -> [0: bb4, otherwise: bb3]
  using: _2@Mir(bb2[0])
bb3:
  _26 = const 0_i32
  using: 
  _28 = _1
  using: _1@Mir(bb0[0])
  _32 = const b"marines\x00"
  using: 
  _31 = &raw const (*_32)
  using: _32@Mir(bb3[2])
  _30 = move _31 as *const u8 (Pointer(ArrayToPointer))
  using: _31@Mir(bb3[3])
  _29 = move _30 as *const i8 (PtrToPtr)
  using: _30@Mir(bb3[4])
  _33 = const 6_u64
  using: 
  _27 = src::buffer::buffer_append_n(move _28, move _29, move _33) -> bb5
  using: _28@Mir(bb3[1]), _29@Mir(bb3[5]), _33@Mir(bb3[6])
bb4:
  _15 = const b"0 == buffer_append_n(buf, \"subway\", 3)\x00"
  using: 
  _14 = &raw const (*_15)
  using: _15@Mir(bb4[0])
  _13 = move _14 as *const u8 (Pointer(ArrayToPointer))
  using: _14@Mir(bb4[1])
  _12 = move _13 as *const i8 (PtrToPtr)
  using: _13@Mir(bb4[2])
  _19 = const b"test.c\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb4[4])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb4[5])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb4[6])
  _20 = const 54_u32
  using: 
  _24 = const b"void test_buffer_append_n()\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb4[9])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb4[10])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb4[11])
  _11 = src::test::__assert_fail(move _12, move _16, move _20, move _21)
  using: _12@Mir(bb4[3]), _16@Mir(bb4[7]), _20@Mir(bb4[8]), _21@Mir(bb4[12])
bb5:
  _25 = Eq(move _26, move _27)
  using: _26@Mir(bb3[0]), _27@Mir(bb3[7])
  switchInt(move _25) -> [0: bb7, otherwise: bb6]
  using: _25@Mir(bb5[0])
bb6:
  _53 = const b"submarine\x00"
  using: 
  _52 = &raw const (*_53)
  using: _53@Mir(bb6[0])
  _51 = move _52 as *const u8 (Pointer(ArrayToPointer))
  using: _52@Mir(bb6[1])
  _50 = move _51 as *const i8 (PtrToPtr)
  using: _51@Mir(bb6[2])
  _49 = src::test::strlen(move _50) -> bb8
  using: _50@Mir(bb6[3])
bb7:
  _38 = const b"0 == buffer_append_n(buf, \"marines\", 6)\x00"
  using: 
  _37 = &raw const (*_38)
  using: _38@Mir(bb7[0])
  _36 = move _37 as *const u8 (Pointer(ArrayToPointer))
  using: _37@Mir(bb7[1])
  _35 = move _36 as *const i8 (PtrToPtr)
  using: _36@Mir(bb7[2])
  _42 = const b"test.c\x00"
  using: 
  _41 = &raw const (*_42)
  using: _42@Mir(bb7[4])
  _40 = move _41 as *const u8 (Pointer(ArrayToPointer))
  using: _41@Mir(bb7[5])
  _39 = move _40 as *const i8 (PtrToPtr)
  using: _40@Mir(bb7[6])
  _43 = const 55_u32
  using: 
  _47 = const b"void test_buffer_append_n()\x00"
  using: 
  _46 = &raw const (*_47)
  using: _47@Mir(bb7[9])
  _45 = move _46 as *const u8 (Pointer(ArrayToPointer))
  using: _46@Mir(bb7[10])
  _44 = move _45 as *const i8 (PtrToPtr)
  using: _45@Mir(bb7[11])
  _34 = src::test::__assert_fail(move _35, move _39, move _43, move _44)
  using: _35@Mir(bb7[3]), _39@Mir(bb7[7]), _43@Mir(bb7[8]), _44@Mir(bb7[12])
bb8:
  _55 = _1
  using: _1@Mir(bb0[0])
  _54 = src::buffer::buffer_length(move _55) -> bb9
  using: _55@Mir(bb8[0])
bb9:
  _48 = Eq(move _49, move _54)
  using: _49@Mir(bb6[4]), _54@Mir(bb8[1])
  switchInt(move _48) -> [0: bb11, otherwise: bb10]
  using: _48@Mir(bb9[0])
bb10:
  _75 = const b"submarine\x00"
  using: 
  _74 = &raw const (*_75)
  using: _75@Mir(bb10[0])
  _73 = move _74 as *const u8 (Pointer(ArrayToPointer))
  using: _74@Mir(bb10[1])
  _72 = move _73 as *const i8 (PtrToPtr)
  using: _73@Mir(bb10[2])
  _71 = move _72 as *mut i8 (PtrToPtr)
  using: _72@Mir(bb10[3])
  _76 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[0])
  _70 = src::test::equal(move _71, move _76) -> bb12
  using: _71@Mir(bb10[4]), _76@Mir(bb10[5])
bb11:
  _60 = const b"strlen(\"submarine\") == buffer_length(buf)\x00"
  using: 
  _59 = &raw const (*_60)
  using: _60@Mir(bb11[0])
  _58 = move _59 as *const u8 (Pointer(ArrayToPointer))
  using: _59@Mir(bb11[1])
  _57 = move _58 as *const i8 (PtrToPtr)
  using: _58@Mir(bb11[2])
  _64 = const b"test.c\x00"
  using: 
  _63 = &raw const (*_64)
  using: _64@Mir(bb11[4])
  _62 = move _63 as *const u8 (Pointer(ArrayToPointer))
  using: _63@Mir(bb11[5])
  _61 = move _62 as *const i8 (PtrToPtr)
  using: _62@Mir(bb11[6])
  _65 = const 56_u32
  using: 
  _69 = const b"void test_buffer_append_n()\x00"
  using: 
  _68 = &raw const (*_69)
  using: _69@Mir(bb11[9])
  _67 = move _68 as *const u8 (Pointer(ArrayToPointer))
  using: _68@Mir(bb11[10])
  _66 = move _67 as *const i8 (PtrToPtr)
  using: _67@Mir(bb11[11])
  _56 = src::test::__assert_fail(move _57, move _61, move _65, move _66)
  using: _57@Mir(bb11[3]), _61@Mir(bb11[7]), _65@Mir(bb11[8]), _66@Mir(bb11[12])
bb12:
  _78 = _1
  using: _1@Mir(bb0[0])
  _77 = src::buffer::buffer_free(move _78) -> bb13
  using: _78@Mir(bb12[0])
bb13:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:178:9: 183:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::strlen @ workspace/clibs-buffer/src/test.rs:200:8: 200:68 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:193:9: 198:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:202:9: 207:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:74 ~ lib[40c5]::src::test::test_buffer_append__grow)
bb0:
  _2 = const 10_u64
  using: 
  _1 = src::buffer::buffer_new_with_size(move _2) -> bb1
  using: _2@Mir(bb0[0])
bb1:
  _4 = const 0_i32
  using: 
  _6 = _1
  using: _1@Mir(bb0[1])
  _10 = const b"Hello\x00"
  using: 
  _9 = &raw const (*_10)
  using: _10@Mir(bb1[2])
  _8 = move _9 as *const u8 (Pointer(ArrayToPointer))
  using: _9@Mir(bb1[3])
  _7 = move _8 as *const i8 (PtrToPtr)
  using: _8@Mir(bb1[4])
  _5 = src::buffer::buffer_append(move _6, move _7) -> bb2
  using: _6@Mir(bb1[1]), _7@Mir(bb1[5])
bb2:
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb1[0]), _5@Mir(bb1[6])
  switchInt(move _3) -> [0: bb4, otherwise: bb3]
  using: _3@Mir(bb2[0])
bb3:
  _26 = const 0_i32
  using: 
  _28 = _1
  using: _1@Mir(bb0[1])
  _32 = const b" tobi\x00"
  using: 
  _31 = &raw const (*_32)
  using: _32@Mir(bb3[2])
  _30 = move _31 as *const u8 (Pointer(ArrayToPointer))
  using: _31@Mir(bb3[3])
  _29 = move _30 as *const i8 (PtrToPtr)
  using: _30@Mir(bb3[4])
  _27 = src::buffer::buffer_append(move _28, move _29) -> bb5
  using: _28@Mir(bb3[1]), _29@Mir(bb3[5])
bb4:
  _15 = const b"0 == buffer_append(buf, \"Hello\")\x00"
  using: 
  _14 = &raw const (*_15)
  using: _15@Mir(bb4[0])
  _13 = move _14 as *const u8 (Pointer(ArrayToPointer))
  using: _14@Mir(bb4[1])
  _12 = move _13 as *const i8 (PtrToPtr)
  using: _13@Mir(bb4[2])
  _19 = const b"test.c\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb4[4])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb4[5])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb4[6])
  _20 = const 64_u32
  using: 
  _24 = const b"void test_buffer_append__grow()\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb4[9])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb4[10])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb4[11])
  _11 = src::test::__assert_fail(move _12, move _16, move _20, move _21)
  using: _12@Mir(bb4[3]), _16@Mir(bb4[7]), _20@Mir(bb4[8]), _21@Mir(bb4[12])
bb5:
  _25 = Eq(move _26, move _27)
  using: _26@Mir(bb3[0]), _27@Mir(bb3[6])
  switchInt(move _25) -> [0: bb7, otherwise: bb6]
  using: _25@Mir(bb5[0])
bb6:
  _48 = const 0_i32
  using: 
  _50 = _1
  using: _1@Mir(bb0[1])
  _54 = const b" was\x00"
  using: 
  _53 = &raw const (*_54)
  using: _54@Mir(bb6[2])
  _52 = move _53 as *const u8 (Pointer(ArrayToPointer))
  using: _53@Mir(bb6[3])
  _51 = move _52 as *const i8 (PtrToPtr)
  using: _52@Mir(bb6[4])
  _49 = src::buffer::buffer_append(move _50, move _51) -> bb8
  using: _50@Mir(bb6[1]), _51@Mir(bb6[5])
bb7:
  _37 = const b"0 == buffer_append(buf, \" tobi\")\x00"
  using: 
  _36 = &raw const (*_37)
  using: _37@Mir(bb7[0])
  _35 = move _36 as *const u8 (Pointer(ArrayToPointer))
  using: _36@Mir(bb7[1])
  _34 = move _35 as *const i8 (PtrToPtr)
  using: _35@Mir(bb7[2])
  _41 = const b"test.c\x00"
  using: 
  _40 = &raw const (*_41)
  using: _41@Mir(bb7[4])
  _39 = move _40 as *const u8 (Pointer(ArrayToPointer))
  using: _40@Mir(bb7[5])
  _38 = move _39 as *const i8 (PtrToPtr)
  using: _39@Mir(bb7[6])
  _42 = const 65_u32
  using: 
  _46 = const b"void test_buffer_append__grow()\x00"
  using: 
  _45 = &raw const (*_46)
  using: _46@Mir(bb7[9])
  _44 = move _45 as *const u8 (Pointer(ArrayToPointer))
  using: _45@Mir(bb7[10])
  _43 = move _44 as *const i8 (PtrToPtr)
  using: _44@Mir(bb7[11])
  _33 = src::test::__assert_fail(move _34, move _38, move _42, move _43)
  using: _34@Mir(bb7[3]), _38@Mir(bb7[7]), _42@Mir(bb7[8]), _43@Mir(bb7[12])
bb8:
  _47 = Eq(move _48, move _49)
  using: _48@Mir(bb6[0]), _49@Mir(bb6[6])
  switchInt(move _47) -> [0: bb10, otherwise: bb9]
  using: _47@Mir(bb8[0])
bb9:
  _70 = const 0_i32
  using: 
  _72 = _1
  using: _1@Mir(bb0[1])
  _76 = const b" here\x00"
  using: 
  _75 = &raw const (*_76)
  using: _76@Mir(bb9[2])
  _74 = move _75 as *const u8 (Pointer(ArrayToPointer))
  using: _75@Mir(bb9[3])
  _73 = move _74 as *const i8 (PtrToPtr)
  using: _74@Mir(bb9[4])
  _71 = src::buffer::buffer_append(move _72, move _73) -> bb11
  using: _72@Mir(bb9[1]), _73@Mir(bb9[5])
bb10:
  _59 = const b"0 == buffer_append(buf, \" was\")\x00"
  using: 
  _58 = &raw const (*_59)
  using: _59@Mir(bb10[0])
  _57 = move _58 as *const u8 (Pointer(ArrayToPointer))
  using: _58@Mir(bb10[1])
  _56 = move _57 as *const i8 (PtrToPtr)
  using: _57@Mir(bb10[2])
  _63 = const b"test.c\x00"
  using: 
  _62 = &raw const (*_63)
  using: _63@Mir(bb10[4])
  _61 = move _62 as *const u8 (Pointer(ArrayToPointer))
  using: _62@Mir(bb10[5])
  _60 = move _61 as *const i8 (PtrToPtr)
  using: _61@Mir(bb10[6])
  _64 = const 66_u32
  using: 
  _68 = const b"void test_buffer_append__grow()\x00"
  using: 
  _67 = &raw const (*_68)
  using: _68@Mir(bb10[9])
  _66 = move _67 as *const u8 (Pointer(ArrayToPointer))
  using: _67@Mir(bb10[10])
  _65 = move _66 as *const i8 (PtrToPtr)
  using: _66@Mir(bb10[11])
  _55 = src::test::__assert_fail(move _56, move _60, move _64, move _65)
  using: _56@Mir(bb10[3]), _60@Mir(bb10[7]), _64@Mir(bb10[8]), _65@Mir(bb10[12])
bb11:
  _69 = Eq(move _70, move _71)
  using: _70@Mir(bb9[0]), _71@Mir(bb9[6])
  switchInt(move _69) -> [0: bb13, otherwise: bb12]
  using: _69@Mir(bb11[0])
bb12:
  _95 = const b"Hello tobi was here\x00"
  using: 
  _94 = &raw const (*_95)
  using: _95@Mir(bb12[0])
  _93 = move _94 as *const u8 (Pointer(ArrayToPointer))
  using: _94@Mir(bb12[1])
  _92 = move _93 as *const i8 (PtrToPtr)
  using: _93@Mir(bb12[2])
  _91 = move _92 as *mut i8 (PtrToPtr)
  using: _92@Mir(bb12[3])
  _97 = _91
  using: _91@Mir(bb12[4])
  _98 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[1])
  _96 = src::test::equal(move _97, move _98) -> bb14
  using: _97@Mir(bb12[5]), _98@Mir(bb12[6])
bb13:
  _81 = const b"0 == buffer_append(buf, \" here\")\x00"
  using: 
  _80 = &raw const (*_81)
  using: _81@Mir(bb13[0])
  _79 = move _80 as *const u8 (Pointer(ArrayToPointer))
  using: _80@Mir(bb13[1])
  _78 = move _79 as *const i8 (PtrToPtr)
  using: _79@Mir(bb13[2])
  _85 = const b"test.c\x00"
  using: 
  _84 = &raw const (*_85)
  using: _85@Mir(bb13[4])
  _83 = move _84 as *const u8 (Pointer(ArrayToPointer))
  using: _84@Mir(bb13[5])
  _82 = move _83 as *const i8 (PtrToPtr)
  using: _83@Mir(bb13[6])
  _86 = const 67_u32
  using: 
  _90 = const b"void test_buffer_append__grow()\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb13[9])
  _88 = move _89 as *const u8 (Pointer(ArrayToPointer))
  using: _89@Mir(bb13[10])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb13[11])
  _77 = src::test::__assert_fail(move _78, move _82, move _86, move _87)
  using: _78@Mir(bb13[3]), _82@Mir(bb13[7]), _86@Mir(bb13[8]), _87@Mir(bb13[12])
bb14:
  _100 = const 1024_u64
  using: 
  _102 = _1
  using: _1@Mir(bb0[1])
  _101 = src::buffer::buffer_size(move _102) -> bb15
  using: _102@Mir(bb14[1])
bb15:
  _99 = Eq(move _100, move _101)
  using: _100@Mir(bb14[0]), _101@Mir(bb14[2])
  switchInt(move _99) -> [0: bb17, otherwise: bb16]
  using: _99@Mir(bb15[0])
bb16:
  _120 = _91
  using: _91@Mir(bb12[4])
  _119 = move _120 as *const i8 (Pointer(MutToConstPointer))
  using: _120@Mir(bb16[0])
  _118 = src::test::strlen(move _119) -> bb18
  using: _119@Mir(bb16[1])
bb17:
  _107 = const b"1024 == buffer_size(buf)\x00"
  using: 
  _106 = &raw const (*_107)
  using: _107@Mir(bb17[0])
  _105 = move _106 as *const u8 (Pointer(ArrayToPointer))
  using: _106@Mir(bb17[1])
  _104 = move _105 as *const i8 (PtrToPtr)
  using: _105@Mir(bb17[2])
  _111 = const b"test.c\x00"
  using: 
  _110 = &raw const (*_111)
  using: _111@Mir(bb17[4])
  _109 = move _110 as *const u8 (Pointer(ArrayToPointer))
  using: _110@Mir(bb17[5])
  _108 = move _109 as *const i8 (PtrToPtr)
  using: _109@Mir(bb17[6])
  _112 = const 71_u32
  using: 
  _116 = const b"void test_buffer_append__grow()\x00"
  using: 
  _115 = &raw const (*_116)
  using: _116@Mir(bb17[9])
  _114 = move _115 as *const u8 (Pointer(ArrayToPointer))
  using: _115@Mir(bb17[10])
  _113 = move _114 as *const i8 (PtrToPtr)
  using: _114@Mir(bb17[11])
  _103 = src::test::__assert_fail(move _104, move _108, move _112, move _113)
  using: _104@Mir(bb17[3]), _108@Mir(bb17[7]), _112@Mir(bb17[8]), _113@Mir(bb17[12])
bb18:
  _122 = _1
  using: _1@Mir(bb0[1])
  _121 = src::buffer::buffer_length(move _122) -> bb19
  using: _122@Mir(bb18[0])
bb19:
  _117 = Eq(move _118, move _121)
  using: _118@Mir(bb16[2]), _121@Mir(bb18[1])
  switchInt(move _117) -> [0: bb21, otherwise: bb20]
  using: _117@Mir(bb19[0])
bb20:
  _138 = _1
  using: _1@Mir(bb0[1])
  _137 = src::buffer::buffer_free(move _138) -> bb22
  using: _138@Mir(bb20[0])
bb21:
  _127 = const b"strlen(str) == buffer_length(buf)\x00"
  using: 
  _126 = &raw const (*_127)
  using: _127@Mir(bb21[0])
  _125 = move _126 as *const u8 (Pointer(ArrayToPointer))
  using: _126@Mir(bb21[1])
  _124 = move _125 as *const i8 (PtrToPtr)
  using: _125@Mir(bb21[2])
  _131 = const b"test.c\x00"
  using: 
  _130 = &raw const (*_131)
  using: _131@Mir(bb21[4])
  _129 = move _130 as *const u8 (Pointer(ArrayToPointer))
  using: _130@Mir(bb21[5])
  _128 = move _129 as *const i8 (PtrToPtr)
  using: _129@Mir(bb21[6])
  _132 = const 72_u32
  using: 
  _136 = const b"void test_buffer_append__grow()\x00"
  using: 
  _135 = &raw const (*_136)
  using: _136@Mir(bb21[9])
  _134 = move _135 as *const u8 (Pointer(ArrayToPointer))
  using: _135@Mir(bb21[10])
  _133 = move _134 as *const i8 (PtrToPtr)
  using: _134@Mir(bb21[11])
  _123 = src::test::__assert_fail(move _124, move _128, move _132, move _133)
  using: _124@Mir(bb21[3]), _128@Mir(bb21[7]), _132@Mir(bb21[8]), _133@Mir(bb21[12])
bb22:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:220:9: 225:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:229:9: 234:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:238:9: 243:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:247:9: 252:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::strlen @ workspace/clibs-buffer/src/test.rs:266:8: 266:19 (#0) by default
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:259:9: 264:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:268:9: 273:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:75 ~ lib[40c5]::src::test::test_buffer_prepend)
bb0:
  _1 = src::buffer::buffer_new() -> bb1
  using: 
bb1:
  _3 = const 0_i32
  using: 
  _5 = _1
  using: _1@Mir(bb0[0])
  _9 = const b" World\x00"
  using: 
  _8 = &raw const (*_9)
  using: _9@Mir(bb1[2])
  _7 = move _8 as *const u8 (Pointer(ArrayToPointer))
  using: _8@Mir(bb1[3])
  _6 = move _7 as *const i8 (PtrToPtr)
  using: _7@Mir(bb1[4])
  _4 = src::buffer::buffer_append(move _5, move _6) -> bb2
  using: _5@Mir(bb1[1]), _6@Mir(bb1[5])
bb2:
  _2 = Eq(move _3, move _4)
  using: _3@Mir(bb1[0]), _4@Mir(bb1[6])
  switchInt(move _2) -> [0: bb4, otherwise: bb3]
  using: _2@Mir(bb2[0])
bb3:
  _25 = const 0_i32
  using: 
  _27 = _1
  using: _1@Mir(bb0[0])
  _32 = const b"Hello\x00"
  using: 
  _31 = &raw const (*_32)
  using: _32@Mir(bb3[2])
  _30 = move _31 as *const u8 (Pointer(ArrayToPointer))
  using: _31@Mir(bb3[3])
  _29 = move _30 as *const i8 (PtrToPtr)
  using: _30@Mir(bb3[4])
  _28 = move _29 as *mut i8 (PtrToPtr)
  using: _29@Mir(bb3[5])
  _26 = src::buffer::buffer_prepend(move _27, move _28) -> bb5
  using: _27@Mir(bb3[1]), _28@Mir(bb3[6])
bb4:
  _14 = const b"0 == buffer_append(buf, \" World\")\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb4[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb4[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb4[2])
  _18 = const b"test.c\x00"
  using: 
  _17 = &raw const (*_18)
  using: _18@Mir(bb4[4])
  _16 = move _17 as *const u8 (Pointer(ArrayToPointer))
  using: _17@Mir(bb4[5])
  _15 = move _16 as *const i8 (PtrToPtr)
  using: _16@Mir(bb4[6])
  _19 = const 79_u32
  using: 
  _23 = const b"void test_buffer_prepend()\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb4[9])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb4[10])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb4[11])
  _10 = src::test::__assert_fail(move _11, move _15, move _19, move _20)
  using: _11@Mir(bb4[3]), _15@Mir(bb4[7]), _19@Mir(bb4[8]), _20@Mir(bb4[12])
bb5:
  _24 = Eq(move _25, move _26)
  using: _25@Mir(bb3[0]), _26@Mir(bb3[7])
  switchInt(move _24) -> [0: bb7, otherwise: bb6]
  using: _24@Mir(bb5[0])
bb6:
  _52 = const b"Hello World\x00"
  using: 
  _51 = &raw const (*_52)
  using: _52@Mir(bb6[0])
  _50 = move _51 as *const u8 (Pointer(ArrayToPointer))
  using: _51@Mir(bb6[1])
  _49 = move _50 as *const i8 (PtrToPtr)
  using: _50@Mir(bb6[2])
  _48 = src::test::strlen(move _49) -> bb8
  using: _49@Mir(bb6[3])
bb7:
  _37 = const b"0 == buffer_prepend(buf, \"Hello\")\x00"
  using: 
  _36 = &raw const (*_37)
  using: _37@Mir(bb7[0])
  _35 = move _36 as *const u8 (Pointer(ArrayToPointer))
  using: _36@Mir(bb7[1])
  _34 = move _35 as *const i8 (PtrToPtr)
  using: _35@Mir(bb7[2])
  _41 = const b"test.c\x00"
  using: 
  _40 = &raw const (*_41)
  using: _41@Mir(bb7[4])
  _39 = move _40 as *const u8 (Pointer(ArrayToPointer))
  using: _40@Mir(bb7[5])
  _38 = move _39 as *const i8 (PtrToPtr)
  using: _39@Mir(bb7[6])
  _42 = const 80_u32
  using: 
  _46 = const b"void test_buffer_prepend()\x00"
  using: 
  _45 = &raw const (*_46)
  using: _46@Mir(bb7[9])
  _44 = move _45 as *const u8 (Pointer(ArrayToPointer))
  using: _45@Mir(bb7[10])
  _43 = move _44 as *const i8 (PtrToPtr)
  using: _44@Mir(bb7[11])
  _33 = src::test::__assert_fail(move _34, move _38, move _42, move _43)
  using: _34@Mir(bb7[3]), _38@Mir(bb7[7]), _42@Mir(bb7[8]), _43@Mir(bb7[12])
bb8:
  _54 = _1
  using: _1@Mir(bb0[0])
  _53 = src::buffer::buffer_length(move _54) -> bb9
  using: _54@Mir(bb8[0])
bb9:
  _47 = Eq(move _48, move _53)
  using: _48@Mir(bb6[4]), _53@Mir(bb8[1])
  switchInt(move _47) -> [0: bb11, otherwise: bb10]
  using: _47@Mir(bb9[0])
bb10:
  _74 = const b"Hello World\x00"
  using: 
  _73 = &raw const (*_74)
  using: _74@Mir(bb10[0])
  _72 = move _73 as *const u8 (Pointer(ArrayToPointer))
  using: _73@Mir(bb10[1])
  _71 = move _72 as *const i8 (PtrToPtr)
  using: _72@Mir(bb10[2])
  _70 = move _71 as *mut i8 (PtrToPtr)
  using: _71@Mir(bb10[3])
  _75 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[0])
  _69 = src::test::equal(move _70, move _75) -> bb12
  using: _70@Mir(bb10[4]), _75@Mir(bb10[5])
bb11:
  _59 = const b"strlen(\"Hello World\") == buffer_length(buf)\x00"
  using: 
  _58 = &raw const (*_59)
  using: _59@Mir(bb11[0])
  _57 = move _58 as *const u8 (Pointer(ArrayToPointer))
  using: _58@Mir(bb11[1])
  _56 = move _57 as *const i8 (PtrToPtr)
  using: _57@Mir(bb11[2])
  _63 = const b"test.c\x00"
  using: 
  _62 = &raw const (*_63)
  using: _63@Mir(bb11[4])
  _61 = move _62 as *const u8 (Pointer(ArrayToPointer))
  using: _62@Mir(bb11[5])
  _60 = move _61 as *const i8 (PtrToPtr)
  using: _61@Mir(bb11[6])
  _64 = const 81_u32
  using: 
  _68 = const b"void test_buffer_prepend()\x00"
  using: 
  _67 = &raw const (*_68)
  using: _68@Mir(bb11[9])
  _66 = move _67 as *const u8 (Pointer(ArrayToPointer))
  using: _67@Mir(bb11[10])
  _65 = move _66 as *const i8 (PtrToPtr)
  using: _66@Mir(bb11[11])
  _55 = src::test::__assert_fail(move _56, move _60, move _64, move _65)
  using: _56@Mir(bb11[3]), _60@Mir(bb11[7]), _64@Mir(bb11[8]), _65@Mir(bb11[12])
bb12:
  _77 = _1
  using: _1@Mir(bb0[0])
  _76 = src::buffer::buffer_free(move _77) -> bb13
  using: _77@Mir(bb12[0])
bb13:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:282:9: 287:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::strlen @ workspace/clibs-buffer/src/test.rs:303:8: 303:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:296:9: 301:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:305:9: 311:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:76 ~ lib[40c5]::src::test::test_buffer_slice)
bb0:
  _1 = src::buffer::buffer_new() -> bb1
  using: 
bb1:
  _3 = _1
  using: _1@Mir(bb0[0])
  _7 = const b"Tobi Ferret\x00"
  using: 
  _6 = &raw const (*_7)
  using: _7@Mir(bb1[1])
  _5 = move _6 as *const u8 (Pointer(ArrayToPointer))
  using: _6@Mir(bb1[2])
  _4 = move _5 as *const i8 (PtrToPtr)
  using: _5@Mir(bb1[3])
  _2 = src::buffer::buffer_append(move _3, move _4) -> bb2
  using: _3@Mir(bb1[0]), _4@Mir(bb1[4])
bb2:
  _9 = _1
  using: _1@Mir(bb0[0])
  _10 = const 2_u64
  using: 
  _11 = const 8_i64
  using: 
  _8 = src::buffer::buffer_slice(move _9, move _10, move _11) -> bb3
  using: _9@Mir(bb2[0]), _10@Mir(bb2[1]), _11@Mir(bb2[2])
bb3:
  _17 = const b"Tobi Ferret\x00"
  using: 
  _16 = &raw const (*_17)
  using: _17@Mir(bb3[0])
  _15 = move _16 as *const u8 (Pointer(ArrayToPointer))
  using: _16@Mir(bb3[1])
  _14 = move _15 as *const i8 (PtrToPtr)
  using: _15@Mir(bb3[2])
  _13 = move _14 as *mut i8 (PtrToPtr)
  using: _14@Mir(bb3[3])
  _18 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[0])
  _12 = src::test::equal(move _13, move _18) -> bb4
  using: _13@Mir(bb3[4]), _18@Mir(bb3[5])
bb4:
  _24 = const b"bi Fer\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb4[0])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb4[1])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb4[2])
  _20 = move _21 as *mut i8 (PtrToPtr)
  using: _21@Mir(bb4[3])
  _25 = ((*_8).2: *mut i8)
  using: _8@Mir(bb2[3])
  _19 = src::test::equal(move _20, move _25) -> bb5
  using: _20@Mir(bb4[4]), _25@Mir(bb4[5])
bb5:
  _27 = _1
  using: _1@Mir(bb0[0])
  _26 = src::buffer::buffer_free(move _27) -> bb6
  using: _27@Mir(bb5[0])
bb6:
  _29 = _8
  using: _8@Mir(bb2[3])
  _28 = src::buffer::buffer_free(move _29) -> bb7
  using: _29@Mir(bb6[0])
bb7:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:77 ~ lib[40c5]::src::test::test_buffer_slice__range_error)
bb0:
  _6 = const b"Tobi Ferret\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _9 = const 10_u64
  using: 
  _10 = const 2_i64
  using: 
  _7 = src::buffer::buffer_slice(move _8, move _9, move _10) -> bb2
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1]), _10@Mir(bb1[2])
bb2:
  _12 = _7
  using: _7@Mir(bb1[3])
  _11 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _12) -> bb3
  using: _12@Mir(bb2[0])
bb3:
  switchInt(move _11) -> [0: bb5, otherwise: bb4]
  using: _11@Mir(bb2[1])
bb4:
  _15 = _7
  using: _7@Mir(bb1[3])
  _14 = move _15 as usize (PointerExposeAddress)
  using: _15@Mir(bb4[0])
  _13 = Eq(move _14, const 0_usize)
  using: _14@Mir(bb4[1])
  assume(move _13)
  using: _13@Mir(bb4[2])
  _31 = _1
  using: _1@Mir(bb0[5])
  _30 = src::buffer::buffer_free(move _31) -> bb6
  using: _31@Mir(bb4[4])
bb5:
  _20 = const b"NULL == a\x00"
  using: 
  _19 = &raw const (*_20)
  using: _20@Mir(bb5[0])
  _18 = move _19 as *const u8 (Pointer(ArrayToPointer))
  using: _19@Mir(bb5[1])
  _17 = move _18 as *const i8 (PtrToPtr)
  using: _18@Mir(bb5[2])
  _24 = const b"test.c\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb5[4])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb5[5])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb5[6])
  _25 = const 103_u32
  using: 
  _29 = const b"void test_buffer_slice__range_error()\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb5[9])
  _27 = move _28 as *const u8 (Pointer(ArrayToPointer))
  using: _28@Mir(bb5[10])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb5[11])
  _16 = src::test::__assert_fail(move _17, move _21, move _25, move _26)
  using: _17@Mir(bb5[3]), _21@Mir(bb5[7]), _25@Mir(bb5[8]), _26@Mir(bb5[12])
bb6:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:343:9: 348:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:78 ~ lib[40c5]::src::test::test_buffer_slice__end)
bb0:
  _6 = const b"Tobi Ferret\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _9 = const 5_u64
  using: 
  _10 = const -1_i64
  using: 
  _7 = src::buffer::buffer_slice(move _8, move _9, move _10) -> bb2
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1]), _10@Mir(bb1[2])
bb2:
  _16 = const b"Tobi Ferret\x00"
  using: 
  _15 = &raw const (*_16)
  using: _16@Mir(bb2[0])
  _14 = move _15 as *const u8 (Pointer(ArrayToPointer))
  using: _15@Mir(bb2[1])
  _13 = move _14 as *const i8 (PtrToPtr)
  using: _14@Mir(bb2[2])
  _12 = move _13 as *mut i8 (PtrToPtr)
  using: _13@Mir(bb2[3])
  _17 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[5])
  _11 = src::test::equal(move _12, move _17) -> bb3
  using: _12@Mir(bb2[4]), _17@Mir(bb2[5])
bb3:
  _23 = const b"Ferret\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb3[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb3[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb3[2])
  _19 = move _20 as *mut i8 (PtrToPtr)
  using: _20@Mir(bb3[3])
  _24 = ((*_7).2: *mut i8)
  using: _7@Mir(bb1[3])
  _18 = src::test::equal(move _19, move _24) -> bb4
  using: _19@Mir(bb3[4]), _24@Mir(bb3[5])
bb4:
  _26 = _1
  using: _1@Mir(bb0[5])
  _27 = const 5_u64
  using: 
  _28 = const -3_i64
  using: 
  _25 = src::buffer::buffer_slice(move _26, move _27, move _28) -> bb5
  using: _26@Mir(bb4[0]), _27@Mir(bb4[1]), _28@Mir(bb4[2])
bb5:
  _34 = const b"Ferr\x00"
  using: 
  _33 = &raw const (*_34)
  using: _34@Mir(bb5[0])
  _32 = move _33 as *const u8 (Pointer(ArrayToPointer))
  using: _33@Mir(bb5[1])
  _31 = move _32 as *const i8 (PtrToPtr)
  using: _32@Mir(bb5[2])
  _30 = move _31 as *mut i8 (PtrToPtr)
  using: _31@Mir(bb5[3])
  _35 = ((*_25).2: *mut i8)
  using: _25@Mir(bb4[3])
  _29 = src::test::equal(move _30, move _35) -> bb6
  using: _30@Mir(bb5[4]), _35@Mir(bb5[5])
bb6:
  _37 = _1
  using: _1@Mir(bb0[5])
  _38 = const 8_u64
  using: 
  _39 = const -1_i64
  using: 
  _36 = src::buffer::buffer_slice(move _37, move _38, move _39) -> bb7
  using: _37@Mir(bb6[0]), _38@Mir(bb6[1]), _39@Mir(bb6[2])
bb7:
  _45 = const b"ret\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb7[0])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb7[1])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb7[2])
  _41 = move _42 as *mut i8 (PtrToPtr)
  using: _42@Mir(bb7[3])
  _46 = ((*_36).2: *mut i8)
  using: _36@Mir(bb6[3])
  _40 = src::test::equal(move _41, move _46) -> bb8
  using: _41@Mir(bb7[4]), _46@Mir(bb7[5])
bb8:
  _48 = _1
  using: _1@Mir(bb0[5])
  _47 = src::buffer::buffer_free(move _48) -> bb9
  using: _48@Mir(bb8[0])
bb9:
  _50 = _7
  using: _7@Mir(bb1[3])
  _49 = src::buffer::buffer_free(move _50) -> bb10
  using: _50@Mir(bb9[0])
bb10:
  _52 = _25
  using: _25@Mir(bb4[3])
  _51 = src::buffer::buffer_free(move _52) -> bb11
  using: _52@Mir(bb10[0])
bb11:
  _54 = _36
  using: _36@Mir(bb6[3])
  _53 = src::buffer::buffer_free(move _54) -> bb12
  using: _54@Mir(bb11[0])
bb12:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:79 ~ lib[40c5]::src::test::test_buffer_slice__end_overflow)
bb0:
  _6 = const b"Tobi Ferret\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _9 = const 5_u64
  using: 
  _10 = const 1000_i64
  using: 
  _7 = src::buffer::buffer_slice(move _8, move _9, move _10) -> bb2
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1]), _10@Mir(bb1[2])
bb2:
  _16 = const b"Tobi Ferret\x00"
  using: 
  _15 = &raw const (*_16)
  using: _16@Mir(bb2[0])
  _14 = move _15 as *const u8 (Pointer(ArrayToPointer))
  using: _15@Mir(bb2[1])
  _13 = move _14 as *const i8 (PtrToPtr)
  using: _14@Mir(bb2[2])
  _12 = move _13 as *mut i8 (PtrToPtr)
  using: _13@Mir(bb2[3])
  _17 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[5])
  _11 = src::test::equal(move _12, move _17) -> bb3
  using: _12@Mir(bb2[4]), _17@Mir(bb2[5])
bb3:
  _23 = const b"Ferret\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb3[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb3[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb3[2])
  _19 = move _20 as *mut i8 (PtrToPtr)
  using: _20@Mir(bb3[3])
  _24 = ((*_7).2: *mut i8)
  using: _7@Mir(bb1[3])
  _18 = src::test::equal(move _19, move _24) -> bb4
  using: _19@Mir(bb3[4]), _24@Mir(bb3[5])
bb4:
  _26 = _7
  using: _7@Mir(bb1[3])
  _25 = src::buffer::buffer_free(move _26) -> bb5
  using: _26@Mir(bb4[0])
bb5:
  _28 = _1
  using: _1@Mir(bb0[5])
  _27 = src::buffer::buffer_free(move _28) -> bb6
  using: _28@Mir(bb5[0])
bb6:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:80 ~ lib[40c5]::src::test::test_buffer_equals)
bb0:
  _6 = const b"Hello\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _12 = const b"Hello\x00"
  using: 
  _11 = &raw const (*_12)
  using: _12@Mir(bb1[0])
  _10 = move _11 as *const u8 (Pointer(ArrayToPointer))
  using: _11@Mir(bb1[1])
  _9 = move _10 as *const i8 (PtrToPtr)
  using: _10@Mir(bb1[2])
  _8 = move _9 as *mut i8 (PtrToPtr)
  using: _9@Mir(bb1[3])
  _7 = src::buffer::buffer_new_with_copy(move _8) -> bb2
  using: _8@Mir(bb1[4])
bb2:
  _14 = const 1_i32
  using: 
  _16 = _1
  using: _1@Mir(bb0[5])
  _17 = _7
  using: _7@Mir(bb1[5])
  _15 = src::buffer::buffer_equals(move _16, move _17) -> bb3
  using: _16@Mir(bb2[1]), _17@Mir(bb2[2])
bb3:
  _13 = Eq(move _14, move _15)
  using: _14@Mir(bb2[0]), _15@Mir(bb2[3])
  switchInt(move _13) -> [0: bb5, otherwise: bb4]
  using: _13@Mir(bb3[0])
bb4:
  _33 = _7
  using: _7@Mir(bb1[5])
  _37 = const b" World\x00"
  using: 
  _36 = &raw const (*_37)
  using: _37@Mir(bb4[1])
  _35 = move _36 as *const u8 (Pointer(ArrayToPointer))
  using: _36@Mir(bb4[2])
  _34 = move _35 as *const i8 (PtrToPtr)
  using: _35@Mir(bb4[3])
  _32 = src::buffer::buffer_append(move _33, move _34) -> bb6
  using: _33@Mir(bb4[0]), _34@Mir(bb4[4])
bb5:
  _22 = const b"1 == buffer_equals(a, b)\x00"
  using: 
  _21 = &raw const (*_22)
  using: _22@Mir(bb5[0])
  _20 = move _21 as *const u8 (Pointer(ArrayToPointer))
  using: _21@Mir(bb5[1])
  _19 = move _20 as *const i8 (PtrToPtr)
  using: _20@Mir(bb5[2])
  _26 = const b"test.c\x00"
  using: 
  _25 = &raw const (*_26)
  using: _26@Mir(bb5[4])
  _24 = move _25 as *const u8 (Pointer(ArrayToPointer))
  using: _25@Mir(bb5[5])
  _23 = move _24 as *const i8 (PtrToPtr)
  using: _24@Mir(bb5[6])
  _27 = const 142_u32
  using: 
  _31 = const b"void test_buffer_equals()\x00"
  using: 
  _30 = &raw const (*_31)
  using: _31@Mir(bb5[9])
  _29 = move _30 as *const u8 (Pointer(ArrayToPointer))
  using: _30@Mir(bb5[10])
  _28 = move _29 as *const i8 (PtrToPtr)
  using: _29@Mir(bb5[11])
  _18 = src::test::__assert_fail(move _19, move _23, move _27, move _28)
  using: _19@Mir(bb5[3]), _23@Mir(bb5[7]), _27@Mir(bb5[8]), _28@Mir(bb5[12])
bb6:
  _39 = const 0_i32
  using: 
  _41 = _1
  using: _1@Mir(bb0[5])
  _42 = _7
  using: _7@Mir(bb1[5])
  _40 = src::buffer::buffer_equals(move _41, move _42) -> bb7
  using: _41@Mir(bb6[1]), _42@Mir(bb6[2])
bb7:
  _38 = Eq(move _39, move _40)
  using: _39@Mir(bb6[0]), _40@Mir(bb6[3])
  switchInt(move _38) -> [0: bb9, otherwise: bb8]
  using: _38@Mir(bb7[0])
bb8:
  _58 = _1
  using: _1@Mir(bb0[5])
  _57 = src::buffer::buffer_free(move _58) -> bb10
  using: _58@Mir(bb8[0])
bb9:
  _47 = const b"0 == buffer_equals(a, b)\x00"
  using: 
  _46 = &raw const (*_47)
  using: _47@Mir(bb9[0])
  _45 = move _46 as *const u8 (Pointer(ArrayToPointer))
  using: _46@Mir(bb9[1])
  _44 = move _45 as *const i8 (PtrToPtr)
  using: _45@Mir(bb9[2])
  _51 = const b"test.c\x00"
  using: 
  _50 = &raw const (*_51)
  using: _51@Mir(bb9[4])
  _49 = move _50 as *const u8 (Pointer(ArrayToPointer))
  using: _50@Mir(bb9[5])
  _48 = move _49 as *const i8 (PtrToPtr)
  using: _49@Mir(bb9[6])
  _52 = const 145_u32
  using: 
  _56 = const b"void test_buffer_equals()\x00"
  using: 
  _55 = &raw const (*_56)
  using: _56@Mir(bb9[9])
  _54 = move _55 as *const u8 (Pointer(ArrayToPointer))
  using: _55@Mir(bb9[10])
  _53 = move _54 as *const i8 (PtrToPtr)
  using: _54@Mir(bb9[11])
  _43 = src::test::__assert_fail(move _44, move _48, move _52, move _53)
  using: _44@Mir(bb9[3]), _48@Mir(bb9[7]), _52@Mir(bb9[8]), _53@Mir(bb9[12])
bb10:
  _60 = _7
  using: _7@Mir(bb1[5])
  _59 = src::buffer::buffer_free(move _60) -> bb11
  using: _60@Mir(bb10[0])
bb11:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:406:9: 411:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:416:9: 421:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:81 ~ lib[40c5]::src::test::test_buffer_indexof)
bb0:
  _6 = const b"Tobi is a ferret\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _13 = const b"is\x00"
  using: 
  _12 = &raw const (*_13)
  using: _13@Mir(bb1[1])
  _11 = move _12 as *const u8 (Pointer(ArrayToPointer))
  using: _12@Mir(bb1[2])
  _10 = move _11 as *const i8 (PtrToPtr)
  using: _11@Mir(bb1[3])
  _9 = move _10 as *mut i8 (PtrToPtr)
  using: _10@Mir(bb1[4])
  _7 = src::buffer::buffer_indexof(move _8, move _9) -> bb2
  using: _8@Mir(bb1[0]), _9@Mir(bb1[5])
bb2:
  _15 = const 5_i64
  using: 
  _16 = _7
  using: _7@Mir(bb1[6])
  _14 = Eq(move _15, move _16)
  using: _15@Mir(bb2[0]), _16@Mir(bb2[1])
  switchInt(move _14) -> [0: bb4, otherwise: bb3]
  using: _14@Mir(bb2[2])
bb3:
  _32 = _1
  using: _1@Mir(bb0[5])
  _37 = const b"a\x00"
  using: 
  _36 = &raw const (*_37)
  using: _37@Mir(bb3[1])
  _35 = move _36 as *const u8 (Pointer(ArrayToPointer))
  using: _36@Mir(bb3[2])
  _34 = move _35 as *const i8 (PtrToPtr)
  using: _35@Mir(bb3[3])
  _33 = move _34 as *mut i8 (PtrToPtr)
  using: _34@Mir(bb3[4])
  _31 = src::buffer::buffer_indexof(move _32, move _33) -> bb5
  using: _32@Mir(bb3[0]), _33@Mir(bb3[5])
bb4:
  _21 = const b"5 == i\x00"
  using: 
  _20 = &raw const (*_21)
  using: _21@Mir(bb4[0])
  _19 = move _20 as *const u8 (Pointer(ArrayToPointer))
  using: _20@Mir(bb4[1])
  _18 = move _19 as *const i8 (PtrToPtr)
  using: _19@Mir(bb4[2])
  _25 = const b"test.c\x00"
  using: 
  _24 = &raw const (*_25)
  using: _25@Mir(bb4[4])
  _23 = move _24 as *const u8 (Pointer(ArrayToPointer))
  using: _24@Mir(bb4[5])
  _22 = move _23 as *const i8 (PtrToPtr)
  using: _23@Mir(bb4[6])
  _26 = const 169_u32
  using: 
  _30 = const b"void test_buffer_indexof()\x00"
  using: 
  _29 = &raw const (*_30)
  using: _30@Mir(bb4[9])
  _28 = move _29 as *const u8 (Pointer(ArrayToPointer))
  using: _29@Mir(bb4[10])
  _27 = move _28 as *const i8 (PtrToPtr)
  using: _28@Mir(bb4[11])
  _17 = src::test::__assert_fail(move _18, move _22, move _26, move _27)
  using: _18@Mir(bb4[3]), _22@Mir(bb4[7]), _26@Mir(bb4[8]), _27@Mir(bb4[12])
bb5:
  _7 = move _31
  using: _31@Mir(bb3[6])
  _39 = const 8_i64
  using: 
  _40 = _7
  using: _7@Mir(bb5[0])
  _38 = Eq(move _39, move _40)
  using: _39@Mir(bb5[1]), _40@Mir(bb5[2])
  switchInt(move _38) -> [0: bb7, otherwise: bb6]
  using: _38@Mir(bb5[3])
bb6:
  _56 = _1
  using: _1@Mir(bb0[5])
  _61 = const b"something\x00"
  using: 
  _60 = &raw const (*_61)
  using: _61@Mir(bb6[1])
  _59 = move _60 as *const u8 (Pointer(ArrayToPointer))
  using: _60@Mir(bb6[2])
  _58 = move _59 as *const i8 (PtrToPtr)
  using: _59@Mir(bb6[3])
  _57 = move _58 as *mut i8 (PtrToPtr)
  using: _58@Mir(bb6[4])
  _55 = src::buffer::buffer_indexof(move _56, move _57) -> bb8
  using: _56@Mir(bb6[0]), _57@Mir(bb6[5])
bb7:
  _45 = const b"8 == i\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb7[0])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb7[1])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb7[2])
  _49 = const b"test.c\x00"
  using: 
  _48 = &raw const (*_49)
  using: _49@Mir(bb7[4])
  _47 = move _48 as *const u8 (Pointer(ArrayToPointer))
  using: _48@Mir(bb7[5])
  _46 = move _47 as *const i8 (PtrToPtr)
  using: _47@Mir(bb7[6])
  _50 = const 172_u32
  using: 
  _54 = const b"void test_buffer_indexof()\x00"
  using: 
  _53 = &raw const (*_54)
  using: _54@Mir(bb7[9])
  _52 = move _53 as *const u8 (Pointer(ArrayToPointer))
  using: _53@Mir(bb7[10])
  _51 = move _52 as *const i8 (PtrToPtr)
  using: _52@Mir(bb7[11])
  _41 = src::test::__assert_fail(move _42, move _46, move _50, move _51)
  using: _42@Mir(bb7[3]), _46@Mir(bb7[7]), _50@Mir(bb7[8]), _51@Mir(bb7[12])
bb8:
  _7 = move _55
  using: _55@Mir(bb6[6])
  _63 = const -1_i64
  using: 
  _64 = _7
  using: _7@Mir(bb8[0])
  _62 = Eq(move _63, move _64)
  using: _63@Mir(bb8[1]), _64@Mir(bb8[2])
  switchInt(move _62) -> [0: bb10, otherwise: bb9]
  using: _62@Mir(bb8[3])
bb9:
  _80 = _1
  using: _1@Mir(bb0[5])
  _79 = src::buffer::buffer_free(move _80) -> bb11
  using: _80@Mir(bb9[0])
bb10:
  _69 = const b"-1 == i\x00"
  using: 
  _68 = &raw const (*_69)
  using: _69@Mir(bb10[0])
  _67 = move _68 as *const u8 (Pointer(ArrayToPointer))
  using: _68@Mir(bb10[1])
  _66 = move _67 as *const i8 (PtrToPtr)
  using: _67@Mir(bb10[2])
  _73 = const b"test.c\x00"
  using: 
  _72 = &raw const (*_73)
  using: _73@Mir(bb10[4])
  _71 = move _72 as *const u8 (Pointer(ArrayToPointer))
  using: _72@Mir(bb10[5])
  _70 = move _71 as *const i8 (PtrToPtr)
  using: _71@Mir(bb10[6])
  _74 = const 175_u32
  using: 
  _78 = const b"void test_buffer_indexof()\x00"
  using: 
  _77 = &raw const (*_78)
  using: _78@Mir(bb10[9])
  _76 = move _77 as *const u8 (Pointer(ArrayToPointer))
  using: _77@Mir(bb10[10])
  _75 = move _76 as *const i8 (PtrToPtr)
  using: _76@Mir(bb10[11])
  _65 = src::test::__assert_fail(move _66, move _70, move _74, move _75)
  using: _66@Mir(bb10[3]), _70@Mir(bb10[7]), _74@Mir(bb10[8]), _75@Mir(bb10[12])
bb11:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:449:9: 454:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:462:9: 467:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:475:9: 480:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:82 ~ lib[40c5]::src::test::test_buffer_fill)
bb0:
  _6 = const b"Hello\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = const 5_u64
  using: 
  _10 = _1
  using: _1@Mir(bb0[5])
  _9 = src::buffer::buffer_length(move _10) -> bb2
  using: _10@Mir(bb1[1])
bb2:
  _7 = Eq(move _8, move _9)
  using: _8@Mir(bb1[0]), _9@Mir(bb1[2])
  switchInt(move _7) -> [0: bb4, otherwise: bb3]
  using: _7@Mir(bb2[0])
bb3:
  _26 = _1
  using: _1@Mir(bb0[5])
  _27 = const 0_i32
  using: 
  _25 = src::buffer::buffer_fill(move _26, move _27) -> bb5
  using: _26@Mir(bb3[0]), _27@Mir(bb3[1])
bb4:
  _15 = const b"5 == buffer_length(buf)\x00"
  using: 
  _14 = &raw const (*_15)
  using: _15@Mir(bb4[0])
  _13 = move _14 as *const u8 (Pointer(ArrayToPointer))
  using: _14@Mir(bb4[1])
  _12 = move _13 as *const i8 (PtrToPtr)
  using: _13@Mir(bb4[2])
  _19 = const b"test.c\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb4[4])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb4[5])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb4[6])
  _20 = const 183_u32
  using: 
  _24 = const b"void test_buffer_fill()\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb4[9])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb4[10])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb4[11])
  _11 = src::test::__assert_fail(move _12, move _16, move _20, move _21)
  using: _12@Mir(bb4[3]), _16@Mir(bb4[7]), _20@Mir(bb4[8]), _21@Mir(bb4[12])
bb5:
  _29 = const 0_u64
  using: 
  _31 = _1
  using: _1@Mir(bb0[5])
  _30 = src::buffer::buffer_length(move _31) -> bb6
  using: _31@Mir(bb5[1])
bb6:
  _28 = Eq(move _29, move _30)
  using: _29@Mir(bb5[0]), _30@Mir(bb5[2])
  switchInt(move _28) -> [0: bb8, otherwise: bb7]
  using: _28@Mir(bb6[0])
bb7:
  _47 = _1
  using: _1@Mir(bb0[5])
  _46 = src::buffer::buffer_free(move _47) -> bb9
  using: _47@Mir(bb7[0])
bb8:
  _36 = const b"0 == buffer_length(buf)\x00"
  using: 
  _35 = &raw const (*_36)
  using: _36@Mir(bb8[0])
  _34 = move _35 as *const u8 (Pointer(ArrayToPointer))
  using: _35@Mir(bb8[1])
  _33 = move _34 as *const i8 (PtrToPtr)
  using: _34@Mir(bb8[2])
  _40 = const b"test.c\x00"
  using: 
  _39 = &raw const (*_40)
  using: _40@Mir(bb8[4])
  _38 = move _39 as *const u8 (Pointer(ArrayToPointer))
  using: _39@Mir(bb8[5])
  _37 = move _38 as *const i8 (PtrToPtr)
  using: _38@Mir(bb8[6])
  _41 = const 186_u32
  using: 
  _45 = const b"void test_buffer_fill()\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb8[9])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb8[10])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb8[11])
  _32 = src::test::__assert_fail(move _33, move _37, move _41, move _42)
  using: _33@Mir(bb8[3]), _37@Mir(bb8[7]), _41@Mir(bb8[8]), _42@Mir(bb8[12])
bb9:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:490:9: 495:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:500:9: 505:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:83 ~ lib[40c5]::src::test::test_buffer_clear)
bb0:
  _6 = const b"Hello\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = const 5_u64
  using: 
  _10 = _1
  using: _1@Mir(bb0[5])
  _9 = src::buffer::buffer_length(move _10) -> bb2
  using: _10@Mir(bb1[1])
bb2:
  _7 = Eq(move _8, move _9)
  using: _8@Mir(bb1[0]), _9@Mir(bb1[2])
  switchInt(move _7) -> [0: bb4, otherwise: bb3]
  using: _7@Mir(bb2[0])
bb3:
  _26 = _1
  using: _1@Mir(bb0[5])
  _25 = src::buffer::buffer_clear(move _26) -> bb5
  using: _26@Mir(bb3[0])
bb4:
  _15 = const b"5 == buffer_length(buf)\x00"
  using: 
  _14 = &raw const (*_15)
  using: _15@Mir(bb4[0])
  _13 = move _14 as *const u8 (Pointer(ArrayToPointer))
  using: _14@Mir(bb4[1])
  _12 = move _13 as *const i8 (PtrToPtr)
  using: _13@Mir(bb4[2])
  _19 = const b"test.c\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb4[4])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb4[5])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb4[6])
  _20 = const 193_u32
  using: 
  _24 = const b"void test_buffer_clear()\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb4[9])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb4[10])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb4[11])
  _11 = src::test::__assert_fail(move _12, move _16, move _20, move _21)
  using: _12@Mir(bb4[3]), _16@Mir(bb4[7]), _20@Mir(bb4[8]), _21@Mir(bb4[12])
bb5:
  _28 = const 0_u64
  using: 
  _30 = _1
  using: _1@Mir(bb0[5])
  _29 = src::buffer::buffer_length(move _30) -> bb6
  using: _30@Mir(bb5[1])
bb6:
  _27 = Eq(move _28, move _29)
  using: _28@Mir(bb5[0]), _29@Mir(bb5[2])
  switchInt(move _27) -> [0: bb8, otherwise: bb7]
  using: _27@Mir(bb6[0])
bb7:
  _46 = _1
  using: _1@Mir(bb0[5])
  _45 = src::buffer::buffer_free(move _46) -> bb9
  using: _46@Mir(bb7[0])
bb8:
  _35 = const b"0 == buffer_length(buf)\x00"
  using: 
  _34 = &raw const (*_35)
  using: _35@Mir(bb8[0])
  _33 = move _34 as *const u8 (Pointer(ArrayToPointer))
  using: _34@Mir(bb8[1])
  _32 = move _33 as *const i8 (PtrToPtr)
  using: _33@Mir(bb8[2])
  _39 = const b"test.c\x00"
  using: 
  _38 = &raw const (*_39)
  using: _39@Mir(bb8[4])
  _37 = move _38 as *const u8 (Pointer(ArrayToPointer))
  using: _38@Mir(bb8[5])
  _36 = move _37 as *const i8 (PtrToPtr)
  using: _37@Mir(bb8[6])
  _40 = const 196_u32
  using: 
  _44 = const b"void test_buffer_clear()\x00"
  using: 
  _43 = &raw const (*_44)
  using: _44@Mir(bb8[9])
  _42 = move _43 as *const u8 (Pointer(ArrayToPointer))
  using: _43@Mir(bb8[10])
  _41 = move _42 as *const i8 (PtrToPtr)
  using: _42@Mir(bb8[11])
  _31 = src::test::__assert_fail(move _32, move _36, move _40, move _41)
  using: _32@Mir(bb8[3]), _36@Mir(bb8[7]), _40@Mir(bb8[8]), _41@Mir(bb8[12])
bb9:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:515:9: 520:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:525:9: 530:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:84 ~ lib[40c5]::src::test::test_buffer_trim)
bb0:
  _6 = const b"  Hello\n\n \x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _7 = src::buffer::buffer_trim(move _8) -> bb2
  using: _8@Mir(bb1[0])
bb2:
  _14 = const b"Hello\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb2[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb2[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb2[2])
  _10 = move _11 as *mut i8 (PtrToPtr)
  using: _11@Mir(bb2[3])
  _15 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[5])
  _9 = src::test::equal(move _10, move _15) -> bb3
  using: _10@Mir(bb2[4]), _15@Mir(bb2[5])
bb3:
  _17 = _1
  using: _1@Mir(bb0[5])
  _16 = src::buffer::buffer_free(move _17) -> bb4
  using: _17@Mir(bb3[0])
bb4:
  _23 = const b"  Hello\n\n \x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb4[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb4[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb4[2])
  _19 = move _20 as *mut i8 (PtrToPtr)
  using: _20@Mir(bb4[3])
  _18 = src::buffer::buffer_new_with_copy(move _19) -> bb5
  using: _19@Mir(bb4[4])
bb5:
  _1 = move _18
  using: _18@Mir(bb4[5])
  _25 = _1
  using: _1@Mir(bb5[0])
  _24 = src::buffer::buffer_trim_left(move _25) -> bb6
  using: _25@Mir(bb5[1])
bb6:
  _31 = const b"Hello\n\n \x00"
  using: 
  _30 = &raw const (*_31)
  using: _31@Mir(bb6[0])
  _29 = move _30 as *const u8 (Pointer(ArrayToPointer))
  using: _30@Mir(bb6[1])
  _28 = move _29 as *const i8 (PtrToPtr)
  using: _29@Mir(bb6[2])
  _27 = move _28 as *mut i8 (PtrToPtr)
  using: _28@Mir(bb6[3])
  _32 = ((*_1).2: *mut i8)
  using: _1@Mir(bb5[0])
  _26 = src::test::equal(move _27, move _32) -> bb7
  using: _27@Mir(bb6[4]), _32@Mir(bb6[5])
bb7:
  _34 = _1
  using: _1@Mir(bb5[0])
  _33 = src::buffer::buffer_free(move _34) -> bb8
  using: _34@Mir(bb7[0])
bb8:
  _40 = const b"  Hello\n\n \x00"
  using: 
  _39 = &raw const (*_40)
  using: _40@Mir(bb8[0])
  _38 = move _39 as *const u8 (Pointer(ArrayToPointer))
  using: _39@Mir(bb8[1])
  _37 = move _38 as *const i8 (PtrToPtr)
  using: _38@Mir(bb8[2])
  _36 = move _37 as *mut i8 (PtrToPtr)
  using: _37@Mir(bb8[3])
  _35 = src::buffer::buffer_new_with_copy(move _36) -> bb9
  using: _36@Mir(bb8[4])
bb9:
  _1 = move _35
  using: _35@Mir(bb8[5])
  _42 = _1
  using: _1@Mir(bb9[0])
  _41 = src::buffer::buffer_trim_right(move _42) -> bb10
  using: _42@Mir(bb9[1])
bb10:
  _48 = const b"  Hello\x00"
  using: 
  _47 = &raw const (*_48)
  using: _48@Mir(bb10[0])
  _46 = move _47 as *const u8 (Pointer(ArrayToPointer))
  using: _47@Mir(bb10[1])
  _45 = move _46 as *const i8 (PtrToPtr)
  using: _46@Mir(bb10[2])
  _44 = move _45 as *mut i8 (PtrToPtr)
  using: _45@Mir(bb10[3])
  _49 = ((*_1).2: *mut i8)
  using: _1@Mir(bb9[0])
  _43 = src::test::equal(move _44, move _49) -> bb11
  using: _44@Mir(bb10[4]), _49@Mir(bb10[5])
bb11:
  _51 = _1
  using: _1@Mir(bb9[0])
  _50 = src::buffer::buffer_free(move _51) -> bb12
  using: _51@Mir(bb11[0])
bb12:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:85 ~ lib[40c5]::src::test::test_buffer_compact)
bb0:
  _6 = const b"  Hello\n\n \x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[3])
  _1 = src::buffer::buffer_new_with_copy(move _2) -> bb1
  using: _2@Mir(bb0[4])
bb1:
  _8 = _1
  using: _1@Mir(bb0[5])
  _7 = src::buffer::buffer_trim(move _8) -> bb2
  using: _8@Mir(bb1[0])
bb2:
  _10 = const 5_u64
  using: 
  _12 = _1
  using: _1@Mir(bb0[5])
  _11 = src::buffer::buffer_length(move _12) -> bb3
  using: _12@Mir(bb2[1])
bb3:
  _9 = Eq(move _10, move _11)
  using: _10@Mir(bb2[0]), _11@Mir(bb2[2])
  switchInt(move _9) -> [0: bb5, otherwise: bb4]
  using: _9@Mir(bb3[0])
bb4:
  _28 = const 10_u64
  using: 
  _30 = _1
  using: _1@Mir(bb0[5])
  _29 = src::buffer::buffer_size(move _30) -> bb6
  using: _30@Mir(bb4[1])
bb5:
  _17 = const b"5 == buffer_length(buf)\x00"
  using: 
  _16 = &raw const (*_17)
  using: _17@Mir(bb5[0])
  _15 = move _16 as *const u8 (Pointer(ArrayToPointer))
  using: _16@Mir(bb5[1])
  _14 = move _15 as *const i8 (PtrToPtr)
  using: _15@Mir(bb5[2])
  _21 = const b"test.c\x00"
  using: 
  _20 = &raw const (*_21)
  using: _21@Mir(bb5[4])
  _19 = move _20 as *const u8 (Pointer(ArrayToPointer))
  using: _20@Mir(bb5[5])
  _18 = move _19 as *const i8 (PtrToPtr)
  using: _19@Mir(bb5[6])
  _22 = const 222_u32
  using: 
  _26 = const b"void test_buffer_compact()\x00"
  using: 
  _25 = &raw const (*_26)
  using: _26@Mir(bb5[9])
  _24 = move _25 as *const u8 (Pointer(ArrayToPointer))
  using: _25@Mir(bb5[10])
  _23 = move _24 as *const i8 (PtrToPtr)
  using: _24@Mir(bb5[11])
  _13 = src::test::__assert_fail(move _14, move _18, move _22, move _23)
  using: _14@Mir(bb5[3]), _18@Mir(bb5[7]), _22@Mir(bb5[8]), _23@Mir(bb5[12])
bb6:
  _27 = Eq(move _28, move _29)
  using: _28@Mir(bb4[0]), _29@Mir(bb4[2])
  switchInt(move _27) -> [0: bb8, otherwise: bb7]
  using: _27@Mir(bb6[0])
bb7:
  _46 = _1
  using: _1@Mir(bb0[5])
  _45 = src::buffer::buffer_compact(move _46) -> bb9
  using: _46@Mir(bb7[0])
bb8:
  _35 = const b"10 == buffer_size(buf)\x00"
  using: 
  _34 = &raw const (*_35)
  using: _35@Mir(bb8[0])
  _33 = move _34 as *const u8 (Pointer(ArrayToPointer))
  using: _34@Mir(bb8[1])
  _32 = move _33 as *const i8 (PtrToPtr)
  using: _33@Mir(bb8[2])
  _39 = const b"test.c\x00"
  using: 
  _38 = &raw const (*_39)
  using: _39@Mir(bb8[4])
  _37 = move _38 as *const u8 (Pointer(ArrayToPointer))
  using: _38@Mir(bb8[5])
  _36 = move _37 as *const i8 (PtrToPtr)
  using: _37@Mir(bb8[6])
  _40 = const 223_u32
  using: 
  _44 = const b"void test_buffer_compact()\x00"
  using: 
  _43 = &raw const (*_44)
  using: _44@Mir(bb8[9])
  _42 = move _43 as *const u8 (Pointer(ArrayToPointer))
  using: _43@Mir(bb8[10])
  _41 = move _42 as *const i8 (PtrToPtr)
  using: _42@Mir(bb8[11])
  _31 = src::test::__assert_fail(move _32, move _36, move _40, move _41)
  using: _32@Mir(bb8[3]), _36@Mir(bb8[7]), _40@Mir(bb8[8]), _41@Mir(bb8[12])
bb9:
  _48 = const 5_i64
  using: 
  _49 = _45
  using: _45@Mir(bb7[1])
  _47 = Eq(move _48, move _49)
  using: _48@Mir(bb9[0]), _49@Mir(bb9[1])
  switchInt(move _47) -> [0: bb11, otherwise: bb10]
  using: _47@Mir(bb9[2])
bb10:
  _65 = const 5_u64
  using: 
  _67 = _1
  using: _1@Mir(bb0[5])
  _66 = src::buffer::buffer_length(move _67) -> bb12
  using: _67@Mir(bb10[1])
bb11:
  _54 = const b"5 == removed\x00"
  using: 
  _53 = &raw const (*_54)
  using: _54@Mir(bb11[0])
  _52 = move _53 as *const u8 (Pointer(ArrayToPointer))
  using: _53@Mir(bb11[1])
  _51 = move _52 as *const i8 (PtrToPtr)
  using: _52@Mir(bb11[2])
  _58 = const b"test.c\x00"
  using: 
  _57 = &raw const (*_58)
  using: _58@Mir(bb11[4])
  _56 = move _57 as *const u8 (Pointer(ArrayToPointer))
  using: _57@Mir(bb11[5])
  _55 = move _56 as *const i8 (PtrToPtr)
  using: _56@Mir(bb11[6])
  _59 = const 226_u32
  using: 
  _63 = const b"void test_buffer_compact()\x00"
  using: 
  _62 = &raw const (*_63)
  using: _63@Mir(bb11[9])
  _61 = move _62 as *const u8 (Pointer(ArrayToPointer))
  using: _62@Mir(bb11[10])
  _60 = move _61 as *const i8 (PtrToPtr)
  using: _61@Mir(bb11[11])
  _50 = src::test::__assert_fail(move _51, move _55, move _59, move _60)
  using: _51@Mir(bb11[3]), _55@Mir(bb11[7]), _59@Mir(bb11[8]), _60@Mir(bb11[12])
bb12:
  _64 = Eq(move _65, move _66)
  using: _65@Mir(bb10[0]), _66@Mir(bb10[2])
  switchInt(move _64) -> [0: bb14, otherwise: bb13]
  using: _64@Mir(bb12[0])
bb13:
  _83 = const 5_u64
  using: 
  _85 = _1
  using: _1@Mir(bb0[5])
  _84 = src::buffer::buffer_size(move _85) -> bb15
  using: _85@Mir(bb13[1])
bb14:
  _72 = const b"5 == buffer_length(buf)\x00"
  using: 
  _71 = &raw const (*_72)
  using: _72@Mir(bb14[0])
  _70 = move _71 as *const u8 (Pointer(ArrayToPointer))
  using: _71@Mir(bb14[1])
  _69 = move _70 as *const i8 (PtrToPtr)
  using: _70@Mir(bb14[2])
  _76 = const b"test.c\x00"
  using: 
  _75 = &raw const (*_76)
  using: _76@Mir(bb14[4])
  _74 = move _75 as *const u8 (Pointer(ArrayToPointer))
  using: _75@Mir(bb14[5])
  _73 = move _74 as *const i8 (PtrToPtr)
  using: _74@Mir(bb14[6])
  _77 = const 227_u32
  using: 
  _81 = const b"void test_buffer_compact()\x00"
  using: 
  _80 = &raw const (*_81)
  using: _81@Mir(bb14[9])
  _79 = move _80 as *const u8 (Pointer(ArrayToPointer))
  using: _80@Mir(bb14[10])
  _78 = move _79 as *const i8 (PtrToPtr)
  using: _79@Mir(bb14[11])
  _68 = src::test::__assert_fail(move _69, move _73, move _77, move _78)
  using: _69@Mir(bb14[3]), _73@Mir(bb14[7]), _77@Mir(bb14[8]), _78@Mir(bb14[12])
bb15:
  _82 = Eq(move _83, move _84)
  using: _83@Mir(bb13[0]), _84@Mir(bb13[2])
  switchInt(move _82) -> [0: bb17, otherwise: bb16]
  using: _82@Mir(bb15[0])
bb16:
  _105 = const b"Hello\x00"
  using: 
  _104 = &raw const (*_105)
  using: _105@Mir(bb16[0])
  _103 = move _104 as *const u8 (Pointer(ArrayToPointer))
  using: _104@Mir(bb16[1])
  _102 = move _103 as *const i8 (PtrToPtr)
  using: _103@Mir(bb16[2])
  _101 = move _102 as *mut i8 (PtrToPtr)
  using: _102@Mir(bb16[3])
  _106 = ((*_1).2: *mut i8)
  using: _1@Mir(bb0[5])
  _100 = src::test::equal(move _101, move _106) -> bb18
  using: _101@Mir(bb16[4]), _106@Mir(bb16[5])
bb17:
  _90 = const b"5 == buffer_size(buf)\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb17[0])
  _88 = move _89 as *const u8 (Pointer(ArrayToPointer))
  using: _89@Mir(bb17[1])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb17[2])
  _94 = const b"test.c\x00"
  using: 
  _93 = &raw const (*_94)
  using: _94@Mir(bb17[4])
  _92 = move _93 as *const u8 (Pointer(ArrayToPointer))
  using: _93@Mir(bb17[5])
  _91 = move _92 as *const i8 (PtrToPtr)
  using: _92@Mir(bb17[6])
  _95 = const 228_u32
  using: 
  _99 = const b"void test_buffer_compact()\x00"
  using: 
  _98 = &raw const (*_99)
  using: _99@Mir(bb17[9])
  _97 = move _98 as *const u8 (Pointer(ArrayToPointer))
  using: _98@Mir(bb17[10])
  _96 = move _97 as *const i8 (PtrToPtr)
  using: _97@Mir(bb17[11])
  _86 = src::test::__assert_fail(move _87, move _91, move _95, move _96)
  using: _87@Mir(bb17[3]), _91@Mir(bb17[7]), _95@Mir(bb17[8]), _96@Mir(bb17[12])
bb18:
  _108 = _1
  using: _1@Mir(bb0[5])
  _107 = src::buffer::buffer_free(move _108) -> bb19
  using: _108@Mir(bb18[0])
bb19:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:572:9: 577:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:581:9: 586:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:591:9: 596:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:600:9: 605:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::test::__assert_fail @ workspace/clibs-buffer/src/test.rs:609:9: 614:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:86 ~ lib[40c5]::src::test::main_0)
bb0:
  _1 = src::test::test_buffer_new() -> bb1
  using: 
bb1:
  _2 = src::test::test_buffer_new_with_size() -> bb2
  using: 
bb2:
  _3 = src::test::test_buffer_append() -> bb3
  using: 
bb3:
  _4 = src::test::test_buffer_append__grow() -> bb4
  using: 
bb4:
  _5 = src::test::test_buffer_append_n() -> bb5
  using: 
bb5:
  _6 = src::test::test_buffer_prepend() -> bb6
  using: 
bb6:
  _7 = src::test::test_buffer_slice() -> bb7
  using: 
bb7:
  _8 = src::test::test_buffer_slice__range_error() -> bb8
  using: 
bb8:
  _9 = src::test::test_buffer_slice__end() -> bb9
  using: 
bb9:
  _10 = src::test::test_buffer_slice__end_overflow() -> bb10
  using: 
bb10:
  _11 = src::test::test_buffer_equals() -> bb11
  using: 
bb11:
  _12 = src::test::test_buffer_indexof() -> bb12
  using: 
bb12:
  _13 = src::test::test_buffer_fill() -> bb13
  using: 
bb13:
  _14 = src::test::test_buffer_clear() -> bb14
  using: 
bb14:
  _15 = src::test::test_buffer_trim() -> bb15
  using: 
bb15:
  _16 = src::test::test_buffer_compact() -> bb16
  using: 
bb16:
  _21 = const b"\n  \x1b[32m\xe2\x9c\x93 \x1b[90mok\x1b[0m\n\n\x00"
  using: 
  _20 = &raw const (*_21)
  using: _21@Mir(bb16[0])
  _19 = move _20 as *const u8 (Pointer(ArrayToPointer))
  using: _20@Mir(bb16[1])
  _18 = move _19 as *const i8 (PtrToPtr)
  using: _19@Mir(bb16[2])
  _17 = src::test::printf(move _18) -> bb17
  using: _18@Mir(bb16[3])
bb17:
  _0 = const 0_i32
  using: 
  return
  using: _0@Mir(bb17[0])
@DefId(0:87 ~ lib[40c5]::src::test::main)
bb0:
  _2 = src::test::main_0() -> bb1
  using: 
bb1:
  _1 = std::process::exit(move _2)
  using: _2@Mir(bb0[0])
rewrite call std::process::exit @ workspace/clibs-buffer/src/test.rs:646:14: 646:51 (#0) by default
use ::libc;
extern "C" {
    #[no_mangle]
    fn memmove(_: *mut libc::c_void, _: *const libc::c_void, _: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn memset(_: *mut libc::c_void, _: i32, _: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn strncat(_: *mut libc::c_char, _: *const libc::c_char, _: u64) -> *mut libc::c_char;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> i32;
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn strstr(_: *const libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn strlen(_: *const libc::c_char) -> u64;
    #[no_mangle]
    fn printf(_: *const libc::c_char, _: ...) -> i32;
    #[no_mangle]
    fn malloc(_: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn calloc(_: u64, _: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn realloc(_: *mut libc::c_void, _: u64) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
}
pub type size_t = u64;
pub type __ssize_t = libc::c_long;
pub type C2RustUnnamed = libc::c_uint;
pub const _ISalnum: C2RustUnnamed = 8;
pub const _ISpunct: C2RustUnnamed = 4;
pub const _IScntrl: C2RustUnnamed = 2;
pub const _ISblank: C2RustUnnamed = 1;
pub const _ISgraph: C2RustUnnamed = 32768;
pub const _ISprint: C2RustUnnamed = 16384;
pub const _ISspace: C2RustUnnamed = 8192;
pub const _ISxdigit: C2RustUnnamed = 4096;
pub const _ISdigit: C2RustUnnamed = 2048;
pub const _ISalpha: C2RustUnnamed = 1024;
pub const _ISlower: C2RustUnnamed = 512;
pub const _ISupper: C2RustUnnamed = 256;
pub type ssize_t = __ssize_t;

#[repr(C)]
#[derive(Copy, Clone)]
struct ErasedByRefactorer0;
#[repr(C)]
pub struct buffer_t {
    pub len: size_t,
    pub alloc: *mut /* owning */ libc::c_char,
    pub data: *mut libc::c_char,
}
impl Default for buffer_t {fn default() -> Self {Self {
len: Default::default(),
alloc: std::ptr::null_mut(),
data: std::ptr::null_mut(),
}}}
impl buffer_t {pub fn take(&mut self) -> Self {core::mem::take(self)}}

// prototypes
/*
 * Allocate a new buffer with BUFFER_DEFAULT_SIZE.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_new() -> Option<Box<buffer_t>> {
    return buffer_new_with_size(64 as i32 as size_t);
}
/*
 * Allocate a new buffer with `n` bytes.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_new_with_size(mut n: size_t) -> Option<Box<buffer_t>> {
    let mut self_0 = Some(Box::new(<crate::src::buffer::buffer_t as Default>::default()));
    if self_0.as_deref().is_none() {();
        return None;
    }
    (*self_0.as_deref_mut().unwrap()).len= n;
    (*self_0.as_deref_mut().unwrap()).alloc= calloc(n.wrapping_add(1 as i32 as u64), 1 as i32 as u64) as *mut libc::c_char;
    (*self_0.as_deref_mut().unwrap()).data= (*self_0.as_deref().unwrap()).alloc;
    return self_0;
}
/*
 * Allocate a new buffer with `str`.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_new_with_string(mut str: *mut /* owning */ libc::c_char) -> Option<Box<buffer_t>> {
    return buffer_new_with_string_length(str, strlen(str as *const i8));
}
/*
 * Allocate a new buffer with `str` and `len`.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_new_with_string_length(
    mut str: *mut libc::c_char,
    mut len: size_t,
) -> Option<Box<buffer_t>> {
    let mut self_0 = Some(Box::new(<crate::src::buffer::buffer_t as Default>::default()));
    if self_0.as_deref().is_none() {();
        return None;
    }
    (*self_0.as_deref_mut().unwrap()).len= len;
    (*self_0.as_deref_mut().unwrap()).alloc= str;
    (*self_0.as_deref_mut().unwrap()).data= (*self_0.as_deref().unwrap()).alloc;
    return self_0;
}
/*
 * Allocate a new buffer with a copy of `str`.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_new_with_copy(mut str: *const libc::c_char) -> Option<Box<buffer_t>> {
    let mut len = strlen(str);
    let mut self_0 = buffer_new_with_size(len);
    if self_0.as_deref().is_none() {();
        return None;
    }
    memcpy(
        (*self_0.as_deref().unwrap()).alloc as *mut libc::c_void,
        str as *const libc::c_void,
        len,
    );
    (*self_0.as_deref_mut().unwrap()).data= (*self_0.as_deref().unwrap()).alloc;
    return self_0;
}
/*
 * Deallocate excess memory, the number
 * of bytes removed or -1.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_compact(mut self_0: Option<&mut buffer_t>) -> ssize_t {
    let mut len = buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(self_0.as_deref()));
    let mut rem = (*self_0.as_deref().unwrap()).len.wrapping_sub(len);
    let mut buf = calloc(len.wrapping_add(1 as i32 as u64), 1 as i32 as u64) as *mut libc::c_char;
    if buf.is_null() {();
        return -(1 as i32) as ssize_t;
    }
    memcpy(
        buf as *mut libc::c_void,
        (*self_0.as_deref().unwrap()).data as *const libc::c_void,
        len,
    );
    free((*self_0.as_deref().unwrap()).alloc as *mut libc::c_void);
    (*self_0.as_deref_mut().unwrap()).len= len;
    (*self_0.as_deref_mut().unwrap()).alloc= buf;
    (*self_0.as_deref_mut().unwrap()).data= (*self_0.as_deref().unwrap()).alloc;
    return rem as ssize_t;
}
/*
 * Free the buffer.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_free(mut self_0: Option<Box<buffer_t>>) {
    free((*self_0.as_deref().unwrap()).alloc as *mut libc::c_void);
    ();
}
/*
 * Return buffer size.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_size(mut self_0: *const buffer_t) -> size_t {
    return (*self_0).len;
}
/*
 * Return string length.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_length(mut self_0: *const buffer_t) -> size_t {
    return strlen((*self_0).data);
}
/*
 * Resize to hold `n` bytes.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_resize(mut self_0: Option<&mut buffer_t>, mut n: size_t) -> i32 {
    n= n.wrapping_add((1024 as i32 - 1 as i32) as u64) & !(1024 as i32 - 1 as i32) as u64;
    (*self_0.as_deref_mut().unwrap()).len= n;
    (*self_0.as_deref_mut().unwrap()).data= realloc(
        (*self_0.as_deref().unwrap()).alloc as *mut libc::c_void,
        n.wrapping_add(1 as i32 as u64),
    ) as *mut libc::c_char;
    (*self_0.as_deref_mut().unwrap()).alloc= (*self_0.as_deref().unwrap()).data;
    if (*self_0.as_deref().unwrap()).alloc.is_null() {();
        return -(1 as i32);
    }
    *(*self_0.as_deref().unwrap()).alloc.offset(n as isize) = '\u{0}' as i32 as libc::c_char;
    return 0 as i32;
}
/*
 * Append a printf-style formatted string to the buffer.
 */
/*
int buffer_appendf(buffer_t *self, const char *format, ...) {
  va_list ap;
  va_list tmpa;
  char *dst = NULL;
  int length = 0;
  int required = 0;
  int bytes = 0;

  va_start(ap, format);

  length = buffer_length(self);

  // First, we compute how many bytes are needed
  // for the formatted string and allocate that
  // much more space in the buffer.
  va_copy(tmpa, ap);
  required = vsnprintf(NULL, 0, format, tmpa);
  va_end(tmpa);
  if (-1 == buffer_resize(self, length + required)) {
    va_end(ap);
    return -1;
  }

  // Next format the string into the space that we
  // have made room for.
  dst = self->data + length;
  bytes = vsnprintf(dst, 1 + required, format, ap);
  va_end(ap);

  return bytes < 0
    ? -1
    : 0;
}
*/
/*
 * Append `str` to `self` and return 0 on success, -1 on failure.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_append(
    mut self_0: Option<&mut buffer_t>,
    mut str: *const libc::c_char,
) -> i32 {
    return buffer_append_n(self_0.as_deref_mut(), str, strlen(str));
}
/*
 * Append the first `len` bytes from `str` to `self` and
 * return 0 on success, -1 on failure.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_append_n(
    mut self_0: Option<&mut buffer_t>,
    mut str: *const libc::c_char,
    mut len: size_t,
) -> i32 {
    let mut prev = strlen((*self_0.as_deref().unwrap()).data);
    let mut needed = len.wrapping_add(prev);
    // enough space
    if (*self_0.as_deref().unwrap()).len > needed {
        strncat((*self_0.as_deref().unwrap()).data, str, len);
        return 0 as i32;
    }
    // resize
    let mut ret = buffer_resize(self_0.as_deref_mut(), needed);
    if -(1 as i32) == ret {
        return -(1 as i32);
    }
    strncat((*self_0.as_deref().unwrap()).data, str, len);
    return 0 as i32;
}
/*
 * Prepend `str` to `self` and return 0 on success, -1 on failure.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_prepend(
    mut self_0: Option<&mut buffer_t>,
    mut str: *const libc::c_char,
) -> i32 {
    let mut ret: i32 = 0;
    let mut len = strlen(str);
    let mut prev = strlen((*self_0.as_deref().unwrap()).data);
    let mut needed = len.wrapping_add(prev);
    // enough space
    if !((*self_0.as_deref().unwrap()).len > needed) {
        // resize
        ret= buffer_resize(self_0.as_deref_mut(), needed);
        if -(1 as i32) == ret {
            return -(1 as i32);
        }
    }
    // move
    memmove(
        (*self_0.as_deref().unwrap()).data.offset(len as isize) as *mut libc::c_void,
        (*self_0.as_deref().unwrap()).data as *const libc::c_void,
        len.wrapping_add(1 as i32 as u64),
    );
    memcpy(
        (*self_0.as_deref().unwrap()).data as *mut libc::c_void,
        str as *const libc::c_void,
        len,
    );
    return 0 as i32;
}
/*
 * Return a new buffer based on the `from..to` slice of `buf`,
 * or NULL on error.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_slice(
    mut buf: *const buffer_t,
    mut from: size_t,
    mut to: ssize_t,
) -> Option<Box<buffer_t>> {
    let mut len = strlen((*buf).data);
    // bad range
    if (to as u64) < from {
        return None;
    }
    // relative to end
    if to < 0 as i32 as libc::c_long {
        to= len.wrapping_sub(!to as u64) as ssize_t
    }
    // cap end
    if to as u64 > len {
        to= len as ssize_t
    }
    let mut n = (to as u64).wrapping_sub(from);
    let mut self_0 = buffer_new_with_size(n);
    memcpy(
        (*self_0.as_deref().unwrap()).data as *mut libc::c_void,
        (*buf).data.offset(from as isize) as *const libc::c_void,
        n,
    );
    return self_0;
}
/*
 * Return 1 if the buffers contain equivalent data.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_equals(mut self_0: *const buffer_t, mut other: *const buffer_t) -> i32 {
    return (0 as i32 == strcmp((*self_0).data, (*other).data)) as i32;
}
/*
 * Return the index of the substring `str`, or -1 on failure.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_indexof(
    mut self_0: *const buffer_t,
    mut str: *const libc::c_char,
) -> ssize_t {
    let mut sub = strstr((*self_0).data, str);
    if sub.is_null() {();
        return -(1 as i32) as ssize_t;
    }
    return sub.offset_from((*self_0).data) as libc::c_long;
}
/*
 * Trim leading whitespace.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_trim_left(mut self_0: Option<&mut buffer_t>) {
    let mut c: i32 = 0;
    loop {
        c= (*(*self_0.as_deref().unwrap()).data) as i32;
        if !(c != 0
            && char::from_u32(c as u32).unwrap().is_whitespace())
            /* *(*__ctype_b_loc()).offset(c as isize) as i32
                & _ISspace as i32 as libc::c_ushort as i32
                != 0)
                */
        {
            break;
        }
        (*self_0.as_deref_mut().unwrap()).data= (*self_0.as_deref().unwrap()).data.offset(1)
    }
}
/*
 * Trim trailing whitespace.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_trim_right(mut self_0: Option<&mut buffer_t>) {
    let mut c: i32 = 0;
    let mut i = buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(self_0.as_deref())).wrapping_sub(1 as i32 as u64);
    loop {
        c= *(*self_0.as_deref().unwrap()).data.offset(i as isize) as i32;
        if !(c != 0
            && char::from_u32(c as u32).unwrap().is_whitespace())
        {
            break;
        }
        let fresh0 = i;
        i= i.wrapping_sub(1);
        *(*self_0.as_deref().unwrap()).data.offset(fresh0 as isize) = 0 as i32 as libc::c_char
    }
}
/*
 * Trim trailing and leading whitespace.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_trim(mut self_0: Option<&mut buffer_t>) {
    buffer_trim_left(self_0.as_deref_mut());
    buffer_trim_right(self_0.as_deref_mut());
}
/*
 * Fill the buffer with `c`.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_fill(mut self_0: Option<&mut buffer_t>, mut c: i32) {
    memset((*self_0.as_deref().unwrap()).data as *mut libc::c_void, c, (*self_0.as_deref().unwrap()).len);
}
/*
 * Fill the buffer with 0.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_clear(mut self_0: Option<&mut buffer_t>) {
    buffer_fill(self_0.as_deref_mut(), 0 as i32);
}
/*
 * Print a hex dump of the buffer.
 */
#[no_mangle]
pub unsafe extern "C" fn buffer_print(mut self_0: *const buffer_t) {
    let mut i: i32 = 0;
    let mut len = (*self_0).len;
    printf(b"\n \x00" as *const u8 as *const libc::c_char);
    // hex
    i= 0 as i32;
    while (i as u64) < len {
        printf(
            b" %02x\x00" as *const u8 as *const libc::c_char,
            *(*self_0).alloc.offset(i as isize) as i32,
        );
        if (i + 1 as i32) % 8 as i32 == 0 as i32 {
            printf(b"\n \x00" as *const u8 as *const libc::c_char);
        }
        i+= 1
    }
    printf(b"\n\x00" as *const u8 as *const libc::c_char);
}
use ::libc;
extern "C" {
    #[no_mangle]
    fn __assert_fail(
        __assertion: *const libc::c_char,
        __file: *const libc::c_char,
        __line: libc::c_uint,
        __function: *const libc::c_char,
    ) -> !;
    #[no_mangle]
    fn exit(_: i32) -> !;
    #[no_mangle]
    fn printf(_: *const libc::c_char, _: ...) -> i32;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> i32;
    #[no_mangle]
    fn strlen(_: *const libc::c_char) -> u64;
    // prototypes
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
pub type size_t = u64;
pub type __ssize_t = libc::c_long;
pub type ssize_t = __ssize_t;


#[derive(Copy, Clone)]
struct ErasedByPreprocessor0;
impl Default for ErasedByPreprocessor0 {fn default() -> Self {Self {
}}}

//
// test.c
//
// Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>
//
#[no_mangle]
pub unsafe extern "C" fn equal(mut a: *const libc::c_char, mut b: *const libc::c_char) {
    if strcmp(a, b) != 0 {
        printf(b"\n\x00" as *const u8 as *const libc::c_char);
        printf(
            b"  expected: \'%s\'\n\x00" as *const u8 as *const libc::c_char,
            a,
        );
        printf(
            b"    actual: \'%s\'\n\x00" as *const u8 as *const libc::c_char,
            b,
        );
        printf(b"\n\x00" as *const u8 as *const libc::c_char);
        exit(1 as i32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_new() {
    let mut buf = crate::src::buffer::buffer_new();
    if 64 as i32 as u64 == crate::src::buffer::buffer_size(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"BUFFER_DEFAULT_SIZE == buffer_size(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            28 as i32 as libc::c_uint,
            b"void test_buffer_new()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"0 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            29 as i32 as libc::c_uint,
            b"void test_buffer_new()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_new_with_size() {
    let mut buf = crate::src::buffer::buffer_new_with_size(1024 as i32 as size_t);
    if 1024 as i32 as u64 == crate::src::buffer::buffer_size(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"1024 == buffer_size(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            36 as i32 as libc::c_uint,
            b"void test_buffer_new_with_size()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"0 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            37 as i32 as libc::c_uint,
            b"void test_buffer_new_with_size()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_append() {
    let mut buf = crate::src::buffer::buffer_new();
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b"Hello\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \"Hello\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            44 as i32 as libc::c_uint,
            b"void test_buffer_append()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b" World\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \" World\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            45 as i32 as libc::c_uint,
            b"void test_buffer_append()\x00" as *const u8 as *const i8,
        );
    };
    if strlen(b"Hello World\x00" as *const u8 as *const libc::c_char) == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"strlen(\"Hello World\") == buffer_length(buf)\x00" as *const u8
                as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            46 as i32 as libc::c_uint,
            b"void test_buffer_append()\x00" as *const u8 as *const i8,
        );
    };
    equal(
        b"Hello World\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_append_n() {
    let mut buf = crate::src::buffer::buffer_new();
    if 0 as i32
        == crate::src::buffer::buffer_append_n(
            buf.as_deref_mut(),
            b"subway\x00" as *const u8 as *const libc::c_char,
            3 as i32 as size_t,
        )
    {
    } else {
        __assert_fail(
            b"0 == buffer_append_n(buf, \"subway\", 3)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            54 as i32 as libc::c_uint,
            b"void test_buffer_append_n()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32
        == crate::src::buffer::buffer_append_n(
            buf.as_deref_mut(),
            b"marines\x00" as *const u8 as *const libc::c_char,
            6 as i32 as size_t,
        )
    {
    } else {
        __assert_fail(
            b"0 == buffer_append_n(buf, \"marines\", 6)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            55 as i32 as libc::c_uint,
            b"void test_buffer_append_n()\x00" as *const u8 as *const i8,
        );
    };
    if strlen(b"submarine\x00" as *const u8 as *const libc::c_char) == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"strlen(\"submarine\") == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            56 as i32 as libc::c_uint,
            b"void test_buffer_append_n()\x00" as *const u8 as *const i8,
        );
    };
    equal(
        b"submarine\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_append__grow() {
    let mut buf = crate::src::buffer::buffer_new_with_size(10 as i32 as size_t);
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b"Hello\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \"Hello\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            64 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b" tobi\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \" tobi\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            65 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b" was\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \" was\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            66 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b" here\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \" here\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            67 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    let mut str =
        b"Hello tobi was here\x00" as *const u8 as *const libc::c_char as *mut libc::c_char;
    equal(str, (*buf.as_deref().unwrap()).data);
    if 1024 as i32 as u64 == crate::src::buffer::buffer_size(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"1024 == buffer_size(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            71 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    if strlen(str) == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"strlen(str) == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            72 as i32 as libc::c_uint,
            b"void test_buffer_append__grow()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_prepend() {
    let mut buf = crate::src::buffer::buffer_new();
    if 0 as i32 == crate::src::buffer::buffer_append(buf.as_deref_mut(), b" World\x00" as *const u8 as *const libc::c_char) {
    } else {
        __assert_fail(
            b"0 == buffer_append(buf, \" World\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            79 as i32 as libc::c_uint,
            b"void test_buffer_prepend()\x00" as *const u8 as *const i8,
        );
    };
    if 0 as i32
        == crate::src::buffer::buffer_prepend(
            buf.as_deref_mut(),
            b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        )
    {
    } else {
        __assert_fail(
            b"0 == buffer_prepend(buf, \"Hello\")\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            80 as i32 as libc::c_uint,
            b"void test_buffer_prepend()\x00" as *const u8 as *const i8,
        );
    };
    if strlen(b"Hello World\x00" as *const u8 as *const libc::c_char) == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"strlen(\"Hello World\") == buffer_length(buf)\x00" as *const u8
                as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            81 as i32 as libc::c_uint,
            b"void test_buffer_prepend()\x00" as *const u8 as *const i8,
        );
    };
    equal(
        b"Hello World\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_slice() {
    let mut buf = crate::src::buffer::buffer_new();
    crate::src::buffer::buffer_append(buf.as_deref_mut(), b"Tobi Ferret\x00" as *const u8 as *const libc::c_char);
    let mut a = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 2 as i32 as size_t, 8 as i32 as ssize_t);
    equal(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    equal(
        b"bi Fer\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*a.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
    crate::src::buffer::buffer_free(a);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_slice__range_error() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    let mut a = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 10 as i32 as size_t, 2 as i32 as ssize_t);
    if a.as_deref().is_none() {();
    } else {
        __assert_fail(
            b"NULL == a\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            103 as i32 as libc::c_uint,
            b"void test_buffer_slice__range_error()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_slice__end() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    let mut a = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 5 as i32 as size_t, -(1 as i32) as ssize_t);
    equal(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    equal(
        b"Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*a.as_deref().unwrap()).data,
    );
    let mut b = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 5 as i32 as size_t, -(3 as i32) as ssize_t);
    equal(
        b"Ferr\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*b.as_deref().unwrap()).data,
    );
    let mut c = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 8 as i32 as size_t, -(1 as i32) as ssize_t);
    equal(
        b"ret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*c.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
    crate::src::buffer::buffer_free(a);
    crate::src::buffer::buffer_free(b);
    crate::src::buffer::buffer_free(c);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_slice__end_overflow() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    let mut a = crate::src::buffer::buffer_slice(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()), 5 as i32 as size_t, 1000 as i32 as ssize_t);
    equal(
        b"Tobi Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    equal(
        b"Ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*a.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(a);
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_equals() {
    let mut a =
        crate::src::buffer::buffer_new_with_copy(b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char);
    let mut b =
        crate::src::buffer::buffer_new_with_copy(b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char);
    if 1 as i32 == crate::src::buffer::buffer_equals(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(a.as_deref()), core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(b.as_deref())) {
    } else {
        __assert_fail(
            b"1 == buffer_equals(a, b)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            142 as i32 as libc::c_uint,
            b"void test_buffer_equals()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_append(b.as_deref_mut(), b" World\x00" as *const u8 as *const libc::c_char);
    if 0 as i32 == crate::src::buffer::buffer_equals(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(a.as_deref()), core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(b.as_deref())) {
    } else {
        __assert_fail(
            b"0 == buffer_equals(a, b)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            145 as i32 as libc::c_uint,
            b"void test_buffer_equals()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(a);
    crate::src::buffer::buffer_free(b);
}
/*
void test_buffer_formatting() {
  buffer_t *buf = buffer_new();
  int result = buffer_appendf(buf, "%d %s", 3, "cow");
  assert(0 == result);
  equal("3 cow", buffer_string(buf));
  result = buffer_appendf(buf, " - 0x%08X", 0xdeadbeef);
  assert(0 == result);
  equal("3 cow - 0xDEADBEEF", buffer_string(buf));
  buffer_free(buf);
}
*/
#[no_mangle]
pub unsafe extern "C" fn test_buffer_indexof() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"Tobi is a ferret\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    let mut i = crate::src::buffer::buffer_indexof(
        core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()),
        b"is\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    if 5 as i32 as libc::c_long == i {
    } else {
        __assert_fail(
            b"5 == i\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            169 as i32 as libc::c_uint,
            b"void test_buffer_indexof()\x00" as *const u8 as *const i8,
        );
    };
    i= crate::src::buffer::buffer_indexof(
        core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()),
        b"a\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    if 8 as i32 as libc::c_long == i {
    } else {
        __assert_fail(
            b"8 == i\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            172 as i32 as libc::c_uint,
            b"void test_buffer_indexof()\x00" as *const u8 as *const i8,
        );
    };
    i= crate::src::buffer::buffer_indexof(
        core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref()),
        b"something\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    if -(1 as i32) as libc::c_long == i {
    } else {
        __assert_fail(
            b"-1 == i\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            175 as i32 as libc::c_uint,
            b"void test_buffer_indexof()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_fill() {
    let mut buf =
        crate::src::buffer::buffer_new_with_copy(b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char);
    if 5 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"5 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            183 as i32 as libc::c_uint,
            b"void test_buffer_fill()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_fill(buf.as_deref_mut(), 0 as i32);
    if 0 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"0 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            186 as i32 as libc::c_uint,
            b"void test_buffer_fill()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_clear() {
    let mut buf =
        crate::src::buffer::buffer_new_with_copy(b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char);
    if 5 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"5 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            193 as i32 as libc::c_uint,
            b"void test_buffer_clear()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_clear(buf.as_deref_mut());
    if 0 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"0 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            196 as i32 as libc::c_uint,
            b"void test_buffer_clear()\x00" as *const u8 as *const i8,
        );
    };
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_trim() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"  Hello\n\n \x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    crate::src::buffer::buffer_trim(buf.as_deref_mut());
    equal(
        b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
    buf= crate::src::buffer::buffer_new_with_copy(
        b"  Hello\n\n \x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    crate::src::buffer::buffer_trim_left(buf.as_deref_mut());
    equal(
        b"Hello\n\n \x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
    buf= crate::src::buffer::buffer_new_with_copy(
        b"  Hello\n\n \x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    crate::src::buffer::buffer_trim_right(buf.as_deref_mut());
    equal(
        b"  Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
}
#[no_mangle]
pub unsafe extern "C" fn test_buffer_compact() {
    let mut buf = crate::src::buffer::buffer_new_with_copy(
        b"  Hello\n\n \x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    crate::src::buffer::buffer_trim(buf.as_deref_mut());
    if 5 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"5 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            222 as i32 as libc::c_uint,
            b"void test_buffer_compact()\x00" as *const u8 as *const i8,
        );
    };
    if 10 as i32 as u64 == crate::src::buffer::buffer_size(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"10 == buffer_size(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            223 as i32 as libc::c_uint,
            b"void test_buffer_compact()\x00" as *const u8 as *const i8,
        );
    };
    let mut removed = crate::src::buffer::buffer_compact(buf.as_deref_mut());
    if 5 as i32 as libc::c_long == removed {
    } else {
        __assert_fail(
            b"5 == removed\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            226 as i32 as libc::c_uint,
            b"void test_buffer_compact()\x00" as *const u8 as *const i8,
        );
    };
    if 5 as i32 as u64 == crate::src::buffer::buffer_length(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"5 == buffer_length(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            227 as i32 as libc::c_uint,
            b"void test_buffer_compact()\x00" as *const u8 as *const i8,
        );
    };
    if 5 as i32 as u64 == crate::src::buffer::buffer_size(core::mem::transmute::<_, *const crate::src::buffer::buffer_t>(buf.as_deref())) {
    } else {
        __assert_fail(
            b"5 == buffer_size(buf)\x00" as *const u8 as *const libc::c_char,
            b"test.c\x00" as *const u8 as *const libc::c_char,
            228 as i32 as libc::c_uint,
            b"void test_buffer_compact()\x00" as *const u8 as *const i8,
        );
    };
    equal(
        b"Hello\x00" as *const u8 as *const libc::c_char as *mut libc::c_char,
        (*buf.as_deref().unwrap()).data,
    );
    crate::src::buffer::buffer_free(buf);
}
unsafe fn main_0() -> i32 {
    test_buffer_new();
    test_buffer_new_with_size();
    test_buffer_append();
    test_buffer_append__grow();
    test_buffer_append_n();
    test_buffer_prepend();
    test_buffer_slice();
    test_buffer_slice__range_error();
    test_buffer_slice__end();
    test_buffer_slice__end_overflow();
    test_buffer_equals();
    /*test_buffer_formatting();*/
    test_buffer_indexof();
    test_buffer_fill();
    test_buffer_clear();
    test_buffer_trim();
    test_buffer_compact();
    printf(
        b"\n  \x1b[32m\xe2\x9c\x93 \x1b[90mok\x1b[0m\n\n\x00" as *const u8 as *const libc::c_char,
    );
    return 0 as i32;
}
pub fn main() {
    unsafe { ::std::process::exit(main_0() as i32) }
}

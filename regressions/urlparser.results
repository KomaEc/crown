Solving url_free with precision 1... ✅
Solving url_parse with precision 1... ❌
Solving url_get_path with precision 1... ❌
Solving url_get_hash with precision 1... ❌
Solving get_part with precision 1... ❌
Solving url_get_hostname with precision 1... ❌
Solving url_get_search with precision 1... ❌
Solving url_get_port with precision 1... ❌
Solving url_get_host with precision 1... ❌
Solving url_get_pathname with precision 1... ❌
Solving url_get_query with precision 1... ❌
Solving url_is_ssh with precision 1... ❌
Solving strdup with precision 1... ✅
Solving url_get_protocol with precision 1... ✅
Solving strff with precision 1... ✅
Solving url_is_protocol with precision 1... ❌
Solving strrwd with precision 1... ✅
Solving url_get_auth with precision 1... ✅
Solving url_inspect with precision 1... ✅
Solving url_data_inspect with precision 1... ✅
Solving main_0 with precision 1... ❌
Solving main with precision 1... ✅
url_free: (&uniq  ↓ &uniq ) -> _
url_parse: (&) -> &any
url_get_path: (&any) -> &any
url_get_hash: (&any) -> &any
get_part: (&, &, _) -> &
url_get_hostname: (&any) -> &any
url_get_search: (&any) -> &any
url_get_port: (&any) -> &any
url_get_host: (&any) -> &any
url_get_pathname: (&any) -> &any
url_get_query: (&uniq  ↓ &uniq ) -> &any
url_is_ssh: (&any) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (&move) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (&) -> _
main_0: () -> _
main: () -> _
Solving url_free with precision 2... ❌
Solving url_parse with precision 2... ❌
Solving url_get_path with precision 2... ❌
Solving url_get_hash with precision 2... ❌
Solving get_part with precision 2... ❌
Solving url_get_hostname with precision 2... ❌
Solving url_get_search with precision 2... ❌
Solving url_get_port with precision 2... ❌
Solving url_get_host with precision 2... ❌
Solving url_get_pathname with precision 2... ❌
Solving url_get_query with precision 2... ❌
Solving url_is_ssh with precision 2... ❌
Solving strdup with precision 2... ✅
Solving url_get_protocol with precision 2... ✅
Solving strff with precision 2... ✅
Solving url_is_protocol with precision 2... ❌
Solving strrwd with precision 2... ✅
Solving url_get_auth with precision 2... ✅
Solving url_inspect with precision 2... ✅
Solving url_data_inspect with precision 2... ✅
Solving main_0 with precision 2... ❌
Solving main with precision 2... ✅
url_free: (&uniq &any &any &any &any &any &any &any &any &any &any &any ↓ &uniq &any &any &any &any &any &any &any &any &any &any &any) -> _
url_parse: (&) -> &any &any &any &any &any &any &any &any &any &any &any &any
url_get_path: (&any) -> &any
url_get_hash: (&any) -> &any
get_part: (&, &, _) -> &
url_get_hostname: (&any) -> &any
url_get_search: (&any) -> &any
url_get_port: (&any) -> &any
url_get_host: (&any) -> &any
url_get_pathname: (&any) -> &any
url_get_query: (&uniq  ↓ &uniq ) -> &any
url_is_ssh: (&any) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (&move) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (& & & & & & & & & & & &) -> _
main_0: () -> _
main: () -> _
Solving url_free with precision 2... ❌
Solving url_parse with precision 1... ❌
Solving url_get_path with precision 1... ❌
Solving url_get_hash with precision 1... ❌
Solving get_part with precision 1... ❌
Solving url_get_hostname with precision 1... ❌
Solving url_get_search with precision 1... ❌
Solving url_get_port with precision 1... ❌
Solving url_get_host with precision 1... ❌
Solving url_get_pathname with precision 1... ❌
Solving url_get_query with precision 1... ❌
Solving url_is_ssh with precision 1... ❌
Solving strdup with precision 3... ✅
Solving url_get_protocol with precision 3... ✅
Solving strff with precision 3... ✅
Solving url_is_protocol with precision 1... ❌
Solving strrwd with precision 3... ✅
Solving url_get_auth with precision 3... ✅
Solving url_inspect with precision 3... ✅
Solving url_data_inspect with precision 3... ✅
Solving main_0 with precision 1... ❌
Solving main with precision 3... ✅
url_free: (&uniq &any &any &any &any &any &any &any &any &any &any &any ↓ &uniq &any &any &any &any &any &any &any &any &any &any &any) -> _
url_parse: (&) -> &any
url_get_path: (&any) -> &any
url_get_hash: (&any) -> &any
get_part: (&, &, _) -> &
url_get_hostname: (&any) -> &any
url_get_search: (&any) -> &any
url_get_port: (&any) -> &any
url_get_host: (&any) -> &any
url_get_pathname: (&any) -> &any
url_get_query: (&uniq  ↓ &uniq ) -> &any
url_is_ssh: (&any) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (&move) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (& & & & & & & & & & & &) -> _
main_0: () -> _
main: () -> _
Solving url_free with precision 1... ✅
Solving strdup with precision 3... ✅
Solving url_get_protocol with precision 3... ✅
Solving strff with precision 3... ✅
Solving strrwd with precision 3... ✅
Solving url_get_auth with precision 3... ✅
Solving url_inspect with precision 3... ✅
Solving url_data_inspect with precision 3... ✅
Solving main with precision 3... ✅
url_free: (&uniq  ↓ &uniq ) -> _
url_parse: (_) -> _
url_get_path: (_) -> _
url_get_hash: (_) -> _
get_part: (_, _, _) -> _
url_get_hostname: (_) -> _
url_get_search: (_) -> _
url_get_port: (_) -> _
url_get_host: (_) -> _
url_get_pathname: (_) -> _
url_get_query: (_) -> _
url_is_ssh: (_) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (_) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (& & & & & & & & & & & &) -> _
main_0: () -> _
main: () -> _
Solving url_free with precision 1... ✅
Solving strdup with precision 3... ✅
Solving url_get_protocol with precision 3... ✅
Solving strff with precision 3... ✅
Solving strrwd with precision 3... ✅
Solving url_get_auth with precision 3... ✅
Solving url_inspect with precision 3... ✅
Solving url_data_inspect with precision 3... ✅
Solving main with precision 3... ✅
url_free: (&uniq  ↓ &uniq ) -> _
url_parse: (_) -> _
url_get_path: (_) -> _
url_get_hash: (_) -> _
get_part: (_, _, _) -> _
url_get_hostname: (_) -> _
url_get_search: (_) -> _
url_get_port: (_) -> _
url_get_host: (_) -> _
url_get_pathname: (_) -> _
url_get_query: (_) -> _
url_is_ssh: (_) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (_) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (& & & & & & & & & & & &) -> _
main_0: () -> _
main: () -> _
Solving url_free with precision 1... ✅
Solving strdup with precision 3... ✅
Solving url_get_protocol with precision 3... ✅
Solving strff with precision 3... ✅
Solving strrwd with precision 3... ✅
Solving url_get_auth with precision 3... ✅
Solving url_inspect with precision 3... ✅
Solving url_data_inspect with precision 3... ✅
Solving main with precision 3... ✅
url_free: (&uniq  ↓ &uniq ) -> _
url_parse: (_) -> _
url_get_path: (_) -> _
url_get_hash: (_) -> _
get_part: (_, _, _) -> _
url_get_hostname: (_) -> _
url_get_search: (_) -> _
url_get_port: (_) -> _
url_get_host: (_) -> _
url_get_pathname: (_) -> _
url_get_query: (_) -> _
url_is_ssh: (_) -> _
strdup: (&) -> &move
url_get_protocol: (&) -> &
strff: (&, _) -> &move
url_is_protocol: (_) -> _
strrwd: (&, _) -> &move
url_get_auth: (&) -> &
url_inspect: (&uniq  ↓ &uniq ) -> _
url_data_inspect: (& & & & & & & & & & & &) -> _
main_0: () -> _
main: () -> _
@DefId(0:16 ~ test[be05]::strdup)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = strlen(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _6 = const 1_u64
  using: 
  _3 = core::num::<impl u64>::wrapping_add(move _4, move _6) -> bb2
  using: _4@Mir(bb0[1]), _6@Mir(bb1[0])
bb2:
  _2 = move _3 as i32 (IntToInt)
  using: _3@Mir(bb1[1])
  _9 = _2
  using: _2@Mir(bb2[0])
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb2[1])
  _7 = malloc(move _8) -> bb3
  using: _8@Mir(bb2[2])
bb3:
  _0 = move _7 as *mut i8 (PtrToPtr)
  using: _7@Mir(bb2[3])
  _12 = _0
  using: _0@Mir(bb3[0])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb4
  using: _12@Mir(bb3[1])
bb4:
  _10 = Not(move _11)
  using: _11@Mir(bb3[2])
  switchInt(move _10) -> [0: bb6, otherwise: bb5]
  using: _10@Mir(bb4[0])
bb5:
  _14 = _0
  using: _0@Mir(bb3[0])
  _15 = _1
  using: _1@Entry
  _13 = strcpy(move _14, move _15) -> bb7
  using: _14@Mir(bb5[0]), _15@Mir(bb5[1])
bb6:
  _18 = _0
  using: _0@Mir(bb3[0])
  _17 = move _18 as usize (PointerExposeAddress)
  using: _18@Mir(bb6[0])
  _16 = Eq(move _17, const 0_usize)
  using: _17@Mir(bb6[1])
  assume(move _16)
  using: _16@Mir(bb6[2])
  goto -> bb7
  using: 
bb7:
  return
  using: _0@Phi(bb7)
rewrite call strlen @ workspace/urlparser/test.rs:55:9: 55:20 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/urlparser/test.rs:55:21: 55:84 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:58:9: 58:43 (#0) by default
rewrite call strcpy @ workspace/urlparser/test.rs:59:25: 59:41 (#0) by default
@DefId(0:19 ~ test[be05]::url_parse)
bb0:
  _5 = std::mem::size_of::<url_data>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = malloc(move _4) -> bb2
  using: _4@Mir(bb1[0])
bb2:
  _2 = move _3 as *mut url_data (PtrToPtr)
  using: _3@Mir(bb1[1])
  _7 = _2
  using: _2@Mir(bb2[0])
  _6 = std::ptr::mut_ptr::<impl *mut url_data>::is_null(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  switchInt(move _6) -> [0: bb5, otherwise: bb4]
  using: _6@Mir(bb2[2])
bb4:
  _10 = _2
  using: _2@Mir(bb2[0])
  _9 = move _10 as usize (PointerExposeAddress)
  using: _10@Mir(bb4[0])
  _8 = Eq(move _9, const 0_usize)
  using: _9@Mir(bb4[1])
  assume(move _8)
  using: _8@Mir(bb4[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb5:
  _11 = _1
  using: _1@Entry
  ((*_2).0: *mut i8) = move _11
  using: _2@Mir(bb2[0]), _11@Mir(bb5[0])
  _12 = const {0x0 as *mut i8}
  using: 
  _15 = _1
  using: _1@Entry
  _14 = move _15 as *const i8 (Pointer(MutToConstPointer))
  using: _15@Mir(bb5[3])
  _13 = strdup(move _14) -> bb6
  using: _14@Mir(bb5[4])
bb6:
  _16 = const false
  using: 
  _18 = _13
  using: _13@Mir(bb5[5])
  _17 = url_get_protocol(move _18) -> bb7
  using: _18@Mir(bb6[1])
bb7:
  _20 = _17
  using: _17@Mir(bb6[2])
  _19 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _20) -> bb8
  using: _20@Mir(bb7[0])
bb8:
  switchInt(move _19) -> [0: bb10, otherwise: bb9]
  using: _19@Mir(bb7[1])
bb9:
  _23 = _17
  using: _17@Mir(bb6[2])
  _22 = move _23 as usize (PointerExposeAddress)
  using: _23@Mir(bb9[0])
  _21 = Eq(move _22, const 0_usize)
  using: _22@Mir(bb9[1])
  assume(move _21)
  using: _21@Mir(bb9[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb10:
  _28 = _17
  using: _17@Mir(bb6[2])
  _27 = move _28 as *const i8 (Pointer(MutToConstPointer))
  using: _28@Mir(bb10[0])
  _26 = strlen(move _27) -> bb11
  using: _27@Mir(bb10[1])
bb11:
  _25 = move _26 as i32 (IntToInt)
  using: _26@Mir(bb10[2])
  _29 = const 3_i32
  using: 
  _30 = CheckedAdd(_25, _29)
  using: _25@Mir(bb11[0]), _29@Mir(bb11[1])
  assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _25, move _29) -> bb12
  using: _30@Entry, _25@Entry, _29@Entry
bb12:
  _24 = move (_30.0: i32)
  using: _30@Mir(bb11[2])
  _31 = _17
  using: _17@Mir(bb6[2])
  ((*_2).1: *mut i8) = move _31
  using: _2@Mir(bb2[0]), _31@Mir(bb12[1])
  _33 = _17
  using: _17@Mir(bb6[2])
  _32 = url_is_ssh(move _33) -> bb13
  using: _33@Mir(bb12[3])
bb13:
  _16 = move _32
  using: _32@Mir(bb12[4])
  _37 = std::mem::size_of::<i8>() -> bb14
  using: 
bb14:
  _36 = move _37 as u64 (IntToInt)
  using: _37@Mir(bb13[1])
  _35 = malloc(move _36) -> bb15
  using: _36@Mir(bb14[0])
bb15:
  _34 = move _35 as *mut i8 (PtrToPtr)
  using: _35@Mir(bb14[1])
  _38 = const 0_i32
  using: 
  _41 = _13
  using: _13@Mir(bb5[5])
  _40 = move _41 as *const i8 (Pointer(MutToConstPointer))
  using: _41@Mir(bb15[2])
  _45 = const b"@\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb15[4])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb15[5])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb15[6])
  _39 = strstr(move _40, move _42) -> bb16
  using: _40@Mir(bb15[3]), _42@Mir(bb15[7])
bb16:
  _12 = move _39
  using: _39@Mir(bb15[8])
  _48 = _12
  using: _12@Mir(bb16[0])
  _47 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _48) -> bb17
  using: _48@Mir(bb16[1])
bb17:
  _46 = Not(move _47)
  using: _47@Mir(bb16[2])
  switchInt(move _46) -> [0: bb25, otherwise: bb18]
  using: _46@Mir(bb17[0])
bb18:
  _50 = _13
  using: _13@Mir(bb5[5])
  _54 = const b"%[^@]\x00"
  using: 
  _53 = &raw const (*_54)
  using: _54@Mir(bb18[1])
  _52 = move _53 as *const u8 (Pointer(ArrayToPointer))
  using: _53@Mir(bb18[2])
  _51 = move _52 as *const i8 (PtrToPtr)
  using: _52@Mir(bb18[3])
  _55 = _24
  using: _24@Mir(bb12[0])
  _49 = get_part(move _50, move _51, move _55) -> bb19
  using: _50@Mir(bb18[0]), _51@Mir(bb18[4]), _55@Mir(bb18[5])
bb19:
  _34 = move _49
  using: _49@Mir(bb18[6])
  _58 = _34
  using: _34@Mir(bb19[0])
  _57 = move _58 as *const i8 (Pointer(MutToConstPointer))
  using: _58@Mir(bb19[1])
  _56 = strlen(move _57) -> bb20
  using: _57@Mir(bb19[2])
bb20:
  _38 = move _56 as i32 (IntToInt)
  using: _56@Mir(bb19[3])
  _61 = _34
  using: _34@Mir(bb19[0])
  _60 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _61) -> bb21
  using: _61@Mir(bb20[1])
bb21:
  _59 = Not(move _60)
  using: _60@Mir(bb20[2])
  switchInt(move _59) -> [0: bb24, otherwise: bb22]
  using: _59@Mir(bb21[0])
bb22:
  _62 = CheckedAdd(_38, const 1_i32)
  using: _38@Mir(bb20[0])
  assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", _38, const 1_i32) -> bb23
  using: _62@Entry, _38@Entry
bb23:
  _38 = move (_62.0: i32)
  using: _62@Mir(bb22[0])
  goto -> bb26
  using: 
bb24:
  _65 = _34
  using: _34@Mir(bb19[0])
  _64 = move _65 as usize (PointerExposeAddress)
  using: _65@Mir(bb24[0])
  _63 = Eq(move _64, const 0_usize)
  using: _64@Mir(bb24[1])
  assume(move _63)
  using: _63@Mir(bb24[2])
  goto -> bb26
  using: 
bb25:
  _68 = _12
  using: _12@Mir(bb16[0])
  _67 = move _68 as usize (PointerExposeAddress)
  using: _68@Mir(bb25[0])
  _66 = Eq(move _67, const 0_usize)
  using: _67@Mir(bb25[1])
  assume(move _66)
  using: _66@Mir(bb25[2])
  goto -> bb26
  using: 
bb26:
  _69 = _34
  using: _34@Phi(bb26)
  ((*_2).3: *mut i8) = move _69
  using: _2@Mir(bb2[0]), _69@Mir(bb26[0])
  _70 = const {0x0 as *mut i8}
  using: 
  _73 = _16
  using: _16@Mir(bb13[0])
  _72 = move _73 as i32 (IntToInt)
  using: _73@Mir(bb26[3])
  switchInt(move _72) -> [0: bb29, otherwise: bb27]
  using: _72@Mir(bb26[4])
bb27:
  _74 = _13
  using: _13@Phi(bb26)
  _78 = const b"%[^:]\x00"
  using: 
  _77 = &raw const (*_78)
  using: _78@Mir(bb27[1])
  _76 = move _77 as *const u8 (Pointer(ArrayToPointer))
  using: _77@Mir(bb27[2])
  _75 = move _76 as *const i8 (PtrToPtr)
  using: _76@Mir(bb27[3])
  _80 = _24
  using: _24@Phi(bb26)
  _81 = _38
  using: _38@Phi(bb26)
  _82 = CheckedAdd(_80, _81)
  using: _80@Mir(bb27[5]), _81@Mir(bb27[6])
  assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", move _80, move _81) -> bb28
  using: _82@Entry, _80@Entry, _81@Entry
bb28:
  _79 = move (_82.0: i32)
  using: _82@Mir(bb27[7])
  _71 = get_part(move _74, move _75, move _79) -> bb31
  using: _74@Mir(bb27[0]), _75@Mir(bb27[4]), _79@Mir(bb28[0])
bb29:
  _83 = _13
  using: _13@Phi(bb26)
  _87 = const b"%[^/]\x00"
  using: 
  _86 = &raw const (*_87)
  using: _87@Mir(bb29[1])
  _85 = move _86 as *const u8 (Pointer(ArrayToPointer))
  using: _86@Mir(bb29[2])
  _84 = move _85 as *const i8 (PtrToPtr)
  using: _85@Mir(bb29[3])
  _89 = _24
  using: _24@Phi(bb26)
  _90 = _38
  using: _38@Phi(bb26)
  _91 = CheckedAdd(_89, _90)
  using: _89@Mir(bb29[5]), _90@Mir(bb29[6])
  assert(!move (_91.1: bool), "attempt to compute `{} + {}`, which would overflow", move _89, move _90) -> bb30
  using: _91@Entry, _89@Entry, _90@Entry
bb30:
  _88 = move (_91.0: i32)
  using: _91@Mir(bb29[7])
  _71 = get_part(move _83, move _84, move _88) -> bb31
  using: _83@Mir(bb29[0]), _84@Mir(bb29[4]), _88@Mir(bb30[0])
bb31:
  _70 = move _71
  using: _71@Phi(bb31)
  _93 = _70
  using: _70@Mir(bb31[0])
  _92 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _93) -> bb32
  using: _93@Mir(bb31[1])
bb32:
  switchInt(move _92) -> [0: bb34, otherwise: bb33]
  using: _92@Mir(bb31[2])
bb33:
  _96 = _70
  using: _70@Mir(bb31[0])
  _95 = move _96 as usize (PointerExposeAddress)
  using: _96@Mir(bb33[0])
  _94 = Eq(move _95, const 0_usize)
  using: _95@Mir(bb33[1])
  assume(move _94)
  using: _94@Mir(bb33[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb34:
  _100 = _70
  using: _70@Mir(bb31[0])
  _99 = move _100 as *const i8 (Pointer(MutToConstPointer))
  using: _100@Mir(bb34[0])
  _98 = strlen(move _99) -> bb35
  using: _99@Mir(bb34[1])
bb35:
  _97 = move _98 as i32 (IntToInt)
  using: _98@Mir(bb34[2])
  _103 = _70
  using: _70@Mir(bb31[0])
  _102 = move _103 as *const i8 (Pointer(MutToConstPointer))
  using: _103@Mir(bb35[1])
  _101 = strdup(move _102) -> bb36
  using: _102@Mir(bb35[2])
bb36:
  _104 = _70
  using: _70@Mir(bb31[0])
  ((*_2).4: *mut i8) = move _104
  using: _2@Mir(bb2[0]), _104@Mir(bb36[0])
  _110 = _101
  using: _101@Mir(bb35[3])
  _109 = move _110 as *const i8 (Pointer(MutToConstPointer))
  using: _110@Mir(bb36[2])
  _108 = strlen(move _109) -> bb37
  using: _109@Mir(bb36[3])
bb37:
  _112 = std::mem::size_of::<i8>() -> bb38
  using: 
bb38:
  _111 = move _112 as u64 (IntToInt)
  using: _112@Mir(bb37[0])
  _107 = core::num::<impl u64>::wrapping_mul(move _108, move _111) -> bb39
  using: _108@Mir(bb36[4]), _111@Mir(bb38[0])
bb39:
  _106 = malloc(move _107) -> bb40
  using: _107@Mir(bb38[1])
bb40:
  _105 = move _106 as *mut i8 (PtrToPtr)
  using: _106@Mir(bb39[0])
  _115 = _101
  using: _101@Mir(bb35[3])
  _114 = move _115 as *const i8 (Pointer(MutToConstPointer))
  using: _115@Mir(bb40[1])
  _119 = const b"%[^:]\x00"
  using: 
  _118 = &raw const (*_119)
  using: _119@Mir(bb40[3])
  _117 = move _118 as *const u8 (Pointer(ArrayToPointer))
  using: _118@Mir(bb40[4])
  _116 = move _117 as *const i8 (PtrToPtr)
  using: _117@Mir(bb40[5])
  _120 = _105
  using: _105@Mir(bb40[0])
  _113 = sscanf(move _114, move _116, move _120) -> bb41
  using: _114@Mir(bb40[2]), _116@Mir(bb40[6]), _120@Mir(bb40[7])
bb41:
  _122 = _105
  using: _105@Mir(bb40[0])
  _121 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _122) -> bb42
  using: _122@Mir(bb41[0])
bb42:
  switchInt(move _121) -> [0: bb44, otherwise: bb43]
  using: _121@Mir(bb41[1])
bb43:
  _125 = _105
  using: _105@Mir(bb40[0])
  _124 = move _125 as usize (PointerExposeAddress)
  using: _125@Mir(bb43[0])
  _123 = Eq(move _124, const 0_usize)
  using: _124@Mir(bb43[1])
  assume(move _123)
  using: _123@Mir(bb43[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb44:
  _129 = _105
  using: _105@Mir(bb40[0])
  _128 = move _129 as *const i8 (Pointer(MutToConstPointer))
  using: _129@Mir(bb44[0])
  _127 = strlen(move _128) -> bb45
  using: _128@Mir(bb44[1])
bb45:
  _126 = move _127 as i32 (IntToInt)
  using: _127@Mir(bb44[2])
  _130 = _105
  using: _105@Mir(bb40[0])
  ((*_2).2: *mut i8) = move _130
  using: _2@Mir(bb2[0]), _130@Mir(bb45[1])
  _131 = const {0x0 as *mut i8}
  using: 
  _134 = _16
  using: _16@Mir(bb13[0])
  _133 = move _134 as i32 (IntToInt)
  using: _134@Mir(bb45[4])
  switchInt(move _133) -> [0: bb49, otherwise: bb46]
  using: _133@Mir(bb45[5])
bb46:
  _135 = _13
  using: _13@Phi(bb31)
  _139 = const b":%s\x00"
  using: 
  _138 = &raw const (*_139)
  using: _139@Mir(bb46[1])
  _137 = move _138 as *const u8 (Pointer(ArrayToPointer))
  using: _138@Mir(bb46[2])
  _136 = move _137 as *const i8 (PtrToPtr)
  using: _137@Mir(bb46[3])
  _142 = _24
  using: _24@Phi(bb31)
  _143 = _38
  using: _38@Phi(bb31)
  _144 = CheckedAdd(_142, _143)
  using: _142@Mir(bb46[5]), _143@Mir(bb46[6])
  assert(!move (_144.1: bool), "attempt to compute `{} + {}`, which would overflow", move _142, move _143) -> bb47
  using: _144@Entry, _142@Entry, _143@Entry
bb47:
  _141 = move (_144.0: i32)
  using: _144@Mir(bb46[7])
  _145 = _97
  using: _97@Mir(bb35[0])
  _146 = CheckedAdd(_141, _145)
  using: _141@Mir(bb47[0]), _145@Mir(bb47[1])
  assert(!move (_146.1: bool), "attempt to compute `{} + {}`, which would overflow", move _141, move _145) -> bb48
  using: _146@Entry, _141@Entry, _145@Entry
bb48:
  _140 = move (_146.0: i32)
  using: _146@Mir(bb47[2])
  _132 = get_part(move _135, move _136, move _140) -> bb52
  using: _135@Mir(bb46[0]), _136@Mir(bb46[4]), _140@Mir(bb48[0])
bb49:
  _147 = _13
  using: _13@Phi(bb31)
  _151 = const b"/%s\x00"
  using: 
  _150 = &raw const (*_151)
  using: _151@Mir(bb49[1])
  _149 = move _150 as *const u8 (Pointer(ArrayToPointer))
  using: _150@Mir(bb49[2])
  _148 = move _149 as *const i8 (PtrToPtr)
  using: _149@Mir(bb49[3])
  _154 = _24
  using: _24@Phi(bb31)
  _155 = _38
  using: _38@Phi(bb31)
  _156 = CheckedAdd(_154, _155)
  using: _154@Mir(bb49[5]), _155@Mir(bb49[6])
  assert(!move (_156.1: bool), "attempt to compute `{} + {}`, which would overflow", move _154, move _155) -> bb50
  using: _156@Entry, _154@Entry, _155@Entry
bb50:
  _153 = move (_156.0: i32)
  using: _156@Mir(bb49[7])
  _157 = _97
  using: _97@Mir(bb35[0])
  _158 = CheckedAdd(_153, _157)
  using: _153@Mir(bb50[0]), _157@Mir(bb50[1])
  assert(!move (_158.1: bool), "attempt to compute `{} + {}`, which would overflow", move _153, move _157) -> bb51
  using: _158@Entry, _153@Entry, _157@Entry
bb51:
  _152 = move (_158.0: i32)
  using: _158@Mir(bb50[2])
  _132 = get_part(move _147, move _148, move _152) -> bb52
  using: _147@Mir(bb49[0]), _148@Mir(bb49[4]), _152@Mir(bb51[0])
bb52:
  _131 = move _132
  using: _132@Phi(bb52)
  _164 = _131
  using: _131@Mir(bb52[0])
  _163 = move _164 as *const i8 (Pointer(MutToConstPointer))
  using: _164@Mir(bb52[1])
  _162 = strlen(move _163) -> bb53
  using: _163@Mir(bb52[2])
bb53:
  _166 = std::mem::size_of::<i8>() -> bb54
  using: 
bb54:
  _165 = move _166 as u64 (IntToInt)
  using: _166@Mir(bb53[0])
  _161 = core::num::<impl u64>::wrapping_mul(move _162, move _165) -> bb55
  using: _162@Mir(bb52[3]), _165@Mir(bb54[0])
bb55:
  _160 = malloc(move _161) -> bb56
  using: _161@Mir(bb54[1])
bb56:
  _159 = move _160 as *mut i8 (PtrToPtr)
  using: _160@Mir(bb55[0])
  _168 = _159
  using: _159@Mir(bb56[0])
  _167 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _168) -> bb57
  using: _168@Mir(bb56[1])
bb57:
  switchInt(move _167) -> [0: bb59, otherwise: bb58]
  using: _167@Mir(bb56[2])
bb58:
  _171 = _159
  using: _159@Mir(bb56[0])
  _170 = move _171 as usize (PointerExposeAddress)
  using: _171@Mir(bb58[0])
  _169 = Eq(move _170, const 0_usize)
  using: _170@Mir(bb58[1])
  assume(move _169)
  using: _169@Mir(bb58[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb59:
  _175 = _16
  using: _16@Mir(bb13[0])
  _174 = move _175 as i32 (IntToInt)
  using: _175@Mir(bb59[0])
  switchInt(move _174) -> [0: bb61, otherwise: bb60]
  using: _174@Mir(bb59[1])
bb60:
  _178 = const b"%s\x00"
  using: 
  _177 = &raw const (*_178)
  using: _178@Mir(bb60[0])
  _176 = move _177 as *const u8 (Pointer(ArrayToPointer))
  using: _177@Mir(bb60[1])
  _173 = move _176 as *const i8 (PtrToPtr)
  using: _176@Mir(bb60[2])
  goto -> bb62
  using: 
bb61:
  _181 = const b"/%s\x00"
  using: 
  _180 = &raw const (*_181)
  using: _181@Mir(bb61[0])
  _179 = move _180 as *const u8 (Pointer(ArrayToPointer))
  using: _180@Mir(bb61[1])
  _173 = move _179 as *const i8 (PtrToPtr)
  using: _179@Mir(bb61[2])
  goto -> bb62
  using: 
bb62:
  _172 = move _173 as *mut i8 (PtrToPtr)
  using: _173@Phi(bb62)
  _183 = _159
  using: _159@Mir(bb56[0])
  _185 = _172
  using: _172@Mir(bb62[0])
  _184 = move _185 as *const i8 (Pointer(MutToConstPointer))
  using: _185@Mir(bb62[2])
  _186 = _131
  using: _131@Mir(bb52[0])
  _182 = sprintf(move _183, move _184, move _186) -> bb63
  using: _183@Mir(bb62[1]), _184@Mir(bb62[3]), _186@Mir(bb62[4])
bb63:
  _187 = _159
  using: _159@Mir(bb56[0])
  ((*_2).7: *mut i8) = move _187
  using: _2@Mir(bb2[0]), _187@Mir(bb63[0])
  _190 = _131
  using: _131@Mir(bb52[0])
  _189 = move _190 as *mut std::ffi::c_void (PtrToPtr)
  using: _190@Mir(bb63[2])
  _188 = free(move _189) -> bb64
  using: _189@Mir(bb63[3])
bb64:
  _194 = std::mem::size_of::<i8>() -> bb65
  using: 
bb65:
  _193 = move _194 as u64 (IntToInt)
  using: _194@Mir(bb64[0])
  _192 = malloc(move _193) -> bb66
  using: _193@Mir(bb65[0])
bb66:
  _191 = move _192 as *mut i8 (PtrToPtr)
  using: _192@Mir(bb65[1])
  _196 = _191
  using: _191@Mir(bb66[0])
  _195 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _196) -> bb67
  using: _196@Mir(bb66[1])
bb67:
  switchInt(move _195) -> [0: bb69, otherwise: bb68]
  using: _195@Mir(bb66[2])
bb68:
  _199 = _191
  using: _191@Mir(bb66[0])
  _198 = move _199 as usize (PointerExposeAddress)
  using: _199@Mir(bb68[0])
  _197 = Eq(move _198, const 0_usize)
  using: _198@Mir(bb68[1])
  assume(move _197)
  using: _197@Mir(bb68[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb69:
  _201 = _191
  using: _191@Mir(bb66[0])
  _205 = const b"\x00"
  using: 
  _204 = &raw const (*_205)
  using: _205@Mir(bb69[1])
  _203 = move _204 as *const u8 (Pointer(ArrayToPointer))
  using: _204@Mir(bb69[2])
  _202 = move _203 as *const i8 (PtrToPtr)
  using: _203@Mir(bb69[3])
  _200 = strcat(move _201, move _202) -> bb70
  using: _201@Mir(bb69[0]), _202@Mir(bb69[4])
bb70:
  _208 = _159
  using: _159@Mir(bb56[0])
  _207 = move _208 as *const i8 (Pointer(MutToConstPointer))
  using: _208@Mir(bb70[0])
  _206 = strdup(move _207) -> bb71
  using: _207@Mir(bb70[1])
bb71:
  _131 = move _206
  using: _206@Mir(bb70[2])
  _211 = _131
  using: _131@Mir(bb71[0])
  _210 = move _211 as *const i8 (Pointer(MutToConstPointer))
  using: _211@Mir(bb71[1])
  _215 = const b"%[^? | ^#]\x00"
  using: 
  _214 = &raw const (*_215)
  using: _215@Mir(bb71[3])
  _213 = move _214 as *const u8 (Pointer(ArrayToPointer))
  using: _214@Mir(bb71[4])
  _212 = move _213 as *const i8 (PtrToPtr)
  using: _213@Mir(bb71[5])
  _216 = _191
  using: _191@Mir(bb66[0])
  _209 = sscanf(move _210, move _212, move _216) -> bb72
  using: _210@Mir(bb71[2]), _212@Mir(bb71[6]), _216@Mir(bb71[7])
bb72:
  _220 = _191
  using: _191@Mir(bb66[0])
  _219 = move _220 as *const i8 (Pointer(MutToConstPointer))
  using: _220@Mir(bb72[0])
  _218 = strlen(move _219) -> bb73
  using: _219@Mir(bb72[1])
bb73:
  _217 = move _218 as i32 (IntToInt)
  using: _218@Mir(bb72[2])
  _221 = _191
  using: _191@Mir(bb66[0])
  ((*_2).5: *mut i8) = move _221
  using: _2@Mir(bb2[0]), _221@Mir(bb73[1])
  _225 = std::mem::size_of::<*mut i8>() -> bb74
  using: 
bb74:
  _224 = move _225 as u64 (IntToInt)
  using: _225@Mir(bb73[3])
  _223 = malloc(move _224) -> bb75
  using: _224@Mir(bb74[0])
bb75:
  _222 = move _223 as *mut i8 (PtrToPtr)
  using: _223@Mir(bb74[1])
  _227 = _222
  using: _222@Mir(bb75[0])
  _226 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _227) -> bb76
  using: _227@Mir(bb75[1])
bb76:
  switchInt(move _226) -> [0: bb78, otherwise: bb77]
  using: _226@Mir(bb75[2])
bb77:
  _230 = _222
  using: _222@Mir(bb75[0])
  _229 = move _230 as usize (PointerExposeAddress)
  using: _230@Mir(bb77[0])
  _228 = Eq(move _229, const 0_usize)
  using: _229@Mir(bb77[1])
  assume(move _228)
  using: _228@Mir(bb77[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb78:
  _232 = _131
  using: _131@Mir(bb71[0])
  _233 = _217
  using: _217@Mir(bb73[0])
  _231 = strff(move _232, move _233) -> bb79
  using: _232@Mir(bb78[0]), _233@Mir(bb78[1])
bb79:
  _131 = move _231
  using: _231@Mir(bb78[2])
  _235 = _222
  using: _222@Mir(bb75[0])
  _239 = const b"\x00"
  using: 
  _238 = &raw const (*_239)
  using: _239@Mir(bb79[2])
  _237 = move _238 as *const u8 (Pointer(ArrayToPointer))
  using: _238@Mir(bb79[3])
  _236 = move _237 as *const i8 (PtrToPtr)
  using: _237@Mir(bb79[4])
  _234 = strcat(move _235, move _236) -> bb80
  using: _235@Mir(bb79[1]), _236@Mir(bb79[5])
bb80:
  _242 = _131
  using: _131@Mir(bb79[0])
  _241 = move _242 as *const i8 (Pointer(MutToConstPointer))
  using: _242@Mir(bb80[0])
  _246 = const b"%[^#]\x00"
  using: 
  _245 = &raw const (*_246)
  using: _246@Mir(bb80[2])
  _244 = move _245 as *const u8 (Pointer(ArrayToPointer))
  using: _245@Mir(bb80[3])
  _243 = move _244 as *const i8 (PtrToPtr)
  using: _244@Mir(bb80[4])
  _247 = _222
  using: _222@Mir(bb75[0])
  _240 = sscanf(move _241, move _243, move _247) -> bb81
  using: _241@Mir(bb80[1]), _243@Mir(bb80[5]), _247@Mir(bb80[6])
bb81:
  _248 = _222
  using: _222@Mir(bb75[0])
  ((*_2).6: *mut i8) = move _248
  using: _2@Mir(bb2[0]), _248@Mir(bb81[0])
  _252 = _222
  using: _222@Mir(bb75[0])
  _251 = move _252 as *const i8 (Pointer(MutToConstPointer))
  using: _252@Mir(bb81[2])
  _250 = strlen(move _251) -> bb82
  using: _251@Mir(bb81[3])
bb82:
  _249 = move _250 as i32 (IntToInt)
  using: _250@Mir(bb81[4])
  _255 = _131
  using: _131@Mir(bb79[0])
  _254 = move _255 as *mut std::ffi::c_void (PtrToPtr)
  using: _255@Mir(bb82[1])
  _253 = free(move _254) -> bb83
  using: _254@Mir(bb82[2])
bb83:
  _259 = std::mem::size_of::<i8>() -> bb84
  using: 
bb84:
  _258 = move _259 as u64 (IntToInt)
  using: _259@Mir(bb83[0])
  _257 = malloc(move _258) -> bb85
  using: _258@Mir(bb84[0])
bb85:
  _256 = move _257 as *mut i8 (PtrToPtr)
  using: _257@Mir(bb84[1])
  _261 = _256
  using: _256@Mir(bb85[0])
  _260 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _261) -> bb86
  using: _261@Mir(bb85[1])
bb86:
  switchInt(move _260) -> [0: bb88, otherwise: bb87]
  using: _260@Mir(bb85[2])
bb87:
  _264 = _256
  using: _256@Mir(bb85[0])
  _263 = move _264 as usize (PointerExposeAddress)
  using: _264@Mir(bb87[0])
  _262 = Eq(move _263, const 0_usize)
  using: _263@Mir(bb87[1])
  assume(move _262)
  using: _262@Mir(bb87[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb88:
  _267 = _222
  using: _222@Mir(bb75[0])
  _266 = move _267 as *const i8 (Pointer(MutToConstPointer))
  using: _267@Mir(bb88[0])
  _271 = const b"?%s\x00"
  using: 
  _270 = &raw const (*_271)
  using: _271@Mir(bb88[2])
  _269 = move _270 as *const u8 (Pointer(ArrayToPointer))
  using: _270@Mir(bb88[3])
  _268 = move _269 as *const i8 (PtrToPtr)
  using: _269@Mir(bb88[4])
  _272 = _256
  using: _256@Mir(bb85[0])
  _265 = sscanf(move _266, move _268, move _272) -> bb89
  using: _266@Mir(bb88[1]), _268@Mir(bb88[5]), _272@Mir(bb88[6])
bb89:
  _273 = _256
  using: _256@Mir(bb85[0])
  ((*_2).9: *mut i8) = move _273
  using: _2@Mir(bb2[0]), _273@Mir(bb89[0])
  _277 = std::mem::size_of::<i8>() -> bb90
  using: 
bb90:
  _276 = move _277 as u64 (IntToInt)
  using: _277@Mir(bb89[2])
  _275 = malloc(move _276) -> bb91
  using: _276@Mir(bb90[0])
bb91:
  _274 = move _275 as *mut i8 (PtrToPtr)
  using: _275@Mir(bb90[1])
  _279 = _274
  using: _274@Mir(bb91[0])
  _278 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _279) -> bb92
  using: _279@Mir(bb91[1])
bb92:
  switchInt(move _278) -> [0: bb94, otherwise: bb93]
  using: _278@Mir(bb91[2])
bb93:
  _282 = _274
  using: _274@Mir(bb91[0])
  _281 = move _282 as usize (PointerExposeAddress)
  using: _282@Mir(bb93[0])
  _280 = Eq(move _281, const 0_usize)
  using: _281@Mir(bb93[1])
  assume(move _280)
  using: _280@Mir(bb93[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb94:
  _284 = _159
  using: _159@Mir(bb56[0])
  _286 = _217
  using: _217@Mir(bb73[0])
  _287 = _249
  using: _249@Mir(bb82[0])
  _288 = CheckedAdd(_286, _287)
  using: _286@Mir(bb94[1]), _287@Mir(bb94[2])
  assert(!move (_288.1: bool), "attempt to compute `{} + {}`, which would overflow", move _286, move _287) -> bb95
  using: _288@Entry, _286@Entry, _287@Entry
bb95:
  _285 = move (_288.0: i32)
  using: _288@Mir(bb94[3])
  _283 = strff(move _284, move _285) -> bb96
  using: _284@Mir(bb94[0]), _285@Mir(bb95[0])
bb96:
  _131 = move _283
  using: _283@Mir(bb95[1])
  _290 = _274
  using: _274@Mir(bb91[0])
  _294 = const b"\x00"
  using: 
  _293 = &raw const (*_294)
  using: _294@Mir(bb96[2])
  _292 = move _293 as *const u8 (Pointer(ArrayToPointer))
  using: _293@Mir(bb96[3])
  _291 = move _292 as *const i8 (PtrToPtr)
  using: _292@Mir(bb96[4])
  _289 = strcat(move _290, move _291) -> bb97
  using: _290@Mir(bb96[1]), _291@Mir(bb96[5])
bb97:
  _297 = _131
  using: _131@Mir(bb96[0])
  _296 = move _297 as *const i8 (Pointer(MutToConstPointer))
  using: _297@Mir(bb97[0])
  _301 = const b"%s\x00"
  using: 
  _300 = &raw const (*_301)
  using: _301@Mir(bb97[2])
  _299 = move _300 as *const u8 (Pointer(ArrayToPointer))
  using: _300@Mir(bb97[3])
  _298 = move _299 as *const i8 (PtrToPtr)
  using: _299@Mir(bb97[4])
  _302 = _274
  using: _274@Mir(bb91[0])
  _295 = sscanf(move _296, move _298, move _302) -> bb98
  using: _296@Mir(bb97[1]), _298@Mir(bb97[5]), _302@Mir(bb97[6])
bb98:
  _303 = _274
  using: _274@Mir(bb91[0])
  ((*_2).8: *mut i8) = move _303
  using: _2@Mir(bb2[0]), _303@Mir(bb98[0])
  _306 = _131
  using: _131@Mir(bb96[0])
  _305 = move _306 as *mut std::ffi::c_void (PtrToPtr)
  using: _306@Mir(bb98[2])
  _304 = free(move _305) -> bb99
  using: _305@Mir(bb98[3])
bb99:
  _310 = std::mem::size_of::<i8>() -> bb100
  using: 
bb100:
  _309 = move _310 as u64 (IntToInt)
  using: _310@Mir(bb99[0])
  _308 = malloc(move _309) -> bb101
  using: _309@Mir(bb100[0])
bb101:
  _307 = move _308 as *mut i8 (PtrToPtr)
  using: _308@Mir(bb100[1])
  _312 = _307
  using: _307@Mir(bb101[0])
  _311 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _312) -> bb102
  using: _312@Mir(bb101[1])
bb102:
  switchInt(move _311) -> [0: bb104, otherwise: bb103]
  using: _311@Mir(bb101[2])
bb103:
  _315 = _307
  using: _307@Mir(bb101[0])
  _314 = move _315 as usize (PointerExposeAddress)
  using: _315@Mir(bb103[0])
  _313 = Eq(move _314, const 0_usize)
  using: _314@Mir(bb103[1])
  assume(move _313)
  using: _313@Mir(bb103[2])
  _0 = const {0x0 as *mut url_data}
  using: 
  goto -> bb109
  using: 
bb104:
  _317 = _70
  using: _70@Mir(bb31[0])
  _319 = _126
  using: _126@Mir(bb45[0])
  _320 = const 1_i32
  using: 
  _321 = CheckedAdd(_319, _320)
  using: _319@Mir(bb104[1]), _320@Mir(bb104[2])
  assert(!move (_321.1: bool), "attempt to compute `{} + {}`, which would overflow", move _319, move _320) -> bb105
  using: _321@Entry, _319@Entry, _320@Entry
bb105:
  _318 = move (_321.0: i32)
  using: _321@Mir(bb104[3])
  _316 = strff(move _317, move _318) -> bb106
  using: _317@Mir(bb104[0]), _318@Mir(bb105[0])
bb106:
  _101 = move _316
  using: _316@Mir(bb105[1])
  _324 = _101
  using: _101@Mir(bb106[0])
  _323 = move _324 as *const i8 (Pointer(MutToConstPointer))
  using: _324@Mir(bb106[1])
  _328 = const b"%s\x00"
  using: 
  _327 = &raw const (*_328)
  using: _328@Mir(bb106[3])
  _326 = move _327 as *const u8 (Pointer(ArrayToPointer))
  using: _327@Mir(bb106[4])
  _325 = move _326 as *const i8 (PtrToPtr)
  using: _326@Mir(bb106[5])
  _329 = _307
  using: _307@Mir(bb101[0])
  _322 = sscanf(move _323, move _325, move _329) -> bb107
  using: _323@Mir(bb106[2]), _325@Mir(bb106[6]), _329@Mir(bb106[7])
bb107:
  _330 = _307
  using: _307@Mir(bb101[0])
  ((*_2).10: *mut i8) = move _330
  using: _2@Mir(bb2[0]), _330@Mir(bb107[0])
  _333 = _101
  using: _101@Mir(bb106[0])
  _332 = move _333 as *mut std::ffi::c_void (PtrToPtr)
  using: _333@Mir(bb107[2])
  _331 = free(move _332) -> bb108
  using: _332@Mir(bb107[3])
bb108:
  _0 = _2
  using: _2@Mir(bb2[0])
  goto -> bb109
  using: 
bb109:
  return
  using: _0@Phi(bb109)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:268:16: 268:51 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:268:9: 268:77 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:278:9: 278:25 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:282:16: 282:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:282:9: 282:87 (#0) by default
rewrite call strstr @ workspace/urlparser/test.rs:285:11: 285:80 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:291:20: 291:32 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:307:49: 307:65 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:311:16: 311:36 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:311:50: 311:95 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/urlparser/test.rs:311:37: 312:79 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:311:9: 312:80 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:314:5: 315:17 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:317:45: 317:57 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:329:16: 329:32 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:329:46: 329:91 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/urlparser/test.rs:329:33: 330:75 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:329:9: 330:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sprintf @ workspace/urlparser/test.rs:338:5: 338:33 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:342:16: 342:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:342:9: 342:87 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:345:5: 345:74 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:347:5: 348:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:349:49: 349:65 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:352:16: 352:66 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:352:9: 352:92 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:356:5: 356:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:357:5: 358:19 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:360:47: 360:61 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:363:16: 363:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:363:9: 363:87 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:366:5: 366:82 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:369:16: 369:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:369:9: 369:87 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:373:5: 373:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:374:5: 374:82 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:378:16: 378:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:378:9: 378:87 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:382:5: 382:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:20 ~ test[be05]::strff)
bb0:
  _3 = const 0_i32
  using: 
  _4 = const 0_i32
  using: 
  goto -> bb1
  using: 
bb1:
  _6 = _4
  using: _4@Phi(bb1)
  _7 = _2
  using: _2@Entry
  _5 = Lt(move _6, move _7)
  using: _6@Mir(bb1[0]), _7@Mir(bb1[1])
  switchInt(move _5) -> [0: bb5, otherwise: bb2]
  using: _5@Mir(bb1[2])
bb2:
  _8 = _1
  using: _1@Phi(bb1)
  _10 = _1
  using: _1@Phi(bb1)
  _9 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _10, const 1_isize) -> bb3
  using: _10@Mir(bb2[1])
bb3:
  _1 = move _9
  using: _9@Mir(bb2[2])
  _11 = (*_8)
  using: _8@Mir(bb2[0])
  _3 = move _11 as i32 (IntToInt)
  using: _11@Mir(bb3[1])
  _12 = CheckedAdd(_4, const 1_i32)
  using: _4@Phi(bb1)
  assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_i32) -> bb4
  using: _12@Entry, _4@Entry
bb4:
  _4 = move (_12.0: i32)
  using: _12@Mir(bb3[3])
  goto -> bb1
  using: 
bb5:
  _14 = _1
  using: _1@Phi(bb1)
  _13 = move _14 as *const i8 (Pointer(MutToConstPointer))
  using: _14@Mir(bb5[0])
  _0 = strdup(move _13) -> bb6
  using: _13@Mir(bb5[1])
bb6:
  return
  using: _0@Mir(bb5[2])
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/urlparser/test.rs:393:19: 393:28 (#0) by default
@DefId(0:21 ~ test[be05]::url_get_protocol)
bb0:
  _5 = const 16_u64
  using: 
  _7 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb0[1])
  _4 = core::num::<impl u64>::wrapping_mul(move _5, move _6) -> bb2
  using: _5@Mir(bb0[0]), _6@Mir(bb1[0])
bb2:
  _3 = malloc(move _4) -> bb3
  using: _4@Mir(bb1[1])
bb3:
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb2[0])
  _9 = _2
  using: _2@Mir(bb3[0])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb4
  using: _9@Mir(bb3[1])
bb4:
  switchInt(move _8) -> [0: bb6, otherwise: bb5]
  using: _8@Mir(bb3[2])
bb5:
  _12 = _2
  using: _2@Mir(bb3[0])
  _11 = move _12 as usize (PointerExposeAddress)
  using: _12@Mir(bb5[0])
  _10 = Eq(move _11, const 0_usize)
  using: _11@Mir(bb5[1])
  assume(move _10)
  using: _10@Mir(bb5[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb11
  using: 
bb6:
  _15 = _1
  using: _1@Entry
  _14 = move _15 as *const i8 (Pointer(MutToConstPointer))
  using: _15@Mir(bb6[0])
  _19 = const b"%[^://]\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb6[2])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb6[3])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb6[4])
  _20 = _2
  using: _2@Mir(bb3[0])
  _13 = sscanf(move _14, move _16, move _20) -> bb7
  using: _14@Mir(bb6[1]), _16@Mir(bb6[5]), _20@Mir(bb6[6])
bb7:
  _22 = _2
  using: _2@Mir(bb3[0])
  _21 = url_is_protocol(move _22) -> bb8
  using: _22@Mir(bb7[0])
bb8:
  switchInt(move _21) -> [0: bb10, otherwise: bb9]
  using: _21@Mir(bb7[1])
bb9:
  _0 = _2
  using: _2@Mir(bb3[0])
  goto -> bb11
  using: 
bb10:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb11
  using: 
bb11:
  return
  using: _0@Phi(bb11)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:404:57: 404:102 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/urlparser/test.rs:404:44: 405:78 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:403:9: 405:79 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:408:5: 408:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:22 ~ test[be05]::url_is_protocol)
bb0:
  _5 = std::mem::size_of::<[*mut i8; 177]>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _7 = std::mem::size_of::<*mut i8>() -> bb2
  using: 
bb2:
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb1[1])
  _3 = core::num::<impl u64>::wrapping_div(move _4, move _6) -> bb3
  using: _4@Mir(bb1[0]), _6@Mir(bb2[0])
bb3:
  _2 = move _3 as i32 (IntToInt)
  using: _3@Mir(bb2[1])
  _8 = const 0_i32
  using: 
  goto -> bb4
  using: 
bb4:
  _10 = _8
  using: _8@Phi(bb4)
  _11 = _2
  using: _2@Mir(bb3[0])
  _9 = Lt(move _10, move _11)
  using: _10@Mir(bb4[0]), _11@Mir(bb4[1])
  switchInt(move _9) -> [0: bb11, otherwise: bb5]
  using: _9@Mir(bb4[2])
bb5:
  _13 = const 0_i32
  using: 
  _17 = const {alloc27: *mut [*mut i8; 177]}
  using: 
  _19 = _8
  using: _8@Phi(bb4)
  _18 = move _19 as usize (IntToInt)
  using: _19@Mir(bb5[2])
  _20 = const 177_usize
  using: 
  _21 = Lt(_18, _20)
  using: _18@Mir(bb5[3]), _20@Mir(bb5[4])
  assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _18) -> bb6
  using: _21@Entry, _20@Entry, _18@Entry
bb6:
  _16 = (*_17)[_18]
  using: _17@Mir(bb5[1]), _18@Mir(bb5[3])
  _15 = move _16 as *const i8 (Pointer(MutToConstPointer))
  using: _16@Mir(bb6[0])
  _23 = _1
  using: _1@Phi(bb4)
  _22 = move _23 as *const i8 (Pointer(MutToConstPointer))
  using: _23@Mir(bb6[2])
  _14 = strcmp(move _15, move _22) -> bb7
  using: _15@Mir(bb6[1]), _22@Mir(bb6[3])
bb7:
  _12 = Eq(move _13, move _14)
  using: _13@Mir(bb5[0]), _14@Mir(bb6[4])
  switchInt(move _12) -> [0: bb9, otherwise: bb8]
  using: _12@Mir(bb7[0])
bb8:
  _0 = const true
  using: 
  goto -> bb12
  using: 
bb9:
  _24 = CheckedAdd(_8, const 1_i32)
  using: _8@Phi(bb4)
  assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_i32) -> bb10
  using: _24@Entry, _8@Entry
bb10:
  _8 = move (_24.0: i32)
  using: _24@Mir(bb9[0])
  goto -> bb4
  using: 
bb11:
  _0 = const false
  using: 
  goto -> bb12
  using: 
bb12:
  return
  using: _0@Phi(bb12)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:415:10: 415:67 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:416:50: 416:100 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/urlparser/test.rs:416:37: 417:71 (#0) by default
rewrite call strcmp @ workspace/urlparser/test.rs:420:40: 420:76 (#0) by default
@DefId(0:24 ~ test[be05]::get_part)
bb0:
  _4 = const false
  using: 
  _8 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _7 = move _8 as u64 (IntToInt)
  using: _8@Mir(bb0[1])
  _6 = malloc(move _7) -> bb2
  using: _7@Mir(bb1[0])
bb2:
  _5 = move _6 as *mut i8 (PtrToPtr)
  using: _6@Mir(bb1[1])
  _11 = _1
  using: _1@Entry
  _10 = move _11 as *const i8 (Pointer(MutToConstPointer))
  using: _11@Mir(bb2[1])
  _9 = strdup(move _10) -> bb3
  using: _10@Mir(bb2[2])
bb3:
  _14 = _1
  using: _1@Entry
  _13 = move _14 as *const i8 (Pointer(MutToConstPointer))
  using: _14@Mir(bb3[0])
  _12 = strdup(move _13) -> bb4
  using: _13@Mir(bb3[1])
bb4:
  _18 = std::mem::size_of::<i8>() -> bb5
  using: 
bb5:
  _17 = move _18 as u64 (IntToInt)
  using: _18@Mir(bb4[0])
  _16 = malloc(move _17) -> bb6
  using: _17@Mir(bb5[0])
bb6:
  _15 = move _16 as *mut i8 (PtrToPtr)
  using: _16@Mir(bb5[1])
  _23 = _5
  using: _5@Mir(bb2[0])
  _22 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _23) -> bb16
  using: _23@Mir(bb6[1])
bb7:
  _19 = const true
  using: 
  goto -> bb9
  using: 
bb8:
  _29 = _15
  using: _15@Mir(bb6[0])
  _28 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _29) -> bb19
  using: _29@Mir(bb8[0])
bb9:
  switchInt(move _19) -> [0: bb21, otherwise: bb20]
  using: _19@Phi(bb9)
bb10:
  _20 = const true
  using: 
  goto -> bb12
  using: 
bb11:
  _27 = _12
  using: _12@Mir(bb3[2])
  _26 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _27) -> bb18
  using: _27@Mir(bb11[0])
bb12:
  switchInt(move _20) -> [0: bb8, otherwise: bb7]
  using: _20@Phi(bb12)
bb13:
  _21 = const true
  using: 
  goto -> bb15
  using: 
bb14:
  _25 = _9
  using: _9@Mir(bb2[3])
  _24 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _25) -> bb17
  using: _25@Mir(bb14[0])
bb15:
  switchInt(move _21) -> [0: bb11, otherwise: bb10]
  using: _21@Phi(bb15)
bb16:
  switchInt(move _22) -> [0: bb14, otherwise: bb13]
  using: _22@Mir(bb6[2])
bb17:
  _21 = move _24
  using: _24@Mir(bb14[1])
  goto -> bb15
  using: 
bb18:
  _20 = move _26
  using: _26@Mir(bb11[1])
  goto -> bb12
  using: 
bb19:
  _19 = move _28
  using: _28@Mir(bb8[1])
  goto -> bb9
  using: 
bb20:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb36
  using: 
bb21:
  _31 = _5
  using: _5@Mir(bb2[0])
  _35 = const b"\x00"
  using: 
  _34 = &raw const (*_35)
  using: _35@Mir(bb21[1])
  _33 = move _34 as *const u8 (Pointer(ArrayToPointer))
  using: _34@Mir(bb21[2])
  _32 = move _33 as *const i8 (PtrToPtr)
  using: _33@Mir(bb21[3])
  _30 = strcpy(move _31, move _32) -> bb22
  using: _31@Mir(bb21[0]), _32@Mir(bb21[4])
bb22:
  _37 = _12
  using: _12@Phi(bb12)
  _41 = const b"\x00"
  using: 
  _40 = &raw const (*_41)
  using: _41@Mir(bb22[1])
  _39 = move _40 as *const u8 (Pointer(ArrayToPointer))
  using: _40@Mir(bb22[2])
  _38 = move _39 as *const i8 (PtrToPtr)
  using: _39@Mir(bb22[3])
  _36 = strcpy(move _37, move _38) -> bb23
  using: _37@Mir(bb22[0]), _38@Mir(bb22[4])
bb23:
  _43 = _12
  using: _12@Phi(bb12)
  _44 = _3
  using: _3@Entry
  _42 = strff(move _43, move _44) -> bb24
  using: _43@Mir(bb23[0]), _44@Mir(bb23[1])
bb24:
  _12 = move _42
  using: _42@Mir(bb23[2])
  _47 = _12
  using: _12@Mir(bb24[0])
  _46 = move _47 as *const i8 (Pointer(MutToConstPointer))
  using: _47@Mir(bb24[1])
  _48 = _2
  using: _2@Entry
  _49 = _5
  using: _5@Mir(bb2[0])
  _45 = sscanf(move _46, move _48, move _49) -> bb25
  using: _46@Mir(bb24[2]), _48@Mir(bb24[3]), _49@Mir(bb24[4])
bb25:
  _51 = const 0_i32
  using: 
  _54 = _5
  using: _5@Mir(bb2[0])
  _53 = move _54 as *const i8 (Pointer(MutToConstPointer))
  using: _54@Mir(bb25[1])
  _56 = _9
  using: _9@Phi(bb15)
  _55 = move _56 as *const i8 (Pointer(MutToConstPointer))
  using: _56@Mir(bb25[3])
  _52 = strcmp(move _53, move _55) -> bb26
  using: _53@Mir(bb25[2]), _55@Mir(bb25[4])
bb26:
  _50 = Ne(move _51, move _52)
  using: _51@Mir(bb25[0]), _52@Mir(bb25[5])
  switchInt(move _50) -> [0: bb29, otherwise: bb27]
  using: _50@Mir(bb26[0])
bb27:
  _4 = const true
  using: 
  _59 = _5
  using: _5@Mir(bb2[0])
  _58 = move _59 as *const i8 (Pointer(MutToConstPointer))
  using: _59@Mir(bb27[1])
  _57 = strdup(move _58) -> bb28
  using: _58@Mir(bb27[2])
bb28:
  _15 = move _57
  using: _57@Mir(bb27[3])
  goto -> bb29
  using: 
bb29:
  _61 = _12
  using: _12@Mir(bb24[0])
  _62 = _3
  using: _3@Entry
  _60 = strrwd(move _61, move _62) -> bb30
  using: _61@Mir(bb29[0]), _62@Mir(bb29[1])
bb30:
  _12 = move _60
  using: _60@Mir(bb29[2])
  _65 = _5
  using: _5@Phi(bb29)
  _64 = move _65 as *mut std::ffi::c_void (PtrToPtr)
  using: _65@Mir(bb30[1])
  _63 = free(move _64) -> bb31
  using: _64@Mir(bb30[2])
bb31:
  _68 = _9
  using: _9@Phi(bb15)
  _67 = move _68 as *mut std::ffi::c_void (PtrToPtr)
  using: _68@Mir(bb31[0])
  _66 = free(move _67) -> bb32
  using: _67@Mir(bb31[1])
bb32:
  _71 = _12
  using: _12@Mir(bb30[0])
  _70 = move _71 as *mut std::ffi::c_void (PtrToPtr)
  using: _71@Mir(bb32[0])
  _69 = free(move _70) -> bb33
  using: _70@Mir(bb32[1])
bb33:
  _73 = _4
  using: _4@Phi(bb29)
  _72 = move _73 as i32 (IntToInt)
  using: _73@Mir(bb33[0])
  switchInt(move _72) -> [0: bb35, otherwise: bb34]
  using: _72@Mir(bb33[1])
bb34:
  _0 = _15
  using: _15@Phi(bb29)
  goto -> bb36
  using: 
bb35:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb36
  using: 
bb36:
  return
  using: _0@Phi(bb36)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:432:16: 432:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:432:9: 432:87 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:437:16: 437:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:437:9: 437:87 (#0) by default
rewrite call strcpy @ workspace/urlparser/test.rs:443:5: 443:69 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcpy @ workspace/urlparser/test.rs:444:5: 444:73 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:446:5: 446:33 (#0) by default
rewrite call strcmp @ workspace/urlparser/test.rs:447:36: 447:56 (#0) by default
@DefId(0:25 ~ test[be05]::strrwd)
bb0:
  _3 = const 0_i32
  using: 
  _4 = const 0_i32
  using: 
  goto -> bb1
  using: 
bb1:
  _6 = _4
  using: _4@Phi(bb1)
  _7 = _2
  using: _2@Entry
  _5 = Lt(move _6, move _7)
  using: _6@Mir(bb1[0]), _7@Mir(bb1[1])
  switchInt(move _5) -> [0: bb5, otherwise: bb2]
  using: _5@Mir(bb1[2])
bb2:
  _8 = _1
  using: _1@Phi(bb1)
  _10 = _1
  using: _1@Phi(bb1)
  _9 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _10, const -1_isize) -> bb3
  using: _10@Mir(bb2[1])
bb3:
  _1 = move _9
  using: _9@Mir(bb2[2])
  _11 = (*_8)
  using: _8@Mir(bb2[0])
  _3 = move _11 as i32 (IntToInt)
  using: _11@Mir(bb3[1])
  _12 = CheckedAdd(_4, const 1_i32)
  using: _4@Phi(bb1)
  assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_i32) -> bb4
  using: _12@Entry, _4@Entry
bb4:
  _4 = move (_12.0: i32)
  using: _12@Mir(bb3[3])
  goto -> bb1
  using: 
bb5:
  _14 = _1
  using: _1@Phi(bb1)
  _13 = move _14 as *const i8 (Pointer(MutToConstPointer))
  using: _14@Mir(bb5[0])
  _0 = strdup(move _13) -> bb6
  using: _13@Mir(bb5[1])
bb6:
  return
  using: _0@Mir(bb5[2])
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/urlparser/test.rs:463:19: 463:29 (#0) by default
@DefId(0:26 ~ test[be05]::url_is_ssh)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = move _4 as *const i8 (Pointer(MutToConstPointer))
  using: _4@Mir(bb0[0])
  _2 = strdup(move _3) -> bb1
  using: _3@Mir(bb0[1])
bb1:
  _1 = move _2
  using: _2@Mir(bb0[2])
  _7 = const 0_i32
  using: 
  _10 = _1
  using: _1@Mir(bb1[0])
  _9 = move _10 as *const i8 (Pointer(MutToConstPointer))
  using: _10@Mir(bb1[2])
  _14 = const b"ssh\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb1[4])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb1[5])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb1[6])
  _8 = strcmp(move _9, move _11) -> bb5
  using: _9@Mir(bb1[3]), _11@Mir(bb1[7])
bb2:
  _5 = const true
  using: 
  goto -> bb4
  using: 
bb3:
  _16 = const 0_i32
  using: 
  _19 = _1
  using: _1@Mir(bb1[0])
  _18 = move _19 as *const i8 (Pointer(MutToConstPointer))
  using: _19@Mir(bb3[1])
  _23 = const b"git\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb3[3])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb3[4])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb3[5])
  _17 = strcmp(move _18, move _20) -> bb6
  using: _18@Mir(bb3[2]), _20@Mir(bb3[6])
bb4:
  switchInt(move _5) -> [0: bb9, otherwise: bb7]
  using: _5@Phi(bb4)
bb5:
  _6 = Eq(move _7, move _8)
  using: _7@Mir(bb1[1]), _8@Mir(bb1[8])
  switchInt(move _6) -> [0: bb3, otherwise: bb2]
  using: _6@Mir(bb5[0])
bb6:
  _15 = Eq(move _16, move _17)
  using: _16@Mir(bb3[0]), _17@Mir(bb3[7])
  _5 = move _15
  using: _15@Mir(bb6[0])
  goto -> bb4
  using: 
bb7:
  _26 = _1
  using: _1@Phi(bb4)
  _25 = move _26 as *mut std::ffi::c_void (PtrToPtr)
  using: _26@Mir(bb7[0])
  _24 = free(move _25) -> bb8
  using: _25@Mir(bb7[1])
bb8:
  _0 = const true
  using: 
  goto -> bb10
  using: 
bb9:
  _0 = const false
  using: 
  goto -> bb10
  using: 
bb10:
  return
  using: _0@Phi(bb10)
rewrite call strcmp @ workspace/urlparser/test.rs:473:12: 473:79 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:475:16: 475:83 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:27 ~ test[be05]::url_get_auth)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = url_get_protocol(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _5 = _2
  using: _2@Mir(bb0[1])
  _4 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _5) -> bb2
  using: _5@Mir(bb1[0])
bb2:
  switchInt(move _4) -> [0: bb4, otherwise: bb3]
  using: _4@Mir(bb1[1])
bb3:
  _8 = _2
  using: _2@Mir(bb0[1])
  _7 = move _8 as usize (PointerExposeAddress)
  using: _8@Mir(bb3[0])
  _6 = Eq(move _7, const 0_usize)
  using: _7@Mir(bb3[1])
  assume(move _6)
  using: _6@Mir(bb3[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb7
  using: 
bb4:
  _13 = _2
  using: _2@Mir(bb0[1])
  _12 = move _13 as *const i8 (Pointer(MutToConstPointer))
  using: _13@Mir(bb4[0])
  _11 = strlen(move _12) -> bb5
  using: _12@Mir(bb4[1])
bb5:
  _10 = move _11 as i32 (IntToInt)
  using: _11@Mir(bb4[2])
  _14 = const 3_i32
  using: 
  _15 = CheckedAdd(_10, _14)
  using: _10@Mir(bb5[0]), _14@Mir(bb5[1])
  assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, move _14) -> bb6
  using: _15@Entry, _10@Entry, _14@Entry
bb6:
  _9 = move (_15.0: i32)
  using: _15@Mir(bb5[2])
  _16 = _1
  using: _1@Entry
  _20 = const b"%[^@]\x00"
  using: 
  _19 = &raw const (*_20)
  using: _20@Mir(bb6[2])
  _18 = move _19 as *const u8 (Pointer(ArrayToPointer))
  using: _19@Mir(bb6[3])
  _17 = move _18 as *const i8 (PtrToPtr)
  using: _18@Mir(bb6[4])
  _21 = _9
  using: _9@Mir(bb6[0])
  _0 = get_part(move _16, move _17, move _21) -> bb7
  using: _16@Mir(bb6[1]), _17@Mir(bb6[5]), _21@Mir(bb6[6])
bb7:
  return
  using: _0@Phi(bb7)
rewrite call strlen @ workspace/urlparser/test.rs:487:9: 487:25 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:28 ~ test[be05]::url_get_hostname)
bb0:
  _2 = const 3_i32
  using: 
  _4 = _1
  using: _1@Entry
  _3 = url_get_protocol(move _4) -> bb1
  using: _4@Mir(bb0[1])
bb1:
  _7 = _3
  using: _3@Mir(bb0[2])
  _6 = move _7 as *const i8 (Pointer(MutToConstPointer))
  using: _7@Mir(bb1[0])
  _5 = strdup(move _6) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  _9 = _1
  using: _1@Entry
  _8 = url_get_auth(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  _11 = _3
  using: _3@Mir(bb0[2])
  _10 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _11) -> bb4
  using: _11@Mir(bb3[0])
bb4:
  switchInt(move _10) -> [0: bb6, otherwise: bb5]
  using: _10@Mir(bb3[1])
bb5:
  _14 = _3
  using: _3@Mir(bb0[2])
  _13 = move _14 as usize (PointerExposeAddress)
  using: _14@Mir(bb5[0])
  _12 = Eq(move _13, const 0_usize)
  using: _13@Mir(bb5[1])
  assume(move _12)
  using: _12@Mir(bb5[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb26
  using: 
bb6:
  _17 = _8
  using: _8@Mir(bb2[1])
  _16 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _17) -> bb7
  using: _17@Mir(bb6[0])
bb7:
  _15 = Not(move _16)
  using: _16@Mir(bb6[1])
  switchInt(move _15) -> [0: bb12, otherwise: bb8]
  using: _15@Mir(bb7[0])
bb8:
  _21 = _2
  using: _2@Mir(bb0[0])
  _20 = move _21 as u64 (IntToInt)
  using: _21@Mir(bb8[0])
  _25 = _8
  using: _8@Mir(bb2[1])
  _24 = move _25 as *const i8 (Pointer(MutToConstPointer))
  using: _25@Mir(bb8[2])
  _23 = strlen(move _24) -> bb9
  using: _24@Mir(bb8[3])
bb9:
  _26 = const 1_u64
  using: 
  _22 = core::num::<impl u64>::wrapping_add(move _23, move _26) -> bb10
  using: _23@Mir(bb8[4]), _26@Mir(bb9[0])
bb10:
  _19 = core::num::<impl u64>::wrapping_add(move _20, move _22) -> bb11
  using: _20@Mir(bb8[1]), _22@Mir(bb9[1])
bb11:
  _18 = move _19 as i32 (IntToInt)
  using: _19@Mir(bb10[0])
  _2 = move _18
  using: _18@Mir(bb11[0])
  goto -> bb13
  using: 
bb12:
  _29 = _8
  using: _8@Mir(bb2[1])
  _28 = move _29 as usize (PointerExposeAddress)
  using: _29@Mir(bb12[0])
  _27 = Eq(move _28, const 0_usize)
  using: _28@Mir(bb12[1])
  assume(move _27)
  using: _27@Mir(bb12[2])
  goto -> bb13
  using: 
bb13:
  _32 = _8
  using: _8@Phi(bb13)
  _31 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _32) -> bb14
  using: _32@Mir(bb13[0])
bb14:
  _30 = Not(move _31)
  using: _31@Mir(bb13[1])
  switchInt(move _30) -> [0: bb16, otherwise: bb15]
  using: _30@Mir(bb14[0])
bb15:
  _35 = _8
  using: _8@Phi(bb13)
  _34 = move _35 as *mut std::ffi::c_void (PtrToPtr)
  using: _35@Mir(bb15[0])
  _33 = free(move _34) -> bb17
  using: _34@Mir(bb15[1])
bb16:
  _38 = _8
  using: _8@Phi(bb13)
  _37 = move _38 as usize (PointerExposeAddress)
  using: _38@Mir(bb16[0])
  _36 = Eq(move _37, const 0_usize)
  using: _37@Mir(bb16[1])
  assume(move _36)
  using: _36@Mir(bb16[2])
  goto -> bb17
  using: 
bb17:
  _42 = _3
  using: _3@Mir(bb0[2])
  _41 = move _42 as *const i8 (Pointer(MutToConstPointer))
  using: _42@Mir(bb17[0])
  _40 = strlen(move _41) -> bb18
  using: _41@Mir(bb17[1])
bb18:
  _39 = move _40 as i32 (IntToInt)
  using: _40@Mir(bb17[2])
  _43 = CheckedAdd(_2, _39)
  using: _2@Phi(bb13), _39@Mir(bb18[0])
  assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _39) -> bb19
  using: _43@Entry, _2@Entry, _39@Entry
bb19:
  _2 = move (_43.0: i32)
  using: _43@Mir(bb18[1])
  _46 = _3
  using: _3@Mir(bb0[2])
  _45 = move _46 as *mut std::ffi::c_void (PtrToPtr)
  using: _46@Mir(bb19[1])
  _44 = free(move _45) -> bb20
  using: _45@Mir(bb19[2])
bb20:
  _50 = _5
  using: _5@Mir(bb1[2])
  _49 = url_is_ssh(move _50) -> bb21
  using: _50@Mir(bb20[0])
bb21:
  _48 = move _49 as i32 (IntToInt)
  using: _49@Mir(bb20[1])
  switchInt(move _48) -> [0: bb23, otherwise: bb22]
  using: _48@Mir(bb21[0])
bb22:
  _51 = _1
  using: _1@Entry
  _55 = const b"%[^:]\x00"
  using: 
  _54 = &raw const (*_55)
  using: _55@Mir(bb22[1])
  _53 = move _54 as *const u8 (Pointer(ArrayToPointer))
  using: _54@Mir(bb22[2])
  _52 = move _53 as *const i8 (PtrToPtr)
  using: _53@Mir(bb22[3])
  _56 = _2
  using: _2@Mir(bb19[0])
  _47 = get_part(move _51, move _52, move _56) -> bb24
  using: _51@Mir(bb22[0]), _52@Mir(bb22[4]), _56@Mir(bb22[5])
bb23:
  _57 = _1
  using: _1@Entry
  _61 = const b"%[^/]\x00"
  using: 
  _60 = &raw const (*_61)
  using: _61@Mir(bb23[1])
  _59 = move _60 as *const u8 (Pointer(ArrayToPointer))
  using: _60@Mir(bb23[2])
  _58 = move _59 as *const i8 (PtrToPtr)
  using: _59@Mir(bb23[3])
  _62 = _2
  using: _2@Mir(bb19[0])
  _47 = get_part(move _57, move _58, move _62) -> bb24
  using: _57@Mir(bb23[0]), _58@Mir(bb23[4]), _62@Mir(bb23[5])
bb24:
  _65 = _5
  using: _5@Mir(bb1[2])
  _64 = move _65 as *mut std::ffi::c_void (PtrToPtr)
  using: _65@Mir(bb24[0])
  _63 = free(move _64) -> bb25
  using: _64@Mir(bb24[1])
bb25:
  _0 = _47
  using: _47@Phi(bb24)
  goto -> bb26
  using: 
bb26:
  return
  using: _0@Phi(bb26)
rewrite call strlen @ workspace/urlparser/test.rs:501:54: 501:66 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/urlparser/test.rs:501:67: 504:98 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/urlparser/test.rs:501:41: 504:99 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:508:10: 508:26 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:29 ~ test[be05]::url_get_host)
bb0:
  _5 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = malloc(move _4) -> bb2
  using: _4@Mir(bb1[0])
bb2:
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb1[1])
  _7 = _1
  using: _1@Entry
  _6 = url_get_hostname(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  _10 = _2
  using: _2@Mir(bb2[0])
  _9 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _10) -> bb7
  using: _10@Mir(bb3[0])
bb4:
  _8 = const true
  using: 
  goto -> bb6
  using: 
bb5:
  _12 = _6
  using: _6@Mir(bb2[2])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb8
  using: _12@Mir(bb5[0])
bb6:
  switchInt(move _8) -> [0: bb10, otherwise: bb9]
  using: _8@Phi(bb6)
bb7:
  switchInt(move _9) -> [0: bb5, otherwise: bb4]
  using: _9@Mir(bb3[1])
bb8:
  _8 = move _11
  using: _11@Mir(bb5[1])
  goto -> bb6
  using: 
bb9:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb13
  using: 
bb10:
  _15 = _6
  using: _6@Phi(bb6)
  _14 = move _15 as *const i8 (Pointer(MutToConstPointer))
  using: _15@Mir(bb10[0])
  _19 = const b"%[^:]\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb10[2])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb10[3])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb10[4])
  _20 = _2
  using: _2@Mir(bb2[0])
  _13 = sscanf(move _14, move _16, move _20) -> bb11
  using: _14@Mir(bb10[1]), _16@Mir(bb10[5]), _20@Mir(bb10[6])
bb11:
  _23 = _6
  using: _6@Phi(bb6)
  _22 = move _23 as *mut std::ffi::c_void (PtrToPtr)
  using: _23@Mir(bb11[0])
  _21 = free(move _22) -> bb12
  using: _22@Mir(bb11[1])
bb12:
  _0 = _2
  using: _2@Mir(bb2[0])
  goto -> bb13
  using: 
bb13:
  return
  using: _0@Phi(bb13)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:523:16: 523:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:523:9: 523:87 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:527:5: 527:85 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:30 ~ test[be05]::url_get_pathname)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = url_get_path(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _7 = std::mem::size_of::<i8>() -> bb2
  using: 
bb2:
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb1[0])
  _5 = malloc(move _6) -> bb3
  using: _6@Mir(bb2[0])
bb3:
  _4 = move _5 as *mut i8 (PtrToPtr)
  using: _5@Mir(bb2[1])
  _10 = _2
  using: _2@Mir(bb0[1])
  _9 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _10) -> bb7
  using: _10@Mir(bb3[1])
bb4:
  _8 = const true
  using: 
  goto -> bb6
  using: 
bb5:
  _12 = _4
  using: _4@Mir(bb3[0])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb8
  using: _12@Mir(bb5[0])
bb6:
  switchInt(move _8) -> [0: bb10, otherwise: bb9]
  using: _8@Phi(bb6)
bb7:
  switchInt(move _9) -> [0: bb5, otherwise: bb4]
  using: _9@Mir(bb3[2])
bb8:
  _8 = move _11
  using: _11@Mir(bb5[1])
  goto -> bb6
  using: 
bb9:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb14
  using: 
bb10:
  _14 = _4
  using: _4@Phi(bb6)
  _18 = const b"\x00"
  using: 
  _17 = &raw const (*_18)
  using: _18@Mir(bb10[1])
  _16 = move _17 as *const u8 (Pointer(ArrayToPointer))
  using: _17@Mir(bb10[2])
  _15 = move _16 as *const i8 (PtrToPtr)
  using: _16@Mir(bb10[3])
  _13 = strcat(move _14, move _15) -> bb11
  using: _14@Mir(bb10[0]), _15@Mir(bb10[4])
bb11:
  _21 = _2
  using: _2@Mir(bb0[1])
  _20 = move _21 as *const i8 (Pointer(MutToConstPointer))
  using: _21@Mir(bb11[0])
  _25 = const b"%[^?]\x00"
  using: 
  _24 = &raw const (*_25)
  using: _25@Mir(bb11[2])
  _23 = move _24 as *const u8 (Pointer(ArrayToPointer))
  using: _24@Mir(bb11[3])
  _22 = move _23 as *const i8 (PtrToPtr)
  using: _23@Mir(bb11[4])
  _26 = _4
  using: _4@Phi(bb6)
  _19 = sscanf(move _20, move _22, move _26) -> bb12
  using: _20@Mir(bb11[1]), _22@Mir(bb11[5]), _26@Mir(bb11[6])
bb12:
  _29 = _2
  using: _2@Mir(bb0[1])
  _28 = move _29 as *mut std::ffi::c_void (PtrToPtr)
  using: _29@Mir(bb12[0])
  _27 = free(move _28) -> bb13
  using: _28@Mir(bb12[1])
bb13:
  _0 = _4
  using: _4@Phi(bb6)
  goto -> bb14
  using: 
bb14:
  return
  using: _0@Phi(bb14)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:536:16: 536:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:536:9: 536:87 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:539:5: 539:74 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:540:5: 540:85 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:31 ~ test[be05]::url_get_path)
bb0:
  _2 = const 3_i32
  using: 
  _3 = const {0x0 as *mut i8}
  using: 
  _5 = _1
  using: _1@Entry
  _4 = url_get_protocol(move _5) -> bb1
  using: _5@Mir(bb0[2])
bb1:
  _7 = _1
  using: _1@Entry
  _6 = url_get_auth(move _7) -> bb2
  using: _7@Mir(bb1[0])
bb2:
  _9 = _1
  using: _1@Entry
  _8 = url_get_hostname(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  _12 = _4
  using: _4@Mir(bb0[3])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb7
  using: _12@Mir(bb3[0])
bb4:
  _10 = const true
  using: 
  goto -> bb6
  using: 
bb5:
  _14 = _8
  using: _8@Mir(bb2[1])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb8
  using: _14@Mir(bb5[0])
bb6:
  switchInt(move _10) -> [0: bb10, otherwise: bb9]
  using: _10@Phi(bb6)
bb7:
  switchInt(move _11) -> [0: bb5, otherwise: bb4]
  using: _11@Mir(bb3[1])
bb8:
  _10 = move _13
  using: _13@Mir(bb5[1])
  goto -> bb6
  using: 
bb9:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb41
  using: 
bb10:
  _16 = _4
  using: _4@Mir(bb0[3])
  _15 = url_is_ssh(move _16) -> bb11
  using: _16@Mir(bb10[0])
bb11:
  _21 = _4
  using: _4@Mir(bb0[3])
  _20 = move _21 as *const i8 (Pointer(MutToConstPointer))
  using: _21@Mir(bb11[0])
  _19 = strlen(move _20) -> bb12
  using: _20@Mir(bb11[1])
bb12:
  _18 = move _19 as i32 (IntToInt)
  using: _19@Mir(bb11[2])
  _25 = _8
  using: _8@Phi(bb6)
  _24 = move _25 as *const i8 (Pointer(MutToConstPointer))
  using: _25@Mir(bb12[1])
  _23 = strlen(move _24) -> bb13
  using: _24@Mir(bb12[2])
bb13:
  _22 = move _23 as i32 (IntToInt)
  using: _23@Mir(bb12[3])
  _26 = CheckedAdd(_18, _22)
  using: _18@Mir(bb12[0]), _22@Mir(bb13[0])
  assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, move _22) -> bb14
  using: _26@Entry, _18@Entry, _22@Entry
bb14:
  _17 = move (_26.0: i32)
  using: _26@Mir(bb13[1])
  _27 = CheckedAdd(_2, _17)
  using: _2@Mir(bb0[0]), _17@Mir(bb14[0])
  assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _17) -> bb15
  using: _27@Entry, _2@Entry, _17@Entry
bb15:
  _2 = move (_27.0: i32)
  using: _27@Mir(bb14[1])
  _30 = _6
  using: _6@Mir(bb1[1])
  _29 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _30) -> bb16
  using: _30@Mir(bb15[1])
bb16:
  _28 = Not(move _29)
  using: _29@Mir(bb15[2])
  switchInt(move _28) -> [0: bb21, otherwise: bb17]
  using: _28@Mir(bb16[0])
bb17:
  _35 = _6
  using: _6@Mir(bb1[1])
  _34 = move _35 as *const i8 (Pointer(MutToConstPointer))
  using: _35@Mir(bb17[0])
  _33 = strlen(move _34) -> bb18
  using: _34@Mir(bb17[1])
bb18:
  _32 = move _33 as i32 (IntToInt)
  using: _33@Mir(bb17[2])
  _36 = const 1_i32
  using: 
  _37 = CheckedAdd(_32, _36)
  using: _32@Mir(bb18[0]), _36@Mir(bb18[1])
  assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", move _32, move _36) -> bb19
  using: _37@Entry, _32@Entry, _36@Entry
bb19:
  _31 = move (_37.0: i32)
  using: _37@Mir(bb18[2])
  _38 = CheckedAdd(_2, _31)
  using: _2@Mir(bb15[0]), _31@Mir(bb19[0])
  assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _31) -> bb20
  using: _38@Entry, _2@Entry, _31@Entry
bb20:
  _2 = move (_38.0: i32)
  using: _38@Mir(bb19[1])
  goto -> bb22
  using: 
bb21:
  _41 = _6
  using: _6@Mir(bb1[1])
  _40 = move _41 as usize (PointerExposeAddress)
  using: _41@Mir(bb21[0])
  _39 = Eq(move _40, const 0_usize)
  using: _40@Mir(bb21[1])
  assume(move _39)
  using: _39@Mir(bb21[2])
  goto -> bb22
  using: 
bb22:
  _44 = _15
  using: _15@Mir(bb10[1])
  _43 = move _44 as i32 (IntToInt)
  using: _44@Mir(bb22[0])
  switchInt(move _43) -> [0: bb24, otherwise: bb23]
  using: _43@Mir(bb22[1])
bb23:
  _45 = _1
  using: _1@Entry
  _49 = const b":%s\x00"
  using: 
  _48 = &raw const (*_49)
  using: _49@Mir(bb23[1])
  _47 = move _48 as *const u8 (Pointer(ArrayToPointer))
  using: _48@Mir(bb23[2])
  _46 = move _47 as *const i8 (PtrToPtr)
  using: _47@Mir(bb23[3])
  _50 = _2
  using: _2@Phi(bb22)
  _42 = get_part(move _45, move _46, move _50) -> bb25
  using: _45@Mir(bb23[0]), _46@Mir(bb23[4]), _50@Mir(bb23[5])
bb24:
  _51 = _1
  using: _1@Entry
  _55 = const b"/%s\x00"
  using: 
  _54 = &raw const (*_55)
  using: _55@Mir(bb24[1])
  _53 = move _54 as *const u8 (Pointer(ArrayToPointer))
  using: _54@Mir(bb24[2])
  _52 = move _53 as *const i8 (PtrToPtr)
  using: _53@Mir(bb24[3])
  _56 = _2
  using: _2@Phi(bb22)
  _42 = get_part(move _51, move _52, move _56) -> bb25
  using: _51@Mir(bb24[0]), _52@Mir(bb24[4]), _56@Mir(bb24[5])
bb25:
  _3 = move _42
  using: _42@Phi(bb25)
  _60 = _15
  using: _15@Mir(bb10[1])
  _59 = move _60 as i32 (IntToInt)
  using: _60@Mir(bb25[1])
  switchInt(move _59) -> [0: bb27, otherwise: bb26]
  using: _59@Mir(bb25[2])
bb26:
  _63 = const b"%s\x00"
  using: 
  _62 = &raw const (*_63)
  using: _63@Mir(bb26[0])
  _61 = move _62 as *const u8 (Pointer(ArrayToPointer))
  using: _62@Mir(bb26[1])
  _58 = move _61 as *const i8 (PtrToPtr)
  using: _61@Mir(bb26[2])
  goto -> bb28
  using: 
bb27:
  _66 = const b"/%s\x00"
  using: 
  _65 = &raw const (*_66)
  using: _66@Mir(bb27[0])
  _64 = move _65 as *const u8 (Pointer(ArrayToPointer))
  using: _65@Mir(bb27[1])
  _58 = move _64 as *const i8 (PtrToPtr)
  using: _64@Mir(bb27[2])
  goto -> bb28
  using: 
bb28:
  _57 = move _58 as *mut i8 (PtrToPtr)
  using: _58@Phi(bb28)
  _72 = _3
  using: _3@Mir(bb25[0])
  _71 = move _72 as *const i8 (Pointer(MutToConstPointer))
  using: _72@Mir(bb28[1])
  _70 = strlen(move _71) -> bb29
  using: _71@Mir(bb28[2])
bb29:
  _74 = std::mem::size_of::<i8>() -> bb30
  using: 
bb30:
  _73 = move _74 as u64 (IntToInt)
  using: _74@Mir(bb29[0])
  _69 = core::num::<impl u64>::wrapping_mul(move _70, move _73) -> bb31
  using: _70@Mir(bb28[3]), _73@Mir(bb30[0])
bb31:
  _68 = malloc(move _69) -> bb32
  using: _69@Mir(bb30[1])
bb32:
  _67 = move _68 as *mut i8 (PtrToPtr)
  using: _68@Mir(bb31[0])
  _76 = _67
  using: _67@Mir(bb32[0])
  _78 = _57
  using: _57@Mir(bb28[0])
  _77 = move _78 as *const i8 (Pointer(MutToConstPointer))
  using: _78@Mir(bb32[2])
  _79 = _3
  using: _3@Mir(bb25[0])
  _75 = sprintf(move _76, move _77, move _79) -> bb33
  using: _76@Mir(bb32[1]), _77@Mir(bb32[3]), _79@Mir(bb32[4])
bb33:
  _82 = _6
  using: _6@Phi(bb22)
  _81 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _82) -> bb34
  using: _82@Mir(bb33[0])
bb34:
  _80 = Not(move _81)
  using: _81@Mir(bb33[1])
  switchInt(move _80) -> [0: bb36, otherwise: bb35]
  using: _80@Mir(bb34[0])
bb35:
  _85 = _6
  using: _6@Phi(bb22)
  _84 = move _85 as *mut std::ffi::c_void (PtrToPtr)
  using: _85@Mir(bb35[0])
  _83 = free(move _84) -> bb37
  using: _84@Mir(bb35[1])
bb36:
  _88 = _6
  using: _6@Phi(bb22)
  _87 = move _88 as usize (PointerExposeAddress)
  using: _88@Mir(bb36[0])
  _86 = Eq(move _87, const 0_usize)
  using: _87@Mir(bb36[1])
  assume(move _86)
  using: _86@Mir(bb36[2])
  goto -> bb37
  using: 
bb37:
  _91 = _4
  using: _4@Mir(bb0[3])
  _90 = move _91 as *mut std::ffi::c_void (PtrToPtr)
  using: _91@Mir(bb37[0])
  _89 = free(move _90) -> bb38
  using: _90@Mir(bb37[1])
bb38:
  _94 = _8
  using: _8@Phi(bb6)
  _93 = move _94 as *mut std::ffi::c_void (PtrToPtr)
  using: _94@Mir(bb38[0])
  _92 = free(move _93) -> bb39
  using: _93@Mir(bb38[1])
bb39:
  _97 = _3
  using: _3@Mir(bb25[0])
  _96 = move _97 as *mut std::ffi::c_void (PtrToPtr)
  using: _97@Mir(bb39[0])
  _95 = free(move _96) -> bb40
  using: _96@Mir(bb39[1])
bb40:
  _0 = _67
  using: _67@Mir(bb32[0])
  goto -> bb41
  using: 
bb41:
  return
  using: _0@Phi(bb41)
rewrite call strlen @ workspace/urlparser/test.rs:556:10: 556:26 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:556:52: 556:68 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:557:31: 557:43 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:570:16: 570:32 (#0) by default
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:570:46: 570:91 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/urlparser/test.rs:570:33: 571:75 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:570:9: 571:76 (#0) by default
rewrite call sprintf @ workspace/urlparser/test.rs:573:5: 573:33 (#0) by default
@DefId(0:32 ~ test[be05]::url_get_search)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = url_get_path(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _5 = _1
  using: _1@Entry
  _4 = url_get_pathname(move _5) -> bb2
  using: _5@Mir(bb1[0])
bb2:
  _9 = std::mem::size_of::<i8>() -> bb3
  using: 
bb3:
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb2[0])
  _7 = malloc(move _8) -> bb4
  using: _8@Mir(bb3[0])
bb4:
  _6 = move _7 as *mut i8 (PtrToPtr)
  using: _7@Mir(bb3[1])
  _12 = _2
  using: _2@Mir(bb0[1])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb8
  using: _12@Mir(bb4[1])
bb5:
  _10 = const true
  using: 
  goto -> bb7
  using: 
bb6:
  _14 = _6
  using: _6@Mir(bb4[0])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb9
  using: _14@Mir(bb6[0])
bb7:
  switchInt(move _10) -> [0: bb11, otherwise: bb10]
  using: _10@Phi(bb7)
bb8:
  switchInt(move _11) -> [0: bb6, otherwise: bb5]
  using: _11@Mir(bb4[2])
bb9:
  _10 = move _13
  using: _13@Mir(bb6[1])
  goto -> bb7
  using: 
bb10:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb20
  using: 
bb11:
  _16 = _2
  using: _2@Mir(bb0[1])
  _20 = _4
  using: _4@Mir(bb1[1])
  _19 = move _20 as *const i8 (Pointer(MutToConstPointer))
  using: _20@Mir(bb11[1])
  _18 = strlen(move _19) -> bb12
  using: _19@Mir(bb11[2])
bb12:
  _17 = move _18 as i32 (IntToInt)
  using: _18@Mir(bb11[3])
  _15 = strff(move _16, move _17) -> bb13
  using: _16@Mir(bb11[0]), _17@Mir(bb12[0])
bb13:
  _22 = _6
  using: _6@Phi(bb7)
  _26 = const b"\x00"
  using: 
  _25 = &raw const (*_26)
  using: _26@Mir(bb13[1])
  _24 = move _25 as *const u8 (Pointer(ArrayToPointer))
  using: _25@Mir(bb13[2])
  _23 = move _24 as *const i8 (PtrToPtr)
  using: _24@Mir(bb13[3])
  _21 = strcat(move _22, move _23) -> bb14
  using: _22@Mir(bb13[0]), _23@Mir(bb13[4])
bb14:
  _29 = _15
  using: _15@Mir(bb12[1])
  _28 = move _29 as *const i8 (Pointer(MutToConstPointer))
  using: _29@Mir(bb14[0])
  _33 = const b"%[^#]\x00"
  using: 
  _32 = &raw const (*_33)
  using: _33@Mir(bb14[2])
  _31 = move _32 as *const u8 (Pointer(ArrayToPointer))
  using: _32@Mir(bb14[3])
  _30 = move _31 as *const i8 (PtrToPtr)
  using: _31@Mir(bb14[4])
  _34 = _6
  using: _6@Phi(bb7)
  _27 = sscanf(move _28, move _30, move _34) -> bb15
  using: _28@Mir(bb14[1]), _30@Mir(bb14[5]), _34@Mir(bb14[6])
bb15:
  _36 = _15
  using: _15@Mir(bb12[1])
  _40 = _4
  using: _4@Mir(bb1[1])
  _39 = move _40 as *const i8 (Pointer(MutToConstPointer))
  using: _40@Mir(bb15[1])
  _38 = strlen(move _39) -> bb16
  using: _39@Mir(bb15[2])
bb16:
  _37 = move _38 as i32 (IntToInt)
  using: _38@Mir(bb15[3])
  _35 = strrwd(move _36, move _37) -> bb17
  using: _36@Mir(bb15[0]), _37@Mir(bb16[0])
bb17:
  _15 = move _35
  using: _35@Mir(bb16[1])
  _43 = _2
  using: _2@Mir(bb0[1])
  _42 = move _43 as *mut std::ffi::c_void (PtrToPtr)
  using: _43@Mir(bb17[1])
  _41 = free(move _42) -> bb18
  using: _42@Mir(bb17[2])
bb18:
  _46 = _4
  using: _4@Mir(bb1[1])
  _45 = move _46 as *mut std::ffi::c_void (PtrToPtr)
  using: _46@Mir(bb18[0])
  _44 = free(move _45) -> bb19
  using: _45@Mir(bb18[1])
bb19:
  _0 = _6
  using: _6@Phi(bb7)
  goto -> bb20
  using: 
bb20:
  return
  using: _0@Phi(bb20)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:586:16: 586:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:586:9: 586:87 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:590:21: 590:37 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:591:5: 591:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:592:5: 593:19 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strlen @ workspace/urlparser/test.rs:594:33: 594:49 (#0) by default
@DefId(0:33 ~ test[be05]::url_get_query)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = url_get_search(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  _7 = std::mem::size_of::<i8>() -> bb2
  using: 
bb2:
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb1[0])
  _5 = malloc(move _6) -> bb3
  using: _6@Mir(bb2[0])
bb3:
  _4 = move _5 as *mut i8 (PtrToPtr)
  using: _5@Mir(bb2[1])
  _9 = _2
  using: _2@Mir(bb0[1])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb4
  using: _9@Mir(bb3[1])
bb4:
  switchInt(move _8) -> [0: bb6, otherwise: bb5]
  using: _8@Mir(bb3[2])
bb5:
  _12 = _2
  using: _2@Mir(bb0[1])
  _11 = move _12 as usize (PointerExposeAddress)
  using: _12@Mir(bb5[0])
  _10 = Eq(move _11, const 0_usize)
  using: _11@Mir(bb5[1])
  assume(move _10)
  using: _10@Mir(bb5[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb9
  using: 
bb6:
  _15 = _2
  using: _2@Mir(bb0[1])
  _14 = move _15 as *const i8 (Pointer(MutToConstPointer))
  using: _15@Mir(bb6[0])
  _19 = const b"?%s\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb6[2])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb6[3])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb6[4])
  _20 = _4
  using: _4@Mir(bb3[0])
  _13 = sscanf(move _14, move _16, move _20) -> bb7
  using: _14@Mir(bb6[1]), _16@Mir(bb6[5]), _20@Mir(bb6[6])
bb7:
  _23 = _2
  using: _2@Mir(bb0[1])
  _22 = move _23 as *mut std::ffi::c_void (PtrToPtr)
  using: _23@Mir(bb7[0])
  _21 = free(move _22) -> bb8
  using: _22@Mir(bb7[1])
bb8:
  _0 = _4
  using: _4@Mir(bb3[0])
  goto -> bb9
  using: 
bb9:
  return
  using: _0@Phi(bb9)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:604:16: 604:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:604:9: 604:87 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:607:5: 607:82 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:34 ~ test[be05]::url_get_hash)
bb0:
  _5 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = malloc(move _4) -> bb2
  using: _4@Mir(bb1[0])
bb2:
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb1[1])
  _7 = _2
  using: _2@Mir(bb2[0])
  _6 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  switchInt(move _6) -> [0: bb5, otherwise: bb4]
  using: _6@Mir(bb2[2])
bb4:
  _10 = _2
  using: _2@Mir(bb2[0])
  _9 = move _10 as usize (PointerExposeAddress)
  using: _10@Mir(bb4[0])
  _8 = Eq(move _9, const 0_usize)
  using: _9@Mir(bb4[1])
  assume(move _8)
  using: _8@Mir(bb4[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb30
  using: 
bb5:
  _12 = _1
  using: _1@Entry
  _11 = url_get_path(move _12) -> bb6
  using: _12@Mir(bb5[0])
bb6:
  _14 = _11
  using: _11@Mir(bb5[1])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb7
  using: _14@Mir(bb6[0])
bb7:
  switchInt(move _13) -> [0: bb9, otherwise: bb8]
  using: _13@Mir(bb6[1])
bb8:
  _17 = _11
  using: _11@Mir(bb5[1])
  _16 = move _17 as usize (PointerExposeAddress)
  using: _17@Mir(bb8[0])
  _15 = Eq(move _16, const 0_usize)
  using: _16@Mir(bb8[1])
  assume(move _15)
  using: _15@Mir(bb8[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb30
  using: 
bb9:
  _19 = _1
  using: _1@Entry
  _18 = url_get_pathname(move _19) -> bb10
  using: _19@Mir(bb9[0])
bb10:
  _21 = _18
  using: _18@Mir(bb9[1])
  _20 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _21) -> bb11
  using: _21@Mir(bb10[0])
bb11:
  switchInt(move _20) -> [0: bb13, otherwise: bb12]
  using: _20@Mir(bb10[1])
bb12:
  _24 = _18
  using: _18@Mir(bb9[1])
  _23 = move _24 as usize (PointerExposeAddress)
  using: _24@Mir(bb12[0])
  _22 = Eq(move _23, const 0_usize)
  using: _23@Mir(bb12[1])
  assume(move _22)
  using: _22@Mir(bb12[2])
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb30
  using: 
bb13:
  _26 = _1
  using: _1@Entry
  _25 = url_get_search(move _26) -> bb14
  using: _26@Mir(bb13[0])
bb14:
  _30 = _18
  using: _18@Mir(bb9[1])
  _29 = move _30 as *const i8 (Pointer(MutToConstPointer))
  using: _30@Mir(bb14[0])
  _28 = strlen(move _29) -> bb15
  using: _29@Mir(bb14[1])
bb15:
  _27 = move _28 as i32 (IntToInt)
  using: _28@Mir(bb14[2])
  _34 = _25
  using: _25@Mir(bb13[1])
  _33 = move _34 as *const i8 (Pointer(MutToConstPointer))
  using: _34@Mir(bb15[1])
  _32 = strlen(move _33) -> bb16
  using: _33@Mir(bb15[2])
bb16:
  _31 = move _32 as i32 (IntToInt)
  using: _32@Mir(bb15[3])
  _36 = _11
  using: _11@Mir(bb5[1])
  _38 = _27
  using: _27@Mir(bb15[0])
  _39 = _31
  using: _31@Mir(bb16[0])
  _40 = CheckedAdd(_38, _39)
  using: _38@Mir(bb16[2]), _39@Mir(bb16[3])
  assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _39) -> bb17
  using: _40@Entry, _38@Entry, _39@Entry
bb17:
  _37 = move (_40.0: i32)
  using: _40@Mir(bb16[4])
  _35 = strff(move _36, move _37) -> bb18
  using: _36@Mir(bb16[1]), _37@Mir(bb17[0])
bb18:
  _42 = _2
  using: _2@Mir(bb2[0])
  _46 = const b"\x00"
  using: 
  _45 = &raw const (*_46)
  using: _46@Mir(bb18[1])
  _44 = move _45 as *const u8 (Pointer(ArrayToPointer))
  using: _45@Mir(bb18[2])
  _43 = move _44 as *const i8 (PtrToPtr)
  using: _44@Mir(bb18[3])
  _41 = strcat(move _42, move _43) -> bb19
  using: _42@Mir(bb18[0]), _43@Mir(bb18[4])
bb19:
  _49 = _35
  using: _35@Mir(bb17[1])
  _48 = move _49 as *const i8 (Pointer(MutToConstPointer))
  using: _49@Mir(bb19[0])
  _53 = const b"%s\x00"
  using: 
  _52 = &raw const (*_53)
  using: _53@Mir(bb19[2])
  _51 = move _52 as *const u8 (Pointer(ArrayToPointer))
  using: _52@Mir(bb19[3])
  _50 = move _51 as *const i8 (PtrToPtr)
  using: _51@Mir(bb19[4])
  _54 = _2
  using: _2@Mir(bb2[0])
  _47 = sscanf(move _48, move _50, move _54) -> bb20
  using: _48@Mir(bb19[1]), _50@Mir(bb19[5]), _54@Mir(bb19[6])
bb20:
  _56 = _35
  using: _35@Mir(bb17[1])
  _58 = _27
  using: _27@Mir(bb15[0])
  _59 = _31
  using: _31@Mir(bb16[0])
  _60 = CheckedAdd(_58, _59)
  using: _58@Mir(bb20[1]), _59@Mir(bb20[2])
  assert(!move (_60.1: bool), "attempt to compute `{} + {}`, which would overflow", move _58, move _59) -> bb21
  using: _60@Entry, _58@Entry, _59@Entry
bb21:
  _57 = move (_60.0: i32)
  using: _60@Mir(bb20[3])
  _55 = strrwd(move _56, move _57) -> bb22
  using: _56@Mir(bb20[0]), _57@Mir(bb21[0])
bb22:
  _35 = move _55
  using: _55@Mir(bb21[1])
  _63 = _35
  using: _35@Mir(bb22[0])
  _62 = move _63 as *mut std::ffi::c_void (PtrToPtr)
  using: _63@Mir(bb22[1])
  _61 = free(move _62) -> bb23
  using: _62@Mir(bb22[2])
bb23:
  _66 = _18
  using: _18@Mir(bb9[1])
  _65 = move _66 as *mut std::ffi::c_void (PtrToPtr)
  using: _66@Mir(bb23[0])
  _64 = free(move _65) -> bb24
  using: _65@Mir(bb23[1])
bb24:
  _69 = _11
  using: _11@Mir(bb5[1])
  _68 = move _69 as *mut std::ffi::c_void (PtrToPtr)
  using: _69@Mir(bb24[0])
  _67 = free(move _68) -> bb25
  using: _68@Mir(bb24[1])
bb25:
  _72 = _25
  using: _25@Mir(bb13[1])
  _71 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _72) -> bb26
  using: _72@Mir(bb25[0])
bb26:
  _70 = Not(move _71)
  using: _71@Mir(bb25[1])
  switchInt(move _70) -> [0: bb28, otherwise: bb27]
  using: _70@Mir(bb26[0])
bb27:
  _75 = _25
  using: _25@Mir(bb13[1])
  _74 = move _75 as *mut std::ffi::c_void (PtrToPtr)
  using: _75@Mir(bb27[0])
  _73 = free(move _74) -> bb29
  using: _74@Mir(bb27[1])
bb28:
  _78 = _25
  using: _25@Mir(bb13[1])
  _77 = move _78 as usize (PointerExposeAddress)
  using: _78@Mir(bb28[0])
  _76 = Eq(move _77, const 0_usize)
  using: _77@Mir(bb28[1])
  assume(move _76)
  using: _76@Mir(bb28[2])
  goto -> bb29
  using: 
bb29:
  _0 = _2
  using: _2@Mir(bb2[0])
  goto -> bb30
  using: 
bb30:
  return
  using: _0@Phi(bb30)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:615:16: 615:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:615:9: 615:87 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:623:49: 623:65 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:624:47: 624:61 (#0) by default
rewrite call strcat @ workspace/urlparser/test.rs:627:5: 627:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call sscanf @ workspace/urlparser/test.rs:628:5: 628:82 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:35 ~ test[be05]::url_get_port)
bb0:
  _5 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = malloc(move _4) -> bb2
  using: _4@Mir(bb1[0])
bb2:
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb1[1])
  _7 = _1
  using: _1@Entry
  _6 = url_get_hostname(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  _9 = _1
  using: _1@Entry
  _8 = url_get_host(move _9) -> bb4
  using: _9@Mir(bb3[0])
bb4:
  _12 = _2
  using: _2@Mir(bb2[0])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _12) -> bb8
  using: _12@Mir(bb4[0])
bb5:
  _10 = const true
  using: 
  goto -> bb7
  using: 
bb6:
  _14 = _6
  using: _6@Mir(bb2[2])
  _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb9
  using: _14@Mir(bb6[0])
bb7:
  switchInt(move _10) -> [0: bb11, otherwise: bb10]
  using: _10@Phi(bb7)
bb8:
  switchInt(move _11) -> [0: bb6, otherwise: bb5]
  using: _11@Mir(bb4[1])
bb9:
  _10 = move _13
  using: _13@Mir(bb6[1])
  goto -> bb7
  using: 
bb10:
  _0 = const {0x0 as *mut i8}
  using: 
  goto -> bb18
  using: 
bb11:
  _16 = _6
  using: _6@Phi(bb7)
  _21 = _8
  using: _8@Mir(bb3[1])
  _20 = move _21 as *const i8 (Pointer(MutToConstPointer))
  using: _21@Mir(bb11[1])
  _19 = strlen(move _20) -> bb12
  using: _20@Mir(bb11[2])
bb12:
  _22 = const 1_u64
  using: 
  _18 = core::num::<impl u64>::wrapping_add(move _19, move _22) -> bb13
  using: _19@Mir(bb11[3]), _22@Mir(bb12[0])
bb13:
  _17 = move _18 as i32 (IntToInt)
  using: _18@Mir(bb12[1])
  _15 = strff(move _16, move _17) -> bb14
  using: _16@Mir(bb11[0]), _17@Mir(bb13[0])
bb14:
  _25 = _15
  using: _15@Mir(bb13[1])
  _24 = move _25 as *const i8 (Pointer(MutToConstPointer))
  using: _25@Mir(bb14[0])
  _29 = const b"%s\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb14[2])
  _27 = move _28 as *const u8 (Pointer(ArrayToPointer))
  using: _28@Mir(bb14[3])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb14[4])
  _30 = _2
  using: _2@Mir(bb2[0])
  _23 = sscanf(move _24, move _26, move _30) -> bb15
  using: _24@Mir(bb14[1]), _26@Mir(bb14[5]), _30@Mir(bb14[6])
bb15:
  _33 = _6
  using: _6@Phi(bb7)
  _32 = move _33 as *mut std::ffi::c_void (PtrToPtr)
  using: _33@Mir(bb15[0])
  _31 = free(move _32) -> bb16
  using: _32@Mir(bb15[1])
bb16:
  _36 = _15
  using: _15@Mir(bb13[1])
  _35 = move _36 as *mut std::ffi::c_void (PtrToPtr)
  using: _36@Mir(bb16[0])
  _34 = free(move _35) -> bb17
  using: _35@Mir(bb16[1])
bb17:
  _0 = _2
  using: _2@Mir(bb2[0])
  goto -> bb18
  using: 
bb18:
  return
  using: _0@Phi(bb18)
rewrite call std::mem::size_of @ workspace/urlparser/test.rs:640:16: 640:61 (#0) by default
rewrite call malloc @ workspace/urlparser/test.rs:640:9: 640:87 (#0) by default
rewrite call strlen @ workspace/urlparser/test.rs:647:15: 647:27 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/urlparser/test.rs:647:28: 647:91 (#0) by default
rewrite call sscanf @ workspace/urlparser/test.rs:649:5: 649:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:36 ~ test[be05]::url_free)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = std::ptr::mut_ptr::<impl *mut url_data>::is_null(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  switchInt(move _2) -> [0: bb3, otherwise: bb2]
  using: _2@Mir(bb0[1])
bb2:
  _6 = _1
  using: _1@Entry
  _5 = move _6 as usize (PointerExposeAddress)
  using: _6@Mir(bb2[0])
  _4 = Eq(move _5, const 0_usize)
  using: _5@Mir(bb2[1])
  assume(move _4)
  using: _4@Mir(bb2[2])
  goto -> bb39
  using: 
bb3:
  _9 = ((*_1).3: *mut i8)
  using: _1@Entry
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb4
  using: _9@Mir(bb3[0])
bb4:
  _7 = Not(move _8)
  using: _8@Mir(bb3[1])
  switchInt(move _7) -> [0: bb6, otherwise: bb5]
  using: _7@Mir(bb4[0])
bb5:
  _12 = ((*_1).3: *mut i8)
  using: _1@Entry
  _11 = move _12 as *mut std::ffi::c_void (PtrToPtr)
  using: _12@Mir(bb5[0])
  _10 = free(move _11) -> bb7
  using: _11@Mir(bb5[1])
bb6:
  _15 = ((*_1).3: *mut i8)
  using: _1@Entry
  _14 = move _15 as usize (PointerExposeAddress)
  using: _15@Mir(bb6[0])
  _13 = Eq(move _14, const 0_usize)
  using: _14@Mir(bb6[1])
  assume(move _13)
  using: _13@Mir(bb6[2])
  goto -> bb7
  using: 
bb7:
  _18 = ((*_1).1: *mut i8)
  using: _1@Phi(bb7)
  _17 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _18) -> bb8
  using: _18@Mir(bb7[0])
bb8:
  _16 = Not(move _17)
  using: _17@Mir(bb7[1])
  switchInt(move _16) -> [0: bb10, otherwise: bb9]
  using: _16@Mir(bb8[0])
bb9:
  _21 = ((*_1).1: *mut i8)
  using: _1@Phi(bb7)
  _20 = move _21 as *mut std::ffi::c_void (PtrToPtr)
  using: _21@Mir(bb9[0])
  _19 = free(move _20) -> bb11
  using: _20@Mir(bb9[1])
bb10:
  _24 = ((*_1).1: *mut i8)
  using: _1@Phi(bb7)
  _23 = move _24 as usize (PointerExposeAddress)
  using: _24@Mir(bb10[0])
  _22 = Eq(move _23, const 0_usize)
  using: _23@Mir(bb10[1])
  assume(move _22)
  using: _22@Mir(bb10[2])
  goto -> bb11
  using: 
bb11:
  _27 = ((*_1).4: *mut i8)
  using: _1@Phi(bb11)
  _26 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _27) -> bb12
  using: _27@Mir(bb11[0])
bb12:
  _25 = Not(move _26)
  using: _26@Mir(bb11[1])
  switchInt(move _25) -> [0: bb14, otherwise: bb13]
  using: _25@Mir(bb12[0])
bb13:
  _30 = ((*_1).4: *mut i8)
  using: _1@Phi(bb11)
  _29 = move _30 as *mut std::ffi::c_void (PtrToPtr)
  using: _30@Mir(bb13[0])
  _28 = free(move _29) -> bb15
  using: _29@Mir(bb13[1])
bb14:
  _33 = ((*_1).4: *mut i8)
  using: _1@Phi(bb11)
  _32 = move _33 as usize (PointerExposeAddress)
  using: _33@Mir(bb14[0])
  _31 = Eq(move _32, const 0_usize)
  using: _32@Mir(bb14[1])
  assume(move _31)
  using: _31@Mir(bb14[2])
  goto -> bb15
  using: 
bb15:
  _36 = ((*_1).2: *mut i8)
  using: _1@Phi(bb15)
  _35 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _36) -> bb16
  using: _36@Mir(bb15[0])
bb16:
  _34 = Not(move _35)
  using: _35@Mir(bb15[1])
  switchInt(move _34) -> [0: bb18, otherwise: bb17]
  using: _34@Mir(bb16[0])
bb17:
  _39 = ((*_1).2: *mut i8)
  using: _1@Phi(bb15)
  _38 = move _39 as *mut std::ffi::c_void (PtrToPtr)
  using: _39@Mir(bb17[0])
  _37 = free(move _38) -> bb19
  using: _38@Mir(bb17[1])
bb18:
  _42 = ((*_1).2: *mut i8)
  using: _1@Phi(bb15)
  _41 = move _42 as usize (PointerExposeAddress)
  using: _42@Mir(bb18[0])
  _40 = Eq(move _41, const 0_usize)
  using: _41@Mir(bb18[1])
  assume(move _40)
  using: _40@Mir(bb18[2])
  goto -> bb19
  using: 
bb19:
  _45 = ((*_1).5: *mut i8)
  using: _1@Phi(bb19)
  _44 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _45) -> bb20
  using: _45@Mir(bb19[0])
bb20:
  _43 = Not(move _44)
  using: _44@Mir(bb19[1])
  switchInt(move _43) -> [0: bb22, otherwise: bb21]
  using: _43@Mir(bb20[0])
bb21:
  _48 = ((*_1).5: *mut i8)
  using: _1@Phi(bb19)
  _47 = move _48 as *mut std::ffi::c_void (PtrToPtr)
  using: _48@Mir(bb21[0])
  _46 = free(move _47) -> bb23
  using: _47@Mir(bb21[1])
bb22:
  _51 = ((*_1).5: *mut i8)
  using: _1@Phi(bb19)
  _50 = move _51 as usize (PointerExposeAddress)
  using: _51@Mir(bb22[0])
  _49 = Eq(move _50, const 0_usize)
  using: _50@Mir(bb22[1])
  assume(move _49)
  using: _49@Mir(bb22[2])
  goto -> bb23
  using: 
bb23:
  _54 = ((*_1).7: *mut i8)
  using: _1@Phi(bb23)
  _53 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _54) -> bb24
  using: _54@Mir(bb23[0])
bb24:
  _52 = Not(move _53)
  using: _53@Mir(bb23[1])
  switchInt(move _52) -> [0: bb26, otherwise: bb25]
  using: _52@Mir(bb24[0])
bb25:
  _57 = ((*_1).7: *mut i8)
  using: _1@Phi(bb23)
  _56 = move _57 as *mut std::ffi::c_void (PtrToPtr)
  using: _57@Mir(bb25[0])
  _55 = free(move _56) -> bb27
  using: _56@Mir(bb25[1])
bb26:
  _60 = ((*_1).7: *mut i8)
  using: _1@Phi(bb23)
  _59 = move _60 as usize (PointerExposeAddress)
  using: _60@Mir(bb26[0])
  _58 = Eq(move _59, const 0_usize)
  using: _59@Mir(bb26[1])
  assume(move _58)
  using: _58@Mir(bb26[2])
  goto -> bb27
  using: 
bb27:
  _63 = ((*_1).8: *mut i8)
  using: _1@Phi(bb27)
  _62 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _63) -> bb28
  using: _63@Mir(bb27[0])
bb28:
  _61 = Not(move _62)
  using: _62@Mir(bb27[1])
  switchInt(move _61) -> [0: bb30, otherwise: bb29]
  using: _61@Mir(bb28[0])
bb29:
  _66 = ((*_1).8: *mut i8)
  using: _1@Phi(bb27)
  _65 = move _66 as *mut std::ffi::c_void (PtrToPtr)
  using: _66@Mir(bb29[0])
  _64 = free(move _65) -> bb31
  using: _65@Mir(bb29[1])
bb30:
  _69 = ((*_1).8: *mut i8)
  using: _1@Phi(bb27)
  _68 = move _69 as usize (PointerExposeAddress)
  using: _69@Mir(bb30[0])
  _67 = Eq(move _68, const 0_usize)
  using: _68@Mir(bb30[1])
  assume(move _67)
  using: _67@Mir(bb30[2])
  goto -> bb31
  using: 
bb31:
  _72 = ((*_1).6: *mut i8)
  using: _1@Phi(bb31)
  _71 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _72) -> bb32
  using: _72@Mir(bb31[0])
bb32:
  _70 = Not(move _71)
  using: _71@Mir(bb31[1])
  switchInt(move _70) -> [0: bb34, otherwise: bb33]
  using: _70@Mir(bb32[0])
bb33:
  _75 = ((*_1).6: *mut i8)
  using: _1@Phi(bb31)
  _74 = move _75 as *mut std::ffi::c_void (PtrToPtr)
  using: _75@Mir(bb33[0])
  _73 = free(move _74) -> bb35
  using: _74@Mir(bb33[1])
bb34:
  _78 = ((*_1).6: *mut i8)
  using: _1@Phi(bb31)
  _77 = move _78 as usize (PointerExposeAddress)
  using: _78@Mir(bb34[0])
  _76 = Eq(move _77, const 0_usize)
  using: _77@Mir(bb34[1])
  assume(move _76)
  using: _76@Mir(bb34[2])
  goto -> bb35
  using: 
bb35:
  _81 = ((*_1).9: *mut i8)
  using: _1@Phi(bb35)
  _80 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _81) -> bb36
  using: _81@Mir(bb35[0])
bb36:
  _79 = Not(move _80)
  using: _80@Mir(bb35[1])
  switchInt(move _79) -> [0: bb38, otherwise: bb37]
  using: _79@Mir(bb36[0])
bb37:
  _84 = ((*_1).9: *mut i8)
  using: _1@Phi(bb35)
  _83 = move _84 as *mut std::ffi::c_void (PtrToPtr)
  using: _84@Mir(bb37[0])
  _82 = free(move _83) -> bb39
  using: _83@Mir(bb37[1])
bb38:
  _87 = ((*_1).9: *mut i8)
  using: _1@Phi(bb35)
  _86 = move _87 as usize (PointerExposeAddress)
  using: _87@Mir(bb38[0])
  _85 = Eq(move _86, const 0_usize)
  using: _86@Mir(bb38[1])
  assume(move _85)
  using: _85@Mir(bb38[2])
  goto -> bb39
  using: 
bb39:
  return
  using: _0@Entry
@DefId(0:37 ~ test[be05]::url_inspect)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = url_parse(move _4) -> bb1
  using: _4@Mir(bb0[0])
bb1:
  _2 = url_data_inspect(move _3) -> bb2
  using: _3@Mir(bb0[1])
bb2:
  return
  using: _0@Entry
@DefId(0:38 ~ test[be05]::url_data_inspect)
bb0:
  _6 = const b"#url =>\n\x00"
  using: 
  _5 = &raw const (*_6)
  using: _6@Mir(bb0[0])
  _4 = move _5 as *const u8 (Pointer(ArrayToPointer))
  using: _5@Mir(bb0[1])
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[2])
  _2 = printf(move _3) -> bb1
  using: _3@Mir(bb0[3])
bb1:
  _11 = const b"    .href: \"%s\"\n\x00"
  using: 
  _10 = &raw const (*_11)
  using: _11@Mir(bb1[0])
  _9 = move _10 as *const u8 (Pointer(ArrayToPointer))
  using: _10@Mir(bb1[1])
  _8 = move _9 as *const i8 (PtrToPtr)
  using: _9@Mir(bb1[2])
  _12 = ((*_1).0: *mut i8)
  using: _1@Entry
  _7 = printf(move _8, move _12) -> bb2
  using: _8@Mir(bb1[3]), _12@Mir(bb1[4])
bb2:
  _17 = const b"    .protocol: \"%s\"\n\x00"
  using: 
  _16 = &raw const (*_17)
  using: _17@Mir(bb2[0])
  _15 = move _16 as *const u8 (Pointer(ArrayToPointer))
  using: _16@Mir(bb2[1])
  _14 = move _15 as *const i8 (PtrToPtr)
  using: _15@Mir(bb2[2])
  _18 = ((*_1).1: *mut i8)
  using: _1@Entry
  _13 = printf(move _14, move _18) -> bb3
  using: _14@Mir(bb2[3]), _18@Mir(bb2[4])
bb3:
  _23 = const b"    .host: \"%s\"\n\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb3[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb3[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb3[2])
  _24 = ((*_1).2: *mut i8)
  using: _1@Entry
  _19 = printf(move _20, move _24) -> bb4
  using: _20@Mir(bb3[3]), _24@Mir(bb3[4])
bb4:
  _29 = const b"    .auth: \"%s\"\n\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb4[0])
  _27 = move _28 as *const u8 (Pointer(ArrayToPointer))
  using: _28@Mir(bb4[1])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb4[2])
  _30 = ((*_1).3: *mut i8)
  using: _1@Entry
  _25 = printf(move _26, move _30) -> bb5
  using: _26@Mir(bb4[3]), _30@Mir(bb4[4])
bb5:
  _35 = const b"    .hostname: \"%s\"\n\x00"
  using: 
  _34 = &raw const (*_35)
  using: _35@Mir(bb5[0])
  _33 = move _34 as *const u8 (Pointer(ArrayToPointer))
  using: _34@Mir(bb5[1])
  _32 = move _33 as *const i8 (PtrToPtr)
  using: _33@Mir(bb5[2])
  _36 = ((*_1).4: *mut i8)
  using: _1@Entry
  _31 = printf(move _32, move _36) -> bb6
  using: _32@Mir(bb5[3]), _36@Mir(bb5[4])
bb6:
  _41 = const b"    .pathname: \"%s\"\n\x00"
  using: 
  _40 = &raw const (*_41)
  using: _41@Mir(bb6[0])
  _39 = move _40 as *const u8 (Pointer(ArrayToPointer))
  using: _40@Mir(bb6[1])
  _38 = move _39 as *const i8 (PtrToPtr)
  using: _39@Mir(bb6[2])
  _42 = ((*_1).5: *mut i8)
  using: _1@Entry
  _37 = printf(move _38, move _42) -> bb7
  using: _38@Mir(bb6[3]), _42@Mir(bb6[4])
bb7:
  _47 = const b"    .search: \"%s\"\n\x00"
  using: 
  _46 = &raw const (*_47)
  using: _47@Mir(bb7[0])
  _45 = move _46 as *const u8 (Pointer(ArrayToPointer))
  using: _46@Mir(bb7[1])
  _44 = move _45 as *const i8 (PtrToPtr)
  using: _45@Mir(bb7[2])
  _48 = ((*_1).6: *mut i8)
  using: _1@Entry
  _43 = printf(move _44, move _48) -> bb8
  using: _44@Mir(bb7[3]), _48@Mir(bb7[4])
bb8:
  _53 = const b"    .path: \"%s\"\n\x00"
  using: 
  _52 = &raw const (*_53)
  using: _53@Mir(bb8[0])
  _51 = move _52 as *const u8 (Pointer(ArrayToPointer))
  using: _52@Mir(bb8[1])
  _50 = move _51 as *const i8 (PtrToPtr)
  using: _51@Mir(bb8[2])
  _54 = ((*_1).7: *mut i8)
  using: _1@Entry
  _49 = printf(move _50, move _54) -> bb9
  using: _50@Mir(bb8[3]), _54@Mir(bb8[4])
bb9:
  _59 = const b"    .hash: \"%s\"\n\x00"
  using: 
  _58 = &raw const (*_59)
  using: _59@Mir(bb9[0])
  _57 = move _58 as *const u8 (Pointer(ArrayToPointer))
  using: _58@Mir(bb9[1])
  _56 = move _57 as *const i8 (PtrToPtr)
  using: _57@Mir(bb9[2])
  _60 = ((*_1).8: *mut i8)
  using: _1@Entry
  _55 = printf(move _56, move _60) -> bb10
  using: _56@Mir(bb9[3]), _60@Mir(bb9[4])
bb10:
  _65 = const b"    .query: \"%s\"\n\x00"
  using: 
  _64 = &raw const (*_65)
  using: _65@Mir(bb10[0])
  _63 = move _64 as *const u8 (Pointer(ArrayToPointer))
  using: _64@Mir(bb10[1])
  _62 = move _63 as *const i8 (PtrToPtr)
  using: _63@Mir(bb10[2])
  _66 = ((*_1).9: *mut i8)
  using: _1@Entry
  _61 = printf(move _62, move _66) -> bb11
  using: _62@Mir(bb10[3]), _66@Mir(bb10[4])
bb11:
  _71 = const b"    .port: \"%s\"\n\x00"
  using: 
  _70 = &raw const (*_71)
  using: _71@Mir(bb11[0])
  _69 = move _70 as *const u8 (Pointer(ArrayToPointer))
  using: _70@Mir(bb11[1])
  _68 = move _69 as *const i8 (PtrToPtr)
  using: _69@Mir(bb11[2])
  _72 = ((*_1).10: *mut i8)
  using: _1@Entry
  _67 = printf(move _68, move _72) -> bb12
  using: _68@Mir(bb11[3]), _72@Mir(bb11[4])
bb12:
  return
  using: _0@Entry
@DefId(0:39 ~ test[be05]::main_0)
bb0:
  _5 = const b"git://git@github.com:jwerle/url.h.git\x00"
  using: 
  _4 = &raw const (*_5)
  using: _5@Mir(bb0[0])
  _3 = move _4 as *const u8 (Pointer(ArrayToPointer))
  using: _4@Mir(bb0[1])
  _2 = move _3 as *const i8 (PtrToPtr)
  using: _3@Mir(bb0[2])
  _1 = move _2 as *mut i8 (PtrToPtr)
  using: _2@Mir(bb0[3])
  _10 = const b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\x00"
  using: 
  _9 = &raw const (*_10)
  using: _10@Mir(bb0[5])
  _8 = move _9 as *const u8 (Pointer(ArrayToPointer))
  using: _9@Mir(bb0[6])
  _7 = move _8 as *const i8 (PtrToPtr)
  using: _8@Mir(bb0[7])
  _6 = move _7 as *mut i8 (PtrToPtr)
  using: _7@Mir(bb0[8])
  _12 = _6
  using: _6@Mir(bb0[9])
  _11 = url_parse(move _12) -> bb1
  using: _12@Mir(bb0[10])
bb1:
  _14 = _1
  using: _1@Mir(bb0[4])
  _13 = url_parse(move _14) -> bb2
  using: _14@Mir(bb1[0])
bb2:
  _18 = _11
  using: _11@Mir(bb0[11])
  _17 = std::ptr::mut_ptr::<impl *mut url_data>::is_null(move _18) -> bb3
  using: _18@Mir(bb2[0])
bb3:
  _16 = move _17 as i32 (IntToInt)
  using: _17@Mir(bb2[1])
  _15 = move _16 as i64 (IntToInt)
  using: _16@Mir(bb3[0])
  switchInt(move _15) -> [0: bb5, otherwise: bb4]
  using: _15@Mir(bb3[1])
bb4:
  _23 = const b"main\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb4[0])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb4[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb4[2])
  _27 = const b"test.c\x00"
  using: 
  _26 = &raw const (*_27)
  using: _27@Mir(bb4[4])
  _25 = move _26 as *const u8 (Pointer(ArrayToPointer))
  using: _26@Mir(bb4[5])
  _24 = move _25 as *const i8 (PtrToPtr)
  using: _25@Mir(bb4[6])
  _28 = const 15_i32
  using: 
  _32 = const b"parsed\x00"
  using: 
  _31 = &raw const (*_32)
  using: _32@Mir(bb4[9])
  _30 = move _31 as *const u8 (Pointer(ArrayToPointer))
  using: _31@Mir(bb4[10])
  _29 = move _30 as *const i8 (PtrToPtr)
  using: _30@Mir(bb4[11])
  _19 = __assert_rtn(move _20, move _24, move _28, move _29)
  using: _20@Mir(bb4[3]), _24@Mir(bb4[7]), _28@Mir(bb4[8]), _29@Mir(bb4[12])
bb5:
  _36 = _13
  using: _13@Mir(bb1[1])
  _35 = std::ptr::mut_ptr::<impl *mut url_data>::is_null(move _36) -> bb6
  using: _36@Mir(bb5[0])
bb6:
  _34 = move _35 as i32 (IntToInt)
  using: _35@Mir(bb5[1])
  _33 = move _34 as i64 (IntToInt)
  using: _34@Mir(bb6[0])
  switchInt(move _33) -> [0: bb8, otherwise: bb7]
  using: _33@Mir(bb6[1])
bb7:
  _41 = const b"main\x00"
  using: 
  _40 = &raw const (*_41)
  using: _41@Mir(bb7[0])
  _39 = move _40 as *const u8 (Pointer(ArrayToPointer))
  using: _40@Mir(bb7[1])
  _38 = move _39 as *const i8 (PtrToPtr)
  using: _39@Mir(bb7[2])
  _45 = const b"test.c\x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb7[4])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb7[5])
  _42 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb7[6])
  _46 = const 16_i32
  using: 
  _50 = const b"gh_parsed\x00"
  using: 
  _49 = &raw const (*_50)
  using: _50@Mir(bb7[9])
  _48 = move _49 as *const u8 (Pointer(ArrayToPointer))
  using: _49@Mir(bb7[10])
  _47 = move _48 as *const i8 (PtrToPtr)
  using: _48@Mir(bb7[11])
  _37 = __assert_rtn(move _38, move _42, move _46, move _47)
  using: _38@Mir(bb7[3]), _42@Mir(bb7[7]), _46@Mir(bb7[8]), _47@Mir(bb7[12])
bb8:
  _52 = _11
  using: _11@Mir(bb0[11])
  _51 = url_data_inspect(move _52) -> bb9
  using: _52@Mir(bb8[0])
bb9:
  _54 = _13
  using: _13@Mir(bb1[1])
  _53 = url_data_inspect(move _54) -> bb10
  using: _54@Mir(bb9[0])
bb10:
  _58 = ((*_11).0: *mut i8)
  using: _11@Mir(bb0[11])
  _57 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _58) -> bb11
  using: _58@Mir(bb10[0])
bb11:
  _56 = move _57 as i32 (IntToInt)
  using: _57@Mir(bb10[1])
  _55 = move _56 as i64 (IntToInt)
  using: _56@Mir(bb11[0])
  switchInt(move _55) -> [0: bb13, otherwise: bb12]
  using: _55@Mir(bb11[1])
bb12:
  _63 = const b"main\x00"
  using: 
  _62 = &raw const (*_63)
  using: _63@Mir(bb12[0])
  _61 = move _62 as *const u8 (Pointer(ArrayToPointer))
  using: _62@Mir(bb12[1])
  _60 = move _61 as *const i8 (PtrToPtr)
  using: _61@Mir(bb12[2])
  _67 = const b"test.c\x00"
  using: 
  _66 = &raw const (*_67)
  using: _67@Mir(bb12[4])
  _65 = move _66 as *const u8 (Pointer(ArrayToPointer))
  using: _66@Mir(bb12[5])
  _64 = move _65 as *const i8 (PtrToPtr)
  using: _65@Mir(bb12[6])
  _68 = const 21_i32
  using: 
  _72 = const b"parsed->href\x00"
  using: 
  _71 = &raw const (*_72)
  using: _72@Mir(bb12[9])
  _70 = move _71 as *const u8 (Pointer(ArrayToPointer))
  using: _71@Mir(bb12[10])
  _69 = move _70 as *const i8 (PtrToPtr)
  using: _70@Mir(bb12[11])
  _59 = __assert_rtn(move _60, move _64, move _68, move _69)
  using: _60@Mir(bb12[3]), _64@Mir(bb12[7]), _68@Mir(bb12[8]), _69@Mir(bb12[12])
bb13:
  _76 = ((*_11).3: *mut i8)
  using: _11@Mir(bb0[11])
  _75 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _76) -> bb14
  using: _76@Mir(bb13[0])
bb14:
  _74 = move _75 as i32 (IntToInt)
  using: _75@Mir(bb13[1])
  _73 = move _74 as i64 (IntToInt)
  using: _74@Mir(bb14[0])
  switchInt(move _73) -> [0: bb16, otherwise: bb15]
  using: _73@Mir(bb14[1])
bb15:
  _81 = const b"main\x00"
  using: 
  _80 = &raw const (*_81)
  using: _81@Mir(bb15[0])
  _79 = move _80 as *const u8 (Pointer(ArrayToPointer))
  using: _80@Mir(bb15[1])
  _78 = move _79 as *const i8 (PtrToPtr)
  using: _79@Mir(bb15[2])
  _85 = const b"test.c\x00"
  using: 
  _84 = &raw const (*_85)
  using: _85@Mir(bb15[4])
  _83 = move _84 as *const u8 (Pointer(ArrayToPointer))
  using: _84@Mir(bb15[5])
  _82 = move _83 as *const i8 (PtrToPtr)
  using: _83@Mir(bb15[6])
  _86 = const 22_i32
  using: 
  _90 = const b"parsed->auth\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb15[9])
  _88 = move _89 as *const u8 (Pointer(ArrayToPointer))
  using: _89@Mir(bb15[10])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb15[11])
  _77 = __assert_rtn(move _78, move _82, move _86, move _87)
  using: _78@Mir(bb15[3]), _82@Mir(bb15[7]), _86@Mir(bb15[8]), _87@Mir(bb15[12])
bb16:
  _94 = ((*_11).1: *mut i8)
  using: _11@Mir(bb0[11])
  _93 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _94) -> bb17
  using: _94@Mir(bb16[0])
bb17:
  _92 = move _93 as i32 (IntToInt)
  using: _93@Mir(bb16[1])
  _91 = move _92 as i64 (IntToInt)
  using: _92@Mir(bb17[0])
  switchInt(move _91) -> [0: bb19, otherwise: bb18]
  using: _91@Mir(bb17[1])
bb18:
  _99 = const b"main\x00"
  using: 
  _98 = &raw const (*_99)
  using: _99@Mir(bb18[0])
  _97 = move _98 as *const u8 (Pointer(ArrayToPointer))
  using: _98@Mir(bb18[1])
  _96 = move _97 as *const i8 (PtrToPtr)
  using: _97@Mir(bb18[2])
  _103 = const b"test.c\x00"
  using: 
  _102 = &raw const (*_103)
  using: _103@Mir(bb18[4])
  _101 = move _102 as *const u8 (Pointer(ArrayToPointer))
  using: _102@Mir(bb18[5])
  _100 = move _101 as *const i8 (PtrToPtr)
  using: _101@Mir(bb18[6])
  _104 = const 23_i32
  using: 
  _108 = const b"parsed->protocol\x00"
  using: 
  _107 = &raw const (*_108)
  using: _108@Mir(bb18[9])
  _106 = move _107 as *const u8 (Pointer(ArrayToPointer))
  using: _107@Mir(bb18[10])
  _105 = move _106 as *const i8 (PtrToPtr)
  using: _106@Mir(bb18[11])
  _95 = __assert_rtn(move _96, move _100, move _104, move _105)
  using: _96@Mir(bb18[3]), _100@Mir(bb18[7]), _104@Mir(bb18[8]), _105@Mir(bb18[12])
bb19:
  _112 = ((*_11).10: *mut i8)
  using: _11@Mir(bb0[11])
  _111 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _112) -> bb20
  using: _112@Mir(bb19[0])
bb20:
  _110 = move _111 as i32 (IntToInt)
  using: _111@Mir(bb19[1])
  _109 = move _110 as i64 (IntToInt)
  using: _110@Mir(bb20[0])
  switchInt(move _109) -> [0: bb22, otherwise: bb21]
  using: _109@Mir(bb20[1])
bb21:
  _117 = const b"main\x00"
  using: 
  _116 = &raw const (*_117)
  using: _117@Mir(bb21[0])
  _115 = move _116 as *const u8 (Pointer(ArrayToPointer))
  using: _116@Mir(bb21[1])
  _114 = move _115 as *const i8 (PtrToPtr)
  using: _115@Mir(bb21[2])
  _121 = const b"test.c\x00"
  using: 
  _120 = &raw const (*_121)
  using: _121@Mir(bb21[4])
  _119 = move _120 as *const u8 (Pointer(ArrayToPointer))
  using: _120@Mir(bb21[5])
  _118 = move _119 as *const i8 (PtrToPtr)
  using: _119@Mir(bb21[6])
  _122 = const 24_i32
  using: 
  _126 = const b"parsed->port\x00"
  using: 
  _125 = &raw const (*_126)
  using: _126@Mir(bb21[9])
  _124 = move _125 as *const u8 (Pointer(ArrayToPointer))
  using: _125@Mir(bb21[10])
  _123 = move _124 as *const i8 (PtrToPtr)
  using: _124@Mir(bb21[11])
  _113 = __assert_rtn(move _114, move _118, move _122, move _123)
  using: _114@Mir(bb21[3]), _118@Mir(bb21[7]), _122@Mir(bb21[8]), _123@Mir(bb21[12])
bb22:
  _130 = ((*_11).4: *mut i8)
  using: _11@Mir(bb0[11])
  _129 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _130) -> bb23
  using: _130@Mir(bb22[0])
bb23:
  _128 = move _129 as i32 (IntToInt)
  using: _129@Mir(bb22[1])
  _127 = move _128 as i64 (IntToInt)
  using: _128@Mir(bb23[0])
  switchInt(move _127) -> [0: bb25, otherwise: bb24]
  using: _127@Mir(bb23[1])
bb24:
  _135 = const b"main\x00"
  using: 
  _134 = &raw const (*_135)
  using: _135@Mir(bb24[0])
  _133 = move _134 as *const u8 (Pointer(ArrayToPointer))
  using: _134@Mir(bb24[1])
  _132 = move _133 as *const i8 (PtrToPtr)
  using: _133@Mir(bb24[2])
  _139 = const b"test.c\x00"
  using: 
  _138 = &raw const (*_139)
  using: _139@Mir(bb24[4])
  _137 = move _138 as *const u8 (Pointer(ArrayToPointer))
  using: _138@Mir(bb24[5])
  _136 = move _137 as *const i8 (PtrToPtr)
  using: _137@Mir(bb24[6])
  _140 = const 25_i32
  using: 
  _144 = const b"parsed->hostname\x00"
  using: 
  _143 = &raw const (*_144)
  using: _144@Mir(bb24[9])
  _142 = move _143 as *const u8 (Pointer(ArrayToPointer))
  using: _143@Mir(bb24[10])
  _141 = move _142 as *const i8 (PtrToPtr)
  using: _142@Mir(bb24[11])
  _131 = __assert_rtn(move _132, move _136, move _140, move _141)
  using: _132@Mir(bb24[3]), _136@Mir(bb24[7]), _140@Mir(bb24[8]), _141@Mir(bb24[12])
bb25:
  _148 = ((*_11).2: *mut i8)
  using: _11@Mir(bb0[11])
  _147 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _148) -> bb26
  using: _148@Mir(bb25[0])
bb26:
  _146 = move _147 as i32 (IntToInt)
  using: _147@Mir(bb25[1])
  _145 = move _146 as i64 (IntToInt)
  using: _146@Mir(bb26[0])
  switchInt(move _145) -> [0: bb28, otherwise: bb27]
  using: _145@Mir(bb26[1])
bb27:
  _153 = const b"main\x00"
  using: 
  _152 = &raw const (*_153)
  using: _153@Mir(bb27[0])
  _151 = move _152 as *const u8 (Pointer(ArrayToPointer))
  using: _152@Mir(bb27[1])
  _150 = move _151 as *const i8 (PtrToPtr)
  using: _151@Mir(bb27[2])
  _157 = const b"test.c\x00"
  using: 
  _156 = &raw const (*_157)
  using: _157@Mir(bb27[4])
  _155 = move _156 as *const u8 (Pointer(ArrayToPointer))
  using: _156@Mir(bb27[5])
  _154 = move _155 as *const i8 (PtrToPtr)
  using: _155@Mir(bb27[6])
  _158 = const 26_i32
  using: 
  _162 = const b"parsed->host\x00"
  using: 
  _161 = &raw const (*_162)
  using: _162@Mir(bb27[9])
  _160 = move _161 as *const u8 (Pointer(ArrayToPointer))
  using: _161@Mir(bb27[10])
  _159 = move _160 as *const i8 (PtrToPtr)
  using: _160@Mir(bb27[11])
  _149 = __assert_rtn(move _150, move _154, move _158, move _159)
  using: _150@Mir(bb27[3]), _154@Mir(bb27[7]), _158@Mir(bb27[8]), _159@Mir(bb27[12])
bb28:
  _166 = ((*_11).5: *mut i8)
  using: _11@Mir(bb0[11])
  _165 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _166) -> bb29
  using: _166@Mir(bb28[0])
bb29:
  _164 = move _165 as i32 (IntToInt)
  using: _165@Mir(bb28[1])
  _163 = move _164 as i64 (IntToInt)
  using: _164@Mir(bb29[0])
  switchInt(move _163) -> [0: bb31, otherwise: bb30]
  using: _163@Mir(bb29[1])
bb30:
  _171 = const b"main\x00"
  using: 
  _170 = &raw const (*_171)
  using: _171@Mir(bb30[0])
  _169 = move _170 as *const u8 (Pointer(ArrayToPointer))
  using: _170@Mir(bb30[1])
  _168 = move _169 as *const i8 (PtrToPtr)
  using: _169@Mir(bb30[2])
  _175 = const b"test.c\x00"
  using: 
  _174 = &raw const (*_175)
  using: _175@Mir(bb30[4])
  _173 = move _174 as *const u8 (Pointer(ArrayToPointer))
  using: _174@Mir(bb30[5])
  _172 = move _173 as *const i8 (PtrToPtr)
  using: _173@Mir(bb30[6])
  _176 = const 27_i32
  using: 
  _180 = const b"parsed->pathname\x00"
  using: 
  _179 = &raw const (*_180)
  using: _180@Mir(bb30[9])
  _178 = move _179 as *const u8 (Pointer(ArrayToPointer))
  using: _179@Mir(bb30[10])
  _177 = move _178 as *const i8 (PtrToPtr)
  using: _178@Mir(bb30[11])
  _167 = __assert_rtn(move _168, move _172, move _176, move _177)
  using: _168@Mir(bb30[3]), _172@Mir(bb30[7]), _176@Mir(bb30[8]), _177@Mir(bb30[12])
bb31:
  _184 = ((*_11).7: *mut i8)
  using: _11@Mir(bb0[11])
  _183 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _184) -> bb32
  using: _184@Mir(bb31[0])
bb32:
  _182 = move _183 as i32 (IntToInt)
  using: _183@Mir(bb31[1])
  _181 = move _182 as i64 (IntToInt)
  using: _182@Mir(bb32[0])
  switchInt(move _181) -> [0: bb34, otherwise: bb33]
  using: _181@Mir(bb32[1])
bb33:
  _189 = const b"main\x00"
  using: 
  _188 = &raw const (*_189)
  using: _189@Mir(bb33[0])
  _187 = move _188 as *const u8 (Pointer(ArrayToPointer))
  using: _188@Mir(bb33[1])
  _186 = move _187 as *const i8 (PtrToPtr)
  using: _187@Mir(bb33[2])
  _193 = const b"test.c\x00"
  using: 
  _192 = &raw const (*_193)
  using: _193@Mir(bb33[4])
  _191 = move _192 as *const u8 (Pointer(ArrayToPointer))
  using: _192@Mir(bb33[5])
  _190 = move _191 as *const i8 (PtrToPtr)
  using: _191@Mir(bb33[6])
  _194 = const 28_i32
  using: 
  _198 = const b"parsed->path\x00"
  using: 
  _197 = &raw const (*_198)
  using: _198@Mir(bb33[9])
  _196 = move _197 as *const u8 (Pointer(ArrayToPointer))
  using: _197@Mir(bb33[10])
  _195 = move _196 as *const i8 (PtrToPtr)
  using: _196@Mir(bb33[11])
  _185 = __assert_rtn(move _186, move _190, move _194, move _195)
  using: _186@Mir(bb33[3]), _190@Mir(bb33[7]), _194@Mir(bb33[8]), _195@Mir(bb33[12])
bb34:
  _202 = ((*_11).8: *mut i8)
  using: _11@Mir(bb0[11])
  _201 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _202) -> bb35
  using: _202@Mir(bb34[0])
bb35:
  _200 = move _201 as i32 (IntToInt)
  using: _201@Mir(bb34[1])
  _199 = move _200 as i64 (IntToInt)
  using: _200@Mir(bb35[0])
  switchInt(move _199) -> [0: bb37, otherwise: bb36]
  using: _199@Mir(bb35[1])
bb36:
  _207 = const b"main\x00"
  using: 
  _206 = &raw const (*_207)
  using: _207@Mir(bb36[0])
  _205 = move _206 as *const u8 (Pointer(ArrayToPointer))
  using: _206@Mir(bb36[1])
  _204 = move _205 as *const i8 (PtrToPtr)
  using: _205@Mir(bb36[2])
  _211 = const b"test.c\x00"
  using: 
  _210 = &raw const (*_211)
  using: _211@Mir(bb36[4])
  _209 = move _210 as *const u8 (Pointer(ArrayToPointer))
  using: _210@Mir(bb36[5])
  _208 = move _209 as *const i8 (PtrToPtr)
  using: _209@Mir(bb36[6])
  _212 = const 29_i32
  using: 
  _216 = const b"parsed->hash\x00"
  using: 
  _215 = &raw const (*_216)
  using: _216@Mir(bb36[9])
  _214 = move _215 as *const u8 (Pointer(ArrayToPointer))
  using: _215@Mir(bb36[10])
  _213 = move _214 as *const i8 (PtrToPtr)
  using: _214@Mir(bb36[11])
  _203 = __assert_rtn(move _204, move _208, move _212, move _213)
  using: _204@Mir(bb36[3]), _208@Mir(bb36[7]), _212@Mir(bb36[8]), _213@Mir(bb36[12])
bb37:
  _220 = ((*_11).6: *mut i8)
  using: _11@Mir(bb0[11])
  _219 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _220) -> bb38
  using: _220@Mir(bb37[0])
bb38:
  _218 = move _219 as i32 (IntToInt)
  using: _219@Mir(bb37[1])
  _217 = move _218 as i64 (IntToInt)
  using: _218@Mir(bb38[0])
  switchInt(move _217) -> [0: bb40, otherwise: bb39]
  using: _217@Mir(bb38[1])
bb39:
  _225 = const b"main\x00"
  using: 
  _224 = &raw const (*_225)
  using: _225@Mir(bb39[0])
  _223 = move _224 as *const u8 (Pointer(ArrayToPointer))
  using: _224@Mir(bb39[1])
  _222 = move _223 as *const i8 (PtrToPtr)
  using: _223@Mir(bb39[2])
  _229 = const b"test.c\x00"
  using: 
  _228 = &raw const (*_229)
  using: _229@Mir(bb39[4])
  _227 = move _228 as *const u8 (Pointer(ArrayToPointer))
  using: _228@Mir(bb39[5])
  _226 = move _227 as *const i8 (PtrToPtr)
  using: _227@Mir(bb39[6])
  _230 = const 30_i32
  using: 
  _234 = const b"parsed->search\x00"
  using: 
  _233 = &raw const (*_234)
  using: _234@Mir(bb39[9])
  _232 = move _233 as *const u8 (Pointer(ArrayToPointer))
  using: _233@Mir(bb39[10])
  _231 = move _232 as *const i8 (PtrToPtr)
  using: _232@Mir(bb39[11])
  _221 = __assert_rtn(move _222, move _226, move _230, move _231)
  using: _222@Mir(bb39[3]), _226@Mir(bb39[7]), _230@Mir(bb39[8]), _231@Mir(bb39[12])
bb40:
  _238 = ((*_11).9: *mut i8)
  using: _11@Mir(bb0[11])
  _237 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _238) -> bb41
  using: _238@Mir(bb40[0])
bb41:
  _236 = move _237 as i32 (IntToInt)
  using: _237@Mir(bb40[1])
  _235 = move _236 as i64 (IntToInt)
  using: _236@Mir(bb41[0])
  switchInt(move _235) -> [0: bb43, otherwise: bb42]
  using: _235@Mir(bb41[1])
bb42:
  _243 = const b"main\x00"
  using: 
  _242 = &raw const (*_243)
  using: _243@Mir(bb42[0])
  _241 = move _242 as *const u8 (Pointer(ArrayToPointer))
  using: _242@Mir(bb42[1])
  _240 = move _241 as *const i8 (PtrToPtr)
  using: _241@Mir(bb42[2])
  _247 = const b"test.c\x00"
  using: 
  _246 = &raw const (*_247)
  using: _247@Mir(bb42[4])
  _245 = move _246 as *const u8 (Pointer(ArrayToPointer))
  using: _246@Mir(bb42[5])
  _244 = move _245 as *const i8 (PtrToPtr)
  using: _245@Mir(bb42[6])
  _248 = const 31_i32
  using: 
  _252 = const b"parsed->query\x00"
  using: 
  _251 = &raw const (*_252)
  using: _252@Mir(bb42[9])
  _250 = move _251 as *const u8 (Pointer(ArrayToPointer))
  using: _251@Mir(bb42[10])
  _249 = move _250 as *const i8 (PtrToPtr)
  using: _250@Mir(bb42[11])
  _239 = __assert_rtn(move _240, move _244, move _248, move _249)
  using: _240@Mir(bb42[3]), _244@Mir(bb42[7]), _248@Mir(bb42[8]), _249@Mir(bb42[12])
bb43:
  _256 = ((*_13).0: *mut i8)
  using: _13@Mir(bb1[1])
  _255 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _256) -> bb44
  using: _256@Mir(bb43[0])
bb44:
  _254 = move _255 as i32 (IntToInt)
  using: _255@Mir(bb43[1])
  _253 = move _254 as i64 (IntToInt)
  using: _254@Mir(bb44[0])
  switchInt(move _253) -> [0: bb46, otherwise: bb45]
  using: _253@Mir(bb44[1])
bb45:
  _261 = const b"main\x00"
  using: 
  _260 = &raw const (*_261)
  using: _261@Mir(bb45[0])
  _259 = move _260 as *const u8 (Pointer(ArrayToPointer))
  using: _260@Mir(bb45[1])
  _258 = move _259 as *const i8 (PtrToPtr)
  using: _259@Mir(bb45[2])
  _265 = const b"test.c\x00"
  using: 
  _264 = &raw const (*_265)
  using: _265@Mir(bb45[4])
  _263 = move _264 as *const u8 (Pointer(ArrayToPointer))
  using: _264@Mir(bb45[5])
  _262 = move _263 as *const i8 (PtrToPtr)
  using: _263@Mir(bb45[6])
  _266 = const 33_i32
  using: 
  _270 = const b"gh_parsed->href\x00"
  using: 
  _269 = &raw const (*_270)
  using: _270@Mir(bb45[9])
  _268 = move _269 as *const u8 (Pointer(ArrayToPointer))
  using: _269@Mir(bb45[10])
  _267 = move _268 as *const i8 (PtrToPtr)
  using: _268@Mir(bb45[11])
  _257 = __assert_rtn(move _258, move _262, move _266, move _267)
  using: _258@Mir(bb45[3]), _262@Mir(bb45[7]), _266@Mir(bb45[8]), _267@Mir(bb45[12])
bb46:
  _274 = ((*_13).1: *mut i8)
  using: _13@Mir(bb1[1])
  _273 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _274) -> bb47
  using: _274@Mir(bb46[0])
bb47:
  _272 = move _273 as i32 (IntToInt)
  using: _273@Mir(bb46[1])
  _271 = move _272 as i64 (IntToInt)
  using: _272@Mir(bb47[0])
  switchInt(move _271) -> [0: bb49, otherwise: bb48]
  using: _271@Mir(bb47[1])
bb48:
  _279 = const b"main\x00"
  using: 
  _278 = &raw const (*_279)
  using: _279@Mir(bb48[0])
  _277 = move _278 as *const u8 (Pointer(ArrayToPointer))
  using: _278@Mir(bb48[1])
  _276 = move _277 as *const i8 (PtrToPtr)
  using: _277@Mir(bb48[2])
  _283 = const b"test.c\x00"
  using: 
  _282 = &raw const (*_283)
  using: _283@Mir(bb48[4])
  _281 = move _282 as *const u8 (Pointer(ArrayToPointer))
  using: _282@Mir(bb48[5])
  _280 = move _281 as *const i8 (PtrToPtr)
  using: _281@Mir(bb48[6])
  _284 = const 34_i32
  using: 
  _288 = const b"gh_parsed->protocol\x00"
  using: 
  _287 = &raw const (*_288)
  using: _288@Mir(bb48[9])
  _286 = move _287 as *const u8 (Pointer(ArrayToPointer))
  using: _287@Mir(bb48[10])
  _285 = move _286 as *const i8 (PtrToPtr)
  using: _286@Mir(bb48[11])
  _275 = __assert_rtn(move _276, move _280, move _284, move _285)
  using: _276@Mir(bb48[3]), _280@Mir(bb48[7]), _284@Mir(bb48[8]), _285@Mir(bb48[12])
bb49:
  _292 = ((*_13).2: *mut i8)
  using: _13@Mir(bb1[1])
  _291 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _292) -> bb50
  using: _292@Mir(bb49[0])
bb50:
  _290 = move _291 as i32 (IntToInt)
  using: _291@Mir(bb49[1])
  _289 = move _290 as i64 (IntToInt)
  using: _290@Mir(bb50[0])
  switchInt(move _289) -> [0: bb52, otherwise: bb51]
  using: _289@Mir(bb50[1])
bb51:
  _297 = const b"main\x00"
  using: 
  _296 = &raw const (*_297)
  using: _297@Mir(bb51[0])
  _295 = move _296 as *const u8 (Pointer(ArrayToPointer))
  using: _296@Mir(bb51[1])
  _294 = move _295 as *const i8 (PtrToPtr)
  using: _295@Mir(bb51[2])
  _301 = const b"test.c\x00"
  using: 
  _300 = &raw const (*_301)
  using: _301@Mir(bb51[4])
  _299 = move _300 as *const u8 (Pointer(ArrayToPointer))
  using: _300@Mir(bb51[5])
  _298 = move _299 as *const i8 (PtrToPtr)
  using: _299@Mir(bb51[6])
  _302 = const 35_i32
  using: 
  _306 = const b"gh_parsed->host\x00"
  using: 
  _305 = &raw const (*_306)
  using: _306@Mir(bb51[9])
  _304 = move _305 as *const u8 (Pointer(ArrayToPointer))
  using: _305@Mir(bb51[10])
  _303 = move _304 as *const i8 (PtrToPtr)
  using: _304@Mir(bb51[11])
  _293 = __assert_rtn(move _294, move _298, move _302, move _303)
  using: _294@Mir(bb51[3]), _298@Mir(bb51[7]), _302@Mir(bb51[8]), _303@Mir(bb51[12])
bb52:
  _310 = ((*_13).3: *mut i8)
  using: _13@Mir(bb1[1])
  _309 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _310) -> bb53
  using: _310@Mir(bb52[0])
bb53:
  _308 = move _309 as i32 (IntToInt)
  using: _309@Mir(bb52[1])
  _307 = move _308 as i64 (IntToInt)
  using: _308@Mir(bb53[0])
  switchInt(move _307) -> [0: bb55, otherwise: bb54]
  using: _307@Mir(bb53[1])
bb54:
  _315 = const b"main\x00"
  using: 
  _314 = &raw const (*_315)
  using: _315@Mir(bb54[0])
  _313 = move _314 as *const u8 (Pointer(ArrayToPointer))
  using: _314@Mir(bb54[1])
  _312 = move _313 as *const i8 (PtrToPtr)
  using: _313@Mir(bb54[2])
  _319 = const b"test.c\x00"
  using: 
  _318 = &raw const (*_319)
  using: _319@Mir(bb54[4])
  _317 = move _318 as *const u8 (Pointer(ArrayToPointer))
  using: _318@Mir(bb54[5])
  _316 = move _317 as *const i8 (PtrToPtr)
  using: _317@Mir(bb54[6])
  _320 = const 36_i32
  using: 
  _324 = const b"gh_parsed->auth\x00"
  using: 
  _323 = &raw const (*_324)
  using: _324@Mir(bb54[9])
  _322 = move _323 as *const u8 (Pointer(ArrayToPointer))
  using: _323@Mir(bb54[10])
  _321 = move _322 as *const i8 (PtrToPtr)
  using: _322@Mir(bb54[11])
  _311 = __assert_rtn(move _312, move _316, move _320, move _321)
  using: _312@Mir(bb54[3]), _316@Mir(bb54[7]), _320@Mir(bb54[8]), _321@Mir(bb54[12])
bb55:
  _328 = ((*_13).4: *mut i8)
  using: _13@Mir(bb1[1])
  _327 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _328) -> bb56
  using: _328@Mir(bb55[0])
bb56:
  _326 = move _327 as i32 (IntToInt)
  using: _327@Mir(bb55[1])
  _325 = move _326 as i64 (IntToInt)
  using: _326@Mir(bb56[0])
  switchInt(move _325) -> [0: bb58, otherwise: bb57]
  using: _325@Mir(bb56[1])
bb57:
  _333 = const b"main\x00"
  using: 
  _332 = &raw const (*_333)
  using: _333@Mir(bb57[0])
  _331 = move _332 as *const u8 (Pointer(ArrayToPointer))
  using: _332@Mir(bb57[1])
  _330 = move _331 as *const i8 (PtrToPtr)
  using: _331@Mir(bb57[2])
  _337 = const b"test.c\x00"
  using: 
  _336 = &raw const (*_337)
  using: _337@Mir(bb57[4])
  _335 = move _336 as *const u8 (Pointer(ArrayToPointer))
  using: _336@Mir(bb57[5])
  _334 = move _335 as *const i8 (PtrToPtr)
  using: _335@Mir(bb57[6])
  _338 = const 37_i32
  using: 
  _342 = const b"gh_parsed->hostname\x00"
  using: 
  _341 = &raw const (*_342)
  using: _342@Mir(bb57[9])
  _340 = move _341 as *const u8 (Pointer(ArrayToPointer))
  using: _341@Mir(bb57[10])
  _339 = move _340 as *const i8 (PtrToPtr)
  using: _340@Mir(bb57[11])
  _329 = __assert_rtn(move _330, move _334, move _338, move _339)
  using: _330@Mir(bb57[3]), _334@Mir(bb57[7]), _338@Mir(bb57[8]), _339@Mir(bb57[12])
bb58:
  _346 = ((*_13).5: *mut i8)
  using: _13@Mir(bb1[1])
  _345 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _346) -> bb59
  using: _346@Mir(bb58[0])
bb59:
  _344 = move _345 as i32 (IntToInt)
  using: _345@Mir(bb58[1])
  _343 = move _344 as i64 (IntToInt)
  using: _344@Mir(bb59[0])
  switchInt(move _343) -> [0: bb61, otherwise: bb60]
  using: _343@Mir(bb59[1])
bb60:
  _351 = const b"main\x00"
  using: 
  _350 = &raw const (*_351)
  using: _351@Mir(bb60[0])
  _349 = move _350 as *const u8 (Pointer(ArrayToPointer))
  using: _350@Mir(bb60[1])
  _348 = move _349 as *const i8 (PtrToPtr)
  using: _349@Mir(bb60[2])
  _355 = const b"test.c\x00"
  using: 
  _354 = &raw const (*_355)
  using: _355@Mir(bb60[4])
  _353 = move _354 as *const u8 (Pointer(ArrayToPointer))
  using: _354@Mir(bb60[5])
  _352 = move _353 as *const i8 (PtrToPtr)
  using: _353@Mir(bb60[6])
  _356 = const 38_i32
  using: 
  _360 = const b"gh_parsed->pathname\x00"
  using: 
  _359 = &raw const (*_360)
  using: _360@Mir(bb60[9])
  _358 = move _359 as *const u8 (Pointer(ArrayToPointer))
  using: _359@Mir(bb60[10])
  _357 = move _358 as *const i8 (PtrToPtr)
  using: _358@Mir(bb60[11])
  _347 = __assert_rtn(move _348, move _352, move _356, move _357)
  using: _348@Mir(bb60[3]), _352@Mir(bb60[7]), _356@Mir(bb60[8]), _357@Mir(bb60[12])
bb61:
  _364 = ((*_13).7: *mut i8)
  using: _13@Mir(bb1[1])
  _363 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _364) -> bb62
  using: _364@Mir(bb61[0])
bb62:
  _362 = move _363 as i32 (IntToInt)
  using: _363@Mir(bb61[1])
  _361 = move _362 as i64 (IntToInt)
  using: _362@Mir(bb62[0])
  switchInt(move _361) -> [0: bb64, otherwise: bb63]
  using: _361@Mir(bb62[1])
bb63:
  _369 = const b"main\x00"
  using: 
  _368 = &raw const (*_369)
  using: _369@Mir(bb63[0])
  _367 = move _368 as *const u8 (Pointer(ArrayToPointer))
  using: _368@Mir(bb63[1])
  _366 = move _367 as *const i8 (PtrToPtr)
  using: _367@Mir(bb63[2])
  _373 = const b"test.c\x00"
  using: 
  _372 = &raw const (*_373)
  using: _373@Mir(bb63[4])
  _371 = move _372 as *const u8 (Pointer(ArrayToPointer))
  using: _372@Mir(bb63[5])
  _370 = move _371 as *const i8 (PtrToPtr)
  using: _371@Mir(bb63[6])
  _374 = const 39_i32
  using: 
  _378 = const b"gh_parsed->path\x00"
  using: 
  _377 = &raw const (*_378)
  using: _378@Mir(bb63[9])
  _376 = move _377 as *const u8 (Pointer(ArrayToPointer))
  using: _377@Mir(bb63[10])
  _375 = move _376 as *const i8 (PtrToPtr)
  using: _376@Mir(bb63[11])
  _365 = __assert_rtn(move _366, move _370, move _374, move _375)
  using: _366@Mir(bb63[3]), _370@Mir(bb63[7]), _374@Mir(bb63[8]), _375@Mir(bb63[12])
bb64:
  _387 = const b"http\x00"
  using: 
  _386 = &raw const (*_387)
  using: _387@Mir(bb64[0])
  _385 = move _386 as *const u8 (Pointer(ArrayToPointer))
  using: _386@Mir(bb64[1])
  _384 = move _385 as *const i8 (PtrToPtr)
  using: _385@Mir(bb64[2])
  _383 = move _384 as *mut i8 (PtrToPtr)
  using: _384@Mir(bb64[3])
  _382 = url_is_protocol(move _383) -> bb65
  using: _383@Mir(bb64[4])
bb65:
  _381 = Not(move _382)
  using: _382@Mir(bb64[5])
  _380 = move _381 as i32 (IntToInt)
  using: _381@Mir(bb65[0])
  _379 = move _380 as i64 (IntToInt)
  using: _380@Mir(bb65[1])
  switchInt(move _379) -> [0: bb67, otherwise: bb66]
  using: _379@Mir(bb65[2])
bb66:
  _392 = const b"main\x00"
  using: 
  _391 = &raw const (*_392)
  using: _392@Mir(bb66[0])
  _390 = move _391 as *const u8 (Pointer(ArrayToPointer))
  using: _391@Mir(bb66[1])
  _389 = move _390 as *const i8 (PtrToPtr)
  using: _390@Mir(bb66[2])
  _396 = const b"test.c\x00"
  using: 
  _395 = &raw const (*_396)
  using: _396@Mir(bb66[4])
  _394 = move _395 as *const u8 (Pointer(ArrayToPointer))
  using: _395@Mir(bb66[5])
  _393 = move _394 as *const i8 (PtrToPtr)
  using: _394@Mir(bb66[6])
  _397 = const 41_i32
  using: 
  _401 = const b"url_is_protocol(\"http\")\x00"
  using: 
  _400 = &raw const (*_401)
  using: _401@Mir(bb66[9])
  _399 = move _400 as *const u8 (Pointer(ArrayToPointer))
  using: _400@Mir(bb66[10])
  _398 = move _399 as *const i8 (PtrToPtr)
  using: _399@Mir(bb66[11])
  _388 = __assert_rtn(move _389, move _393, move _397, move _398)
  using: _389@Mir(bb66[3]), _393@Mir(bb66[7]), _397@Mir(bb66[8]), _398@Mir(bb66[12])
bb67:
  _410 = const b"https\x00"
  using: 
  _409 = &raw const (*_410)
  using: _410@Mir(bb67[0])
  _408 = move _409 as *const u8 (Pointer(ArrayToPointer))
  using: _409@Mir(bb67[1])
  _407 = move _408 as *const i8 (PtrToPtr)
  using: _408@Mir(bb67[2])
  _406 = move _407 as *mut i8 (PtrToPtr)
  using: _407@Mir(bb67[3])
  _405 = url_is_protocol(move _406) -> bb68
  using: _406@Mir(bb67[4])
bb68:
  _404 = Not(move _405)
  using: _405@Mir(bb67[5])
  _403 = move _404 as i32 (IntToInt)
  using: _404@Mir(bb68[0])
  _402 = move _403 as i64 (IntToInt)
  using: _403@Mir(bb68[1])
  switchInt(move _402) -> [0: bb70, otherwise: bb69]
  using: _402@Mir(bb68[2])
bb69:
  _415 = const b"main\x00"
  using: 
  _414 = &raw const (*_415)
  using: _415@Mir(bb69[0])
  _413 = move _414 as *const u8 (Pointer(ArrayToPointer))
  using: _414@Mir(bb69[1])
  _412 = move _413 as *const i8 (PtrToPtr)
  using: _413@Mir(bb69[2])
  _419 = const b"test.c\x00"
  using: 
  _418 = &raw const (*_419)
  using: _419@Mir(bb69[4])
  _417 = move _418 as *const u8 (Pointer(ArrayToPointer))
  using: _418@Mir(bb69[5])
  _416 = move _417 as *const i8 (PtrToPtr)
  using: _417@Mir(bb69[6])
  _420 = const 42_i32
  using: 
  _424 = const b"url_is_protocol(\"https\")\x00"
  using: 
  _423 = &raw const (*_424)
  using: _424@Mir(bb69[9])
  _422 = move _423 as *const u8 (Pointer(ArrayToPointer))
  using: _423@Mir(bb69[10])
  _421 = move _422 as *const i8 (PtrToPtr)
  using: _422@Mir(bb69[11])
  _411 = __assert_rtn(move _412, move _416, move _420, move _421)
  using: _412@Mir(bb69[3]), _416@Mir(bb69[7]), _420@Mir(bb69[8]), _421@Mir(bb69[12])
bb70:
  _433 = const b"git\x00"
  using: 
  _432 = &raw const (*_433)
  using: _433@Mir(bb70[0])
  _431 = move _432 as *const u8 (Pointer(ArrayToPointer))
  using: _432@Mir(bb70[1])
  _430 = move _431 as *const i8 (PtrToPtr)
  using: _431@Mir(bb70[2])
  _429 = move _430 as *mut i8 (PtrToPtr)
  using: _430@Mir(bb70[3])
  _428 = url_is_protocol(move _429) -> bb71
  using: _429@Mir(bb70[4])
bb71:
  _427 = Not(move _428)
  using: _428@Mir(bb70[5])
  _426 = move _427 as i32 (IntToInt)
  using: _427@Mir(bb71[0])
  _425 = move _426 as i64 (IntToInt)
  using: _426@Mir(bb71[1])
  switchInt(move _425) -> [0: bb73, otherwise: bb72]
  using: _425@Mir(bb71[2])
bb72:
  _438 = const b"main\x00"
  using: 
  _437 = &raw const (*_438)
  using: _438@Mir(bb72[0])
  _436 = move _437 as *const u8 (Pointer(ArrayToPointer))
  using: _437@Mir(bb72[1])
  _435 = move _436 as *const i8 (PtrToPtr)
  using: _436@Mir(bb72[2])
  _442 = const b"test.c\x00"
  using: 
  _441 = &raw const (*_442)
  using: _442@Mir(bb72[4])
  _440 = move _441 as *const u8 (Pointer(ArrayToPointer))
  using: _441@Mir(bb72[5])
  _439 = move _440 as *const i8 (PtrToPtr)
  using: _440@Mir(bb72[6])
  _443 = const 43_i32
  using: 
  _447 = const b"url_is_protocol(\"git\")\x00"
  using: 
  _446 = &raw const (*_447)
  using: _447@Mir(bb72[9])
  _445 = move _446 as *const u8 (Pointer(ArrayToPointer))
  using: _446@Mir(bb72[10])
  _444 = move _445 as *const i8 (PtrToPtr)
  using: _445@Mir(bb72[11])
  _434 = __assert_rtn(move _435, move _439, move _443, move _444)
  using: _435@Mir(bb72[3]), _439@Mir(bb72[7]), _443@Mir(bb72[8]), _444@Mir(bb72[12])
bb73:
  _456 = const b"ssh\x00"
  using: 
  _455 = &raw const (*_456)
  using: _456@Mir(bb73[0])
  _454 = move _455 as *const u8 (Pointer(ArrayToPointer))
  using: _455@Mir(bb73[1])
  _453 = move _454 as *const i8 (PtrToPtr)
  using: _454@Mir(bb73[2])
  _452 = move _453 as *mut i8 (PtrToPtr)
  using: _453@Mir(bb73[3])
  _451 = url_is_protocol(move _452) -> bb74
  using: _452@Mir(bb73[4])
bb74:
  _450 = Not(move _451)
  using: _451@Mir(bb73[5])
  _449 = move _450 as i32 (IntToInt)
  using: _450@Mir(bb74[0])
  _448 = move _449 as i64 (IntToInt)
  using: _449@Mir(bb74[1])
  switchInt(move _448) -> [0: bb76, otherwise: bb75]
  using: _448@Mir(bb74[2])
bb75:
  _461 = const b"main\x00"
  using: 
  _460 = &raw const (*_461)
  using: _461@Mir(bb75[0])
  _459 = move _460 as *const u8 (Pointer(ArrayToPointer))
  using: _460@Mir(bb75[1])
  _458 = move _459 as *const i8 (PtrToPtr)
  using: _459@Mir(bb75[2])
  _465 = const b"test.c\x00"
  using: 
  _464 = &raw const (*_465)
  using: _465@Mir(bb75[4])
  _463 = move _464 as *const u8 (Pointer(ArrayToPointer))
  using: _464@Mir(bb75[5])
  _462 = move _463 as *const i8 (PtrToPtr)
  using: _463@Mir(bb75[6])
  _466 = const 44_i32
  using: 
  _470 = const b"url_is_protocol(\"ssh\")\x00"
  using: 
  _469 = &raw const (*_470)
  using: _470@Mir(bb75[9])
  _468 = move _469 as *const u8 (Pointer(ArrayToPointer))
  using: _469@Mir(bb75[10])
  _467 = move _468 as *const i8 (PtrToPtr)
  using: _468@Mir(bb75[11])
  _457 = __assert_rtn(move _458, move _462, move _466, move _467)
  using: _458@Mir(bb75[3]), _462@Mir(bb75[7]), _466@Mir(bb75[8]), _467@Mir(bb75[12])
bb76:
  _479 = const b"sftp\x00"
  using: 
  _478 = &raw const (*_479)
  using: _479@Mir(bb76[0])
  _477 = move _478 as *const u8 (Pointer(ArrayToPointer))
  using: _478@Mir(bb76[1])
  _476 = move _477 as *const i8 (PtrToPtr)
  using: _477@Mir(bb76[2])
  _475 = move _476 as *mut i8 (PtrToPtr)
  using: _476@Mir(bb76[3])
  _474 = url_is_protocol(move _475) -> bb77
  using: _475@Mir(bb76[4])
bb77:
  _473 = Not(move _474)
  using: _474@Mir(bb76[5])
  _472 = move _473 as i32 (IntToInt)
  using: _473@Mir(bb77[0])
  _471 = move _472 as i64 (IntToInt)
  using: _472@Mir(bb77[1])
  switchInt(move _471) -> [0: bb79, otherwise: bb78]
  using: _471@Mir(bb77[2])
bb78:
  _484 = const b"main\x00"
  using: 
  _483 = &raw const (*_484)
  using: _484@Mir(bb78[0])
  _482 = move _483 as *const u8 (Pointer(ArrayToPointer))
  using: _483@Mir(bb78[1])
  _481 = move _482 as *const i8 (PtrToPtr)
  using: _482@Mir(bb78[2])
  _488 = const b"test.c\x00"
  using: 
  _487 = &raw const (*_488)
  using: _488@Mir(bb78[4])
  _486 = move _487 as *const u8 (Pointer(ArrayToPointer))
  using: _487@Mir(bb78[5])
  _485 = move _486 as *const i8 (PtrToPtr)
  using: _486@Mir(bb78[6])
  _489 = const 45_i32
  using: 
  _493 = const b"url_is_protocol(\"sftp\")\x00"
  using: 
  _492 = &raw const (*_493)
  using: _493@Mir(bb78[9])
  _491 = move _492 as *const u8 (Pointer(ArrayToPointer))
  using: _492@Mir(bb78[10])
  _490 = move _491 as *const i8 (PtrToPtr)
  using: _491@Mir(bb78[11])
  _480 = __assert_rtn(move _481, move _485, move _489, move _490)
  using: _481@Mir(bb78[3]), _485@Mir(bb78[7]), _489@Mir(bb78[8]), _490@Mir(bb78[12])
bb79:
  _502 = const b"ftp\x00"
  using: 
  _501 = &raw const (*_502)
  using: _502@Mir(bb79[0])
  _500 = move _501 as *const u8 (Pointer(ArrayToPointer))
  using: _501@Mir(bb79[1])
  _499 = move _500 as *const i8 (PtrToPtr)
  using: _500@Mir(bb79[2])
  _498 = move _499 as *mut i8 (PtrToPtr)
  using: _499@Mir(bb79[3])
  _497 = url_is_protocol(move _498) -> bb80
  using: _498@Mir(bb79[4])
bb80:
  _496 = Not(move _497)
  using: _497@Mir(bb79[5])
  _495 = move _496 as i32 (IntToInt)
  using: _496@Mir(bb80[0])
  _494 = move _495 as i64 (IntToInt)
  using: _495@Mir(bb80[1])
  switchInt(move _494) -> [0: bb82, otherwise: bb81]
  using: _494@Mir(bb80[2])
bb81:
  _507 = const b"main\x00"
  using: 
  _506 = &raw const (*_507)
  using: _507@Mir(bb81[0])
  _505 = move _506 as *const u8 (Pointer(ArrayToPointer))
  using: _506@Mir(bb81[1])
  _504 = move _505 as *const i8 (PtrToPtr)
  using: _505@Mir(bb81[2])
  _511 = const b"test.c\x00"
  using: 
  _510 = &raw const (*_511)
  using: _511@Mir(bb81[4])
  _509 = move _510 as *const u8 (Pointer(ArrayToPointer))
  using: _510@Mir(bb81[5])
  _508 = move _509 as *const i8 (PtrToPtr)
  using: _509@Mir(bb81[6])
  _512 = const 46_i32
  using: 
  _516 = const b"url_is_protocol(\"ftp\")\x00"
  using: 
  _515 = &raw const (*_516)
  using: _516@Mir(bb81[9])
  _514 = move _515 as *const u8 (Pointer(ArrayToPointer))
  using: _515@Mir(bb81[10])
  _513 = move _514 as *const i8 (PtrToPtr)
  using: _514@Mir(bb81[11])
  _503 = __assert_rtn(move _504, move _508, move _512, move _513)
  using: _504@Mir(bb81[3]), _508@Mir(bb81[7]), _512@Mir(bb81[8]), _513@Mir(bb81[12])
bb82:
  _525 = const b"javascript\x00"
  using: 
  _524 = &raw const (*_525)
  using: _525@Mir(bb82[0])
  _523 = move _524 as *const u8 (Pointer(ArrayToPointer))
  using: _524@Mir(bb82[1])
  _522 = move _523 as *const i8 (PtrToPtr)
  using: _523@Mir(bb82[2])
  _521 = move _522 as *mut i8 (PtrToPtr)
  using: _522@Mir(bb82[3])
  _520 = url_is_protocol(move _521) -> bb83
  using: _521@Mir(bb82[4])
bb83:
  _519 = Not(move _520)
  using: _520@Mir(bb82[5])
  _518 = move _519 as i32 (IntToInt)
  using: _519@Mir(bb83[0])
  _517 = move _518 as i64 (IntToInt)
  using: _518@Mir(bb83[1])
  switchInt(move _517) -> [0: bb85, otherwise: bb84]
  using: _517@Mir(bb83[2])
bb84:
  _530 = const b"main\x00"
  using: 
  _529 = &raw const (*_530)
  using: _530@Mir(bb84[0])
  _528 = move _529 as *const u8 (Pointer(ArrayToPointer))
  using: _529@Mir(bb84[1])
  _527 = move _528 as *const i8 (PtrToPtr)
  using: _528@Mir(bb84[2])
  _534 = const b"test.c\x00"
  using: 
  _533 = &raw const (*_534)
  using: _534@Mir(bb84[4])
  _532 = move _533 as *const u8 (Pointer(ArrayToPointer))
  using: _533@Mir(bb84[5])
  _531 = move _532 as *const i8 (PtrToPtr)
  using: _532@Mir(bb84[6])
  _535 = const 47_i32
  using: 
  _539 = const b"url_is_protocol(\"javascript\")\x00"
  using: 
  _538 = &raw const (*_539)
  using: _539@Mir(bb84[9])
  _537 = move _538 as *const u8 (Pointer(ArrayToPointer))
  using: _538@Mir(bb84[10])
  _536 = move _537 as *const i8 (PtrToPtr)
  using: _537@Mir(bb84[11])
  _526 = __assert_rtn(move _527, move _531, move _535, move _536)
  using: _527@Mir(bb84[3]), _531@Mir(bb84[7]), _535@Mir(bb84[8]), _536@Mir(bb84[12])
bb85:
  _544 = const 0_i32
  using: 
  _549 = const b"http\x00"
  using: 
  _548 = &raw const (*_549)
  using: _549@Mir(bb85[1])
  _547 = move _548 as *const u8 (Pointer(ArrayToPointer))
  using: _548@Mir(bb85[2])
  _546 = move _547 as *const i8 (PtrToPtr)
  using: _547@Mir(bb85[3])
  _552 = _6
  using: _6@Mir(bb0[9])
  _551 = url_get_protocol(move _552) -> bb86
  using: _552@Mir(bb85[5])
bb86:
  _550 = move _551 as *const i8 (Pointer(MutToConstPointer))
  using: _551@Mir(bb85[6])
  _545 = strcmp(move _546, move _550) -> bb87
  using: _546@Mir(bb85[4]), _550@Mir(bb86[0])
bb87:
  _543 = Eq(move _544, move _545)
  using: _544@Mir(bb85[0]), _545@Mir(bb86[1])
  _542 = Not(move _543)
  using: _543@Mir(bb87[0])
  _541 = move _542 as i32 (IntToInt)
  using: _542@Mir(bb87[1])
  _540 = move _541 as i64 (IntToInt)
  using: _541@Mir(bb87[2])
  switchInt(move _540) -> [0: bb89, otherwise: bb88]
  using: _540@Mir(bb87[3])
bb88:
  _557 = const b"main\x00"
  using: 
  _556 = &raw const (*_557)
  using: _557@Mir(bb88[0])
  _555 = move _556 as *const u8 (Pointer(ArrayToPointer))
  using: _556@Mir(bb88[1])
  _554 = move _555 as *const i8 (PtrToPtr)
  using: _555@Mir(bb88[2])
  _561 = const b"test.c\x00"
  using: 
  _560 = &raw const (*_561)
  using: _561@Mir(bb88[4])
  _559 = move _560 as *const u8 (Pointer(ArrayToPointer))
  using: _560@Mir(bb88[5])
  _558 = move _559 as *const i8 (PtrToPtr)
  using: _559@Mir(bb88[6])
  _562 = const 49_i32
  using: 
  _566 = const b"0 == strcmp(\"http\", url_get_protocol(url))\x00"
  using: 
  _565 = &raw const (*_566)
  using: _566@Mir(bb88[9])
  _564 = move _565 as *const u8 (Pointer(ArrayToPointer))
  using: _565@Mir(bb88[10])
  _563 = move _564 as *const i8 (PtrToPtr)
  using: _564@Mir(bb88[11])
  _553 = __assert_rtn(move _554, move _558, move _562, move _563)
  using: _554@Mir(bb88[3]), _558@Mir(bb88[7]), _562@Mir(bb88[8]), _563@Mir(bb88[12])
bb89:
  _571 = const 0_i32
  using: 
  _576 = const b"user:pass\x00"
  using: 
  _575 = &raw const (*_576)
  using: _576@Mir(bb89[1])
  _574 = move _575 as *const u8 (Pointer(ArrayToPointer))
  using: _575@Mir(bb89[2])
  _573 = move _574 as *const i8 (PtrToPtr)
  using: _574@Mir(bb89[3])
  _579 = _6
  using: _6@Mir(bb0[9])
  _578 = url_get_auth(move _579) -> bb90
  using: _579@Mir(bb89[5])
bb90:
  _577 = move _578 as *const i8 (Pointer(MutToConstPointer))
  using: _578@Mir(bb89[6])
  _572 = strcmp(move _573, move _577) -> bb91
  using: _573@Mir(bb89[4]), _577@Mir(bb90[0])
bb91:
  _570 = Eq(move _571, move _572)
  using: _571@Mir(bb89[0]), _572@Mir(bb90[1])
  _569 = Not(move _570)
  using: _570@Mir(bb91[0])
  _568 = move _569 as i32 (IntToInt)
  using: _569@Mir(bb91[1])
  _567 = move _568 as i64 (IntToInt)
  using: _568@Mir(bb91[2])
  switchInt(move _567) -> [0: bb93, otherwise: bb92]
  using: _567@Mir(bb91[3])
bb92:
  _584 = const b"main\x00"
  using: 
  _583 = &raw const (*_584)
  using: _584@Mir(bb92[0])
  _582 = move _583 as *const u8 (Pointer(ArrayToPointer))
  using: _583@Mir(bb92[1])
  _581 = move _582 as *const i8 (PtrToPtr)
  using: _582@Mir(bb92[2])
  _588 = const b"test.c\x00"
  using: 
  _587 = &raw const (*_588)
  using: _588@Mir(bb92[4])
  _586 = move _587 as *const u8 (Pointer(ArrayToPointer))
  using: _587@Mir(bb92[5])
  _585 = move _586 as *const i8 (PtrToPtr)
  using: _586@Mir(bb92[6])
  _589 = const 50_i32
  using: 
  _593 = const b"0 == strcmp(\"user:pass\", url_get_auth(url))\x00"
  using: 
  _592 = &raw const (*_593)
  using: _593@Mir(bb92[9])
  _591 = move _592 as *const u8 (Pointer(ArrayToPointer))
  using: _592@Mir(bb92[10])
  _590 = move _591 as *const i8 (PtrToPtr)
  using: _591@Mir(bb92[11])
  _580 = __assert_rtn(move _581, move _585, move _589, move _590)
  using: _581@Mir(bb92[3]), _585@Mir(bb92[7]), _589@Mir(bb92[8]), _590@Mir(bb92[12])
bb93:
  _598 = const 0_i32
  using: 
  _603 = const b"subdomain.host.com:8080\x00"
  using: 
  _602 = &raw const (*_603)
  using: _603@Mir(bb93[1])
  _601 = move _602 as *const u8 (Pointer(ArrayToPointer))
  using: _602@Mir(bb93[2])
  _600 = move _601 as *const i8 (PtrToPtr)
  using: _601@Mir(bb93[3])
  _606 = _6
  using: _6@Mir(bb0[9])
  _605 = url_get_hostname(move _606) -> bb94
  using: _606@Mir(bb93[5])
bb94:
  _604 = move _605 as *const i8 (Pointer(MutToConstPointer))
  using: _605@Mir(bb93[6])
  _599 = strcmp(move _600, move _604) -> bb95
  using: _600@Mir(bb93[4]), _604@Mir(bb94[0])
bb95:
  _597 = Eq(move _598, move _599)
  using: _598@Mir(bb93[0]), _599@Mir(bb94[1])
  _596 = Not(move _597)
  using: _597@Mir(bb95[0])
  _595 = move _596 as i32 (IntToInt)
  using: _596@Mir(bb95[1])
  _594 = move _595 as i64 (IntToInt)
  using: _595@Mir(bb95[2])
  switchInt(move _594) -> [0: bb97, otherwise: bb96]
  using: _594@Mir(bb95[3])
bb96:
  _611 = const b"main\x00"
  using: 
  _610 = &raw const (*_611)
  using: _611@Mir(bb96[0])
  _609 = move _610 as *const u8 (Pointer(ArrayToPointer))
  using: _610@Mir(bb96[1])
  _608 = move _609 as *const i8 (PtrToPtr)
  using: _609@Mir(bb96[2])
  _615 = const b"test.c\x00"
  using: 
  _614 = &raw const (*_615)
  using: _615@Mir(bb96[4])
  _613 = move _614 as *const u8 (Pointer(ArrayToPointer))
  using: _614@Mir(bb96[5])
  _612 = move _613 as *const i8 (PtrToPtr)
  using: _613@Mir(bb96[6])
  _616 = const 51_i32
  using: 
  _620 = const b"0 == strcmp(\"subdomain.host.com:8080\", url_get_hostname(url))\x00"
  using: 
  _619 = &raw const (*_620)
  using: _620@Mir(bb96[9])
  _618 = move _619 as *const u8 (Pointer(ArrayToPointer))
  using: _619@Mir(bb96[10])
  _617 = move _618 as *const i8 (PtrToPtr)
  using: _618@Mir(bb96[11])
  _607 = __assert_rtn(move _608, move _612, move _616, move _617)
  using: _608@Mir(bb96[3]), _612@Mir(bb96[7]), _616@Mir(bb96[8]), _617@Mir(bb96[12])
bb97:
  _625 = const 0_i32
  using: 
  _630 = const b"subdomain.host.com\x00"
  using: 
  _629 = &raw const (*_630)
  using: _630@Mir(bb97[1])
  _628 = move _629 as *const u8 (Pointer(ArrayToPointer))
  using: _629@Mir(bb97[2])
  _627 = move _628 as *const i8 (PtrToPtr)
  using: _628@Mir(bb97[3])
  _633 = _6
  using: _6@Mir(bb0[9])
  _632 = url_get_host(move _633) -> bb98
  using: _633@Mir(bb97[5])
bb98:
  _631 = move _632 as *const i8 (Pointer(MutToConstPointer))
  using: _632@Mir(bb97[6])
  _626 = strcmp(move _627, move _631) -> bb99
  using: _627@Mir(bb97[4]), _631@Mir(bb98[0])
bb99:
  _624 = Eq(move _625, move _626)
  using: _625@Mir(bb97[0]), _626@Mir(bb98[1])
  _623 = Not(move _624)
  using: _624@Mir(bb99[0])
  _622 = move _623 as i32 (IntToInt)
  using: _623@Mir(bb99[1])
  _621 = move _622 as i64 (IntToInt)
  using: _622@Mir(bb99[2])
  switchInt(move _621) -> [0: bb101, otherwise: bb100]
  using: _621@Mir(bb99[3])
bb100:
  _638 = const b"main\x00"
  using: 
  _637 = &raw const (*_638)
  using: _638@Mir(bb100[0])
  _636 = move _637 as *const u8 (Pointer(ArrayToPointer))
  using: _637@Mir(bb100[1])
  _635 = move _636 as *const i8 (PtrToPtr)
  using: _636@Mir(bb100[2])
  _642 = const b"test.c\x00"
  using: 
  _641 = &raw const (*_642)
  using: _642@Mir(bb100[4])
  _640 = move _641 as *const u8 (Pointer(ArrayToPointer))
  using: _641@Mir(bb100[5])
  _639 = move _640 as *const i8 (PtrToPtr)
  using: _640@Mir(bb100[6])
  _643 = const 52_i32
  using: 
  _647 = const b"0 == strcmp(\"subdomain.host.com\", url_get_host(url))\x00"
  using: 
  _646 = &raw const (*_647)
  using: _647@Mir(bb100[9])
  _645 = move _646 as *const u8 (Pointer(ArrayToPointer))
  using: _646@Mir(bb100[10])
  _644 = move _645 as *const i8 (PtrToPtr)
  using: _645@Mir(bb100[11])
  _634 = __assert_rtn(move _635, move _639, move _643, move _644)
  using: _635@Mir(bb100[3]), _639@Mir(bb100[7]), _643@Mir(bb100[8]), _644@Mir(bb100[12])
bb101:
  _652 = const 0_i32
  using: 
  _657 = const b"/p/a/t/h\x00"
  using: 
  _656 = &raw const (*_657)
  using: _657@Mir(bb101[1])
  _655 = move _656 as *const u8 (Pointer(ArrayToPointer))
  using: _656@Mir(bb101[2])
  _654 = move _655 as *const i8 (PtrToPtr)
  using: _655@Mir(bb101[3])
  _660 = _6
  using: _6@Mir(bb0[9])
  _659 = url_get_pathname(move _660) -> bb102
  using: _660@Mir(bb101[5])
bb102:
  _658 = move _659 as *const i8 (Pointer(MutToConstPointer))
  using: _659@Mir(bb101[6])
  _653 = strcmp(move _654, move _658) -> bb103
  using: _654@Mir(bb101[4]), _658@Mir(bb102[0])
bb103:
  _651 = Eq(move _652, move _653)
  using: _652@Mir(bb101[0]), _653@Mir(bb102[1])
  _650 = Not(move _651)
  using: _651@Mir(bb103[0])
  _649 = move _650 as i32 (IntToInt)
  using: _650@Mir(bb103[1])
  _648 = move _649 as i64 (IntToInt)
  using: _649@Mir(bb103[2])
  switchInt(move _648) -> [0: bb105, otherwise: bb104]
  using: _648@Mir(bb103[3])
bb104:
  _665 = const b"main\x00"
  using: 
  _664 = &raw const (*_665)
  using: _665@Mir(bb104[0])
  _663 = move _664 as *const u8 (Pointer(ArrayToPointer))
  using: _664@Mir(bb104[1])
  _662 = move _663 as *const i8 (PtrToPtr)
  using: _663@Mir(bb104[2])
  _669 = const b"test.c\x00"
  using: 
  _668 = &raw const (*_669)
  using: _669@Mir(bb104[4])
  _667 = move _668 as *const u8 (Pointer(ArrayToPointer))
  using: _668@Mir(bb104[5])
  _666 = move _667 as *const i8 (PtrToPtr)
  using: _667@Mir(bb104[6])
  _670 = const 53_i32
  using: 
  _674 = const b"0 == strcmp(\"/p/a/t/h\", url_get_pathname(url))\x00"
  using: 
  _673 = &raw const (*_674)
  using: _674@Mir(bb104[9])
  _672 = move _673 as *const u8 (Pointer(ArrayToPointer))
  using: _673@Mir(bb104[10])
  _671 = move _672 as *const i8 (PtrToPtr)
  using: _672@Mir(bb104[11])
  _661 = __assert_rtn(move _662, move _666, move _670, move _671)
  using: _662@Mir(bb104[3]), _666@Mir(bb104[7]), _670@Mir(bb104[8]), _671@Mir(bb104[12])
bb105:
  _679 = const 0_i32
  using: 
  _684 = const b"/p/a/t/h?query=string#hash\x00"
  using: 
  _683 = &raw const (*_684)
  using: _684@Mir(bb105[1])
  _682 = move _683 as *const u8 (Pointer(ArrayToPointer))
  using: _683@Mir(bb105[2])
  _681 = move _682 as *const i8 (PtrToPtr)
  using: _682@Mir(bb105[3])
  _687 = _6
  using: _6@Mir(bb0[9])
  _686 = url_get_path(move _687) -> bb106
  using: _687@Mir(bb105[5])
bb106:
  _685 = move _686 as *const i8 (Pointer(MutToConstPointer))
  using: _686@Mir(bb105[6])
  _680 = strcmp(move _681, move _685) -> bb107
  using: _681@Mir(bb105[4]), _685@Mir(bb106[0])
bb107:
  _678 = Eq(move _679, move _680)
  using: _679@Mir(bb105[0]), _680@Mir(bb106[1])
  _677 = Not(move _678)
  using: _678@Mir(bb107[0])
  _676 = move _677 as i32 (IntToInt)
  using: _677@Mir(bb107[1])
  _675 = move _676 as i64 (IntToInt)
  using: _676@Mir(bb107[2])
  switchInt(move _675) -> [0: bb109, otherwise: bb108]
  using: _675@Mir(bb107[3])
bb108:
  _692 = const b"main\x00"
  using: 
  _691 = &raw const (*_692)
  using: _692@Mir(bb108[0])
  _690 = move _691 as *const u8 (Pointer(ArrayToPointer))
  using: _691@Mir(bb108[1])
  _689 = move _690 as *const i8 (PtrToPtr)
  using: _690@Mir(bb108[2])
  _696 = const b"test.c\x00"
  using: 
  _695 = &raw const (*_696)
  using: _696@Mir(bb108[4])
  _694 = move _695 as *const u8 (Pointer(ArrayToPointer))
  using: _695@Mir(bb108[5])
  _693 = move _694 as *const i8 (PtrToPtr)
  using: _694@Mir(bb108[6])
  _697 = const 54_i32
  using: 
  _701 = const b"0 == strcmp(\"/p/a/t/h?query=string#hash\", url_get_path(url))\x00"
  using: 
  _700 = &raw const (*_701)
  using: _701@Mir(bb108[9])
  _699 = move _700 as *const u8 (Pointer(ArrayToPointer))
  using: _700@Mir(bb108[10])
  _698 = move _699 as *const i8 (PtrToPtr)
  using: _699@Mir(bb108[11])
  _688 = __assert_rtn(move _689, move _693, move _697, move _698)
  using: _689@Mir(bb108[3]), _693@Mir(bb108[7]), _697@Mir(bb108[8]), _698@Mir(bb108[12])
bb109:
  _706 = const 0_i32
  using: 
  _711 = const b"?query=string\x00"
  using: 
  _710 = &raw const (*_711)
  using: _711@Mir(bb109[1])
  _709 = move _710 as *const u8 (Pointer(ArrayToPointer))
  using: _710@Mir(bb109[2])
  _708 = move _709 as *const i8 (PtrToPtr)
  using: _709@Mir(bb109[3])
  _714 = _6
  using: _6@Mir(bb0[9])
  _713 = url_get_search(move _714) -> bb110
  using: _714@Mir(bb109[5])
bb110:
  _712 = move _713 as *const i8 (Pointer(MutToConstPointer))
  using: _713@Mir(bb109[6])
  _707 = strcmp(move _708, move _712) -> bb111
  using: _708@Mir(bb109[4]), _712@Mir(bb110[0])
bb111:
  _705 = Eq(move _706, move _707)
  using: _706@Mir(bb109[0]), _707@Mir(bb110[1])
  _704 = Not(move _705)
  using: _705@Mir(bb111[0])
  _703 = move _704 as i32 (IntToInt)
  using: _704@Mir(bb111[1])
  _702 = move _703 as i64 (IntToInt)
  using: _703@Mir(bb111[2])
  switchInt(move _702) -> [0: bb113, otherwise: bb112]
  using: _702@Mir(bb111[3])
bb112:
  _719 = const b"main\x00"
  using: 
  _718 = &raw const (*_719)
  using: _719@Mir(bb112[0])
  _717 = move _718 as *const u8 (Pointer(ArrayToPointer))
  using: _718@Mir(bb112[1])
  _716 = move _717 as *const i8 (PtrToPtr)
  using: _717@Mir(bb112[2])
  _723 = const b"test.c\x00"
  using: 
  _722 = &raw const (*_723)
  using: _723@Mir(bb112[4])
  _721 = move _722 as *const u8 (Pointer(ArrayToPointer))
  using: _722@Mir(bb112[5])
  _720 = move _721 as *const i8 (PtrToPtr)
  using: _721@Mir(bb112[6])
  _724 = const 55_i32
  using: 
  _728 = const b"0 == strcmp(\"?query=string\", url_get_search(url))\x00"
  using: 
  _727 = &raw const (*_728)
  using: _728@Mir(bb112[9])
  _726 = move _727 as *const u8 (Pointer(ArrayToPointer))
  using: _727@Mir(bb112[10])
  _725 = move _726 as *const i8 (PtrToPtr)
  using: _726@Mir(bb112[11])
  _715 = __assert_rtn(move _716, move _720, move _724, move _725)
  using: _716@Mir(bb112[3]), _720@Mir(bb112[7]), _724@Mir(bb112[8]), _725@Mir(bb112[12])
bb113:
  _733 = const 0_i32
  using: 
  _738 = const b"query=string\x00"
  using: 
  _737 = &raw const (*_738)
  using: _738@Mir(bb113[1])
  _736 = move _737 as *const u8 (Pointer(ArrayToPointer))
  using: _737@Mir(bb113[2])
  _735 = move _736 as *const i8 (PtrToPtr)
  using: _736@Mir(bb113[3])
  _741 = _6
  using: _6@Mir(bb0[9])
  _740 = url_get_query(move _741) -> bb114
  using: _741@Mir(bb113[5])
bb114:
  _739 = move _740 as *const i8 (Pointer(MutToConstPointer))
  using: _740@Mir(bb113[6])
  _734 = strcmp(move _735, move _739) -> bb115
  using: _735@Mir(bb113[4]), _739@Mir(bb114[0])
bb115:
  _732 = Eq(move _733, move _734)
  using: _733@Mir(bb113[0]), _734@Mir(bb114[1])
  _731 = Not(move _732)
  using: _732@Mir(bb115[0])
  _730 = move _731 as i32 (IntToInt)
  using: _731@Mir(bb115[1])
  _729 = move _730 as i64 (IntToInt)
  using: _730@Mir(bb115[2])
  switchInt(move _729) -> [0: bb117, otherwise: bb116]
  using: _729@Mir(bb115[3])
bb116:
  _746 = const b"main\x00"
  using: 
  _745 = &raw const (*_746)
  using: _746@Mir(bb116[0])
  _744 = move _745 as *const u8 (Pointer(ArrayToPointer))
  using: _745@Mir(bb116[1])
  _743 = move _744 as *const i8 (PtrToPtr)
  using: _744@Mir(bb116[2])
  _750 = const b"test.c\x00"
  using: 
  _749 = &raw const (*_750)
  using: _750@Mir(bb116[4])
  _748 = move _749 as *const u8 (Pointer(ArrayToPointer))
  using: _749@Mir(bb116[5])
  _747 = move _748 as *const i8 (PtrToPtr)
  using: _748@Mir(bb116[6])
  _751 = const 56_i32
  using: 
  _755 = const b"0 == strcmp(\"query=string\", url_get_query(url))\x00"
  using: 
  _754 = &raw const (*_755)
  using: _755@Mir(bb116[9])
  _753 = move _754 as *const u8 (Pointer(ArrayToPointer))
  using: _754@Mir(bb116[10])
  _752 = move _753 as *const i8 (PtrToPtr)
  using: _753@Mir(bb116[11])
  _742 = __assert_rtn(move _743, move _747, move _751, move _752)
  using: _743@Mir(bb116[3]), _747@Mir(bb116[7]), _751@Mir(bb116[8]), _752@Mir(bb116[12])
bb117:
  _760 = const 0_i32
  using: 
  _765 = const b"#hash\x00"
  using: 
  _764 = &raw const (*_765)
  using: _765@Mir(bb117[1])
  _763 = move _764 as *const u8 (Pointer(ArrayToPointer))
  using: _764@Mir(bb117[2])
  _762 = move _763 as *const i8 (PtrToPtr)
  using: _763@Mir(bb117[3])
  _768 = _6
  using: _6@Mir(bb0[9])
  _767 = url_get_hash(move _768) -> bb118
  using: _768@Mir(bb117[5])
bb118:
  _766 = move _767 as *const i8 (Pointer(MutToConstPointer))
  using: _767@Mir(bb117[6])
  _761 = strcmp(move _762, move _766) -> bb119
  using: _762@Mir(bb117[4]), _766@Mir(bb118[0])
bb119:
  _759 = Eq(move _760, move _761)
  using: _760@Mir(bb117[0]), _761@Mir(bb118[1])
  _758 = Not(move _759)
  using: _759@Mir(bb119[0])
  _757 = move _758 as i32 (IntToInt)
  using: _758@Mir(bb119[1])
  _756 = move _757 as i64 (IntToInt)
  using: _757@Mir(bb119[2])
  switchInt(move _756) -> [0: bb121, otherwise: bb120]
  using: _756@Mir(bb119[3])
bb120:
  _773 = const b"main\x00"
  using: 
  _772 = &raw const (*_773)
  using: _773@Mir(bb120[0])
  _771 = move _772 as *const u8 (Pointer(ArrayToPointer))
  using: _772@Mir(bb120[1])
  _770 = move _771 as *const i8 (PtrToPtr)
  using: _771@Mir(bb120[2])
  _777 = const b"test.c\x00"
  using: 
  _776 = &raw const (*_777)
  using: _777@Mir(bb120[4])
  _775 = move _776 as *const u8 (Pointer(ArrayToPointer))
  using: _776@Mir(bb120[5])
  _774 = move _775 as *const i8 (PtrToPtr)
  using: _775@Mir(bb120[6])
  _778 = const 57_i32
  using: 
  _782 = const b"0 == strcmp(\"#hash\", url_get_hash(url))\x00"
  using: 
  _781 = &raw const (*_782)
  using: _782@Mir(bb120[9])
  _780 = move _781 as *const u8 (Pointer(ArrayToPointer))
  using: _781@Mir(bb120[10])
  _779 = move _780 as *const i8 (PtrToPtr)
  using: _780@Mir(bb120[11])
  _769 = __assert_rtn(move _770, move _774, move _778, move _779)
  using: _770@Mir(bb120[3]), _774@Mir(bb120[7]), _778@Mir(bb120[8]), _779@Mir(bb120[12])
bb121:
  _787 = const 0_i32
  using: 
  _792 = const b"8080\x00"
  using: 
  _791 = &raw const (*_792)
  using: _792@Mir(bb121[1])
  _790 = move _791 as *const u8 (Pointer(ArrayToPointer))
  using: _791@Mir(bb121[2])
  _789 = move _790 as *const i8 (PtrToPtr)
  using: _790@Mir(bb121[3])
  _795 = _6
  using: _6@Mir(bb0[9])
  _794 = url_get_port(move _795) -> bb122
  using: _795@Mir(bb121[5])
bb122:
  _793 = move _794 as *const i8 (Pointer(MutToConstPointer))
  using: _794@Mir(bb121[6])
  _788 = strcmp(move _789, move _793) -> bb123
  using: _789@Mir(bb121[4]), _793@Mir(bb122[0])
bb123:
  _786 = Eq(move _787, move _788)
  using: _787@Mir(bb121[0]), _788@Mir(bb122[1])
  _785 = Not(move _786)
  using: _786@Mir(bb123[0])
  _784 = move _785 as i32 (IntToInt)
  using: _785@Mir(bb123[1])
  _783 = move _784 as i64 (IntToInt)
  using: _784@Mir(bb123[2])
  switchInt(move _783) -> [0: bb125, otherwise: bb124]
  using: _783@Mir(bb123[3])
bb124:
  _800 = const b"main\x00"
  using: 
  _799 = &raw const (*_800)
  using: _800@Mir(bb124[0])
  _798 = move _799 as *const u8 (Pointer(ArrayToPointer))
  using: _799@Mir(bb124[1])
  _797 = move _798 as *const i8 (PtrToPtr)
  using: _798@Mir(bb124[2])
  _804 = const b"test.c\x00"
  using: 
  _803 = &raw const (*_804)
  using: _804@Mir(bb124[4])
  _802 = move _803 as *const u8 (Pointer(ArrayToPointer))
  using: _803@Mir(bb124[5])
  _801 = move _802 as *const i8 (PtrToPtr)
  using: _802@Mir(bb124[6])
  _805 = const 58_i32
  using: 
  _809 = const b"0 == strcmp(\"8080\", url_get_port(url))\x00"
  using: 
  _808 = &raw const (*_809)
  using: _809@Mir(bb124[9])
  _807 = move _808 as *const u8 (Pointer(ArrayToPointer))
  using: _808@Mir(bb124[10])
  _806 = move _807 as *const i8 (PtrToPtr)
  using: _807@Mir(bb124[11])
  _796 = __assert_rtn(move _797, move _801, move _805, move _806)
  using: _797@Mir(bb124[3]), _801@Mir(bb124[7]), _805@Mir(bb124[8]), _806@Mir(bb124[12])
bb125:
  _814 = const 0_i32
  using: 
  _819 = const b"git\x00"
  using: 
  _818 = &raw const (*_819)
  using: _819@Mir(bb125[1])
  _817 = move _818 as *const u8 (Pointer(ArrayToPointer))
  using: _818@Mir(bb125[2])
  _816 = move _817 as *const i8 (PtrToPtr)
  using: _817@Mir(bb125[3])
  _822 = _1
  using: _1@Mir(bb0[4])
  _821 = url_get_protocol(move _822) -> bb126
  using: _822@Mir(bb125[5])
bb126:
  _820 = move _821 as *const i8 (Pointer(MutToConstPointer))
  using: _821@Mir(bb125[6])
  _815 = strcmp(move _816, move _820) -> bb127
  using: _816@Mir(bb125[4]), _820@Mir(bb126[0])
bb127:
  _813 = Eq(move _814, move _815)
  using: _814@Mir(bb125[0]), _815@Mir(bb126[1])
  _812 = Not(move _813)
  using: _813@Mir(bb127[0])
  _811 = move _812 as i32 (IntToInt)
  using: _812@Mir(bb127[1])
  _810 = move _811 as i64 (IntToInt)
  using: _811@Mir(bb127[2])
  switchInt(move _810) -> [0: bb129, otherwise: bb128]
  using: _810@Mir(bb127[3])
bb128:
  _827 = const b"main\x00"
  using: 
  _826 = &raw const (*_827)
  using: _827@Mir(bb128[0])
  _825 = move _826 as *const u8 (Pointer(ArrayToPointer))
  using: _826@Mir(bb128[1])
  _824 = move _825 as *const i8 (PtrToPtr)
  using: _825@Mir(bb128[2])
  _831 = const b"test.c\x00"
  using: 
  _830 = &raw const (*_831)
  using: _831@Mir(bb128[4])
  _829 = move _830 as *const u8 (Pointer(ArrayToPointer))
  using: _830@Mir(bb128[5])
  _828 = move _829 as *const i8 (PtrToPtr)
  using: _829@Mir(bb128[6])
  _832 = const 60_i32
  using: 
  _836 = const b"0 == strcmp(\"git\", url_get_protocol(gh_url))\x00"
  using: 
  _835 = &raw const (*_836)
  using: _836@Mir(bb128[9])
  _834 = move _835 as *const u8 (Pointer(ArrayToPointer))
  using: _835@Mir(bb128[10])
  _833 = move _834 as *const i8 (PtrToPtr)
  using: _834@Mir(bb128[11])
  _823 = __assert_rtn(move _824, move _828, move _832, move _833)
  using: _824@Mir(bb128[3]), _828@Mir(bb128[7]), _832@Mir(bb128[8]), _833@Mir(bb128[12])
bb129:
  _841 = const 0_i32
  using: 
  _846 = const b"github.com\x00"
  using: 
  _845 = &raw const (*_846)
  using: _846@Mir(bb129[1])
  _844 = move _845 as *const u8 (Pointer(ArrayToPointer))
  using: _845@Mir(bb129[2])
  _843 = move _844 as *const i8 (PtrToPtr)
  using: _844@Mir(bb129[3])
  _849 = _1
  using: _1@Mir(bb0[4])
  _848 = url_get_host(move _849) -> bb130
  using: _849@Mir(bb129[5])
bb130:
  _847 = move _848 as *const i8 (Pointer(MutToConstPointer))
  using: _848@Mir(bb129[6])
  _842 = strcmp(move _843, move _847) -> bb131
  using: _843@Mir(bb129[4]), _847@Mir(bb130[0])
bb131:
  _840 = Eq(move _841, move _842)
  using: _841@Mir(bb129[0]), _842@Mir(bb130[1])
  _839 = Not(move _840)
  using: _840@Mir(bb131[0])
  _838 = move _839 as i32 (IntToInt)
  using: _839@Mir(bb131[1])
  _837 = move _838 as i64 (IntToInt)
  using: _838@Mir(bb131[2])
  switchInt(move _837) -> [0: bb133, otherwise: bb132]
  using: _837@Mir(bb131[3])
bb132:
  _854 = const b"main\x00"
  using: 
  _853 = &raw const (*_854)
  using: _854@Mir(bb132[0])
  _852 = move _853 as *const u8 (Pointer(ArrayToPointer))
  using: _853@Mir(bb132[1])
  _851 = move _852 as *const i8 (PtrToPtr)
  using: _852@Mir(bb132[2])
  _858 = const b"test.c\x00"
  using: 
  _857 = &raw const (*_858)
  using: _858@Mir(bb132[4])
  _856 = move _857 as *const u8 (Pointer(ArrayToPointer))
  using: _857@Mir(bb132[5])
  _855 = move _856 as *const i8 (PtrToPtr)
  using: _856@Mir(bb132[6])
  _859 = const 61_i32
  using: 
  _863 = const b"0 == strcmp(\"github.com\", url_get_host(gh_url))\x00"
  using: 
  _862 = &raw const (*_863)
  using: _863@Mir(bb132[9])
  _861 = move _862 as *const u8 (Pointer(ArrayToPointer))
  using: _862@Mir(bb132[10])
  _860 = move _861 as *const i8 (PtrToPtr)
  using: _861@Mir(bb132[11])
  _850 = __assert_rtn(move _851, move _855, move _859, move _860)
  using: _851@Mir(bb132[3]), _855@Mir(bb132[7]), _859@Mir(bb132[8]), _860@Mir(bb132[12])
bb133:
  _868 = const 0_i32
  using: 
  _873 = const b"github.com\x00"
  using: 
  _872 = &raw const (*_873)
  using: _873@Mir(bb133[1])
  _871 = move _872 as *const u8 (Pointer(ArrayToPointer))
  using: _872@Mir(bb133[2])
  _870 = move _871 as *const i8 (PtrToPtr)
  using: _871@Mir(bb133[3])
  _876 = _1
  using: _1@Mir(bb0[4])
  _875 = url_get_hostname(move _876) -> bb134
  using: _876@Mir(bb133[5])
bb134:
  _874 = move _875 as *const i8 (Pointer(MutToConstPointer))
  using: _875@Mir(bb133[6])
  _869 = strcmp(move _870, move _874) -> bb135
  using: _870@Mir(bb133[4]), _874@Mir(bb134[0])
bb135:
  _867 = Eq(move _868, move _869)
  using: _868@Mir(bb133[0]), _869@Mir(bb134[1])
  _866 = Not(move _867)
  using: _867@Mir(bb135[0])
  _865 = move _866 as i32 (IntToInt)
  using: _866@Mir(bb135[1])
  _864 = move _865 as i64 (IntToInt)
  using: _865@Mir(bb135[2])
  switchInt(move _864) -> [0: bb137, otherwise: bb136]
  using: _864@Mir(bb135[3])
bb136:
  _881 = const b"main\x00"
  using: 
  _880 = &raw const (*_881)
  using: _881@Mir(bb136[0])
  _879 = move _880 as *const u8 (Pointer(ArrayToPointer))
  using: _880@Mir(bb136[1])
  _878 = move _879 as *const i8 (PtrToPtr)
  using: _879@Mir(bb136[2])
  _885 = const b"test.c\x00"
  using: 
  _884 = &raw const (*_885)
  using: _885@Mir(bb136[4])
  _883 = move _884 as *const u8 (Pointer(ArrayToPointer))
  using: _884@Mir(bb136[5])
  _882 = move _883 as *const i8 (PtrToPtr)
  using: _883@Mir(bb136[6])
  _886 = const 62_i32
  using: 
  _890 = const b"0 == strcmp(\"github.com\", url_get_hostname(gh_url))\x00"
  using: 
  _889 = &raw const (*_890)
  using: _890@Mir(bb136[9])
  _888 = move _889 as *const u8 (Pointer(ArrayToPointer))
  using: _889@Mir(bb136[10])
  _887 = move _888 as *const i8 (PtrToPtr)
  using: _888@Mir(bb136[11])
  _877 = __assert_rtn(move _878, move _882, move _886, move _887)
  using: _878@Mir(bb136[3]), _882@Mir(bb136[7]), _886@Mir(bb136[8]), _887@Mir(bb136[12])
bb137:
  _895 = const 0_i32
  using: 
  _900 = const b"git\x00"
  using: 
  _899 = &raw const (*_900)
  using: _900@Mir(bb137[1])
  _898 = move _899 as *const u8 (Pointer(ArrayToPointer))
  using: _899@Mir(bb137[2])
  _897 = move _898 as *const i8 (PtrToPtr)
  using: _898@Mir(bb137[3])
  _903 = _1
  using: _1@Mir(bb0[4])
  _902 = url_get_auth(move _903) -> bb138
  using: _903@Mir(bb137[5])
bb138:
  _901 = move _902 as *const i8 (Pointer(MutToConstPointer))
  using: _902@Mir(bb137[6])
  _896 = strcmp(move _897, move _901) -> bb139
  using: _897@Mir(bb137[4]), _901@Mir(bb138[0])
bb139:
  _894 = Eq(move _895, move _896)
  using: _895@Mir(bb137[0]), _896@Mir(bb138[1])
  _893 = Not(move _894)
  using: _894@Mir(bb139[0])
  _892 = move _893 as i32 (IntToInt)
  using: _893@Mir(bb139[1])
  _891 = move _892 as i64 (IntToInt)
  using: _892@Mir(bb139[2])
  switchInt(move _891) -> [0: bb141, otherwise: bb140]
  using: _891@Mir(bb139[3])
bb140:
  _908 = const b"main\x00"
  using: 
  _907 = &raw const (*_908)
  using: _908@Mir(bb140[0])
  _906 = move _907 as *const u8 (Pointer(ArrayToPointer))
  using: _907@Mir(bb140[1])
  _905 = move _906 as *const i8 (PtrToPtr)
  using: _906@Mir(bb140[2])
  _912 = const b"test.c\x00"
  using: 
  _911 = &raw const (*_912)
  using: _912@Mir(bb140[4])
  _910 = move _911 as *const u8 (Pointer(ArrayToPointer))
  using: _911@Mir(bb140[5])
  _909 = move _910 as *const i8 (PtrToPtr)
  using: _910@Mir(bb140[6])
  _913 = const 63_i32
  using: 
  _917 = const b"0 == strcmp(\"git\", url_get_auth(gh_url))\x00"
  using: 
  _916 = &raw const (*_917)
  using: _917@Mir(bb140[9])
  _915 = move _916 as *const u8 (Pointer(ArrayToPointer))
  using: _916@Mir(bb140[10])
  _914 = move _915 as *const i8 (PtrToPtr)
  using: _915@Mir(bb140[11])
  _904 = __assert_rtn(move _905, move _909, move _913, move _914)
  using: _905@Mir(bb140[3]), _909@Mir(bb140[7]), _913@Mir(bb140[8]), _914@Mir(bb140[12])
bb141:
  _922 = const 0_i32
  using: 
  _927 = const b"jwerle/url.h.git\x00"
  using: 
  _926 = &raw const (*_927)
  using: _927@Mir(bb141[1])
  _925 = move _926 as *const u8 (Pointer(ArrayToPointer))
  using: _926@Mir(bb141[2])
  _924 = move _925 as *const i8 (PtrToPtr)
  using: _925@Mir(bb141[3])
  _930 = _1
  using: _1@Mir(bb0[4])
  _929 = url_get_pathname(move _930) -> bb142
  using: _930@Mir(bb141[5])
bb142:
  _928 = move _929 as *const i8 (Pointer(MutToConstPointer))
  using: _929@Mir(bb141[6])
  _923 = strcmp(move _924, move _928) -> bb143
  using: _924@Mir(bb141[4]), _928@Mir(bb142[0])
bb143:
  _921 = Eq(move _922, move _923)
  using: _922@Mir(bb141[0]), _923@Mir(bb142[1])
  _920 = Not(move _921)
  using: _921@Mir(bb143[0])
  _919 = move _920 as i32 (IntToInt)
  using: _920@Mir(bb143[1])
  _918 = move _919 as i64 (IntToInt)
  using: _919@Mir(bb143[2])
  switchInt(move _918) -> [0: bb145, otherwise: bb144]
  using: _918@Mir(bb143[3])
bb144:
  _935 = const b"main\x00"
  using: 
  _934 = &raw const (*_935)
  using: _935@Mir(bb144[0])
  _933 = move _934 as *const u8 (Pointer(ArrayToPointer))
  using: _934@Mir(bb144[1])
  _932 = move _933 as *const i8 (PtrToPtr)
  using: _933@Mir(bb144[2])
  _939 = const b"test.c\x00"
  using: 
  _938 = &raw const (*_939)
  using: _939@Mir(bb144[4])
  _937 = move _938 as *const u8 (Pointer(ArrayToPointer))
  using: _938@Mir(bb144[5])
  _936 = move _937 as *const i8 (PtrToPtr)
  using: _937@Mir(bb144[6])
  _940 = const 64_i32
  using: 
  _944 = const b"0 == strcmp(\"jwerle/url.h.git\", url_get_pathname(gh_url))\x00"
  using: 
  _943 = &raw const (*_944)
  using: _944@Mir(bb144[9])
  _942 = move _943 as *const u8 (Pointer(ArrayToPointer))
  using: _943@Mir(bb144[10])
  _941 = move _942 as *const i8 (PtrToPtr)
  using: _942@Mir(bb144[11])
  _931 = __assert_rtn(move _932, move _936, move _940, move _941)
  using: _932@Mir(bb144[3]), _936@Mir(bb144[7]), _940@Mir(bb144[8]), _941@Mir(bb144[12])
bb145:
  _949 = const 0_i32
  using: 
  _954 = const b"jwerle/url.h.git\x00"
  using: 
  _953 = &raw const (*_954)
  using: _954@Mir(bb145[1])
  _952 = move _953 as *const u8 (Pointer(ArrayToPointer))
  using: _953@Mir(bb145[2])
  _951 = move _952 as *const i8 (PtrToPtr)
  using: _952@Mir(bb145[3])
  _957 = _1
  using: _1@Mir(bb0[4])
  _956 = url_get_path(move _957) -> bb146
  using: _957@Mir(bb145[5])
bb146:
  _955 = move _956 as *const i8 (Pointer(MutToConstPointer))
  using: _956@Mir(bb145[6])
  _950 = strcmp(move _951, move _955) -> bb147
  using: _951@Mir(bb145[4]), _955@Mir(bb146[0])
bb147:
  _948 = Eq(move _949, move _950)
  using: _949@Mir(bb145[0]), _950@Mir(bb146[1])
  _947 = Not(move _948)
  using: _948@Mir(bb147[0])
  _946 = move _947 as i32 (IntToInt)
  using: _947@Mir(bb147[1])
  _945 = move _946 as i64 (IntToInt)
  using: _946@Mir(bb147[2])
  switchInt(move _945) -> [0: bb149, otherwise: bb148]
  using: _945@Mir(bb147[3])
bb148:
  _962 = const b"main\x00"
  using: 
  _961 = &raw const (*_962)
  using: _962@Mir(bb148[0])
  _960 = move _961 as *const u8 (Pointer(ArrayToPointer))
  using: _961@Mir(bb148[1])
  _959 = move _960 as *const i8 (PtrToPtr)
  using: _960@Mir(bb148[2])
  _966 = const b"test.c\x00"
  using: 
  _965 = &raw const (*_966)
  using: _966@Mir(bb148[4])
  _964 = move _965 as *const u8 (Pointer(ArrayToPointer))
  using: _965@Mir(bb148[5])
  _963 = move _964 as *const i8 (PtrToPtr)
  using: _964@Mir(bb148[6])
  _967 = const 65_i32
  using: 
  _971 = const b"0 == strcmp(\"jwerle/url.h.git\", url_get_path(gh_url))\x00"
  using: 
  _970 = &raw const (*_971)
  using: _971@Mir(bb148[9])
  _969 = move _970 as *const u8 (Pointer(ArrayToPointer))
  using: _970@Mir(bb148[10])
  _968 = move _969 as *const i8 (PtrToPtr)
  using: _969@Mir(bb148[11])
  _958 = __assert_rtn(move _959, move _963, move _967, move _968)
  using: _959@Mir(bb148[3]), _963@Mir(bb148[7]), _967@Mir(bb148[8]), _968@Mir(bb148[12])
bb149:
  _973 = _11
  using: _11@Mir(bb0[11])
  _972 = url_free(move _973) -> bb150
  using: _973@Mir(bb149[0])
bb150:
  _0 = const 0_i32
  using: 
  return
  using: _0@Mir(bb150[0])
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:716:9: 719:80 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:722:9: 725:83 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:730:9: 733:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:736:9: 739:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:742:9: 746:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:749:9: 752:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:755:9: 759:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:762:9: 765:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:768:9: 772:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:775:9: 778:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:781:9: 784:86 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:787:9: 791:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:794:9: 798:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:801:9: 805:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:808:9: 812:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:815:9: 819:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:822:9: 826:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:829:9: 833:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:836:9: 840:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:843:9: 847:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:852:9: 856:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:861:9: 865:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:870:9: 874:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:879:9: 883:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:888:9: 892:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:897:9: 901:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:906:9: 910:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:913:14: 914:43 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:916:9: 920:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:923:14: 924:39 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:925:9: 929:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:932:14: 933:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:935:9: 939:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:942:14: 943:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:945:9: 949:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:952:14: 953:43 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:955:9: 959:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:962:14: 963:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:965:9: 969:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:972:14: 973:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:975:9: 979:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:982:14: 983:40 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:984:9: 988:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:991:14: 992:39 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:993:9: 997:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1000:14: 1001:39 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1002:9: 1006:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1009:14: 1010:46 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1012:9: 1016:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1019:14: 1020:42 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1022:9: 1026:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1029:14: 1030:46 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1032:9: 1036:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1039:14: 1040:42 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1042:9: 1046:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1049:14: 1050:79 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1052:9: 1056:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call strcmp @ workspace/urlparser/test.rs:1059:14: 1060:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call __assert_rtn @ workspace/urlparser/test.rs:1062:9: 1066:70 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:40 ~ test[be05]::main)
bb0:
  _2 = main_0() -> bb1
  using: 
bb1:
  _1 = std::process::exit(move _2)
  using: _2@Mir(bb0[0])
rewrite call std::process::exit @ workspace/urlparser/test.rs:1071:26: 1071:63 (#0) by default
#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(register_tool)]
extern "C" {
    #[no_mangle]
    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn free(_: *mut std::os::raw::c_void);
    #[no_mangle]
    fn printf(_: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;
    #[no_mangle]
    fn sprintf(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char, _: ...)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn sscanf(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char, _: ...)
     -> std::os::raw::c_int;
    #[no_mangle]
    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)
     -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn strcmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> std::os::raw::c_int;
    #[no_mangle]
    fn strcpy(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)
     -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;
    #[no_mangle]
    fn strstr(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char)
     -> *mut std::os::raw::c_char;
    #[no_mangle]
    fn __assert_rtn(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char,
                    _: std::os::raw::c_int, _: *const std::os::raw::c_char) -> !;
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct url_data {
    pub href: *const std::os::raw::c_char,
    pub protocol: *mut std::os::raw::c_char,
    pub host: *mut std::os::raw::c_char,
    pub auth: *mut std::os::raw::c_char,
    pub hostname: *mut std::os::raw::c_char,
    pub pathname: *mut std::os::raw::c_char,
    pub search: *mut std::os::raw::c_char,
    pub path: *mut std::os::raw::c_char,
    pub hash: *mut std::os::raw::c_char,
    pub query: *mut std::os::raw::c_char,
    pub port: *const std::os::raw::c_char,
}
impl Default for url_data {fn default() -> Self {Self {
href: std::ptr::null_mut(),
protocol: std::ptr::null_mut(),
host: std::ptr::null_mut(),
auth: std::ptr::null_mut(),
hostname: std::ptr::null_mut(),
pathname: std::ptr::null_mut(),
search: std::ptr::null_mut(),
path: std::ptr::null_mut(),
hash: std::ptr::null_mut(),
query: std::ptr::null_mut(),
port: std::ptr::null_mut(),
}}}

pub type url_data_t = url_data;
#[no_mangle]
pub unsafe extern "C" fn strdup(mut str: *const std::os::raw::c_char)
 -> *mut /* owning */ std::os::raw::c_char {
    let mut n: std::os::raw::c_int =
        strlen(str).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) as
            std::os::raw::c_int;
    let mut dup: *mut std::os::raw::c_char =
        malloc(n as std::os::raw::c_ulong) as *mut std::os::raw::c_char;
    if !dup.is_null() { strcpy(dup, str); }else { (); }
    return dup;
}
#[no_mangle]
pub static mut URL_SCHEMES: [*mut std::os::raw::c_char; 177] =
    [b"aaa\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"aaas\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"about\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"acap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"acct\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"adiumxtra\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"afp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"afs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"aim\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"apt\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"attachment\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"aw\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"beshare\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"bitcoin\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"bolo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"callto\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"cap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"chrome\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"crome-extension\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"com-evenbrite-attendee\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"cid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"coap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"coaps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"content\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"crid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"cvs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"data\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dav\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dict\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"lna-playsingle\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"dln-playcontainer\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"dns\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dtn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"dvb\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ed2k\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"facetime\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"fax\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"feed\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"file\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"finger\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"fish\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"geo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gg\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"git\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gizmoproject\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"go\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gopher\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"gtalk\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"h323\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"hcp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"http\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"https\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iax\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"icap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"icon\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"im\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"imap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"info\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ipn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ipp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"irc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"irc6\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ircs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"iris.xpc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"iris.xpcs\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"iris.lws\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"itms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jabber\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jar\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"jms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"keyparc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"lastfm\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ldap\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ldaps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"magnet\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mailserver\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"mailto\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"maps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"market\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"message\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"modem\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ms-help\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mssettings-power\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"msnim\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"msrp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"msrps\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mtqp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mumble\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mupdate\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"mvn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"news\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nfs\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ni\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nih\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"nntp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"notes\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"oid\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"paquelocktoken\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"pack\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"palm\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"paparazzi\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"pkcs11\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"platform\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"pop\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"pres\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"prospero\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"proxy\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"psyc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"query\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"reload\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"res\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"resource\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rmi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rsync\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rtmp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"rtsp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"secondlife\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"service\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"session\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sgn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"shttp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sieve\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sip\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sips\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"skype\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"smb\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"sms\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"snews\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"snmp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"soap.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"soap.beeps\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"soldat\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"spotify\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ssh\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"steam\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"svn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tag\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"teamspeak\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"tel\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"telnet\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tftp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"things\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"thismessage\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"tn3270\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tip\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"tv\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"udp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"unreal\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"urn\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ut2004\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"vemmi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ventrilo\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"videotex\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"view-source\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"wais\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"webcal\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ws\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wss\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wtai\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"wyciwyg\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xcon\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xcon-userid\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xfire\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xmlrpc.beep\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xmlrpc.beeps\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"xmpp\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"xri\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"ymsgr\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"javascript\x00" as *const u8 as *const std::os::raw::c_char as
         *mut std::os::raw::c_char,
     b"jdbc\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char,
     b"doi\x00" as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char];
#[no_mangle]
pub unsafe extern "C" fn url_parse(mut url: *mut std::os::raw::c_char)
 -> *mut url_data_t {
    let mut data: *mut url_data_t =
        malloc(::std::mem::size_of::<url_data_t>() as std::os::raw::c_ulong) as
            *mut url_data_t;
    if data.is_null() {(); return 0 as *mut url_data_t }
    (*data).href= url;
    let mut tmp: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut tmp_url: *mut std::os::raw::c_char = strdup(url);
    let mut is_ssh: bool = 0 as std::os::raw::c_int != 0;
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(tmp_url);
    if protocol.is_null() {(); return 0 as *mut url_data_t }
    let mut protocol_len: std::os::raw::c_int =
        strlen(protocol) as std::os::raw::c_int + 3 as std::os::raw::c_int;
    (*data).protocol= protocol;
    is_ssh= url_is_ssh(protocol);
    let mut auth: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut auth_len: std::os::raw::c_int = 0 as std::os::raw::c_int;
    tmp= strstr(tmp_url, b"@\x00" as *const u8 as *const std::os::raw::c_char);
    if !tmp.is_null() {
        auth=
            get_part(tmp_url,
                     b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len);
        auth_len= strlen(auth) as std::os::raw::c_int;
        if !auth.is_null() { auth_len+= 1 }else { (); }
    }else { (); }
    (*data).auth= auth;
    let mut hostname: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    hostname=
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url,
                     b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        } else {
            get_part(tmp_url,
                     b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len)
        };
    if hostname.is_null() {(); return 0 as *mut url_data_t }
    let mut hostname_len: std::os::raw::c_int = strlen(hostname) as std::os::raw::c_int;
    let mut tmp_hostname: *mut std::os::raw::c_char = strdup(hostname);
    (*data).hostname= hostname;
    let mut host: *mut std::os::raw::c_char =
        malloc(strlen(tmp_hostname).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                     as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sscanf(tmp_hostname, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char,
           host);
    if host.is_null() {(); return 0 as *mut url_data_t }
    let mut host_len: std::os::raw::c_int = strlen(host) as std::os::raw::c_int;
    (*data).host= host;
    let mut tmp_path: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    tmp_path=
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(tmp_url, b":%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        } else {
            get_part(tmp_url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char,
                     protocol_len + auth_len + hostname_len)
        };
    let mut path: *mut std::os::raw::c_char =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if path.is_null() {(); return 0 as *mut url_data_t }
    let mut fmt: *mut std::os::raw::c_char =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    (*data).path= path;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut pathname: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if pathname.is_null() {(); return 0 as *mut url_data_t }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    tmp_path= strdup(path);
    sscanf(tmp_path, b"%[^? | ^#]\x00" as *const u8 as *const std::os::raw::c_char,
           pathname);
    let mut pathname_len: std::os::raw::c_int = strlen(pathname) as std::os::raw::c_int;
    (*data).pathname= pathname;
    let mut search: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<*mut std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if search.is_null() {(); return 0 as *mut url_data_t }
    tmp_path= strff(tmp_path, pathname_len);
    strcat(search, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char,
           search);
    (*data).search= search;
    let mut search_len: std::os::raw::c_int = strlen(search) as std::os::raw::c_int;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut query: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if query.is_null() {(); return 0 as *mut url_data_t }
    sscanf(search, b"?%s\x00" as *const u8 as *const std::os::raw::c_char, query);
    (*data).query= query;
    let mut hash: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if hash.is_null() {(); return 0 as *mut url_data_t }
    tmp_path= strff(path, pathname_len + search_len);
    strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
    (*data).hash= hash;
    free(tmp_path as *mut std::os::raw::c_void);
    let mut port: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if port.is_null() {(); return 0 as *mut url_data_t }
    tmp_hostname= strff(hostname, host_len + 1 as std::os::raw::c_int);
    sscanf(tmp_hostname, b"%s\x00" as *const u8 as *const std::os::raw::c_char, port);
    (*data).port= port;
    free(tmp_hostname as *mut std::os::raw::c_void);
    return data;
}
unsafe extern "C" fn strff(mut ptr: *mut std::os::raw::c_char, mut n: std::os::raw::c_int)
 -> *mut /* owning */ std::os::raw::c_char {
    let mut y: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut i: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while i < n {
        let fresh0 = ptr;
        ptr= ptr.offset(1);
        y= (*fresh0) as std::os::raw::c_int;
        i+= 1
    }
    return strdup(ptr);
}
#[no_mangle]
pub unsafe extern "C" fn url_get_protocol(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut protocol: *mut std::os::raw::c_char =
        malloc((16 as std::os::raw::c_int as
                    std::os::raw::c_ulong).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                    as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    if protocol.is_null() {(); return 0 as *mut std::os::raw::c_char }
    sscanf(url, b"%[^://]\x00" as *const u8 as *const std::os::raw::c_char, protocol);
    if url_is_protocol(protocol as *const i8) { return protocol }
    return 0 as *mut std::os::raw::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn url_is_protocol(mut str: *const std::os::raw::c_char) -> bool {
    let mut count: std::os::raw::c_int =
        (::std::mem::size_of::<[*mut std::os::raw::c_char; 177]>() as
             std::os::raw::c_ulong).wrapping_div(::std::mem::size_of::<*mut std::os::raw::c_char>()
                                             as std::os::raw::c_ulong) as std::os::raw::c_int;
    let mut i: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while i < count {
        if 0 as std::os::raw::c_int == strcmp(URL_SCHEMES[i as usize], str) {
            return 1 as std::os::raw::c_int != 0
        }
        i+= 1
    }
    return 0 as std::os::raw::c_int != 0;
}
unsafe extern "C" fn get_part(mut url: *mut std::os::raw::c_char,
                              mut format: *const std::os::raw::c_char,
                              mut l: std::os::raw::c_int) -> *mut std::os::raw::c_char {
    let mut has: bool = 0 as std::os::raw::c_int != 0;
    let mut tmp: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut tmp_url: *mut std::os::raw::c_char = strdup(url);
    let mut fmt_url: *mut std::os::raw::c_char = strdup(url);
    let mut ret: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if tmp.is_null() || tmp_url.is_null() || fmt_url.is_null() ||
           ret.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    strcpy(tmp, b"\x00" as *const u8 as *const std::os::raw::c_char);
    strcpy(fmt_url, b"\x00" as *const u8 as *const std::os::raw::c_char);
    fmt_url= strff(fmt_url, l);
    sscanf(fmt_url, format, tmp);
    if 0 as std::os::raw::c_int != strcmp(tmp, tmp_url) {
        has= 1 as std::os::raw::c_int != 0;
        ret= strdup(tmp)
    }
    fmt_url= strrwd(fmt_url, l);
    free(tmp as *mut std::os::raw::c_void);
    free(tmp_url as *mut std::os::raw::c_void);
    free(fmt_url as *mut std::os::raw::c_void);
    return if has as std::os::raw::c_int != 0 { ret } else { 0 as *mut std::os::raw::c_char };
}
unsafe extern "C" fn strrwd(mut ptr: *mut std::os::raw::c_char, mut n: std::os::raw::c_int)
 -> *mut /* owning */ std::os::raw::c_char {
    let mut y: std::os::raw::c_int = 0 as std::os::raw::c_int;
    let mut i: std::os::raw::c_int = 0 as std::os::raw::c_int;
    while i < n {
        let fresh1 = ptr;
        ptr= ptr.offset(-1);
        y= (*fresh1) as std::os::raw::c_int;
        i+= 1
    }
    return strdup(ptr);
}
#[no_mangle]
pub unsafe extern "C" fn url_is_ssh(mut str: *mut std::os::raw::c_char) -> bool {
    str= strdup(str);
    if 0 as std::os::raw::c_int ==
           strcmp(str, b"ssh\x00" as *const u8 as *const std::os::raw::c_char) ||
           0 as std::os::raw::c_int ==
               strcmp(str, b"git\x00" as *const u8 as *const std::os::raw::c_char) {
        free(str as *mut std::os::raw::c_void);
        return 1 as std::os::raw::c_int != 0
    }
    return 0 as std::os::raw::c_int != 0;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_auth(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(url);
    if protocol.is_null() {(); return 0 as *mut std::os::raw::c_char }
    let mut l: std::os::raw::c_int =
        strlen(protocol) as std::os::raw::c_int + 3 as std::os::raw::c_int;
    return get_part(url, b"%[^@]\x00" as *const u8 as *const std::os::raw::c_char, l);
}
#[no_mangle]
pub unsafe extern "C" fn url_get_hostname(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut l: std::os::raw::c_int = 3 as std::os::raw::c_int;
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(url);
    let mut tmp_protocol: *mut std::os::raw::c_char = strdup(protocol);
    let mut auth: *mut std::os::raw::c_char = url_get_auth(url);
    if protocol.is_null() {(); return 0 as *mut std::os::raw::c_char }
    if !auth.is_null() {
        l=
            (l as
                 std::os::raw::c_ulong).wrapping_add(strlen(auth).wrapping_add(1 as
                                                                           std::os::raw::c_int
                                                                           as
                                                                           std::os::raw::c_ulong))
                as std::os::raw::c_int as std::os::raw::c_int
    }else { (); }
    if !auth.is_null() { free(auth as *mut std::os::raw::c_void); }else { (); }
    l+= strlen(protocol) as std::os::raw::c_int;
    free(protocol as *mut std::os::raw::c_void);
    let mut hostname: *mut std::os::raw::c_char =
        if url_is_ssh(tmp_protocol) as std::os::raw::c_int != 0 {
            get_part(url, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"%[^/]\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
    free(tmp_protocol as *mut std::os::raw::c_void);
    return hostname;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_host(mut url: *mut std::os::raw::c_char)
 -> *const std::os::raw::c_char {
    let mut host: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut hostname: *mut std::os::raw::c_char = url_get_hostname(url);
    if host.is_null() || hostname.is_null() { return 0 as *mut std::os::raw::c_char }
    sscanf(hostname, b"%[^:]\x00" as *const u8 as *const std::os::raw::c_char, host);
    free(hostname as *mut std::os::raw::c_void);
    return host;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_pathname(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut path: *mut std::os::raw::c_char = url_get_path(url);
    let mut pathname: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if path.is_null() || pathname.is_null() { return 0 as *mut std::os::raw::c_char }
    strcat(pathname, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(path, b"%[^?]\x00" as *const u8 as *const std::os::raw::c_char, pathname);
    free(path as *mut std::os::raw::c_void);
    return pathname;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_path(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut l: std::os::raw::c_int = 3 as std::os::raw::c_int;
    let mut tmp_path: *mut std::os::raw::c_char = 0 as *mut std::os::raw::c_char;
    let mut protocol: *mut std::os::raw::c_char = url_get_protocol(url);
    let mut auth: *mut std::os::raw::c_char = url_get_auth(url);
    let mut hostname: *mut std::os::raw::c_char = url_get_hostname(url);
    if protocol.is_null() || hostname.is_null() {
        return 0 as *mut std::os::raw::c_char
    }
    let mut is_ssh: bool = url_is_ssh(protocol);
    l+= strlen(protocol) as std::os::raw::c_int + strlen(hostname) as std::os::raw::c_int;
    if !auth.is_null() { l+= strlen(auth) as std::os::raw::c_int + 1 as std::os::raw::c_int }else { (); }
    tmp_path=
        if is_ssh as std::os::raw::c_int != 0 {
            get_part(url, b":%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        } else {
            get_part(url, b"/%s\x00" as *const u8 as *const std::os::raw::c_char, l)
        };
    let mut fmt: *mut std::os::raw::c_char =
        if is_ssh as std::os::raw::c_int != 0 {
            b"%s\x00" as *const u8 as *const std::os::raw::c_char
        } else { b"/%s\x00" as *const u8 as *const std::os::raw::c_char } as
            *mut std::os::raw::c_char;
    let mut path: *mut std::os::raw::c_char =
        malloc(strlen(tmp_path).wrapping_mul(::std::mem::size_of::<std::os::raw::c_char>()
                                                 as std::os::raw::c_ulong)) as
            *mut std::os::raw::c_char;
    sprintf(path, fmt, tmp_path);
    if !auth.is_null() { free(auth as *mut std::os::raw::c_void); }else { (); }
    free(protocol as *mut std::os::raw::c_void);
    free(hostname as *mut std::os::raw::c_void);
    free(tmp_path as *mut std::os::raw::c_void);
    return path;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_search(mut url: *mut std::os::raw::c_char)
 -> *mut std::os::raw::c_char {
    let mut path: *mut std::os::raw::c_char = url_get_path(url);
    let mut pathname: *mut std::os::raw::c_char = url_get_pathname(url);
    let mut search: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if path.is_null() || search.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut tmp_path: *mut std::os::raw::c_char =
        strff(path, strlen(pathname) as std::os::raw::c_int);
    strcat(search, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%[^#]\x00" as *const u8 as *const std::os::raw::c_char,
           search);
    tmp_path= strrwd(tmp_path, strlen(pathname) as std::os::raw::c_int);
    free(path as *mut std::os::raw::c_void);
    free(pathname as *mut std::os::raw::c_void);
    return search;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_query(mut url: *mut std::os::raw::c_char)
 -> *const std::os::raw::c_char {
    let mut search: *mut std::os::raw::c_char = url_get_search(url);
    let mut query: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if search.is_null() {(); return 0 as *mut std::os::raw::c_char }
    sscanf(search, b"?%s\x00" as *const u8 as *const std::os::raw::c_char, query);
    free(search as *mut std::os::raw::c_void);
    return query;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_hash(mut url: *mut std::os::raw::c_char)
 -> *const std::os::raw::c_char {
    let mut hash: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    if hash.is_null() {(); return 0 as *mut std::os::raw::c_char }
    let mut path: *mut std::os::raw::c_char = url_get_path(url);
    if path.is_null() {(); return 0 as *mut std::os::raw::c_char }
    let mut pathname: *mut std::os::raw::c_char = url_get_pathname(url);
    if pathname.is_null() {(); return 0 as *mut std::os::raw::c_char }
    let mut search: *mut std::os::raw::c_char = url_get_search(url);
    let mut pathname_len: std::os::raw::c_int = strlen(pathname) as std::os::raw::c_int;
    let mut search_len: std::os::raw::c_int = strlen(search) as std::os::raw::c_int;
    let mut tmp_path: *mut std::os::raw::c_char =
        strff(path, pathname_len + search_len);
    strcat(hash, b"\x00" as *const u8 as *const std::os::raw::c_char);
    sscanf(tmp_path, b"%s\x00" as *const u8 as *const std::os::raw::c_char, hash);
    tmp_path= strrwd(tmp_path, pathname_len + search_len);
    free(tmp_path as *mut std::os::raw::c_void);
    free(pathname as *mut std::os::raw::c_void);
    free(path as *mut std::os::raw::c_void);
    if !search.is_null() { free(search as *mut std::os::raw::c_void); }else { (); }
    return hash;
}
#[no_mangle]
pub unsafe extern "C" fn url_get_port(mut url: *mut std::os::raw::c_char)
 -> *const std::os::raw::c_char {
    let mut port: *mut std::os::raw::c_char =
        malloc(::std::mem::size_of::<std::os::raw::c_char>() as std::os::raw::c_ulong) as
            *mut std::os::raw::c_char;
    let mut hostname: *mut std::os::raw::c_char = url_get_hostname(url);
    let mut host: *mut std::os::raw::c_char = url_get_host(url);
    if port.is_null() || hostname.is_null() { return 0 as *mut std::os::raw::c_char }
    let mut tmp_hostname: *mut std::os::raw::c_char =
        strff(hostname,
              strlen(host).wrapping_add(1 as std::os::raw::c_int as std::os::raw::c_ulong) as
                  std::os::raw::c_int);
    sscanf(tmp_hostname, b"%s\x00" as *const u8 as *const std::os::raw::c_char, port);
    free(hostname as *mut std::os::raw::c_void);
    free(tmp_hostname as *mut std::os::raw::c_void);
    return port;
}
#[no_mangle]
pub unsafe extern "C" fn url_free(mut data: Option<&mut url_data_t>) {
    if data.as_deref().is_none() {(); return }
    if !(*data.as_deref().unwrap()).auth.is_null() { (); }else { (); }
    if !(*data.as_deref().unwrap()).protocol.is_null() {
        ();
    }else { (); }
    if !(*data.as_deref().unwrap()).hostname.is_null() {
        ();
    }else { (); }
    if !(*data.as_deref().unwrap()).host.is_null() { (); }else { (); }
    if !(*data.as_deref().unwrap()).pathname.is_null() {
        ();
    }else { (); }
    if !(*data.as_deref().unwrap()).path.is_null() { (); }else { (); }
    if !(*data.as_deref().unwrap()).hash.is_null() { (); }else { (); }
    if !(*data.as_deref().unwrap()).search.is_null() {
        ();
    }else { (); }
    if !(*data.as_deref().unwrap()).query.is_null() { (); }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn url_inspect(mut url: *mut /* owning */ std::os::raw::c_char) {
    url_data_inspect(url_parse(url));
}
#[no_mangle]
pub unsafe extern "C" fn url_data_inspect(mut data: *const url_data_t) {
    printf(b"#url =>\n\x00" as *const u8 as *const std::os::raw::c_char);
    printf(b"    .href: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).href);
    printf(b"    .protocol: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).protocol);
    printf(b"    .host: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).host);
    printf(b"    .auth: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).auth);
    printf(b"    .hostname: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).hostname);
    printf(b"    .pathname: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).pathname);
    printf(b"    .search: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).search);
    printf(b"    .path: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).path);
    printf(b"    .hash: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).hash);
    printf(b"    .query: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).query);
    printf(b"    .port: \"%s\"\n\x00" as *const u8 as *const std::os::raw::c_char,
           (*data).port);
}
unsafe fn main_0() -> std::os::raw::c_int {
    //url_inspect("https://google.com/search?q=github");
    let mut gh_url: *mut std::os::raw::c_char =
        b"git://git@github.com:jwerle/url.h.git\x00" as *const u8 as
            *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut url: *mut std::os::raw::c_char =
        b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\x00"
            as *const u8 as *const std::os::raw::c_char as *mut std::os::raw::c_char;
    let mut parsed: *mut url_data_t = url_parse(url);
    let mut gh_parsed: *mut url_data_t = url_parse(gh_url);
    if parsed.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     15 as std::os::raw::c_int,
                     b"parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if gh_parsed.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     16 as std::os::raw::c_int,
                     b"gh_parsed\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    url_data_inspect(parsed);
    url_data_inspect(gh_parsed);
    if (*parsed).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     21 as std::os::raw::c_int,
                     b"parsed->href\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     22 as std::os::raw::c_int,
                     b"parsed->auth\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     23 as std::os::raw::c_int,
                     b"parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).port.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     24 as std::os::raw::c_int,
                     b"parsed->port\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     25 as std::os::raw::c_int,
                     b"parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     26 as std::os::raw::c_int,
                     b"parsed->host\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).pathname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     27 as std::os::raw::c_int,
                     b"parsed->pathname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).path.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     28 as std::os::raw::c_int,
                     b"parsed->path\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).hash.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     29 as std::os::raw::c_int,
                     b"parsed->hash\x00" as *const u8 as *const std::os::raw::c_char);
    } else { };
    if (*parsed).search.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     30 as std::os::raw::c_int,
                     b"parsed->search\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*parsed).query.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     31 as std::os::raw::c_int,
                     b"parsed->query\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).href.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     33 as std::os::raw::c_int,
                     b"gh_parsed->href\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).protocol.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     34 as std::os::raw::c_int,
                     b"gh_parsed->protocol\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).host.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     35 as std::os::raw::c_int,
                     b"gh_parsed->host\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).auth.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     36 as std::os::raw::c_int,
                     b"gh_parsed->auth\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).hostname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     37 as std::os::raw::c_int,
                     b"gh_parsed->hostname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).pathname.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     38 as std::os::raw::c_int,
                     b"gh_parsed->pathname\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if (*gh_parsed).path.is_null() as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     39 as std::os::raw::c_int,
                     b"gh_parsed->path\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"http\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     41 as std::os::raw::c_int,
                     b"url_is_protocol(\"http\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"https\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     42 as std::os::raw::c_int,
                     b"url_is_protocol(\"https\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"git\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     43 as std::os::raw::c_int,
                     b"url_is_protocol(\"git\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"ssh\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     44 as std::os::raw::c_int,
                     b"url_is_protocol(\"ssh\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"sftp\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     45 as std::os::raw::c_int,
                     b"url_is_protocol(\"sftp\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"ftp\x00" as *const u8 as *const std::os::raw::c_char as
                            *mut std::os::raw::c_char) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     46 as std::os::raw::c_int,
                     b"url_is_protocol(\"ftp\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !url_is_protocol(b"javascript\x00" as *const u8 as *const std::os::raw::c_char
                            as *mut std::os::raw::c_char) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     47 as std::os::raw::c_int,
                     b"url_is_protocol(\"javascript\")\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"http\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_protocol(url))) as std::os::raw::c_int as std::os::raw::c_long !=
           0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     49 as std::os::raw::c_int,
                     b"0 == strcmp(\"http\", url_get_protocol(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"user:pass\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_auth(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     50 as std::os::raw::c_int,
                     b"0 == strcmp(\"user:pass\", url_get_auth(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"subdomain.host.com:8080\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_hostname(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     51 as std::os::raw::c_int,
                     b"0 == strcmp(\"subdomain.host.com:8080\", url_get_hostname(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"subdomain.host.com\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_host(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     52 as std::os::raw::c_int,
                     b"0 == strcmp(\"subdomain.host.com\", url_get_host(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"/p/a/t/h\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_pathname(url))) as std::os::raw::c_int as std::os::raw::c_long !=
           0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     53 as std::os::raw::c_int,
                     b"0 == strcmp(\"/p/a/t/h\", url_get_pathname(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"/p/a/t/h?query=string#hash\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     54 as std::os::raw::c_int,
                     b"0 == strcmp(\"/p/a/t/h?query=string#hash\", url_get_path(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"?query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_search(url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     55 as std::os::raw::c_int,
                     b"0 == strcmp(\"?query=string\", url_get_search(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"query=string\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_query(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     56 as std::os::raw::c_int,
                     b"0 == strcmp(\"query=string\", url_get_query(url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"#hash\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hash(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     57 as std::os::raw::c_int,
                     b"0 == strcmp(\"#hash\", url_get_hash(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"8080\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_port(url))) as std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     58 as std::os::raw::c_int,
                     b"0 == strcmp(\"8080\", url_get_port(url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_protocol(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     60 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_protocol(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_host(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     61 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_host(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"github.com\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_hostname(gh_url))) as std::os::raw::c_int as std::os::raw::c_long
           != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     62 as std::os::raw::c_int,
                     b"0 == strcmp(\"github.com\", url_get_hostname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"git\x00" as *const u8 as *const std::os::raw::c_char,
                    url_get_auth(gh_url))) as std::os::raw::c_int as std::os::raw::c_long != 0
       {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     63 as std::os::raw::c_int,
                     b"0 == strcmp(\"git\", url_get_auth(gh_url))\x00" as
                         *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_pathname(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     64 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_pathname(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    if !(0 as std::os::raw::c_int ==
             strcmp(b"jwerle/url.h.git\x00" as *const u8 as
                        *const std::os::raw::c_char, url_get_path(gh_url))) as
           std::os::raw::c_int as std::os::raw::c_long != 0 {
        __assert_rtn(b"main\x00" as *const u8 as *const i8,
                     b"test.c\x00" as *const u8 as *const std::os::raw::c_char,
                     65 as std::os::raw::c_int,
                     b"0 == strcmp(\"jwerle/url.h.git\", url_get_path(gh_url))\x00"
                         as *const u8 as *const std::os::raw::c_char);
    } else { };
    url_free(parsed.as_mut());
    return 0 as std::os::raw::c_int;
}
pub fn main() { unsafe { ::std::process::exit(main_0() as i32) } }

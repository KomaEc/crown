Solving src::libtree::libtree_state_free with precision 1... ✅
Solving src::libtree::print_error with precision 1... ✅
Solving src::libtree::small_vec_u64_free with precision 1... ✅
Solving src::libtree::small_vec_u64_append with precision 1... ✅
Solving src::libtree::libtree_state_init with precision 1... ✅
Solving src::libtree::string_table_maybe_grow with precision 1... ✅
Solving src::libtree::visited_files_append with precision 1... ✅
Solving src::libtree::putchar with precision 1... ✅
Solving src::libtree::stat with precision 1... ✅
Solving src::libtree::utoa with precision 1... ✅
Solving src::libtree::small_vec_u64_init with precision 1... ✅
Solving src::libtree::host_is_little_endian with precision 1... ✅
Solving src::libtree::is_ascending_order with precision 1... ✅
Solving src::libtree::string_table_store with precision 1... ✅
Solving src::libtree::string_table_copy_from_file with precision 1... ✅
Solving src::libtree::is_in_exclude_list with precision 1... ✅
Solving src::libtree::tree_preamble with precision 1... ✅
Solving src::libtree::apply_exclude_list with precision 1... ✅
Solving src::libtree::check_absolute_paths with precision 1... ✅
Solving src::libtree::check_search_paths with precision 1... ✅
Solving src::libtree::interpolate_variables with precision 1... ❌
Solving src::libtree::print_colon_delimited_paths with precision 1... ✅
Solving src::libtree::print_line with precision 1... ✅
Solving src::libtree::visited_files_contains with precision 1... ✅
Solving src::libtree::recurse with precision 1... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 1... ✅
Solving src::libtree::parse_ld_config_file with precision 1... ✅
Solving src::libtree::parse_ld_so_conf with precision 1... ❌
Solving src::libtree::parse_ld_library_path with precision 1... ✅
Solving src::libtree::set_default_paths with precision 1... ✅
Solving src::libtree::print_tree with precision 1... ✅
Solving src::libtree::main_0 with precision 1... ✅
src::libtree::libtree_state_free: (&uniq  ↓ &uniq ) -> _
src::libtree::print_error: (_, _, &, &, &uniq  ↓ &uniq , _) -> _
src::libtree::small_vec_u64_free: (&) -> _
src::libtree::small_vec_u64_append: (&, _) -> _
src::libtree::libtree_state_init: (&uniq  ↓ &uniq ) -> _
src::libtree::string_table_maybe_grow: (&uniq  ↓ &uniq , _) -> _
src::libtree::visited_files_append: (&uniq  ↓ &uniq , &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (&) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq  ↓ &uniq , &) -> _
src::libtree::string_table_copy_from_file: (&uniq  ↓ &uniq , &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (&, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , &, &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , &, _, &uniq  ↓ &uniq , _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , &, _, &uniq  ↓ &uniq , _) -> _
src::libtree::interpolate_variables: (&, _, &) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq  ↓ &uniq ) -> _
src::libtree::visited_files_contains: (&, &) -> _
src::libtree::recurse: (&, _, &uniq  ↓ &uniq , _, _) -> _
src::libtree::ld_conf_globbing: (&uniq  ↓ &uniq , &) -> _
src::libtree::parse_ld_config_file: (&uniq  ↓ &uniq , &) -> _
src::libtree::parse_ld_so_conf: (&) -> _
src::libtree::parse_ld_library_path: (&uniq  ↓ &uniq ) -> _
src::libtree::set_default_paths: (&uniq  ↓ &uniq ) -> _
src::libtree::print_tree: (_, &, &uniq  ↓ &uniq ) -> _
src::libtree::main_0: (_, &) -> _
Solving src::libtree::libtree_state_free with precision 2... ✅
Solving src::libtree::print_error with precision 2... ✅
Solving src::libtree::small_vec_u64_free with precision 2... ❌
Solving src::libtree::small_vec_u64_append with precision 2... ❌
Solving src::libtree::libtree_state_init with precision 2... ✅
Solving src::libtree::string_table_maybe_grow with precision 2... ✅
Solving src::libtree::visited_files_append with precision 2... ✅
Solving src::libtree::putchar with precision 2... ✅
Solving src::libtree::stat with precision 2... ✅
Solving src::libtree::utoa with precision 2... ✅
Solving src::libtree::small_vec_u64_init with precision 2... ✅
Solving src::libtree::host_is_little_endian with precision 2... ✅
Solving src::libtree::is_ascending_order with precision 2... ✅
Solving src::libtree::string_table_store with precision 2... ✅
Solving src::libtree::string_table_copy_from_file with precision 2... ✅
Solving src::libtree::is_in_exclude_list with precision 2... ✅
Solving src::libtree::tree_preamble with precision 2... ✅
Solving src::libtree::apply_exclude_list with precision 2... ✅
Solving src::libtree::check_absolute_paths with precision 2... ✅
Solving src::libtree::check_search_paths with precision 2... ✅
Solving src::libtree::interpolate_variables with precision 2... ❌
Solving src::libtree::print_colon_delimited_paths with precision 2... ✅
Solving src::libtree::print_line with precision 2... ✅
Solving src::libtree::visited_files_contains with precision 2... ✅
Solving src::libtree::recurse with precision 2... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::visited_files_contains!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 2... ✅
Solving src::libtree::parse_ld_config_file with precision 2... ✅
Solving src::libtree::parse_ld_so_conf with precision 2... ❌
Solving src::libtree::parse_ld_library_path with precision 2... ✅
Solving src::libtree::set_default_paths with precision 2... ✅
Solving src::libtree::print_tree with precision 2... ✅
Solving src::libtree::main_0 with precision 2... ✅
src::libtree::libtree_state_free: (&uniq & &move &move & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::print_error: (_, _, & &, &, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::small_vec_u64_free: (&any &) -> _
src::libtree::small_vec_u64_append: (&any &, _) -> _
src::libtree::libtree_state_init: (&uniq & & & & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::string_table_maybe_grow: (&uniq &move ↓ &uniq &move, _) -> _
src::libtree::visited_files_append: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (& &) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::string_table_copy_from_file: (&uniq &move ↓ &uniq &move, & & & & & & & & & & & & & & & & & & &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (& & & & & & & &, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , & &, & & & & & & & &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::interpolate_variables: (& & & & & & & &, _, &) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::visited_files_contains: (& &, &) -> _
src::libtree::recurse: (&, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _, _) -> _
src::libtree::ld_conf_globbing: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_config_file: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_so_conf: (& & & & & & & &) -> _
src::libtree::parse_ld_library_path: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::set_default_paths: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::print_tree: (_, & &, &uniq & & & & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::main_0: (_, & &) -> _
Solving src::libtree::libtree_state_free with precision 3... ✅
Solving src::libtree::print_error with precision 3... ✅
Solving src::libtree::small_vec_u64_free with precision 2... ❌
Solving src::libtree::small_vec_u64_append with precision 2... ❌
Solving src::libtree::libtree_state_init with precision 3... ✅
Solving src::libtree::string_table_maybe_grow with precision 3... ✅
Solving src::libtree::visited_files_append with precision 3... ✅
Solving src::libtree::putchar with precision 3... ✅
Solving src::libtree::stat with precision 3... ✅
Solving src::libtree::utoa with precision 3... ✅
Solving src::libtree::small_vec_u64_init with precision 3... ✅
Solving src::libtree::host_is_little_endian with precision 3... ✅
Solving src::libtree::is_ascending_order with precision 3... ✅
Solving src::libtree::string_table_store with precision 3... ✅
Solving src::libtree::string_table_copy_from_file with precision 3... ✅
Solving src::libtree::is_in_exclude_list with precision 3... ✅
Solving src::libtree::tree_preamble with precision 3... ✅
Solving src::libtree::apply_exclude_list with precision 3... ✅
Solving src::libtree::check_absolute_paths with precision 3... ✅
Solving src::libtree::check_search_paths with precision 3... ✅
Solving src::libtree::interpolate_variables with precision 1... ❌
Solving src::libtree::print_colon_delimited_paths with precision 3... ✅
Solving src::libtree::print_line with precision 3... ✅
Solving src::libtree::visited_files_contains with precision 3... ✅
Solving src::libtree::recurse with precision 3... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::visited_files_contains!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 3... ✅
Solving src::libtree::parse_ld_config_file with precision 3... ✅
Solving src::libtree::parse_ld_so_conf with precision 1... ❌
Solving src::libtree::parse_ld_library_path with precision 3... ✅
Solving src::libtree::set_default_paths with precision 3... ✅
Solving src::libtree::print_tree with precision 3... ✅
Solving src::libtree::main_0 with precision 3... ✅
src::libtree::libtree_state_free: (&uniq & &move &move & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::print_error: (_, _, & &, &, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::small_vec_u64_free: (&any &) -> _
src::libtree::small_vec_u64_append: (&any &, _) -> _
src::libtree::libtree_state_init: (&uniq & & & & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::string_table_maybe_grow: (&uniq &move ↓ &uniq &move, _) -> _
src::libtree::visited_files_append: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (& &) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::string_table_copy_from_file: (&uniq &move ↓ &uniq &move, & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (& & & & & & & &, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , & &, & & & & & & & &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::interpolate_variables: (&, _, &) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::visited_files_contains: (& &, &) -> _
src::libtree::recurse: (&, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _, _) -> _
src::libtree::ld_conf_globbing: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_config_file: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_so_conf: (&) -> _
src::libtree::parse_ld_library_path: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::set_default_paths: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::print_tree: (_, & &, &uniq & & & & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::main_0: (_, & &) -> _
Solving src::libtree::libtree_state_free with precision 3... ✅
Solving src::libtree::print_error with precision 3... ✅
Solving src::libtree::small_vec_u64_free with precision 1... ✅
Solving src::libtree::small_vec_u64_append with precision 1... ✅
Solving src::libtree::libtree_state_init with precision 3... ✅
Solving src::libtree::string_table_maybe_grow with precision 3... ✅
Solving src::libtree::visited_files_append with precision 3... ✅
Solving src::libtree::putchar with precision 3... ✅
Solving src::libtree::stat with precision 3... ✅
Solving src::libtree::utoa with precision 3... ✅
Solving src::libtree::small_vec_u64_init with precision 3... ✅
Solving src::libtree::host_is_little_endian with precision 3... ✅
Solving src::libtree::is_ascending_order with precision 3... ✅
Solving src::libtree::string_table_store with precision 3... ✅
Solving src::libtree::string_table_copy_from_file with precision 3... ✅
Solving src::libtree::is_in_exclude_list with precision 3... ✅
Solving src::libtree::tree_preamble with precision 3... ✅
Solving src::libtree::apply_exclude_list with precision 3... ✅
Solving src::libtree::check_absolute_paths with precision 3... ✅
Solving src::libtree::check_search_paths with precision 3... ✅
Solving src::libtree::print_colon_delimited_paths with precision 3... ✅
Solving src::libtree::print_line with precision 3... ✅
Solving src::libtree::visited_files_contains with precision 3... ✅
Solving src::libtree::recurse with precision 3... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::visited_files_contains!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 3... ✅
Solving src::libtree::parse_ld_config_file with precision 3... ✅
Solving src::libtree::parse_ld_library_path with precision 3... ✅
Solving src::libtree::set_default_paths with precision 3... ✅
Solving src::libtree::print_tree with precision 3... ✅
Solving src::libtree::main_0 with precision 3... ✅
src::libtree::libtree_state_free: (&uniq & &move &move & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::print_error: (_, _, & &, &, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::small_vec_u64_free: (&) -> _
src::libtree::small_vec_u64_append: (&, _) -> _
src::libtree::libtree_state_init: (&uniq & & & & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::string_table_maybe_grow: (&uniq &move ↓ &uniq &move, _) -> _
src::libtree::visited_files_append: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (& &) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::string_table_copy_from_file: (&uniq &move ↓ &uniq &move, & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (& & & & & & & &, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , & &, & & & & & & & &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::interpolate_variables: (_, _, _) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::visited_files_contains: (& &, &) -> _
src::libtree::recurse: (&, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _, _) -> _
src::libtree::ld_conf_globbing: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_config_file: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_so_conf: (_) -> _
src::libtree::parse_ld_library_path: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::set_default_paths: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::print_tree: (_, & &, &uniq & & & & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::main_0: (_, & &) -> _
Solving src::libtree::libtree_state_free with precision 3... ✅
Solving src::libtree::print_error with precision 3... ✅
Solving src::libtree::small_vec_u64_free with precision 1... ✅
Solving src::libtree::small_vec_u64_append with precision 1... ✅
Solving src::libtree::libtree_state_init with precision 3... ✅
Solving src::libtree::string_table_maybe_grow with precision 3... ✅
Solving src::libtree::visited_files_append with precision 3... ✅
Solving src::libtree::putchar with precision 3... ✅
Solving src::libtree::stat with precision 3... ✅
Solving src::libtree::utoa with precision 3... ✅
Solving src::libtree::small_vec_u64_init with precision 3... ✅
Solving src::libtree::host_is_little_endian with precision 3... ✅
Solving src::libtree::is_ascending_order with precision 3... ✅
Solving src::libtree::string_table_store with precision 3... ✅
Solving src::libtree::string_table_copy_from_file with precision 3... ✅
Solving src::libtree::is_in_exclude_list with precision 3... ✅
Solving src::libtree::tree_preamble with precision 3... ✅
Solving src::libtree::apply_exclude_list with precision 3... ✅
Solving src::libtree::check_absolute_paths with precision 3... ✅
Solving src::libtree::check_search_paths with precision 3... ✅
Solving src::libtree::print_colon_delimited_paths with precision 3... ✅
Solving src::libtree::print_line with precision 3... ✅
Solving src::libtree::visited_files_contains with precision 3... ✅
Solving src::libtree::recurse with precision 3... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::visited_files_contains!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 3... ✅
Solving src::libtree::parse_ld_config_file with precision 3... ✅
Solving src::libtree::parse_ld_library_path with precision 3... ✅
Solving src::libtree::set_default_paths with precision 3... ✅
Solving src::libtree::print_tree with precision 3... ✅
Solving src::libtree::main_0 with precision 3... ✅
src::libtree::libtree_state_free: (&uniq & &move &move & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::print_error: (_, _, & &, &, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::small_vec_u64_free: (&) -> _
src::libtree::small_vec_u64_append: (&, _) -> _
src::libtree::libtree_state_init: (&uniq & & & & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::string_table_maybe_grow: (&uniq &move ↓ &uniq &move, _) -> _
src::libtree::visited_files_append: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (& &) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::string_table_copy_from_file: (&uniq &move ↓ &uniq &move, & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (& & & & & & & &, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , & &, & & & & & & & &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::interpolate_variables: (_, _, _) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::visited_files_contains: (& &, &) -> _
src::libtree::recurse: (&, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _, _) -> _
src::libtree::ld_conf_globbing: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_config_file: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_so_conf: (_) -> _
src::libtree::parse_ld_library_path: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::set_default_paths: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::print_tree: (_, & &, &uniq & & & & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::main_0: (_, & &) -> _
Solving src::libtree::libtree_state_free with precision 3... ✅
Solving src::libtree::print_error with precision 3... ✅
Solving src::libtree::small_vec_u64_free with precision 1... ✅
Solving src::libtree::small_vec_u64_append with precision 1... ✅
Solving src::libtree::libtree_state_init with precision 3... ✅
Solving src::libtree::string_table_maybe_grow with precision 3... ✅
Solving src::libtree::visited_files_append with precision 3... ✅
Solving src::libtree::putchar with precision 3... ✅
Solving src::libtree::stat with precision 3... ✅
Solving src::libtree::utoa with precision 3... ✅
Solving src::libtree::small_vec_u64_init with precision 3... ✅
Solving src::libtree::host_is_little_endian with precision 3... ✅
Solving src::libtree::is_ascending_order with precision 3... ✅
Solving src::libtree::string_table_store with precision 3... ✅
Solving src::libtree::string_table_copy_from_file with precision 3... ✅
Solving src::libtree::is_in_exclude_list with precision 3... ✅
Solving src::libtree::tree_preamble with precision 3... ✅
Solving src::libtree::apply_exclude_list with precision 3... ✅
Solving src::libtree::check_absolute_paths with precision 3... ✅
Solving src::libtree::check_search_paths with precision 3... ✅
Solving src::libtree::print_colon_delimited_paths with precision 3... ✅
Solving src::libtree::print_line with precision 3... ✅
Solving src::libtree::visited_files_contains with precision 3... ✅
Solving src::libtree::recurse with precision 3... [31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::visited_files_contains!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_init!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_append!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::apply_exclude_list!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_absolute_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::check_search_paths!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::print_error!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
[31mERROR[0m [2manalysis::ownership::infer::boundary[0m[2m:[0m bad output parameter analysis for src::libtree::small_vec_u64_free!
✅
Solving src::libtree::ld_conf_globbing with precision 3... ✅
Solving src::libtree::parse_ld_config_file with precision 3... ✅
Solving src::libtree::parse_ld_library_path with precision 3... ✅
Solving src::libtree::set_default_paths with precision 3... ✅
Solving src::libtree::print_tree with precision 3... ✅
Solving src::libtree::main_0 with precision 3... ✅
src::libtree::libtree_state_free: (&uniq & &move &move & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::print_error: (_, _, & &, &, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::small_vec_u64_free: (&) -> _
src::libtree::small_vec_u64_append: (&, _) -> _
src::libtree::libtree_state_init: (&uniq & & & & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::string_table_maybe_grow: (&uniq &move ↓ &uniq &move, _) -> _
src::libtree::visited_files_append: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::putchar: (_) -> _
src::libtree::stat: (&, &) -> _
src::libtree::utoa: (&, _) -> _
src::libtree::small_vec_u64_init: (& &) -> _
src::libtree::host_is_little_endian: () -> _
src::libtree::is_ascending_order: (&, _) -> _
src::libtree::string_table_store: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::string_table_copy_from_file: (&uniq &move ↓ &uniq &move, & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &) -> _
src::libtree::is_in_exclude_list: (&) -> _
src::libtree::tree_preamble: (& & & & & & & &, _) -> _
src::libtree::apply_exclude_list: (&uniq  ↓ &uniq , & &, & & & & & & & &) -> _
src::libtree::check_absolute_paths: (&uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::check_search_paths: (_, _, &uniq  ↓ &uniq , & &, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _) -> _
src::libtree::interpolate_variables: (_, _, _) -> _
src::libtree::print_colon_delimited_paths: (&, &) -> _
src::libtree::print_line: (_, &, &, &, _, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::visited_files_contains: (& &, &) -> _
src::libtree::recurse: (&, _, &uniq & &move &move & & & & ↓ &uniq & &move &move & & & &, _, _) -> _
src::libtree::ld_conf_globbing: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_config_file: (&uniq &move ↓ &uniq &move, &) -> _
src::libtree::parse_ld_so_conf: (_) -> _
src::libtree::parse_ld_library_path: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::set_default_paths: (&uniq & &move &move & & & & ↓ &uniq & &move &move & & & &) -> _
src::libtree::print_tree: (_, & &, &uniq & & & & & & & ↓ &uniq & & & & & & &) -> _
src::libtree::main_0: (_, & &) -> _
@DefId(0:93 ~ lib[40c5]::src::libtree::putchar)
bb0:
  _2 = _1
  using: _1@Entry
  _4 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _3 = (*_4)
  using: _4@Mir(bb0[1])
  _0 = src::libtree::_IO_putc(move _2, move _3) -> bb1
  using: _2@Mir(bb0[0]), _3@Mir(bb0[2])
bb1:
  return
  using: _0@Mir(bb0[3])
rewrite call src::libtree::_IO_putc @ workspace/libtree/src/libtree.rs:334:12: 334:33 (#0) by default
@DefId(0:94 ~ lib[40c5]::src::libtree::stat)
bb0:
  _3 = const 1_i32
  using: 
  _4 = _1
  using: _1@Entry
  _5 = _2
  using: _2@Entry
  _0 = src::libtree::__xstat(move _3, move _4, move _5) -> bb1
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1]), _5@Mir(bb0[2])
bb1:
  return
  using: _0@Mir(bb0[3])
rewrite call src::libtree::__xstat @ workspace/libtree/src/libtree.rs:341:12: 341:56 (#0) by default
@DefId(0:97 ~ lib[40c5]::src::libtree::utoa)
bb0:
  _3 = _1
  using: _1@Entry
  goto -> bb1
  using: 
bb1:
  _4 = _3
  using: _3@Phi(bb1)
  _6 = _3
  using: _3@Phi(bb1)
  _5 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _6, const 1_isize) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  _3 = move _5
  using: _5@Mir(bb1[2])
  _8 = const 48_u64
  using: 
  _10 = _2
  using: _2@Phi(bb1)
  _11 = const 10_u64
  using: 
  _9 = core::num::<impl u64>::wrapping_rem(move _10, move _11) -> bb3
  using: _10@Mir(bb2[2]), _11@Mir(bb2[3])
bb3:
  _7 = core::num::<impl u64>::wrapping_add(move _8, move _9) -> bb4
  using: _8@Mir(bb2[1]), _9@Mir(bb2[4])
bb4:
  (*_4) = move _7 as i8 (IntToInt)
  using: _4@Mir(bb1[0]), _7@Mir(bb3[0])
  _13 = _2
  using: _2@Phi(bb1)
  _14 = const 10_u64
  using: 
  _12 = core::num::<impl u64>::wrapping_div(move _13, move _14) -> bb5
  using: _13@Mir(bb4[1]), _14@Mir(bb4[2])
bb5:
  _2 = move _12
  using: _12@Mir(bb4[3])
  _17 = _2
  using: _2@Mir(bb5[0])
  _18 = const 0_u64
  using: 
  _16 = Gt(move _17, move _18)
  using: _17@Mir(bb5[1]), _18@Mir(bb5[2])
  _15 = Not(move _16)
  using: _16@Mir(bb5[3])
  switchInt(move _15) -> [0: bb1, otherwise: bb6]
  using: _15@Mir(bb5[4])
bb6:
  _22 = _3
  using: _3@Mir(bb2[0])
  _24 = _1
  using: _1@Entry
  _23 = move _24 as *const i8 (Pointer(MutToConstPointer))
  using: _24@Mir(bb6[1])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _22, move _23) -> bb7
  using: _22@Mir(bb6[0]), _23@Mir(bb6[2])
bb7:
  _20 = move _21 as i64 (IntToInt)
  using: _21@Mir(bb6[3])
  _19 = move _20 as u64 (IntToInt)
  using: _20@Mir(bb7[0])
  _25 = const 0_u64
  using: 
  goto -> bb8
  using: 
bb8:
  _27 = _25
  using: _25@Phi(bb8)
  _29 = _19
  using: _19@Phi(bb8)
  _30 = const 2_u64
  using: 
  _28 = core::num::<impl u64>::wrapping_div(move _29, move _30) -> bb9
  using: _29@Mir(bb8[1]), _30@Mir(bb8[2])
bb9:
  _26 = Lt(move _27, move _28)
  using: _27@Mir(bb8[0]), _28@Mir(bb8[3])
  switchInt(move _26) -> [0: bb20, otherwise: bb10]
  using: _26@Mir(bb9[0])
bb10:
  _33 = _1
  using: _1@Phi(bb8)
  _35 = _25
  using: _25@Phi(bb8)
  _34 = move _35 as isize (IntToInt)
  using: _35@Mir(bb10[1])
  _32 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _33, move _34) -> bb11
  using: _33@Mir(bb10[0]), _34@Mir(bb10[2])
bb11:
  _31 = (*_32)
  using: _32@Mir(bb10[3])
  _38 = _1
  using: _1@Phi(bb8)
  _42 = _19
  using: _19@Phi(bb8)
  _43 = _25
  using: _25@Phi(bb8)
  _41 = core::num::<impl u64>::wrapping_sub(move _42, move _43) -> bb12
  using: _42@Mir(bb11[2]), _43@Mir(bb11[3])
bb12:
  _44 = const 1_u64
  using: 
  _40 = core::num::<impl u64>::wrapping_sub(move _41, move _44) -> bb13
  using: _41@Mir(bb11[4]), _44@Mir(bb12[0])
bb13:
  _39 = move _40 as isize (IntToInt)
  using: _40@Mir(bb12[1])
  _37 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _38, move _39) -> bb14
  using: _38@Mir(bb11[1]), _39@Mir(bb13[0])
bb14:
  _36 = (*_37)
  using: _37@Mir(bb13[1])
  _46 = _1
  using: _1@Phi(bb8)
  _48 = _25
  using: _25@Phi(bb8)
  _47 = move _48 as isize (IntToInt)
  using: _48@Mir(bb14[2])
  _45 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _46, move _47) -> bb15
  using: _46@Mir(bb14[1]), _47@Mir(bb14[3])
bb15:
  (*_45) = move _36
  using: _45@Mir(bb14[4]), _36@Mir(bb14[0])
  _49 = _31
  using: _31@Mir(bb11[0])
  _51 = _1
  using: _1@Phi(bb8)
  _55 = _19
  using: _19@Phi(bb8)
  _56 = _25
  using: _25@Phi(bb8)
  _54 = core::num::<impl u64>::wrapping_sub(move _55, move _56) -> bb16
  using: _55@Mir(bb15[3]), _56@Mir(bb15[4])
bb16:
  _57 = const 1_u64
  using: 
  _53 = core::num::<impl u64>::wrapping_sub(move _54, move _57) -> bb17
  using: _54@Mir(bb15[5]), _57@Mir(bb16[0])
bb17:
  _52 = move _53 as isize (IntToInt)
  using: _53@Mir(bb16[1])
  _50 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _51, move _52) -> bb18
  using: _51@Mir(bb15[2]), _52@Mir(bb17[0])
bb18:
  (*_50) = move _49
  using: _50@Mir(bb17[1]), _49@Mir(bb15[1])
  _59 = _25
  using: _25@Phi(bb8)
  _58 = core::num::<impl u64>::wrapping_add(move _59, const 1_u64) -> bb19
  using: _59@Mir(bb18[1])
bb19:
  _25 = move _58
  using: _58@Mir(bb18[2])
  goto -> bb8
  using: 
bb20:
  _60 = const 0_i32
  using: 
  _62 = _1
  using: _1@Phi(bb8)
  _64 = _19
  using: _19@Phi(bb8)
  _63 = move _64 as isize (IntToInt)
  using: _64@Mir(bb20[2])
  _61 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _62, move _63) -> bb21
  using: _62@Mir(bb20[1]), _63@Mir(bb20[3])
bb21:
  (*_61) = move _60 as i8 (IntToInt)
  using: _61@Mir(bb20[4]), _60@Mir(bb20[0])
  return
  using: _0@Entry
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:365:15: 365:24 (#0) by default
rewrite call core::num::<impl u64>::wrapping_rem @ workspace/libtree/src/libtree.rs:367:29: 367:77 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:367:14: 367:78 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libtree/src/libtree.rs:369:34: 369:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:375:21: 375:37 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libtree/src/libtree.rs:377:19: 377:66 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:378:28: 378:46 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:380:17: 380:32 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:381:18: 381:65 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:379:40: 382:10 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:379:14: 379:32 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:384:17: 384:32 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:385:18: 385:65 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:383:14: 386:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:387:15: 387:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:389:10: 389:30 (#0) by default
@DefId(0:98 ~ lib[40c5]::src::libtree::small_vec_u64_init)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = move _4 as *mut libc::c_void (PtrToPtr)
  using: _4@Mir(bb0[0])
  _5 = const 0_i32
  using: 
  _7 = std::mem::size_of::<src::libtree::small_vec_u64_t>() -> bb1
  using: 
bb1:
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb0[3])
  _2 = src::libtree::memset(move _3, move _5, move _6) -> bb2
  using: _3@Mir(bb0[1]), _5@Mir(bb0[2]), _6@Mir(bb1[0])
bb2:
  _10 = &mut ((*_1).0: [u64; 16])
  using: _1@Entry
  _9 = move _10 as &mut [u64] (Pointer(Unsize))
  using: _10@Mir(bb2[0])
  _8 = core::slice::<impl [u64]>::as_mut_ptr(move _9) -> bb3
  using: _9@Mir(bb2[1])
bb3:
  ((*_1).1: *mut u64) = move _8
  using: _1@Entry, _8@Mir(bb2[2])
  return
  using: _0@Entry
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:396:9: 396:49 (#0) by default
rewrite call src::libtree::memset @ workspace/libtree/src/libtree.rs:393:5: 397:6 (#0) by default
@DefId(0:99 ~ lib[40c5]::src::libtree::small_vec_u64_append)
bb0:
  _4 = ((*_1).2: u64)
  using: _1@Entry
  _5 = const 16_u64
  using: 
  _3 = Lt(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb4, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _6 = ((*_1).2: u64)
  using: _1@Entry
  _8 = ((*_1).2: u64)
  using: _1@Entry
  _7 = core::num::<impl u64>::wrapping_add(move _8, const 1_u64) -> bb2
  using: _8@Mir(bb1[1])
bb2:
  ((*_1).2: u64) = move _7
  using: _1@Entry, _7@Mir(bb1[2])
  _9 = _2
  using: _2@Entry
  _11 = ((*_1).1: *mut u64)
  using: _1@Entry
  _13 = _6
  using: _6@Mir(bb1[0])
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb2[3])
  _10 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _11, move _12) -> bb3
  using: _11@Mir(bb2[2]), _12@Mir(bb2[4])
bb3:
  (*_10) = move _9
  using: _10@Mir(bb2[5]), _9@Mir(bb2[1])
  goto -> bb27
  using: 
bb4:
  _15 = ((*_1).2: u64)
  using: _1@Entry
  _16 = const 16_u64
  using: 
  _14 = Eq(move _15, move _16)
  using: _15@Mir(bb4[0]), _16@Mir(bb4[1])
  switchInt(move _14) -> [0: bb6, otherwise: bb5]
  using: _14@Mir(bb4[2])
bb5:
  _17 = const 32_i32
  using: 
  ((*_1).3: u64) = move _17 as u64 (IntToInt)
  using: _1@Entry, _17@Mir(bb5[0])
  _20 = ((*_1).3: u64)
  using: _1@Entry
  _22 = std::mem::size_of::<u64>() -> bb7
  using: 
bb6:
  _42 = ((*_1).2: u64)
  using: _1@Entry
  _43 = ((*_1).3: u64)
  using: _1@Entry
  _41 = Eq(move _42, move _43)
  using: _42@Mir(bb6[0]), _43@Mir(bb6[1])
  switchInt(move _41) -> [0: bb24, otherwise: bb16]
  using: _41@Mir(bb6[2])
bb7:
  _21 = move _22 as u64 (IntToInt)
  using: _22@Mir(bb5[3])
  _19 = core::num::<impl u64>::wrapping_mul(move _20, move _21) -> bb8
  using: _20@Mir(bb5[2]), _21@Mir(bb7[0])
bb8:
  _18 = src::libtree::malloc(move _19) -> bb9
  using: _19@Mir(bb7[1])
bb9:
  ((*_1).1: *mut u64) = move _18 as *mut u64 (PtrToPtr)
  using: _1@Entry, _18@Mir(bb8[0])
  _24 = ((*_1).1: *mut u64)
  using: _1@Entry
  _23 = std::ptr::mut_ptr::<impl *mut u64>::is_null(move _24) -> bb10
  using: _24@Mir(bb9[1])
bb10:
  switchInt(move _23) -> [0: bb12, otherwise: bb11]
  using: _23@Mir(bb9[2])
bb11:
  _27 = ((*_1).1: *mut u64)
  using: _1@Entry
  _26 = move _27 as usize (PointerExposeAddress)
  using: _27@Mir(bb11[0])
  _25 = Eq(move _26, const 0_usize)
  using: _26@Mir(bb11[1])
  assume(move _25)
  using: _25@Mir(bb11[2])
  _29 = const 1_i32
  using: 
  _28 = src::libtree::exit(move _29)
  using: _29@Mir(bb11[4])
bb12:
  _32 = ((*_1).1: *mut u64)
  using: _1@Entry
  _31 = move _32 as *mut libc::c_void (PtrToPtr)
  using: _32@Mir(bb12[0])
  _36 = &mut ((*_1).0: [u64; 16])
  using: _1@Entry
  _35 = move _36 as &mut [u64] (Pointer(Unsize))
  using: _36@Mir(bb12[2])
  _34 = core::slice::<impl [u64]>::as_mut_ptr(move _35) -> bb13
  using: _35@Mir(bb12[3])
bb13:
  _33 = move _34 as *const libc::c_void (PtrToPtr)
  using: _34@Mir(bb12[4])
  _38 = const 16_u64
  using: 
  _40 = std::mem::size_of::<u64>() -> bb14
  using: 
bb14:
  _39 = move _40 as u64 (IntToInt)
  using: _40@Mir(bb13[2])
  _37 = core::num::<impl u64>::wrapping_mul(move _38, move _39) -> bb15
  using: _38@Mir(bb13[1]), _39@Mir(bb14[0])
bb15:
  _30 = src::libtree::memcpy(move _31, move _33, move _37) -> bb24
  using: _31@Mir(bb12[1]), _33@Mir(bb13[0]), _37@Mir(bb14[1])
bb16:
  _45 = ((*_1).3: u64)
  using: _1@Entry
  _46 = const 2_u64
  using: 
  _44 = core::num::<impl u64>::wrapping_mul(move _45, move _46) -> bb17
  using: _45@Mir(bb16[0]), _46@Mir(bb16[1])
bb17:
  ((*_1).3: u64) = move _44
  using: _1@Entry, _44@Mir(bb16[2])
  _50 = ((*_1).1: *mut u64)
  using: _1@Entry
  _49 = move _50 as *mut libc::c_void (PtrToPtr)
  using: _50@Mir(bb17[1])
  _52 = ((*_1).3: u64)
  using: _1@Entry
  _54 = std::mem::size_of::<u64>() -> bb18
  using: 
bb18:
  _53 = move _54 as u64 (IntToInt)
  using: _54@Mir(bb17[4])
  _51 = core::num::<impl u64>::wrapping_mul(move _52, move _53) -> bb19
  using: _52@Mir(bb17[3]), _53@Mir(bb18[0])
bb19:
  _48 = src::libtree::realloc(move _49, move _51) -> bb20
  using: _49@Mir(bb17[2]), _51@Mir(bb18[1])
bb20:
  _47 = move _48 as *mut u64 (PtrToPtr)
  using: _48@Mir(bb19[0])
  _56 = _47
  using: _47@Mir(bb20[0])
  _55 = std::ptr::mut_ptr::<impl *mut u64>::is_null(move _56) -> bb21
  using: _56@Mir(bb20[1])
bb21:
  switchInt(move _55) -> [0: bb23, otherwise: bb22]
  using: _55@Mir(bb20[2])
bb22:
  _59 = _47
  using: _47@Mir(bb20[0])
  _58 = move _59 as usize (PointerExposeAddress)
  using: _59@Mir(bb22[0])
  _57 = Eq(move _58, const 0_usize)
  using: _58@Mir(bb22[1])
  assume(move _57)
  using: _57@Mir(bb22[2])
  _61 = const 1_i32
  using: 
  _60 = src::libtree::exit(move _61)
  using: _61@Mir(bb22[4])
bb23:
  _62 = _47
  using: _47@Mir(bb20[0])
  ((*_1).1: *mut u64) = move _62
  using: _1@Entry, _62@Mir(bb23[0])
  goto -> bb24
  using: 
bb24:
  _63 = ((*_1).2: u64)
  using: _1@Phi(bb24)
  _65 = ((*_1).2: u64)
  using: _1@Phi(bb24)
  _64 = core::num::<impl u64>::wrapping_add(move _65, const 1_u64) -> bb25
  using: _65@Mir(bb24[1])
bb25:
  ((*_1).2: u64) = move _64
  using: _1@Phi(bb24), _64@Mir(bb24[2])
  _66 = _2
  using: _2@Entry
  _68 = ((*_1).1: *mut u64)
  using: _1@Phi(bb24)
  _70 = _63
  using: _63@Mir(bb24[0])
  _69 = move _70 as isize (IntToInt)
  using: _70@Mir(bb25[3])
  _67 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _68, move _69) -> bb26
  using: _68@Mir(bb25[2]), _69@Mir(bb25[4])
bb26:
  (*_67) = move _66
  using: _67@Mir(bb25[5]), _66@Mir(bb25[1])
  goto -> bb27
  using: 
bb27:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:405:27: 405:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:406:19: 406:42 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:412:42: 412:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:412:29: 412:93 (#0) by default
rewrite call src::libtree::malloc @ workspace/libtree/src/libtree.rs:411:18: 413:10 (#0) by default
rewrite call src::libtree::exit @ workspace/libtree/src/libtree.rs:416:13: 416:35 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:423:31: 423:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:423:18: 423:82 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:418:9: 424:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:427:14: 427:61 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:431:42: 431:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:431:29: 431:93 (#0) by default
rewrite call src::libtree::realloc @ workspace/libtree/src/libtree.rs:429:21: 432:10 (#0) by default
rewrite call src::libtree::exit @ workspace/libtree/src/libtree.rs:435:13: 435:35 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:440:23: 440:38 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:441:15: 441:38 (#0) by default
@DefId(0:100 ~ lib[40c5]::src::libtree::small_vec_u64_free)
bb0:
  _3 = ((*_1).2: u64)
  using: _1@Entry
  _4 = const 16_u64
  using: 
  _2 = Le(move _3, move _4)
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1])
  switchInt(move _2) -> [0: bb1, otherwise: bb3]
  using: _2@Mir(bb0[2])
bb1:
  _7 = ((*_1).1: *mut u64)
  using: _1@Entry
  _6 = move _7 as *mut libc::c_void (PtrToPtr)
  using: _7@Mir(bb1[0])
  _5 = src::libtree::free(move _6) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  ((*_1).1: *mut u64) = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: _1@Entry
  goto -> bb3
  using: 
bb3:
  return
  using: _0@Entry
@DefId(0:101 ~ lib[40c5]::src::libtree::host_is_little_endian)
bb0:
  _1 = const 1_i32
  using: 
  _3 = &raw mut _1
  using: _1@Mir(bb0[0])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[1])
  _8 = _2
  using: _2@Mir(bb0[2])
  _9 = const 0_isize
  using: 
  _7 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _8, move _9) -> bb1
  using: _8@Mir(bb0[3]), _9@Mir(bb0[4])
bb1:
  _6 = (*_7)
  using: _7@Mir(bb0[5])
  _5 = move _6 as i32 (IntToInt)
  using: _6@Mir(bb1[0])
  _10 = const 1_i32
  using: 
  _4 = Eq(move _5, move _10)
  using: _5@Mir(bb1[1]), _10@Mir(bb1[2])
  _0 = move _4 as i32 (IntToInt)
  using: _4@Mir(bb1[3])
  return
  using: _0@Mir(bb1[4])
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:454:20: 454:53 (#0) by default
@DefId(0:102 ~ lib[40c5]::src::libtree::is_ascending_order)
bb0:
  _3 = const 1_u64
  using: 
  goto -> bb1
  using: 
bb1:
  _5 = _3
  using: _3@Phi(bb1)
  _6 = _2
  using: _2@Entry
  _4 = Lt(move _5, move _6)
  using: _5@Mir(bb1[0]), _6@Mir(bb1[1])
  switchInt(move _4) -> [0: bb9, otherwise: bb2]
  using: _4@Mir(bb1[2])
bb2:
  _10 = _1
  using: _1@Phi(bb1)
  _13 = _3
  using: _3@Phi(bb1)
  _14 = const 1_u64
  using: 
  _12 = core::num::<impl u64>::wrapping_sub(move _13, move _14) -> bb3
  using: _13@Mir(bb2[1]), _14@Mir(bb2[2])
bb3:
  _11 = move _12 as isize (IntToInt)
  using: _12@Mir(bb2[3])
  _9 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _10, move _11) -> bb4
  using: _10@Mir(bb2[0]), _11@Mir(bb3[0])
bb4:
  _8 = (*_9)
  using: _9@Mir(bb3[1])
  _17 = _1
  using: _1@Phi(bb1)
  _19 = _3
  using: _3@Phi(bb1)
  _18 = move _19 as isize (IntToInt)
  using: _19@Mir(bb4[2])
  _16 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _17, move _18) -> bb5
  using: _17@Mir(bb4[1]), _18@Mir(bb4[3])
bb5:
  _15 = (*_16)
  using: _16@Mir(bb4[4])
  _7 = Ge(move _8, move _15)
  using: _8@Mir(bb4[0]), _15@Mir(bb5[0])
  switchInt(move _7) -> [0: bb7, otherwise: bb6]
  using: _7@Mir(bb5[1])
bb6:
  _0 = const 0_i32
  using: 
  goto -> bb10
  using: 
bb7:
  _21 = _3
  using: _3@Phi(bb1)
  _20 = core::num::<impl u64>::wrapping_add(move _21, const 1_u64) -> bb8
  using: _21@Mir(bb7[0])
bb8:
  _3 = move _20
  using: _20@Mir(bb7[1])
  goto -> bb1
  using: 
bb9:
  _0 = const 1_i32
  using: 
  goto -> bb10
  using: 
bb10:
  return
  using: _0@Phi(bb10)
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:460:24: 460:71 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:460:15: 460:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:461:19: 461:37 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:465:15: 465:30 (#0) by default
@DefId(0:103 ~ lib[40c5]::src::libtree::string_table_maybe_grow)
bb0:
  _5 = ((*_1).1: u64)
  using: _1@Entry
  _6 = _2
  using: _2@Entry
  _4 = core::num::<impl u64>::wrapping_add(move _5, move _6) -> bb1
  using: _5@Mir(bb0[0]), _6@Mir(bb0[1])
bb1:
  _7 = ((*_1).2: u64)
  using: _1@Entry
  _3 = Le(move _4, move _7)
  using: _4@Mir(bb0[2]), _7@Mir(bb1[0])
  switchInt(move _3) -> [0: bb2, otherwise: bb11]
  using: _3@Mir(bb1[1])
bb2:
  _9 = const 2_u64
  using: 
  _11 = ((*_1).1: u64)
  using: _1@Entry
  _12 = _2
  using: _2@Entry
  _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb3
  using: _11@Mir(bb2[1]), _12@Mir(bb2[2])
bb3:
  _8 = core::num::<impl u64>::wrapping_mul(move _9, move _10) -> bb4
  using: _9@Mir(bb2[0]), _10@Mir(bb2[3])
bb4:
  ((*_1).2: u64) = move _8
  using: _1@Entry, _8@Mir(bb3[0])
  _16 = ((*_1).0: *mut i8)
  using: _1@Entry
  _15 = move _16 as *mut libc::c_void (PtrToPtr)
  using: _16@Mir(bb4[1])
  _18 = ((*_1).2: u64)
  using: _1@Entry
  _20 = std::mem::size_of::<i8>() -> bb5
  using: 
bb5:
  _19 = move _20 as u64 (IntToInt)
  using: _20@Mir(bb4[4])
  _17 = core::num::<impl u64>::wrapping_mul(move _18, move _19) -> bb6
  using: _18@Mir(bb4[3]), _19@Mir(bb5[0])
bb6:
  _14 = src::libtree::realloc(move _15, move _17) -> bb7
  using: _15@Mir(bb4[2]), _17@Mir(bb5[1])
bb7:
  _13 = move _14 as *mut i8 (PtrToPtr)
  using: _14@Mir(bb6[0])
  _22 = _13
  using: _13@Mir(bb7[0])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _22) -> bb8
  using: _22@Mir(bb7[1])
bb8:
  switchInt(move _21) -> [0: bb10, otherwise: bb9]
  using: _21@Mir(bb7[2])
bb9:
  _25 = _13
  using: _13@Mir(bb7[0])
  _24 = move _25 as usize (PointerExposeAddress)
  using: _25@Mir(bb9[0])
  _23 = Eq(move _24, const 0_usize)
  using: _24@Mir(bb9[1])
  assume(move _23)
  using: _23@Mir(bb9[2])
  _27 = const 1_i32
  using: 
  _26 = src::libtree::exit(move _27)
  using: _27@Mir(bb9[4])
bb10:
  _28 = _13
  using: _13@Mir(bb7[0])
  ((*_1).0: *mut i8) = move _28
  using: _1@Entry, _28@Mir(bb10[0])
  goto -> bb11
  using: 
bb11:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:470:17: 470:32 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:473:79: 473:94 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:473:57: 473:95 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:476:38: 476:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:476:25: 476:93 (#0) by default
rewrite call src::libtree::realloc @ workspace/libtree/src/libtree.rs:474:19: 477:6 (#0) by default
rewrite call src::libtree::exit @ workspace/libtree/src/libtree.rs:480:9: 480:31 (#0) by default
@DefId(0:104 ~ lib[40c5]::src::libtree::string_table_store)
bb0:
  _5 = _2
  using: _2@Entry
  _4 = src::libtree::strlen(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _6 = const 1_u64
  using: 
  _3 = core::num::<impl u64>::wrapping_add(move _4, move _6) -> bb2
  using: _4@Mir(bb0[1]), _6@Mir(bb1[0])
bb2:
  _8 = _1
  using: _1@Entry
  _9 = _3
  using: _3@Mir(bb1[1])
  _7 = src::libtree::string_table_maybe_grow(move _8, move _9) -> bb3
  using: _8@Mir(bb2[0]), _9@Mir(bb2[1])
bb3:
  _13 = ((*_1).0: *mut i8)
  using: _1@Entry
  _15 = ((*_1).1: u64)
  using: _1@Entry
  _14 = move _15 as isize (IntToInt)
  using: _15@Mir(bb3[1])
  _12 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _13, move _14) -> bb4
  using: _13@Mir(bb3[0]), _14@Mir(bb3[2])
bb4:
  _11 = move _12 as *mut libc::c_void (PtrToPtr)
  using: _12@Mir(bb3[3])
  _17 = _2
  using: _2@Entry
  _16 = move _17 as *const libc::c_void (PtrToPtr)
  using: _17@Mir(bb4[1])
  _18 = _3
  using: _3@Mir(bb1[1])
  _10 = src::libtree::memcpy(move _11, move _16, move _18) -> bb5
  using: _11@Mir(bb4[0]), _16@Mir(bb4[2]), _18@Mir(bb4[3])
bb5:
  _20 = ((*_1).1: u64)
  using: _1@Entry
  _21 = _3
  using: _3@Mir(bb1[1])
  _19 = core::num::<impl u64>::wrapping_add(move _20, move _21) -> bb6
  using: _20@Mir(bb5[0]), _21@Mir(bb5[1])
bb6:
  ((*_1).1: u64) = move _19
  using: _1@Entry, _19@Mir(bb5[2])
  return
  using: _0@Entry
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:485:17: 485:30 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:485:31: 485:78 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:488:20: 488:43 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:487:5: 491:6 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:492:40: 492:55 (#0) by default
@DefId(0:105 ~ lib[40c5]::src::libtree::string_table_copy_from_file)
bb0:
  _3 = const 0_i32
  using: 
  goto -> bb1
  using: 
bb1:
  _5 = _2
  using: _2@Entry
  _4 = src::libtree::_IO_getc(move _5) -> bb2
  using: _5@Mir(bb1[0])
bb2:
  _3 = move _4
  using: _4@Mir(bb1[1])
  _9 = _3
  using: _3@Mir(bb2[0])
  _10 = const 0_i32
  using: 
  _8 = Ne(move _9, move _10)
  using: _9@Mir(bb2[1]), _10@Mir(bb2[2])
  switchInt(move _8) -> [0: bb3, otherwise: bb4]
  using: _8@Mir(bb2[3])
bb3:
  _7 = const false
  using: 
  goto -> bb5
  using: 
bb4:
  _12 = _3
  using: _3@Mir(bb2[0])
  _13 = const -1_i32
  using: 
  _11 = Ne(move _12, move _13)
  using: _12@Mir(bb4[0]), _13@Mir(bb4[1])
  _7 = move _11
  using: _11@Mir(bb4[2])
  goto -> bb5
  using: 
bb5:
  _6 = Not(move _7)
  using: _7@Phi(bb5)
  switchInt(move _6) -> [0: bb7, otherwise: bb6]
  using: _6@Mir(bb5[0])
bb6:
  _26 = _1
  using: _1@Phi(bb1)
  _27 = const 1_u64
  using: 
  _25 = src::libtree::string_table_maybe_grow(move _26, move _27) -> bb11
  using: _26@Mir(bb6[0]), _27@Mir(bb6[1])
bb7:
  _15 = _1
  using: _1@Phi(bb1)
  _16 = const 1_u64
  using: 
  _14 = src::libtree::string_table_maybe_grow(move _15, move _16) -> bb8
  using: _15@Mir(bb7[0]), _16@Mir(bb7[1])
bb8:
  _17 = ((*_1).1: u64)
  using: _1@Phi(bb1)
  _19 = ((*_1).1: u64)
  using: _1@Phi(bb1)
  _18 = core::num::<impl u64>::wrapping_add(move _19, const 1_u64) -> bb9
  using: _19@Mir(bb8[1])
bb9:
  ((*_1).1: u64) = move _18
  using: _1@Phi(bb1), _18@Mir(bb8[2])
  _20 = _3
  using: _3@Phi(bb5)
  _22 = ((*_1).0: *mut i8)
  using: _1@Phi(bb1)
  _24 = _17
  using: _17@Mir(bb8[0])
  _23 = move _24 as isize (IntToInt)
  using: _24@Mir(bb9[3])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _22, move _23) -> bb10
  using: _22@Mir(bb9[2]), _23@Mir(bb9[4])
bb10:
  (*_21) = move _20 as i8 (IntToInt)
  using: _21@Mir(bb9[5]), _20@Mir(bb9[1])
  goto -> bb1
  using: 
bb11:
  _28 = ((*_1).1: u64)
  using: _1@Phi(bb1)
  _30 = ((*_1).1: u64)
  using: _1@Phi(bb1)
  _29 = core::num::<impl u64>::wrapping_add(move _30, const 1_u64) -> bb12
  using: _30@Mir(bb11[1])
bb12:
  ((*_1).1: u64) = move _29
  using: _1@Phi(bb1), _29@Mir(bb11[2])
  _31 = const 0_i32
  using: 
  _33 = ((*_1).0: *mut i8)
  using: _1@Phi(bb1)
  _35 = _28
  using: _28@Mir(bb11[0])
  _34 = move _35 as isize (IntToInt)
  using: _35@Mir(bb12[3])
  _32 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _33, move _34) -> bb13
  using: _33@Mir(bb12[2]), _34@Mir(bb12[4])
bb13:
  (*_32) = move _31 as i8 (IntToInt)
  using: _32@Mir(bb12[5]), _31@Mir(bb12[1])
  return
  using: _0@Entry
rewrite call src::libtree::_IO_getc @ workspace/libtree/src/libtree.rs:497:13: 497:27 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:503:27: 503:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:504:21: 504:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:508:23: 508:38 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:509:17: 509:41 (#0) by default
@DefId(0:106 ~ lib[40c5]::src::libtree::is_in_exclude_list)
bb0:
  _2 = _1
  using: _1@Entry
  _5 = _2
  using: _2@Mir(bb0[0])
  _4 = move _5 as *const i8 (Pointer(MutToConstPointer))
  using: _5@Mir(bb0[1])
  _6 = const 0_i32
  using: 
  _3 = src::libtree::strrchr(move _4, move _6) -> bb1
  using: _4@Mir(bb0[2]), _6@Mir(bb0[3])
bb1:
  _8 = _2
  using: _2@Mir(bb0[0])
  _9 = _3
  using: _3@Mir(bb0[4])
  _7 = Eq(move _8, move _9)
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1])
  switchInt(move _7) -> [0: bb3, otherwise: bb2]
  using: _7@Mir(bb1[2])
bb2:
  _0 = const 0_i32
  using: 
  goto -> bb31
  using: 
bb3:
  _11 = _3
  using: _3@Mir(bb0[4])
  _10 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _11, const -1_isize) -> bb4
  using: _11@Mir(bb3[0])
bb4:
  _3 = move _10
  using: _10@Mir(bb3[1])
  goto -> bb5
  using: 
bb5:
  _14 = _3
  using: _3@Phi(bb5)
  _15 = _2
  using: _2@Mir(bb0[0])
  _13 = Ne(move _14, move _15)
  using: _14@Mir(bb5[0]), _15@Mir(bb5[1])
  switchInt(move _13) -> [0: bb6, otherwise: bb7]
  using: _13@Mir(bb5[2])
bb6:
  _12 = const false
  using: 
  goto -> bb8
  using: 
bb7:
  _20 = (*_3)
  using: _3@Phi(bb5)
  _19 = move _20 as i32 (IntToInt)
  using: _20@Mir(bb7[0])
  _21 = const 48_i32
  using: 
  _18 = Ge(move _19, move _21)
  using: _19@Mir(bb7[1]), _21@Mir(bb7[2])
  switchInt(move _18) -> [0: bb12, otherwise: bb13]
  using: _18@Mir(bb7[3])
bb8:
  switchInt(move _12) -> [0: bb17, otherwise: bb15]
  using: _12@Phi(bb8)
bb9:
  _16 = const true
  using: 
  goto -> bb11
  using: 
bb10:
  _28 = (*_3)
  using: _3@Phi(bb14)
  _27 = move _28 as i32 (IntToInt)
  using: _28@Mir(bb10[0])
  _29 = const 46_i32
  using: 
  _26 = Eq(move _27, move _29)
  using: _27@Mir(bb10[1]), _29@Mir(bb10[2])
  _16 = move _26
  using: _26@Mir(bb10[3])
  goto -> bb11
  using: 
bb11:
  _12 = move _16
  using: _16@Phi(bb11)
  goto -> bb8
  using: 
bb12:
  _17 = const false
  using: 
  goto -> bb14
  using: 
bb13:
  _24 = (*_3)
  using: _3@Phi(bb5)
  _23 = move _24 as i32 (IntToInt)
  using: _24@Mir(bb13[0])
  _25 = const 57_i32
  using: 
  _22 = Le(move _23, move _25)
  using: _23@Mir(bb13[1]), _25@Mir(bb13[2])
  _17 = move _22
  using: _22@Mir(bb13[3])
  goto -> bb14
  using: 
bb14:
  switchInt(move _17) -> [0: bb10, otherwise: bb9]
  using: _17@Phi(bb14)
bb15:
  _31 = _3
  using: _3@Phi(bb8)
  _30 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _31, const -1_isize) -> bb16
  using: _31@Mir(bb15[0])
bb16:
  _3 = move _30
  using: _30@Mir(bb15[1])
  goto -> bb5
  using: 
bb17:
  _32 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb18:
  _34 = _32
  using: _32@Phi(bb18)
  _37 = std::mem::size_of::<[*const i8; 14]>() -> bb19
  using: 
bb19:
  _36 = move _37 as u64 (IntToInt)
  using: _37@Mir(bb18[1])
  _39 = std::mem::size_of::<*mut i8>() -> bb20
  using: 
bb20:
  _38 = move _39 as u64 (IntToInt)
  using: _39@Mir(bb19[1])
  _35 = core::num::<impl u64>::wrapping_div(move _36, move _38) -> bb21
  using: _36@Mir(bb19[0]), _38@Mir(bb20[0])
bb21:
  _33 = Lt(move _34, move _35)
  using: _34@Mir(bb18[0]), _35@Mir(bb20[1])
  switchInt(move _33) -> [0: bb30, otherwise: bb22]
  using: _33@Mir(bb21[0])
bb22:
  _42 = const {alloc26: *mut [*const i8; 14]}
  using: 
  _44 = _32
  using: _32@Phi(bb18)
  _43 = move _44 as usize (IntToInt)
  using: _44@Mir(bb22[1])
  _45 = const 14_usize
  using: 
  _46 = Lt(_43, _45)
  using: _43@Mir(bb22[2]), _45@Mir(bb22[3])
  assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _43) -> bb23
  using: _46@Entry, _45@Entry, _43@Entry
bb23:
  _41 = (*_42)[_43]
  using: _42@Mir(bb22[0]), _43@Mir(bb22[2])
  _40 = src::libtree::strlen(move _41) -> bb24
  using: _41@Mir(bb23[0])
bb24:
  _50 = _2
  using: _2@Phi(bb18)
  _49 = move _50 as *const i8 (Pointer(MutToConstPointer))
  using: _50@Mir(bb24[0])
  _52 = const {alloc26: *mut [*const i8; 14]}
  using: 
  _54 = _32
  using: _32@Phi(bb18)
  _53 = move _54 as usize (IntToInt)
  using: _54@Mir(bb24[3])
  _55 = const 14_usize
  using: 
  _56 = Lt(_53, _55)
  using: _53@Mir(bb24[4]), _55@Mir(bb24[5])
  assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _53) -> bb25
  using: _56@Entry, _55@Entry, _53@Entry
bb25:
  _51 = (*_52)[_53]
  using: _52@Mir(bb24[2]), _53@Mir(bb24[4])
  _57 = _40
  using: _40@Mir(bb23[1])
  _48 = src::libtree::strncmp(move _49, move _51, move _57) -> bb26
  using: _49@Mir(bb24[1]), _51@Mir(bb25[0]), _57@Mir(bb25[1])
bb26:
  _58 = const 0_i32
  using: 
  _47 = Ne(move _48, move _58)
  using: _48@Mir(bb25[2]), _58@Mir(bb26[0])
  switchInt(move _47) -> [0: bb29, otherwise: bb27]
  using: _47@Mir(bb26[1])
bb27:
  _60 = _32
  using: _32@Phi(bb18)
  _59 = core::num::<impl u64>::wrapping_add(move _60, const 1_u64) -> bb28
  using: _60@Mir(bb27[0])
bb28:
  _32 = move _59
  using: _59@Mir(bb27[1])
  goto -> bb18
  using: 
bb29:
  _0 = const 1_i32
  using: 
  goto -> bb31
  using: 
bb30:
  _0 = const 0_i32
  using: 
  goto -> bb31
  using: 
bb31:
  return
  using: _0@Phi(bb31)
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:513:19: 513:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:517:15: 517:25 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:522:19: 522:29 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:526:12: 526:62 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:527:27: 527:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libtree/src/libtree.rs:527:14: 527:87 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:529:23: 529:55 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:530:12: 530:57 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:531:19: 531:34 (#0) by default
@DefId(0:108 ~ lib[40c5]::src::libtree::tree_preamble)
bb0:
  _4 = _2
  using: _2@Entry
  _5 = const 0_u64
  using: 
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb1, otherwise: bb17]
  using: _3@Mir(bb0[2])
bb1:
  _6 = const 0_u64
  using: 
  goto -> bb2
  using: 
bb2:
  _8 = _6
  using: _6@Phi(bb2)
  _10 = _2
  using: _2@Entry
  _11 = const 1_u64
  using: 
  _9 = core::num::<impl u64>::wrapping_sub(move _10, move _11) -> bb3
  using: _10@Mir(bb2[1]), _11@Mir(bb2[2])
bb3:
  _7 = Lt(move _8, move _9)
  using: _8@Mir(bb2[0]), _9@Mir(bb2[3])
  switchInt(move _7) -> [0: bb11, otherwise: bb4]
  using: _7@Mir(bb3[0])
bb4:
  _17 = _6
  using: _6@Phi(bb2)
  _16 = move _17 as usize (IntToInt)
  using: _17@Mir(bb4[0])
  _18 = const 32_usize
  using: 
  _19 = Lt(_16, _18)
  using: _16@Mir(bb4[1]), _18@Mir(bb4[2])
  assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _16) -> bb5
  using: _19@Entry, _18@Entry, _16@Entry
bb5:
  _15 = ((*_1).15: [i8; 32])[_16]
  using: _1@Phi(bb2), _16@Mir(bb4[1])
  _14 = move _15 as i32 (IntToInt)
  using: _15@Mir(bb5[0])
  switchInt(move _14) -> [0: bb7, otherwise: bb6]
  using: _14@Mir(bb5[1])
bb6:
  _22 = const b"    \x00"
  using: 
  _21 = &raw const (*_22)
  using: _22@Mir(bb6[0])
  _20 = move _21 as *const u8 (Pointer(ArrayToPointer))
  using: _21@Mir(bb6[1])
  _13 = move _20 as *const i8 (PtrToPtr)
  using: _20@Mir(bb6[2])
  goto -> bb8
  using: 
bb7:
  _25 = const b"\xe2\x94\x82   \x00"
  using: 
  _24 = &raw const (*_25)
  using: _25@Mir(bb7[0])
  _23 = move _24 as *const u8 (Pointer(ArrayToPointer))
  using: _24@Mir(bb7[1])
  _13 = move _23 as *const i8 (PtrToPtr)
  using: _23@Mir(bb7[2])
  goto -> bb8
  using: 
bb8:
  _27 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _26 = (*_27)
  using: _27@Mir(bb8[0])
  _12 = src::libtree::fputs(move _13, move _26) -> bb9
  using: _13@Phi(bb8), _26@Mir(bb8[1])
bb9:
  _29 = _6
  using: _6@Phi(bb2)
  _28 = core::num::<impl u64>::wrapping_add(move _29, const 1_u64) -> bb10
  using: _29@Mir(bb9[0])
bb10:
  _6 = move _28
  using: _28@Mir(bb9[1])
  goto -> bb2
  using: 
bb11:
  _36 = _2
  using: _2@Entry
  _37 = const 1_u64
  using: 
  _35 = core::num::<impl u64>::wrapping_sub(move _36, move _37) -> bb12
  using: _36@Mir(bb11[0]), _37@Mir(bb11[1])
bb12:
  _34 = move _35 as usize (IntToInt)
  using: _35@Mir(bb11[2])
  _38 = const 32_usize
  using: 
  _39 = Lt(_34, _38)
  using: _34@Mir(bb12[0]), _38@Mir(bb12[1])
  assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _34) -> bb13
  using: _39@Entry, _38@Entry, _34@Entry
bb13:
  _33 = ((*_1).15: [i8; 32])[_34]
  using: _1@Phi(bb2), _34@Mir(bb12[0])
  _32 = move _33 as i32 (IntToInt)
  using: _33@Mir(bb13[0])
  switchInt(move _32) -> [0: bb15, otherwise: bb14]
  using: _32@Mir(bb13[1])
bb14:
  _42 = const b"\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 \x00"
  using: 
  _41 = &raw const (*_42)
  using: _42@Mir(bb14[0])
  _40 = move _41 as *const u8 (Pointer(ArrayToPointer))
  using: _41@Mir(bb14[1])
  _31 = move _40 as *const i8 (PtrToPtr)
  using: _40@Mir(bb14[2])
  goto -> bb16
  using: 
bb15:
  _45 = const b"\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 \x00"
  using: 
  _44 = &raw const (*_45)
  using: _45@Mir(bb15[0])
  _43 = move _44 as *const u8 (Pointer(ArrayToPointer))
  using: _44@Mir(bb15[1])
  _31 = move _43 as *const i8 (PtrToPtr)
  using: _43@Mir(bb15[2])
  goto -> bb16
  using: 
bb16:
  _47 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _46 = (*_47)
  using: _47@Mir(bb16[0])
  _30 = src::libtree::fputs(move _31, move _46) -> bb17
  using: _31@Phi(bb16), _46@Mir(bb16[1])
bb17:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:543:21: 543:68 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:544:9: 551:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:552:15: 552:30 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:555:40: 555:87 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:554:5: 564:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:109 ~ lib[40c5]::src::libtree::apply_exclude_list)
bb0:
  _4 = const 0_u64
  using: 
  goto -> bb1
  using: 
bb1:
  _6 = _4
  using: _4@Phi(bb1)
  _7 = (*_1)
  using: _1@Phi(bb1)
  _5 = Lt(move _6, move _7)
  using: _6@Mir(bb1[0]), _7@Mir(bb1[1])
  switchInt(move _5) -> [0: bb15, otherwise: bb2]
  using: _5@Mir(bb1[2])
bb2:
  _10 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Phi(bb1)
  _14 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _16 = _4
  using: _4@Phi(bb1)
  _15 = move _16 as isize (IntToInt)
  using: _16@Mir(bb2[2])
  _13 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _14, move _15) -> bb3
  using: _14@Mir(bb2[1]), _15@Mir(bb2[3])
bb3:
  _12 = (*_13)
  using: _13@Mir(bb2[4])
  _11 = move _12 as isize (IntToInt)
  using: _12@Mir(bb3[0])
  _9 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _10, move _11) -> bb4
  using: _10@Mir(bb2[0]), _11@Mir(bb3[1])
bb4:
  _8 = src::libtree::is_in_exclude_list(move _9) -> bb5
  using: _9@Mir(bb3[2])
bb5:
  switchInt(move _8) -> [0: bb13, otherwise: bb6]
  using: _8@Mir(bb4[0])
bb6:
  _19 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _21 = _4
  using: _4@Phi(bb1)
  _20 = move _21 as isize (IntToInt)
  using: _21@Mir(bb6[1])
  _18 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _19, move _20) -> bb7
  using: _19@Mir(bb6[0]), _20@Mir(bb6[2])
bb7:
  _17 = (*_18)
  using: _18@Mir(bb6[3])
  _24 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _27 = (*_1)
  using: _1@Phi(bb1)
  _28 = const 1_u64
  using: 
  _26 = core::num::<impl u64>::wrapping_sub(move _27, move _28) -> bb8
  using: _27@Mir(bb7[2]), _28@Mir(bb7[3])
bb8:
  _25 = move _26 as isize (IntToInt)
  using: _26@Mir(bb7[4])
  _23 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _24, move _25) -> bb9
  using: _24@Mir(bb7[1]), _25@Mir(bb8[0])
bb9:
  _22 = (*_23)
  using: _23@Mir(bb8[1])
  _30 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _32 = _4
  using: _4@Phi(bb1)
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb9[2])
  _29 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _30, move _31) -> bb10
  using: _30@Mir(bb9[1]), _31@Mir(bb9[3])
bb10:
  (*_29) = move _22
  using: _29@Mir(bb9[4]), _22@Mir(bb9[0])
  _34 = (*_1)
  using: _1@Phi(bb1)
  _33 = core::num::<impl u64>::wrapping_sub(move _34, const 1_u64) -> bb11
  using: _34@Mir(bb10[1])
bb11:
  (*_1) = move _33
  using: _1@Phi(bb1), _33@Mir(bb10[2])
  _35 = _17
  using: _17@Mir(bb7[0])
  _37 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _39 = (*_1)
  using: _1@Phi(bb1)
  _38 = move _39 as isize (IntToInt)
  using: _39@Mir(bb11[3])
  _36 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _37, move _38) -> bb12
  using: _37@Mir(bb11[2]), _38@Mir(bb11[4])
bb12:
  (*_36) = move _35
  using: _36@Mir(bb11[5]), _35@Mir(bb11[1])
  goto -> bb1
  using: 
bb13:
  _41 = _4
  using: _4@Phi(bb1)
  _40 = core::num::<impl u64>::wrapping_add(move _41, const 1_u64) -> bb14
  using: _41@Mir(bb13[0])
bb14:
  _4 = move _40
  using: _40@Mir(bb13[1])
  goto -> bb1
  using: 
bb15:
  return
  using: _0@Entry
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:574:71: 574:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:574:37: 574:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:577:54: 577:72 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:579:37: 579:84 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:578:88: 580:14 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:578:40: 578:58 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:581:53: 581:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:582:40: 582:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:584:19: 584:34 (#0) by default
@DefId(0:110 ~ lib[40c5]::src::libtree::check_absolute_paths)
bb0:
  _0 = const 0_i32
  using: 
  _6 = const 0_u64
  using: 
  goto -> bb1
  using: 
bb1:
  _8 = _6
  using: _6@Phi(bb1)
  _9 = (*_1)
  using: _1@Phi(bb1)
  _7 = Lt(move _8, move _9)
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1])
  switchInt(move _7) -> [0: bb55, otherwise: bb2]
  using: _7@Mir(bb1[2])
bb2:
  _11 = &raw mut ((*_4).5: src::libtree::string_table_t)
  using: _4@Phi(bb1)
  _10 = move _11 as *const src::libtree::string_table_t (Pointer(MutToConstPointer))
  using: _11@Mir(bb2[0])
  _16 = ((*_10).0: *mut i8)
  using: _10@Mir(bb2[1])
  _20 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _22 = _6
  using: _6@Phi(bb1)
  _21 = move _22 as isize (IntToInt)
  using: _22@Mir(bb2[4])
  _19 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _20, move _21) -> bb3
  using: _20@Mir(bb2[3]), _21@Mir(bb2[5])
bb3:
  _18 = (*_19)
  using: _19@Mir(bb2[6])
  _17 = move _18 as isize (IntToInt)
  using: _18@Mir(bb3[0])
  _15 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _16, move _17) -> bb4
  using: _16@Mir(bb2[2]), _17@Mir(bb3[1])
bb4:
  _14 = move _15 as *const i8 (Pointer(MutToConstPointer))
  using: _15@Mir(bb3[2])
  _23 = const 47_i32
  using: 
  _13 = src::libtree::strchr(move _14, move _23) -> bb5
  using: _14@Mir(bb4[0]), _23@Mir(bb4[1])
bb5:
  _12 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _13) -> bb6
  using: _13@Mir(bb4[2])
bb6:
  switchInt(move _12) -> [0: bb12, otherwise: bb7]
  using: _12@Mir(bb5[0])
bb7:
  _29 = ((*_10).0: *mut i8)
  using: _10@Mir(bb2[1])
  _33 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _35 = _6
  using: _6@Phi(bb1)
  _34 = move _35 as isize (IntToInt)
  using: _35@Mir(bb7[2])
  _32 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _33, move _34) -> bb8
  using: _33@Mir(bb7[1]), _34@Mir(bb7[3])
bb8:
  _31 = (*_32)
  using: _32@Mir(bb7[4])
  _30 = move _31 as isize (IntToInt)
  using: _31@Mir(bb8[0])
  _28 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _29, move _30) -> bb9
  using: _29@Mir(bb7[0]), _30@Mir(bb8[1])
bb9:
  _27 = move _28 as *const i8 (Pointer(MutToConstPointer))
  using: _28@Mir(bb8[2])
  _36 = const 47_i32
  using: 
  _26 = src::libtree::strchr(move _27, move _36) -> bb10
  using: _27@Mir(bb9[0]), _36@Mir(bb9[1])
bb10:
  _25 = move _26 as usize (PointerExposeAddress)
  using: _26@Mir(bb9[2])
  _24 = Eq(move _25, const 0_usize)
  using: _25@Mir(bb10[0])
  assume(move _24)
  using: _24@Mir(bb10[1])
  _38 = _6
  using: _6@Phi(bb1)
  _37 = core::num::<impl u64>::wrapping_add(move _38, const 1_u64) -> bb11
  using: _38@Mir(bb10[3])
bb11:
  _6 = move _37
  using: _37@Mir(bb10[4])
  goto -> bb1
  using: 
bb12:
  _39 = [const 0_i8; 4096]
  using: 
  _43 = ((*_10).0: *mut i8)
  using: _10@Mir(bb2[1])
  _47 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _49 = _6
  using: _6@Phi(bb1)
  _48 = move _49 as isize (IntToInt)
  using: _49@Mir(bb12[3])
  _46 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _47, move _48) -> bb13
  using: _47@Mir(bb12[2]), _48@Mir(bb12[4])
bb13:
  _45 = (*_46)
  using: _46@Mir(bb12[5])
  _44 = move _45 as isize (IntToInt)
  using: _45@Mir(bb13[0])
  _42 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _43, move _44) -> bb14
  using: _43@Mir(bb12[1]), _44@Mir(bb13[1])
bb14:
  _41 = move _42 as *const i8 (Pointer(MutToConstPointer))
  using: _42@Mir(bb13[2])
  _40 = src::libtree::strlen(move _41) -> bb15
  using: _41@Mir(bb14[0])
bb15:
  _51 = _40
  using: _40@Mir(bb14[1])
  _52 = const 4096_u64
  using: 
  _50 = Ge(move _51, move _52)
  using: _51@Mir(bb15[0]), _52@Mir(bb15[1])
  switchInt(move _50) -> [0: bb16, otherwise: bb1]
  using: _50@Mir(bb15[2])
bb16:
  _57 = &mut _39
  using: _39@Mir(bb12[0])
  _56 = move _57 as &mut [i8] (Pointer(Unsize))
  using: _57@Mir(bb16[0])
  _55 = core::slice::<impl [i8]>::as_mut_ptr(move _56) -> bb17
  using: _56@Mir(bb16[1])
bb17:
  _54 = move _55 as *mut libc::c_void (PtrToPtr)
  using: _55@Mir(bb16[2])
  _60 = ((*_10).0: *mut i8)
  using: _10@Mir(bb2[1])
  _64 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _66 = _6
  using: _6@Phi(bb1)
  _65 = move _66 as isize (IntToInt)
  using: _66@Mir(bb17[3])
  _63 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _64, move _65) -> bb18
  using: _64@Mir(bb17[2]), _65@Mir(bb17[4])
bb18:
  _62 = (*_63)
  using: _63@Mir(bb17[5])
  _61 = move _62 as isize (IntToInt)
  using: _62@Mir(bb18[0])
  _59 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _60, move _61) -> bb19
  using: _60@Mir(bb17[1]), _61@Mir(bb18[1])
bb19:
  _58 = move _59 as *const libc::c_void (PtrToPtr)
  using: _59@Mir(bb18[2])
  _68 = _40
  using: _40@Mir(bb14[1])
  _69 = const 1_u64
  using: 
  _67 = core::num::<impl u64>::wrapping_add(move _68, move _69) -> bb20
  using: _68@Mir(bb19[1]), _69@Mir(bb19[2])
bb20:
  _53 = src::libtree::memcpy(move _54, move _58, move _67) -> bb21
  using: _54@Mir(bb17[0]), _58@Mir(bb19[0]), _67@Mir(bb19[3])
bb21:
  _72 = (*_1)
  using: _1@Phi(bb1)
  _73 = const 1_u64
  using: 
  _71 = Le(move _72, move _73)
  using: _72@Mir(bb21[0]), _73@Mir(bb21[1])
  _70 = move _71 as i32 (IntToInt)
  using: _71@Mir(bb21[2])
  _75 = _3
  using: _3@Phi(bb1)
  _74 = move _75 as usize (IntToInt)
  using: _75@Mir(bb21[4])
  _76 = const 32_usize
  using: 
  _77 = Lt(_74, _76)
  using: _74@Mir(bb21[5]), _76@Mir(bb21[6])
  assert(move _77, "index out of bounds: the length is {} but the index is {}", move _76, _74) -> bb22
  using: _77@Entry, _76@Entry, _74@Entry
bb22:
  ((*_4).15: [i8; 32])[_74] = move _70 as i8 (IntToInt)
  using: _4@Phi(bb1), _74@Mir(bb21[5]), _70@Mir(bb21[3])
  _78 = const {0x0 as *mut i8}
  using: 
  _82 = const 0_usize
  using: 
  _81 = _39[_82]
  using: _39@Mir(bb12[0]), _82@Mir(bb22[2])
  _80 = move _81 as i32 (IntToInt)
  using: _81@Mir(bb22[3])
  _83 = const 47_i32
  using: 
  _79 = Ne(move _80, move _83)
  using: _80@Mir(bb22[4]), _83@Mir(bb22[5])
  switchInt(move _79) -> [0: bb24, otherwise: bb23]
  using: _79@Mir(bb22[6])
bb23:
  _87 = const b" is not absolute\x00"
  using: 
  _86 = &raw const (*_87)
  using: _87@Mir(bb23[0])
  _85 = move _86 as *const u8 (Pointer(ArrayToPointer))
  using: _86@Mir(bb23[1])
  _84 = move _85 as *const i8 (PtrToPtr)
  using: _85@Mir(bb23[2])
  _78 = move _84 as *mut i8 (PtrToPtr)
  using: _84@Mir(bb23[3])
  _0 = const 28_i32
  using: 
  goto -> bb34
  using: 
bb24:
  _91 = &mut _39
  using: _39@Mir(bb12[0])
  _90 = move _91 as &mut [i8] (Pointer(Unsize))
  using: _91@Mir(bb24[0])
  _89 = core::slice::<impl [i8]>::as_mut_ptr(move _90) -> bb25
  using: _90@Mir(bb24[1])
bb25:
  _93 = _3
  using: _3@Phi(bb1)
  _94 = const 1_u64
  using: 
  _92 = core::num::<impl u64>::wrapping_add(move _93, move _94) -> bb26
  using: _93@Mir(bb25[0]), _94@Mir(bb25[1])
bb26:
  _95 = _4
  using: _4@Phi(bb1)
  _96 = _5
  using: _5@Phi(bb1)
  Deinit(_98)
  using: 
  (_98.0: u32) = const _
  using: 
  (_98.1: u64) = const 0_u64
  using: 
  _97 = _98
  using: _98@Mir(bb26[2])
  _88 = src::libtree::recurse(move _89, move _92, move _95, move _96, move _97) -> bb27
  using: _89@Mir(bb24[2]), _92@Mir(bb25[2]), _95@Mir(bb26[0]), _96@Mir(bb26[1]), _97@Mir(bb26[5])
bb27:
  _100 = _88
  using: _88@Mir(bb26[6])
  _101 = const 28_i32
  using: 
  _99 = Eq(move _100, move _101)
  using: _100@Mir(bb27[0]), _101@Mir(bb27[1])
  switchInt(move _99) -> [0: bb29, otherwise: bb28]
  using: _99@Mir(bb27[2])
bb28:
  _0 = const 28_i32
  using: 
  goto -> bb29
  using: 
bb29:
  _104 = _88
  using: _88@Mir(bb26[6])
  _105 = const 0_i32
  using: 
  _103 = Ne(move _104, move _105)
  using: _104@Mir(bb29[0]), _105@Mir(bb29[1])
  switchInt(move _103) -> [0: bb30, otherwise: bb31]
  using: _103@Mir(bb29[2])
bb30:
  _102 = const false
  using: 
  goto -> bb32
  using: 
bb31:
  _107 = _88
  using: _88@Mir(bb26[6])
  _108 = const 28_i32
  using: 
  _106 = Ne(move _107, move _108)
  using: _107@Mir(bb31[0]), _108@Mir(bb31[1])
  _102 = move _106
  using: _106@Mir(bb31[2])
  goto -> bb32
  using: 
bb32:
  switchInt(move _102) -> [0: bb34, otherwise: bb33]
  using: _102@Phi(bb32)
bb33:
  _112 = const b" not found\x00"
  using: 
  _111 = &raw const (*_112)
  using: _112@Mir(bb33[0])
  _110 = move _111 as *const u8 (Pointer(ArrayToPointer))
  using: _111@Mir(bb33[1])
  _109 = move _110 as *const i8 (PtrToPtr)
  using: _110@Mir(bb33[2])
  _78 = move _109 as *mut i8 (PtrToPtr)
  using: _109@Mir(bb33[3])
  goto -> bb34
  using: 
bb34:
  _115 = _78
  using: _78@Phi(bb34)
  _114 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _115) -> bb35
  using: _115@Mir(bb34[0])
bb35:
  _113 = Not(move _114)
  using: _114@Mir(bb34[1])
  switchInt(move _113) -> [0: bb47, otherwise: bb36]
  using: _113@Mir(bb35[0])
bb36:
  _117 = _4
  using: _4@Phi(bb34)
  _119 = _3
  using: _3@Phi(bb34)
  _120 = const 1_u64
  using: 
  _118 = core::num::<impl u64>::wrapping_add(move _119, move _120) -> bb37
  using: _119@Mir(bb36[1]), _120@Mir(bb36[2])
bb37:
  _116 = src::libtree::tree_preamble(move _117, move _118) -> bb38
  using: _117@Mir(bb36[0]), _118@Mir(bb36[3])
bb38:
  _121 = ((*_4).2: i32)
  using: _4@Phi(bb34)
  switchInt(move _121) -> [0: bb40, otherwise: bb39]
  using: _121@Mir(bb38[0])
bb39:
  _126 = const b"\x1b[1;31m\x00"
  using: 
  _125 = &raw const (*_126)
  using: _126@Mir(bb39[0])
  _124 = move _125 as *const u8 (Pointer(ArrayToPointer))
  using: _125@Mir(bb39[1])
  _123 = move _124 as *const i8 (PtrToPtr)
  using: _124@Mir(bb39[2])
  _128 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _127 = (*_128)
  using: _128@Mir(bb39[4])
  _122 = src::libtree::fputs(move _123, move _127) -> bb40
  using: _123@Mir(bb39[3]), _127@Mir(bb39[5])
bb40:
  _133 = &mut _39
  using: _39@Phi(bb34)
  _132 = move _133 as &mut [i8] (Pointer(Unsize))
  using: _133@Mir(bb40[0])
  _131 = core::slice::<impl [i8]>::as_mut_ptr(move _132) -> bb41
  using: _132@Mir(bb40[1])
bb41:
  _130 = move _131 as *const i8 (Pointer(MutToConstPointer))
  using: _131@Mir(bb40[2])
  _135 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _134 = (*_135)
  using: _135@Mir(bb41[1])
  _129 = src::libtree::fputs(move _130, move _134) -> bb42
  using: _130@Mir(bb41[0]), _134@Mir(bb41[2])
bb42:
  _140 = const b" is not absolute\x00"
  using: 
  _139 = &raw const (*_140)
  using: _140@Mir(bb42[0])
  _138 = move _139 as *const u8 (Pointer(ArrayToPointer))
  using: _139@Mir(bb42[1])
  _137 = move _138 as *const i8 (PtrToPtr)
  using: _138@Mir(bb42[2])
  _142 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _141 = (*_142)
  using: _142@Mir(bb42[4])
  _136 = src::libtree::fputs(move _137, move _141) -> bb43
  using: _137@Mir(bb42[3]), _141@Mir(bb42[5])
bb43:
  _145 = ((*_4).2: i32)
  using: _4@Phi(bb34)
  switchInt(move _145) -> [0: bb45, otherwise: bb44]
  using: _145@Mir(bb43[0])
bb44:
  _148 = const b"\x1b[0m\n\x00"
  using: 
  _147 = &raw const (*_148)
  using: _148@Mir(bb44[0])
  _146 = move _147 as *const u8 (Pointer(ArrayToPointer))
  using: _147@Mir(bb44[1])
  _144 = move _146 as *const i8 (PtrToPtr)
  using: _146@Mir(bb44[2])
  goto -> bb46
  using: 
bb45:
  _151 = const b"\n\x00"
  using: 
  _150 = &raw const (*_151)
  using: _151@Mir(bb45[0])
  _149 = move _150 as *const u8 (Pointer(ArrayToPointer))
  using: _150@Mir(bb45[1])
  _144 = move _149 as *const i8 (PtrToPtr)
  using: _149@Mir(bb45[2])
  goto -> bb46
  using: 
bb46:
  _153 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _152 = (*_153)
  using: _153@Mir(bb46[0])
  _143 = src::libtree::fputs(move _144, move _152) -> bb48
  using: _144@Phi(bb46), _152@Mir(bb46[1])
bb47:
  _156 = _78
  using: _78@Phi(bb34)
  _155 = move _156 as usize (PointerExposeAddress)
  using: _156@Mir(bb47[0])
  _154 = Eq(move _155, const 0_usize)
  using: _155@Mir(bb47[1])
  assume(move _154)
  using: _154@Mir(bb47[2])
  goto -> bb48
  using: 
bb48:
  _159 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _161 = _6
  using: _6@Phi(bb1)
  _160 = move _161 as isize (IntToInt)
  using: _161@Mir(bb48[1])
  _158 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _159, move _160) -> bb49
  using: _159@Mir(bb48[0]), _160@Mir(bb48[2])
bb49:
  _157 = (*_158)
  using: _158@Mir(bb48[3])
  _164 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _167 = (*_1)
  using: _1@Phi(bb1)
  _168 = const 1_u64
  using: 
  _166 = core::num::<impl u64>::wrapping_sub(move _167, move _168) -> bb50
  using: _167@Mir(bb49[2]), _168@Mir(bb49[3])
bb50:
  _165 = move _166 as isize (IntToInt)
  using: _166@Mir(bb49[4])
  _163 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _164, move _165) -> bb51
  using: _164@Mir(bb49[1]), _165@Mir(bb50[0])
bb51:
  _162 = (*_163)
  using: _163@Mir(bb50[1])
  _170 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _172 = _6
  using: _6@Phi(bb1)
  _171 = move _172 as isize (IntToInt)
  using: _172@Mir(bb51[2])
  _169 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _170, move _171) -> bb52
  using: _170@Mir(bb51[1]), _171@Mir(bb51[3])
bb52:
  (*_169) = move _162
  using: _169@Mir(bb51[4]), _162@Mir(bb51[0])
  _174 = (*_1)
  using: _1@Phi(bb1)
  _173 = core::num::<impl u64>::wrapping_sub(move _174, const 1_u64) -> bb53
  using: _174@Mir(bb52[1])
bb53:
  (*_1) = move _173
  using: _1@Phi(bb1), _173@Mir(bb52[2])
  _175 = _157
  using: _157@Mir(bb49[0])
  _177 = ((*_2).1: *mut u64)
  using: _2@Phi(bb1)
  _179 = (*_1)
  using: _1@Phi(bb1)
  _178 = move _179 as isize (IntToInt)
  using: _179@Mir(bb53[3])
  _176 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _177, move _178) -> bb54
  using: _177@Mir(bb53[2]), _178@Mir(bb53[4])
bb54:
  (*_176) = move _175
  using: _176@Mir(bb53[5]), _175@Mir(bb53[1])
  goto -> bb1
  using: 
bb55:
  return
  using: _0@Phi(bb34)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:600:59: 600:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:600:25: 600:87 (#0) by default
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:599:12: 602:11 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:609:58: 609:76 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:609:26: 609:86 (#0) by default
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:606:17: 611:18 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:614:19: 614:34 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 4096] is not supported
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:618:70: 618:88 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:618:36: 618:98 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:618:17: 618:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:624:63: 624:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:624:29: 624:91 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:626:21: 626:68 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:622:13: 627:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:639:27: 639:74 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_98) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:658:40: 658:87 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:660:21: 660:87 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:662:17: 662:49 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:663:17: 666:18 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:667:17: 674:18 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:678:54: 678:72 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:680:37: 680:84 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:679:88: 681:14 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:679:40: 679:58 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:682:53: 682:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:683:40: 683:74 (#0) by default
@DefId(0:113 ~ lib[40c5]::src::libtree::check_search_paths)
bb0:
  _8 = const 0_i32
  using: 
  _9 = [const 0_i8; 4096]
  using: 
  _13 = &mut _9
  using: _9@Mir(bb0[1])
  _12 = move _13 as &mut [i8] (Pointer(Unsize))
  using: _13@Mir(bb0[2])
  _11 = core::slice::<impl [i8]>::as_mut_ptr(move _12) -> bb1
  using: _12@Mir(bb0[3])
bb1:
  _14 = const 4096_isize
  using: 
  _10 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _11, move _14) -> bb2
  using: _11@Mir(bb0[4]), _14@Mir(bb1[0])
bb2:
  _16 = &raw mut ((*_6).5: src::libtree::string_table_t)
  using: _6@Entry
  _15 = move _16 as *const src::libtree::string_table_t (Pointer(MutToConstPointer))
  using: _16@Mir(bb2[0])
  goto -> bb3
  using: 
bb3:
  _21 = ((*_15).0: *mut i8)
  using: _15@Phi(bb3)
  _23 = _2
  using: _2@Phi(bb3)
  _22 = move _23 as isize (IntToInt)
  using: _23@Mir(bb3[1])
  _20 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _21, move _22) -> bb4
  using: _21@Mir(bb3[0]), _22@Mir(bb3[2])
bb4:
  _19 = (*_20)
  using: _20@Mir(bb3[3])
  _18 = move _19 as i32 (IntToInt)
  using: _19@Mir(bb4[0])
  _24 = const 0_i32
  using: 
  _17 = Ne(move _18, move _24)
  using: _18@Mir(bb4[1]), _24@Mir(bb4[2])
  switchInt(move _17) -> [0: bb67, otherwise: bb5]
  using: _17@Mir(bb4[3])
bb5:
  _30 = ((*_15).0: *mut i8)
  using: _15@Phi(bb5)
  _32 = _2
  using: _2@Phi(bb5)
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb5[1])
  _29 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _30, move _31) -> bb9
  using: _30@Mir(bb5[0]), _31@Mir(bb5[2])
bb6:
  _25 = const false
  using: 
  goto -> bb8
  using: 
bb7:
  _38 = ((*_15).0: *mut i8)
  using: _15@Phi(bb5)
  _40 = _2
  using: _2@Phi(bb5)
  _39 = move _40 as isize (IntToInt)
  using: _40@Mir(bb7[1])
  _37 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _38, move _39) -> bb10
  using: _38@Mir(bb7[0]), _39@Mir(bb7[2])
bb8:
  switchInt(move _25) -> [0: bb13, otherwise: bb11]
  using: _25@Phi(bb8)
bb9:
  _28 = (*_29)
  using: _29@Mir(bb5[3])
  _27 = move _28 as i32 (IntToInt)
  using: _28@Mir(bb9[0])
  _33 = const 58_i32
  using: 
  _26 = Eq(move _27, move _33)
  using: _27@Mir(bb9[1]), _33@Mir(bb9[2])
  switchInt(move _26) -> [0: bb6, otherwise: bb7]
  using: _26@Mir(bb9[3])
bb10:
  _36 = (*_37)
  using: _37@Mir(bb7[3])
  _35 = move _36 as i32 (IntToInt)
  using: _36@Mir(bb10[0])
  _41 = const 0_i32
  using: 
  _34 = Ne(move _35, move _41)
  using: _35@Mir(bb10[1]), _41@Mir(bb10[2])
  _25 = move _34
  using: _34@Mir(bb10[3])
  goto -> bb8
  using: 
bb11:
  _43 = _2
  using: _2@Phi(bb8)
  _42 = core::num::<impl u64>::wrapping_add(move _43, const 1_u64) -> bb12
  using: _43@Mir(bb11[0])
bb12:
  _2 = move _42
  using: _42@Mir(bb11[1])
  goto -> bb5
  using: 
bb13:
  _48 = ((*_15).0: *mut i8)
  using: _15@Phi(bb8)
  _50 = _2
  using: _2@Phi(bb8)
  _49 = move _50 as isize (IntToInt)
  using: _50@Mir(bb13[1])
  _47 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _48, move _49) -> bb14
  using: _48@Mir(bb13[0]), _49@Mir(bb13[2])
bb14:
  _46 = (*_47)
  using: _47@Mir(bb13[3])
  _45 = move _46 as i32 (IntToInt)
  using: _46@Mir(bb14[0])
  _51 = const 0_i32
  using: 
  _44 = Eq(move _45, move _51)
  using: _45@Mir(bb14[1]), _51@Mir(bb14[2])
  switchInt(move _44) -> [0: bb16, otherwise: bb15]
  using: _44@Mir(bb14[3])
bb15:
  _0 = _8
  using: _8@Phi(bb3)
  goto -> bb68
  using: 
bb16:
  _54 = &mut _9
  using: _9@Phi(bb3)
  _53 = move _54 as &mut [i8] (Pointer(Unsize))
  using: _54@Mir(bb16[0])
  _52 = core::slice::<impl [i8]>::as_mut_ptr(move _53) -> bb17
  using: _53@Mir(bb16[1])
bb17:
  _61 = ((*_15).0: *mut i8)
  using: _15@Phi(bb17)
  _63 = _2
  using: _2@Phi(bb17)
  _62 = move _63 as isize (IntToInt)
  using: _63@Mir(bb17[1])
  _60 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _61, move _62) -> bb24
  using: _61@Mir(bb17[0]), _62@Mir(bb17[2])
bb18:
  _55 = const false
  using: 
  goto -> bb20
  using: 
bb19:
  _74 = _52
  using: _52@Phi(bb17)
  _75 = _10
  using: _10@Phi(bb17)
  _73 = Ne(move _74, move _75)
  using: _74@Mir(bb19[0]), _75@Mir(bb19[1])
  _55 = move _73
  using: _73@Mir(bb19[2])
  goto -> bb20
  using: 
bb20:
  switchInt(move _55) -> [0: bb30, otherwise: bb26]
  using: _55@Phi(bb20)
bb21:
  _56 = const false
  using: 
  goto -> bb23
  using: 
bb22:
  _69 = ((*_15).0: *mut i8)
  using: _15@Phi(bb17)
  _71 = _2
  using: _2@Phi(bb17)
  _70 = move _71 as isize (IntToInt)
  using: _71@Mir(bb22[1])
  _68 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _69, move _70) -> bb25
  using: _69@Mir(bb22[0]), _70@Mir(bb22[2])
bb23:
  switchInt(move _56) -> [0: bb18, otherwise: bb19]
  using: _56@Phi(bb23)
bb24:
  _59 = (*_60)
  using: _60@Mir(bb17[3])
  _58 = move _59 as i32 (IntToInt)
  using: _59@Mir(bb24[0])
  _64 = const 0_i32
  using: 
  _57 = Ne(move _58, move _64)
  using: _58@Mir(bb24[1]), _64@Mir(bb24[2])
  switchInt(move _57) -> [0: bb21, otherwise: bb22]
  using: _57@Mir(bb24[3])
bb25:
  _67 = (*_68)
  using: _68@Mir(bb22[3])
  _66 = move _67 as i32 (IntToInt)
  using: _67@Mir(bb25[0])
  _72 = const 58_i32
  using: 
  _65 = Ne(move _66, move _72)
  using: _66@Mir(bb25[1]), _72@Mir(bb25[2])
  _56 = move _65
  using: _65@Mir(bb25[3])
  goto -> bb23
  using: 
bb26:
  _76 = _2
  using: _2@Phi(bb23)
  _78 = _2
  using: _2@Phi(bb23)
  _77 = core::num::<impl u64>::wrapping_add(move _78, const 1_u64) -> bb27
  using: _78@Mir(bb26[1])
bb27:
  _2 = move _77
  using: _77@Mir(bb26[2])
  _79 = _52
  using: _52@Phi(bb20)
  _81 = _52
  using: _52@Phi(bb20)
  _80 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _81, const 1_isize) -> bb28
  using: _81@Mir(bb27[2])
bb28:
  _52 = move _80
  using: _80@Mir(bb27[3])
  _84 = ((*_15).0: *mut i8)
  using: _15@Phi(bb23)
  _86 = _76
  using: _76@Mir(bb26[0])
  _85 = move _86 as isize (IntToInt)
  using: _86@Mir(bb28[2])
  _83 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _84, move _85) -> bb29
  using: _84@Mir(bb28[1]), _85@Mir(bb28[3])
bb29:
  _82 = (*_83)
  using: _83@Mir(bb28[4])
  (*_79) = move _82
  using: _79@Mir(bb27[1]), _82@Mir(bb29[0])
  goto -> bb17
  using: 
bb30:
  _89 = _52
  using: _52@Phi(bb20)
  _90 = const 1_isize
  using: 
  _88 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _89, move _90) -> bb31
  using: _89@Mir(bb30[0]), _90@Mir(bb30[1])
bb31:
  _91 = _10
  using: _10@Phi(bb20)
  _87 = Ge(move _88, move _91)
  using: _88@Mir(bb30[2]), _91@Mir(bb31[0])
  switchInt(move _87) -> [0: bb32, otherwise: bb3]
  using: _87@Mir(bb31[1])
bb32:
  _96 = _52
  using: _52@Phi(bb20)
  _97 = const -1_isize
  using: 
  _95 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _96, move _97) -> bb33
  using: _96@Mir(bb32[0]), _97@Mir(bb32[1])
bb33:
  _94 = (*_95)
  using: _95@Mir(bb32[2])
  _93 = move _94 as i32 (IntToInt)
  using: _94@Mir(bb33[0])
  _98 = const 47_i32
  using: 
  _92 = Ne(move _93, move _98)
  using: _93@Mir(bb33[1]), _98@Mir(bb33[2])
  switchInt(move _92) -> [0: bb36, otherwise: bb34]
  using: _92@Mir(bb33[3])
bb34:
  _99 = _52
  using: _52@Phi(bb20)
  _101 = _52
  using: _52@Phi(bb20)
  _100 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _101, const 1_isize) -> bb35
  using: _101@Mir(bb34[1])
bb35:
  _52 = move _100
  using: _100@Mir(bb34[2])
  _102 = const 47_i32
  using: 
  (*_99) = move _102 as i8 (IntToInt)
  using: _99@Mir(bb34[0]), _102@Mir(bb35[1])
  goto -> bb36
  using: 
bb36:
  _103 = _52
  using: _52@Phi(bb36)
  _104 = const 0_u64
  using: 
  goto -> bb37
  using: 
bb37:
  _106 = _104
  using: _104@Phi(bb37)
  _107 = (*_3)
  using: _3@Phi(bb37)
  _105 = Lt(move _106, move _107)
  using: _106@Mir(bb37[0]), _107@Mir(bb37[1])
  switchInt(move _105) -> [0: bb3, otherwise: bb38]
  using: _105@Mir(bb37[2])
bb38:
  _111 = ((*_15).0: *mut i8)
  using: _15@Phi(bb37)
  _115 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _117 = _104
  using: _104@Phi(bb37)
  _116 = move _117 as isize (IntToInt)
  using: _117@Mir(bb38[2])
  _114 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _115, move _116) -> bb39
  using: _115@Mir(bb38[1]), _116@Mir(bb38[3])
bb39:
  _113 = (*_114)
  using: _114@Mir(bb38[4])
  _112 = move _113 as isize (IntToInt)
  using: _113@Mir(bb39[0])
  _110 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _111, move _112) -> bb40
  using: _111@Mir(bb38[0]), _112@Mir(bb39[1])
bb40:
  _109 = move _110 as *const i8 (Pointer(MutToConstPointer))
  using: _110@Mir(bb39[2])
  _108 = src::libtree::strlen(move _109) -> bb41
  using: _109@Mir(bb40[0])
bb41:
  _121 = _103
  using: _103@Phi(bb37)
  _123 = _108
  using: _108@Mir(bb40[1])
  _122 = move _123 as isize (IntToInt)
  using: _123@Mir(bb41[1])
  _120 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _121, move _122) -> bb42
  using: _121@Mir(bb41[0]), _122@Mir(bb41[2])
bb42:
  _124 = const 1_isize
  using: 
  _119 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _120, move _124) -> bb43
  using: _120@Mir(bb41[3]), _124@Mir(bb42[0])
bb43:
  _125 = _10
  using: _10@Phi(bb37)
  _118 = Ge(move _119, move _125)
  using: _119@Mir(bb42[1]), _125@Mir(bb43[0])
  switchInt(move _118) -> [0: bb44, otherwise: bb37]
  using: _118@Mir(bb43[1])
bb44:
  _128 = _103
  using: _103@Phi(bb37)
  _127 = move _128 as *mut libc::c_void (PtrToPtr)
  using: _128@Mir(bb44[0])
  _131 = ((*_15).0: *mut i8)
  using: _15@Phi(bb37)
  _135 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _137 = _104
  using: _104@Phi(bb37)
  _136 = move _137 as isize (IntToInt)
  using: _137@Mir(bb44[4])
  _134 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _135, move _136) -> bb45
  using: _135@Mir(bb44[3]), _136@Mir(bb44[5])
bb45:
  _133 = (*_134)
  using: _134@Mir(bb44[6])
  _132 = move _133 as isize (IntToInt)
  using: _133@Mir(bb45[0])
  _130 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _131, move _132) -> bb46
  using: _131@Mir(bb44[2]), _132@Mir(bb45[1])
bb46:
  _129 = move _130 as *const libc::c_void (PtrToPtr)
  using: _130@Mir(bb45[2])
  _139 = _108
  using: _108@Mir(bb40[1])
  _140 = const 1_u64
  using: 
  _138 = core::num::<impl u64>::wrapping_add(move _139, move _140) -> bb47
  using: _139@Mir(bb46[1]), _140@Mir(bb46[2])
bb47:
  _126 = src::libtree::memcpy(move _127, move _129, move _138) -> bb48
  using: _127@Mir(bb44[1]), _129@Mir(bb46[0]), _138@Mir(bb46[3])
bb48:
  _143 = (*_3)
  using: _3@Phi(bb37)
  _144 = const 1_u64
  using: 
  _142 = Le(move _143, move _144)
  using: _143@Mir(bb48[0]), _144@Mir(bb48[1])
  _141 = move _142 as i32 (IntToInt)
  using: _142@Mir(bb48[2])
  _146 = _5
  using: _5@Phi(bb37)
  _145 = move _146 as usize (IntToInt)
  using: _146@Mir(bb48[4])
  _147 = const 32_usize
  using: 
  _148 = Lt(_145, _147)
  using: _145@Mir(bb48[5]), _147@Mir(bb48[6])
  assert(move _148, "index out of bounds: the length is {} but the index is {}", move _147, _145) -> bb49
  using: _148@Entry, _147@Entry, _145@Entry
bb49:
  ((*_6).15: [i8; 32])[_145] = move _141 as i8 (IntToInt)
  using: _6@Phi(bb37), _145@Mir(bb48[5]), _141@Mir(bb48[3])
  _152 = &mut _9
  using: _9@Phi(bb37)
  _151 = move _152 as &mut [i8] (Pointer(Unsize))
  using: _152@Mir(bb49[1])
  _150 = core::slice::<impl [i8]>::as_mut_ptr(move _151) -> bb50
  using: _151@Mir(bb49[2])
bb50:
  _154 = _5
  using: _5@Phi(bb37)
  _155 = const 1_u64
  using: 
  _153 = core::num::<impl u64>::wrapping_add(move _154, move _155) -> bb51
  using: _154@Mir(bb50[0]), _155@Mir(bb50[1])
bb51:
  _156 = _6
  using: _6@Phi(bb37)
  _157 = _7
  using: _7@Phi(bb37)
  _158 = _1
  using: _1@Phi(bb37)
  _149 = src::libtree::recurse(move _150, move _153, move _156, move _157, move _158) -> bb52
  using: _150@Mir(bb49[3]), _153@Mir(bb50[2]), _156@Mir(bb51[0]), _157@Mir(bb51[1]), _158@Mir(bb51[2])
bb52:
  _160 = _149
  using: _149@Mir(bb51[3])
  _161 = const 28_i32
  using: 
  _159 = Eq(move _160, move _161)
  using: _160@Mir(bb52[0]), _161@Mir(bb52[1])
  switchInt(move _159) -> [0: bb54, otherwise: bb53]
  using: _159@Mir(bb52[2])
bb53:
  _8 = const 28_i32
  using: 
  goto -> bb54
  using: 
bb54:
  _164 = _149
  using: _149@Mir(bb51[3])
  _165 = const 0_i32
  using: 
  _163 = Eq(move _164, move _165)
  using: _164@Mir(bb54[0]), _165@Mir(bb54[1])
  switchInt(move _163) -> [0: bb56, otherwise: bb55]
  using: _163@Mir(bb54[2])
bb55:
  _162 = const true
  using: 
  goto -> bb57
  using: 
bb56:
  _167 = _149
  using: _149@Mir(bb51[3])
  _168 = const 28_i32
  using: 
  _166 = Eq(move _167, move _168)
  using: _167@Mir(bb56[0]), _168@Mir(bb56[1])
  _162 = move _166
  using: _166@Mir(bb56[2])
  goto -> bb57
  using: 
bb57:
  switchInt(move _162) -> [0: bb65, otherwise: bb58]
  using: _162@Phi(bb57)
bb58:
  _171 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _173 = _104
  using: _104@Phi(bb37)
  _172 = move _173 as isize (IntToInt)
  using: _173@Mir(bb58[1])
  _170 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _171, move _172) -> bb59
  using: _171@Mir(bb58[0]), _172@Mir(bb58[2])
bb59:
  _169 = (*_170)
  using: _170@Mir(bb58[3])
  _176 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _179 = (*_3)
  using: _3@Phi(bb37)
  _180 = const 1_u64
  using: 
  _178 = core::num::<impl u64>::wrapping_sub(move _179, move _180) -> bb60
  using: _179@Mir(bb59[2]), _180@Mir(bb59[3])
bb60:
  _177 = move _178 as isize (IntToInt)
  using: _178@Mir(bb59[4])
  _175 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _176, move _177) -> bb61
  using: _176@Mir(bb59[1]), _177@Mir(bb60[0])
bb61:
  _174 = (*_175)
  using: _175@Mir(bb60[1])
  _182 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _184 = _104
  using: _104@Phi(bb37)
  _183 = move _184 as isize (IntToInt)
  using: _184@Mir(bb61[2])
  _181 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _182, move _183) -> bb62
  using: _182@Mir(bb61[1]), _183@Mir(bb61[3])
bb62:
  (*_181) = move _174
  using: _181@Mir(bb61[4]), _174@Mir(bb61[0])
  _186 = (*_3)
  using: _3@Phi(bb37)
  _185 = core::num::<impl u64>::wrapping_sub(move _186, const 1_u64) -> bb63
  using: _186@Mir(bb62[1])
bb63:
  (*_3) = move _185
  using: _3@Phi(bb37), _185@Mir(bb62[2])
  _187 = _169
  using: _169@Mir(bb59[0])
  _189 = ((*_4).1: *mut u64)
  using: _4@Phi(bb37)
  _191 = (*_3)
  using: _3@Phi(bb37)
  _190 = move _191 as isize (IntToInt)
  using: _191@Mir(bb63[3])
  _188 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _189, move _190) -> bb64
  using: _189@Mir(bb63[2]), _190@Mir(bb63[4])
bb64:
  (*_188) = move _187
  using: _188@Mir(bb63[5]), _187@Mir(bb63[1])
  goto -> bb37
  using: 
bb65:
  _193 = _104
  using: _104@Phi(bb37)
  _192 = core::num::<impl u64>::wrapping_add(move _193, const 1_u64) -> bb66
  using: _193@Mir(bb65[0])
bb66:
  _104 = move _192
  using: _192@Mir(bb65[1])
  goto -> bb37
  using: 
bb67:
  _0 = _8
  using: _8@Phi(bb54)
  goto -> bb68
  using: 
bb68:
  return
  using: _0@Phi(bb68)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 4096] is not supported
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:699:42: 699:78 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:701:24: 701:47 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:702:28: 702:51 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:703:29: 703:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:705:29: 705:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:707:25: 707:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:711:28: 711:51 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:712:29: 712:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:716:29: 716:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:718:25: 718:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:719:37: 719:61 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:721:17: 721:50 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:724:18: 724:54 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:726:25: 726:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:733:70: 733:88 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:733:36: 733:98 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:733:17: 733:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:735:18: 735:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:736:18: 736:51 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:743:63: 743:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:743:29: 743:91 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:745:28: 745:75 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:741:13: 746:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:752:23: 752:70 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:761:58: 761:76 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:763:41: 763:88 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:762:92: 764:18 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:762:44: 762:62 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:765:57: 765:72 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:766:44: 766:78 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:768:23: 768:38 (#0) by default
@DefId(0:116 ~ lib[40c5]::src::libtree::interpolate_variables)
bb0:
  _4 = _2
  using: _2@Entry
  _5 = _2
  using: _2@Entry
  _6 = &raw mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  goto -> bb1
  using: 
bb1:
  _10 = ((*_6).0: *mut i8)
  using: _6@Phi(bb1)
  _12 = _5
  using: _5@Phi(bb1)
  _11 = move _12 as isize (IntToInt)
  using: _12@Mir(bb1[1])
  _9 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _10, move _11) -> bb2
  using: _10@Mir(bb1[0]), _11@Mir(bb1[2])
bb2:
  _8 = move _9 as *const i8 (Pointer(MutToConstPointer))
  using: _9@Mir(bb1[3])
  _13 = const 36_i32
  using: 
  _7 = src::libtree::strchr(move _8, move _13) -> bb3
  using: _8@Mir(bb2[0]), _13@Mir(bb2[1])
bb3:
  _15 = _7
  using: _7@Mir(bb2[2])
  _14 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _15) -> bb4
  using: _15@Mir(bb3[0])
bb4:
  switchInt(move _14) -> [0: bb6, otherwise: bb5]
  using: _14@Mir(bb3[1])
bb5:
  _18 = _7
  using: _7@Mir(bb2[2])
  _17 = move _18 as usize (PointerExposeAddress)
  using: _18@Mir(bb5[0])
  _16 = Eq(move _17, const 0_usize)
  using: _17@Mir(bb5[1])
  assume(move _16)
  using: _16@Mir(bb5[2])
  _182 = _4
  using: _4@Phi(bb1)
  _183 = _2
  using: _2@Entry
  _181 = Ne(move _182, move _183)
  using: _182@Mir(bb5[4]), _183@Mir(bb5[5])
  switchInt(move _181) -> [0: bb55, otherwise: bb54]
  using: _181@Mir(bb5[6])
bb6:
  _21 = _7
  using: _7@Mir(bb2[2])
  _23 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _22 = move _23 as *const i8 (Pointer(MutToConstPointer))
  using: _23@Mir(bb6[1])
  _20 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _21, move _22) -> bb7
  using: _21@Mir(bb6[0]), _22@Mir(bb6[2])
bb7:
  _19 = move _20 as i64 (IntToInt)
  using: _20@Mir(bb6[3])
  _5 = move _19 as u64 (IntToInt)
  using: _19@Mir(bb7[0])
  _25 = _5
  using: _5@Mir(bb7[1])
  _26 = _4
  using: _4@Phi(bb64)
  _24 = core::num::<impl u64>::wrapping_sub(move _25, move _26) -> bb8
  using: _25@Mir(bb7[2]), _26@Mir(bb7[3])
bb8:
  _28 = _5
  using: _5@Mir(bb7[1])
  _27 = core::num::<impl u64>::wrapping_add(move _28, const 1_u64) -> bb9
  using: _28@Mir(bb8[0])
bb9:
  _5 = move _27
  using: _27@Mir(bb8[1])
  _29 = const 0_i32
  using: 
  _34 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _36 = _5
  using: _5@Mir(bb9[0])
  _35 = move _36 as isize (IntToInt)
  using: _36@Mir(bb9[3])
  _33 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _34, move _35) -> bb10
  using: _34@Mir(bb9[2]), _35@Mir(bb9[4])
bb10:
  _32 = (*_33)
  using: _33@Mir(bb9[5])
  _31 = move _32 as i32 (IntToInt)
  using: _32@Mir(bb10[0])
  _37 = const 123_i32
  using: 
  _30 = Eq(move _31, move _37)
  using: _31@Mir(bb10[1]), _37@Mir(bb10[2])
  switchInt(move _30) -> [0: bb13, otherwise: bb11]
  using: _30@Mir(bb10[3])
bb11:
  _29 = const 1_i32
  using: 
  _39 = _5
  using: _5@Mir(bb9[0])
  _38 = core::num::<impl u64>::wrapping_add(move _39, const 1_u64) -> bb12
  using: _39@Mir(bb11[1])
bb12:
  _5 = move _38
  using: _38@Mir(bb11[2])
  goto -> bb13
  using: 
bb13:
  _40 = const {0x0 as *const i8}
  using: 
  _46 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _48 = _5
  using: _5@Phi(bb13)
  _47 = move _48 as isize (IntToInt)
  using: _48@Mir(bb13[2])
  _45 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _46, move _47) -> bb14
  using: _46@Mir(bb13[1]), _47@Mir(bb13[3])
bb14:
  _44 = &raw mut (*_45)
  using: _45@Mir(bb13[4])
  _43 = move _44 as *const i8 (Pointer(MutToConstPointer))
  using: _44@Mir(bb14[0])
  _52 = const b"ORIGIN\x00"
  using: 
  _51 = &raw const (*_52)
  using: _52@Mir(bb14[2])
  _50 = move _51 as *const u8 (Pointer(ArrayToPointer))
  using: _51@Mir(bb14[3])
  _49 = move _50 as *const i8 (PtrToPtr)
  using: _50@Mir(bb14[4])
  _53 = const 6_u64
  using: 
  _42 = src::libtree::strncmp(move _43, move _49, move _53) -> bb15
  using: _43@Mir(bb14[1]), _49@Mir(bb14[5]), _53@Mir(bb14[6])
bb15:
  _54 = const 0_i32
  using: 
  _41 = Eq(move _42, move _54)
  using: _42@Mir(bb14[7]), _54@Mir(bb15[0])
  switchInt(move _41) -> [0: bb18, otherwise: bb16]
  using: _41@Mir(bb15[1])
bb16:
  _55 = _3
  using: _3@Phi(bb1)
  _40 = move _55
  using: _55@Mir(bb16[0])
  _57 = _5
  using: _5@Phi(bb13)
  _58 = const 6_u64
  using: 
  _56 = core::num::<impl u64>::wrapping_add(move _57, move _58) -> bb17
  using: _57@Mir(bb16[2]), _58@Mir(bb16[3])
bb17:
  _5 = move _56
  using: _56@Mir(bb16[4])
  goto -> bb38
  using: 
bb18:
  _64 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _66 = _5
  using: _5@Phi(bb13)
  _65 = move _66 as isize (IntToInt)
  using: _66@Mir(bb18[1])
  _63 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _64, move _65) -> bb19
  using: _64@Mir(bb18[0]), _65@Mir(bb18[2])
bb19:
  _62 = &raw mut (*_63)
  using: _63@Mir(bb18[3])
  _61 = move _62 as *const i8 (Pointer(MutToConstPointer))
  using: _62@Mir(bb19[0])
  _70 = const b"LIB\x00"
  using: 
  _69 = &raw const (*_70)
  using: _70@Mir(bb19[2])
  _68 = move _69 as *const u8 (Pointer(ArrayToPointer))
  using: _69@Mir(bb19[3])
  _67 = move _68 as *const i8 (PtrToPtr)
  using: _68@Mir(bb19[4])
  _71 = const 3_u64
  using: 
  _60 = src::libtree::strncmp(move _61, move _67, move _71) -> bb20
  using: _61@Mir(bb19[1]), _67@Mir(bb19[5]), _71@Mir(bb19[6])
bb20:
  _72 = const 0_i32
  using: 
  _59 = Eq(move _60, move _72)
  using: _60@Mir(bb19[7]), _72@Mir(bb20[0])
  switchInt(move _59) -> [0: bb23, otherwise: bb21]
  using: _59@Mir(bb20[1])
bb21:
  _73 = ((*_1).8: *mut i8)
  using: _1@Phi(bb1)
  _40 = move _73 as *const i8 (Pointer(MutToConstPointer))
  using: _73@Mir(bb21[0])
  _75 = _5
  using: _5@Phi(bb13)
  _76 = const 3_u64
  using: 
  _74 = core::num::<impl u64>::wrapping_add(move _75, move _76) -> bb22
  using: _75@Mir(bb21[2]), _76@Mir(bb21[3])
bb22:
  _5 = move _74
  using: _74@Mir(bb21[4])
  goto -> bb38
  using: 
bb23:
  _82 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _84 = _5
  using: _5@Phi(bb13)
  _83 = move _84 as isize (IntToInt)
  using: _84@Mir(bb23[1])
  _81 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _82, move _83) -> bb24
  using: _82@Mir(bb23[0]), _83@Mir(bb23[2])
bb24:
  _80 = &raw mut (*_81)
  using: _81@Mir(bb23[3])
  _79 = move _80 as *const i8 (Pointer(MutToConstPointer))
  using: _80@Mir(bb24[0])
  _88 = const b"PLATFORM\x00"
  using: 
  _87 = &raw const (*_88)
  using: _88@Mir(bb24[2])
  _86 = move _87 as *const u8 (Pointer(ArrayToPointer))
  using: _87@Mir(bb24[3])
  _85 = move _86 as *const i8 (PtrToPtr)
  using: _86@Mir(bb24[4])
  _89 = const 8_u64
  using: 
  _78 = src::libtree::strncmp(move _79, move _85, move _89) -> bb25
  using: _79@Mir(bb24[1]), _85@Mir(bb24[5]), _89@Mir(bb24[6])
bb25:
  _90 = const 0_i32
  using: 
  _77 = Eq(move _78, move _90)
  using: _78@Mir(bb24[7]), _90@Mir(bb25[0])
  switchInt(move _77) -> [0: bb28, otherwise: bb26]
  using: _77@Mir(bb25[1])
bb26:
  _91 = ((*_1).7: *mut i8)
  using: _1@Phi(bb1)
  _40 = move _91 as *const i8 (Pointer(MutToConstPointer))
  using: _91@Mir(bb26[0])
  _93 = _5
  using: _5@Phi(bb13)
  _94 = const 8_u64
  using: 
  _92 = core::num::<impl u64>::wrapping_add(move _93, move _94) -> bb27
  using: _93@Mir(bb26[2]), _94@Mir(bb26[3])
bb27:
  _5 = move _92
  using: _92@Mir(bb26[4])
  goto -> bb38
  using: 
bb28:
  _100 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _102 = _5
  using: _5@Phi(bb13)
  _101 = move _102 as isize (IntToInt)
  using: _102@Mir(bb28[1])
  _99 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _100, move _101) -> bb29
  using: _100@Mir(bb28[0]), _101@Mir(bb28[2])
bb29:
  _98 = &raw mut (*_99)
  using: _99@Mir(bb28[3])
  _97 = move _98 as *const i8 (Pointer(MutToConstPointer))
  using: _98@Mir(bb29[0])
  _106 = const b"OSNAME\x00"
  using: 
  _105 = &raw const (*_106)
  using: _106@Mir(bb29[2])
  _104 = move _105 as *const u8 (Pointer(ArrayToPointer))
  using: _105@Mir(bb29[3])
  _103 = move _104 as *const i8 (PtrToPtr)
  using: _104@Mir(bb29[4])
  _107 = const 6_u64
  using: 
  _96 = src::libtree::strncmp(move _97, move _103, move _107) -> bb30
  using: _97@Mir(bb29[1]), _103@Mir(bb29[5]), _107@Mir(bb29[6])
bb30:
  _108 = const 0_i32
  using: 
  _95 = Eq(move _96, move _108)
  using: _96@Mir(bb29[7]), _108@Mir(bb30[0])
  switchInt(move _95) -> [0: bb33, otherwise: bb31]
  using: _95@Mir(bb30[1])
bb31:
  _109 = ((*_1).9: *mut i8)
  using: _1@Phi(bb1)
  _40 = move _109 as *const i8 (Pointer(MutToConstPointer))
  using: _109@Mir(bb31[0])
  _111 = _5
  using: _5@Phi(bb13)
  _112 = const 6_u64
  using: 
  _110 = core::num::<impl u64>::wrapping_add(move _111, move _112) -> bb32
  using: _111@Mir(bb31[2]), _112@Mir(bb31[3])
bb32:
  _5 = move _110
  using: _110@Mir(bb31[4])
  goto -> bb38
  using: 
bb33:
  _119 = ((*_6).0: *mut i8)
  using: _6@Phi(bb64)
  _121 = _5
  using: _5@Phi(bb13)
  _120 = move _121 as isize (IntToInt)
  using: _121@Mir(bb33[1])
  _118 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _119, move _120) -> bb34
  using: _119@Mir(bb33[0]), _120@Mir(bb33[2])
bb34:
  _117 = &raw mut (*_118)
  using: _118@Mir(bb33[3])
  _116 = move _117 as *const i8 (Pointer(MutToConstPointer))
  using: _117@Mir(bb34[0])
  _125 = const b"OSREL\x00"
  using: 
  _124 = &raw const (*_125)
  using: _125@Mir(bb34[2])
  _123 = move _124 as *const u8 (Pointer(ArrayToPointer))
  using: _124@Mir(bb34[3])
  _122 = move _123 as *const i8 (PtrToPtr)
  using: _123@Mir(bb34[4])
  _126 = const 5_u64
  using: 
  _115 = src::libtree::strncmp(move _116, move _122, move _126) -> bb35
  using: _116@Mir(bb34[1]), _122@Mir(bb34[5]), _126@Mir(bb34[6])
bb35:
  _127 = const 0_i32
  using: 
  _114 = Eq(move _115, move _127)
  using: _115@Mir(bb34[7]), _127@Mir(bb35[0])
  _113 = Not(move _114)
  using: _114@Mir(bb35[1])
  switchInt(move _113) -> [0: bb36, otherwise: bb1]
  using: _113@Mir(bb35[2])
bb36:
  _128 = ((*_1).10: *mut i8)
  using: _1@Phi(bb1)
  _40 = move _128 as *const i8 (Pointer(MutToConstPointer))
  using: _128@Mir(bb36[0])
  _130 = _5
  using: _5@Phi(bb13)
  _131 = const 5_u64
  using: 
  _129 = core::num::<impl u64>::wrapping_add(move _130, move _131) -> bb37
  using: _130@Mir(bb36[2]), _131@Mir(bb36[3])
bb37:
  _5 = move _129
  using: _129@Mir(bb36[4])
  goto -> bb38
  using: 
bb38:
  _132 = _29
  using: _29@Phi(bb13)
  switchInt(move _132) -> [0: bb43, otherwise: bb39]
  using: _132@Mir(bb38[0])
bb39:
  _137 = ((*_6).0: *mut i8)
  using: _6@Phi(bb38)
  _139 = _5
  using: _5@Phi(bb38)
  _138 = move _139 as isize (IntToInt)
  using: _139@Mir(bb39[1])
  _136 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _137, move _138) -> bb40
  using: _137@Mir(bb39[0]), _138@Mir(bb39[2])
bb40:
  _135 = (*_136)
  using: _136@Mir(bb39[3])
  _134 = move _135 as i32 (IntToInt)
  using: _135@Mir(bb40[0])
  _140 = const 125_i32
  using: 
  _133 = Ne(move _134, move _140)
  using: _134@Mir(bb40[1]), _140@Mir(bb40[2])
  switchInt(move _133) -> [0: bb41, otherwise: bb1]
  using: _133@Mir(bb40[3])
bb41:
  _142 = _5
  using: _5@Phi(bb38)
  _141 = core::num::<impl u64>::wrapping_add(move _142, const 1_u64) -> bb42
  using: _142@Mir(bb41[0])
bb42:
  _5 = move _141
  using: _141@Mir(bb41[1])
  goto -> bb43
  using: 
bb43:
  _144 = _40
  using: _40@Phi(bb38)
  _143 = src::libtree::strlen(move _144) -> bb44
  using: _144@Mir(bb43[0])
bb44:
  _146 = _6
  using: _6@Phi(bb43)
  _148 = _24
  using: _24@Mir(bb7[4])
  _149 = _143
  using: _143@Mir(bb43[1])
  _147 = core::num::<impl u64>::wrapping_add(move _148, move _149) -> bb45
  using: _148@Mir(bb44[1]), _149@Mir(bb44[2])
bb45:
  _145 = src::libtree::string_table_maybe_grow(move _146, move _147) -> bb46
  using: _146@Mir(bb44[0]), _147@Mir(bb44[3])
bb46:
  _154 = ((*_6).0: *mut i8)
  using: _6@Phi(bb43)
  _156 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Phi(bb38)
  _155 = move _156 as isize (IntToInt)
  using: _156@Mir(bb46[1])
  _153 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _154, move _155) -> bb47
  using: _154@Mir(bb46[0]), _155@Mir(bb46[2])
bb47:
  _152 = &raw mut (*_153)
  using: _153@Mir(bb46[3])
  _151 = move _152 as *mut libc::c_void (PtrToPtr)
  using: _152@Mir(bb47[0])
  _160 = ((*_6).0: *mut i8)
  using: _6@Phi(bb43)
  _162 = _4
  using: _4@Phi(bb64)
  _161 = move _162 as isize (IntToInt)
  using: _162@Mir(bb47[3])
  _159 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _160, move _161) -> bb48
  using: _160@Mir(bb47[2]), _161@Mir(bb47[4])
bb48:
  _158 = &raw mut (*_159)
  using: _159@Mir(bb47[5])
  _157 = move _158 as *const libc::c_void (PtrToPtr)
  using: _158@Mir(bb48[0])
  _163 = _24
  using: _24@Mir(bb7[4])
  _150 = src::libtree::memcpy(move _151, move _157, move _163) -> bb49
  using: _151@Mir(bb47[1]), _157@Mir(bb48[1]), _163@Mir(bb48[2])
bb49:
  _165 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Phi(bb38)
  _166 = _24
  using: _24@Mir(bb7[4])
  _164 = core::num::<impl u64>::wrapping_add(move _165, move _166) -> bb50
  using: _165@Mir(bb49[0]), _166@Mir(bb49[1])
bb50:
  (((*_1).5: src::libtree::string_table_t).1: u64) = move _164
  using: _1@Phi(bb38), _164@Mir(bb49[2])
  _167 = _5
  using: _5@Phi(bb43)
  _4 = move _167
  using: _167@Mir(bb50[1])
  _172 = ((*_6).0: *mut i8)
  using: _6@Phi(bb43)
  _174 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Phi(bb38)
  _173 = move _174 as isize (IntToInt)
  using: _174@Mir(bb50[4])
  _171 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _172, move _173) -> bb51
  using: _172@Mir(bb50[3]), _173@Mir(bb50[5])
bb51:
  _170 = &raw mut (*_171)
  using: _171@Mir(bb50[6])
  _169 = move _170 as *mut libc::c_void (PtrToPtr)
  using: _170@Mir(bb51[0])
  _176 = _40
  using: _40@Phi(bb38)
  _175 = move _176 as *const libc::c_void (PtrToPtr)
  using: _176@Mir(bb51[2])
  _177 = _143
  using: _143@Mir(bb43[1])
  _168 = src::libtree::memcpy(move _169, move _175, move _177) -> bb52
  using: _169@Mir(bb51[1]), _175@Mir(bb51[3]), _177@Mir(bb51[4])
bb52:
  _179 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Phi(bb38)
  _180 = _143
  using: _143@Mir(bb43[1])
  _178 = core::num::<impl u64>::wrapping_add(move _179, move _180) -> bb53
  using: _179@Mir(bb52[0]), _180@Mir(bb52[1])
bb53:
  (((*_1).5: src::libtree::string_table_t).1: u64) = move _178
  using: _1@Phi(bb38), _178@Mir(bb52[2])
  goto -> bb1
  using: 
bb54:
  _188 = ((*_6).0: *mut i8)
  using: _6@Phi(bb1)
  _190 = _4
  using: _4@Phi(bb1)
  _189 = move _190 as isize (IntToInt)
  using: _190@Mir(bb54[1])
  _187 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _188, move _189) -> bb56
  using: _188@Mir(bb54[0]), _189@Mir(bb54[2])
bb55:
  _0 = const 0_i32
  using: 
  goto -> bb64
  using: 
bb56:
  _186 = move _187 as *const i8 (Pointer(MutToConstPointer))
  using: _187@Mir(bb54[3])
  _185 = src::libtree::strlen(move _186) -> bb57
  using: _186@Mir(bb56[0])
bb57:
  _191 = const 1_u64
  using: 
  _184 = core::num::<impl u64>::wrapping_add(move _185, move _191) -> bb58
  using: _185@Mir(bb56[1]), _191@Mir(bb57[0])
bb58:
  _193 = _6
  using: _6@Phi(bb1)
  _194 = _184
  using: _184@Mir(bb57[1])
  _192 = src::libtree::string_table_maybe_grow(move _193, move _194) -> bb59
  using: _193@Mir(bb58[0]), _194@Mir(bb58[1])
bb59:
  _198 = ((*_6).0: *mut i8)
  using: _6@Phi(bb1)
  _200 = ((*_6).1: u64)
  using: _6@Phi(bb1)
  _199 = move _200 as isize (IntToInt)
  using: _200@Mir(bb59[1])
  _197 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _198, move _199) -> bb60
  using: _198@Mir(bb59[0]), _199@Mir(bb59[2])
bb60:
  _196 = move _197 as *mut libc::c_void (PtrToPtr)
  using: _197@Mir(bb59[3])
  _203 = ((*_6).0: *mut i8)
  using: _6@Phi(bb1)
  _205 = _4
  using: _4@Phi(bb1)
  _204 = move _205 as isize (IntToInt)
  using: _205@Mir(bb60[2])
  _202 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _203, move _204) -> bb61
  using: _203@Mir(bb60[1]), _204@Mir(bb60[3])
bb61:
  _201 = move _202 as *const libc::c_void (PtrToPtr)
  using: _202@Mir(bb60[4])
  _206 = _184
  using: _184@Mir(bb57[1])
  _195 = src::libtree::memcpy(move _196, move _201, move _206) -> bb62
  using: _196@Mir(bb60[0]), _201@Mir(bb61[0]), _206@Mir(bb61[1])
bb62:
  _208 = ((*_6).1: u64)
  using: _6@Phi(bb1)
  _209 = _184
  using: _184@Mir(bb57[1])
  _207 = core::num::<impl u64>::wrapping_add(move _208, move _209) -> bb63
  using: _208@Mir(bb62[0]), _209@Mir(bb62[1])
bb63:
  ((*_6).1: u64) = move _207
  using: _6@Phi(bb1), _207@Mir(bb62[2])
  _0 = const 1_i32
  using: 
  goto -> bb64
  using: 
bb64:
  return
  using: _0@Phi(bb64)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:783:45: 783:70 (#0) by default
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:783:26: 783:83 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:788:27: 788:49 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:789:44: 789:66 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:790:29: 790:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:792:25: 792:50 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:794:33: 794:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:798:35: 798:60 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:797:12: 801:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:804:52: 804:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:807:35: 807:60 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:806:19: 810:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:813:52: 813:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:816:35: 816:60 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:815:19: 819:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:822:52: 822:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:825:35: 825:60 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:824:19: 828:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:831:52: 831:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:835:39: 835:64 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:834:18: 838:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:843:52: 843:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:847:29: 847:54 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:850:33: 850:48 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:852:27: 852:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:853:53: 853:74 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:855:35: 855:71 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:857:35: 857:60 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:854:9: 859:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:860:70: 860:99 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:864:35: 864:71 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:863:9: 868:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:870:52: 870:73 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:873:41: 873:66 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:873:21: 873:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:874:14: 874:61 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:877:25: 877:49 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:878:25: 878:50 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:876:9: 880:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:881:46: 881:61 (#0) by default
@DefId(0:117 ~ lib[40c5]::src::libtree::print_colon_delimited_paths)
bb0:
  goto -> bb1
  using: 
bb1:
  _6 = (*_1)
  using: _1@Phi(bb1)
  _5 = move _6 as i32 (IntToInt)
  using: _6@Mir(bb1[0])
  _7 = const 0_i32
  using: 
  _4 = Eq(move _5, move _7)
  using: _5@Mir(bb1[1]), _7@Mir(bb1[2])
  _3 = Not(move _4)
  using: _4@Mir(bb1[3])
  switchInt(move _3) -> [0: bb19, otherwise: bb2]
  using: _3@Mir(bb1[4])
bb2:
  _9 = _1
  using: _1@Phi(bb1)
  _10 = const 58_i32
  using: 
  _8 = src::libtree::strchr(move _9, move _10) -> bb3
  using: _9@Mir(bb2[0]), _10@Mir(bb2[1])
bb3:
  _12 = _1
  using: _1@Phi(bb1)
  _14 = _8
  using: _8@Mir(bb2[2])
  _13 = move _14 as *const i8 (Pointer(MutToConstPointer))
  using: _14@Mir(bb3[1])
  _11 = Eq(move _12, move _13)
  using: _12@Mir(bb3[0]), _13@Mir(bb3[2])
  switchInt(move _11) -> [0: bb6, otherwise: bb4]
  using: _11@Mir(bb3[3])
bb4:
  _16 = _1
  using: _1@Phi(bb1)
  _15 = std::ptr::const_ptr::<impl *const i8>::offset(move _16, const 1_isize) -> bb5
  using: _16@Mir(bb4[0])
bb5:
  _1 = move _15
  using: _15@Mir(bb4[1])
  goto -> bb1
  using: 
bb6:
  _18 = _2
  using: _2@Phi(bb1)
  _20 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _19 = (*_20)
  using: _20@Mir(bb6[1])
  _17 = src::libtree::fputs(move _18, move _19) -> bb7
  using: _18@Mir(bb6[0]), _19@Mir(bb6[2])
bb7:
  _25 = const b"    \x00"
  using: 
  _24 = &raw const (*_25)
  using: _25@Mir(bb7[0])
  _23 = move _24 as *const u8 (Pointer(ArrayToPointer))
  using: _24@Mir(bb7[1])
  _22 = move _23 as *const i8 (PtrToPtr)
  using: _23@Mir(bb7[2])
  _27 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _26 = (*_27)
  using: _27@Mir(bb7[4])
  _21 = src::libtree::fputs(move _22, move _26) -> bb8
  using: _22@Mir(bb7[3]), _26@Mir(bb7[5])
bb8:
  _29 = _8
  using: _8@Mir(bb2[2])
  _28 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _29) -> bb9
  using: _29@Mir(bb8[0])
bb9:
  switchInt(move _28) -> [0: bb11, otherwise: bb10]
  using: _28@Mir(bb8[1])
bb10:
  _32 = _8
  using: _8@Mir(bb2[2])
  _31 = move _32 as usize (PointerExposeAddress)
  using: _32@Mir(bb10[0])
  _30 = Eq(move _31, const 0_usize)
  using: _31@Mir(bb10[1])
  assume(move _30)
  using: _30@Mir(bb10[2])
  _34 = _1
  using: _1@Phi(bb1)
  _33 = src::libtree::puts(move _34) -> bb14
  using: _34@Mir(bb10[4])
bb11:
  _37 = _1
  using: _1@Phi(bb1)
  _36 = move _37 as *const libc::c_void (PtrToPtr)
  using: _37@Mir(bb11[0])
  _38 = const 1_u64
  using: 
  _42 = _8
  using: _8@Mir(bb2[2])
  _43 = _1
  using: _1@Phi(bb1)
  _41 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _42, move _43) -> bb12
  using: _42@Mir(bb11[3]), _43@Mir(bb11[4])
bb12:
  _40 = move _41 as i64 (IntToInt)
  using: _41@Mir(bb11[5])
  _39 = move _40 as u64 (IntToInt)
  using: _40@Mir(bb12[0])
  _45 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _44 = (*_45)
  using: _45@Mir(bb12[2])
  _35 = src::libtree::fwrite(move _36, move _38, move _39, move _44) -> bb13
  using: _36@Mir(bb11[1]), _38@Mir(bb11[2]), _39@Mir(bb12[1]), _44@Mir(bb12[3])
bb13:
  _47 = const 10_i32
  using: 
  _46 = src::libtree::putchar(move _47) -> bb14
  using: _47@Mir(bb13[0])
bb14:
  _49 = _8
  using: _8@Phi(bb14)
  _48 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _49) -> bb15
  using: _49@Mir(bb14[0])
bb15:
  switchInt(move _48) -> [0: bb17, otherwise: bb16]
  using: _48@Mir(bb14[1])
bb16:
  _52 = _8
  using: _8@Phi(bb14)
  _51 = move _52 as usize (PointerExposeAddress)
  using: _52@Mir(bb16[0])
  _50 = Eq(move _51, const 0_usize)
  using: _51@Mir(bb16[1])
  assume(move _50)
  using: _50@Mir(bb16[2])
  goto -> bb19
  using: 
bb17:
  _54 = _8
  using: _8@Phi(bb14)
  _55 = const 1_isize
  using: 
  _53 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _54, move _55) -> bb18
  using: _54@Mir(bb17[0]), _55@Mir(bb17[1])
bb18:
  _1 = move _53 as *const i8 (Pointer(MutToConstPointer))
  using: _53@Mir(bb17[2])
  goto -> bb1
  using: 
bb19:
  return
  using: _0@Entry
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:891:24: 891:49 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libtree/src/libtree.rs:893:27: 893:36 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:895:13: 895:34 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:896:13: 896:73 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::puts @ workspace/libtree/src/libtree.rs:899:17: 899:28 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:904:26: 904:44 (#0) by default
rewrite call src::libtree::fwrite @ workspace/libtree/src/libtree.rs:901:17: 906:18 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:913:26: 913:59 (#0) by default
@DefId(0:118 ~ lib[40c5]::src::libtree::print_line)
bb0:
  _9 = _7
  using: _7@Entry
  _10 = _1
  using: _1@Entry
  _8 = src::libtree::tree_preamble(move _9, move _10) -> bb1
  using: _9@Mir(bb0[0]), _10@Mir(bb0[1])
bb1:
  _11 = const {0x0 as *mut i8}
  using: 
  _14 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _14) -> [0: bb5, otherwise: bb6]
  using: _14@Mir(bb1[1])
bb2:
  _12 = const false
  using: 
  goto -> bb4
  using: 
bb3:
  _20 = _2
  using: _2@Entry
  _19 = move _20 as *const i8 (Pointer(MutToConstPointer))
  using: _20@Mir(bb3[0])
  _21 = const 47_i32
  using: 
  _18 = src::libtree::strrchr(move _19, move _21) -> bb8
  using: _19@Mir(bb3[1]), _21@Mir(bb3[2])
bb4:
  switchInt(move _12) -> [0: bb17, otherwise: bb10]
  using: _12@Phi(bb4)
bb5:
  _13 = const false
  using: 
  goto -> bb7
  using: 
bb6:
  _16 = _5
  using: _5@Entry
  _15 = Ne(move _16, const 0_i32)
  using: _16@Mir(bb6[0])
  _13 = move _15
  using: _15@Mir(bb6[1])
  goto -> bb7
  using: 
bb7:
  switchInt(move _13) -> [0: bb2, otherwise: bb3]
  using: _13@Phi(bb7)
bb8:
  _11 = move _18
  using: _18@Mir(bb3[3])
  _23 = _11
  using: _11@Mir(bb8[0])
  _22 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _23) -> bb9
  using: _23@Mir(bb8[1])
bb9:
  _17 = Not(move _22)
  using: _22@Mir(bb8[2])
  _12 = move _17
  using: _17@Mir(bb9[0])
  goto -> bb4
  using: 
bb10:
  _26 = _4
  using: _4@Entry
  _25 = move _26 as *const i8 (Pointer(MutToConstPointer))
  using: _26@Mir(bb10[0])
  _28 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _27 = (*_28)
  using: _28@Mir(bb10[2])
  _24 = src::libtree::fputs(move _25, move _27) -> bb11
  using: _25@Mir(bb10[1]), _27@Mir(bb10[3])
bb11:
  _31 = _2
  using: _2@Phi(bb4)
  _30 = move _31 as *const libc::c_void (PtrToPtr)
  using: _31@Mir(bb11[0])
  _32 = const 1_u64
  using: 
  _37 = _11
  using: _11@Phi(bb4)
  _38 = const 1_isize
  using: 
  _36 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _37, move _38) -> bb12
  using: _37@Mir(bb11[3]), _38@Mir(bb11[4])
bb12:
  _40 = _2
  using: _2@Phi(bb4)
  _39 = move _40 as *const i8 (Pointer(MutToConstPointer))
  using: _40@Mir(bb12[0])
  _35 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _36, move _39) -> bb13
  using: _36@Mir(bb11[5]), _39@Mir(bb12[1])
bb13:
  _34 = move _35 as i64 (IntToInt)
  using: _35@Mir(bb12[2])
  _33 = move _34 as u64 (IntToInt)
  using: _34@Mir(bb13[0])
  _42 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _41 = (*_42)
  using: _42@Mir(bb13[2])
  _29 = src::libtree::fwrite(move _30, move _32, move _33, move _41) -> bb14
  using: _30@Mir(bb11[1]), _32@Mir(bb11[2]), _33@Mir(bb13[1]), _41@Mir(bb13[3])
bb14:
  _45 = _3
  using: _3@Entry
  _44 = move _45 as *const i8 (Pointer(MutToConstPointer))
  using: _45@Mir(bb14[0])
  _47 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _46 = (*_47)
  using: _47@Mir(bb14[2])
  _43 = src::libtree::fputs(move _44, move _46) -> bb15
  using: _44@Mir(bb14[1]), _46@Mir(bb14[3])
bb15:
  _51 = _11
  using: _11@Phi(bb4)
  _52 = const 1_isize
  using: 
  _50 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _51, move _52) -> bb16
  using: _51@Mir(bb15[0]), _52@Mir(bb15[1])
bb16:
  _49 = move _50 as *const i8 (Pointer(MutToConstPointer))
  using: _50@Mir(bb15[2])
  _54 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _53 = (*_54)
  using: _54@Mir(bb16[1])
  _48 = src::libtree::fputs(move _49, move _53) -> bb20
  using: _49@Mir(bb16[0]), _53@Mir(bb16[2])
bb17:
  _55 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _55) -> [0: bb19, otherwise: bb18]
  using: _55@Mir(bb17[0])
bb18:
  _58 = _3
  using: _3@Entry
  _57 = move _58 as *const i8 (Pointer(MutToConstPointer))
  using: _58@Mir(bb18[0])
  _60 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _59 = (*_60)
  using: _60@Mir(bb18[2])
  _56 = src::libtree::fputs(move _57, move _59) -> bb19
  using: _57@Mir(bb18[1]), _59@Mir(bb18[3])
bb19:
  _63 = _2
  using: _2@Phi(bb4)
  _62 = move _63 as *const i8 (Pointer(MutToConstPointer))
  using: _63@Mir(bb19[0])
  _65 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _64 = (*_65)
  using: _65@Mir(bb19[2])
  _61 = src::libtree::fputs(move _62, move _64) -> bb20
  using: _62@Mir(bb19[1]), _64@Mir(bb19[3])
bb20:
  _67 = ((*_7).2: i32)
  using: _7@Phi(bb20)
  switchInt(move _67) -> [0: bb21, otherwise: bb22]
  using: _67@Mir(bb20[0])
bb21:
  _66 = const false
  using: 
  goto -> bb23
  using: 
bb22:
  _69 = _5
  using: _5@Phi(bb7)
  _68 = Ne(move _69, const 0_i32)
  using: _69@Mir(bb22[0])
  _66 = move _68
  using: _68@Mir(bb22[1])
  goto -> bb23
  using: 
bb23:
  switchInt(move _66) -> [0: bb25, otherwise: bb24]
  using: _66@Phi(bb23)
bb24:
  _74 = const b"\x1b[0m \x1b[33m\x00"
  using: 
  _73 = &raw const (*_74)
  using: _74@Mir(bb24[0])
  _72 = move _73 as *const u8 (Pointer(ArrayToPointer))
  using: _73@Mir(bb24[1])
  _71 = move _72 as *const i8 (PtrToPtr)
  using: _72@Mir(bb24[2])
  _76 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _75 = (*_76)
  using: _76@Mir(bb24[4])
  _70 = src::libtree::fputs(move _71, move _75) -> bb26
  using: _71@Mir(bb24[3]), _75@Mir(bb24[5])
bb25:
  _78 = const 32_i32
  using: 
  _77 = src::libtree::putchar(move _78) -> bb26
  using: _78@Mir(bb25[0])
bb26:
  _79 = const {0x0 as *mut i8}
  using: 
  _80 = (_6.0: u32)
  using: _6@Entry
  switchInt(_80) -> [2: bb27, 3: bb37, 4: bb38, 5: bb39, 1: bb47, 6: bb48, otherwise: bb49]
  using: _80@Mir(bb26[1])
bb27:
  _83 = (_6.1: u64)
  using: _6@Entry
  _84 = const 1_u64
  using: 
  _82 = core::num::<impl u64>::wrapping_add(move _83, move _84) -> bb28
  using: _83@Mir(bb27[0]), _84@Mir(bb27[1])
bb28:
  _85 = _1
  using: _1@Entry
  _81 = Ge(move _82, move _85)
  using: _82@Mir(bb27[2]), _85@Mir(bb28[0])
  switchInt(move _81) -> [0: bb30, otherwise: bb29]
  using: _81@Mir(bb28[1])
bb29:
  _90 = const b"[rpath]\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb29[0])
  _88 = move _89 as *const u8 (Pointer(ArrayToPointer))
  using: _89@Mir(bb29[1])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb29[2])
  _92 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _91 = (*_92)
  using: _92@Mir(bb29[4])
  _86 = src::libtree::fputs(move _87, move _91) -> bb49
  using: _87@Mir(bb29[3]), _91@Mir(bb29[5])
bb30:
  _93 = [const 0_i8; 8]
  using: 
  _97 = &mut _93
  using: _93@Mir(bb30[0])
  _96 = move _97 as &mut [i8] (Pointer(Unsize))
  using: _97@Mir(bb30[1])
  _95 = core::slice::<impl [i8]>::as_mut_ptr(move _96) -> bb31
  using: _96@Mir(bb30[2])
bb31:
  _99 = (_6.1: u64)
  using: _6@Entry
  _100 = const 1_u64
  using: 
  _98 = core::num::<impl u64>::wrapping_add(move _99, move _100) -> bb32
  using: _99@Mir(bb31[0]), _100@Mir(bb31[1])
bb32:
  _94 = src::libtree::utoa(move _95, move _98) -> bb33
  using: _95@Mir(bb30[3]), _98@Mir(bb31[2])
bb33:
  _105 = const b"[rpath of \x00"
  using: 
  _104 = &raw const (*_105)
  using: _105@Mir(bb33[0])
  _103 = move _104 as *const u8 (Pointer(ArrayToPointer))
  using: _104@Mir(bb33[1])
  _102 = move _103 as *const i8 (PtrToPtr)
  using: _103@Mir(bb33[2])
  _107 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _106 = (*_107)
  using: _107@Mir(bb33[4])
  _101 = src::libtree::fputs(move _102, move _106) -> bb34
  using: _102@Mir(bb33[3]), _106@Mir(bb33[5])
bb34:
  _112 = &mut _93
  using: _93@Mir(bb30[0])
  _111 = move _112 as &mut [i8] (Pointer(Unsize))
  using: _112@Mir(bb34[0])
  _110 = core::slice::<impl [i8]>::as_mut_ptr(move _111) -> bb35
  using: _111@Mir(bb34[1])
bb35:
  _109 = move _110 as *const i8 (Pointer(MutToConstPointer))
  using: _110@Mir(bb34[2])
  _114 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _113 = (*_114)
  using: _114@Mir(bb35[1])
  _108 = src::libtree::fputs(move _109, move _113) -> bb36
  using: _109@Mir(bb35[0]), _113@Mir(bb35[2])
bb36:
  _116 = const 93_i32
  using: 
  _115 = src::libtree::putchar(move _116) -> bb49
  using: _116@Mir(bb36[0])
bb37:
  _121 = const b"[LD_LIBRARY_PATH]\x00"
  using: 
  _120 = &raw const (*_121)
  using: _121@Mir(bb37[0])
  _119 = move _120 as *const u8 (Pointer(ArrayToPointer))
  using: _120@Mir(bb37[1])
  _118 = move _119 as *const i8 (PtrToPtr)
  using: _119@Mir(bb37[2])
  _123 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _122 = (*_123)
  using: _123@Mir(bb37[4])
  _117 = src::libtree::fputs(move _118, move _122) -> bb49
  using: _118@Mir(bb37[3]), _122@Mir(bb37[5])
bb38:
  _128 = const b"[runpath]\x00"
  using: 
  _127 = &raw const (*_128)
  using: _128@Mir(bb38[0])
  _126 = move _127 as *const u8 (Pointer(ArrayToPointer))
  using: _127@Mir(bb38[1])
  _125 = move _126 as *const i8 (PtrToPtr)
  using: _126@Mir(bb38[2])
  _130 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _129 = (*_130)
  using: _130@Mir(bb38[4])
  _124 = src::libtree::fputs(move _125, move _129) -> bb49
  using: _125@Mir(bb38[3]), _129@Mir(bb38[5])
bb39:
  _132 = const 91_i32
  using: 
  _131 = src::libtree::putchar(move _132) -> bb40
  using: _132@Mir(bb39[0])
bb40:
  _135 = ((*_7).3: *mut i8)
  using: _7@Phi(bb20)
  _134 = move _135 as *const i8 (Pointer(MutToConstPointer))
  using: _135@Mir(bb40[0])
  _136 = const 47_i32
  using: 
  _133 = src::libtree::strrchr(move _134, move _136) -> bb41
  using: _134@Mir(bb40[1]), _136@Mir(bb40[2])
bb41:
  _79 = move _133
  using: _133@Mir(bb40[3])
  _139 = _79
  using: _79@Mir(bb41[0])
  _138 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _139) -> bb42
  using: _139@Mir(bb41[1])
bb42:
  switchInt(move _138) -> [0: bb44, otherwise: bb43]
  using: _138@Mir(bb41[2])
bb43:
  _142 = _79
  using: _79@Mir(bb41[0])
  _141 = move _142 as usize (PointerExposeAddress)
  using: _142@Mir(bb43[0])
  _140 = Eq(move _141, const 0_usize)
  using: _141@Mir(bb43[1])
  assume(move _140)
  using: _140@Mir(bb43[2])
  _137 = ((*_7).3: *mut i8)
  using: _7@Phi(bb20)
  goto -> bb45
  using: 
bb44:
  _143 = _79
  using: _79@Mir(bb41[0])
  _144 = const 1_isize
  using: 
  _137 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _143, move _144) -> bb45
  using: _143@Mir(bb44[0]), _144@Mir(bb44[1])
bb45:
  _79 = move _137
  using: _137@Phi(bb45)
  _147 = _79
  using: _79@Mir(bb45[0])
  _146 = move _147 as *const i8 (Pointer(MutToConstPointer))
  using: _147@Mir(bb45[1])
  _149 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _148 = (*_149)
  using: _149@Mir(bb45[3])
  _145 = src::libtree::fputs(move _146, move _148) -> bb46
  using: _146@Mir(bb45[2]), _148@Mir(bb45[4])
bb46:
  _151 = const 93_i32
  using: 
  _150 = src::libtree::putchar(move _151) -> bb49
  using: _151@Mir(bb46[0])
bb47:
  _156 = const b"[direct]\x00"
  using: 
  _155 = &raw const (*_156)
  using: _156@Mir(bb47[0])
  _154 = move _155 as *const u8 (Pointer(ArrayToPointer))
  using: _155@Mir(bb47[1])
  _153 = move _154 as *const i8 (PtrToPtr)
  using: _154@Mir(bb47[2])
  _158 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _157 = (*_158)
  using: _158@Mir(bb47[4])
  _152 = src::libtree::fputs(move _153, move _157) -> bb49
  using: _153@Mir(bb47[3]), _157@Mir(bb47[5])
bb48:
  _163 = const b"[default path]\x00"
  using: 
  _162 = &raw const (*_163)
  using: _163@Mir(bb48[0])
  _161 = move _162 as *const u8 (Pointer(ArrayToPointer))
  using: _162@Mir(bb48[1])
  _160 = move _161 as *const i8 (PtrToPtr)
  using: _161@Mir(bb48[2])
  _165 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _164 = (*_165)
  using: _165@Mir(bb48[4])
  _159 = src::libtree::fputs(move _160, move _164) -> bb49
  using: _160@Mir(bb48[3]), _164@Mir(bb48[5])
bb49:
  _166 = ((*_7).2: i32)
  using: _7@Phi(bb49)
  switchInt(move _166) -> [0: bb51, otherwise: bb50]
  using: _166@Mir(bb49[0])
bb50:
  _171 = const b"\x1b[0m\n\x00"
  using: 
  _170 = &raw const (*_171)
  using: _171@Mir(bb50[0])
  _169 = move _170 as *const u8 (Pointer(ArrayToPointer))
  using: _170@Mir(bb50[1])
  _168 = move _169 as *const i8 (PtrToPtr)
  using: _169@Mir(bb50[2])
  _173 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _172 = (*_173)
  using: _173@Mir(bb50[4])
  _167 = src::libtree::fputs(move _168, move _172) -> bb52
  using: _168@Mir(bb50[3]), _172@Mir(bb50[5])
bb51:
  _175 = const 10_i32
  using: 
  _174 = src::libtree::putchar(move _175) -> bb52
  using: _175@Mir(bb51[0])
bb52:
  return
  using: _0@Entry
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:929:17: 929:42 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:932:9: 932:37 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:936:19: 936:52 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:936:53: 936:70 (#0) by default
rewrite call src::libtree::fwrite @ workspace/libtree/src/libtree.rs:933:9: 938:10 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:939:9: 939:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:940:21: 940:54 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:940:9: 940:63 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:943:13: 943:38 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:945:9: 945:28 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:948:9: 951:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:958:31: 958:78 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:959:17: 959:80 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 8] is not supported
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:964:36: 964:83 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:966:17: 966:83 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:967:17: 967:48 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:972:13: 975:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:978:13: 978:78 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:982:25: 982:63 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:987:27: 987:60 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:989:13: 989:37 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:993:13: 993:77 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:996:13: 999:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1004:9: 1004:74 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:121 ~ lib[40c5]::src::libtree::print_error)
bb0:
  _7 = const 0_u64
  using: 
  goto -> bb1
  using: 
bb1:
  _9 = _7
  using: _7@Phi(bb1)
  _10 = _2
  using: _2@Phi(bb1)
  _8 = Lt(move _9, move _10)
  using: _9@Mir(bb1[0]), _10@Mir(bb1[1])
  switchInt(move _8) -> [0: bb16, otherwise: bb2]
  using: _8@Mir(bb1[2])
bb2:
  _14 = _7
  using: _7@Phi(bb1)
  _15 = const 1_u64
  using: 
  _13 = core::num::<impl u64>::wrapping_add(move _14, move _15) -> bb3
  using: _14@Mir(bb2[0]), _15@Mir(bb2[1])
bb3:
  _16 = _2
  using: _2@Phi(bb1)
  _12 = Ge(move _13, move _16)
  using: _13@Mir(bb2[2]), _16@Mir(bb3[0])
  _11 = move _12 as i32 (IntToInt)
  using: _12@Mir(bb3[1])
  _18 = _1
  using: _1@Phi(bb1)
  _17 = move _18 as usize (IntToInt)
  using: _18@Mir(bb3[3])
  _19 = const 32_usize
  using: 
  _20 = Lt(_17, _19)
  using: _17@Mir(bb3[4]), _19@Mir(bb3[5])
  assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _17) -> bb4
  using: _20@Entry, _19@Entry, _17@Entry
bb4:
  ((*_5).15: [i8; 32])[_17] = move _11 as i8 (IntToInt)
  using: _5@Phi(bb1), _17@Mir(bb3[4]), _11@Mir(bb3[2])
  _22 = _5
  using: _5@Phi(bb1)
  _24 = _1
  using: _1@Phi(bb1)
  _25 = const 1_u64
  using: 
  _23 = core::num::<impl u64>::wrapping_add(move _24, move _25) -> bb5
  using: _24@Mir(bb4[2]), _25@Mir(bb4[3])
bb5:
  _21 = src::libtree::tree_preamble(move _22, move _23) -> bb6
  using: _22@Mir(bb4[1]), _23@Mir(bb4[4])
bb6:
  _26 = ((*_5).2: i32)
  using: _5@Phi(bb1)
  switchInt(move _26) -> [0: bb8, otherwise: bb7]
  using: _26@Mir(bb6[0])
bb7:
  _31 = const b"\x1b[1;31m\x00"
  using: 
  _30 = &raw const (*_31)
  using: _31@Mir(bb7[0])
  _29 = move _30 as *const u8 (Pointer(ArrayToPointer))
  using: _30@Mir(bb7[1])
  _28 = move _29 as *const i8 (PtrToPtr)
  using: _29@Mir(bb7[2])
  _33 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _32 = (*_33)
  using: _33@Mir(bb7[4])
  _27 = src::libtree::fputs(move _28, move _32) -> bb8
  using: _28@Mir(bb7[3]), _32@Mir(bb7[5])
bb8:
  _37 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Phi(bb1)
  _41 = ((*_3).1: *mut u64)
  using: _3@Phi(bb1)
  _43 = _7
  using: _7@Phi(bb1)
  _42 = move _43 as isize (IntToInt)
  using: _43@Mir(bb8[2])
  _40 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _41, move _42) -> bb9
  using: _41@Mir(bb8[1]), _42@Mir(bb8[3])
bb9:
  _39 = (*_40)
  using: _40@Mir(bb8[4])
  _38 = move _39 as isize (IntToInt)
  using: _39@Mir(bb9[0])
  _36 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _37, move _38) -> bb10
  using: _37@Mir(bb8[0]), _38@Mir(bb9[1])
bb10:
  _35 = move _36 as *const i8 (Pointer(MutToConstPointer))
  using: _36@Mir(bb9[2])
  _45 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _44 = (*_45)
  using: _45@Mir(bb10[1])
  _34 = src::libtree::fputs(move _35, move _44) -> bb11
  using: _35@Mir(bb10[0]), _44@Mir(bb10[2])
bb11:
  _50 = const b" not found\n\x00"
  using: 
  _49 = &raw const (*_50)
  using: _50@Mir(bb11[0])
  _48 = move _49 as *const u8 (Pointer(ArrayToPointer))
  using: _49@Mir(bb11[1])
  _47 = move _48 as *const i8 (PtrToPtr)
  using: _48@Mir(bb11[2])
  _52 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _51 = (*_52)
  using: _52@Mir(bb11[4])
  _46 = src::libtree::fputs(move _47, move _51) -> bb12
  using: _47@Mir(bb11[3]), _51@Mir(bb11[5])
bb12:
  _53 = ((*_5).2: i32)
  using: _5@Phi(bb1)
  switchInt(move _53) -> [0: bb14, otherwise: bb13]
  using: _53@Mir(bb12[0])
bb13:
  _58 = const b"\x1b[0m\x00"
  using: 
  _57 = &raw const (*_58)
  using: _58@Mir(bb13[0])
  _56 = move _57 as *const u8 (Pointer(ArrayToPointer))
  using: _57@Mir(bb13[1])
  _55 = move _56 as *const i8 (PtrToPtr)
  using: _56@Mir(bb13[2])
  _60 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _59 = (*_60)
  using: _60@Mir(bb13[4])
  _54 = src::libtree::fputs(move _55, move _59) -> bb14
  using: _55@Mir(bb13[3]), _59@Mir(bb13[5])
bb14:
  _62 = _7
  using: _7@Phi(bb1)
  _61 = core::num::<impl u64>::wrapping_add(move _62, const 1_u64) -> bb15
  using: _62@Mir(bb14[0])
bb15:
  _7 = move _61
  using: _61@Mir(bb14[1])
  goto -> bb1
  using: 
bb16:
  _65 = ((*_5).2: i32)
  using: _5@Phi(bb1)
  switchInt(move _65) -> [0: bb18, otherwise: bb17]
  using: _65@Mir(bb16[0])
bb17:
  _68 = const b"    \x1b[0;31m\xe2\x94\x8a\x1b[0m\x00"
  using: 
  _67 = &raw const (*_68)
  using: _68@Mir(bb17[0])
  _66 = move _67 as *const u8 (Pointer(ArrayToPointer))
  using: _67@Mir(bb17[1])
  _64 = move _66 as *const i8 (PtrToPtr)
  using: _66@Mir(bb17[2])
  goto -> bb19
  using: 
bb18:
  _71 = const b"    \xe2\x94\x8a\x00"
  using: 
  _70 = &raw const (*_71)
  using: _71@Mir(bb18[0])
  _69 = move _70 as *const u8 (Pointer(ArrayToPointer))
  using: _70@Mir(bb18[1])
  _64 = move _69 as *const i8 (PtrToPtr)
  using: _69@Mir(bb18[2])
  goto -> bb19
  using: 
bb19:
  _63 = move _64 as *mut i8 (PtrToPtr)
  using: _64@Phi(bb19)
  _78 = std::mem::size_of::<[i8; 7]>() -> bb20
  using: 
bb20:
  _77 = move _78 as u64 (IntToInt)
  using: _78@Mir(bb19[1])
  _79 = _1
  using: _1@Phi(bb1)
  _76 = core::num::<impl u64>::wrapping_mul(move _77, move _79) -> bb21
  using: _77@Mir(bb20[0]), _79@Mir(bb20[1])
bb21:
  _82 = _63
  using: _63@Mir(bb19[0])
  _81 = move _82 as *const i8 (Pointer(MutToConstPointer))
  using: _82@Mir(bb21[0])
  _80 = src::libtree::strlen(move _81) -> bb22
  using: _81@Mir(bb21[1])
bb22:
  _75 = core::num::<impl u64>::wrapping_add(move _76, move _80) -> bb23
  using: _76@Mir(bb20[2]), _80@Mir(bb21[2])
bb23:
  _83 = const 1_u64
  using: 
  _74 = core::num::<impl u64>::wrapping_add(move _75, move _83) -> bb24
  using: _75@Mir(bb22[0]), _83@Mir(bb23[0])
bb24:
  _73 = src::libtree::malloc(move _74) -> bb25
  using: _74@Mir(bb23[1])
bb25:
  _72 = move _73 as *mut i8 (PtrToPtr)
  using: _73@Mir(bb24[0])
  _84 = _72
  using: _72@Mir(bb25[0])
  _85 = const 0_u64
  using: 
  goto -> bb26
  using: 
bb26:
  _87 = _85
  using: _85@Phi(bb26)
  _88 = _1
  using: _1@Phi(bb1)
  _86 = Lt(move _87, move _88)
  using: _87@Mir(bb26[0]), _88@Mir(bb26[1])
  switchInt(move _86) -> [0: bb41, otherwise: bb27]
  using: _86@Mir(bb26[2])
bb27:
  _91 = _85
  using: _85@Phi(bb26)
  _90 = move _91 as usize (IntToInt)
  using: _91@Mir(bb27[0])
  _92 = const 32_usize
  using: 
  _93 = Lt(_90, _92)
  using: _90@Mir(bb27[1]), _92@Mir(bb27[2])
  assert(move _93, "index out of bounds: the length is {} but the index is {}", move _92, _90) -> bb28
  using: _93@Entry, _92@Entry, _90@Entry
bb28:
  _89 = ((*_5).15: [i8; 32])[_90]
  using: _5@Phi(bb26), _90@Mir(bb27[1])
  switchInt(move _89) -> [0: bb34, otherwise: bb29]
  using: _89@Mir(bb28[0])
bb29:
  _97 = std::mem::size_of::<[i8; 5]>() -> bb30
  using: 
bb30:
  _96 = move _97 as u64 (IntToInt)
  using: _97@Mir(bb29[0])
  _98 = const 1_u64
  using: 
  _95 = core::num::<impl u64>::wrapping_sub(move _96, move _98) -> bb31
  using: _96@Mir(bb30[0]), _98@Mir(bb30[1])
bb31:
  _94 = move _95 as i32 (IntToInt)
  using: _95@Mir(bb30[2])
  _101 = _84
  using: _84@Phi(bb26)
  _100 = move _101 as *mut libc::c_void (PtrToPtr)
  using: _101@Mir(bb31[1])
  _106 = const b"    \x00"
  using: 
  _105 = &raw const (*_106)
  using: _106@Mir(bb31[3])
  _104 = move _105 as *const u8 (Pointer(ArrayToPointer))
  using: _105@Mir(bb31[4])
  _103 = move _104 as *const i8 (PtrToPtr)
  using: _104@Mir(bb31[5])
  _102 = move _103 as *const libc::c_void (PtrToPtr)
  using: _103@Mir(bb31[6])
  _108 = _94
  using: _94@Mir(bb31[0])
  _107 = move _108 as u64 (IntToInt)
  using: _108@Mir(bb31[8])
  _99 = src::libtree::memcpy(move _100, move _102, move _107) -> bb32
  using: _100@Mir(bb31[2]), _102@Mir(bb31[7]), _107@Mir(bb31[9])
bb32:
  _110 = _84
  using: _84@Phi(bb26)
  _112 = _94
  using: _94@Mir(bb31[0])
  _111 = move _112 as isize (IntToInt)
  using: _112@Mir(bb32[1])
  _109 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _110, move _111) -> bb33
  using: _110@Mir(bb32[0]), _111@Mir(bb32[2])
bb33:
  _84 = move _109
  using: _109@Mir(bb32[3])
  goto -> bb39
  using: 
bb34:
  _116 = std::mem::size_of::<[i8; 7]>() -> bb35
  using: 
bb35:
  _115 = move _116 as u64 (IntToInt)
  using: _116@Mir(bb34[0])
  _117 = const 1_u64
  using: 
  _114 = core::num::<impl u64>::wrapping_sub(move _115, move _117) -> bb36
  using: _115@Mir(bb35[0]), _117@Mir(bb35[1])
bb36:
  _113 = move _114 as i32 (IntToInt)
  using: _114@Mir(bb35[2])
  _120 = _84
  using: _84@Phi(bb26)
  _119 = move _120 as *mut libc::c_void (PtrToPtr)
  using: _120@Mir(bb36[1])
  _125 = const b"\xe2\x94\x82   \x00"
  using: 
  _124 = &raw const (*_125)
  using: _125@Mir(bb36[3])
  _123 = move _124 as *const u8 (Pointer(ArrayToPointer))
  using: _124@Mir(bb36[4])
  _122 = move _123 as *const i8 (PtrToPtr)
  using: _123@Mir(bb36[5])
  _121 = move _122 as *const libc::c_void (PtrToPtr)
  using: _122@Mir(bb36[6])
  _127 = _113
  using: _113@Mir(bb36[0])
  _126 = move _127 as u64 (IntToInt)
  using: _127@Mir(bb36[8])
  _118 = src::libtree::memcpy(move _119, move _121, move _126) -> bb37
  using: _119@Mir(bb36[2]), _121@Mir(bb36[7]), _126@Mir(bb36[9])
bb37:
  _129 = _84
  using: _84@Phi(bb26)
  _131 = _113
  using: _113@Mir(bb36[0])
  _130 = move _131 as isize (IntToInt)
  using: _131@Mir(bb37[1])
  _128 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _129, move _130) -> bb38
  using: _129@Mir(bb37[0]), _130@Mir(bb37[2])
bb38:
  _84 = move _128
  using: _128@Mir(bb37[3])
  goto -> bb39
  using: 
bb39:
  _133 = _85
  using: _85@Phi(bb26)
  _132 = core::num::<impl u64>::wrapping_add(move _133, const 1_u64) -> bb40
  using: _133@Mir(bb39[0])
bb40:
  _85 = move _132
  using: _132@Mir(bb39[1])
  goto -> bb26
  using: 
bb41:
  _135 = _84
  using: _84@Phi(bb39)
  _137 = _63
  using: _63@Mir(bb19[0])
  _136 = move _137 as *const i8 (Pointer(MutToConstPointer))
  using: _137@Mir(bb41[1])
  _134 = src::libtree::strcpy(move _135, move _136) -> bb42
  using: _135@Mir(bb41[0]), _136@Mir(bb41[2])
bb42:
  _140 = _72
  using: _72@Mir(bb25[0])
  _139 = move _140 as *const i8 (Pointer(MutToConstPointer))
  using: _140@Mir(bb42[0])
  _142 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _141 = (*_142)
  using: _142@Mir(bb42[2])
  _138 = src::libtree::fputs(move _139, move _141) -> bb43
  using: _139@Mir(bb42[1]), _141@Mir(bb42[3])
bb43:
  _143 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _143) -> [0: bb45, otherwise: bb44]
  using: _143@Mir(bb43[0])
bb44:
  _148 = const b"\x1b[0;90m\x00"
  using: 
  _147 = &raw const (*_148)
  using: _148@Mir(bb44[0])
  _146 = move _147 as *const u8 (Pointer(ArrayToPointer))
  using: _147@Mir(bb44[1])
  _145 = move _146 as *const i8 (PtrToPtr)
  using: _146@Mir(bb44[2])
  _150 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _149 = (*_150)
  using: _150@Mir(bb44[4])
  _144 = src::libtree::fputs(move _145, move _149) -> bb45
  using: _145@Mir(bb44[3]), _149@Mir(bb44[5])
bb45:
  _155 = const b" Paths considered in this order:\n\x00"
  using: 
  _154 = &raw const (*_155)
  using: _155@Mir(bb45[0])
  _153 = move _154 as *const u8 (Pointer(ArrayToPointer))
  using: _154@Mir(bb45[1])
  _152 = move _153 as *const i8 (PtrToPtr)
  using: _153@Mir(bb45[2])
  _157 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _156 = (*_157)
  using: _157@Mir(bb45[4])
  _151 = src::libtree::fputs(move _152, move _156) -> bb46
  using: _152@Mir(bb45[3]), _156@Mir(bb45[5])
bb46:
  _158 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _158) -> [0: bb48, otherwise: bb47]
  using: _158@Mir(bb46[0])
bb47:
  _163 = const b"\x1b[0m\x00"
  using: 
  _162 = &raw const (*_163)
  using: _163@Mir(bb47[0])
  _161 = move _162 as *const u8 (Pointer(ArrayToPointer))
  using: _162@Mir(bb47[1])
  _160 = move _161 as *const i8 (PtrToPtr)
  using: _161@Mir(bb47[2])
  _165 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _164 = (*_165)
  using: _165@Mir(bb47[4])
  _159 = src::libtree::fputs(move _160, move _164) -> bb48
  using: _160@Mir(bb47[3]), _164@Mir(bb47[5])
bb48:
  _168 = _72
  using: _72@Mir(bb25[0])
  _167 = move _168 as *const i8 (Pointer(MutToConstPointer))
  using: _168@Mir(bb48[0])
  _170 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _169 = (*_170)
  using: _170@Mir(bb48[2])
  _166 = src::libtree::fputs(move _167, move _169) -> bb49
  using: _167@Mir(bb48[1]), _169@Mir(bb48[3])
bb49:
  _173 = _4
  using: _4@Entry
  _172 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _173) -> bb50
  using: _173@Mir(bb49[0])
bb50:
  _171 = Not(move _172)
  using: _172@Mir(bb49[1])
  switchInt(move _171) -> [0: bb56, otherwise: bb51]
  using: _171@Mir(bb50[0])
bb51:
  _174 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _174) -> [0: bb53, otherwise: bb52]
  using: _174@Mir(bb51[0])
bb52:
  _179 = const b"\x1b[0;90m\x00"
  using: 
  _178 = &raw const (*_179)
  using: _179@Mir(bb52[0])
  _177 = move _178 as *const u8 (Pointer(ArrayToPointer))
  using: _178@Mir(bb52[1])
  _176 = move _177 as *const i8 (PtrToPtr)
  using: _177@Mir(bb52[2])
  _181 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _180 = (*_181)
  using: _181@Mir(bb52[4])
  _175 = src::libtree::fputs(move _176, move _180) -> bb53
  using: _176@Mir(bb52[3]), _180@Mir(bb52[5])
bb53:
  _186 = const b" 1. rpath is skipped because runpath was set\n\x00"
  using: 
  _185 = &raw const (*_186)
  using: _186@Mir(bb53[0])
  _184 = move _185 as *const u8 (Pointer(ArrayToPointer))
  using: _185@Mir(bb53[1])
  _183 = move _184 as *const i8 (PtrToPtr)
  using: _184@Mir(bb53[2])
  _188 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _187 = (*_188)
  using: _188@Mir(bb53[4])
  _182 = src::libtree::fputs(move _183, move _187) -> bb54
  using: _183@Mir(bb53[3]), _187@Mir(bb53[5])
bb54:
  _189 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _189) -> [0: bb82, otherwise: bb55]
  using: _189@Mir(bb54[0])
bb55:
  _194 = const b"\x1b[0m\x00"
  using: 
  _193 = &raw const (*_194)
  using: _194@Mir(bb55[0])
  _192 = move _193 as *const u8 (Pointer(ArrayToPointer))
  using: _193@Mir(bb55[1])
  _191 = move _192 as *const i8 (PtrToPtr)
  using: _192@Mir(bb55[2])
  _196 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _195 = (*_196)
  using: _196@Mir(bb55[4])
  _190 = src::libtree::fputs(move _191, move _195) -> bb82
  using: _191@Mir(bb55[3]), _195@Mir(bb55[5])
bb56:
  _199 = _4
  using: _4@Entry
  _198 = move _199 as usize (PointerExposeAddress)
  using: _199@Mir(bb56[0])
  _197 = Eq(move _198, const 0_usize)
  using: _198@Mir(bb56[1])
  assume(move _197)
  using: _197@Mir(bb56[2])
  _200 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _200) -> [0: bb58, otherwise: bb57]
  using: _200@Mir(bb56[4])
bb57:
  _205 = const b"\x1b[0;90m\x00"
  using: 
  _204 = &raw const (*_205)
  using: _205@Mir(bb57[0])
  _203 = move _204 as *const u8 (Pointer(ArrayToPointer))
  using: _204@Mir(bb57[1])
  _202 = move _203 as *const i8 (PtrToPtr)
  using: _203@Mir(bb57[2])
  _207 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _206 = (*_207)
  using: _207@Mir(bb57[4])
  _201 = src::libtree::fputs(move _202, move _206) -> bb58
  using: _202@Mir(bb57[3]), _206@Mir(bb57[5])
bb58:
  _212 = const b" 1. rpath:\n\x00"
  using: 
  _211 = &raw const (*_212)
  using: _212@Mir(bb58[0])
  _210 = move _211 as *const u8 (Pointer(ArrayToPointer))
  using: _211@Mir(bb58[1])
  _209 = move _210 as *const i8 (PtrToPtr)
  using: _210@Mir(bb58[2])
  _214 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _213 = (*_214)
  using: _214@Mir(bb58[4])
  _208 = src::libtree::fputs(move _209, move _213) -> bb59
  using: _209@Mir(bb58[3]), _213@Mir(bb58[5])
bb59:
  _215 = ((*_5).2: i32)
  using: _5@Phi(bb26)
  switchInt(move _215) -> [0: bb61, otherwise: bb60]
  using: _215@Mir(bb59[0])
bb60:
  _220 = const b"\x1b[0m\x00"
  using: 
  _219 = &raw const (*_220)
  using: _220@Mir(bb60[0])
  _218 = move _219 as *const u8 (Pointer(ArrayToPointer))
  using: _219@Mir(bb60[1])
  _217 = move _218 as *const i8 (PtrToPtr)
  using: _218@Mir(bb60[2])
  _222 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _221 = (*_222)
  using: _222@Mir(bb60[4])
  _216 = src::libtree::fputs(move _217, move _221) -> bb61
  using: _217@Mir(bb60[3]), _221@Mir(bb60[5])
bb61:
  _224 = _1
  using: _1@Phi(bb1)
  _223 = move _224 as i32 (IntToInt)
  using: _224@Mir(bb61[0])
  goto -> bb62
  using: 
bb62:
  _226 = _223
  using: _223@Phi(bb62)
  _227 = const 0_i32
  using: 
  _225 = Ge(move _226, move _227)
  using: _226@Mir(bb62[0]), _227@Mir(bb62[1])
  switchInt(move _225) -> [0: bb82, otherwise: bb63]
  using: _225@Mir(bb62[2])
bb63:
  _231 = _223
  using: _223@Phi(bb62)
  _230 = move _231 as usize (IntToInt)
  using: _231@Mir(bb63[0])
  _232 = const 32_usize
  using: 
  _233 = Lt(_230, _232)
  using: _230@Mir(bb63[1]), _232@Mir(bb63[2])
  assert(move _233, "index out of bounds: the length is {} but the index is {}", move _232, _230) -> bb64
  using: _233@Entry, _232@Entry, _230@Entry
bb64:
  _229 = ((*_5).11: [u64; 32])[_230]
  using: _5@Phi(bb62), _230@Mir(bb63[1])
  _234 = const u64::MAX
  using: 
  _228 = Ne(move _229, move _234)
  using: _229@Mir(bb64[0]), _234@Mir(bb64[1])
  switchInt(move _228) -> [0: bb80, otherwise: bb65]
  using: _228@Mir(bb64[2])
bb65:
  _235 = [const 0_i8; 8]
  using: 
  _239 = &mut _235
  using: _235@Mir(bb65[0])
  _238 = move _239 as &mut [i8] (Pointer(Unsize))
  using: _239@Mir(bb65[1])
  _237 = core::slice::<impl [i8]>::as_mut_ptr(move _238) -> bb66
  using: _238@Mir(bb65[2])
bb66:
  _242 = _223
  using: _223@Phi(bb62)
  _243 = const 1_i32
  using: 
  _244 = CheckedAdd(_242, _243)
  using: _242@Mir(bb66[0]), _243@Mir(bb66[1])
  assert(!move (_244.1: bool), "attempt to compute `{} + {}`, which would overflow", move _242, move _243) -> bb67
  using: _244@Entry, _242@Entry, _243@Entry
bb67:
  _241 = move (_244.0: i32)
  using: _244@Mir(bb66[2])
  _240 = move _241 as u64 (IntToInt)
  using: _241@Mir(bb67[0])
  _236 = src::libtree::utoa(move _237, move _240) -> bb68
  using: _237@Mir(bb65[3]), _240@Mir(bb67[1])
bb68:
  _247 = _72
  using: _72@Phi(bb62)
  _246 = move _247 as *const i8 (Pointer(MutToConstPointer))
  using: _247@Mir(bb68[0])
  _249 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _248 = (*_249)
  using: _249@Mir(bb68[2])
  _245 = src::libtree::fputs(move _246, move _248) -> bb69
  using: _246@Mir(bb68[1]), _248@Mir(bb68[3])
bb69:
  _250 = ((*_5).2: i32)
  using: _5@Phi(bb62)
  switchInt(move _250) -> [0: bb71, otherwise: bb70]
  using: _250@Mir(bb69[0])
bb70:
  _255 = const b"\x1b[0;90m\x00"
  using: 
  _254 = &raw const (*_255)
  using: _255@Mir(bb70[0])
  _253 = move _254 as *const u8 (Pointer(ArrayToPointer))
  using: _254@Mir(bb70[1])
  _252 = move _253 as *const i8 (PtrToPtr)
  using: _253@Mir(bb70[2])
  _257 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _256 = (*_257)
  using: _257@Mir(bb70[4])
  _251 = src::libtree::fputs(move _252, move _256) -> bb71
  using: _252@Mir(bb70[3]), _256@Mir(bb70[5])
bb71:
  _262 = const b"    depth \x00"
  using: 
  _261 = &raw const (*_262)
  using: _262@Mir(bb71[0])
  _260 = move _261 as *const u8 (Pointer(ArrayToPointer))
  using: _261@Mir(bb71[1])
  _259 = move _260 as *const i8 (PtrToPtr)
  using: _260@Mir(bb71[2])
  _264 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _263 = (*_264)
  using: _264@Mir(bb71[4])
  _258 = src::libtree::fputs(move _259, move _263) -> bb72
  using: _259@Mir(bb71[3]), _263@Mir(bb71[5])
bb72:
  _269 = &mut _235
  using: _235@Mir(bb65[0])
  _268 = move _269 as &mut [i8] (Pointer(Unsize))
  using: _269@Mir(bb72[0])
  _267 = core::slice::<impl [i8]>::as_mut_ptr(move _268) -> bb73
  using: _268@Mir(bb72[1])
bb73:
  _266 = move _267 as *const i8 (Pointer(MutToConstPointer))
  using: _267@Mir(bb72[2])
  _271 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _270 = (*_271)
  using: _271@Mir(bb73[1])
  _265 = src::libtree::fputs(move _266, move _270) -> bb74
  using: _266@Mir(bb73[0]), _270@Mir(bb73[2])
bb74:
  _272 = ((*_5).2: i32)
  using: _5@Phi(bb62)
  switchInt(move _272) -> [0: bb76, otherwise: bb75]
  using: _272@Mir(bb74[0])
bb75:
  _277 = const b"\x1b[0m\x00"
  using: 
  _276 = &raw const (*_277)
  using: _277@Mir(bb75[0])
  _275 = move _276 as *const u8 (Pointer(ArrayToPointer))
  using: _276@Mir(bb75[1])
  _274 = move _275 as *const i8 (PtrToPtr)
  using: _275@Mir(bb75[2])
  _279 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _278 = (*_279)
  using: _279@Mir(bb75[4])
  _273 = src::libtree::fputs(move _274, move _278) -> bb76
  using: _274@Mir(bb75[3]), _278@Mir(bb75[5])
bb76:
  _281 = const 10_i32
  using: 
  _280 = src::libtree::putchar(move _281) -> bb77
  using: _281@Mir(bb76[0])
bb77:
  _285 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Phi(bb62)
  _289 = _223
  using: _223@Phi(bb62)
  _288 = move _289 as usize (IntToInt)
  using: _289@Mir(bb77[1])
  _290 = const 32_usize
  using: 
  _291 = Lt(_288, _290)
  using: _288@Mir(bb77[2]), _290@Mir(bb77[3])
  assert(move _291, "index out of bounds: the length is {} but the index is {}", move _290, _288) -> bb78
  using: _291@Entry, _290@Entry, _288@Entry
bb78:
  _287 = ((*_5).11: [u64; 32])[_288]
  using: _5@Phi(bb62), _288@Mir(bb77[2])
  _286 = move _287 as isize (IntToInt)
  using: _287@Mir(bb78[0])
  _284 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _285, move _286) -> bb79
  using: _285@Mir(bb77[0]), _286@Mir(bb78[1])
bb79:
  _283 = move _284 as *const i8 (Pointer(MutToConstPointer))
  using: _284@Mir(bb78[2])
  _293 = _72
  using: _72@Phi(bb62)
  _292 = move _293 as *const i8 (Pointer(MutToConstPointer))
  using: _293@Mir(bb79[1])
  _282 = src::libtree::print_colon_delimited_paths(move _283, move _292) -> bb80
  using: _283@Mir(bb79[0]), _292@Mir(bb79[2])
bb80:
  _294 = CheckedSub(_223, const 1_i32)
  using: _223@Phi(bb80)
  assert(!move (_294.1: bool), "attempt to compute `{} - {}`, which would overflow", _223, const 1_i32) -> bb81
  using: _294@Entry, _223@Entry
bb81:
  _223 = move (_294.0: i32)
  using: _294@Mir(bb80[0])
  goto -> bb62
  using: 
bb82:
  _297 = _72
  using: _72@Phi(bb82)
  _296 = move _297 as *const i8 (Pointer(MutToConstPointer))
  using: _297@Mir(bb82[0])
  _299 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _298 = (*_299)
  using: _299@Mir(bb82[2])
  _295 = src::libtree::fputs(move _296, move _298) -> bb83
  using: _296@Mir(bb82[1]), _298@Mir(bb82[3])
bb83:
  _300 = ((*_5).2: i32)
  using: _5@Phi(bb82)
  switchInt(move _300) -> [0: bb85, otherwise: bb84]
  using: _300@Mir(bb83[0])
bb84:
  _305 = const b"\x1b[0;90m\x00"
  using: 
  _304 = &raw const (*_305)
  using: _305@Mir(bb84[0])
  _303 = move _304 as *const u8 (Pointer(ArrayToPointer))
  using: _304@Mir(bb84[1])
  _302 = move _303 as *const i8 (PtrToPtr)
  using: _303@Mir(bb84[2])
  _307 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _306 = (*_307)
  using: _307@Mir(bb84[4])
  _301 = src::libtree::fputs(move _302, move _306) -> bb85
  using: _302@Mir(bb84[3]), _306@Mir(bb84[5])
bb85:
  _311 = ((*_5).12: u64)
  using: _5@Phi(bb82)
  _312 = const u64::MAX
  using: 
  _310 = Eq(move _311, move _312)
  using: _311@Mir(bb85[0]), _312@Mir(bb85[1])
  switchInt(move _310) -> [0: bb87, otherwise: bb86]
  using: _310@Mir(bb85[2])
bb86:
  _315 = const b" 2. LD_LIBRARY_PATH was not set\n\x00"
  using: 
  _314 = &raw const (*_315)
  using: _315@Mir(bb86[0])
  _313 = move _314 as *const u8 (Pointer(ArrayToPointer))
  using: _314@Mir(bb86[1])
  _309 = move _313 as *const i8 (PtrToPtr)
  using: _313@Mir(bb86[2])
  goto -> bb88
  using: 
bb87:
  _318 = const b" 2. LD_LIBRARY_PATH:\n\x00"
  using: 
  _317 = &raw const (*_318)
  using: _318@Mir(bb87[0])
  _316 = move _317 as *const u8 (Pointer(ArrayToPointer))
  using: _317@Mir(bb87[1])
  _309 = move _316 as *const i8 (PtrToPtr)
  using: _316@Mir(bb87[2])
  goto -> bb88
  using: 
bb88:
  _320 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _319 = (*_320)
  using: _320@Mir(bb88[0])
  _308 = src::libtree::fputs(move _309, move _319) -> bb89
  using: _309@Phi(bb88), _319@Mir(bb88[1])
bb89:
  _321 = ((*_5).2: i32)
  using: _5@Phi(bb82)
  switchInt(move _321) -> [0: bb91, otherwise: bb90]
  using: _321@Mir(bb89[0])
bb90:
  _326 = const b"\x1b[0m\x00"
  using: 
  _325 = &raw const (*_326)
  using: _326@Mir(bb90[0])
  _324 = move _325 as *const u8 (Pointer(ArrayToPointer))
  using: _325@Mir(bb90[1])
  _323 = move _324 as *const i8 (PtrToPtr)
  using: _324@Mir(bb90[2])
  _328 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _327 = (*_328)
  using: _328@Mir(bb90[4])
  _322 = src::libtree::fputs(move _323, move _327) -> bb91
  using: _323@Mir(bb90[3]), _327@Mir(bb90[5])
bb91:
  _330 = ((*_5).12: u64)
  using: _5@Phi(bb82)
  _331 = const u64::MAX
  using: 
  _329 = Ne(move _330, move _331)
  using: _330@Mir(bb91[0]), _331@Mir(bb91[1])
  switchInt(move _329) -> [0: bb94, otherwise: bb92]
  using: _329@Mir(bb91[2])
bb92:
  _335 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Phi(bb82)
  _337 = ((*_5).12: u64)
  using: _5@Phi(bb82)
  _336 = move _337 as isize (IntToInt)
  using: _337@Mir(bb92[1])
  _334 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _335, move _336) -> bb93
  using: _335@Mir(bb92[0]), _336@Mir(bb92[2])
bb93:
  _333 = move _334 as *const i8 (Pointer(MutToConstPointer))
  using: _334@Mir(bb92[3])
  _339 = _72
  using: _72@Phi(bb82)
  _338 = move _339 as *const i8 (Pointer(MutToConstPointer))
  using: _339@Mir(bb93[1])
  _332 = src::libtree::print_colon_delimited_paths(move _333, move _338) -> bb94
  using: _333@Mir(bb93[0]), _338@Mir(bb93[2])
bb94:
  _342 = _72
  using: _72@Phi(bb94)
  _341 = move _342 as *const i8 (Pointer(MutToConstPointer))
  using: _342@Mir(bb94[0])
  _344 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _343 = (*_344)
  using: _344@Mir(bb94[2])
  _340 = src::libtree::fputs(move _341, move _343) -> bb95
  using: _341@Mir(bb94[1]), _343@Mir(bb94[3])
bb95:
  _345 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _345) -> [0: bb97, otherwise: bb96]
  using: _345@Mir(bb95[0])
bb96:
  _350 = const b"\x1b[0;90m\x00"
  using: 
  _349 = &raw const (*_350)
  using: _350@Mir(bb96[0])
  _348 = move _349 as *const u8 (Pointer(ArrayToPointer))
  using: _349@Mir(bb96[1])
  _347 = move _348 as *const i8 (PtrToPtr)
  using: _348@Mir(bb96[2])
  _352 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _351 = (*_352)
  using: _352@Mir(bb96[4])
  _346 = src::libtree::fputs(move _347, move _351) -> bb97
  using: _347@Mir(bb96[3]), _351@Mir(bb96[5])
bb97:
  _356 = _4
  using: _4@Phi(bb82)
  _355 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _356) -> bb98
  using: _356@Mir(bb97[0])
bb98:
  switchInt(move _355) -> [0: bb100, otherwise: bb99]
  using: _355@Mir(bb97[1])
bb99:
  _359 = _4
  using: _4@Phi(bb82)
  _358 = move _359 as usize (PointerExposeAddress)
  using: _359@Mir(bb99[0])
  _357 = Eq(move _358, const 0_usize)
  using: _358@Mir(bb99[1])
  assume(move _357)
  using: _357@Mir(bb99[2])
  _362 = const b" 3. runpath was not set\n\x00"
  using: 
  _361 = &raw const (*_362)
  using: _362@Mir(bb99[4])
  _360 = move _361 as *const u8 (Pointer(ArrayToPointer))
  using: _361@Mir(bb99[5])
  _354 = move _360 as *const i8 (PtrToPtr)
  using: _360@Mir(bb99[6])
  goto -> bb101
  using: 
bb100:
  _365 = const b" 3. runpath:\n\x00"
  using: 
  _364 = &raw const (*_365)
  using: _365@Mir(bb100[0])
  _363 = move _364 as *const u8 (Pointer(ArrayToPointer))
  using: _364@Mir(bb100[1])
  _354 = move _363 as *const i8 (PtrToPtr)
  using: _363@Mir(bb100[2])
  goto -> bb101
  using: 
bb101:
  _367 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _366 = (*_367)
  using: _367@Mir(bb101[0])
  _353 = src::libtree::fputs(move _354, move _366) -> bb102
  using: _354@Phi(bb101), _366@Mir(bb101[1])
bb102:
  _368 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _368) -> [0: bb104, otherwise: bb103]
  using: _368@Mir(bb102[0])
bb103:
  _373 = const b"\x1b[0m\x00"
  using: 
  _372 = &raw const (*_373)
  using: _373@Mir(bb103[0])
  _371 = move _372 as *const u8 (Pointer(ArrayToPointer))
  using: _372@Mir(bb103[1])
  _370 = move _371 as *const i8 (PtrToPtr)
  using: _371@Mir(bb103[2])
  _375 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _374 = (*_375)
  using: _375@Mir(bb103[4])
  _369 = src::libtree::fputs(move _370, move _374) -> bb104
  using: _370@Mir(bb103[3]), _374@Mir(bb103[5])
bb104:
  _378 = _4
  using: _4@Phi(bb101)
  _377 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _378) -> bb105
  using: _378@Mir(bb104[0])
bb105:
  _376 = Not(move _377)
  using: _377@Mir(bb104[1])
  switchInt(move _376) -> [0: bb107, otherwise: bb106]
  using: _376@Mir(bb105[0])
bb106:
  _381 = _4
  using: _4@Phi(bb101)
  _380 = move _381 as *const i8 (Pointer(MutToConstPointer))
  using: _381@Mir(bb106[0])
  _383 = _72
  using: _72@Phi(bb94)
  _382 = move _383 as *const i8 (Pointer(MutToConstPointer))
  using: _383@Mir(bb106[2])
  _379 = src::libtree::print_colon_delimited_paths(move _380, move _382) -> bb108
  using: _380@Mir(bb106[1]), _382@Mir(bb106[3])
bb107:
  _386 = _4
  using: _4@Phi(bb101)
  _385 = move _386 as usize (PointerExposeAddress)
  using: _386@Mir(bb107[0])
  _384 = Eq(move _385, const 0_usize)
  using: _385@Mir(bb107[1])
  assume(move _384)
  using: _384@Mir(bb107[2])
  goto -> bb108
  using: 
bb108:
  _389 = _72
  using: _72@Phi(bb108)
  _388 = move _389 as *const i8 (Pointer(MutToConstPointer))
  using: _389@Mir(bb108[0])
  _391 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _390 = (*_391)
  using: _391@Mir(bb108[2])
  _387 = src::libtree::fputs(move _388, move _390) -> bb109
  using: _388@Mir(bb108[1]), _390@Mir(bb108[3])
bb109:
  _392 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _392) -> [0: bb111, otherwise: bb110]
  using: _392@Mir(bb109[0])
bb110:
  _397 = const b"\x1b[0;90m\x00"
  using: 
  _396 = &raw const (*_397)
  using: _397@Mir(bb110[0])
  _395 = move _396 as *const u8 (Pointer(ArrayToPointer))
  using: _396@Mir(bb110[1])
  _394 = move _395 as *const i8 (PtrToPtr)
  using: _395@Mir(bb110[2])
  _399 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _398 = (*_399)
  using: _399@Mir(bb110[4])
  _393 = src::libtree::fputs(move _394, move _398) -> bb111
  using: _394@Mir(bb110[3]), _398@Mir(bb110[5])
bb111:
  _402 = _6
  using: _6@Entry
  switchInt(move _402) -> [0: bb113, otherwise: bb112]
  using: _402@Mir(bb111[0])
bb112:
  _405 = const b" 4. ld config files not considered due to NODEFLIB flag\n\x00"
  using: 
  _404 = &raw const (*_405)
  using: _405@Mir(bb112[0])
  _403 = move _404 as *const u8 (Pointer(ArrayToPointer))
  using: _404@Mir(bb112[1])
  _401 = move _403 as *const i8 (PtrToPtr)
  using: _403@Mir(bb112[2])
  goto -> bb114
  using: 
bb113:
  _408 = const b" 4. ld config files:\n\x00"
  using: 
  _407 = &raw const (*_408)
  using: _408@Mir(bb113[0])
  _406 = move _407 as *const u8 (Pointer(ArrayToPointer))
  using: _407@Mir(bb113[1])
  _401 = move _406 as *const i8 (PtrToPtr)
  using: _406@Mir(bb113[2])
  goto -> bb114
  using: 
bb114:
  _410 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _409 = (*_410)
  using: _410@Mir(bb114[0])
  _400 = src::libtree::fputs(move _401, move _409) -> bb115
  using: _401@Phi(bb114), _409@Mir(bb114[1])
bb115:
  _411 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _411) -> [0: bb117, otherwise: bb116]
  using: _411@Mir(bb115[0])
bb116:
  _416 = const b"\x1b[0m\x00"
  using: 
  _415 = &raw const (*_416)
  using: _416@Mir(bb116[0])
  _414 = move _415 as *const u8 (Pointer(ArrayToPointer))
  using: _415@Mir(bb116[1])
  _413 = move _414 as *const i8 (PtrToPtr)
  using: _414@Mir(bb116[2])
  _418 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _417 = (*_418)
  using: _418@Mir(bb116[4])
  _412 = src::libtree::fputs(move _413, move _417) -> bb117
  using: _413@Mir(bb116[3]), _417@Mir(bb116[5])
bb117:
  _422 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Phi(bb94)
  _424 = ((*_5).14: u64)
  using: _5@Phi(bb94)
  _423 = move _424 as isize (IntToInt)
  using: _424@Mir(bb117[1])
  _421 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _422, move _423) -> bb118
  using: _422@Mir(bb117[0]), _423@Mir(bb117[2])
bb118:
  _420 = move _421 as *const i8 (Pointer(MutToConstPointer))
  using: _421@Mir(bb117[3])
  _426 = _72
  using: _72@Phi(bb108)
  _425 = move _426 as *const i8 (Pointer(MutToConstPointer))
  using: _426@Mir(bb118[1])
  _419 = src::libtree::print_colon_delimited_paths(move _420, move _425) -> bb119
  using: _420@Mir(bb118[0]), _425@Mir(bb118[2])
bb119:
  _429 = _72
  using: _72@Phi(bb108)
  _428 = move _429 as *const i8 (Pointer(MutToConstPointer))
  using: _429@Mir(bb119[0])
  _431 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _430 = (*_431)
  using: _431@Mir(bb119[2])
  _427 = src::libtree::fputs(move _428, move _430) -> bb120
  using: _428@Mir(bb119[1]), _430@Mir(bb119[3])
bb120:
  _432 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _432) -> [0: bb122, otherwise: bb121]
  using: _432@Mir(bb120[0])
bb121:
  _437 = const b"\x1b[0;90m\x00"
  using: 
  _436 = &raw const (*_437)
  using: _437@Mir(bb121[0])
  _435 = move _436 as *const u8 (Pointer(ArrayToPointer))
  using: _436@Mir(bb121[1])
  _434 = move _435 as *const i8 (PtrToPtr)
  using: _435@Mir(bb121[2])
  _439 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _438 = (*_439)
  using: _439@Mir(bb121[4])
  _433 = src::libtree::fputs(move _434, move _438) -> bb122
  using: _434@Mir(bb121[3]), _438@Mir(bb121[5])
bb122:
  _442 = _6
  using: _6@Entry
  switchInt(move _442) -> [0: bb124, otherwise: bb123]
  using: _442@Mir(bb122[0])
bb123:
  _445 = const b" 5. Standard paths not considered due to NODEFLIB flag\n\x00"
  using: 
  _444 = &raw const (*_445)
  using: _445@Mir(bb123[0])
  _443 = move _444 as *const u8 (Pointer(ArrayToPointer))
  using: _444@Mir(bb123[1])
  _441 = move _443 as *const i8 (PtrToPtr)
  using: _443@Mir(bb123[2])
  goto -> bb125
  using: 
bb124:
  _448 = const b" 5. Standard paths:\n\x00"
  using: 
  _447 = &raw const (*_448)
  using: _448@Mir(bb124[0])
  _446 = move _447 as *const u8 (Pointer(ArrayToPointer))
  using: _447@Mir(bb124[1])
  _441 = move _446 as *const i8 (PtrToPtr)
  using: _446@Mir(bb124[2])
  goto -> bb125
  using: 
bb125:
  _450 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _449 = (*_450)
  using: _450@Mir(bb125[0])
  _440 = src::libtree::fputs(move _441, move _449) -> bb126
  using: _441@Phi(bb125), _449@Mir(bb125[1])
bb126:
  _451 = ((*_5).2: i32)
  using: _5@Phi(bb94)
  switchInt(move _451) -> [0: bb128, otherwise: bb127]
  using: _451@Mir(bb126[0])
bb127:
  _456 = const b"\x1b[0m\x00"
  using: 
  _455 = &raw const (*_456)
  using: _456@Mir(bb127[0])
  _454 = move _455 as *const u8 (Pointer(ArrayToPointer))
  using: _455@Mir(bb127[1])
  _453 = move _454 as *const i8 (PtrToPtr)
  using: _454@Mir(bb127[2])
  _458 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _457 = (*_458)
  using: _458@Mir(bb127[4])
  _452 = src::libtree::fputs(move _453, move _457) -> bb128
  using: _453@Mir(bb127[3]), _457@Mir(bb127[5])
bb128:
  _462 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Phi(bb94)
  _464 = ((*_5).13: u64)
  using: _5@Phi(bb94)
  _463 = move _464 as isize (IntToInt)
  using: _464@Mir(bb128[1])
  _461 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _462, move _463) -> bb129
  using: _462@Mir(bb128[0]), _463@Mir(bb128[2])
bb129:
  _460 = move _461 as *const i8 (Pointer(MutToConstPointer))
  using: _461@Mir(bb128[3])
  _466 = _72
  using: _72@Phi(bb108)
  _465 = move _466 as *const i8 (Pointer(MutToConstPointer))
  using: _466@Mir(bb129[1])
  _459 = src::libtree::print_colon_delimited_paths(move _460, move _465) -> bb130
  using: _460@Mir(bb129[0]), _465@Mir(bb129[2])
bb130:
  _469 = _72
  using: _72@Phi(bb108)
  _468 = move _469 as *mut libc::c_void (PtrToPtr)
  using: _469@Mir(bb130[0])
  _467 = src::libtree::free(move _468) -> bb131
  using: _468@Mir(bb130[1])
bb131:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1019:52: 1019:99 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1022:32: 1022:79 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1024:13: 1024:79 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1027:71: 1027:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1027:37: 1027:99 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1026:9: 1029:10 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1030:9: 1033:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1035:13: 1035:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1037:15: 1037:30 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1045:10: 1045:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:1046:14: 1046:33 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:1047:27: 1047:47 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1047:14: 1047:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1048:14: 1048:61 (#0) by default
rewrite call src::libtree::malloc @ workspace/libtree/src/libtree.rs:1044:22: 1049:6 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1054:28: 1054:70 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:1055:18: 1055:65 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:1057:13: 1061:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1062:19: 1062:39 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1064:30: 1064:72 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:1065:18: 1065:65 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:1067:13: 1071:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1072:19: 1072:41 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1074:19: 1074:34 (#0) by default
rewrite call src::libtree::strcpy @ workspace/libtree/src/libtree.rs:1076:5: 1076:28 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1077:5: 1077:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1079:9: 1079:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1081:5: 1084:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1086:9: 1086:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1088:5: 1088:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1091:13: 1091:79 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1093:9: 1096:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1098:13: 1098:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1103:13: 1103:79 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1105:9: 1108:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1110:13: 1110:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 8] is not supported
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1117:17: 1117:38 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1119:21: 1119:87 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1121:17: 1121:83 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1122:17: 1122:48 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1124:21: 1124:84 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1128:45: 1128:92 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1135:5: 1135:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1137:9: 1137:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1139:5: 1146:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1148:9: 1148:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1152:37: 1152:81 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1156:5: 1156:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1158:9: 1158:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1160:5: 1168:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1170:9: 1170:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1177:5: 1177:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1179:9: 1179:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1181:5: 1189:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1191:9: 1191:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1194:33: 1194:72 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1197:5: 1197:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1199:9: 1199:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1201:5: 1209:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:1211:9: 1211:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1214:33: 1214:75 (#0) by default
@DefId(0:127 ~ lib[40c5]::src::libtree::visited_files_contains)
bb0:
  _3 = const 0_u64
  using: 
  goto -> bb1
  using: 
bb1:
  _5 = _3
  using: _3@Phi(bb1)
  _6 = ((*_1).1: u64)
  using: _1@Phi(bb1)
  _4 = Lt(move _5, move _6)
  using: _5@Mir(bb1[0]), _6@Mir(bb1[1])
  switchInt(move _4) -> [0: bb10, otherwise: bb2]
  using: _4@Mir(bb1[2])
bb2:
  _9 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Phi(bb1)
  _11 = _3
  using: _3@Phi(bb1)
  _10 = move _11 as isize (IntToInt)
  using: _11@Mir(bb2[1])
  _8 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _9, move _10) -> bb3
  using: _9@Mir(bb2[0]), _10@Mir(bb2[2])
bb3:
  _7 = &raw mut (*_8)
  using: _8@Mir(bb2[3])
  _14 = ((*_7).0: u64)
  using: _7@Mir(bb3[0])
  _15 = ((*_2).0: u64)
  using: _2@Phi(bb1)
  _13 = Eq(move _14, move _15)
  using: _14@Mir(bb3[1]), _15@Mir(bb3[2])
  switchInt(move _13) -> [0: bb4, otherwise: bb5]
  using: _13@Mir(bb3[3])
bb4:
  _12 = const false
  using: 
  goto -> bb6
  using: 
bb5:
  _17 = ((*_7).1: u64)
  using: _7@Mir(bb3[0])
  _18 = ((*_2).1: u64)
  using: _2@Phi(bb1)
  _16 = Eq(move _17, move _18)
  using: _17@Mir(bb5[0]), _18@Mir(bb5[1])
  _12 = move _16
  using: _16@Mir(bb5[2])
  goto -> bb6
  using: 
bb6:
  switchInt(move _12) -> [0: bb8, otherwise: bb7]
  using: _12@Phi(bb6)
bb7:
  _0 = const 1_i32
  using: 
  goto -> bb11
  using: 
bb8:
  _20 = _3
  using: _3@Phi(bb1)
  _19 = core::num::<impl u64>::wrapping_add(move _20, const 1_u64) -> bb9
  using: _20@Mir(bb8[0])
bb9:
  _3 = move _19
  using: _19@Mir(bb8[1])
  goto -> bb1
  using: 
bb10:
  _0 = const 0_i32
  using: 
  goto -> bb11
  using: 
bb11:
  return
  using: _0@Phi(bb11)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1226:38: 1226:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1230:15: 1230:30 (#0) by default
@DefId(0:128 ~ lib[40c5]::src::libtree::visited_files_append)
bb0:
  _4 = ((*_1).1: u64)
  using: _1@Entry
  _5 = ((*_1).2: u64)
  using: _1@Entry
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb8, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _7 = ((*_1).2: u64)
  using: _1@Entry
  _8 = const 2_u64
  using: 
  _6 = core::num::<impl u64>::wrapping_mul(move _7, move _8) -> bb2
  using: _7@Mir(bb1[0]), _8@Mir(bb1[1])
bb2:
  ((*_1).2: u64) = move _6
  using: _1@Entry, _6@Mir(bb1[2])
  _11 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _10 = move _11 as *mut libc::c_void (PtrToPtr)
  using: _11@Mir(bb2[1])
  _13 = ((*_1).2: u64)
  using: _1@Entry
  _15 = std::mem::size_of::<src::libtree::visited_file_t>() -> bb3
  using: 
bb3:
  _14 = move _15 as u64 (IntToInt)
  using: _15@Mir(bb2[4])
  _12 = core::num::<impl u64>::wrapping_mul(move _13, move _14) -> bb4
  using: _13@Mir(bb2[3]), _14@Mir(bb3[0])
bb4:
  _9 = src::libtree::realloc(move _10, move _12) -> bb5
  using: _10@Mir(bb2[2]), _12@Mir(bb3[1])
bb5:
  ((*_1).0: *mut src::libtree::visited_file_t) = move _9 as *mut src::libtree::visited_file_t (PtrToPtr)
  using: _1@Entry, _9@Mir(bb4[0])
  _17 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _16 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::is_null(move _17) -> bb6
  using: _17@Mir(bb5[1])
bb6:
  switchInt(move _16) -> [0: bb8, otherwise: bb7]
  using: _16@Mir(bb5[2])
bb7:
  _20 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _19 = move _20 as usize (PointerExposeAddress)
  using: _20@Mir(bb7[0])
  _18 = Eq(move _19, const 0_usize)
  using: _19@Mir(bb7[1])
  assume(move _18)
  using: _18@Mir(bb7[2])
  _22 = const 1_i32
  using: 
  _21 = src::libtree::exit(move _22)
  using: _22@Mir(bb7[4])
bb8:
  _23 = ((*_2).0: u64)
  using: _2@Entry
  _25 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Phi(bb8)
  _27 = ((*_1).1: u64)
  using: _1@Phi(bb8)
  _26 = move _27 as isize (IntToInt)
  using: _27@Mir(bb8[2])
  _24 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _25, move _26) -> bb9
  using: _25@Mir(bb8[1]), _26@Mir(bb8[3])
bb9:
  ((*_24).0: u64) = move _23
  using: _24@Mir(bb8[4]), _23@Mir(bb8[0])
  _28 = ((*_2).1: u64)
  using: _2@Entry
  _30 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Phi(bb8)
  _32 = ((*_1).1: u64)
  using: _1@Phi(bb8)
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb9[3])
  _29 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _30, move _31) -> bb10
  using: _30@Mir(bb9[2]), _31@Mir(bb9[4])
bb10:
  ((*_29).1: u64) = move _28
  using: _29@Mir(bb9[5]), _28@Mir(bb9[1])
  _34 = ((*_1).1: u64)
  using: _1@Phi(bb8)
  _33 = core::num::<impl u64>::wrapping_add(move _34, const 1_u64) -> bb11
  using: _34@Mir(bb10[1])
bb11:
  ((*_1).1: u64) = move _33
  using: _1@Phi(bb8), _33@Mir(bb10[2])
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:1240:14: 1240:61 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1245:31: 1245:70 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:1245:18: 1245:88 (#0) by default
rewrite call src::libtree::realloc @ workspace/libtree/src/libtree.rs:1242:24: 1246:10 (#0) by default
rewrite call src::libtree::exit @ workspace/libtree/src/libtree.rs:1249:13: 1249:35 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1252:22: 1252:49 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1253:22: 1253:49 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1254:31: 1254:46 (#0) by default
@DefId(0:129 ~ lib[40c5]::src::libtree::recurse)
bb0:
  _8 = _1
  using: _1@Entry
  _7 = move _8 as *const i8 (Pointer(MutToConstPointer))
  using: _8@Mir(bb0[0])
  _12 = const b"rb\x00"
  using: 
  _11 = &raw const (*_12)
  using: _12@Mir(bb0[2])
  _10 = move _11 as *const u8 (Pointer(ArrayToPointer))
  using: _11@Mir(bb0[3])
  _9 = move _10 as *const i8 (PtrToPtr)
  using: _10@Mir(bb0[4])
  _6 = src::libtree::fopen(move _7, move _9) -> bb1
  using: _7@Mir(bb0[1]), _9@Mir(bb0[5])
bb1:
  _14 = _6
  using: _6@Mir(bb0[6])
  _13 = std::ptr::mut_ptr::<impl *mut src::libtree::_IO_FILE>::is_null(move _14) -> bb2
  using: _14@Mir(bb1[0])
bb2:
  switchInt(move _13) -> [0: bb4, otherwise: bb3]
  using: _13@Mir(bb1[1])
bb3:
  _17 = _6
  using: _6@Mir(bb0[6])
  _16 = move _17 as usize (PointerExposeAddress)
  using: _17@Mir(bb3[0])
  _15 = Eq(move _16, const 0_usize)
  using: _16@Mir(bb3[1])
  assume(move _15)
  using: _15@Mir(bb3[2])
  _0 = const 31_i32
  using: 
  goto -> bb391
  using: 
bb4:
  _18 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _19 = [const 0_i8; 16]
  using: 
  _23 = &raw mut _19
  using: _19@Mir(bb4[1])
  _22 = move _23 as *mut libc::c_void (PtrToPtr)
  using: _23@Mir(bb4[2])
  _24 = const 16_u64
  using: 
  _25 = const 1_u64
  using: 
  _26 = _6
  using: _6@Mir(bb0[6])
  _21 = src::libtree::fread(move _22, move _24, move _25, move _26) -> bb5
  using: _22@Mir(bb4[3]), _24@Mir(bb4[4]), _25@Mir(bb4[5]), _26@Mir(bb4[6])
bb5:
  _27 = const 1_u64
  using: 
  _20 = Ne(move _21, move _27)
  using: _21@Mir(bb4[7]), _27@Mir(bb5[0])
  switchInt(move _20) -> [0: bb8, otherwise: bb6]
  using: _20@Mir(bb5[1])
bb6:
  _29 = _6
  using: _6@Mir(bb0[6])
  _28 = src::libtree::fclose(move _29) -> bb7
  using: _29@Mir(bb6[0])
bb7:
  _0 = const 11_i32
  using: 
  goto -> bb391
  using: 
bb8:
  _36 = const 0_usize
  using: 
  _35 = _19[_36]
  using: _19@Mir(bb4[1]), _36@Mir(bb8[0])
  _34 = move _35 as i32 (IntToInt)
  using: _35@Mir(bb8[1])
  _37 = const 127_i32
  using: 
  _33 = Ne(move _34, move _37)
  using: _34@Mir(bb8[2]), _37@Mir(bb8[3])
  switchInt(move _33) -> [0: bb16, otherwise: bb15]
  using: _33@Mir(bb8[4])
bb9:
  _30 = const true
  using: 
  goto -> bb11
  using: 
bb10:
  _51 = const 3_usize
  using: 
  _50 = _19[_51]
  using: _19@Phi(bb14), _51@Mir(bb10[0])
  _49 = move _50 as i32 (IntToInt)
  using: _50@Mir(bb10[1])
  _52 = const 70_i32
  using: 
  _48 = Ne(move _49, move _52)
  using: _49@Mir(bb10[2]), _52@Mir(bb10[3])
  _30 = move _48
  using: _48@Mir(bb10[4])
  goto -> bb11
  using: 
bb11:
  switchInt(move _30) -> [0: bb20, otherwise: bb18]
  using: _30@Phi(bb11)
bb12:
  _31 = const true
  using: 
  goto -> bb14
  using: 
bb13:
  _46 = const 2_usize
  using: 
  _45 = _19[_46]
  using: _19@Phi(bb17), _46@Mir(bb13[0])
  _44 = move _45 as i32 (IntToInt)
  using: _45@Mir(bb13[1])
  _47 = const 76_i32
  using: 
  _43 = Ne(move _44, move _47)
  using: _44@Mir(bb13[2]), _47@Mir(bb13[3])
  _31 = move _43
  using: _43@Mir(bb13[4])
  goto -> bb14
  using: 
bb14:
  switchInt(move _31) -> [0: bb10, otherwise: bb9]
  using: _31@Phi(bb14)
bb15:
  _32 = const true
  using: 
  goto -> bb17
  using: 
bb16:
  _41 = const 1_usize
  using: 
  _40 = _19[_41]
  using: _19@Mir(bb4[1]), _41@Mir(bb16[0])
  _39 = move _40 as i32 (IntToInt)
  using: _40@Mir(bb16[1])
  _42 = const 69_i32
  using: 
  _38 = Ne(move _39, move _42)
  using: _39@Mir(bb16[2]), _42@Mir(bb16[3])
  _32 = move _38
  using: _38@Mir(bb16[4])
  goto -> bb17
  using: 
bb17:
  switchInt(move _32) -> [0: bb13, otherwise: bb12]
  using: _32@Phi(bb17)
bb18:
  _54 = _6
  using: _6@Mir(bb0[6])
  _53 = src::libtree::fclose(move _54) -> bb19
  using: _54@Mir(bb18[0])
bb19:
  _0 = const 11_i32
  using: 
  goto -> bb391
  using: 
bb20:
  _59 = const 4_usize
  using: 
  _58 = _19[_59]
  using: _19@Phi(bb11), _59@Mir(bb20[0])
  _57 = move _58 as i32 (IntToInt)
  using: _58@Mir(bb20[1])
  _60 = const 1_i32
  using: 
  _56 = Ne(move _57, move _60)
  using: _57@Mir(bb20[2]), _60@Mir(bb20[3])
  switchInt(move _56) -> [0: bb21, otherwise: bb22]
  using: _56@Mir(bb20[4])
bb21:
  _55 = const false
  using: 
  goto -> bb23
  using: 
bb22:
  _64 = const 4_usize
  using: 
  _63 = _19[_64]
  using: _19@Phi(bb11), _64@Mir(bb22[0])
  _62 = move _63 as i32 (IntToInt)
  using: _63@Mir(bb22[1])
  _65 = const 2_i32
  using: 
  _61 = Ne(move _62, move _65)
  using: _62@Mir(bb22[2]), _65@Mir(bb22[3])
  _55 = move _61
  using: _61@Mir(bb22[4])
  goto -> bb23
  using: 
bb23:
  switchInt(move _55) -> [0: bb26, otherwise: bb24]
  using: _55@Phi(bb23)
bb24:
  _67 = _6
  using: _6@Mir(bb0[6])
  _66 = src::libtree::fclose(move _67) -> bb25
  using: _67@Mir(bb24[0])
bb25:
  _0 = const 12_i32
  using: 
  goto -> bb391
  using: 
bb26:
  _72 = const 5_usize
  using: 
  _71 = _19[_72]
  using: _19@Phi(bb23), _72@Mir(bb26[0])
  _70 = move _71 as i32 (IntToInt)
  using: _71@Mir(bb26[1])
  _73 = const 1_i32
  using: 
  _69 = Ne(move _70, move _73)
  using: _70@Mir(bb26[2]), _73@Mir(bb26[3])
  switchInt(move _69) -> [0: bb27, otherwise: bb28]
  using: _69@Mir(bb26[4])
bb27:
  _68 = const false
  using: 
  goto -> bb29
  using: 
bb28:
  _77 = const 5_usize
  using: 
  _76 = _19[_77]
  using: _19@Phi(bb23), _77@Mir(bb28[0])
  _75 = move _76 as i32 (IntToInt)
  using: _76@Mir(bb28[1])
  _78 = const 2_i32
  using: 
  _74 = Ne(move _75, move _78)
  using: _75@Mir(bb28[2]), _78@Mir(bb28[3])
  _68 = move _74
  using: _74@Mir(bb28[4])
  goto -> bb29
  using: 
bb29:
  switchInt(move _68) -> [0: bb32, otherwise: bb30]
  using: _68@Phi(bb29)
bb30:
  _80 = _6
  using: _6@Mir(bb0[6])
  _79 = src::libtree::fclose(move _80) -> bb31
  using: _80@Mir(bb30[0])
bb31:
  _0 = const 13_i32
  using: 
  goto -> bb391
  using: 
bb32:
  _85 = const 4_usize
  using: 
  _84 = _19[_85]
  using: _19@Phi(bb29), _85@Mir(bb32[0])
  _83 = move _84 as u8 (IntToInt)
  using: _84@Mir(bb32[1])
  Deinit(_82)
  using: 
  (_82.0: i8) = const 0_i8
  using: 
  (_82.1: u8) = move _83
  using: _83@Mir(bb32[2])
  (_82.2: u16) = const 0_u16
  using: 
  _81 = _82
  using: _82@Mir(bb32[3])
  _90 = const 5_usize
  using: 
  _89 = _19[_90]
  using: _19@Phi(bb29), _90@Mir(bb32[8])
  _88 = move _89 as i32 (IntToInt)
  using: _89@Mir(bb32[9])
  _91 = const 1_i32
  using: 
  _87 = Eq(move _88, move _91)
  using: _88@Mir(bb32[10]), _91@Mir(bb32[11])
  _86 = move _87 as i32 (IntToInt)
  using: _87@Mir(bb32[12])
  _93 = (_4.0: i8)
  using: _4@Entry
  switchInt(move _93) -> [0: bb34, otherwise: bb33]
  using: _93@Mir(bb32[14])
bb33:
  _92 = const false
  using: 
  goto -> bb35
  using: 
bb34:
  _96 = (_4.1: u8)
  using: _4@Entry
  _95 = move _96 as i32 (IntToInt)
  using: _96@Mir(bb34[0])
  _98 = (_81.1: u8)
  using: _81@Mir(bb32[7])
  _97 = move _98 as i32 (IntToInt)
  using: _98@Mir(bb34[2])
  _94 = Ne(move _95, move _97)
  using: _95@Mir(bb34[1]), _97@Mir(bb34[3])
  _92 = move _94
  using: _94@Mir(bb34[4])
  goto -> bb35
  using: 
bb35:
  switchInt(move _92) -> [0: bb38, otherwise: bb36]
  using: _92@Phi(bb35)
bb36:
  _100 = _6
  using: _6@Mir(bb0[6])
  _99 = src::libtree::fclose(move _100) -> bb37
  using: _100@Mir(bb36[0])
bb37:
  _0 = const 15_i32
  using: 
  goto -> bb391
  using: 
bb38:
  _102 = _86
  using: _86@Mir(bb32[13])
  _103 = src::libtree::host_is_little_endian() -> bb39
  using: 
bb39:
  _101 = BitXor(move _102, move _103)
  using: _102@Mir(bb38[0]), _103@Mir(bb38[1])
  switchInt(move _101) -> [0: bb42, otherwise: bb40]
  using: _101@Mir(bb39[0])
bb40:
  _105 = _6
  using: _6@Mir(bb0[6])
  _104 = src::libtree::fclose(move _105) -> bb41
  using: _105@Mir(bb40[0])
bb41:
  _0 = const 16_i32
  using: 
  goto -> bb391
  using: 
bb42:
  Deinit(_107)
  using: 
  (_107.0: u16) = const 0_u16
  using: 
  (_107.1: u16) = const 0_u16
  using: 
  (_107.2: u32) = const 0_u32
  using: 
  (_107.3: u64) = const 0_u64
  using: 
  (_107.4: u64) = const 0_u64
  using: 
  (_107.5: u64) = const 0_u64
  using: 
  (_107.6: u32) = const 0_u32
  using: 
  (_107.7: u16) = const 0_u16
  using: 
  (_107.8: u16) = const 0_u16
  using: 
  (_107.9: u16) = const 0_u16
  using: 
  (_107.10: u16) = const 0_u16
  using: 
  (_107.11: u16) = const 0_u16
  using: 
  (_107.12: u16) = const 0_u16
  using: 
  Deinit(_106)
  using: 
  (_106.0: src::libtree::header_64_t) = move _107
  using: _107@Mir(bb42[0])
  _110 = (_81.1: u8)
  using: _81@Phi(bb35)
  _109 = move _110 as i32 (IntToInt)
  using: _110@Mir(bb42[16])
  _111 = const 2_i32
  using: 
  _108 = Eq(move _109, move _111)
  using: _109@Mir(bb42[17]), _111@Mir(bb42[18])
  switchInt(move _108) -> [0: bb44, otherwise: bb43]
  using: _108@Mir(bb42[19])
bb43:
  _115 = &raw mut (_106.0: src::libtree::header_64_t)
  using: _106@Mir(bb42[14])
  _114 = move _115 as *mut libc::c_void (PtrToPtr)
  using: _115@Mir(bb43[0])
  _117 = std::mem::size_of::<src::libtree::header_64_t>() -> bb45
  using: 
bb44:
  _156 = &raw mut (_106.1: src::libtree::header_32_t)
  using: _106@Phi(bb52)
  _155 = move _156 as *mut libc::c_void (PtrToPtr)
  using: _156@Mir(bb44[0])
  _158 = std::mem::size_of::<src::libtree::header_32_t>() -> bb65
  using: 
bb45:
  _116 = move _117 as u64 (IntToInt)
  using: _117@Mir(bb43[2])
  _118 = const 1_u64
  using: 
  _119 = _6
  using: _6@Mir(bb0[6])
  _113 = src::libtree::fread(move _114, move _116, move _118, move _119) -> bb46
  using: _114@Mir(bb43[1]), _116@Mir(bb45[0]), _118@Mir(bb45[1]), _119@Mir(bb45[2])
bb46:
  _120 = const 1_u64
  using: 
  _112 = Ne(move _113, move _120)
  using: _113@Mir(bb45[3]), _120@Mir(bb46[0])
  switchInt(move _112) -> [0: bb49, otherwise: bb47]
  using: _112@Mir(bb46[1])
bb47:
  _122 = _6
  using: _6@Mir(bb0[6])
  _121 = src::libtree::fclose(move _122) -> bb48
  using: _122@Mir(bb47[0])
bb48:
  _0 = const 14_i32
  using: 
  goto -> bb391
  using: 
bb49:
  _126 = ((_106.0: src::libtree::header_64_t).0: u16)
  using: _106@Mir(bb42[14])
  _125 = move _126 as i32 (IntToInt)
  using: _126@Mir(bb49[0])
  _127 = const 2_i32
  using: 
  _124 = Ne(move _125, move _127)
  using: _125@Mir(bb49[1]), _127@Mir(bb49[2])
  switchInt(move _124) -> [0: bb50, otherwise: bb51]
  using: _124@Mir(bb49[3])
bb50:
  _123 = const false
  using: 
  goto -> bb52
  using: 
bb51:
  _130 = ((_106.0: src::libtree::header_64_t).0: u16)
  using: _106@Mir(bb42[14])
  _129 = move _130 as i32 (IntToInt)
  using: _130@Mir(bb51[0])
  _131 = const 3_i32
  using: 
  _128 = Ne(move _129, move _131)
  using: _129@Mir(bb51[1]), _131@Mir(bb51[2])
  _123 = move _128
  using: _128@Mir(bb51[3])
  goto -> bb52
  using: 
bb52:
  switchInt(move _123) -> [0: bb55, otherwise: bb53]
  using: _123@Phi(bb52)
bb53:
  _133 = _6
  using: _6@Mir(bb0[6])
  _132 = src::libtree::fclose(move _133) -> bb54
  using: _133@Mir(bb53[0])
bb54:
  _0 = const 17_i32
  using: 
  goto -> bb391
  using: 
bb55:
  _134 = ((_106.0: src::libtree::header_64_t).1: u16)
  using: _106@Phi(bb52)
  (_81.2: u16) = move _134
  using: _134@Mir(bb55[0])
  _136 = (_4.0: i8)
  using: _4@Phi(bb35)
  switchInt(move _136) -> [0: bb57, otherwise: bb56]
  using: _136@Mir(bb55[2])
bb56:
  _135 = const false
  using: 
  goto -> bb58
  using: 
bb57:
  _139 = (_4.2: u16)
  using: _4@Phi(bb35)
  _138 = move _139 as i32 (IntToInt)
  using: _139@Mir(bb57[0])
  _141 = (_81.2: u16)
  using: _81@Phi(bb35)
  _140 = move _141 as i32 (IntToInt)
  using: _141@Mir(bb57[2])
  _137 = Ne(move _138, move _140)
  using: _138@Mir(bb57[1]), _140@Mir(bb57[3])
  _135 = move _137
  using: _137@Mir(bb57[4])
  goto -> bb58
  using: 
bb58:
  switchInt(move _135) -> [0: bb61, otherwise: bb59]
  using: _135@Phi(bb58)
bb59:
  _143 = _6
  using: _6@Mir(bb0[6])
  _142 = src::libtree::fclose(move _143) -> bb60
  using: _143@Mir(bb59[0])
bb60:
  _0 = const 32_i32
  using: 
  goto -> bb391
  using: 
bb61:
  _146 = _6
  using: _6@Mir(bb0[6])
  _148 = ((_106.0: src::libtree::header_64_t).4: u64)
  using: _106@Phi(bb52)
  _147 = move _148 as i64 (IntToInt)
  using: _148@Mir(bb61[1])
  _149 = const 0_i32
  using: 
  _145 = src::libtree::fseek(move _146, move _147, move _149) -> bb62
  using: _146@Mir(bb61[0]), _147@Mir(bb61[2]), _149@Mir(bb61[3])
bb62:
  _150 = const 0_i32
  using: 
  _144 = Ne(move _145, move _150)
  using: _145@Mir(bb61[4]), _150@Mir(bb62[0])
  switchInt(move _144) -> [0: bb85, otherwise: bb63]
  using: _144@Mir(bb62[1])
bb63:
  _152 = _6
  using: _6@Mir(bb0[6])
  _151 = src::libtree::fclose(move _152) -> bb64
  using: _152@Mir(bb63[0])
bb64:
  _0 = const 18_i32
  using: 
  goto -> bb391
  using: 
bb65:
  _157 = move _158 as u64 (IntToInt)
  using: _158@Mir(bb44[2])
  _159 = const 1_u64
  using: 
  _160 = _6
  using: _6@Mir(bb0[6])
  _154 = src::libtree::fread(move _155, move _157, move _159, move _160) -> bb66
  using: _155@Mir(bb44[1]), _157@Mir(bb65[0]), _159@Mir(bb65[1]), _160@Mir(bb65[2])
bb66:
  _161 = const 1_u64
  using: 
  _153 = Ne(move _154, move _161)
  using: _154@Mir(bb65[3]), _161@Mir(bb66[0])
  switchInt(move _153) -> [0: bb69, otherwise: bb67]
  using: _153@Mir(bb66[1])
bb67:
  _163 = _6
  using: _6@Mir(bb0[6])
  _162 = src::libtree::fclose(move _163) -> bb68
  using: _163@Mir(bb67[0])
bb68:
  _0 = const 14_i32
  using: 
  goto -> bb391
  using: 
bb69:
  _167 = ((_106.1: src::libtree::header_32_t).0: u16)
  using: _106@Phi(bb52)
  _166 = move _167 as i32 (IntToInt)
  using: _167@Mir(bb69[0])
  _168 = const 2_i32
  using: 
  _165 = Ne(move _166, move _168)
  using: _166@Mir(bb69[1]), _168@Mir(bb69[2])
  switchInt(move _165) -> [0: bb70, otherwise: bb71]
  using: _165@Mir(bb69[3])
bb70:
  _164 = const false
  using: 
  goto -> bb72
  using: 
bb71:
  _171 = ((_106.1: src::libtree::header_32_t).0: u16)
  using: _106@Phi(bb52)
  _170 = move _171 as i32 (IntToInt)
  using: _171@Mir(bb71[0])
  _172 = const 3_i32
  using: 
  _169 = Ne(move _170, move _172)
  using: _170@Mir(bb71[1]), _172@Mir(bb71[2])
  _164 = move _169
  using: _169@Mir(bb71[3])
  goto -> bb72
  using: 
bb72:
  switchInt(move _164) -> [0: bb75, otherwise: bb73]
  using: _164@Phi(bb72)
bb73:
  _174 = _6
  using: _6@Mir(bb0[6])
  _173 = src::libtree::fclose(move _174) -> bb74
  using: _174@Mir(bb73[0])
bb74:
  _0 = const 17_i32
  using: 
  goto -> bb391
  using: 
bb75:
  _175 = ((_106.1: src::libtree::header_32_t).1: u16)
  using: _106@Phi(bb72)
  (_81.2: u16) = move _175
  using: _175@Mir(bb75[0])
  _177 = (_4.0: i8)
  using: _4@Phi(bb58)
  switchInt(move _177) -> [0: bb77, otherwise: bb76]
  using: _177@Mir(bb75[2])
bb76:
  _176 = const false
  using: 
  goto -> bb78
  using: 
bb77:
  _180 = (_4.2: u16)
  using: _4@Phi(bb58)
  _179 = move _180 as i32 (IntToInt)
  using: _180@Mir(bb77[0])
  _182 = (_81.2: u16)
  using: _81@Phi(bb58)
  _181 = move _182 as i32 (IntToInt)
  using: _182@Mir(bb77[2])
  _178 = Ne(move _179, move _181)
  using: _179@Mir(bb77[1]), _181@Mir(bb77[3])
  _176 = move _178
  using: _178@Mir(bb77[4])
  goto -> bb78
  using: 
bb78:
  switchInt(move _176) -> [0: bb81, otherwise: bb79]
  using: _176@Phi(bb78)
bb79:
  _184 = _6
  using: _6@Mir(bb0[6])
  _183 = src::libtree::fclose(move _184) -> bb80
  using: _184@Mir(bb79[0])
bb80:
  _0 = const 32_i32
  using: 
  goto -> bb391
  using: 
bb81:
  _187 = _6
  using: _6@Mir(bb0[6])
  _189 = ((_106.1: src::libtree::header_32_t).4: u32)
  using: _106@Phi(bb72)
  _188 = move _189 as i64 (IntToInt)
  using: _189@Mir(bb81[1])
  _190 = const 0_i32
  using: 
  _186 = src::libtree::fseek(move _187, move _188, move _190) -> bb82
  using: _187@Mir(bb81[0]), _188@Mir(bb81[2]), _190@Mir(bb81[3])
bb82:
  _191 = const 0_i32
  using: 
  _185 = Ne(move _186, move _191)
  using: _186@Mir(bb81[4]), _191@Mir(bb82[0])
  switchInt(move _185) -> [0: bb85, otherwise: bb83]
  using: _185@Mir(bb82[1])
bb83:
  _193 = _6
  using: _6@Mir(bb0[6])
  _192 = src::libtree::fclose(move _193) -> bb84
  using: _193@Mir(bb83[0])
bb84:
  _0 = const 18_i32
  using: 
  goto -> bb391
  using: 
bb85:
  Deinit(_195)
  using: 
  (_195.0: u32) = const 0_u32
  using: 
  (_195.1: u32) = const 0_u32
  using: 
  (_195.2: u64) = const 0_u64
  using: 
  (_195.3: u64) = const 0_u64
  using: 
  (_195.4: u64) = const 0_u64
  using: 
  (_195.5: u64) = const 0_u64
  using: 
  (_195.6: u64) = const 0_u64
  using: 
  (_195.7: u64) = const 0_u64
  using: 
  Deinit(_194)
  using: 
  (_194.0: src::libtree::prog_64_t) = move _195
  using: _195@Mir(bb85[0])
  _197 = [const 0_u64; 16]
  using: 
  _198 = const {0x0 as *mut u64}
  using: 
  Deinit(_196)
  using: 
  (_196.0: [u64; 16]) = move _197
  using: _197@Mir(bb85[11])
  (_196.1: *mut u64) = move _198
  using: _198@Mir(bb85[12])
  (_196.2: u64) = const 0_u64
  using: 
  (_196.3: u64) = const 0_u64
  using: 
  _200 = [const 0_u64; 16]
  using: 
  _201 = const {0x0 as *mut u64}
  using: 
  Deinit(_199)
  using: 
  (_199.0: [u64; 16]) = move _200
  using: _200@Mir(bb85[18])
  (_199.1: *mut u64) = move _201
  using: _201@Mir(bb85[19])
  (_199.2: u64) = const 0_u64
  using: 
  (_199.3: u64) = const 0_u64
  using: 
  _203 = &raw mut _196
  using: _196@Mir(bb85[13])
  _202 = src::libtree::small_vec_u64_init(move _203) -> bb86
  using: _203@Mir(bb85[25])
bb86:
  _205 = &raw mut _199
  using: _199@Mir(bb85[20])
  _204 = src::libtree::small_vec_u64_init(move _205) -> bb87
  using: _205@Mir(bb86[0])
bb87:
  _206 = const u64::MAX
  using: 
  _209 = (_81.1: u8)
  using: _81@Phi(bb85)
  _208 = move _209 as i32 (IntToInt)
  using: _209@Mir(bb87[1])
  _210 = const 2_i32
  using: 
  _207 = Eq(move _208, move _210)
  using: _208@Mir(bb87[2]), _210@Mir(bb87[3])
  switchInt(move _207) -> [0: bb104, otherwise: bb88]
  using: _207@Mir(bb87[4])
bb88:
  _211 = const 0_u64
  using: 
  goto -> bb89
  using: 
bb89:
  _213 = _211
  using: _211@Phi(bb89)
  _215 = ((_106.0: src::libtree::header_64_t).9: u16)
  using: _106@Phi(bb85)
  _214 = move _215 as u64 (IntToInt)
  using: _215@Mir(bb89[1])
  _212 = Lt(move _213, move _214)
  using: _213@Mir(bb89[0]), _214@Mir(bb89[2])
  switchInt(move _212) -> [0: bb120, otherwise: bb90]
  using: _212@Mir(bb89[3])
bb90:
  _219 = &raw mut (_194.0: src::libtree::prog_64_t)
  using: _194@Phi(bb89)
  _218 = move _219 as *mut libc::c_void (PtrToPtr)
  using: _219@Mir(bb90[0])
  _221 = std::mem::size_of::<src::libtree::prog_64_t>() -> bb91
  using: 
bb91:
  _220 = move _221 as u64 (IntToInt)
  using: _221@Mir(bb90[2])
  _222 = const 1_u64
  using: 
  _223 = _6
  using: _6@Phi(bb89)
  _217 = src::libtree::fread(move _218, move _220, move _222, move _223) -> bb92
  using: _218@Mir(bb90[1]), _220@Mir(bb91[0]), _222@Mir(bb91[1]), _223@Mir(bb91[2])
bb92:
  _224 = const 1_u64
  using: 
  _216 = Ne(move _217, move _224)
  using: _217@Mir(bb91[3]), _224@Mir(bb92[0])
  switchInt(move _216) -> [0: bb97, otherwise: bb93]
  using: _216@Mir(bb92[1])
bb93:
  _226 = _6
  using: _6@Phi(bb89)
  _225 = src::libtree::fclose(move _226) -> bb94
  using: _226@Mir(bb93[0])
bb94:
  _228 = &raw mut _196
  using: _196@Phi(bb89)
  _227 = src::libtree::small_vec_u64_free(move _228) -> bb95
  using: _228@Mir(bb94[0])
bb95:
  _230 = &raw mut _199
  using: _199@Phi(bb89)
  _229 = src::libtree::small_vec_u64_free(move _230) -> bb96
  using: _230@Mir(bb95[0])
bb96:
  _0 = const 19_i32
  using: 
  goto -> bb391
  using: 
bb97:
  _232 = ((_194.0: src::libtree::prog_64_t).0: u32)
  using: _194@Phi(bb89)
  _233 = const 1_u32
  using: 
  _231 = Eq(move _232, move _233)
  using: _232@Mir(bb97[0]), _233@Mir(bb97[1])
  switchInt(move _231) -> [0: bb99, otherwise: bb98]
  using: _231@Mir(bb97[2])
bb98:
  _235 = &raw mut _196
  using: _196@Phi(bb89)
  _236 = ((_194.0: src::libtree::prog_64_t).2: u64)
  using: _194@Phi(bb89)
  _234 = src::libtree::small_vec_u64_append(move _235, move _236) -> bb100
  using: _235@Mir(bb98[0]), _236@Mir(bb98[1])
bb99:
  _241 = ((_194.0: src::libtree::prog_64_t).0: u32)
  using: _194@Phi(bb89)
  _242 = const 2_u32
  using: 
  _240 = Eq(move _241, move _242)
  using: _241@Mir(bb99[0]), _242@Mir(bb99[1])
  switchInt(move _240) -> [0: bb102, otherwise: bb101]
  using: _240@Mir(bb99[2])
bb100:
  _238 = &raw mut _199
  using: _199@Phi(bb89)
  _239 = ((_194.0: src::libtree::prog_64_t).3: u64)
  using: _194@Phi(bb89)
  _237 = src::libtree::small_vec_u64_append(move _238, move _239) -> bb102
  using: _238@Mir(bb100[0]), _239@Mir(bb100[1])
bb101:
  _243 = ((_194.0: src::libtree::prog_64_t).2: u64)
  using: _194@Phi(bb89)
  _206 = move _243
  using: _243@Mir(bb101[0])
  goto -> bb102
  using: 
bb102:
  _245 = _211
  using: _211@Phi(bb89)
  _244 = core::num::<impl u64>::wrapping_add(move _245, const 1_u64) -> bb103
  using: _245@Mir(bb102[0])
bb103:
  _211 = move _244
  using: _244@Mir(bb102[1])
  goto -> bb89
  using: 
bb104:
  _246 = const 0_u32
  using: 
  goto -> bb105
  using: 
bb105:
  _248 = _246
  using: _246@Phi(bb105)
  _250 = ((_106.1: src::libtree::header_32_t).9: u16)
  using: _106@Phi(bb85)
  _249 = move _250 as u32 (IntToInt)
  using: _250@Mir(bb105[1])
  _247 = Lt(move _248, move _249)
  using: _248@Mir(bb105[0]), _249@Mir(bb105[2])
  switchInt(move _247) -> [0: bb120, otherwise: bb106]
  using: _247@Mir(bb105[3])
bb106:
  _254 = &raw mut (_194.1: src::libtree::prog_32_t)
  using: _194@Phi(bb105)
  _253 = move _254 as *mut libc::c_void (PtrToPtr)
  using: _254@Mir(bb106[0])
  _256 = std::mem::size_of::<src::libtree::prog_32_t>() -> bb107
  using: 
bb107:
  _255 = move _256 as u64 (IntToInt)
  using: _256@Mir(bb106[2])
  _257 = const 1_u64
  using: 
  _258 = _6
  using: _6@Phi(bb105)
  _252 = src::libtree::fread(move _253, move _255, move _257, move _258) -> bb108
  using: _253@Mir(bb106[1]), _255@Mir(bb107[0]), _257@Mir(bb107[1]), _258@Mir(bb107[2])
bb108:
  _259 = const 1_u64
  using: 
  _251 = Ne(move _252, move _259)
  using: _252@Mir(bb107[3]), _259@Mir(bb108[0])
  switchInt(move _251) -> [0: bb113, otherwise: bb109]
  using: _251@Mir(bb108[1])
bb109:
  _261 = _6
  using: _6@Phi(bb105)
  _260 = src::libtree::fclose(move _261) -> bb110
  using: _261@Mir(bb109[0])
bb110:
  _263 = &raw mut _196
  using: _196@Phi(bb105)
  _262 = src::libtree::small_vec_u64_free(move _263) -> bb111
  using: _263@Mir(bb110[0])
bb111:
  _265 = &raw mut _199
  using: _199@Phi(bb105)
  _264 = src::libtree::small_vec_u64_free(move _265) -> bb112
  using: _265@Mir(bb111[0])
bb112:
  _0 = const 19_i32
  using: 
  goto -> bb391
  using: 
bb113:
  _267 = ((_194.1: src::libtree::prog_32_t).0: u32)
  using: _194@Phi(bb105)
  _268 = const 1_u32
  using: 
  _266 = Eq(move _267, move _268)
  using: _267@Mir(bb113[0]), _268@Mir(bb113[1])
  switchInt(move _266) -> [0: bb115, otherwise: bb114]
  using: _266@Mir(bb113[2])
bb114:
  _270 = &raw mut _196
  using: _196@Phi(bb105)
  _272 = ((_194.1: src::libtree::prog_32_t).1: u32)
  using: _194@Phi(bb105)
  _271 = move _272 as u64 (IntToInt)
  using: _272@Mir(bb114[1])
  _269 = src::libtree::small_vec_u64_append(move _270, move _271) -> bb116
  using: _270@Mir(bb114[0]), _271@Mir(bb114[2])
bb115:
  _278 = ((_194.1: src::libtree::prog_32_t).0: u32)
  using: _194@Phi(bb105)
  _279 = const 2_u32
  using: 
  _277 = Eq(move _278, move _279)
  using: _278@Mir(bb115[0]), _279@Mir(bb115[1])
  switchInt(move _277) -> [0: bb118, otherwise: bb117]
  using: _277@Mir(bb115[2])
bb116:
  _274 = &raw mut _199
  using: _199@Phi(bb105)
  _276 = ((_194.1: src::libtree::prog_32_t).2: u32)
  using: _194@Phi(bb105)
  _275 = move _276 as u64 (IntToInt)
  using: _276@Mir(bb116[1])
  _273 = src::libtree::small_vec_u64_append(move _274, move _275) -> bb118
  using: _274@Mir(bb116[0]), _275@Mir(bb116[2])
bb117:
  _280 = ((_194.1: src::libtree::prog_32_t).1: u32)
  using: _194@Phi(bb105)
  _206 = move _280 as u64 (IntToInt)
  using: _280@Mir(bb117[0])
  goto -> bb118
  using: 
bb118:
  _282 = _246
  using: _246@Phi(bb105)
  _281 = core::num::<impl u32>::wrapping_add(move _282, const 1_u32) -> bb119
  using: _282@Mir(bb118[0])
bb119:
  _246 = move _281
  using: _281@Mir(bb118[1])
  goto -> bb105
  using: 
bb120:
  _284 = [const 0_i64; 3]
  using: 
  Deinit(_283)
  using: 
  (_283.0: u64) = const 0_u64
  using: 
  (_283.1: u64) = const 0_u64
  using: 
  (_283.2: u64) = const 0_u64
  using: 
  (_283.3: u32) = const 0_u32
  using: 
  (_283.4: u32) = const 0_u32
  using: 
  (_283.5: u32) = const 0_u32
  using: 
  (_283.6: i32) = const 0_i32
  using: 
  (_283.7: u64) = const 0_u64
  using: 
  (_283.8: i64) = const 0_i64
  using: 
  (_283.9: i64) = const 0_i64
  using: 
  (_283.10: i64) = const 0_i64
  using: 
  (_283.11: i64) = const 0_i64
  using: 
  (_283.12: u64) = const 0_u64
  using: 
  (_283.13: i64) = const 0_i64
  using: 
  (_283.14: u64) = const 0_u64
  using: 
  (_283.15: i64) = const 0_i64
  using: 
  (_283.16: u64) = const 0_u64
  using: 
  (_283.17: [i64; 3]) = move _284
  using: _284@Mir(bb120[0])
  _288 = _1
  using: _1@Entry
  _287 = move _288 as *const i8 (Pointer(MutToConstPointer))
  using: _288@Mir(bb120[20])
  _289 = &raw mut _283
  using: _283@Mir(bb120[1])
  _286 = src::libtree::stat(move _287, move _289) -> bb121
  using: _287@Mir(bb120[21]), _289@Mir(bb120[22])
bb121:
  _290 = const 0_i32
  using: 
  _285 = Ne(move _286, move _290)
  using: _286@Mir(bb120[23]), _290@Mir(bb121[0])
  switchInt(move _285) -> [0: bb126, otherwise: bb122]
  using: _285@Mir(bb121[1])
bb122:
  _292 = _6
  using: _6@Phi(bb120)
  _291 = src::libtree::fclose(move _292) -> bb123
  using: _292@Mir(bb122[0])
bb123:
  _294 = &raw mut _196
  using: _196@Phi(bb120)
  _293 = src::libtree::small_vec_u64_free(move _294) -> bb124
  using: _294@Mir(bb123[0])
bb124:
  _296 = &raw mut _199
  using: _199@Phi(bb120)
  _295 = src::libtree::small_vec_u64_free(move _296) -> bb125
  using: _296@Mir(bb124[0])
bb125:
  _0 = const 20_i32
  using: 
  goto -> bb391
  using: 
bb126:
  _298 = &raw mut ((*_3).6: src::libtree::visited_file_array_t)
  using: _3@Entry
  _299 = &raw mut _283
  using: _283@Mir(bb120[1])
  _297 = src::libtree::visited_files_contains(move _298, move _299) -> bb127
  using: _298@Mir(bb126[0]), _299@Mir(bb126[1])
bb127:
  _300 = _297
  using: _297@Mir(bb126[2])
  switchInt(move _300) -> [0: bb128, otherwise: bb129]
  using: _300@Mir(bb127[0])
bb128:
  _302 = &raw mut ((*_3).6: src::libtree::visited_file_array_t)
  using: _3@Entry
  _303 = &raw mut _283
  using: _283@Mir(bb120[1])
  _301 = src::libtree::visited_files_append(move _302, move _303) -> bb129
  using: _302@Mir(bb128[0]), _303@Mir(bb128[1])
bb129:
  _305 = _206
  using: _206@Phi(bb120)
  _306 = const u64::MAX
  using: 
  _304 = Eq(move _305, move _306)
  using: _305@Mir(bb129[0]), _306@Mir(bb129[1])
  switchInt(move _304) -> [0: bb135, otherwise: bb130]
  using: _304@Mir(bb129[2])
bb130:
  _308 = _2
  using: _2@Entry
  _309 = _1
  using: _1@Entry
  _314 = const b"\x1b[1;36m\x00"
  using: 
  _313 = &raw const (*_314)
  using: _314@Mir(bb130[2])
  _312 = move _313 as *const u8 (Pointer(ArrayToPointer))
  using: _313@Mir(bb130[3])
  _311 = move _312 as *const i8 (PtrToPtr)
  using: _312@Mir(bb130[4])
  _310 = move _311 as *mut i8 (PtrToPtr)
  using: _311@Mir(bb130[5])
  _319 = const b"\x1b[0;36m\x00"
  using: 
  _318 = &raw const (*_319)
  using: _319@Mir(bb130[7])
  _317 = move _318 as *const u8 (Pointer(ArrayToPointer))
  using: _318@Mir(bb130[8])
  _316 = move _317 as *const i8 (PtrToPtr)
  using: _317@Mir(bb130[9])
  _315 = move _316 as *mut i8 (PtrToPtr)
  using: _316@Mir(bb130[10])
  _320 = const 1_i32
  using: 
  _321 = _5
  using: _5@Entry
  _322 = _3
  using: _3@Phi(bb129)
  _307 = src::libtree::print_line(move _308, move _309, move _310, move _315, move _320, move _321, move _322) -> bb131
  using: _308@Mir(bb130[0]), _309@Mir(bb130[1]), _310@Mir(bb130[6]), _315@Mir(bb130[11]), _320@Mir(bb130[12]), _321@Mir(bb130[13]), _322@Mir(bb130[14])
bb131:
  _324 = _6
  using: _6@Phi(bb120)
  _323 = src::libtree::fclose(move _324) -> bb132
  using: _324@Mir(bb131[0])
bb132:
  _326 = &raw mut _196
  using: _196@Phi(bb120)
  _325 = src::libtree::small_vec_u64_free(move _326) -> bb133
  using: _326@Mir(bb132[0])
bb133:
  _328 = &raw mut _199
  using: _199@Phi(bb120)
  _327 = src::libtree::small_vec_u64_free(move _328) -> bb134
  using: _328@Mir(bb133[0])
bb134:
  _0 = const 0_i32
  using: 
  goto -> bb391
  using: 
bb135:
  _330 = (_196.2: u64)
  using: _196@Phi(bb120)
  _331 = const 0_u64
  using: 
  _329 = Eq(move _330, move _331)
  using: _330@Mir(bb135[0]), _331@Mir(bb135[1])
  switchInt(move _329) -> [0: bb137, otherwise: bb136]
  using: _329@Mir(bb135[2])
bb136:
  _333 = _6
  using: _6@Phi(bb120)
  _332 = src::libtree::fclose(move _333) -> bb138
  using: _333@Mir(bb136[0])
bb137:
  _340 = _6
  using: _6@Phi(bb120)
  _342 = _206
  using: _206@Phi(bb120)
  _341 = move _342 as i64 (IntToInt)
  using: _342@Mir(bb137[1])
  _343 = const 0_i32
  using: 
  _339 = src::libtree::fseek(move _340, move _341, move _343) -> bb141
  using: _340@Mir(bb137[0]), _341@Mir(bb137[2]), _343@Mir(bb137[3])
bb138:
  _335 = &raw mut _196
  using: _196@Phi(bb120)
  _334 = src::libtree::small_vec_u64_free(move _335) -> bb139
  using: _335@Mir(bb138[0])
bb139:
  _337 = &raw mut _199
  using: _199@Phi(bb120)
  _336 = src::libtree::small_vec_u64_free(move _337) -> bb140
  using: _337@Mir(bb139[0])
bb140:
  _0 = const 29_i32
  using: 
  goto -> bb391
  using: 
bb141:
  _344 = const 0_i32
  using: 
  _338 = Ne(move _339, move _344)
  using: _339@Mir(bb137[4]), _344@Mir(bb141[0])
  switchInt(move _338) -> [0: bb146, otherwise: bb142]
  using: _338@Mir(bb141[1])
bb142:
  _346 = _6
  using: _6@Phi(bb120)
  _345 = src::libtree::fclose(move _346) -> bb143
  using: _346@Mir(bb142[0])
bb143:
  _348 = &raw mut _196
  using: _196@Phi(bb120)
  _347 = src::libtree::small_vec_u64_free(move _348) -> bb144
  using: _348@Mir(bb143[0])
bb144:
  _350 = &raw mut _199
  using: _199@Phi(bb120)
  _349 = src::libtree::small_vec_u64_free(move _350) -> bb145
  using: _350@Mir(bb144[0])
bb145:
  _0 = const 21_i32
  using: 
  goto -> bb391
  using: 
bb146:
  _351 = const 0_i32
  using: 
  _352 = const u64::MAX
  using: 
  _353 = const u64::MAX
  using: 
  _354 = const u64::MAX
  using: 
  _355 = const u64::MAX
  using: 
  _357 = [const 0_u64; 16]
  using: 
  _358 = const {0x0 as *mut u64}
  using: 
  Deinit(_356)
  using: 
  (_356.0: [u64; 16]) = move _357
  using: _357@Mir(bb146[5])
  (_356.1: *mut u64) = move _358
  using: _358@Mir(bb146[6])
  (_356.2: u64) = const 0_u64
  using: 
  (_356.3: u64) = const 0_u64
  using: 
  _360 = &raw mut _356
  using: _356@Mir(bb146[7])
  _359 = src::libtree::small_vec_u64_init(move _360) -> bb147
  using: _360@Mir(bb146[12])
bb147:
  _361 = const 1_i32
  using: 
  goto -> bb148
  using: 
bb148:
  _362 = _361
  using: _361@Phi(bb148)
  switchInt(move _362) -> [0: bb176, otherwise: bb149]
  using: _362@Mir(bb148[0])
bb149:
  _363 = const 0_u64
  using: 
  _364 = const 0_u64
  using: 
  _367 = (_81.1: u8)
  using: _81@Phi(bb148)
  _366 = move _367 as i32 (IntToInt)
  using: _367@Mir(bb149[2])
  _368 = const 2_i32
  using: 
  _365 = Eq(move _366, move _368)
  using: _366@Mir(bb149[3]), _368@Mir(bb149[4])
  switchInt(move _365) -> [0: bb159, otherwise: bb150]
  using: _365@Mir(bb149[5])
bb150:
  Deinit(_369)
  using: 
  (_369.0: i64) = const 0_i64
  using: 
  (_369.1: u64) = const 0_u64
  using: 
  _373 = &raw mut _369
  using: _369@Mir(bb150[0])
  _372 = move _373 as *mut libc::c_void (PtrToPtr)
  using: _373@Mir(bb150[3])
  _375 = std::mem::size_of::<src::libtree::dyn_64_t>() -> bb151
  using: 
bb151:
  _374 = move _375 as u64 (IntToInt)
  using: _375@Mir(bb150[5])
  _376 = const 1_u64
  using: 
  _377 = _6
  using: _6@Phi(bb148)
  _371 = src::libtree::fread(move _372, move _374, move _376, move _377) -> bb152
  using: _372@Mir(bb150[4]), _374@Mir(bb151[0]), _376@Mir(bb151[1]), _377@Mir(bb151[2])
bb152:
  _378 = const 1_u64
  using: 
  _370 = Ne(move _371, move _378)
  using: _371@Mir(bb151[3]), _378@Mir(bb152[0])
  switchInt(move _370) -> [0: bb158, otherwise: bb153]
  using: _370@Mir(bb152[1])
bb153:
  _380 = _6
  using: _6@Phi(bb148)
  _379 = src::libtree::fclose(move _380) -> bb154
  using: _380@Mir(bb153[0])
bb154:
  _382 = &raw mut _196
  using: _196@Phi(bb120)
  _381 = src::libtree::small_vec_u64_free(move _382) -> bb155
  using: _382@Mir(bb154[0])
bb155:
  _384 = &raw mut _199
  using: _199@Phi(bb120)
  _383 = src::libtree::small_vec_u64_free(move _384) -> bb156
  using: _384@Mir(bb155[0])
bb156:
  _386 = &raw mut _356
  using: _356@Phi(bb148)
  _385 = src::libtree::small_vec_u64_free(move _386) -> bb157
  using: _386@Mir(bb156[0])
bb157:
  _0 = const 22_i32
  using: 
  goto -> bb391
  using: 
bb158:
  _387 = (_369.0: i64)
  using: _369@Mir(bb150[0])
  _363 = move _387 as u64 (IntToInt)
  using: _387@Mir(bb158[0])
  _388 = (_369.1: u64)
  using: _369@Mir(bb150[0])
  _364 = move _388
  using: _388@Mir(bb158[2])
  goto -> bb168
  using: 
bb159:
  Deinit(_389)
  using: 
  (_389.0: i32) = const 0_i32
  using: 
  (_389.1: u32) = const 0_u32
  using: 
  _393 = &raw mut _389
  using: _389@Mir(bb159[0])
  _392 = move _393 as *mut libc::c_void (PtrToPtr)
  using: _393@Mir(bb159[3])
  _395 = std::mem::size_of::<src::libtree::dyn_32_t>() -> bb160
  using: 
bb160:
  _394 = move _395 as u64 (IntToInt)
  using: _395@Mir(bb159[5])
  _396 = const 1_u64
  using: 
  _397 = _6
  using: _6@Phi(bb148)
  _391 = src::libtree::fread(move _392, move _394, move _396, move _397) -> bb161
  using: _392@Mir(bb159[4]), _394@Mir(bb160[0]), _396@Mir(bb160[1]), _397@Mir(bb160[2])
bb161:
  _398 = const 1_u64
  using: 
  _390 = Ne(move _391, move _398)
  using: _391@Mir(bb160[3]), _398@Mir(bb161[0])
  switchInt(move _390) -> [0: bb167, otherwise: bb162]
  using: _390@Mir(bb161[1])
bb162:
  _400 = _6
  using: _6@Phi(bb148)
  _399 = src::libtree::fclose(move _400) -> bb163
  using: _400@Mir(bb162[0])
bb163:
  _402 = &raw mut _196
  using: _196@Phi(bb120)
  _401 = src::libtree::small_vec_u64_free(move _402) -> bb164
  using: _402@Mir(bb163[0])
bb164:
  _404 = &raw mut _199
  using: _199@Phi(bb120)
  _403 = src::libtree::small_vec_u64_free(move _404) -> bb165
  using: _404@Mir(bb164[0])
bb165:
  _406 = &raw mut _356
  using: _356@Phi(bb148)
  _405 = src::libtree::small_vec_u64_free(move _406) -> bb166
  using: _406@Mir(bb165[0])
bb166:
  _0 = const 22_i32
  using: 
  goto -> bb391
  using: 
bb167:
  _407 = (_389.0: i32)
  using: _389@Mir(bb159[0])
  _363 = move _407 as u64 (IntToInt)
  using: _407@Mir(bb167[0])
  _408 = (_389.1: u32)
  using: _389@Mir(bb159[0])
  _364 = move _408 as u64 (IntToInt)
  using: _408@Mir(bb167[2])
  goto -> bb168
  using: 
bb168:
  switchInt(_363) -> [0: bb169, 5: bb170, 15: bb171, 29: bb172, 1: bb173, 14: bb174, 1879048187: bb175, otherwise: bb148]
  using: _363@Phi(bb168)
bb169:
  _361 = const 0_i32
  using: 
  goto -> bb148
  using: 
bb170:
  _409 = _364
  using: _364@Phi(bb168)
  _352 = move _409
  using: _409@Mir(bb170[0])
  goto -> bb148
  using: 
bb171:
  _410 = _364
  using: _364@Phi(bb168)
  _353 = move _410
  using: _410@Mir(bb171[0])
  goto -> bb148
  using: 
bb172:
  _411 = _364
  using: _364@Phi(bb168)
  _354 = move _411
  using: _411@Mir(bb172[0])
  goto -> bb148
  using: 
bb173:
  _413 = &raw mut _356
  using: _356@Phi(bb148)
  _414 = _364
  using: _364@Phi(bb168)
  _412 = src::libtree::small_vec_u64_append(move _413, move _414) -> bb148
  using: _413@Mir(bb173[0]), _414@Mir(bb173[1])
bb174:
  _415 = _364
  using: _364@Phi(bb168)
  _355 = move _415
  using: _415@Mir(bb174[0])
  goto -> bb148
  using: 
bb175:
  _419 = const 2048_u64
  using: 
  _420 = _364
  using: _364@Phi(bb168)
  _418 = BitAnd(move _419, move _420)
  using: _419@Mir(bb175[0]), _420@Mir(bb175[1])
  _421 = const 2048_u64
  using: 
  _417 = Eq(move _418, move _421)
  using: _418@Mir(bb175[2]), _421@Mir(bb175[3])
  _416 = move _417 as i32 (IntToInt)
  using: _417@Mir(bb175[4])
  _351 = BitOr(_351, move _416)
  using: _416@Mir(bb175[5])
  goto -> bb148
  using: 
bb176:
  _423 = _352
  using: _352@Phi(bb148)
  _424 = const u64::MAX
  using: 
  _422 = Eq(move _423, move _424)
  using: _423@Mir(bb176[0]), _424@Mir(bb176[1])
  switchInt(move _422) -> [0: bb178, otherwise: bb177]
  using: _422@Mir(bb176[2])
bb177:
  _426 = _6
  using: _6@Phi(bb168)
  _425 = src::libtree::fclose(move _426) -> bb179
  using: _426@Mir(bb177[0])
bb178:
  _434 = (_199.1: *mut u64)
  using: _199@Phi(bb120)
  _435 = (_199.2: u64)
  using: _199@Phi(bb120)
  _433 = src::libtree::is_ascending_order(move _434, move _435) -> bb183
  using: _434@Mir(bb178[0]), _435@Mir(bb178[1])
bb179:
  _428 = &raw mut _196
  using: _196@Phi(bb120)
  _427 = src::libtree::small_vec_u64_free(move _428) -> bb180
  using: _428@Mir(bb179[0])
bb180:
  _430 = &raw mut _199
  using: _199@Phi(bb120)
  _429 = src::libtree::small_vec_u64_free(move _430) -> bb181
  using: _430@Mir(bb180[0])
bb181:
  _432 = &raw mut _356
  using: _356@Phi(bb148)
  _431 = src::libtree::small_vec_u64_free(move _432) -> bb182
  using: _432@Mir(bb181[0])
bb182:
  _0 = const 23_i32
  using: 
  goto -> bb391
  using: 
bb183:
  switchInt(move _433) -> [0: bb184, otherwise: bb189]
  using: _433@Mir(bb178[2])
bb184:
  _437 = _6
  using: _6@Phi(bb168)
  _436 = src::libtree::fclose(move _437) -> bb185
  using: _437@Mir(bb184[0])
bb185:
  _439 = &raw mut _199
  using: _199@Phi(bb120)
  _438 = src::libtree::small_vec_u64_free(move _439) -> bb186
  using: _439@Mir(bb185[0])
bb186:
  _441 = &raw mut _196
  using: _196@Phi(bb120)
  _440 = src::libtree::small_vec_u64_free(move _441) -> bb187
  using: _441@Mir(bb186[0])
bb187:
  _443 = &raw mut _356
  using: _356@Phi(bb148)
  _442 = src::libtree::small_vec_u64_free(move _443) -> bb188
  using: _443@Mir(bb187[0])
bb188:
  _0 = const 30_i32
  using: 
  goto -> bb391
  using: 
bb189:
  _444 = const 0_u64
  using: 
  goto -> bb190
  using: 
bb190:
  _448 = _444
  using: _444@Phi(bb190)
  _449 = const 1_u64
  using: 
  _447 = core::num::<impl u64>::wrapping_add(move _448, move _449) -> bb194
  using: _448@Mir(bb190[0]), _449@Mir(bb190[1])
bb191:
  _445 = const false
  using: 
  goto -> bb193
  using: 
bb192:
  _452 = _352
  using: _352@Phi(bb190)
  _455 = (_199.1: *mut u64)
  using: _199@Phi(bb190)
  _458 = _444
  using: _444@Phi(bb190)
  _459 = const 1_u64
  using: 
  _457 = core::num::<impl u64>::wrapping_add(move _458, move _459) -> bb195
  using: _458@Mir(bb192[2]), _459@Mir(bb192[3])
bb193:
  switchInt(move _445) -> [0: bb199, otherwise: bb197]
  using: _445@Phi(bb193)
bb194:
  _450 = (_199.2: u64)
  using: _199@Phi(bb190)
  _446 = Ne(move _447, move _450)
  using: _447@Mir(bb190[2]), _450@Mir(bb194[0])
  switchInt(move _446) -> [0: bb191, otherwise: bb192]
  using: _446@Mir(bb194[1])
bb195:
  _456 = move _457 as isize (IntToInt)
  using: _457@Mir(bb192[4])
  _454 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _455, move _456) -> bb196
  using: _455@Mir(bb192[1]), _456@Mir(bb195[0])
bb196:
  _453 = (*_454)
  using: _454@Mir(bb195[1])
  _451 = Ge(move _452, move _453)
  using: _452@Mir(bb192[0]), _453@Mir(bb196[0])
  _445 = move _451
  using: _451@Mir(bb196[1])
  goto -> bb193
  using: 
bb197:
  _461 = _444
  using: _444@Phi(bb193)
  _460 = core::num::<impl u64>::wrapping_add(move _461, const 1_u64) -> bb198
  using: _461@Mir(bb197[0])
bb198:
  _444 = move _460
  using: _460@Mir(bb197[1])
  goto -> bb190
  using: 
bb199:
  _466 = (_196.1: *mut u64)
  using: _196@Phi(bb120)
  _468 = _444
  using: _444@Phi(bb193)
  _467 = move _468 as isize (IntToInt)
  using: _468@Mir(bb199[1])
  _465 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _466, move _467) -> bb200
  using: _466@Mir(bb199[0]), _467@Mir(bb199[2])
bb200:
  _464 = (*_465)
  using: _465@Mir(bb199[3])
  _469 = _352
  using: _352@Phi(bb193)
  _463 = core::num::<impl u64>::wrapping_add(move _464, move _469) -> bb201
  using: _464@Mir(bb200[0]), _469@Mir(bb200[1])
bb201:
  _472 = (_199.1: *mut u64)
  using: _199@Phi(bb193)
  _474 = _444
  using: _444@Phi(bb193)
  _473 = move _474 as isize (IntToInt)
  using: _474@Mir(bb201[1])
  _471 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _472, move _473) -> bb202
  using: _472@Mir(bb201[0]), _473@Mir(bb201[2])
bb202:
  _470 = (*_471)
  using: _471@Mir(bb201[3])
  _462 = core::num::<impl u64>::wrapping_sub(move _463, move _470) -> bb203
  using: _463@Mir(bb200[2]), _470@Mir(bb202[0])
bb203:
  _476 = &raw mut _199
  using: _199@Phi(bb193)
  _475 = src::libtree::small_vec_u64_free(move _476) -> bb204
  using: _476@Mir(bb203[0])
bb204:
  _478 = &raw mut _196
  using: _196@Phi(bb120)
  _477 = src::libtree::small_vec_u64_free(move _478) -> bb205
  using: _478@Mir(bb204[0])
bb205:
  _479 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb129)
  _481 = _355
  using: _355@Phi(bb148)
  _482 = const u64::MAX
  using: 
  _480 = Ne(move _481, move _482)
  using: _481@Mir(bb205[1]), _482@Mir(bb205[2])
  switchInt(move _480) -> [0: bb213, otherwise: bb206]
  using: _480@Mir(bb205[3])
bb206:
  _485 = _6
  using: _6@Phi(bb168)
  _488 = _462
  using: _462@Mir(bb202[1])
  _489 = _355
  using: _355@Phi(bb148)
  _487 = core::num::<impl u64>::wrapping_add(move _488, move _489) -> bb207
  using: _488@Mir(bb206[1]), _489@Mir(bb206[2])
bb207:
  _486 = move _487 as i64 (IntToInt)
  using: _487@Mir(bb206[3])
  _490 = const 0_i32
  using: 
  _484 = src::libtree::fseek(move _485, move _486, move _490) -> bb208
  using: _485@Mir(bb206[0]), _486@Mir(bb207[0]), _490@Mir(bb207[1])
bb208:
  _491 = const 0_i32
  using: 
  _483 = Ne(move _484, move _491)
  using: _484@Mir(bb207[2]), _491@Mir(bb208[0])
  switchInt(move _483) -> [0: bb212, otherwise: bb209]
  using: _483@Mir(bb208[1])
bb209:
  _492 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _492
  using: _3@Phi(bb129), _492@Mir(bb209[0])
  _494 = _6
  using: _6@Phi(bb168)
  _493 = src::libtree::fclose(move _494) -> bb210
  using: _494@Mir(bb209[2])
bb210:
  _496 = &raw mut _356
  using: _356@Phi(bb148)
  _495 = src::libtree::small_vec_u64_free(move _496) -> bb211
  using: _496@Mir(bb210[0])
bb211:
  _0 = const 24_i32
  using: 
  goto -> bb391
  using: 
bb212:
  _498 = &raw mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Phi(bb129)
  _499 = _6
  using: _6@Phi(bb168)
  _497 = src::libtree::string_table_copy_from_file(move _498, move _499) -> bb213
  using: _498@Mir(bb212[0]), _499@Mir(bb212[1])
bb213:
  _503 = _355
  using: _355@Phi(bb213)
  _504 = const u64::MAX
  using: 
  _502 = Ne(move _503, move _504)
  using: _503@Mir(bb213[0]), _504@Mir(bb213[1])
  switchInt(move _502) -> [0: bb214, otherwise: bb215]
  using: _502@Mir(bb213[2])
bb214:
  _501 = const false
  using: 
  goto -> bb216
  using: 
bb215:
  _508 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Phi(bb213)
  _510 = _479
  using: _479@Mir(bb205[0])
  _509 = move _510 as isize (IntToInt)
  using: _510@Mir(bb215[1])
  _507 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _508, move _509) -> bb217
  using: _508@Mir(bb215[0]), _509@Mir(bb215[2])
bb216:
  _500 = move _501 as i32 (IntToInt)
  using: _501@Phi(bb216)
  _514 = _2
  using: _2@Entry
  _515 = ((*_3).4: u64)
  using: _3@Phi(bb216)
  _513 = Lt(move _514, move _515)
  using: _514@Mir(bb216[1]), _515@Mir(bb216[2])
  switchInt(move _513) -> [0: bb219, otherwise: bb220]
  using: _513@Mir(bb216[3])
bb217:
  _506 = src::libtree::is_in_exclude_list(move _507) -> bb218
  using: _507@Mir(bb215[3])
bb218:
  _505 = Ne(move _506, const 0_i32)
  using: _506@Mir(bb217[0])
  _501 = move _505
  using: _505@Mir(bb218[0])
  goto -> bb216
  using: 
bb219:
  _512 = const false
  using: 
  goto -> bb221
  using: 
bb220:
  _519 = _297
  using: _297@Mir(bb126[2])
  switchInt(move _519) -> [0: bb229, otherwise: bb228]
  using: _519@Mir(bb220[0])
bb221:
  _511 = move _512 as i32 (IntToInt)
  using: _512@Phi(bb221)
  _533 = _511
  using: _511@Mir(bb221[0])
  switchInt(move _533) -> [0: bb237, otherwise: bb260]
  using: _533@Mir(bb221[1])
bb222:
  _516 = const true
  using: 
  goto -> bb224
  using: 
bb223:
  _531 = ((*_3).0: i32)
  using: _3@Phi(bb227)
  _532 = const 3_i32
  using: 
  _530 = Ge(move _531, move _532)
  using: _531@Mir(bb223[0]), _532@Mir(bb223[1])
  _516 = move _530
  using: _530@Mir(bb223[2])
  goto -> bb224
  using: 
bb224:
  _512 = move _516
  using: _516@Phi(bb224)
  goto -> bb221
  using: 
bb225:
  _517 = const true
  using: 
  goto -> bb227
  using: 
bb226:
  _524 = _297
  using: _297@Mir(bb126[2])
  switchInt(move _524) -> [0: bb235, otherwise: bb234]
  using: _524@Mir(bb226[0])
bb227:
  switchInt(move _517) -> [0: bb223, otherwise: bb222]
  using: _517@Phi(bb227)
bb228:
  _518 = const false
  using: 
  goto -> bb230
  using: 
bb229:
  _521 = _500
  using: _500@Mir(bb216[0])
  _520 = Eq(move _521, const 0_i32)
  using: _521@Mir(bb229[0])
  _518 = move _520
  using: _520@Mir(bb229[1])
  goto -> bb230
  using: 
bb230:
  switchInt(move _518) -> [0: bb226, otherwise: bb225]
  using: _518@Phi(bb230)
bb231:
  _522 = const false
  using: 
  goto -> bb233
  using: 
bb232:
  _528 = ((*_3).0: i32)
  using: _3@Phi(bb216)
  _529 = const 2_i32
  using: 
  _527 = Ge(move _528, move _529)
  using: _528@Mir(bb232[0]), _529@Mir(bb232[1])
  _522 = move _527
  using: _527@Mir(bb232[2])
  goto -> bb233
  using: 
bb233:
  _517 = move _522
  using: _522@Phi(bb233)
  goto -> bb227
  using: 
bb234:
  _523 = const false
  using: 
  goto -> bb236
  using: 
bb235:
  _526 = _500
  using: _500@Phi(bb230)
  _525 = Ne(move _526, const 0_i32)
  using: _526@Mir(bb235[0])
  _523 = move _525
  using: _525@Mir(bb235[1])
  goto -> bb236
  using: 
bb236:
  switchInt(move _523) -> [0: bb231, otherwise: bb232]
  using: _523@Phi(bb236)
bb237:
  _537 = _355
  using: _355@Phi(bb213)
  _538 = const u64::MAX
  using: 
  _536 = Eq(move _537, move _538)
  using: _537@Mir(bb237[0]), _538@Mir(bb237[1])
  switchInt(move _536) -> [0: bb239, otherwise: bb238]
  using: _536@Mir(bb237[2])
bb238:
  _535 = const true
  using: 
  goto -> bb240
  using: 
bb239:
  _540 = ((*_3).1: i32)
  using: _3@Phi(bb221)
  _539 = Ne(move _540, const 0_i32)
  using: _540@Mir(bb239[0])
  _535 = move _539
  using: _539@Mir(bb239[1])
  goto -> bb240
  using: 
bb240:
  switchInt(move _535) -> [0: bb242, otherwise: bb241]
  using: _535@Phi(bb240)
bb241:
  _534 = _1
  using: _1@Entry
  goto -> bb243
  using: 
bb242:
  _541 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Phi(bb240)
  _543 = _479
  using: _479@Phi(bb216)
  _542 = move _543 as isize (IntToInt)
  using: _543@Mir(bb242[1])
  _534 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _541, move _542) -> bb243
  using: _541@Mir(bb242[0]), _542@Mir(bb242[2])
bb243:
  _546 = _500
  using: _500@Phi(bb221)
  switchInt(move _546) -> [0: bb245, otherwise: bb244]
  using: _546@Mir(bb243[0])
bb244:
  _549 = const b"\x1b[0;35m\x00"
  using: 
  _548 = &raw const (*_549)
  using: _549@Mir(bb244[0])
  _547 = move _548 as *const u8 (Pointer(ArrayToPointer))
  using: _548@Mir(bb244[1])
  _545 = move _547 as *const i8 (PtrToPtr)
  using: _547@Mir(bb244[2])
  goto -> bb248
  using: 
bb245:
  _550 = _297
  using: _297@Phi(bb221)
  switchInt(move _550) -> [0: bb247, otherwise: bb246]
  using: _550@Mir(bb245[0])
bb246:
  _553 = const b"\x1b[0;34m\x00"
  using: 
  _552 = &raw const (*_553)
  using: _553@Mir(bb246[0])
  _551 = move _552 as *const u8 (Pointer(ArrayToPointer))
  using: _552@Mir(bb246[1])
  _545 = move _551 as *const i8 (PtrToPtr)
  using: _551@Mir(bb246[2])
  goto -> bb248
  using: 
bb247:
  _556 = const b"\x1b[1;36m\x00"
  using: 
  _555 = &raw const (*_556)
  using: _556@Mir(bb247[0])
  _554 = move _555 as *const u8 (Pointer(ArrayToPointer))
  using: _555@Mir(bb247[1])
  _545 = move _554 as *const i8 (PtrToPtr)
  using: _554@Mir(bb247[2])
  goto -> bb248
  using: 
bb248:
  _544 = move _545 as *mut i8 (PtrToPtr)
  using: _545@Phi(bb248)
  _559 = _500
  using: _500@Phi(bb221)
  switchInt(move _559) -> [0: bb250, otherwise: bb249]
  using: _559@Mir(bb248[1])
bb249:
  _562 = const b"\x1b[0;35m\x00"
  using: 
  _561 = &raw const (*_562)
  using: _562@Mir(bb249[0])
  _560 = move _561 as *const u8 (Pointer(ArrayToPointer))
  using: _561@Mir(bb249[1])
  _558 = move _560 as *const i8 (PtrToPtr)
  using: _560@Mir(bb249[2])
  goto -> bb253
  using: 
bb250:
  _563 = _297
  using: _297@Phi(bb248)
  switchInt(move _563) -> [0: bb252, otherwise: bb251]
  using: _563@Mir(bb250[0])
bb251:
  _566 = const b"\x1b[0;34m\x00"
  using: 
  _565 = &raw const (*_566)
  using: _566@Mir(bb251[0])
  _564 = move _565 as *const u8 (Pointer(ArrayToPointer))
  using: _565@Mir(bb251[1])
  _558 = move _564 as *const i8 (PtrToPtr)
  using: _564@Mir(bb251[2])
  goto -> bb253
  using: 
bb252:
  _569 = const b"\x1b[0;36m\x00"
  using: 
  _568 = &raw const (*_569)
  using: _569@Mir(bb252[0])
  _567 = move _568 as *const u8 (Pointer(ArrayToPointer))
  using: _568@Mir(bb252[1])
  _558 = move _567 as *const i8 (PtrToPtr)
  using: _567@Mir(bb252[2])
  goto -> bb253
  using: 
bb253:
  _557 = move _558 as *mut i8 (PtrToPtr)
  using: _558@Phi(bb253)
  _572 = _297
  using: _297@Phi(bb253)
  switchInt(move _572) -> [0: bb255, otherwise: bb254]
  using: _572@Mir(bb253[1])
bb254:
  _571 = const false
  using: 
  goto -> bb256
  using: 
bb255:
  _574 = _500
  using: _500@Phi(bb221)
  _573 = Eq(move _574, const 0_i32)
  using: _574@Mir(bb255[0])
  _571 = move _573
  using: _573@Mir(bb255[1])
  goto -> bb256
  using: 
bb256:
  _570 = move _571 as i32 (IntToInt)
  using: _571@Phi(bb256)
  _576 = _2
  using: _2@Entry
  _577 = _534
  using: _534@Phi(bb243)
  _578 = _544
  using: _544@Mir(bb248[0])
  _579 = _557
  using: _557@Mir(bb253[0])
  _580 = _570
  using: _570@Mir(bb256[0])
  _581 = _5
  using: _5@Entry
  _582 = _3
  using: _3@Phi(bb243)
  _575 = src::libtree::print_line(move _576, move _577, move _578, move _579, move _580, move _581, move _582) -> bb257
  using: _576@Mir(bb256[1]), _577@Mir(bb256[2]), _578@Mir(bb256[3]), _579@Mir(bb256[4]), _580@Mir(bb256[5]), _581@Mir(bb256[6]), _582@Mir(bb256[7])
bb257:
  _583 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _583
  using: _3@Phi(bb243), _583@Mir(bb257[0])
  _585 = _6
  using: _6@Phi(bb213)
  _584 = src::libtree::fclose(move _585) -> bb258
  using: _585@Mir(bb257[2])
bb258:
  _587 = &raw mut _356
  using: _356@Phi(bb148)
  _586 = src::libtree::small_vec_u64_free(move _587) -> bb259
  using: _587@Mir(bb258[0])
bb259:
  _0 = const 0_i32
  using: 
  goto -> bb391
  using: 
bb260:
  _588 = [const 0_i8; 4096]
  using: 
  _591 = _1
  using: _1@Phi(bb243)
  _590 = move _591 as *const i8 (Pointer(MutToConstPointer))
  using: _591@Mir(bb260[1])
  _592 = const 47_i32
  using: 
  _589 = src::libtree::strrchr(move _590, move _592) -> bb261
  using: _590@Mir(bb260[2]), _592@Mir(bb260[3])
bb261:
  _595 = _589
  using: _589@Mir(bb260[4])
  _594 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _595) -> bb262
  using: _595@Mir(bb261[0])
bb262:
  _593 = Not(move _594)
  using: _594@Mir(bb261[1])
  switchInt(move _593) -> [0: bb268, otherwise: bb263]
  using: _593@Mir(bb262[0])
bb263:
  _599 = _589
  using: _589@Mir(bb260[4])
  _601 = _1
  using: _1@Phi(bb243)
  _600 = move _601 as *const i8 (Pointer(MutToConstPointer))
  using: _601@Mir(bb263[1])
  _598 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _599, move _600) -> bb264
  using: _599@Mir(bb263[0]), _600@Mir(bb263[2])
bb264:
  _597 = move _598 as i64 (IntToInt)
  using: _598@Mir(bb263[3])
  _596 = move _597 as u64 (IntToInt)
  using: _597@Mir(bb264[0])
  _606 = &mut _588
  using: _588@Mir(bb260[0])
  _605 = move _606 as &mut [i8] (Pointer(Unsize))
  using: _606@Mir(bb264[2])
  _604 = core::slice::<impl [i8]>::as_mut_ptr(move _605) -> bb265
  using: _605@Mir(bb264[3])
bb265:
  _603 = move _604 as *mut libc::c_void (PtrToPtr)
  using: _604@Mir(bb264[4])
  _608 = _1
  using: _1@Phi(bb243)
  _607 = move _608 as *const libc::c_void (PtrToPtr)
  using: _608@Mir(bb265[1])
  _609 = _596
  using: _596@Mir(bb264[1])
  _602 = src::libtree::memcpy(move _603, move _607, move _609) -> bb266
  using: _603@Mir(bb265[0]), _607@Mir(bb265[2]), _609@Mir(bb265[3])
bb266:
  _610 = const 0_i32
  using: 
  _612 = _596
  using: _596@Mir(bb264[1])
  _611 = move _612 as usize (IntToInt)
  using: _612@Mir(bb266[1])
  _613 = const 4096_usize
  using: 
  _614 = Lt(_611, _613)
  using: _611@Mir(bb266[2]), _613@Mir(bb266[3])
  assert(move _614, "index out of bounds: the length is {} but the index is {}", move _613, _611) -> bb267
  using: _614@Entry, _613@Entry, _611@Entry
bb267:
  _588[_611] = move _610 as i8 (IntToInt)
  using: _611@Mir(bb266[2]), _610@Mir(bb266[0])
  goto -> bb270
  using: 
bb268:
  _617 = _589
  using: _589@Mir(bb260[4])
  _616 = move _617 as usize (PointerExposeAddress)
  using: _617@Mir(bb268[0])
  _615 = Eq(move _616, const 0_usize)
  using: _616@Mir(bb268[1])
  assume(move _615)
  using: _615@Mir(bb268[2])
  _622 = &mut _588
  using: _588@Mir(bb260[0])
  _621 = move _622 as &mut [i8] (Pointer(Unsize))
  using: _622@Mir(bb268[4])
  _620 = core::slice::<impl [i8]>::as_mut_ptr(move _621) -> bb269
  using: _621@Mir(bb268[5])
bb269:
  _619 = move _620 as *mut libc::c_void (PtrToPtr)
  using: _620@Mir(bb268[6])
  _627 = const b"./\x00"
  using: 
  _626 = &raw const (*_627)
  using: _627@Mir(bb269[1])
  _625 = move _626 as *const u8 (Pointer(ArrayToPointer))
  using: _626@Mir(bb269[2])
  _624 = move _625 as *const i8 (PtrToPtr)
  using: _625@Mir(bb269[3])
  _623 = move _624 as *const libc::c_void (PtrToPtr)
  using: _624@Mir(bb269[4])
  _628 = const 3_u64
  using: 
  _618 = src::libtree::memcpy(move _619, move _623, move _628) -> bb270
  using: _619@Mir(bb269[0]), _623@Mir(bb269[5]), _628@Mir(bb269[6])
bb270:
  _630 = _353
  using: _353@Phi(bb148)
  _631 = const u64::MAX
  using: 
  _629 = Eq(move _630, move _631)
  using: _630@Mir(bb270[0]), _631@Mir(bb270[1])
  switchInt(move _629) -> [0: bb273, otherwise: bb271]
  using: _629@Mir(bb270[2])
bb271:
  _632 = const u64::MAX
  using: 
  _634 = _2
  using: _2@Entry
  _633 = move _634 as usize (IntToInt)
  using: _634@Mir(bb271[1])
  _635 = const 32_usize
  using: 
  _636 = Lt(_633, _635)
  using: _633@Mir(bb271[2]), _635@Mir(bb271[3])
  assert(move _636, "index out of bounds: the length is {} but the index is {}", move _635, _633) -> bb272
  using: _636@Entry, _635@Entry, _633@Entry
bb272:
  ((*_3).11: [u64; 32])[_633] = move _632
  using: _3@Phi(bb243), _633@Mir(bb271[2]), _632@Mir(bb271[0])
  goto -> bb287
  using: 
bb273:
  _637 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb243)
  _639 = _2
  using: _2@Entry
  _638 = move _639 as usize (IntToInt)
  using: _639@Mir(bb273[1])
  _640 = const 32_usize
  using: 
  _641 = Lt(_638, _640)
  using: _638@Mir(bb273[2]), _640@Mir(bb273[3])
  assert(move _641, "index out of bounds: the length is {} but the index is {}", move _640, _638) -> bb274
  using: _641@Entry, _640@Entry, _638@Entry
bb274:
  ((*_3).11: [u64; 32])[_638] = move _637
  using: _3@Phi(bb243), _638@Mir(bb273[2]), _637@Mir(bb273[0])
  _644 = _6
  using: _6@Phi(bb213)
  _647 = _462
  using: _462@Phi(bb213)
  _648 = _353
  using: _353@Phi(bb148)
  _646 = core::num::<impl u64>::wrapping_add(move _647, move _648) -> bb275
  using: _647@Mir(bb274[2]), _648@Mir(bb274[3])
bb275:
  _645 = move _646 as i64 (IntToInt)
  using: _646@Mir(bb274[4])
  _649 = const 0_i32
  using: 
  _643 = src::libtree::fseek(move _644, move _645, move _649) -> bb276
  using: _644@Mir(bb274[1]), _645@Mir(bb275[0]), _649@Mir(bb275[1])
bb276:
  _650 = const 0_i32
  using: 
  _642 = Ne(move _643, move _650)
  using: _643@Mir(bb275[2]), _650@Mir(bb276[0])
  switchInt(move _642) -> [0: bb280, otherwise: bb277]
  using: _642@Mir(bb276[1])
bb277:
  _651 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _651
  using: _3@Phi(bb243), _651@Mir(bb277[0])
  _653 = _6
  using: _6@Phi(bb213)
  _652 = src::libtree::fclose(move _653) -> bb278
  using: _653@Mir(bb277[2])
bb278:
  _655 = &raw mut _356
  using: _356@Phi(bb148)
  _654 = src::libtree::small_vec_u64_free(move _655) -> bb279
  using: _655@Mir(bb278[0])
bb279:
  _0 = const 25_i32
  using: 
  goto -> bb391
  using: 
bb280:
  _657 = &raw mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Phi(bb243)
  _658 = _6
  using: _6@Phi(bb213)
  _656 = src::libtree::string_table_copy_from_file(move _657, move _658) -> bb281
  using: _657@Mir(bb280[0]), _658@Mir(bb280[1])
bb281:
  _659 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb243)
  _661 = _3
  using: _3@Phi(bb243)
  _664 = _2
  using: _2@Entry
  _663 = move _664 as usize (IntToInt)
  using: _664@Mir(bb281[2])
  _665 = const 32_usize
  using: 
  _666 = Lt(_663, _665)
  using: _663@Mir(bb281[3]), _665@Mir(bb281[4])
  assert(move _666, "index out of bounds: the length is {} but the index is {}", move _665, _663) -> bb282
  using: _666@Entry, _665@Entry, _663@Entry
bb282:
  _662 = ((*_3).11: [u64; 32])[_663]
  using: _3@Phi(bb243), _663@Mir(bb281[3])
  _670 = &mut _588
  using: _588@Phi(bb270)
  _669 = move _670 as &mut [i8] (Pointer(Unsize))
  using: _670@Mir(bb282[1])
  _668 = core::slice::<impl [i8]>::as_mut_ptr(move _669) -> bb283
  using: _669@Mir(bb282[2])
bb283:
  _667 = move _668 as *const i8 (Pointer(MutToConstPointer))
  using: _668@Mir(bb282[3])
  _660 = src::libtree::interpolate_variables(move _661, move _662, move _667) -> bb284
  using: _661@Mir(bb281[1]), _662@Mir(bb282[0]), _667@Mir(bb283[0])
bb284:
  switchInt(move _660) -> [0: bb287, otherwise: bb285]
  using: _660@Mir(bb283[1])
bb285:
  _671 = _659
  using: _659@Mir(bb281[0])
  _673 = _2
  using: _2@Entry
  _672 = move _673 as usize (IntToInt)
  using: _673@Mir(bb285[1])
  _674 = const 32_usize
  using: 
  _675 = Lt(_672, _674)
  using: _672@Mir(bb285[2]), _674@Mir(bb285[3])
  assert(move _675, "index out of bounds: the length is {} but the index is {}", move _674, _672) -> bb286
  using: _675@Entry, _674@Entry, _672@Entry
bb286:
  ((*_3).11: [u64; 32])[_672] = move _671
  using: _3@Phi(bb243), _672@Mir(bb285[2]), _671@Mir(bb285[0])
  goto -> bb287
  using: 
bb287:
  _676 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb287)
  _678 = _354
  using: _354@Phi(bb148)
  _679 = const u64::MAX
  using: 
  _677 = Ne(move _678, move _679)
  using: _678@Mir(bb287[1]), _679@Mir(bb287[2])
  switchInt(move _677) -> [0: bb299, otherwise: bb288]
  using: _677@Mir(bb287[3])
bb288:
  _682 = _6
  using: _6@Phi(bb287)
  _685 = _462
  using: _462@Phi(bb287)
  _686 = _354
  using: _354@Phi(bb148)
  _684 = core::num::<impl u64>::wrapping_add(move _685, move _686) -> bb289
  using: _685@Mir(bb288[1]), _686@Mir(bb288[2])
bb289:
  _683 = move _684 as i64 (IntToInt)
  using: _684@Mir(bb288[3])
  _687 = const 0_i32
  using: 
  _681 = src::libtree::fseek(move _682, move _683, move _687) -> bb290
  using: _682@Mir(bb288[0]), _683@Mir(bb289[0]), _687@Mir(bb289[1])
bb290:
  _688 = const 0_i32
  using: 
  _680 = Ne(move _681, move _688)
  using: _681@Mir(bb289[2]), _688@Mir(bb290[0])
  switchInt(move _680) -> [0: bb294, otherwise: bb291]
  using: _680@Mir(bb290[1])
bb291:
  _689 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _689
  using: _3@Phi(bb287), _689@Mir(bb291[0])
  _691 = _6
  using: _6@Phi(bb287)
  _690 = src::libtree::fclose(move _691) -> bb292
  using: _691@Mir(bb291[2])
bb292:
  _693 = &raw mut _356
  using: _356@Phi(bb148)
  _692 = src::libtree::small_vec_u64_free(move _693) -> bb293
  using: _693@Mir(bb292[0])
bb293:
  _0 = const 26_i32
  using: 
  goto -> bb391
  using: 
bb294:
  _695 = &raw mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Phi(bb287)
  _696 = _6
  using: _6@Phi(bb287)
  _694 = src::libtree::string_table_copy_from_file(move _695, move _696) -> bb295
  using: _695@Mir(bb294[0]), _696@Mir(bb294[1])
bb295:
  _697 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb287)
  _699 = _3
  using: _3@Phi(bb287)
  _700 = _676
  using: _676@Mir(bb287[0])
  _704 = &mut _588
  using: _588@Phi(bb287)
  _703 = move _704 as &mut [i8] (Pointer(Unsize))
  using: _704@Mir(bb295[3])
  _702 = core::slice::<impl [i8]>::as_mut_ptr(move _703) -> bb296
  using: _703@Mir(bb295[4])
bb296:
  _701 = move _702 as *const i8 (Pointer(MutToConstPointer))
  using: _702@Mir(bb295[5])
  _698 = src::libtree::interpolate_variables(move _699, move _700, move _701) -> bb297
  using: _699@Mir(bb295[1]), _700@Mir(bb295[2]), _701@Mir(bb296[0])
bb297:
  switchInt(move _698) -> [0: bb299, otherwise: bb298]
  using: _698@Mir(bb296[1])
bb298:
  _705 = _697
  using: _697@Mir(bb295[0])
  _676 = move _705
  using: _705@Mir(bb298[0])
  goto -> bb299
  using: 
bb299:
  _707 = [const 0_u64; 16]
  using: 
  _708 = const {0x0 as *mut u64}
  using: 
  Deinit(_706)
  using: 
  (_706.0: [u64; 16]) = move _707
  using: _707@Mir(bb299[0])
  (_706.1: *mut u64) = move _708
  using: _708@Mir(bb299[1])
  (_706.2: u64) = const 0_u64
  using: 
  (_706.3: u64) = const 0_u64
  using: 
  _710 = &raw mut _706
  using: _706@Mir(bb299[2])
  _709 = src::libtree::small_vec_u64_init(move _710) -> bb300
  using: _710@Mir(bb299[7])
bb300:
  _711 = const 0_u64
  using: 
  goto -> bb301
  using: 
bb301:
  _713 = _711
  using: _711@Phi(bb301)
  _714 = (_356.2: u64)
  using: _356@Phi(bb301)
  _712 = Lt(move _713, move _714)
  using: _713@Mir(bb301[0]), _714@Mir(bb301[1])
  switchInt(move _712) -> [0: bb314, otherwise: bb302]
  using: _712@Mir(bb301[2])
bb302:
  _716 = &raw mut _706
  using: _706@Phi(bb301)
  _717 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Phi(bb301)
  _715 = src::libtree::small_vec_u64_append(move _716, move _717) -> bb303
  using: _716@Mir(bb302[0]), _717@Mir(bb302[1])
bb303:
  _720 = _6
  using: _6@Phi(bb301)
  _723 = _462
  using: _462@Phi(bb301)
  _726 = (_356.1: *mut u64)
  using: _356@Phi(bb301)
  _728 = _711
  using: _711@Phi(bb301)
  _727 = move _728 as isize (IntToInt)
  using: _728@Mir(bb303[3])
  _725 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _726, move _727) -> bb304
  using: _726@Mir(bb303[2]), _727@Mir(bb303[4])
bb304:
  _724 = (*_725)
  using: _725@Mir(bb303[5])
  _722 = core::num::<impl u64>::wrapping_add(move _723, move _724) -> bb305
  using: _723@Mir(bb303[1]), _724@Mir(bb304[0])
bb305:
  _721 = move _722 as i64 (IntToInt)
  using: _722@Mir(bb304[1])
  _729 = const 0_i32
  using: 
  _719 = src::libtree::fseek(move _720, move _721, move _729) -> bb306
  using: _720@Mir(bb303[0]), _721@Mir(bb305[0]), _729@Mir(bb305[1])
bb306:
  _730 = const 0_i32
  using: 
  _718 = Ne(move _719, move _730)
  using: _719@Mir(bb305[2]), _730@Mir(bb306[0])
  switchInt(move _718) -> [0: bb311, otherwise: bb307]
  using: _718@Mir(bb306[1])
bb307:
  _731 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _731
  using: _3@Phi(bb301), _731@Mir(bb307[0])
  _733 = _6
  using: _6@Phi(bb301)
  _732 = src::libtree::fclose(move _733) -> bb308
  using: _733@Mir(bb307[2])
bb308:
  _735 = &raw mut _706
  using: _706@Phi(bb301)
  _734 = src::libtree::small_vec_u64_free(move _735) -> bb309
  using: _735@Mir(bb308[0])
bb309:
  _737 = &raw mut _356
  using: _356@Phi(bb301)
  _736 = src::libtree::small_vec_u64_free(move _737) -> bb310
  using: _737@Mir(bb309[0])
bb310:
  _0 = const 27_i32
  using: 
  goto -> bb391
  using: 
bb311:
  _739 = &raw mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Phi(bb301)
  _740 = _6
  using: _6@Phi(bb301)
  _738 = src::libtree::string_table_copy_from_file(move _739, move _740) -> bb312
  using: _739@Mir(bb311[0]), _740@Mir(bb311[1])
bb312:
  _742 = _711
  using: _711@Phi(bb301)
  _741 = core::num::<impl u64>::wrapping_add(move _742, const 1_u64) -> bb313
  using: _742@Mir(bb312[0])
bb313:
  _711 = move _741
  using: _741@Mir(bb312[1])
  goto -> bb301
  using: 
bb314:
  _744 = _6
  using: _6@Phi(bb301)
  _743 = src::libtree::fclose(move _744) -> bb315
  using: _744@Mir(bb314[0])
bb315:
  _748 = _355
  using: _355@Phi(bb213)
  _749 = const u64::MAX
  using: 
  _747 = Eq(move _748, move _749)
  using: _748@Mir(bb315[0]), _749@Mir(bb315[1])
  switchInt(move _747) -> [0: bb317, otherwise: bb316]
  using: _747@Mir(bb315[2])
bb316:
  _746 = const true
  using: 
  goto -> bb318
  using: 
bb317:
  _751 = ((*_3).1: i32)
  using: _3@Phi(bb301)
  _750 = Ne(move _751, const 0_i32)
  using: _751@Mir(bb317[0])
  _746 = move _750
  using: _750@Mir(bb317[1])
  goto -> bb318
  using: 
bb318:
  switchInt(move _746) -> [0: bb320, otherwise: bb319]
  using: _746@Phi(bb318)
bb319:
  _745 = _1
  using: _1@Phi(bb270)
  goto -> bb321
  using: 
bb320:
  _752 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Phi(bb318)
  _754 = _479
  using: _479@Phi(bb243)
  _753 = move _754 as isize (IntToInt)
  using: _754@Mir(bb320[1])
  _745 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _752, move _753) -> bb321
  using: _752@Mir(bb320[0]), _753@Mir(bb320[2])
bb321:
  _757 = _500
  using: _500@Phi(bb256)
  switchInt(move _757) -> [0: bb323, otherwise: bb322]
  using: _757@Mir(bb321[0])
bb322:
  _760 = const b"\x1b[0;35m\x00"
  using: 
  _759 = &raw const (*_760)
  using: _760@Mir(bb322[0])
  _758 = move _759 as *const u8 (Pointer(ArrayToPointer))
  using: _759@Mir(bb322[1])
  _756 = move _758 as *const i8 (PtrToPtr)
  using: _758@Mir(bb322[2])
  goto -> bb326
  using: 
bb323:
  _761 = _297
  using: _297@Phi(bb253)
  switchInt(move _761) -> [0: bb325, otherwise: bb324]
  using: _761@Mir(bb323[0])
bb324:
  _764 = const b"\x1b[0;34m\x00"
  using: 
  _763 = &raw const (*_764)
  using: _764@Mir(bb324[0])
  _762 = move _763 as *const u8 (Pointer(ArrayToPointer))
  using: _763@Mir(bb324[1])
  _756 = move _762 as *const i8 (PtrToPtr)
  using: _762@Mir(bb324[2])
  goto -> bb326
  using: 
bb325:
  _767 = const b"\x1b[1;36m\x00"
  using: 
  _766 = &raw const (*_767)
  using: _767@Mir(bb325[0])
  _765 = move _766 as *const u8 (Pointer(ArrayToPointer))
  using: _766@Mir(bb325[1])
  _756 = move _765 as *const i8 (PtrToPtr)
  using: _765@Mir(bb325[2])
  goto -> bb326
  using: 
bb326:
  _755 = move _756 as *mut i8 (PtrToPtr)
  using: _756@Phi(bb326)
  _770 = _500
  using: _500@Phi(bb256)
  switchInt(move _770) -> [0: bb328, otherwise: bb327]
  using: _770@Mir(bb326[1])
bb327:
  _773 = const b"\x1b[0;35m\x00"
  using: 
  _772 = &raw const (*_773)
  using: _773@Mir(bb327[0])
  _771 = move _772 as *const u8 (Pointer(ArrayToPointer))
  using: _772@Mir(bb327[1])
  _769 = move _771 as *const i8 (PtrToPtr)
  using: _771@Mir(bb327[2])
  goto -> bb331
  using: 
bb328:
  _774 = _297
  using: _297@Phi(bb326)
  switchInt(move _774) -> [0: bb330, otherwise: bb329]
  using: _774@Mir(bb328[0])
bb329:
  _777 = const b"\x1b[0;34m\x00"
  using: 
  _776 = &raw const (*_777)
  using: _777@Mir(bb329[0])
  _775 = move _776 as *const u8 (Pointer(ArrayToPointer))
  using: _776@Mir(bb329[1])
  _769 = move _775 as *const i8 (PtrToPtr)
  using: _775@Mir(bb329[2])
  goto -> bb331
  using: 
bb330:
  _780 = const b"\x1b[0;36m\x00"
  using: 
  _779 = &raw const (*_780)
  using: _780@Mir(bb330[0])
  _778 = move _779 as *const u8 (Pointer(ArrayToPointer))
  using: _779@Mir(bb330[1])
  _769 = move _778 as *const i8 (PtrToPtr)
  using: _778@Mir(bb330[2])
  goto -> bb331
  using: 
bb331:
  _768 = move _769 as *mut i8 (PtrToPtr)
  using: _769@Phi(bb331)
  _783 = _297
  using: _297@Phi(bb331)
  switchInt(move _783) -> [0: bb333, otherwise: bb332]
  using: _783@Mir(bb331[1])
bb332:
  _782 = const false
  using: 
  goto -> bb334
  using: 
bb333:
  _785 = _500
  using: _500@Phi(bb256)
  _784 = Eq(move _785, const 0_i32)
  using: _785@Mir(bb333[0])
  _782 = move _784
  using: _784@Mir(bb333[1])
  goto -> bb334
  using: 
bb334:
  _781 = move _782 as i32 (IntToInt)
  using: _782@Phi(bb334)
  _787 = _2
  using: _2@Phi(bb287)
  _788 = _745
  using: _745@Phi(bb321)
  _789 = _755
  using: _755@Mir(bb326[0])
  _790 = _768
  using: _768@Mir(bb331[0])
  _791 = _781
  using: _781@Mir(bb334[0])
  _792 = _5
  using: _5@Entry
  _793 = _3
  using: _3@Phi(bb321)
  _786 = src::libtree::print_line(move _787, move _788, move _789, move _790, move _791, move _792, move _793) -> bb335
  using: _787@Mir(bb334[1]), _788@Mir(bb334[2]), _789@Mir(bb334[3]), _790@Mir(bb334[4]), _791@Mir(bb334[5]), _792@Mir(bb334[6]), _793@Mir(bb334[7])
bb335:
  _794 = const 0_i32
  using: 
  _795 = (_706.2: u64)
  using: _706@Phi(bb301)
  _797 = _795
  using: _795@Mir(bb335[1])
  switchInt(move _797) -> [0: bb336, otherwise: bb337]
  using: _797@Mir(bb335[2])
bb336:
  _796 = const false
  using: 
  goto -> bb338
  using: 
bb337:
  _799 = ((*_3).0: i32)
  using: _3@Phi(bb321)
  _800 = const 0_i32
  using: 
  _798 = Eq(move _799, move _800)
  using: _799@Mir(bb337[0]), _800@Mir(bb337[1])
  _796 = move _798
  using: _798@Mir(bb337[2])
  goto -> bb338
  using: 
bb338:
  switchInt(move _796) -> [0: bb340, otherwise: bb339]
  using: _796@Phi(bb338)
bb339:
  _802 = &raw mut _795
  using: _795@Mir(bb335[1])
  _803 = &raw mut _706
  using: _706@Phi(bb301)
  _804 = _3
  using: _3@Phi(bb338)
  _801 = src::libtree::apply_exclude_list(move _802, move _803, move _804) -> bb340
  using: _802@Mir(bb339[0]), _803@Mir(bb339[1]), _804@Mir(bb339[2])
bb340:
  _805 = _795
  using: _795@Phi(bb340)
  switchInt(move _805) -> [0: bb343, otherwise: bb341]
  using: _805@Mir(bb340[0])
bb341:
  _807 = &raw mut _795
  using: _795@Phi(bb340)
  _808 = &raw mut _706
  using: _706@Phi(bb340)
  _809 = _2
  using: _2@Phi(bb287)
  _810 = _3
  using: _3@Phi(bb340)
  _811 = _81
  using: _81@Phi(bb148)
  _806 = src::libtree::check_absolute_paths(move _807, move _808, move _809, move _810, move _811) -> bb342
  using: _807@Mir(bb341[0]), _808@Mir(bb341[1]), _809@Mir(bb341[2]), _810@Mir(bb341[3]), _811@Mir(bb341[4])
bb342:
  _794 = BitOr(_794, move _806)
  using: _806@Mir(bb341[5])
  goto -> bb343
  using: 
bb343:
  _813 = _354
  using: _354@Phi(bb299)
  _814 = const u64::MAX
  using: 
  _812 = Eq(move _813, move _814)
  using: _813@Mir(bb343[0]), _814@Mir(bb343[1])
  switchInt(move _812) -> [0: bb356, otherwise: bb344]
  using: _812@Mir(bb343[2])
bb344:
  _816 = _2
  using: _2@Phi(bb343)
  _815 = move _816 as i32 (IntToInt)
  using: _816@Mir(bb344[0])
  goto -> bb345
  using: 
bb345:
  _819 = _815
  using: _815@Phi(bb345)
  _820 = const 0_i32
  using: 
  _818 = Ge(move _819, move _820)
  using: _819@Mir(bb345[0]), _820@Mir(bb345[1])
  switchInt(move _818) -> [0: bb346, otherwise: bb347]
  using: _818@Mir(bb345[2])
bb346:
  _817 = const false
  using: 
  goto -> bb348
  using: 
bb347:
  _822 = _795
  using: _795@Phi(bb345)
  _821 = Ne(move _822, const 0_u64)
  using: _822@Mir(bb347[0])
  _817 = move _821
  using: _821@Mir(bb347[1])
  goto -> bb348
  using: 
bb348:
  switchInt(move _817) -> [0: bb356, otherwise: bb349]
  using: _817@Phi(bb348)
bb349:
  _827 = _815
  using: _815@Phi(bb345)
  _826 = move _827 as usize (IntToInt)
  using: _827@Mir(bb349[0])
  _828 = const 32_usize
  using: 
  _829 = Lt(_826, _828)
  using: _826@Mir(bb349[1]), _828@Mir(bb349[2])
  assert(move _829, "index out of bounds: the length is {} but the index is {}", move _828, _826) -> bb350
  using: _829@Entry, _828@Entry, _826@Entry
bb350:
  _825 = ((*_3).11: [u64; 32])[_826]
  using: _3@Phi(bb345), _826@Mir(bb349[1])
  _830 = const u64::MAX
  using: 
  _824 = Eq(move _825, move _830)
  using: _825@Mir(bb350[0]), _830@Mir(bb350[1])
  _823 = Not(move _824)
  using: _824@Mir(bb350[2])
  switchInt(move _823) -> [0: bb354, otherwise: bb351]
  using: _823@Mir(bb350[3])
bb351:
  _835 = _815
  using: _815@Phi(bb345)
  _834 = move _835 as u64 (IntToInt)
  using: _835@Mir(bb351[0])
  Deinit(_833)
  using: 
  (_833.0: u32) = const _
  using: 
  (_833.1: u64) = move _834
  using: _834@Mir(bb351[1])
  _832 = _833
  using: _833@Mir(bb351[2])
  _838 = _815
  using: _815@Phi(bb345)
  _837 = move _838 as usize (IntToInt)
  using: _838@Mir(bb351[6])
  _839 = const 32_usize
  using: 
  _840 = Lt(_837, _839)
  using: _837@Mir(bb351[7]), _839@Mir(bb351[8])
  assert(move _840, "index out of bounds: the length is {} but the index is {}", move _839, _837) -> bb352
  using: _840@Entry, _839@Entry, _837@Entry
bb352:
  _836 = ((*_3).11: [u64; 32])[_837]
  using: _3@Phi(bb345), _837@Mir(bb351[7])
  _841 = &raw mut _795
  using: _795@Phi(bb348)
  _842 = &raw mut _706
  using: _706@Phi(bb345)
  _843 = _2
  using: _2@Phi(bb345)
  _844 = _3
  using: _3@Phi(bb345)
  _845 = _81
  using: _81@Phi(bb345)
  _831 = src::libtree::check_search_paths(move _832, move _836, move _841, move _842, move _843, move _844, move _845) -> bb353
  using: _832@Mir(bb351[5]), _836@Mir(bb352[0]), _841@Mir(bb352[1]), _842@Mir(bb352[2]), _843@Mir(bb352[3]), _844@Mir(bb352[4]), _845@Mir(bb352[5])
bb353:
  _794 = BitOr(_794, move _831)
  using: _831@Mir(bb352[6])
  goto -> bb354
  using: 
bb354:
  _846 = CheckedSub(_815, const 1_i32)
  using: _815@Phi(bb354)
  assert(!move (_846.1: bool), "attempt to compute `{} - {}`, which would overflow", _815, const 1_i32) -> bb355
  using: _846@Entry, _815@Entry
bb355:
  _815 = move (_846.0: i32)
  using: _846@Mir(bb354[0])
  goto -> bb345
  using: 
bb356:
  _848 = _795
  using: _795@Phi(bb356)
  switchInt(move _848) -> [0: bb357, otherwise: bb358]
  using: _848@Mir(bb356[0])
bb357:
  _847 = const false
  using: 
  goto -> bb359
  using: 
bb358:
  _850 = ((*_3).12: u64)
  using: _3@Phi(bb356)
  _851 = const u64::MAX
  using: 
  _849 = Ne(move _850, move _851)
  using: _850@Mir(bb358[0]), _851@Mir(bb358[1])
  _847 = move _849
  using: _849@Mir(bb358[2])
  goto -> bb359
  using: 
bb359:
  switchInt(move _847) -> [0: bb362, otherwise: bb360]
  using: _847@Phi(bb359)
bb360:
  Deinit(_854)
  using: 
  (_854.0: u32) = const _
  using: 
  (_854.1: u64) = const 0_u64
  using: 
  _853 = _854
  using: _854@Mir(bb360[0])
  _855 = ((*_3).12: u64)
  using: _3@Phi(bb359)
  _856 = &raw mut _795
  using: _795@Phi(bb356)
  _857 = &raw mut _706
  using: _706@Phi(bb356)
  _858 = _2
  using: _2@Phi(bb356)
  _859 = _3
  using: _3@Phi(bb359)
  _860 = _81
  using: _81@Phi(bb356)
  _852 = src::libtree::check_search_paths(move _853, move _855, move _856, move _857, move _858, move _859, move _860) -> bb361
  using: _853@Mir(bb360[3]), _855@Mir(bb360[4]), _856@Mir(bb360[5]), _857@Mir(bb360[6]), _858@Mir(bb360[7]), _859@Mir(bb360[8]), _860@Mir(bb360[9])
bb361:
  _794 = BitOr(_794, move _852)
  using: _852@Mir(bb360[10])
  goto -> bb362
  using: 
bb362:
  _862 = _795
  using: _795@Phi(bb362)
  switchInt(move _862) -> [0: bb363, otherwise: bb364]
  using: _862@Mir(bb362[0])
bb363:
  _861 = const false
  using: 
  goto -> bb365
  using: 
bb364:
  _864 = _354
  using: _354@Phi(bb299)
  _865 = const u64::MAX
  using: 
  _863 = Ne(move _864, move _865)
  using: _864@Mir(bb364[0]), _865@Mir(bb364[1])
  _861 = move _863
  using: _863@Mir(bb364[2])
  goto -> bb365
  using: 
bb365:
  switchInt(move _861) -> [0: bb368, otherwise: bb366]
  using: _861@Phi(bb365)
bb366:
  Deinit(_868)
  using: 
  (_868.0: u32) = const _
  using: 
  (_868.1: u64) = const 0_u64
  using: 
  _867 = _868
  using: _868@Mir(bb366[0])
  _869 = _676
  using: _676@Phi(bb299)
  _870 = &raw mut _795
  using: _795@Phi(bb362)
  _871 = &raw mut _706
  using: _706@Phi(bb362)
  _872 = _2
  using: _2@Phi(bb362)
  _873 = _3
  using: _3@Phi(bb362)
  _874 = _81
  using: _81@Phi(bb362)
  _866 = src::libtree::check_search_paths(move _867, move _869, move _870, move _871, move _872, move _873, move _874) -> bb367
  using: _867@Mir(bb366[3]), _869@Mir(bb366[4]), _870@Mir(bb366[5]), _871@Mir(bb366[6]), _872@Mir(bb366[7]), _873@Mir(bb366[8]), _874@Mir(bb366[9])
bb367:
  _794 = BitOr(_794, move _866)
  using: _866@Mir(bb366[10])
  goto -> bb368
  using: 
bb368:
  _876 = _795
  using: _795@Phi(bb368)
  switchInt(move _876) -> [0: bb369, otherwise: bb370]
  using: _876@Mir(bb368[0])
bb369:
  _875 = const false
  using: 
  goto -> bb371
  using: 
bb370:
  _878 = _351
  using: _351@Mir(bb175[6])
  _877 = Eq(move _878, const 0_i32)
  using: _878@Mir(bb370[0])
  _875 = move _877
  using: _877@Mir(bb370[1])
  goto -> bb371
  using: 
bb371:
  switchInt(move _875) -> [0: bb374, otherwise: bb372]
  using: _875@Phi(bb371)
bb372:
  Deinit(_881)
  using: 
  (_881.0: u32) = const _
  using: 
  (_881.1: u64) = const 0_u64
  using: 
  _880 = _881
  using: _881@Mir(bb372[0])
  _882 = ((*_3).14: u64)
  using: _3@Phi(bb368)
  _883 = &raw mut _795
  using: _795@Phi(bb368)
  _884 = &raw mut _706
  using: _706@Phi(bb368)
  _885 = _2
  using: _2@Phi(bb368)
  _886 = _3
  using: _3@Phi(bb368)
  _887 = _81
  using: _81@Phi(bb368)
  _879 = src::libtree::check_search_paths(move _880, move _882, move _883, move _884, move _885, move _886, move _887) -> bb373
  using: _880@Mir(bb372[3]), _882@Mir(bb372[4]), _883@Mir(bb372[5]), _884@Mir(bb372[6]), _885@Mir(bb372[7]), _886@Mir(bb372[8]), _887@Mir(bb372[9])
bb373:
  _794 = BitOr(_794, move _879)
  using: _879@Mir(bb372[10])
  goto -> bb374
  using: 
bb374:
  _889 = _795
  using: _795@Phi(bb374)
  switchInt(move _889) -> [0: bb375, otherwise: bb376]
  using: _889@Mir(bb374[0])
bb375:
  _888 = const false
  using: 
  goto -> bb377
  using: 
bb376:
  _891 = _351
  using: _351@Phi(bb371)
  _890 = Eq(move _891, const 0_i32)
  using: _891@Mir(bb376[0])
  _888 = move _890
  using: _890@Mir(bb376[1])
  goto -> bb377
  using: 
bb377:
  switchInt(move _888) -> [0: bb380, otherwise: bb378]
  using: _888@Phi(bb377)
bb378:
  Deinit(_894)
  using: 
  (_894.0: u32) = const _
  using: 
  (_894.1: u64) = const 0_u64
  using: 
  _893 = _894
  using: _894@Mir(bb378[0])
  _895 = ((*_3).13: u64)
  using: _3@Phi(bb374)
  _896 = &raw mut _795
  using: _795@Phi(bb374)
  _897 = &raw mut _706
  using: _706@Phi(bb374)
  _898 = _2
  using: _2@Phi(bb374)
  _899 = _3
  using: _3@Phi(bb374)
  _900 = _81
  using: _81@Phi(bb374)
  _892 = src::libtree::check_search_paths(move _893, move _895, move _896, move _897, move _898, move _899, move _900) -> bb379
  using: _893@Mir(bb378[3]), _895@Mir(bb378[4]), _896@Mir(bb378[5]), _897@Mir(bb378[6]), _898@Mir(bb378[7]), _899@Mir(bb378[8]), _900@Mir(bb378[9])
bb379:
  _794 = BitOr(_794, move _892)
  using: _892@Mir(bb378[10])
  goto -> bb380
  using: 
bb380:
  _901 = _795
  using: _795@Phi(bb380)
  switchInt(move _901) -> [0: bb388, otherwise: bb381]
  using: _901@Mir(bb380[0])
bb381:
  _903 = _2
  using: _2@Phi(bb380)
  _904 = _795
  using: _795@Phi(bb380)
  _905 = &raw mut _706
  using: _706@Phi(bb380)
  _908 = _354
  using: _354@Phi(bb365)
  _909 = const u64::MAX
  using: 
  _907 = Eq(move _908, move _909)
  using: _908@Mir(bb381[3]), _909@Mir(bb381[4])
  switchInt(move _907) -> [0: bb383, otherwise: bb382]
  using: _907@Mir(bb381[5])
bb382:
  _906 = const {0x0 as *mut i8}
  using: 
  goto -> bb384
  using: 
bb383:
  _910 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Phi(bb380)
  _912 = _676
  using: _676@Phi(bb368)
  _911 = move _912 as isize (IntToInt)
  using: _912@Mir(bb383[1])
  _906 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _910, move _911) -> bb384
  using: _910@Mir(bb383[0]), _911@Mir(bb383[2])
bb384:
  _913 = _3
  using: _3@Phi(bb384)
  _914 = _351
  using: _351@Phi(bb377)
  _902 = src::libtree::print_error(move _903, move _904, move _905, move _906, move _913, move _914) -> bb385
  using: _903@Mir(bb381[0]), _904@Mir(bb381[1]), _905@Mir(bb381[2]), _906@Phi(bb384), _913@Mir(bb384[0]), _914@Mir(bb384[1])
bb385:
  _915 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _915
  using: _3@Phi(bb384), _915@Mir(bb385[0])
  _917 = &raw mut _706
  using: _706@Phi(bb380)
  _916 = src::libtree::small_vec_u64_free(move _917) -> bb386
  using: _917@Mir(bb385[2])
bb386:
  _919 = &raw mut _356
  using: _356@Phi(bb301)
  _918 = src::libtree::small_vec_u64_free(move _919) -> bb387
  using: _919@Mir(bb386[0])
bb387:
  _0 = const 28_i32
  using: 
  goto -> bb391
  using: 
bb388:
  _920 = _18
  using: _18@Mir(bb4[0])
  (((*_3).5: src::libtree::string_table_t).1: u64) = move _920
  using: _3@Phi(bb384), _920@Mir(bb388[0])
  _922 = &raw mut _706
  using: _706@Phi(bb380)
  _921 = src::libtree::small_vec_u64_free(move _922) -> bb389
  using: _922@Mir(bb388[2])
bb389:
  _924 = &raw mut _356
  using: _356@Phi(bb301)
  _923 = src::libtree::small_vec_u64_free(move _924) -> bb390
  using: _924@Mir(bb389[0])
bb390:
  _0 = _794
  using: _794@Phi(bb380)
  goto -> bb391
  using: 
bb391:
  return
  using: _0@Phi(bb391)
rewrite call src::libtree::fopen @ workspace/libtree/src/libtree.rs:1263:20: 1263:84 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 16] is not supported
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1270:8: 1275:6 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1277:9: 1277:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1285:9: 1285:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1291:9: 1291:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1297:9: 1297:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_82) is ignored
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1311:9: 1311:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1315:9: 1315:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_107) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_106) is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1338:13: 1338:49 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1364:13: 1364:49 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1336:12: 1341:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1343:13: 1343:25 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1349:13: 1349:25 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1354:13: 1354:25 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1357:12: 1357:77 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1358:13: 1358:25 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1362:12: 1367:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1369:13: 1369:25 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1375:13: 1375:25 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1380:13: 1380:25 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1383:12: 1383:77 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1384:13: 1384:25 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_195) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_194) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_196) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_u64; 16] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_199) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_u64; 16] is not supported
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1420:17: 1420:51 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1418:16: 1423:14 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1425:17: 1425:29 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1436:19: 1436:34 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1443:17: 1443:51 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1441:16: 1446:14 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1448:17: 1448:29 (#0) by default
rewrite call core::num::<impl u32>::wrapping_add @ workspace/libtree/src/libtree.rs:1459:23: 1459:38 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_283) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i64; 3] is not supported
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1483:9: 1483:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1502:9: 1502:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1508:9: 1508:21 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1513:8: 1513:63 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1514:9: 1514:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_356) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_u64; 16] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_369) is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1539:17: 1539:50 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1537:16: 1542:14 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1544:17: 1544:29 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_389) is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1556:17: 1556:50 (#0) by default
rewrite call src::libtree::fread @ workspace/libtree/src/libtree.rs:1554:16: 1559:14 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1561:17: 1561:29 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1598:9: 1598:21 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1605:9: 1605:21 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1612:21: 1612:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1615:35: 1615:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1615:18: 1615:92 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1617:31: 1617:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1619:50: 1619:76 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1620:10: 1620:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1621:42: 1621:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:1621:10: 1621:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1628:27: 1628:47 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1626:12: 1630:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1633:13: 1633:25 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1640:55: 1640:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1650:37: 1650:71 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1677:9: 1677:21 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 4096] is not supported
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:1682:26: 1682:59 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:1684:36: 1684:61 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:1685:9: 1689:10 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:1693:9: 1697:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1705:27: 1705:46 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1703:12: 1707:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1710:13: 1710:25 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1724:27: 1724:48 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1722:12: 1726:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1729:13: 1729:25 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_706) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_u64; 16] is not supported
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1751:52: 1751:72 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1751:27: 1751:73 (#0) by default
rewrite call src::libtree::fseek @ workspace/libtree/src/libtree.rs:1749:12: 1753:10 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1756:13: 1756:25 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1762:19: 1762:34 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:1764:5: 1764:17 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1768:33: 1768:67 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_833) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_854) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_868) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_881) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_894) is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1908:41: 1908:76 (#0) by default
@DefId(0:140 ~ lib[40c5]::src::libtree::ld_conf_globbing)
bb0:
  _4 = const {0x0 as *mut *mut i8}
  using: 
  Deinit(_5)
  using: 
  discriminant(_5) = 0
  using: 
  Deinit(_6)
  using: 
  discriminant(_6) = 0
  using: 
  Deinit(_7)
  using: 
  discriminant(_7) = 0
  using: 
  Deinit(_8)
  using: 
  discriminant(_8) = 0
  using: 
  Deinit(_9)
  using: 
  discriminant(_9) = 0
  using: 
  Deinit(_3)
  using: 
  (_3.0: u64) = const 0_u64
  using: 
  (_3.1: *mut *mut i8) = move _4
  using: _4@Mir(bb0[0])
  (_3.2: u64) = const 0_u64
  using: 
  (_3.3: i32) = const 0_i32
  using: 
  (_3.4: std::option::Option<unsafe extern "C" fn(*mut libc::c_void)>) = move _5
  using: _5@Mir(bb0[1])
  (_3.5: std::option::Option<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>) = move _6
  using: _6@Mir(bb0[3])
  (_3.6: std::option::Option<unsafe extern "C" fn(*const i8) -> *mut libc::c_void>) = move _7
  using: _7@Mir(bb0[5])
  (_3.7: std::option::Option<unsafe extern "C" fn(*const i8, *mut libc::c_void) -> i32>) = move _8
  using: _8@Mir(bb0[7])
  (_3.8: std::option::Option<unsafe extern "C" fn(*const i8, *mut libc::c_void) -> i32>) = move _9
  using: _9@Mir(bb0[9])
  _12 = &raw mut _3
  using: _3@Mir(bb0[11])
  _11 = move _12 as *mut libc::c_void (PtrToPtr)
  using: _12@Mir(bb0[21])
  _13 = const 0_i32
  using: 
  _15 = std::mem::size_of::<src::libtree::glob_t>() -> bb1
  using: 
bb1:
  _14 = move _15 as u64 (IntToInt)
  using: _15@Mir(bb0[24])
  _10 = src::libtree::memset(move _11, move _13, move _14) -> bb2
  using: _11@Mir(bb0[22]), _13@Mir(bb0[23]), _14@Mir(bb1[0])
bb2:
  _18 = _2
  using: _2@Entry
  _17 = move _18 as *const i8 (Pointer(MutToConstPointer))
  using: _18@Mir(bb2[0])
  _19 = const 0_i32
  using: 
  Deinit(_20)
  using: 
  discriminant(_20) = 0
  using: 
  _21 = &raw mut _3
  using: _3@Mir(bb0[11])
  _16 = src::libtree::glob(move _17, move _19, move _20, move _21) -> bb3
  using: _17@Mir(bb2[1]), _19@Mir(bb2[2]), _20@Mir(bb2[3]), _21@Mir(bb2[5])
bb3:
  switchInt(_16) -> [1: bb5, 2: bb5, 3: bb7, otherwise: bb4]
  using: _16@Mir(bb2[6])
bb4:
  _26 = const 0_i32
  using: 
  _27 = const 0_u64
  using: 
  goto -> bb9
  using: 
bb5:
  _23 = &raw mut _3
  using: _3@Phi(bb9)
  _22 = src::libtree::globfree(move _23) -> bb6
  using: _23@Mir(bb5[0])
bb6:
  _0 = const 1_i32
  using: 
  goto -> bb16
  using: 
bb7:
  _25 = &raw mut _3
  using: _3@Phi(bb9)
  _24 = src::libtree::globfree(move _25) -> bb8
  using: _25@Mir(bb7[0])
bb8:
  _0 = const 0_i32
  using: 
  goto -> bb16
  using: 
bb9:
  _29 = _27
  using: _27@Phi(bb9)
  _30 = (_3.0: u64)
  using: _3@Phi(bb9)
  _28 = Lt(move _29, move _30)
  using: _29@Mir(bb9[0]), _30@Mir(bb9[1])
  switchInt(move _28) -> [0: bb14, otherwise: bb10]
  using: _28@Mir(bb9[2])
bb10:
  _32 = _1
  using: _1@Phi(bb9)
  _35 = (_3.1: *mut *mut i8)
  using: _3@Phi(bb9)
  _37 = _27
  using: _27@Phi(bb9)
  _36 = move _37 as isize (IntToInt)
  using: _37@Mir(bb10[2])
  _34 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _35, move _36) -> bb11
  using: _35@Mir(bb10[1]), _36@Mir(bb10[3])
bb11:
  _33 = (*_34)
  using: _34@Mir(bb10[4])
  _31 = src::libtree::parse_ld_config_file(move _32, move _33) -> bb12
  using: _32@Mir(bb10[0]), _33@Mir(bb11[0])
bb12:
  _26 = BitOr(_26, move _31)
  using: _31@Mir(bb11[1])
  _39 = _27
  using: _27@Phi(bb9)
  _38 = core::num::<impl u64>::wrapping_add(move _39, const 1_u64) -> bb13
  using: _39@Mir(bb12[1])
bb13:
  _27 = move _38
  using: _38@Mir(bb12[2])
  goto -> bb9
  using: 
bb14:
  _41 = &raw mut _3
  using: _3@Phi(bb9)
  _40 = src::libtree::globfree(move _41) -> bb15
  using: _41@Mir(bb14[0])
bb15:
  _0 = _26
  using: _26@Mir(bb12[0])
  goto -> bb16
  using: 
bb16:
  return
  using: _0@Phi(bb16)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_5) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_5) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_6) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_6) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_7) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_7) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_8) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_8) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_9) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_9) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_3) is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:1941:9: 1941:40 (#0) by default
rewrite call src::libtree::memset @ workspace/libtree/src/libtree.rs:1938:5: 1942:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_20) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_20) = 0 is ignored
rewrite call src::libtree::glob @ workspace/libtree/src/libtree.rs:1943:22: 1943:76 (#0) by default
rewrite call src::libtree::globfree @ workspace/libtree/src/libtree.rs:1946:13: 1946:38 (#0) by default
rewrite call src::libtree::globfree @ workspace/libtree/src/libtree.rs:1950:13: 1950:38 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1958:61: 1958:79 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1959:15: 1959:30 (#0) by default
rewrite call src::libtree::globfree @ workspace/libtree/src/libtree.rs:1961:5: 1961:30 (#0) by default
@DefId(0:141 ~ lib[40c5]::src::libtree::parse_ld_config_file)
bb0:
  _5 = _2
  using: _2@Entry
  _4 = move _5 as *const i8 (Pointer(MutToConstPointer))
  using: _5@Mir(bb0[0])
  _9 = const b"r\x00"
  using: 
  _8 = &raw const (*_9)
  using: _9@Mir(bb0[2])
  _7 = move _8 as *const u8 (Pointer(ArrayToPointer))
  using: _8@Mir(bb0[3])
  _6 = move _7 as *const i8 (PtrToPtr)
  using: _7@Mir(bb0[4])
  _3 = src::libtree::fopen(move _4, move _6) -> bb1
  using: _4@Mir(bb0[1]), _6@Mir(bb0[5])
bb1:
  _11 = _3
  using: _3@Mir(bb0[6])
  _10 = std::ptr::mut_ptr::<impl *mut src::libtree::_IO_FILE>::is_null(move _11) -> bb2
  using: _11@Mir(bb1[0])
bb2:
  switchInt(move _10) -> [0: bb4, otherwise: bb3]
  using: _10@Mir(bb1[1])
bb3:
  _14 = _3
  using: _3@Mir(bb0[6])
  _13 = move _14 as usize (PointerExposeAddress)
  using: _14@Mir(bb3[0])
  _12 = Eq(move _13, const 0_usize)
  using: _13@Mir(bb3[1])
  assume(move _12)
  using: _12@Mir(bb3[2])
  _0 = const 1_i32
  using: 
  goto -> bb83
  using: 
bb4:
  _15 = const 0_i32
  using: 
  _16 = [const 0_i8; 4096]
  using: 
  _17 = [const 0_i8; 4096]
  using: 
  goto -> bb5
  using: 
bb5:
  _19 = _15
  using: _15@Phi(bb5)
  _20 = const -1_i32
  using: 
  _18 = Ne(move _19, move _20)
  using: _19@Mir(bb5[0]), _20@Mir(bb5[1])
  switchInt(move _18) -> [0: bb81, otherwise: bb6]
  using: _18@Mir(bb5[2])
bb6:
  _21 = const 0_u64
  using: 
  goto -> bb7
  using: 
bb7:
  _23 = _3
  using: _3@Phi(bb5)
  _22 = src::libtree::_IO_getc(move _23) -> bb8
  using: _23@Mir(bb7[0])
bb8:
  _15 = move _22
  using: _22@Mir(bb7[1])
  _27 = _15
  using: _15@Mir(bb8[0])
  _28 = const 10_i32
  using: 
  _26 = Ne(move _27, move _28)
  using: _27@Mir(bb8[1]), _28@Mir(bb8[2])
  switchInt(move _26) -> [0: bb9, otherwise: bb10]
  using: _26@Mir(bb8[3])
bb9:
  _25 = const false
  using: 
  goto -> bb11
  using: 
bb10:
  _30 = _15
  using: _15@Mir(bb8[0])
  _31 = const -1_i32
  using: 
  _29 = Ne(move _30, move _31)
  using: _30@Mir(bb10[0]), _31@Mir(bb10[1])
  _25 = move _29
  using: _29@Mir(bb10[2])
  goto -> bb11
  using: 
bb11:
  _24 = Not(move _25)
  using: _25@Phi(bb11)
  switchInt(move _24) -> [0: bb13, otherwise: bb12]
  using: _24@Mir(bb11[0])
bb12:
  _43 = const 0_i32
  using: 
  _45 = _21
  using: _21@Phi(bb7)
  _44 = move _45 as usize (IntToInt)
  using: _45@Mir(bb12[1])
  _46 = const 4096_usize
  using: 
  _47 = Lt(_44, _46)
  using: _44@Mir(bb12[2]), _46@Mir(bb12[3])
  assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _44) -> bb17
  using: _47@Entry, _46@Entry, _44@Entry
bb13:
  _33 = _21
  using: _21@Phi(bb7)
  _34 = const 4095_u64
  using: 
  _32 = Lt(move _33, move _34)
  using: _33@Mir(bb13[0]), _34@Mir(bb13[1])
  switchInt(move _32) -> [0: bb7, otherwise: bb14]
  using: _32@Mir(bb13[2])
bb14:
  _35 = _21
  using: _21@Phi(bb7)
  _37 = _21
  using: _21@Phi(bb7)
  _36 = core::num::<impl u64>::wrapping_add(move _37, const 1_u64) -> bb15
  using: _37@Mir(bb14[1])
bb15:
  _21 = move _36
  using: _36@Mir(bb14[2])
  _38 = _15
  using: _15@Phi(bb11)
  _40 = _35
  using: _35@Mir(bb14[0])
  _39 = move _40 as usize (IntToInt)
  using: _40@Mir(bb15[2])
  _41 = const 4096_usize
  using: 
  _42 = Lt(_39, _41)
  using: _39@Mir(bb15[3]), _41@Mir(bb15[4])
  assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _39) -> bb16
  using: _42@Entry, _41@Entry, _39@Entry
bb16:
  _16[_39] = move _38 as i8 (IntToInt)
  using: _39@Mir(bb15[3]), _38@Mir(bb15[1])
  goto -> bb7
  using: 
bb17:
  _16[_44] = move _43 as i8 (IntToInt)
  using: _44@Mir(bb12[2]), _43@Mir(bb12[0])
  _50 = &mut _16
  using: _16@Phi(bb5)
  _49 = move _50 as &mut [i8] (Pointer(Unsize))
  using: _50@Mir(bb17[1])
  _48 = core::slice::<impl [i8]>::as_mut_ptr(move _49) -> bb18
  using: _49@Mir(bb17[2])
bb18:
  _54 = &mut _16
  using: _16@Phi(bb5)
  _53 = move _54 as &mut [i8] (Pointer(Unsize))
  using: _54@Mir(bb18[0])
  _52 = core::slice::<impl [i8]>::as_mut_ptr(move _53) -> bb19
  using: _53@Mir(bb18[1])
bb19:
  _56 = _21
  using: _21@Phi(bb7)
  _55 = move _56 as isize (IntToInt)
  using: _56@Mir(bb19[0])
  _51 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _52, move _55) -> bb20
  using: _52@Mir(bb18[2]), _55@Mir(bb19[1])
bb20:
  _62 = src::libtree::__ctype_b_loc() -> bb21
  using: 
bb21:
  _61 = (*_62)
  using: _62@Mir(bb20[0])
  _65 = (*_48)
  using: _48@Phi(bb20)
  _64 = move _65 as i32 (IntToInt)
  using: _65@Mir(bb21[1])
  _63 = move _64 as isize (IntToInt)
  using: _64@Mir(bb21[2])
  _60 = std::ptr::const_ptr::<impl *const u16>::offset(move _61, move _63) -> bb22
  using: _61@Mir(bb21[0]), _63@Mir(bb21[3])
bb22:
  _59 = (*_60)
  using: _60@Mir(bb21[4])
  _58 = move _59 as i32 (IntToInt)
  using: _59@Mir(bb22[0])
  _66 = const 8192_i32
  using: 
  _57 = BitAnd(move _58, move _66)
  using: _58@Mir(bb22[1]), _66@Mir(bb22[2])
  switchInt(move _57) -> [0: bb25, otherwise: bb23]
  using: _57@Mir(bb22[3])
bb23:
  _68 = _48
  using: _48@Phi(bb20)
  _67 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _68, const 1_isize) -> bb24
  using: _68@Mir(bb23[0])
bb24:
  _48 = move _67
  using: _67@Mir(bb23[1])
  goto -> bb20
  using: 
bb25:
  _71 = _48
  using: _48@Phi(bb20)
  _70 = move _71 as *const i8 (Pointer(MutToConstPointer))
  using: _71@Mir(bb25[0])
  _72 = const 35_i32
  using: 
  _69 = src::libtree::strchr(move _70, move _72) -> bb26
  using: _70@Mir(bb25[1]), _72@Mir(bb25[2])
bb26:
  _75 = _69
  using: _69@Mir(bb25[3])
  _74 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _75) -> bb27
  using: _75@Mir(bb26[0])
bb27:
  _73 = Not(move _74)
  using: _74@Mir(bb26[1])
  switchInt(move _73) -> [0: bb29, otherwise: bb28]
  using: _73@Mir(bb27[0])
bb28:
  _76 = const 0_i32
  using: 
  (*_69) = move _76 as i8 (IntToInt)
  using: _69@Mir(bb25[3]), _76@Mir(bb28[0])
  goto -> bb30
  using: 
bb29:
  _79 = _69
  using: _69@Mir(bb25[3])
  _78 = move _79 as usize (PointerExposeAddress)
  using: _79@Mir(bb29[0])
  _77 = Eq(move _78, const 0_usize)
  using: _78@Mir(bb29[1])
  assume(move _77)
  using: _77@Mir(bb29[2])
  goto -> bb30
  using: 
bb30:
  _81 = _51
  using: _51@Phi(bb30)
  _82 = _48
  using: _48@Phi(bb20)
  _80 = Ne(move _81, move _82)
  using: _81@Mir(bb30[0]), _82@Mir(bb30[1])
  switchInt(move _80) -> [0: bb35, otherwise: bb31]
  using: _80@Mir(bb30[2])
bb31:
  _84 = _51
  using: _51@Phi(bb30)
  _83 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _84, const -1_isize) -> bb32
  using: _84@Mir(bb31[0])
bb32:
  _51 = move _83
  using: _83@Mir(bb31[1])
  _90 = src::libtree::__ctype_b_loc() -> bb33
  using: 
bb33:
  _89 = (*_90)
  using: _90@Mir(bb32[1])
  _93 = (*_51)
  using: _51@Mir(bb32[0])
  _92 = move _93 as i32 (IntToInt)
  using: _93@Mir(bb33[1])
  _91 = move _92 as isize (IntToInt)
  using: _92@Mir(bb33[2])
  _88 = std::ptr::const_ptr::<impl *const u16>::offset(move _89, move _91) -> bb34
  using: _89@Mir(bb33[0]), _91@Mir(bb33[3])
bb34:
  _87 = (*_88)
  using: _88@Mir(bb33[4])
  _86 = move _87 as i32 (IntToInt)
  using: _87@Mir(bb34[0])
  _94 = const 8192_i32
  using: 
  _85 = BitAnd(move _86, move _94)
  using: _86@Mir(bb34[1]), _94@Mir(bb34[2])
  switchInt(move _85) -> [0: bb35, otherwise: bb30]
  using: _85@Mir(bb34[3])
bb35:
  _96 = _48
  using: _48@Phi(bb20)
  _97 = _51
  using: _51@Phi(bb35)
  _95 = Eq(move _96, move _97)
  using: _96@Mir(bb35[0]), _97@Mir(bb35[1])
  switchInt(move _95) -> [0: bb36, otherwise: bb5]
  using: _95@Mir(bb35[2])
bb36:
  _98 = const 0_i32
  using: 
  _100 = _51
  using: _51@Phi(bb35)
  _101 = const 1_isize
  using: 
  _99 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _100, move _101) -> bb37
  using: _100@Mir(bb36[1]), _101@Mir(bb36[2])
bb37:
  (*_99) = move _98 as i8 (IntToInt)
  using: _99@Mir(bb36[3]), _98@Mir(bb36[0])
  _106 = _48
  using: _48@Phi(bb20)
  _105 = move _106 as *const i8 (Pointer(MutToConstPointer))
  using: _106@Mir(bb37[1])
  _110 = const b"include\x00"
  using: 
  _109 = &raw const (*_110)
  using: _110@Mir(bb37[3])
  _108 = move _109 as *const u8 (Pointer(ArrayToPointer))
  using: _109@Mir(bb37[4])
  _107 = move _108 as *const i8 (PtrToPtr)
  using: _108@Mir(bb37[5])
  _111 = const 7_u64
  using: 
  _104 = src::libtree::strncmp(move _105, move _107, move _111) -> bb41
  using: _105@Mir(bb37[2]), _107@Mir(bb37[6]), _111@Mir(bb37[7])
bb38:
  _102 = const false
  using: 
  goto -> bb40
  using: 
bb39:
  _119 = src::libtree::__ctype_b_loc() -> bb42
  using: 
bb40:
  switchInt(move _102) -> [0: bb77, otherwise: bb45]
  using: _102@Phi(bb40)
bb41:
  _112 = const 0_i32
  using: 
  _103 = Eq(move _104, move _112)
  using: _104@Mir(bb37[8]), _112@Mir(bb41[0])
  switchInt(move _103) -> [0: bb38, otherwise: bb39]
  using: _103@Mir(bb41[1])
bb42:
  _118 = (*_119)
  using: _119@Mir(bb39[0])
  _124 = _48
  using: _48@Phi(bb20)
  _125 = const 7_isize
  using: 
  _123 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _124, move _125) -> bb43
  using: _124@Mir(bb42[1]), _125@Mir(bb42[2])
bb43:
  _122 = (*_123)
  using: _123@Mir(bb42[3])
  _121 = move _122 as i32 (IntToInt)
  using: _122@Mir(bb43[0])
  _120 = move _121 as isize (IntToInt)
  using: _121@Mir(bb43[1])
  _117 = std::ptr::const_ptr::<impl *const u16>::offset(move _118, move _120) -> bb44
  using: _118@Mir(bb42[0]), _120@Mir(bb43[2])
bb44:
  _116 = (*_117)
  using: _117@Mir(bb43[3])
  _115 = move _116 as i32 (IntToInt)
  using: _116@Mir(bb44[0])
  _126 = const 8192_i32
  using: 
  _114 = BitAnd(move _115, move _126)
  using: _115@Mir(bb44[1]), _126@Mir(bb44[2])
  _113 = Ne(move _114, const 0_i32)
  using: _114@Mir(bb44[3])
  _102 = move _113
  using: _113@Mir(bb44[4])
  goto -> bb40
  using: 
bb45:
  _128 = _48
  using: _48@Phi(bb40)
  _129 = const 8_isize
  using: 
  _127 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _128, move _129) -> bb46
  using: _128@Mir(bb45[0]), _129@Mir(bb45[1])
bb46:
  _48 = move _127
  using: _127@Mir(bb45[2])
  goto -> bb47
  using: 
bb47:
  _135 = src::libtree::__ctype_b_loc() -> bb48
  using: 
bb48:
  _134 = (*_135)
  using: _135@Mir(bb47[0])
  _138 = (*_48)
  using: _48@Phi(bb47)
  _137 = move _138 as i32 (IntToInt)
  using: _138@Mir(bb48[1])
  _136 = move _137 as isize (IntToInt)
  using: _137@Mir(bb48[2])
  _133 = std::ptr::const_ptr::<impl *const u16>::offset(move _134, move _136) -> bb49
  using: _134@Mir(bb48[0]), _136@Mir(bb48[3])
bb49:
  _132 = (*_133)
  using: _133@Mir(bb48[4])
  _131 = move _132 as i32 (IntToInt)
  using: _132@Mir(bb49[0])
  _139 = const 8192_i32
  using: 
  _130 = BitAnd(move _131, move _139)
  using: _131@Mir(bb49[1]), _139@Mir(bb49[2])
  switchInt(move _130) -> [0: bb52, otherwise: bb50]
  using: _130@Mir(bb49[3])
bb50:
  _141 = _48
  using: _48@Phi(bb47)
  _140 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _141, const 1_isize) -> bb51
  using: _141@Mir(bb50[0])
bb51:
  _48 = move _140
  using: _140@Mir(bb50[1])
  goto -> bb47
  using: 
bb52:
  _144 = (*_48)
  using: _48@Phi(bb47)
  _143 = move _144 as i32 (IntToInt)
  using: _144@Mir(bb52[0])
  _145 = const 47_i32
  using: 
  _142 = Ne(move _143, move _145)
  using: _143@Mir(bb52[1]), _145@Mir(bb52[2])
  switchInt(move _142) -> [0: bb76, otherwise: bb53]
  using: _142@Mir(bb52[3])
bb53:
  _148 = _2
  using: _2@Phi(bb5)
  _147 = move _148 as *const i8 (Pointer(MutToConstPointer))
  using: _148@Mir(bb53[0])
  _149 = const 47_i32
  using: 
  _146 = src::libtree::strrchr(move _147, move _149) -> bb54
  using: _147@Mir(bb53[1]), _149@Mir(bb53[2])
bb54:
  _152 = _146
  using: _146@Mir(bb53[3])
  _151 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _152) -> bb55
  using: _152@Mir(bb54[0])
bb55:
  switchInt(move _151) -> [0: bb57, otherwise: bb56]
  using: _151@Mir(bb54[1])
bb56:
  _155 = _146
  using: _146@Mir(bb53[3])
  _154 = move _155 as usize (PointerExposeAddress)
  using: _155@Mir(bb56[0])
  _153 = Eq(move _154, const 0_usize)
  using: _154@Mir(bb56[1])
  assume(move _153)
  using: _153@Mir(bb56[2])
  _157 = _2
  using: _2@Phi(bb5)
  _156 = move _157 as *const i8 (Pointer(MutToConstPointer))
  using: _157@Mir(bb56[4])
  _158 = const 0_i32
  using: 
  _150 = src::libtree::strrchr(move _156, move _158) -> bb58
  using: _156@Mir(bb56[5]), _158@Mir(bb56[6])
bb57:
  _150 = _146
  using: _146@Mir(bb53[3])
  goto -> bb58
  using: 
bb58:
  _146 = move _150
  using: _150@Phi(bb58)
  _162 = _146
  using: _146@Mir(bb58[0])
  _164 = _2
  using: _2@Phi(bb58)
  _163 = move _164 as *const i8 (Pointer(MutToConstPointer))
  using: _164@Mir(bb58[2])
  _161 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _162, move _163) -> bb59
  using: _162@Mir(bb58[1]), _163@Mir(bb58[3])
bb59:
  _160 = move _161 as i64 (IntToInt)
  using: _161@Mir(bb58[4])
  _159 = move _160 as u64 (IntToInt)
  using: _160@Mir(bb59[0])
  _169 = _51
  using: _51@Phi(bb35)
  _171 = _48
  using: _48@Phi(bb47)
  _170 = move _171 as *const i8 (Pointer(MutToConstPointer))
  using: _171@Mir(bb59[3])
  _168 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _169, move _170) -> bb60
  using: _169@Mir(bb59[2]), _170@Mir(bb59[4])
bb60:
  _167 = move _168 as i64 (IntToInt)
  using: _168@Mir(bb59[5])
  _172 = const 1_i64
  using: 
  _173 = CheckedAdd(_167, _172)
  using: _167@Mir(bb60[0]), _172@Mir(bb60[1])
  assert(!move (_173.1: bool), "attempt to compute `{} + {}`, which would overflow", move _167, move _172) -> bb61
  using: _173@Entry, _167@Entry, _172@Entry
bb61:
  _166 = move (_173.0: i64)
  using: _173@Mir(bb60[2])
  _165 = move _166 as u64 (IntToInt)
  using: _166@Mir(bb61[0])
  _177 = _159
  using: _159@Mir(bb59[1])
  _178 = const 1_u64
  using: 
  _176 = core::num::<impl u64>::wrapping_add(move _177, move _178) -> bb62
  using: _177@Mir(bb61[2]), _178@Mir(bb61[3])
bb62:
  _179 = _165
  using: _165@Mir(bb61[1])
  _175 = core::num::<impl u64>::wrapping_add(move _176, move _179) -> bb63
  using: _176@Mir(bb61[4]), _179@Mir(bb62[0])
bb63:
  _180 = const 4096_u64
  using: 
  _174 = Ge(move _175, move _180)
  using: _175@Mir(bb62[1]), _180@Mir(bb63[0])
  switchInt(move _174) -> [0: bb64, otherwise: bb5]
  using: _174@Mir(bb63[1])
bb64:
  _185 = &mut _17
  using: _17@Phi(bb5)
  _184 = move _185 as &mut [i8] (Pointer(Unsize))
  using: _185@Mir(bb64[0])
  _183 = core::slice::<impl [i8]>::as_mut_ptr(move _184) -> bb65
  using: _184@Mir(bb64[1])
bb65:
  _182 = move _183 as *mut libc::c_void (PtrToPtr)
  using: _183@Mir(bb64[2])
  _187 = _2
  using: _2@Phi(bb58)
  _186 = move _187 as *const libc::c_void (PtrToPtr)
  using: _187@Mir(bb65[1])
  _188 = _159
  using: _159@Mir(bb59[1])
  _181 = src::libtree::memcpy(move _182, move _186, move _188) -> bb66
  using: _182@Mir(bb65[0]), _186@Mir(bb65[2]), _188@Mir(bb65[3])
bb66:
  _189 = const 47_i32
  using: 
  _191 = _159
  using: _159@Mir(bb59[1])
  _190 = move _191 as usize (IntToInt)
  using: _191@Mir(bb66[1])
  _192 = const 4096_usize
  using: 
  _193 = Lt(_190, _192)
  using: _190@Mir(bb66[2]), _192@Mir(bb66[3])
  assert(move _193, "index out of bounds: the length is {} but the index is {}", move _192, _190) -> bb67
  using: _193@Entry, _192@Entry, _190@Entry
bb67:
  _17[_190] = move _189 as i8 (IntToInt)
  using: _190@Mir(bb66[2]), _189@Mir(bb66[0])
  _200 = &mut _17
  using: _17@Phi(bb5)
  _199 = move _200 as &mut [i8] (Pointer(Unsize))
  using: _200@Mir(bb67[1])
  _198 = core::slice::<impl [i8]>::as_mut_ptr(move _199) -> bb68
  using: _199@Mir(bb67[2])
bb68:
  _202 = _159
  using: _159@Mir(bb59[1])
  _201 = move _202 as isize (IntToInt)
  using: _202@Mir(bb68[0])
  _197 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _198, move _201) -> bb69
  using: _198@Mir(bb67[3]), _201@Mir(bb68[1])
bb69:
  _203 = const 1_isize
  using: 
  _196 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _197, move _203) -> bb70
  using: _197@Mir(bb68[2]), _203@Mir(bb69[0])
bb70:
  _195 = move _196 as *mut libc::c_void (PtrToPtr)
  using: _196@Mir(bb69[1])
  _205 = _48
  using: _48@Phi(bb47)
  _204 = move _205 as *const libc::c_void (PtrToPtr)
  using: _205@Mir(bb70[1])
  _206 = _165
  using: _165@Mir(bb61[1])
  _194 = src::libtree::memcpy(move _195, move _204, move _206) -> bb71
  using: _195@Mir(bb70[0]), _204@Mir(bb70[2]), _206@Mir(bb70[3])
bb71:
  _207 = const 0_i32
  using: 
  _211 = _159
  using: _159@Mir(bb59[1])
  _212 = const 1_u64
  using: 
  _210 = core::num::<impl u64>::wrapping_add(move _211, move _212) -> bb72
  using: _211@Mir(bb71[1]), _212@Mir(bb71[2])
bb72:
  _213 = _165
  using: _165@Mir(bb61[1])
  _209 = core::num::<impl u64>::wrapping_add(move _210, move _213) -> bb73
  using: _210@Mir(bb71[3]), _213@Mir(bb72[0])
bb73:
  _208 = move _209 as usize (IntToInt)
  using: _209@Mir(bb72[1])
  _214 = const 4096_usize
  using: 
  _215 = Lt(_208, _214)
  using: _208@Mir(bb73[0]), _214@Mir(bb73[1])
  assert(move _215, "index out of bounds: the length is {} but the index is {}", move _214, _208) -> bb74
  using: _215@Entry, _214@Entry, _208@Entry
bb74:
  _17[_208] = move _207 as i8 (IntToInt)
  using: _208@Mir(bb73[0]), _207@Mir(bb71[0])
  _218 = &mut _17
  using: _17@Phi(bb5)
  _217 = move _218 as &mut [i8] (Pointer(Unsize))
  using: _218@Mir(bb74[1])
  _216 = core::slice::<impl [i8]>::as_mut_ptr(move _217) -> bb75
  using: _217@Mir(bb74[2])
bb75:
  _48 = move _216
  using: _216@Mir(bb74[3])
  goto -> bb76
  using: 
bb76:
  _220 = _1
  using: _1@Phi(bb5)
  _221 = _48
  using: _48@Phi(bb76)
  _219 = src::libtree::ld_conf_globbing(move _220, move _221) -> bb5
  using: _220@Mir(bb76[0]), _221@Mir(bb76[1])
bb77:
  _223 = _1
  using: _1@Phi(bb5)
  _225 = _48
  using: _48@Phi(bb47)
  _224 = move _225 as *const i8 (Pointer(MutToConstPointer))
  using: _225@Mir(bb77[1])
  _222 = src::libtree::string_table_store(move _223, move _224) -> bb78
  using: _223@Mir(bb77[0]), _224@Mir(bb77[2])
bb78:
  _226 = const 58_i32
  using: 
  _228 = ((*_1).0: *mut i8)
  using: _1@Phi(bb5)
  _231 = ((*_1).1: u64)
  using: _1@Phi(bb5)
  _232 = const 1_u64
  using: 
  _230 = core::num::<impl u64>::wrapping_sub(move _231, move _232) -> bb79
  using: _231@Mir(bb78[2]), _232@Mir(bb78[3])
bb79:
  _229 = move _230 as isize (IntToInt)
  using: _230@Mir(bb78[4])
  _227 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _228, move _229) -> bb80
  using: _228@Mir(bb78[1]), _229@Mir(bb79[0])
bb80:
  (*_227) = move _226 as i8 (IntToInt)
  using: _227@Mir(bb79[1]), _226@Mir(bb78[0])
  goto -> bb5
  using: 
bb81:
  _234 = _3
  using: _3@Phi(bb5)
  _233 = src::libtree::fclose(move _234) -> bb82
  using: _234@Mir(bb81[0])
bb82:
  _0 = const 0_i32
  using: 
  goto -> bb83
  using: 
bb83:
  return
  using: _0@Phi(bb83)
rewrite call src::libtree::fopen @ workspace/libtree/src/libtree.rs:1968:20: 1968:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 4096] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 4096] is not supported
rewrite call src::libtree::_IO_getc @ workspace/libtree/src/libtree.rs:1979:17: 1979:31 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:1985:37: 1985:52 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1991:41: 1991:66 (#0) by default
rewrite call src::libtree::__ctype_b_loc @ workspace/libtree/src/libtree.rs:1992:18: 1992:33 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libtree/src/libtree.rs:1992:35: 1992:73 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:1996:27: 1996:36 (#0) by default
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:1998:27: 1998:52 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2005:23: 2005:33 (#0) by default
rewrite call src::libtree::__ctype_b_loc @ workspace/libtree/src/libtree.rs:2006:19: 2006:34 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libtree/src/libtree.rs:2006:36: 2006:72 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2016:14: 2016:47 (#0) by default
rewrite call src::libtree::strncmp @ workspace/libtree/src/libtree.rs:2017:12: 2021:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::__ctype_b_loc @ workspace/libtree/src/libtree.rs:2022:19: 2022:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2023:32: 2023:65 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libtree/src/libtree.rs:2023:18: 2023:90 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2028:27: 2028:60 (#0) by default
rewrite call src::libtree::__ctype_b_loc @ workspace/libtree/src/libtree.rs:2029:22: 2029:37 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libtree/src/libtree.rs:2029:39: 2029:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2033:31: 2033:40 (#0) by default
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:2036:30: 2036:55 (#0) by default
rewrite call src::libtree::strrchr @ workspace/libtree/src/libtree.rs:2039:21: 2039:47 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:2043:37: 2043:54 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset_from @ workspace/libtree/src/libtree.rs:2044:44: 2044:62 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2048:22: 2048:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2049:22: 2049:47 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:2054:17: 2058:18 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2062:26: 2062:49 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2063:26: 2063:59 (#0) by default
rewrite call src::libtree::memcpy @ workspace/libtree/src/libtree.rs:2060:17: 2066:18 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2068:22: 2068:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2069:22: 2069:47 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:2076:35: 2076:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2076:18: 2076:92 (#0) by default
rewrite call src::libtree::fclose @ workspace/libtree/src/libtree.rs:2080:5: 2080:17 (#0) by default
@DefId(0:146 ~ lib[40c5]::src::libtree::parse_ld_so_conf)
bb0:
  _2 = &raw mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _3 = ((*_2).1: u64)
  using: _2@Mir(bb0[0])
  ((*_1).14: u64) = move _3
  using: _1@Entry, _3@Mir(bb0[1])
  _5 = _2
  using: _2@Mir(bb0[0])
  _6 = ((*_1).3: *mut i8)
  using: _1@Entry
  _4 = src::libtree::parse_ld_config_file(move _5, move _6) -> bb1
  using: _5@Mir(bb0[3]), _6@Mir(bb0[4])
bb1:
  _8 = ((*_2).1: u64)
  using: _2@Mir(bb0[0])
  _9 = ((*_1).14: u64)
  using: _1@Entry
  _7 = Gt(move _8, move _9)
  using: _8@Mir(bb1[0]), _9@Mir(bb1[1])
  switchInt(move _7) -> [0: bb5, otherwise: bb2]
  using: _7@Mir(bb1[2])
bb2:
  _10 = const 0_i32
  using: 
  _12 = ((*_2).0: *mut i8)
  using: _2@Mir(bb0[0])
  _15 = ((*_2).1: u64)
  using: _2@Mir(bb0[0])
  _16 = const 1_u64
  using: 
  _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> bb3
  using: _15@Mir(bb2[2]), _16@Mir(bb2[3])
bb3:
  _13 = move _14 as isize (IntToInt)
  using: _14@Mir(bb2[4])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _12, move _13) -> bb4
  using: _12@Mir(bb2[1]), _13@Mir(bb3[0])
bb4:
  (*_11) = move _10 as i8 (IntToInt)
  using: _11@Mir(bb3[1]), _10@Mir(bb2[0])
  goto -> bb6
  using: 
bb5:
  _18 = _2
  using: _2@Mir(bb0[0])
  _22 = const b"\x00"
  using: 
  _21 = &raw const (*_22)
  using: _22@Mir(bb5[1])
  _20 = move _21 as *const u8 (Pointer(ArrayToPointer))
  using: _21@Mir(bb5[2])
  _19 = move _20 as *const i8 (PtrToPtr)
  using: _20@Mir(bb5[3])
  _17 = src::libtree::string_table_store(move _18, move _19) -> bb6
  using: _18@Mir(bb5[0]), _19@Mir(bb5[4])
bb6:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libtree/src/libtree.rs:2088:39: 2088:86 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2088:22: 2088:96 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:147 ~ lib[40c5]::src::libtree::parse_ld_library_path)
bb0:
  _2 = const u64::MAX
  using: 
  ((*_1).12: u64) = move _2
  using: _1@Entry, _2@Mir(bb0[0])
  _7 = const b"LD_LIBRARY_PATH\x00"
  using: 
  _6 = &raw const (*_7)
  using: _7@Mir(bb0[2])
  _5 = move _6 as *const u8 (Pointer(ArrayToPointer))
  using: _6@Mir(bb0[3])
  _4 = move _5 as *const i8 (PtrToPtr)
  using: _5@Mir(bb0[4])
  _3 = src::libtree::getenv(move _4) -> bb1
  using: _4@Mir(bb0[5])
bb1:
  _9 = _3
  using: _3@Mir(bb0[6])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb2
  using: _9@Mir(bb1[0])
bb2:
  switchInt(move _8) -> [0: bb4, otherwise: bb3]
  using: _8@Mir(bb1[1])
bb3:
  _12 = _3
  using: _3@Mir(bb0[6])
  _11 = move _12 as usize (PointerExposeAddress)
  using: _12@Mir(bb3[0])
  _10 = Eq(move _11, const 0_usize)
  using: _11@Mir(bb3[1])
  assume(move _10)
  using: _10@Mir(bb3[2])
  goto -> bb12
  using: 
bb4:
  _13 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  ((*_1).12: u64) = move _13
  using: _1@Entry, _13@Mir(bb4[0])
  _15 = &raw mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _17 = _3
  using: _3@Mir(bb0[6])
  _16 = move _17 as *const i8 (Pointer(MutToConstPointer))
  using: _17@Mir(bb4[3])
  _14 = src::libtree::string_table_store(move _15, move _16) -> bb5
  using: _15@Mir(bb4[2]), _16@Mir(bb4[4])
bb5:
  _19 = (((*_1).5: src::libtree::string_table_t).0: *mut i8)
  using: _1@Entry
  _21 = ((*_1).12: u64)
  using: _1@Entry
  _20 = move _21 as isize (IntToInt)
  using: _21@Mir(bb5[1])
  _18 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _19, move _20) -> bb6
  using: _19@Mir(bb5[0]), _20@Mir(bb5[2])
bb6:
  _24 = _18
  using: _18@Phi(bb6)
  _23 = move _24 as *const i8 (Pointer(MutToConstPointer))
  using: _24@Mir(bb6[0])
  _25 = const 59_i32
  using: 
  _22 = src::libtree::strchr(move _23, move _25) -> bb7
  using: _23@Mir(bb6[1]), _25@Mir(bb6[2])
bb7:
  _18 = move _22
  using: _22@Mir(bb6[3])
  _27 = _18
  using: _18@Mir(bb7[0])
  _26 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _27) -> bb8
  using: _27@Mir(bb7[1])
bb8:
  switchInt(move _26) -> [0: bb10, otherwise: bb9]
  using: _26@Mir(bb7[2])
bb9:
  _30 = _18
  using: _18@Mir(bb7[0])
  _29 = move _30 as usize (PointerExposeAddress)
  using: _30@Mir(bb9[0])
  _28 = Eq(move _29, const 0_usize)
  using: _29@Mir(bb9[1])
  assume(move _28)
  using: _28@Mir(bb9[2])
  goto -> bb12
  using: 
bb10:
  _31 = _18
  using: _18@Mir(bb7[0])
  _33 = _18
  using: _18@Mir(bb7[0])
  _32 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _33, const 1_isize) -> bb11
  using: _33@Mir(bb10[1])
bb11:
  _18 = move _32
  using: _32@Mir(bb10[2])
  _34 = const 58_i32
  using: 
  (*_31) = move _34 as i8 (IntToInt)
  using: _31@Mir(bb10[0]), _34@Mir(bb11[1])
  goto -> bb6
  using: 
bb12:
  return
  using: _0@Entry
rewrite call src::libtree::getenv @ workspace/libtree/src/libtree.rs:2096:19: 2096:83 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2103:46: 2103:90 (#0) by default
rewrite call src::libtree::strchr @ workspace/libtree/src/libtree.rs:2105:18: 2105:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2111:25: 2111:34 (#0) by default
@DefId(0:148 ~ lib[40c5]::src::libtree::set_default_paths)
bb0:
  _2 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  ((*_1).13: u64) = move _2
  using: _1@Entry, _2@Mir(bb0[0])
  _4 = &raw mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _8 = const b"/lib:/lib64:/usr/lib:/usr/lib64\x00"
  using: 
  _7 = &raw const (*_8)
  using: _8@Mir(bb0[3])
  _6 = move _7 as *const u8 (Pointer(ArrayToPointer))
  using: _7@Mir(bb0[4])
  _5 = move _6 as *const i8 (PtrToPtr)
  using: _6@Mir(bb0[5])
  _3 = src::libtree::string_table_store(move _4, move _5) -> bb1
  using: _4@Mir(bb0[2]), _5@Mir(bb0[6])
bb1:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:149 ~ lib[40c5]::src::libtree::libtree_state_init)
bb0:
  _2 = const 0_i32
  using: 
  (((*_1).5: src::libtree::string_table_t).1: u64) = move _2 as u64 (IntToInt)
  using: _1@Entry, _2@Mir(bb0[0])
  _3 = const 1024_i32
  using: 
  (((*_1).5: src::libtree::string_table_t).2: u64) = move _3 as u64 (IntToInt)
  using: _1@Entry, _3@Mir(bb0[2])
  _6 = (((*_1).5: src::libtree::string_table_t).2: u64)
  using: _1@Entry
  _8 = std::mem::size_of::<i8>() -> bb1
  using: 
bb1:
  _7 = move _8 as u64 (IntToInt)
  using: _8@Mir(bb0[5])
  _5 = core::num::<impl u64>::wrapping_mul(move _6, move _7) -> bb2
  using: _6@Mir(bb0[4]), _7@Mir(bb1[0])
bb2:
  _4 = src::libtree::malloc(move _5) -> bb3
  using: _5@Mir(bb1[1])
bb3:
  (((*_1).5: src::libtree::string_table_t).0: *mut i8) = move _4 as *mut i8 (PtrToPtr)
  using: _1@Entry, _4@Mir(bb2[0])
  _9 = const 0_i32
  using: 
  (((*_1).6: src::libtree::visited_file_array_t).1: u64) = move _9 as u64 (IntToInt)
  using: _1@Entry, _9@Mir(bb3[1])
  _10 = const 256_i32
  using: 
  (((*_1).6: src::libtree::visited_file_array_t).2: u64) = move _10 as u64 (IntToInt)
  using: _1@Entry, _10@Mir(bb3[3])
  _13 = (((*_1).6: src::libtree::visited_file_array_t).2: u64)
  using: _1@Entry
  _15 = std::mem::size_of::<src::libtree::visited_file_t>() -> bb4
  using: 
bb4:
  _14 = move _15 as u64 (IntToInt)
  using: _15@Mir(bb3[6])
  _12 = core::num::<impl u64>::wrapping_mul(move _13, move _14) -> bb5
  using: _13@Mir(bb3[5]), _14@Mir(bb4[0])
bb5:
  _11 = src::libtree::malloc(move _12) -> bb6
  using: _12@Mir(bb4[1])
bb6:
  (((*_1).6: src::libtree::visited_file_array_t).0: *mut src::libtree::visited_file_t) = move _11 as *mut src::libtree::visited_file_t (PtrToPtr)
  using: _1@Entry, _11@Mir(bb5[0])
  return
  using: _0@Entry
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:2127:27: 2127:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:2127:14: 2127:82 (#0) by default
rewrite call src::libtree::malloc @ workspace/libtree/src/libtree.rs:2125:29: 2128:6 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:2133:27: 2133:66 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libtree/src/libtree.rs:2133:14: 2133:84 (#0) by default
rewrite call src::libtree::malloc @ workspace/libtree/src/libtree.rs:2131:24: 2134:6 (#0) by default
@DefId(0:150 ~ lib[40c5]::src::libtree::libtree_state_free)
bb0:
  _4 = (((*_1).5: src::libtree::string_table_t).0: *mut i8)
  using: _1@Entry
  _3 = move _4 as *mut libc::c_void (PtrToPtr)
  using: _4@Mir(bb0[0])
  _2 = src::libtree::free(move _3) -> bb1
  using: _3@Mir(bb0[1])
bb1:
  _7 = (((*_1).6: src::libtree::visited_file_array_t).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _6 = move _7 as *mut libc::c_void (PtrToPtr)
  using: _7@Mir(bb1[0])
  _5 = src::libtree::free(move _6) -> bb2
  using: _6@Mir(bb1[1])
bb2:
  return
  using: _0@Entry
@DefId(0:151 ~ lib[40c5]::src::libtree::print_tree)
bb0:
  _5 = _3
  using: _3@Entry
  _4 = src::libtree::libtree_state_init(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _7 = _3
  using: _3@Entry
  _6 = src::libtree::parse_ld_so_conf(move _7) -> bb2
  using: _7@Mir(bb1[0])
bb2:
  _9 = _3
  using: _3@Entry
  _8 = src::libtree::parse_ld_library_path(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  _11 = _3
  using: _3@Entry
  _10 = src::libtree::set_default_paths(move _11) -> bb4
  using: _11@Mir(bb3[0])
bb4:
  _0 = const 0_i32
  using: 
  _12 = const 0_i32
  using: 
  goto -> bb5
  using: 
bb5:
  _14 = _12
  using: _12@Phi(bb5)
  _15 = _1
  using: _1@Entry
  _13 = Lt(move _14, move _15)
  using: _14@Mir(bb5[0]), _15@Mir(bb5[1])
  switchInt(move _13) -> [0: bb44, otherwise: bb6]
  using: _13@Mir(bb5[2])
bb6:
  _19 = _2
  using: _2@Phi(bb5)
  _21 = _12
  using: _12@Phi(bb5)
  _20 = move _21 as isize (IntToInt)
  using: _21@Mir(bb6[1])
  _18 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _19, move _20) -> bb7
  using: _19@Mir(bb6[0]), _20@Mir(bb6[2])
bb7:
  _17 = (*_18)
  using: _18@Mir(bb6[3])
  _22 = const 0_u64
  using: 
  _23 = _3
  using: _3@Phi(bb5)
  Deinit(_25)
  using: 
  (_25.0: i8) = const 1_i8
  using: 
  (_25.1: u8) = const 0_u8
  using: 
  (_25.2: u16) = const 0_u16
  using: 
  _24 = _25
  using: _25@Mir(bb7[3])
  Deinit(_27)
  using: 
  (_27.0: u32) = const _
  using: 
  (_27.1: u64) = const 0_u64
  using: 
  _26 = _27
  using: _27@Mir(bb7[8])
  _16 = src::libtree::recurse(move _17, move _22, move _23, move _24, move _26) -> bb8
  using: _17@Mir(bb7[0]), _22@Mir(bb7[1]), _23@Mir(bb7[2]), _24@Mir(bb7[7]), _26@Mir(bb7[11])
bb8:
  _30 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _29 = (*_30)
  using: _30@Mir(bb8[0])
  _28 = src::libtree::fflush(move _29) -> bb9
  using: _29@Mir(bb8[1])
bb9:
  _32 = _16
  using: _16@Mir(bb7[12])
  _33 = const 0_i32
  using: 
  _31 = Ne(move _32, move _33)
  using: _32@Mir(bb9[0]), _33@Mir(bb9[1])
  switchInt(move _31) -> [0: bb14, otherwise: bb10]
  using: _31@Mir(bb9[2])
bb10:
  _34 = _16
  using: _16@Mir(bb7[12])
  _0 = move _34
  using: _34@Mir(bb10[0])
  _39 = const b"Error [\x00"
  using: 
  _38 = &raw const (*_39)
  using: _39@Mir(bb10[2])
  _37 = move _38 as *const u8 (Pointer(ArrayToPointer))
  using: _38@Mir(bb10[3])
  _36 = move _37 as *const i8 (PtrToPtr)
  using: _37@Mir(bb10[4])
  _41 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _40 = (*_41)
  using: _41@Mir(bb10[6])
  _35 = src::libtree::fputs(move _36, move _40) -> bb11
  using: _36@Mir(bb10[5]), _40@Mir(bb10[7])
bb11:
  _46 = _2
  using: _2@Phi(bb5)
  _48 = _12
  using: _12@Phi(bb5)
  _47 = move _48 as isize (IntToInt)
  using: _48@Mir(bb11[1])
  _45 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _46, move _47) -> bb12
  using: _46@Mir(bb11[0]), _47@Mir(bb11[2])
bb12:
  _44 = (*_45)
  using: _45@Mir(bb11[3])
  _43 = move _44 as *const i8 (Pointer(MutToConstPointer))
  using: _44@Mir(bb12[0])
  _50 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _49 = (*_50)
  using: _50@Mir(bb12[2])
  _42 = src::libtree::fputs(move _43, move _49) -> bb13
  using: _43@Mir(bb12[1]), _49@Mir(bb12[3])
bb13:
  _55 = const b"]: \x00"
  using: 
  _54 = &raw const (*_55)
  using: _55@Mir(bb13[0])
  _53 = move _54 as *const u8 (Pointer(ArrayToPointer))
  using: _54@Mir(bb13[1])
  _52 = move _53 as *const i8 (PtrToPtr)
  using: _53@Mir(bb13[2])
  _57 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _56 = (*_57)
  using: _57@Mir(bb13[4])
  _51 = src::libtree::fputs(move _52, move _56) -> bb14
  using: _52@Mir(bb13[3]), _56@Mir(bb13[5])
bb14:
  _58 = const {0x0 as *mut i8}
  using: 
  switchInt(_16) -> [11: bb15, 12: bb16, 13: bb17, 14: bb18, 15: bb19, 16: bb20, 17: bb21, 18: bb22, 19: bb23, 20: bb24, 21: bb25, 22: bb26, 23: bb27, 24: bb28, 25: bb29, 26: bb30, 27: bb31, 28: bb32, 29: bb33, 30: bb34, 31: bb35, 32: bb36, otherwise: bb37]
  using: _16@Phi(bb14)
bb15:
  _62 = const b"Invalid ELF magic bytes\n\x00"
  using: 
  _61 = &raw const (*_62)
  using: _62@Mir(bb15[0])
  _60 = move _61 as *const u8 (Pointer(ArrayToPointer))
  using: _61@Mir(bb15[1])
  _59 = move _60 as *const i8 (PtrToPtr)
  using: _60@Mir(bb15[2])
  _58 = move _59 as *mut i8 (PtrToPtr)
  using: _59@Mir(bb15[3])
  goto -> bb37
  using: 
bb16:
  _66 = const b"Invalid ELF class\n\x00"
  using: 
  _65 = &raw const (*_66)
  using: _66@Mir(bb16[0])
  _64 = move _65 as *const u8 (Pointer(ArrayToPointer))
  using: _65@Mir(bb16[1])
  _63 = move _64 as *const i8 (PtrToPtr)
  using: _64@Mir(bb16[2])
  _58 = move _63 as *mut i8 (PtrToPtr)
  using: _63@Mir(bb16[3])
  goto -> bb37
  using: 
bb17:
  _70 = const b"Invalid ELF data\n\x00"
  using: 
  _69 = &raw const (*_70)
  using: _70@Mir(bb17[0])
  _68 = move _69 as *const u8 (Pointer(ArrayToPointer))
  using: _69@Mir(bb17[1])
  _67 = move _68 as *const i8 (PtrToPtr)
  using: _68@Mir(bb17[2])
  _58 = move _67 as *mut i8 (PtrToPtr)
  using: _67@Mir(bb17[3])
  goto -> bb37
  using: 
bb18:
  _74 = const b"Invalid ELF header\n\x00"
  using: 
  _73 = &raw const (*_74)
  using: _74@Mir(bb18[0])
  _72 = move _73 as *const u8 (Pointer(ArrayToPointer))
  using: _73@Mir(bb18[1])
  _71 = move _72 as *const i8 (PtrToPtr)
  using: _72@Mir(bb18[2])
  _58 = move _71 as *mut i8 (PtrToPtr)
  using: _71@Mir(bb18[3])
  goto -> bb37
  using: 
bb19:
  _78 = const b"Invalid bits\n\x00"
  using: 
  _77 = &raw const (*_78)
  using: _78@Mir(bb19[0])
  _76 = move _77 as *const u8 (Pointer(ArrayToPointer))
  using: _77@Mir(bb19[1])
  _75 = move _76 as *const i8 (PtrToPtr)
  using: _76@Mir(bb19[2])
  _58 = move _75 as *mut i8 (PtrToPtr)
  using: _75@Mir(bb19[3])
  goto -> bb37
  using: 
bb20:
  _82 = const b"Invalid endianness\n\x00"
  using: 
  _81 = &raw const (*_82)
  using: _82@Mir(bb20[0])
  _80 = move _81 as *const u8 (Pointer(ArrayToPointer))
  using: _81@Mir(bb20[1])
  _79 = move _80 as *const i8 (PtrToPtr)
  using: _80@Mir(bb20[2])
  _58 = move _79 as *mut i8 (PtrToPtr)
  using: _79@Mir(bb20[3])
  goto -> bb37
  using: 
bb21:
  _86 = const b"Not an ET_EXEC or ET_DYN ELF file\n\x00"
  using: 
  _85 = &raw const (*_86)
  using: _86@Mir(bb21[0])
  _84 = move _85 as *const u8 (Pointer(ArrayToPointer))
  using: _85@Mir(bb21[1])
  _83 = move _84 as *const i8 (PtrToPtr)
  using: _84@Mir(bb21[2])
  _58 = move _83 as *mut i8 (PtrToPtr)
  using: _83@Mir(bb21[3])
  goto -> bb37
  using: 
bb22:
  _90 = const b"Invalid ELF program header offset\n\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb22[0])
  _88 = move _89 as *const u8 (Pointer(ArrayToPointer))
  using: _89@Mir(bb22[1])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb22[2])
  _58 = move _87 as *mut i8 (PtrToPtr)
  using: _87@Mir(bb22[3])
  goto -> bb37
  using: 
bb23:
  _94 = const b"Invalid ELF program header\n\x00"
  using: 
  _93 = &raw const (*_94)
  using: _94@Mir(bb23[0])
  _92 = move _93 as *const u8 (Pointer(ArrayToPointer))
  using: _93@Mir(bb23[1])
  _91 = move _92 as *const i8 (PtrToPtr)
  using: _92@Mir(bb23[2])
  _58 = move _91 as *mut i8 (PtrToPtr)
  using: _91@Mir(bb23[3])
  goto -> bb37
  using: 
bb24:
  _98 = const b"Can\'t stat file\n\x00"
  using: 
  _97 = &raw const (*_98)
  using: _98@Mir(bb24[0])
  _96 = move _97 as *const u8 (Pointer(ArrayToPointer))
  using: _97@Mir(bb24[1])
  _95 = move _96 as *const i8 (PtrToPtr)
  using: _96@Mir(bb24[2])
  _58 = move _95 as *mut i8 (PtrToPtr)
  using: _95@Mir(bb24[3])
  goto -> bb37
  using: 
bb25:
  _102 = const b"Invalid ELF dynamic section\n\x00"
  using: 
  _101 = &raw const (*_102)
  using: _102@Mir(bb25[0])
  _100 = move _101 as *const u8 (Pointer(ArrayToPointer))
  using: _101@Mir(bb25[1])
  _99 = move _100 as *const i8 (PtrToPtr)
  using: _100@Mir(bb25[2])
  _58 = move _99 as *mut i8 (PtrToPtr)
  using: _99@Mir(bb25[3])
  goto -> bb37
  using: 
bb26:
  _106 = const b"Invalid ELF dynamic array entry\n\x00"
  using: 
  _105 = &raw const (*_106)
  using: _106@Mir(bb26[0])
  _104 = move _105 as *const u8 (Pointer(ArrayToPointer))
  using: _105@Mir(bb26[1])
  _103 = move _104 as *const i8 (PtrToPtr)
  using: _104@Mir(bb26[2])
  _58 = move _103 as *mut i8 (PtrToPtr)
  using: _103@Mir(bb26[3])
  goto -> bb37
  using: 
bb27:
  _110 = const b"No ELF string table found\n\x00"
  using: 
  _109 = &raw const (*_110)
  using: _110@Mir(bb27[0])
  _108 = move _109 as *const u8 (Pointer(ArrayToPointer))
  using: _109@Mir(bb27[1])
  _107 = move _108 as *const i8 (PtrToPtr)
  using: _108@Mir(bb27[2])
  _58 = move _107 as *mut i8 (PtrToPtr)
  using: _107@Mir(bb27[3])
  goto -> bb37
  using: 
bb28:
  _114 = const b"Can\'t read DT_SONAME\n\x00"
  using: 
  _113 = &raw const (*_114)
  using: _114@Mir(bb28[0])
  _112 = move _113 as *const u8 (Pointer(ArrayToPointer))
  using: _113@Mir(bb28[1])
  _111 = move _112 as *const i8 (PtrToPtr)
  using: _112@Mir(bb28[2])
  _58 = move _111 as *mut i8 (PtrToPtr)
  using: _111@Mir(bb28[3])
  goto -> bb37
  using: 
bb29:
  _118 = const b"Can\'t read DT_RPATH\n\x00"
  using: 
  _117 = &raw const (*_118)
  using: _118@Mir(bb29[0])
  _116 = move _117 as *const u8 (Pointer(ArrayToPointer))
  using: _117@Mir(bb29[1])
  _115 = move _116 as *const i8 (PtrToPtr)
  using: _116@Mir(bb29[2])
  _58 = move _115 as *mut i8 (PtrToPtr)
  using: _115@Mir(bb29[3])
  goto -> bb37
  using: 
bb30:
  _122 = const b"Can\'t read DT_RUNPATH\n\x00"
  using: 
  _121 = &raw const (*_122)
  using: _122@Mir(bb30[0])
  _120 = move _121 as *const u8 (Pointer(ArrayToPointer))
  using: _121@Mir(bb30[1])
  _119 = move _120 as *const i8 (PtrToPtr)
  using: _120@Mir(bb30[2])
  _58 = move _119 as *mut i8 (PtrToPtr)
  using: _119@Mir(bb30[3])
  goto -> bb37
  using: 
bb31:
  _126 = const b"Can\'t read DT_NEEDED\n\x00"
  using: 
  _125 = &raw const (*_126)
  using: _126@Mir(bb31[0])
  _124 = move _125 as *const u8 (Pointer(ArrayToPointer))
  using: _125@Mir(bb31[1])
  _123 = move _124 as *const i8 (PtrToPtr)
  using: _124@Mir(bb31[2])
  _58 = move _123 as *mut i8 (PtrToPtr)
  using: _123@Mir(bb31[3])
  goto -> bb37
  using: 
bb32:
  _130 = const b"Not all dependencies were found\n\x00"
  using: 
  _129 = &raw const (*_130)
  using: _130@Mir(bb32[0])
  _128 = move _129 as *const u8 (Pointer(ArrayToPointer))
  using: _129@Mir(bb32[1])
  _127 = move _128 as *const i8 (PtrToPtr)
  using: _128@Mir(bb32[2])
  _58 = move _127 as *mut i8 (PtrToPtr)
  using: _127@Mir(bb32[3])
  goto -> bb37
  using: 
bb33:
  _134 = const b"No PT_LOAD found in ELF file\n\x00"
  using: 
  _133 = &raw const (*_134)
  using: _134@Mir(bb33[0])
  _132 = move _133 as *const u8 (Pointer(ArrayToPointer))
  using: _133@Mir(bb33[1])
  _131 = move _132 as *const i8 (PtrToPtr)
  using: _132@Mir(bb33[2])
  _58 = move _131 as *mut i8 (PtrToPtr)
  using: _131@Mir(bb33[3])
  goto -> bb37
  using: 
bb34:
  _138 = const b"Virtual addresses are not ordered\n\x00"
  using: 
  _137 = &raw const (*_138)
  using: _138@Mir(bb34[0])
  _136 = move _137 as *const u8 (Pointer(ArrayToPointer))
  using: _137@Mir(bb34[1])
  _135 = move _136 as *const i8 (PtrToPtr)
  using: _136@Mir(bb34[2])
  _58 = move _135 as *mut i8 (PtrToPtr)
  using: _135@Mir(bb34[3])
  goto -> bb37
  using: 
bb35:
  _142 = const b"Could not open file\n\x00"
  using: 
  _141 = &raw const (*_142)
  using: _142@Mir(bb35[0])
  _140 = move _141 as *const u8 (Pointer(ArrayToPointer))
  using: _141@Mir(bb35[1])
  _139 = move _140 as *const i8 (PtrToPtr)
  using: _140@Mir(bb35[2])
  _58 = move _139 as *mut i8 (PtrToPtr)
  using: _139@Mir(bb35[3])
  goto -> bb37
  using: 
bb36:
  _146 = const b"Incompatible ISA\n\x00"
  using: 
  _145 = &raw const (*_146)
  using: _146@Mir(bb36[0])
  _144 = move _145 as *const u8 (Pointer(ArrayToPointer))
  using: _145@Mir(bb36[1])
  _143 = move _144 as *const i8 (PtrToPtr)
  using: _144@Mir(bb36[2])
  _58 = move _143 as *mut i8 (PtrToPtr)
  using: _143@Mir(bb36[3])
  goto -> bb37
  using: 
bb37:
  _149 = _58
  using: _58@Phi(bb37)
  _148 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _149) -> bb38
  using: _149@Mir(bb37[0])
bb38:
  _147 = Not(move _148)
  using: _148@Mir(bb37[1])
  switchInt(move _147) -> [0: bb40, otherwise: bb39]
  using: _147@Mir(bb38[0])
bb39:
  _152 = _58
  using: _58@Phi(bb37)
  _151 = move _152 as *const i8 (Pointer(MutToConstPointer))
  using: _152@Mir(bb39[0])
  _154 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _153 = (*_154)
  using: _154@Mir(bb39[2])
  _150 = src::libtree::fputs(move _151, move _153) -> bb41
  using: _151@Mir(bb39[1]), _153@Mir(bb39[3])
bb40:
  _157 = _58
  using: _58@Phi(bb37)
  _156 = move _157 as usize (PointerExposeAddress)
  using: _157@Mir(bb40[0])
  _155 = Eq(move _156, const 0_usize)
  using: _156@Mir(bb40[1])
  assume(move _155)
  using: _155@Mir(bb40[2])
  goto -> bb41
  using: 
bb41:
  _160 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _159 = (*_160)
  using: _160@Mir(bb41[0])
  _158 = src::libtree::fflush(move _159) -> bb42
  using: _159@Mir(bb41[1])
bb42:
  _161 = CheckedAdd(_12, const 1_i32)
  using: _12@Phi(bb14)
  assert(!move (_161.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_i32) -> bb43
  using: _161@Entry, _12@Entry
bb43:
  _12 = move (_161.0: i32)
  using: _161@Mir(bb42[0])
  goto -> bb5
  using: 
bb44:
  _163 = _3
  using: _3@Phi(bb5)
  _162 = src::libtree::libtree_state_free(move _163) -> bb45
  using: _163@Mir(bb44[0])
bb45:
  return
  using: _0@Phi(bb14)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2153:20: 2153:38 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_25) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_27) is ignored
rewrite call src::libtree::fflush @ workspace/libtree/src/libtree.rs:2172:9: 2172:23 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2175:13: 2175:76 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2176:26: 2176:44 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2176:13: 2176:53 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2177:13: 2177:72 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2271:13: 2271:31 (#0) by default
rewrite call src::libtree::fflush @ workspace/libtree/src/libtree.rs:2275:9: 2275:23 (#0) by default
@DefId(0:152 ~ lib[40c5]::src::libtree::main_0)
bb0:
  _4 = const {0x0 as *mut i8}
  using: 
  Deinit(_5)
  using: 
  (_5.0: *mut i8) = const {0x0 as *mut i8}
  using: 
  (_5.1: u64) = const 0_u64
  using: 
  (_5.2: u64) = const 0_u64
  using: 
  Deinit(_6)
  using: 
  (_6.0: *mut src::libtree::visited_file_t) = const {0x0 as *mut src::libtree::visited_file_t}
  using: 
  (_6.1: u64) = const 0_u64
  using: 
  (_6.2: u64) = const 0_u64
  using: 
  _7 = const {0x0 as *mut i8}
  using: 
  _8 = const {0x0 as *mut i8}
  using: 
  _9 = const {0x0 as *mut i8}
  using: 
  _10 = const {0x0 as *mut i8}
  using: 
  _11 = [const 0_u64; 32]
  using: 
  _12 = [const 0_i8; 32]
  using: 
  Deinit(_3)
  using: 
  (_3.0: i32) = const 0_i32
  using: 
  (_3.1: i32) = const 0_i32
  using: 
  (_3.2: i32) = const 0_i32
  using: 
  (_3.3: *mut i8) = move _4
  using: _4@Mir(bb0[0])
  (_3.4: u64) = const 0_u64
  using: 
  (_3.5: src::libtree::string_table_t) = move _5
  using: _5@Mir(bb0[1])
  (_3.6: src::libtree::visited_file_array_t) = move _6
  using: _6@Mir(bb0[5])
  (_3.7: *mut i8) = move _7
  using: _7@Mir(bb0[9])
  (_3.8: *mut i8) = move _8
  using: _8@Mir(bb0[10])
  (_3.9: *mut i8) = move _9
  using: _9@Mir(bb0[11])
  (_3.10: *mut i8) = move _10
  using: _10@Mir(bb0[12])
  (_3.11: [u64; 32]) = move _11
  using: _11@Mir(bb0[13])
  (_3.12: u64) = const 0_u64
  using: 
  (_3.13: u64) = const 0_u64
  using: 
  (_3.14: u64) = const 0_u64
  using: 
  (_3.15: [i8; 32]) = move _12
  using: _12@Mir(bb0[14])
  _19 = const b"NO_COLOR\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb0[32])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb0[33])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb0[34])
  _15 = src::libtree::getenv(move _16) -> bb4
  using: _16@Mir(bb0[35])
bb1:
  _13 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _22 = const 1_i32
  using: 
  _21 = src::libtree::isatty(move _22) -> bb6
  using: _22@Mir(bb2[0])
bb3:
  (_3.2: i32) = move _13 as i32 (IntToInt)
  using: _13@Phi(bb3)
  _23 = const 0_i32
  using: 
  (_3.0: i32) = move _23
  using: _23@Mir(bb3[1])
  _24 = const 0_i32
  using: 
  (_3.1: i32) = move _24
  using: _24@Mir(bb3[3])
  _25 = const 32_i32
  using: 
  (_3.4: u64) = move _25 as u64 (IntToInt)
  using: _25@Mir(bb3[5])
  _26 = const 1_i32
  using: 
  _28 = [const 0_i8; 65]
  using: 
  _29 = [const 0_i8; 65]
  using: 
  _30 = [const 0_i8; 65]
  using: 
  _31 = [const 0_i8; 65]
  using: 
  _32 = [const 0_i8; 65]
  using: 
  _33 = [const 0_i8; 65]
  using: 
  Deinit(_27)
  using: 
  (_27.0: [i8; 65]) = move _28
  using: _28@Mir(bb3[8])
  (_27.1: [i8; 65]) = move _29
  using: _29@Mir(bb3[9])
  (_27.2: [i8; 65]) = move _30
  using: _30@Mir(bb3[10])
  (_27.3: [i8; 65]) = move _31
  using: _31@Mir(bb3[11])
  (_27.4: [i8; 65]) = move _32
  using: _32@Mir(bb3[12])
  (_27.5: [i8; 65]) = move _33
  using: _33@Mir(bb3[13])
  _36 = &raw mut _27
  using: _27@Mir(bb3[14])
  _35 = src::libtree::uname(move _36) -> bb7
  using: _36@Mir(bb3[21])
bb4:
  _14 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _15) -> bb5
  using: _15@Mir(bb0[36])
bb5:
  switchInt(move _14) -> [0: bb1, otherwise: bb2]
  using: _14@Mir(bb4[0])
bb6:
  _20 = Ne(move _21, const 0_i32)
  using: _21@Mir(bb2[1])
  _13 = move _20
  using: _20@Mir(bb6[0])
  goto -> bb3
  using: 
bb7:
  _37 = const 0_i32
  using: 
  _34 = Ne(move _35, move _37)
  using: _35@Mir(bb3[22]), _37@Mir(bb7[0])
  switchInt(move _34) -> [0: bb9, otherwise: bb8]
  using: _34@Mir(bb7[1])
bb8:
  _0 = const 1_i32
  using: 
  goto -> bb130
  using: 
bb9:
  _40 = &mut (_27.4: [i8; 65])
  using: _27@Mir(bb3[14])
  _39 = move _40 as &mut [i8] (Pointer(Unsize))
  using: _40@Mir(bb9[0])
  _38 = core::slice::<impl [i8]>::as_mut_ptr(move _39) -> bb10
  using: _39@Mir(bb9[1])
bb10:
  (_3.7: *mut i8) = move _38
  using: _38@Mir(bb9[2])
  _43 = &mut (_27.0: [i8; 65])
  using: _27@Mir(bb3[14])
  _42 = move _43 as &mut [i8] (Pointer(Unsize))
  using: _43@Mir(bb10[1])
  _41 = core::slice::<impl [i8]>::as_mut_ptr(move _42) -> bb11
  using: _42@Mir(bb10[2])
bb11:
  (_3.9: *mut i8) = move _41
  using: _41@Mir(bb10[3])
  _46 = &mut (_27.2: [i8; 65])
  using: _27@Mir(bb3[14])
  _45 = move _46 as &mut [i8] (Pointer(Unsize))
  using: _46@Mir(bb11[1])
  _44 = core::slice::<impl [i8]>::as_mut_ptr(move _45) -> bb12
  using: _45@Mir(bb11[2])
bb12:
  (_3.10: *mut i8) = move _44
  using: _44@Mir(bb11[3])
  _50 = const b"/etc/ld.so.conf\x00"
  using: 
  _49 = &raw const (*_50)
  using: _50@Mir(bb12[1])
  _48 = move _49 as *const u8 (Pointer(ArrayToPointer))
  using: _49@Mir(bb12[2])
  _47 = move _48 as *const i8 (PtrToPtr)
  using: _48@Mir(bb12[3])
  (_3.3: *mut i8) = move _47 as *mut i8 (PtrToPtr)
  using: _47@Mir(bb12[4])
  _56 = &mut (_27.0: [i8; 65])
  using: _27@Mir(bb3[14])
  _55 = move _56 as &mut [i8] (Pointer(Unsize))
  using: _56@Mir(bb12[6])
  _54 = core::slice::<impl [i8]>::as_mut_ptr(move _55) -> bb13
  using: _55@Mir(bb12[7])
bb13:
  _53 = move _54 as *const i8 (Pointer(MutToConstPointer))
  using: _54@Mir(bb12[8])
  _60 = const b"FreeBSD\x00"
  using: 
  _59 = &raw const (*_60)
  using: _60@Mir(bb13[1])
  _58 = move _59 as *const u8 (Pointer(ArrayToPointer))
  using: _59@Mir(bb13[2])
  _57 = move _58 as *const i8 (PtrToPtr)
  using: _58@Mir(bb13[3])
  _52 = src::libtree::strcmp(move _53, move _57) -> bb14
  using: _53@Mir(bb13[0]), _57@Mir(bb13[4])
bb14:
  _61 = const 0_i32
  using: 
  _51 = Eq(move _52, move _61)
  using: _52@Mir(bb13[5]), _61@Mir(bb14[0])
  switchInt(move _51) -> [0: bb16, otherwise: bb15]
  using: _51@Mir(bb14[1])
bb15:
  _65 = const b"/etc/ld-elf.so.conf\x00"
  using: 
  _64 = &raw const (*_65)
  using: _65@Mir(bb15[0])
  _63 = move _64 as *const u8 (Pointer(ArrayToPointer))
  using: _64@Mir(bb15[1])
  _62 = move _63 as *const i8 (PtrToPtr)
  using: _63@Mir(bb15[2])
  (_3.3: *mut i8) = move _62 as *mut i8 (PtrToPtr)
  using: _62@Mir(bb15[3])
  goto -> bb16
  using: 
bb16:
  _69 = const b"lib\x00"
  using: 
  _68 = &raw const (*_69)
  using: _69@Mir(bb16[0])
  _67 = move _68 as *const u8 (Pointer(ArrayToPointer))
  using: _68@Mir(bb16[1])
  _66 = move _67 as *const i8 (PtrToPtr)
  using: _67@Mir(bb16[2])
  (_3.8: *mut i8) = move _66 as *mut i8 (PtrToPtr)
  using: _66@Mir(bb16[3])
  _70 = const 0_i32
  using: 
  _71 = const 0_i32
  using: 
  _72 = const 0_i32
  using: 
  _73 = const 1_i32
  using: 
  goto -> bb17
  using: 
bb17:
  _75 = _73
  using: _73@Phi(bb17)
  _76 = _1
  using: _1@Phi(bb17)
  _74 = Lt(move _75, move _76)
  using: _75@Mir(bb17[0]), _76@Mir(bb17[1])
  switchInt(move _74) -> [0: bb86, otherwise: bb18]
  using: _74@Mir(bb17[2])
bb18:
  _79 = _2
  using: _2@Phi(bb17)
  _81 = _73
  using: _73@Phi(bb17)
  _80 = move _81 as isize (IntToInt)
  using: _81@Mir(bb18[1])
  _78 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _79, move _80) -> bb19
  using: _79@Mir(bb18[0]), _80@Mir(bb18[2])
bb19:
  _77 = (*_78)
  using: _78@Mir(bb18[3])
  _84 = _72
  using: _72@Phi(bb17)
  switchInt(move _84) -> [0: bb24, otherwise: bb23]
  using: _84@Mir(bb19[1])
bb20:
  _82 = const true
  using: 
  goto -> bb22
  using: 
bb21:
  _93 = _77
  using: _77@Phi(bb25)
  _94 = const 1_isize
  using: 
  _92 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _93, move _94) -> bb26
  using: _93@Mir(bb21[0]), _94@Mir(bb21[1])
bb22:
  switchInt(move _82) -> [0: bb30, otherwise: bb27]
  using: _82@Phi(bb22)
bb23:
  _83 = const true
  using: 
  goto -> bb25
  using: 
bb24:
  _87 = (*_77)
  using: _77@Mir(bb19[0])
  _86 = move _87 as i32 (IntToInt)
  using: _87@Mir(bb24[0])
  _88 = const 45_i32
  using: 
  _85 = Ne(move _86, move _88)
  using: _86@Mir(bb24[1]), _88@Mir(bb24[2])
  _83 = move _85
  using: _85@Mir(bb24[3])
  goto -> bb25
  using: 
bb25:
  switchInt(move _83) -> [0: bb21, otherwise: bb20]
  using: _83@Phi(bb25)
bb26:
  _91 = (*_92)
  using: _92@Mir(bb21[2])
  _90 = move _91 as i32 (IntToInt)
  using: _91@Mir(bb26[0])
  _95 = const 0_i32
  using: 
  _89 = Eq(move _90, move _95)
  using: _90@Mir(bb26[1]), _95@Mir(bb26[2])
  _82 = move _89
  using: _89@Mir(bb26[3])
  goto -> bb22
  using: 
bb27:
  _96 = _26
  using: _26@Phi(bb17)
  _97 = _26
  using: _26@Phi(bb17)
  _98 = CheckedAdd(_97, const 1_i32)
  using: _97@Mir(bb27[1])
  assert(!move (_98.1: bool), "attempt to compute `{} + {}`, which would overflow", move _97, const 1_i32) -> bb28
  using: _98@Entry, _97@Entry
bb28:
  _26 = move (_98.0: i32)
  using: _98@Mir(bb27[2])
  _99 = _77
  using: _77@Phi(bb22)
  _101 = _2
  using: _2@Phi(bb17)
  _103 = _96
  using: _96@Mir(bb27[0])
  _102 = move _103 as isize (IntToInt)
  using: _103@Mir(bb28[3])
  _100 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _101, move _102) -> bb29
  using: _101@Mir(bb28[2]), _102@Mir(bb28[4])
bb29:
  (*_100) = move _99
  using: _100@Mir(bb28[5]), _99@Mir(bb28[1])
  goto -> bb84
  using: 
bb30:
  _105 = _77
  using: _77@Phi(bb22)
  _104 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _105, const 1_isize) -> bb31
  using: _105@Mir(bb30[0])
bb31:
  _77 = move _104
  using: _104@Mir(bb30[1])
  _108 = (*_77)
  using: _77@Mir(bb31[0])
  _107 = move _108 as i32 (IntToInt)
  using: _108@Mir(bb31[1])
  _109 = const 45_i32
  using: 
  _106 = Eq(move _107, move _109)
  using: _107@Mir(bb31[2]), _109@Mir(bb31[3])
  switchInt(move _106) -> [0: bb72, otherwise: bb32]
  using: _106@Mir(bb31[4])
bb32:
  _111 = _77
  using: _77@Mir(bb31[0])
  _110 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _111, const 1_isize) -> bb33
  using: _111@Mir(bb32[0])
bb33:
  _77 = move _110
  using: _110@Mir(bb32[1])
  _114 = (*_77)
  using: _77@Mir(bb33[0])
  _113 = move _114 as i32 (IntToInt)
  using: _114@Mir(bb33[1])
  _115 = const 0_i32
  using: 
  _112 = Eq(move _113, move _115)
  using: _113@Mir(bb33[2]), _115@Mir(bb33[3])
  switchInt(move _112) -> [0: bb35, otherwise: bb34]
  using: _112@Mir(bb33[4])
bb34:
  _72 = const 1_i32
  using: 
  goto -> bb84
  using: 
bb35:
  _119 = _77
  using: _77@Mir(bb33[0])
  _118 = move _119 as *const i8 (Pointer(MutToConstPointer))
  using: _119@Mir(bb35[0])
  _123 = const b"version\x00"
  using: 
  _122 = &raw const (*_123)
  using: _123@Mir(bb35[2])
  _121 = move _122 as *const u8 (Pointer(ArrayToPointer))
  using: _122@Mir(bb35[3])
  _120 = move _121 as *const i8 (PtrToPtr)
  using: _121@Mir(bb35[4])
  _117 = src::libtree::strcmp(move _118, move _120) -> bb36
  using: _118@Mir(bb35[1]), _120@Mir(bb35[5])
bb36:
  _124 = const 0_i32
  using: 
  _116 = Eq(move _117, move _124)
  using: _117@Mir(bb35[6]), _124@Mir(bb36[0])
  switchInt(move _116) -> [0: bb38, otherwise: bb37]
  using: _116@Mir(bb36[1])
bb37:
  _71 = const 1_i32
  using: 
  goto -> bb84
  using: 
bb38:
  _128 = _77
  using: _77@Mir(bb33[0])
  _127 = move _128 as *const i8 (Pointer(MutToConstPointer))
  using: _128@Mir(bb38[0])
  _132 = const b"path\x00"
  using: 
  _131 = &raw const (*_132)
  using: _132@Mir(bb38[2])
  _130 = move _131 as *const u8 (Pointer(ArrayToPointer))
  using: _131@Mir(bb38[3])
  _129 = move _130 as *const i8 (PtrToPtr)
  using: _130@Mir(bb38[4])
  _126 = src::libtree::strcmp(move _127, move _129) -> bb39
  using: _127@Mir(bb38[1]), _129@Mir(bb38[5])
bb39:
  _133 = const 0_i32
  using: 
  _125 = Eq(move _126, move _133)
  using: _126@Mir(bb38[6]), _133@Mir(bb39[0])
  switchInt(move _125) -> [0: bb41, otherwise: bb40]
  using: _125@Mir(bb39[1])
bb40:
  _134 = const 1_i32
  using: 
  (_3.1: i32) = move _134
  using: _134@Mir(bb40[0])
  goto -> bb84
  using: 
bb41:
  _138 = _77
  using: _77@Mir(bb33[0])
  _137 = move _138 as *const i8 (Pointer(MutToConstPointer))
  using: _138@Mir(bb41[0])
  _142 = const b"verbose\x00"
  using: 
  _141 = &raw const (*_142)
  using: _142@Mir(bb41[2])
  _140 = move _141 as *const u8 (Pointer(ArrayToPointer))
  using: _141@Mir(bb41[3])
  _139 = move _140 as *const i8 (PtrToPtr)
  using: _140@Mir(bb41[4])
  _136 = src::libtree::strcmp(move _137, move _139) -> bb42
  using: _137@Mir(bb41[1]), _139@Mir(bb41[5])
bb42:
  _143 = const 0_i32
  using: 
  _135 = Eq(move _136, move _143)
  using: _136@Mir(bb41[6]), _143@Mir(bb42[0])
  switchInt(move _135) -> [0: bb45, otherwise: bb43]
  using: _135@Mir(bb42[1])
bb43:
  _144 = CheckedAdd((_3.0: i32), const 1_i32)
  using: _3@Phi(bb17)
  assert(!move (_144.1: bool), "attempt to compute `{} + {}`, which would overflow", (_3.0: i32), const 1_i32) -> bb44
  using: _144@Entry, _3@Entry
bb44:
  (_3.0: i32) = move (_144.0: i32)
  using: _144@Mir(bb43[0])
  goto -> bb84
  using: 
bb45:
  _148 = _77
  using: _77@Mir(bb33[0])
  _147 = move _148 as *const i8 (Pointer(MutToConstPointer))
  using: _148@Mir(bb45[0])
  _152 = const b"help\x00"
  using: 
  _151 = &raw const (*_152)
  using: _152@Mir(bb45[2])
  _150 = move _151 as *const u8 (Pointer(ArrayToPointer))
  using: _151@Mir(bb45[3])
  _149 = move _150 as *const i8 (PtrToPtr)
  using: _150@Mir(bb45[4])
  _146 = src::libtree::strcmp(move _147, move _149) -> bb46
  using: _147@Mir(bb45[1]), _149@Mir(bb45[5])
bb46:
  _153 = const 0_i32
  using: 
  _145 = Eq(move _146, move _153)
  using: _146@Mir(bb45[6]), _153@Mir(bb46[0])
  switchInt(move _145) -> [0: bb48, otherwise: bb47]
  using: _145@Mir(bb46[1])
bb47:
  _70 = const 1_i32
  using: 
  goto -> bb84
  using: 
bb48:
  _157 = _77
  using: _77@Mir(bb33[0])
  _156 = move _157 as *const i8 (Pointer(MutToConstPointer))
  using: _157@Mir(bb48[0])
  _161 = const b"ldconf\x00"
  using: 
  _160 = &raw const (*_161)
  using: _161@Mir(bb48[2])
  _159 = move _160 as *const u8 (Pointer(ArrayToPointer))
  using: _160@Mir(bb48[3])
  _158 = move _159 as *const i8 (PtrToPtr)
  using: _159@Mir(bb48[4])
  _155 = src::libtree::strcmp(move _156, move _158) -> bb49
  using: _156@Mir(bb48[1]), _158@Mir(bb48[5])
bb49:
  _162 = const 0_i32
  using: 
  _154 = Eq(move _155, move _162)
  using: _155@Mir(bb48[6]), _162@Mir(bb49[0])
  switchInt(move _154) -> [0: bb57, otherwise: bb50]
  using: _154@Mir(bb49[1])
bb50:
  _165 = _73
  using: _73@Phi(bb17)
  _166 = const 1_i32
  using: 
  _167 = CheckedAdd(_165, _166)
  using: _165@Mir(bb50[0]), _166@Mir(bb50[1])
  assert(!move (_167.1: bool), "attempt to compute `{} + {}`, which would overflow", move _165, move _166) -> bb51
  using: _167@Entry, _165@Entry, _166@Entry
bb51:
  _164 = move (_167.0: i32)
  using: _167@Mir(bb50[2])
  _168 = _1
  using: _1@Phi(bb17)
  _163 = Eq(move _164, move _168)
  using: _164@Mir(bb51[0]), _168@Mir(bb51[1])
  switchInt(move _163) -> [0: bb54, otherwise: bb52]
  using: _163@Mir(bb51[2])
bb52:
  _173 = const b"Expected value after `--ldconf`\n\x00"
  using: 
  _172 = &raw const (*_173)
  using: _173@Mir(bb52[0])
  _171 = move _172 as *const u8 (Pointer(ArrayToPointer))
  using: _172@Mir(bb52[1])
  _170 = move _171 as *const i8 (PtrToPtr)
  using: _171@Mir(bb52[2])
  _175 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _174 = (*_175)
  using: _175@Mir(bb52[4])
  _169 = src::libtree::fputs(move _170, move _174) -> bb53
  using: _170@Mir(bb52[3]), _174@Mir(bb52[5])
bb53:
  _0 = const 1_i32
  using: 
  goto -> bb130
  using: 
bb54:
  _176 = CheckedAdd(_73, const 1_i32)
  using: _73@Phi(bb17)
  assert(!move (_176.1: bool), "attempt to compute `{} + {}`, which would overflow", _73, const 1_i32) -> bb55
  using: _176@Entry, _73@Entry
bb55:
  _73 = move (_176.0: i32)
  using: _176@Mir(bb54[0])
  _179 = _2
  using: _2@Phi(bb17)
  _181 = _73
  using: _73@Mir(bb55[0])
  _180 = move _181 as isize (IntToInt)
  using: _181@Mir(bb55[2])
  _178 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _179, move _180) -> bb56
  using: _179@Mir(bb55[1]), _180@Mir(bb55[3])
bb56:
  _177 = (*_178)
  using: _178@Mir(bb55[4])
  (_3.3: *mut i8) = move _177
  using: _177@Mir(bb56[0])
  goto -> bb84
  using: 
bb57:
  _185 = _77
  using: _77@Mir(bb33[0])
  _184 = move _185 as *const i8 (Pointer(MutToConstPointer))
  using: _185@Mir(bb57[0])
  _189 = const b"max-depth\x00"
  using: 
  _188 = &raw const (*_189)
  using: _189@Mir(bb57[2])
  _187 = move _188 as *const u8 (Pointer(ArrayToPointer))
  using: _188@Mir(bb57[3])
  _186 = move _187 as *const i8 (PtrToPtr)
  using: _187@Mir(bb57[4])
  _183 = src::libtree::strcmp(move _184, move _186) -> bb58
  using: _184@Mir(bb57[1]), _186@Mir(bb57[5])
bb58:
  _190 = const 0_i32
  using: 
  _182 = Eq(move _183, move _190)
  using: _183@Mir(bb57[6]), _190@Mir(bb58[0])
  switchInt(move _182) -> [0: bb68, otherwise: bb59]
  using: _182@Mir(bb58[1])
bb59:
  _193 = _73
  using: _73@Phi(bb17)
  _194 = const 1_i32
  using: 
  _195 = CheckedAdd(_193, _194)
  using: _193@Mir(bb59[0]), _194@Mir(bb59[1])
  assert(!move (_195.1: bool), "attempt to compute `{} + {}`, which would overflow", move _193, move _194) -> bb60
  using: _195@Entry, _193@Entry, _194@Entry
bb60:
  _192 = move (_195.0: i32)
  using: _195@Mir(bb59[2])
  _196 = _1
  using: _1@Phi(bb17)
  _191 = Eq(move _192, move _196)
  using: _192@Mir(bb60[0]), _196@Mir(bb60[1])
  switchInt(move _191) -> [0: bb63, otherwise: bb61]
  using: _191@Mir(bb60[2])
bb61:
  _201 = const b"Expected value after `--max-depth`\n\x00"
  using: 
  _200 = &raw const (*_201)
  using: _201@Mir(bb61[0])
  _199 = move _200 as *const u8 (Pointer(ArrayToPointer))
  using: _200@Mir(bb61[1])
  _198 = move _199 as *const i8 (PtrToPtr)
  using: _199@Mir(bb61[2])
  _203 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _202 = (*_203)
  using: _203@Mir(bb61[4])
  _197 = src::libtree::fputs(move _198, move _202) -> bb62
  using: _198@Mir(bb61[3]), _202@Mir(bb61[5])
bb62:
  _0 = const 1_i32
  using: 
  goto -> bb130
  using: 
bb63:
  _204 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _205 = CheckedAdd(_73, const 1_i32)
  using: _73@Phi(bb17)
  assert(!move (_205.1: bool), "attempt to compute `{} + {}`, which would overflow", _73, const 1_i32) -> bb64
  using: _205@Entry, _73@Entry
bb64:
  _73 = move (_205.0: i32)
  using: _205@Mir(bb63[1])
  _210 = _2
  using: _2@Phi(bb17)
  _212 = _73
  using: _73@Mir(bb64[0])
  _211 = move _212 as isize (IntToInt)
  using: _212@Mir(bb64[2])
  _209 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _210, move _211) -> bb65
  using: _210@Mir(bb64[1]), _211@Mir(bb64[3])
bb65:
  _208 = (*_209)
  using: _209@Mir(bb64[4])
  _207 = move _208 as *const i8 (Pointer(MutToConstPointer))
  using: _208@Mir(bb65[0])
  _213 = &raw mut _204
  using: _204@Mir(bb63[0])
  _214 = const 10_i32
  using: 
  _206 = src::libtree::strtoul(move _207, move _213, move _214) -> bb66
  using: _207@Mir(bb65[1]), _213@Mir(bb65[2]), _214@Mir(bb65[3])
bb66:
  (_3.4: u64) = move _206
  using: _206@Mir(bb65[4])
  _216 = (_3.4: u64)
  using: _3@Phi(bb17)
  _217 = const 32_u64
  using: 
  _215 = Gt(move _216, move _217)
  using: _216@Mir(bb66[1]), _217@Mir(bb66[2])
  switchInt(move _215) -> [0: bb84, otherwise: bb67]
  using: _215@Mir(bb66[3])
bb67:
  _218 = const 32_i32
  using: 
  (_3.4: u64) = move _218 as u64 (IntToInt)
  using: _218@Mir(bb67[0])
  goto -> bb84
  using: 
bb68:
  _223 = const b"Unrecognized flag `--\x00"
  using: 
  _222 = &raw const (*_223)
  using: _223@Mir(bb68[0])
  _221 = move _222 as *const u8 (Pointer(ArrayToPointer))
  using: _222@Mir(bb68[1])
  _220 = move _221 as *const i8 (PtrToPtr)
  using: _221@Mir(bb68[2])
  _225 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _224 = (*_225)
  using: _225@Mir(bb68[4])
  _219 = src::libtree::fputs(move _220, move _224) -> bb69
  using: _220@Mir(bb68[3]), _224@Mir(bb68[5])
bb69:
  _228 = _77
  using: _77@Mir(bb33[0])
  _227 = move _228 as *const i8 (Pointer(MutToConstPointer))
  using: _228@Mir(bb69[0])
  _230 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _229 = (*_230)
  using: _230@Mir(bb69[2])
  _226 = src::libtree::fputs(move _227, move _229) -> bb70
  using: _227@Mir(bb69[1]), _229@Mir(bb69[3])
bb70:
  _235 = const b"`\n\x00"
  using: 
  _234 = &raw const (*_235)
  using: _235@Mir(bb70[0])
  _233 = move _234 as *const u8 (Pointer(ArrayToPointer))
  using: _234@Mir(bb70[1])
  _232 = move _233 as *const i8 (PtrToPtr)
  using: _233@Mir(bb70[2])
  _237 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _236 = (*_237)
  using: _237@Mir(bb70[4])
  _231 = src::libtree::fputs(move _232, move _236) -> bb71
  using: _232@Mir(bb70[3]), _236@Mir(bb70[5])
bb71:
  _0 = const 1_i32
  using: 
  goto -> bb130
  using: 
bb72:
  _240 = (*_77)
  using: _77@Phi(bb72)
  _239 = move _240 as i32 (IntToInt)
  using: _240@Mir(bb72[0])
  _241 = const 0_i32
  using: 
  _238 = Ne(move _239, move _241)
  using: _239@Mir(bb72[1]), _241@Mir(bb72[2])
  switchInt(move _238) -> [0: bb84, otherwise: bb73]
  using: _238@Mir(bb72[3])
bb73:
  _243 = (*_77)
  using: _77@Phi(bb72)
  _242 = move _243 as i32 (IntToInt)
  using: _243@Mir(bb73[0])
  switchInt(_242) -> [104: bb75, 112: bb76, 118: bb77, otherwise: bb74]
  using: _242@Mir(bb73[1])
bb74:
  _250 = const b"Unrecognized flag `-\x00"
  using: 
  _249 = &raw const (*_250)
  using: _250@Mir(bb74[0])
  _248 = move _249 as *const u8 (Pointer(ArrayToPointer))
  using: _249@Mir(bb74[1])
  _247 = move _248 as *const i8 (PtrToPtr)
  using: _248@Mir(bb74[2])
  _252 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _251 = (*_252)
  using: _252@Mir(bb74[4])
  _246 = src::libtree::fputs(move _247, move _251) -> bb79
  using: _247@Mir(bb74[3]), _251@Mir(bb74[5])
bb75:
  _70 = const 1_i32
  using: 
  goto -> bb82
  using: 
bb76:
  _244 = const 1_i32
  using: 
  (_3.1: i32) = move _244
  using: _244@Mir(bb76[0])
  goto -> bb82
  using: 
bb77:
  _245 = CheckedAdd((_3.0: i32), const 1_i32)
  using: _3@Phi(bb72)
  assert(!move (_245.1: bool), "attempt to compute `{} + {}`, which would overflow", (_3.0: i32), const 1_i32) -> bb78
  using: _245@Entry, _3@Entry
bb78:
  (_3.0: i32) = move (_245.0: i32)
  using: _245@Mir(bb77[0])
  goto -> bb82
  using: 
bb79:
  _255 = _77
  using: _77@Phi(bb72)
  _254 = move _255 as *const i8 (Pointer(MutToConstPointer))
  using: _255@Mir(bb79[0])
  _257 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _256 = (*_257)
  using: _257@Mir(bb79[2])
  _253 = src::libtree::fputs(move _254, move _256) -> bb80
  using: _254@Mir(bb79[1]), _256@Mir(bb79[3])
bb80:
  _262 = const b"`\n\x00"
  using: 
  _261 = &raw const (*_262)
  using: _262@Mir(bb80[0])
  _260 = move _261 as *const u8 (Pointer(ArrayToPointer))
  using: _261@Mir(bb80[1])
  _259 = move _260 as *const i8 (PtrToPtr)
  using: _260@Mir(bb80[2])
  _264 = const {alloc204: *mut *mut src::libtree::_IO_FILE}
  using: 
  _263 = (*_264)
  using: _264@Mir(bb80[4])
  _258 = src::libtree::fputs(move _259, move _263) -> bb81
  using: _259@Mir(bb80[3]), _263@Mir(bb80[5])
bb81:
  _0 = const 1_i32
  using: 
  goto -> bb130
  using: 
bb82:
  _266 = _77
  using: _77@Phi(bb72)
  _265 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _266, const 1_isize) -> bb83
  using: _266@Mir(bb82[0])
bb83:
  _77 = move _265
  using: _265@Mir(bb82[1])
  goto -> bb72
  using: 
bb84:
  _267 = CheckedAdd(_73, const 1_i32)
  using: _73@Phi(bb84)
  assert(!move (_267.1: bool), "attempt to compute `{} + {}`, which would overflow", _73, const 1_i32) -> bb85
  using: _267@Entry, _73@Entry
bb85:
  _73 = move (_267.0: i32)
  using: _267@Mir(bb84[0])
  goto -> bb17
  using: 
bb86:
  _269 = _2
  using: _2@Phi(bb84)
  _268 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _269, const 1_isize) -> bb87
  using: _269@Mir(bb86[0])
bb87:
  _2 = move _268
  using: _268@Mir(bb86[1])
  _270 = CheckedSub(_26, const 1_i32)
  using: _26@Phi(bb84)
  assert(!move (_270.1: bool), "attempt to compute `{} - {}`, which would overflow", _26, const 1_i32) -> bb88
  using: _270@Entry, _26@Entry
bb88:
  _26 = move (_270.0: i32)
  using: _270@Mir(bb87[1])
  _272 = _70
  using: _70@Phi(bb84)
  switchInt(move _272) -> [0: bb90, otherwise: bb89]
  using: _272@Mir(bb88[1])
bb89:
  _271 = const true
  using: 
  goto -> bb91
  using: 
bb90:
  _274 = _71
  using: _71@Phi(bb84)
  switchInt(move _274) -> [0: bb93, otherwise: bb92]
  using: _274@Mir(bb90[0])
bb91:
  switchInt(move _271) -> [0: bb126, otherwise: bb95]
  using: _271@Phi(bb91)
bb92:
  _273 = const false
  using: 
  goto -> bb94
  using: 
bb93:
  _276 = _26
  using: _26@Mir(bb88[0])
  _277 = const 0_i32
  using: 
  _275 = Eq(move _276, move _277)
  using: _276@Mir(bb93[0]), _277@Mir(bb93[1])
  _273 = move _275
  using: _275@Mir(bb93[2])
  goto -> bb94
  using: 
bb94:
  _271 = move _273
  using: _273@Phi(bb94)
  goto -> bb91
  using: 
bb95:
  _282 = const b"Show the dynamic dependency tree of ELF files\nUsage: libtree [OPTION]... [--] FILE [FILES]...\n\n  -h, --help     Print help info\n      --version  Print version info\n\nFile names starting with \'-\', for example \'-.so\', can be specified as follows:\n  libtree -- -.so\n\nLocating libs options:\n  -p, --path       Show the path of libraries instead of the soname\n  -v               Show libraries skipped by default*\n  -vv              Show dependencies of libraries skipped by default*\n  -vvv             Show dependencies of already encountered libraries\n  --ldconf <path>  Config file for extra search paths [\x00"
  using: 
  _281 = &raw const (*_282)
  using: _282@Mir(bb95[0])
  _280 = move _281 as *const u8 (Pointer(ArrayToPointer))
  using: _281@Mir(bb95[1])
  _279 = move _280 as *const i8 (PtrToPtr)
  using: _280@Mir(bb95[2])
  _284 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _283 = (*_284)
  using: _284@Mir(bb95[4])
  _278 = src::libtree::fputs(move _279, move _283) -> bb96
  using: _279@Mir(bb95[3]), _283@Mir(bb95[5])
bb96:
  _287 = (_3.3: *mut i8)
  using: _3@Phi(bb84)
  _286 = move _287 as *const i8 (Pointer(MutToConstPointer))
  using: _287@Mir(bb96[0])
  _289 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _288 = (*_289)
  using: _289@Mir(bb96[2])
  _285 = src::libtree::fputs(move _286, move _288) -> bb97
  using: _286@Mir(bb96[1]), _288@Mir(bb96[3])
bb97:
  _294 = const b"]\n  --max-depth <n>  Limit library traversal to at most n levels of depth\n\n* For brevity, the following libraries are not shown by default:\n  \x00"
  using: 
  _293 = &raw const (*_294)
  using: _294@Mir(bb97[0])
  _292 = move _293 as *const u8 (Pointer(ArrayToPointer))
  using: _293@Mir(bb97[1])
  _291 = move _292 as *const i8 (PtrToPtr)
  using: _292@Mir(bb97[2])
  _296 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _295 = (*_296)
  using: _296@Mir(bb97[4])
  _290 = src::libtree::fputs(move _291, move _295) -> bb98
  using: _291@Mir(bb97[3]), _295@Mir(bb97[5])
bb98:
  _299 = std::mem::size_of::<[*const i8; 14]>() -> bb99
  using: 
bb99:
  _298 = move _299 as u64 (IntToInt)
  using: _299@Mir(bb98[0])
  _301 = std::mem::size_of::<*mut i8>() -> bb100
  using: 
bb100:
  _300 = move _301 as u64 (IntToInt)
  using: _301@Mir(bb99[1])
  _297 = core::num::<impl u64>::wrapping_div(move _298, move _300) -> bb101
  using: _298@Mir(bb99[0]), _300@Mir(bb100[0])
bb101:
  _302 = const 3_u64
  using: 
  _303 = const 0_u64
  using: 
  goto -> bb102
  using: 
bb102:
  _305 = _303
  using: _303@Phi(bb102)
  _306 = _297
  using: _297@Phi(bb102)
  _304 = Lt(move _305, move _306)
  using: _305@Mir(bb102[0]), _306@Mir(bb102[1])
  switchInt(move _304) -> [0: bb115, otherwise: bb103]
  using: _304@Mir(bb102[2])
bb103:
  _308 = _302
  using: _302@Phi(bb102)
  _311 = const {alloc26: *mut [*const i8; 14]}
  using: 
  _313 = _303
  using: _303@Phi(bb102)
  _312 = move _313 as usize (IntToInt)
  using: _313@Mir(bb103[2])
  _314 = const 14_usize
  using: 
  _315 = Lt(_312, _314)
  using: _312@Mir(bb103[3]), _314@Mir(bb103[4])
  assert(move _315, "index out of bounds: the length is {} but the index is {}", move _314, _312) -> bb104
  using: _315@Entry, _314@Entry, _312@Entry
bb104:
  _310 = (*_311)[_312]
  using: _311@Mir(bb103[1]), _312@Mir(bb103[3])
  _309 = src::libtree::strlen(move _310) -> bb105
  using: _310@Mir(bb104[0])
bb105:
  _307 = core::num::<impl u64>::wrapping_add(move _308, move _309) -> bb106
  using: _308@Mir(bb103[0]), _309@Mir(bb104[1])
bb106:
  _302 = move _307
  using: _307@Mir(bb105[0])
  _317 = _302
  using: _302@Mir(bb106[0])
  _318 = const 60_u64
  using: 
  _316 = Gt(move _317, move _318)
  using: _317@Mir(bb106[1]), _318@Mir(bb106[2])
  switchInt(move _316) -> [0: bb108, otherwise: bb107]
  using: _316@Mir(bb106[3])
bb107:
  _302 = const 3_u64
  using: 
  _323 = const b"\n  \x00"
  using: 
  _322 = &raw const (*_323)
  using: _323@Mir(bb107[1])
  _321 = move _322 as *const u8 (Pointer(ArrayToPointer))
  using: _322@Mir(bb107[2])
  _320 = move _321 as *const i8 (PtrToPtr)
  using: _321@Mir(bb107[3])
  _325 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _324 = (*_325)
  using: _325@Mir(bb107[5])
  _319 = src::libtree::fputs(move _320, move _324) -> bb108
  using: _320@Mir(bb107[4]), _324@Mir(bb107[6])
bb108:
  _328 = const {alloc26: *mut [*const i8; 14]}
  using: 
  _330 = _303
  using: _303@Phi(bb102)
  _329 = move _330 as usize (IntToInt)
  using: _330@Mir(bb108[1])
  _331 = const 14_usize
  using: 
  _332 = Lt(_329, _331)
  using: _329@Mir(bb108[2]), _331@Mir(bb108[3])
  assert(move _332, "index out of bounds: the length is {} but the index is {}", move _331, _329) -> bb109
  using: _332@Entry, _331@Entry, _329@Entry
bb109:
  _327 = (*_328)[_329]
  using: _328@Mir(bb108[0]), _329@Mir(bb108[2])
  _334 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _333 = (*_334)
  using: _334@Mir(bb109[1])
  _326 = src::libtree::fputs(move _327, move _333) -> bb110
  using: _327@Mir(bb109[0]), _333@Mir(bb109[2])
bb110:
  _337 = _303
  using: _303@Phi(bb102)
  _338 = const 1_u64
  using: 
  _336 = core::num::<impl u64>::wrapping_add(move _337, move _338) -> bb111
  using: _337@Mir(bb110[0]), _338@Mir(bb110[1])
bb111:
  _339 = _297
  using: _297@Phi(bb102)
  _335 = Ne(move _336, move _339)
  using: _336@Mir(bb110[2]), _339@Mir(bb111[0])
  switchInt(move _335) -> [0: bb113, otherwise: bb112]
  using: _335@Mir(bb111[1])
bb112:
  _344 = const b", \x00"
  using: 
  _343 = &raw const (*_344)
  using: _344@Mir(bb112[0])
  _342 = move _343 as *const u8 (Pointer(ArrayToPointer))
  using: _343@Mir(bb112[1])
  _341 = move _342 as *const i8 (PtrToPtr)
  using: _342@Mir(bb112[2])
  _346 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _345 = (*_346)
  using: _346@Mir(bb112[4])
  _340 = src::libtree::fputs(move _341, move _345) -> bb113
  using: _341@Mir(bb112[3]), _345@Mir(bb112[5])
bb113:
  _348 = _303
  using: _303@Phi(bb102)
  _347 = core::num::<impl u64>::wrapping_add(move _348, const 1_u64) -> bb114
  using: _348@Mir(bb113[0])
bb114:
  _303 = move _347
  using: _347@Mir(bb113[1])
  goto -> bb102
  using: 
bb115:
  _353 = const b".\n\nThe following rpath/runpath substitutions are used:\n\x00"
  using: 
  _352 = &raw const (*_353)
  using: _353@Mir(bb115[0])
  _351 = move _352 as *const u8 (Pointer(ArrayToPointer))
  using: _352@Mir(bb115[1])
  _350 = move _351 as *const i8 (PtrToPtr)
  using: _351@Mir(bb115[2])
  _355 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _354 = (*_355)
  using: _355@Mir(bb115[4])
  _349 = src::libtree::fputs(move _350, move _354) -> bb116
  using: _350@Mir(bb115[3]), _354@Mir(bb115[5])
bb116:
  _360 = const b"  PLATFORM       \x00"
  using: 
  _359 = &raw const (*_360)
  using: _360@Mir(bb116[0])
  _358 = move _359 as *const u8 (Pointer(ArrayToPointer))
  using: _359@Mir(bb116[1])
  _357 = move _358 as *const i8 (PtrToPtr)
  using: _358@Mir(bb116[2])
  _362 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _361 = (*_362)
  using: _362@Mir(bb116[4])
  _356 = src::libtree::fputs(move _357, move _361) -> bb117
  using: _357@Mir(bb116[3]), _361@Mir(bb116[5])
bb117:
  _365 = (_3.7: *mut i8)
  using: _3@Phi(bb84)
  _364 = move _365 as *const i8 (Pointer(MutToConstPointer))
  using: _365@Mir(bb117[0])
  _367 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _366 = (*_367)
  using: _367@Mir(bb117[2])
  _363 = src::libtree::fputs(move _364, move _366) -> bb118
  using: _364@Mir(bb117[1]), _366@Mir(bb117[3])
bb118:
  _372 = const b"\n  LIB            \x00"
  using: 
  _371 = &raw const (*_372)
  using: _372@Mir(bb118[0])
  _370 = move _371 as *const u8 (Pointer(ArrayToPointer))
  using: _371@Mir(bb118[1])
  _369 = move _370 as *const i8 (PtrToPtr)
  using: _370@Mir(bb118[2])
  _374 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _373 = (*_374)
  using: _374@Mir(bb118[4])
  _368 = src::libtree::fputs(move _369, move _373) -> bb119
  using: _369@Mir(bb118[3]), _373@Mir(bb118[5])
bb119:
  _377 = (_3.8: *mut i8)
  using: _3@Phi(bb84)
  _376 = move _377 as *const i8 (Pointer(MutToConstPointer))
  using: _377@Mir(bb119[0])
  _379 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _378 = (*_379)
  using: _379@Mir(bb119[2])
  _375 = src::libtree::fputs(move _376, move _378) -> bb120
  using: _376@Mir(bb119[1]), _378@Mir(bb119[3])
bb120:
  _384 = const b"\n  OSNAME         \x00"
  using: 
  _383 = &raw const (*_384)
  using: _384@Mir(bb120[0])
  _382 = move _383 as *const u8 (Pointer(ArrayToPointer))
  using: _383@Mir(bb120[1])
  _381 = move _382 as *const i8 (PtrToPtr)
  using: _382@Mir(bb120[2])
  _386 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _385 = (*_386)
  using: _386@Mir(bb120[4])
  _380 = src::libtree::fputs(move _381, move _385) -> bb121
  using: _381@Mir(bb120[3]), _385@Mir(bb120[5])
bb121:
  _389 = (_3.9: *mut i8)
  using: _3@Phi(bb84)
  _388 = move _389 as *const i8 (Pointer(MutToConstPointer))
  using: _389@Mir(bb121[0])
  _391 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _390 = (*_391)
  using: _391@Mir(bb121[2])
  _387 = src::libtree::fputs(move _388, move _390) -> bb122
  using: _388@Mir(bb121[1]), _390@Mir(bb121[3])
bb122:
  _396 = const b"\n  OSREL          \x00"
  using: 
  _395 = &raw const (*_396)
  using: _396@Mir(bb122[0])
  _394 = move _395 as *const u8 (Pointer(ArrayToPointer))
  using: _395@Mir(bb122[1])
  _393 = move _394 as *const i8 (PtrToPtr)
  using: _394@Mir(bb122[2])
  _398 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _397 = (*_398)
  using: _398@Mir(bb122[4])
  _392 = src::libtree::fputs(move _393, move _397) -> bb123
  using: _393@Mir(bb122[3]), _397@Mir(bb122[5])
bb123:
  _401 = (_3.10: *mut i8)
  using: _3@Phi(bb84)
  _400 = move _401 as *const i8 (Pointer(MutToConstPointer))
  using: _401@Mir(bb123[0])
  _403 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _402 = (*_403)
  using: _403@Mir(bb123[2])
  _399 = src::libtree::fputs(move _400, move _402) -> bb124
  using: _400@Mir(bb123[1]), _402@Mir(bb123[3])
bb124:
  _405 = const 10_i32
  using: 
  _404 = src::libtree::putchar(move _405) -> bb125
  using: _405@Mir(bb124[0])
bb125:
  _407 = _70
  using: _70@Phi(bb84)
  _406 = Eq(move _407, const 0_i32)
  using: _407@Mir(bb125[0])
  _0 = move _406 as i32 (IntToInt)
  using: _406@Mir(bb125[1])
  goto -> bb130
  using: 
bb126:
  _408 = _71
  using: _71@Phi(bb91)
  switchInt(move _408) -> [0: bb128, otherwise: bb127]
  using: _408@Mir(bb126[0])
bb127:
  _413 = const b"3.1.1\x00"
  using: 
  _412 = &raw const (*_413)
  using: _413@Mir(bb127[0])
  _411 = move _412 as *const u8 (Pointer(ArrayToPointer))
  using: _412@Mir(bb127[1])
  _410 = move _411 as *const i8 (PtrToPtr)
  using: _411@Mir(bb127[2])
  _409 = src::libtree::puts(move _410) -> bb129
  using: _410@Mir(bb127[3])
bb128:
  _414 = _26
  using: _26@Phi(bb91)
  _415 = _2
  using: _2@Mir(bb87[0])
  _416 = &raw mut _3
  using: _3@Phi(bb84)
  _0 = src::libtree::print_tree(move _414, move _415, move _416) -> bb130
  using: _414@Mir(bb128[0]), _415@Mir(bb128[1]), _416@Mir(bb128[2])
bb129:
  _0 = const 0_i32
  using: 
  goto -> bb130
  using: 
bb130:
  return
  using: _0@Phi(bb130)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_5) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_6) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_3) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_u64; 32] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 32] is not supported
rewrite call src::libtree::getenv @ workspace/libtree/src/libtree.rs:2310:16: 2310:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::isatty @ workspace/libtree/src/libtree.rs:2311:12: 2311:36 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_27) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 65] is not supported
rewrite call src::libtree::uname @ workspace/libtree/src/libtree.rs:2324:8: 2324:33 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2331:8: 2334:6 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2345:29: 2345:47 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2348:21: 2348:54 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2352:19: 2352:43 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2354:23: 2354:32 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2356:27: 2356:36 (#0) by default
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2359:27: 2359:88 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2363:27: 2363:85 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2367:27: 2367:88 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2371:27: 2371:85 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2375:27: 2375:87 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2379:25: 2383:26 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2387:44: 2387:62 (#0) by default
rewrite call src::libtree::strcmp @ workspace/libtree/src/libtree.rs:2388:27: 2388:90 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2392:25: 2396:26 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2401:49: 2401:67 (#0) by default
rewrite call src::libtree::strtoul @ workspace/libtree/src/libtree.rs:2401:35: 2401:101 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2406:21: 2409:22 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2410:21: 2410:39 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2411:21: 2411:80 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2427:29: 2430:30 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2431:29: 2431:47 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2432:29: 2432:88 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2436:31: 2436:40 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libtree/src/libtree.rs:2442:17: 2442:26 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2445:9: 2449:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2450:9: 2450:38 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2451:9: 2455:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:2456:33: 2456:83 (#0) by default
rewrite call std::mem::size_of @ workspace/libtree/src/libtree.rs:2458:27: 2458:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libtree/src/libtree.rs:2458:14: 2458:87 (#0) by default
rewrite call src::libtree::strlen @ workspace/libtree/src/libtree.rs:2462:65: 2462:97 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2462:52: 2462:98 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2466:17: 2466:77 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2468:13: 2468:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2469:18: 2469:65 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2470:17: 2470:75 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libtree/src/libtree.rs:2472:19: 2472:34 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2474:9: 2478:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2479:9: 2482:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2483:9: 2483:34 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2484:9: 2487:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2488:9: 2488:29 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2489:9: 2492:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2493:9: 2493:32 (#0) by default
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2494:9: 2497:10 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::libtree::fputs @ workspace/libtree/src/libtree.rs:2498:9: 2498:31 (#0) by default
rewrite call src::libtree::puts @ workspace/libtree/src/libtree.rs:2503:9: 2503:61 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
use ::libc;
extern "C" {
    static mut stdout: *mut _IO_FILE;
    static mut stderr: *mut _IO_FILE;
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    fn fflush(__stream: *mut FILE) -> libc::c_int;
    fn fopen(__filename: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
    fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    fn _IO_getc(__fp: *mut _IO_FILE) -> libc::c_int;
    fn _IO_putc(__c: libc::c_int, __fp: *mut _IO_FILE) -> libc::c_int;
    fn puts(__s: *const libc::c_char) -> libc::c_int;
    fn fread(__ptr: *mut libc::c_void, __size: size_t, __n: size_t, __stream: *mut FILE) -> size_t;
    fn fwrite(__ptr: *const libc::c_void, __size: size_t, __n: size_t, __s: *mut FILE) -> size_t;
    fn fseek(__stream: *mut FILE, __off: libc::c_long, __whence: libc::c_int) -> libc::c_int;
    fn strtoul(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulong;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn free(__ptr: *mut libc::c_void);
    fn exit(_: libc::c_int) -> !;
    fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong) -> *mut libc::c_void;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(_: *const libc::c_char, _: *const libc::c_char, _: libc::c_ulong) -> libc::c_int;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strrchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn glob(
        __pattern: *const libc::c_char,
        __flags: libc::c_int,
        __errfunc: Option<unsafe extern "C" fn(*const libc::c_char, libc::c_int) -> libc::c_int>,
        __pglob: *mut glob_t,
    ) -> libc::c_int;
    fn globfree(__pglob: *mut glob_t);
    fn __xstat(
        __ver: libc::c_int,
        __filename: *const libc::c_char,
        __stat_buf: *mut stat,
    ) -> libc::c_int;
    fn uname(__name: *mut utsname) -> libc::c_int;
    fn isatty(__fd: libc::c_int) -> libc::c_int;
}
pub type __uint8_t = libc::c_uchar;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __ino64_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type __syscall_ulong_t = libc::c_ulong;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint8_t = __uint8_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *const libc::c_char,
    pub _IO_read_end: *const libc::c_char,
    pub _IO_read_base: *const libc::c_char,
    pub _IO_write_base: *const libc::c_char,
    pub _IO_write_ptr: *const libc::c_char,
    pub _IO_write_end: *const libc::c_char,
    pub _IO_buf_base: *const libc::c_char,
    pub _IO_buf_end: *const libc::c_char,
    pub _IO_save_base: *const libc::c_char,
    pub _IO_backup_base: *const libc::c_char,
    pub _IO_save_end: *const libc::c_char,
    pub _markers: *const _IO_marker,
    pub _chain: *const _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *const libc::c_void,
    pub _offset: __off64_t,
    pub __pad1: *const libc::c_void,
    pub __pad2: *const libc::c_void,
    pub __pad3: *const libc::c_void,
    pub __pad4: *const libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
impl Default for _IO_FILE {fn default() -> Self {Self {
_flags: Default::default(),
_IO_read_ptr: std::ptr::null_mut(),
_IO_read_end: std::ptr::null_mut(),
_IO_read_base: std::ptr::null_mut(),
_IO_write_base: std::ptr::null_mut(),
_IO_write_ptr: std::ptr::null_mut(),
_IO_write_end: std::ptr::null_mut(),
_IO_buf_base: std::ptr::null_mut(),
_IO_buf_end: std::ptr::null_mut(),
_IO_save_base: std::ptr::null_mut(),
_IO_backup_base: std::ptr::null_mut(),
_IO_save_end: std::ptr::null_mut(),
_markers: std::ptr::null_mut(),
_chain: std::ptr::null_mut(),
_fileno: Default::default(),
_flags2: Default::default(),
_old_offset: Default::default(),
_cur_column: Default::default(),
_vtable_offset: Default::default(),
_shortbuf: Default::default(),
_lock: std::ptr::null_mut(),
_offset: Default::default(),
__pad1: std::ptr::null_mut(),
__pad2: std::ptr::null_mut(),
__pad3: std::ptr::null_mut(),
__pad4: std::ptr::null_mut(),
__pad5: Default::default(),
_mode: Default::default(),
_unused2: Default::default(),
}}}

pub type _IO_lock_t = ();
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_marker {
    pub _next: *const _IO_marker,
    pub _sbuf: *const _IO_FILE,
    pub _pos: libc::c_int,
}
impl Default for _IO_marker {fn default() -> Self {Self {
_next: std::ptr::null_mut(),
_sbuf: std::ptr::null_mut(),
_pos: Default::default(),
}}}

pub type FILE = _IO_FILE;
pub type C2RustUnnamed = libc::c_uint;
pub const _ISalnum: C2RustUnnamed = 8;
pub const _ISpunct: C2RustUnnamed = 4;
pub const _IScntrl: C2RustUnnamed = 2;
pub const _ISblank: C2RustUnnamed = 1;
pub const _ISgraph: C2RustUnnamed = 32768;
pub const _ISprint: C2RustUnnamed = 16384;
pub const _ISspace: C2RustUnnamed = 8192;
pub const _ISxdigit: C2RustUnnamed = 4096;
pub const _ISdigit: C2RustUnnamed = 2048;
pub const _ISalpha: C2RustUnnamed = 1024;
pub const _ISlower: C2RustUnnamed = 512;
pub const _ISupper: C2RustUnnamed = 256;
pub type __size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct glob_t {
    pub gl_pathc: __size_t,
    pub gl_pathv: *mut *mut libc::c_char,
    pub gl_offs: __size_t,
    pub gl_flags: libc::c_int,
    pub gl_closedir: Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    pub gl_readdir: Option<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>,
    pub gl_opendir: Option<unsafe extern "C" fn(*const libc::c_char) -> *mut libc::c_void>,
    pub gl_lstat:
        Option<unsafe extern "C" fn(*const libc::c_char, *mut libc::c_void) -> libc::c_int>,
    pub gl_stat:
        Option<unsafe extern "C" fn(*const libc::c_char, *mut libc::c_void) -> libc::c_int>,
}
impl Default for glob_t {fn default() -> Self {Self {
gl_pathc: Default::default(),
gl_pathv: std::ptr::null_mut(),
gl_offs: Default::default(),
gl_flags: Default::default(),
gl_closedir: Default::default(),
gl_readdir: Default::default(),
gl_opendir: Default::default(),
gl_lstat: Default::default(),
gl_stat: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atime: __time_t,
    pub st_atimensec: __syscall_ulong_t,
    pub st_mtime: __time_t,
    pub st_mtimensec: __syscall_ulong_t,
    pub st_ctime: __time_t,
    pub st_ctimensec: __syscall_ulong_t,
    pub __glibc_reserved: [__syscall_slong_t; 3],
}
impl Default for stat {fn default() -> Self {Self {
st_dev: Default::default(),
st_ino: Default::default(),
st_nlink: Default::default(),
st_mode: Default::default(),
st_uid: Default::default(),
st_gid: Default::default(),
__pad0: Default::default(),
st_rdev: Default::default(),
st_size: Default::default(),
st_blksize: Default::default(),
st_blocks: Default::default(),
st_atime: Default::default(),
st_atimensec: Default::default(),
st_mtime: Default::default(),
st_mtimensec: Default::default(),
st_ctime: Default::default(),
st_ctimensec: Default::default(),
__glibc_reserved: Default::default(),
}}}

pub type ino_t = __ino64_t;
pub type dev_t = __dev_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct utsname {
    pub sysname: [libc::c_char; 65],
    pub nodename: [libc::c_char; 65],
    pub release: [libc::c_char; 65],
    pub version: [libc::c_char; 65],
    pub machine: [libc::c_char; 65],
    pub __domainname: [libc::c_char; 65],
}
impl Default for utsname {fn default() -> Self {Self {
sysname: Default::default(),
nodename: Default::default(),
release: Default::default(),
version: Default::default(),
machine: Default::default(),
__domainname: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct header_64_t {
    pub e_type: uint16_t,
    pub e_machine: uint16_t,
    pub e_version: uint32_t,
    pub e_entry: uint64_t,
    pub e_phoff: uint64_t,
    pub e_shoff: uint64_t,
    pub e_flags: uint32_t,
    pub e_ehsize: uint16_t,
    pub e_phentsize: uint16_t,
    pub e_phnum: uint16_t,
    pub e_shentsize: uint16_t,
    pub e_shnum: uint16_t,
    pub e_shstrndx: uint16_t,
}
impl Default for header_64_t {fn default() -> Self {Self {
e_type: Default::default(),
e_machine: Default::default(),
e_version: Default::default(),
e_entry: Default::default(),
e_phoff: Default::default(),
e_shoff: Default::default(),
e_flags: Default::default(),
e_ehsize: Default::default(),
e_phentsize: Default::default(),
e_phnum: Default::default(),
e_shentsize: Default::default(),
e_shnum: Default::default(),
e_shstrndx: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct header_32_t {
    pub e_type: uint16_t,
    pub e_machine: uint16_t,
    pub e_version: uint32_t,
    pub e_entry: uint32_t,
    pub e_phoff: uint32_t,
    pub e_shoff: uint32_t,
    pub e_flags: uint32_t,
    pub e_ehsize: uint16_t,
    pub e_phentsize: uint16_t,
    pub e_phnum: uint16_t,
    pub e_shentsize: uint16_t,
    pub e_shnum: uint16_t,
    pub e_shstrndx: uint16_t,
}
impl Default for header_32_t {fn default() -> Self {Self {
e_type: Default::default(),
e_machine: Default::default(),
e_version: Default::default(),
e_entry: Default::default(),
e_phoff: Default::default(),
e_shoff: Default::default(),
e_flags: Default::default(),
e_ehsize: Default::default(),
e_phentsize: Default::default(),
e_phnum: Default::default(),
e_shentsize: Default::default(),
e_shnum: Default::default(),
e_shstrndx: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct prog_64_t {
    pub p_type: uint32_t,
    pub p_flags: uint32_t,
    pub p_offset: uint64_t,
    pub p_vaddr: uint64_t,
    pub p_paddr: uint64_t,
    pub p_filesz: uint64_t,
    pub p_memsz: uint64_t,
    pub p_align: uint64_t,
}
impl Default for prog_64_t {fn default() -> Self {Self {
p_type: Default::default(),
p_flags: Default::default(),
p_offset: Default::default(),
p_vaddr: Default::default(),
p_paddr: Default::default(),
p_filesz: Default::default(),
p_memsz: Default::default(),
p_align: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct prog_32_t {
    pub p_type: uint32_t,
    pub p_offset: uint32_t,
    pub p_vaddr: uint32_t,
    pub p_paddr: uint32_t,
    pub p_filesz: uint32_t,
    pub p_memsz: uint32_t,
    pub p_flags: uint32_t,
    pub p_align: uint32_t,
}
impl Default for prog_32_t {fn default() -> Self {Self {
p_type: Default::default(),
p_offset: Default::default(),
p_vaddr: Default::default(),
p_paddr: Default::default(),
p_filesz: Default::default(),
p_memsz: Default::default(),
p_flags: Default::default(),
p_align: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct dyn_64_t {
    pub d_tag: int64_t,
    pub d_val: uint64_t,
}
impl Default for dyn_64_t {fn default() -> Self {Self {
d_tag: Default::default(),
d_val: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct dyn_32_t {
    pub d_tag: int32_t,
    pub d_val: uint32_t,
}
impl Default for dyn_32_t {fn default() -> Self {Self {
d_tag: Default::default(),
d_val: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct compat_t {
    pub any: libc::c_char,
    pub class: uint8_t,
    pub machine: uint16_t,
}
impl Default for compat_t {fn default() -> Self {Self {
any: Default::default(),
class: Default::default(),
machine: Default::default(),
}}}

pub type how_t = libc::c_uint;
pub const DEFAULT: how_t = 6;
pub const LD_SO_CONF: how_t = 5;
pub const RUNPATH: how_t = 4;
pub const LD_LIBRARY_PATH: how_t = 3;
pub const RPATH: how_t = 2;
pub const DIRECT: how_t = 1;
pub const INPUT: how_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct found_t {
    pub how: how_t,
    pub depth: size_t,
}
impl Default for found_t {fn default() -> Self {Self {
how: Default::default(),
depth: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct string_table_t {
    pub arr: *mut libc::c_char,
    pub n: size_t,
    pub capacity: size_t,
}
impl Default for string_table_t {fn default() -> Self {Self {
arr: std::ptr::null_mut(),
n: Default::default(),
capacity: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct visited_file_t {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
}
impl Default for visited_file_t {fn default() -> Self {Self {
st_dev: Default::default(),
st_ino: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct visited_file_array_t {
    pub arr: *mut visited_file_t,
    pub n: size_t,
    pub capacity: size_t,
}
impl Default for visited_file_array_t {fn default() -> Self {Self {
arr: std::ptr::null_mut(),
n: Default::default(),
capacity: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct libtree_state_t {
    pub verbosity: libc::c_int,
    pub path: libc::c_int,
    pub color: libc::c_int,
    pub ld_conf_file: *mut libc::c_char,
    pub max_depth: libc::c_ulong,
    pub string_table: string_table_t,
    pub visited: visited_file_array_t,
    pub PLATFORM: *mut libc::c_char,
    pub LIB: *mut libc::c_char,
    pub OSNAME: *mut libc::c_char,
    pub OSREL: *mut libc::c_char,
    pub rpath_offsets: [size_t; 32],
    pub ld_library_path_offset: size_t,
    pub default_paths_offset: size_t,
    pub ld_so_conf_offset: size_t,
    pub found_all_needed: [libc::c_char; 32],
}
impl Default for libtree_state_t {fn default() -> Self {Self {
verbosity: Default::default(),
path: Default::default(),
color: Default::default(),
ld_conf_file: std::ptr::null_mut(),
max_depth: Default::default(),
string_table: Default::default(),
visited: Default::default(),
PLATFORM: std::ptr::null_mut(),
LIB: std::ptr::null_mut(),
OSNAME: std::ptr::null_mut(),
OSREL: std::ptr::null_mut(),
rpath_offsets: Default::default(),
ld_library_path_offset: Default::default(),
default_paths_offset: Default::default(),
ld_so_conf_offset: Default::default(),
found_all_needed: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct small_vec_u64_t {
    pub buf: [uint64_t; 16],
    pub p: *mut uint64_t,
    pub n: size_t,
    pub capacity: size_t,
}
impl Default for small_vec_u64_t {fn default() -> Self {Self {
buf: Default::default(),
p: std::ptr::null_mut(),
n: Default::default(),
capacity: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_0 {
    pub p64: prog_64_t,
    pub p32: prog_32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_1 {
    pub h64: header_64_t,
    pub h32: header_32_t,
}
#[inline]
unsafe extern "C" fn putchar(mut __c: libc::c_int) -> libc::c_int {
    return _IO_putc(__c, stdout);
}
#[inline]
unsafe extern "C" fn stat(
    mut __path: *const libc::c_char,
    mut __statbuf: *mut stat,
) -> libc::c_int {
    return __xstat(1 as libc::c_int, __path, __statbuf);
}
#[no_mangle]
pub static mut exclude_list: [*const libc::c_char; 14] = [
    b"ld-linux-aarch64.so\0" as *const u8 as *const libc::c_char,
    b"ld-linux-armhf.so\0" as *const u8 as *const libc::c_char,
    b"ld-linux-x86-64.so\0" as *const u8 as *const libc::c_char,
    b"ld-linux.so\0" as *const u8 as *const libc::c_char,
    b"ld64.so\0" as *const u8 as *const libc::c_char,
    b"libc.musl-aarch64.so\0" as *const u8 as *const libc::c_char,
    b"libc.musl-armhf.so\0" as *const u8 as *const libc::c_char,
    b"libc.musl-i386.so\0" as *const u8 as *const libc::c_char,
    b"libc.musl-x86_64.so\0" as *const u8 as *const libc::c_char,
    b"libc.so\0" as *const u8 as *const libc::c_char,
    b"libdl.so\0" as *const u8 as *const libc::c_char,
    b"libgcc_s.so\0" as *const u8 as *const libc::c_char,
    b"libm.so\0" as *const u8 as *const libc::c_char,
    b"libstdc++.so\0" as *const u8 as *const libc::c_char,
];
#[inline]
unsafe extern "C" fn utoa(mut str: *mut libc::c_char, mut v: size_t) {
    let mut p = str;
    loop {
        let fresh0 = p;
        p= p.offset(1);
        *fresh0= ('0' as i32 as libc::c_ulong)
            .wrapping_add(v.wrapping_rem(10 as libc::c_int as libc::c_ulong))
            as libc::c_char;
        v= (v as libc::c_ulong).wrapping_div(10 as libc::c_int as libc::c_ulong) as size_t
            as size_t;
        if !(v > 0 as libc::c_int as libc::c_ulong) {
            break;
        }
    }
    let mut len = p.offset_from(str) as libc::c_long as size_t;
    let mut i = 0 as libc::c_int as size_t;
    while i < len.wrapping_div(2 as libc::c_int as libc::c_ulong) {
        let mut tmp = *str.offset(i as isize);
        *str.offset(i as isize) = *str.offset(
            len.wrapping_sub(i)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
        );
        *str.offset(
            len.wrapping_sub(i)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
        ) = tmp;
        i= i.wrapping_add(1);
    }
    *str.offset(len as isize) = '\0' as i32 as libc::c_char;
}
#[inline]
unsafe extern "C" fn small_vec_u64_init(mut v: *mut small_vec_u64_t) {
    memset(
        v as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<small_vec_u64_t>() as libc::c_ulong,
    );
    (*v).p= (*v).buf.as_mut_ptr();
    // this causes v and *v become alias
    // (*v).p = &raw mut (*v).buf as *mut _;
}
unsafe extern "C" fn small_vec_u64_append(mut v: *mut small_vec_u64_t, mut val: uint64_t) {
    if (*v).n < 16 as libc::c_int as libc::c_ulong {
        let fresh3 = (*v).n;
        (*v).n= (*v).n.wrapping_add(1);
        *(*v).p.offset(fresh3 as isize) = val;
        return;
    }
    if (*v).n == 16 as libc::c_int as libc::c_ulong {
        (*v).capacity= (2 as libc::c_int * 16 as libc::c_int) as size_t;
        (*v).p= malloc(
            (*v).capacity.wrapping_mul(::std::mem::size_of::<uint64_t>() as libc::c_ulong),
        ) as *mut uint64_t;
        if (*v).p.is_null() {
            ();
            exit(1 as libc::c_int);
        }
        memcpy(
            (*v).p as *mut libc::c_void,
            (*v).buf.as_mut_ptr() as *const libc::c_void,
            // &raw mut (*v).buf as *mut libc::c_void,
            (16 as libc::c_int as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<uint64_t>() as libc::c_ulong),
        );
    } else if (*v).n == (*v).capacity {
        (*v).capacity= ((*v).capacity as libc::c_ulong)
            .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t
            as size_t;
        let mut p = realloc(
            (*v).p as *mut libc::c_void,
            (*v).capacity.wrapping_mul(::std::mem::size_of::<uint64_t>() as libc::c_ulong),
        ) as *mut uint64_t;
        if p.is_null() {
            ();
            exit(1 as libc::c_int);
        }
        (*v).p= p;
    }
    let fresh8 = (*v).n;
    (*v).n= (*v).n.wrapping_add(1);
    *(*v).p.offset(fresh8 as isize) = val;
}
unsafe extern "C" fn small_vec_u64_free(mut v: *mut small_vec_u64_t) {
    if (*v).n <= 16 as libc::c_int as libc::c_ulong {
        return;
    }
    free((*v).p as *mut libc::c_void);
    (*v).p= 0 as *mut uint64_t;
}
#[inline]
unsafe extern "C" fn host_is_little_endian() -> libc::c_int {
    let mut test = 1 as libc::c_int;
    let mut bytes = core::ptr::addr_of!(test) as *mut libc::c_int as *mut libc::c_char;
    return (*bytes.offset(0 as libc::c_int as isize) as libc::c_int == 1 as libc::c_int)
        as libc::c_int;
}
unsafe extern "C" fn is_ascending_order(mut v: *const uint64_t, mut n: size_t) -> libc::c_int {
    let mut j = 1 as libc::c_int as size_t;
    while j < n {
        if *v.offset(j.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
            >= *v.offset(j as isize)
        {
            return 0 as libc::c_int;
        }
        j= j.wrapping_add(1);
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn string_table_maybe_grow(mut t: Option<&mut string_table_t>, mut n: size_t) {
    if (*t.as_deref().unwrap()).n.wrapping_add(n) <= (*t.as_deref().unwrap()).capacity {
        return;
    }
    (*t.as_deref_mut().unwrap()).capacity= (2 as libc::c_int as libc::c_ulong).wrapping_mul((*t.as_deref().unwrap()).n.wrapping_add(n));
    let mut arr = realloc(
        (*t.as_deref().unwrap()).arr as *mut libc::c_void,
        (*t.as_deref().unwrap()).capacity.wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    if arr.is_null() {
        ();
        exit(1 as libc::c_int);
    }
    (*t.as_deref_mut().unwrap()).arr= arr;
}
unsafe extern "C" fn string_table_store(mut t: Option<&mut string_table_t>, mut str: *const libc::c_char) {
    let mut n = (strlen(str)).wrapping_add(1 as libc::c_int as libc::c_ulong);
    string_table_maybe_grow(t.as_deref_mut(), n);
    memcpy(
        (*t.as_deref().unwrap()).arr.offset((*t.as_deref().unwrap()).n as isize) as *mut libc::c_void,
        str as *const libc::c_void,
        n,
    );
    (*t.as_deref_mut().unwrap()).n= ((*t.as_deref().unwrap()).n as libc::c_ulong).wrapping_add(n) as size_t as size_t;
}
unsafe extern "C" fn string_table_copy_from_file(mut t: Option<&mut string_table_t>, mut fptr: *mut FILE) {
    let mut c: libc::c_int = 0;
    loop {
        c= _IO_getc(fptr);
        if !(c != '\0' as i32 && c != -(1 as libc::c_int)) {
            break;
        }
        string_table_maybe_grow(t.as_deref_mut(), 1 as libc::c_int as size_t);
        let fresh13 = (*t.as_deref().unwrap()).n;
        (*t.as_deref_mut().unwrap()).n= (*t.as_deref().unwrap()).n.wrapping_add(1);
        *(*t.as_deref().unwrap()).arr.offset(fresh13 as isize) = c as libc::c_char;
    }
    string_table_maybe_grow(t.as_deref_mut(), 1 as libc::c_int as size_t);
    let fresh15 = (*t.as_deref().unwrap()).n;
    (*t.as_deref_mut().unwrap()).n= (*t.as_deref().unwrap()).n.wrapping_add(1);
    *(*t.as_deref().unwrap()).arr.offset(fresh15 as isize) = '\0' as i32 as libc::c_char;
}
unsafe extern "C" fn is_in_exclude_list(mut soname: *const libc::c_char) -> libc::c_int {
    let mut start = soname;
    let mut end = strrchr(start, '\0' as i32);
    if start == end {
        return 0 as libc::c_int;
    }
    end= end.offset(-1);
    while end != start
        && ((*end) as libc::c_int >= '0' as i32 && (*end) as libc::c_int <= '9' as i32
            || (*end) as libc::c_int == '.' as i32)
    {
        end= end.offset(-1);
    }
    let mut j = 0 as libc::c_int as size_t;
    while j
        < (::std::mem::size_of::<[*const libc::c_char; 14]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong)
    {
        let mut len = strlen(exclude_list[j as usize]);
        if strncmp(start, exclude_list[j as usize], len) != 0 as libc::c_int {
            j= j.wrapping_add(1);
        } else {
            return 1 as libc::c_int;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn tree_preamble(mut s: *const libtree_state_t, mut depth: size_t) {
    if depth == 0 as libc::c_int as libc::c_ulong {
        return;
    }
    let mut i = 0 as libc::c_int as size_t;
    while i < depth.wrapping_sub(1 as libc::c_int as libc::c_ulong) {
        fputs(
            if (*s).found_all_needed[i as usize] as libc::c_int != 0 {
                b"    \0" as *const u8 as *const libc::c_char
            } else {
                b"\xE2\x94\x82   \0" as *const u8 as *const libc::c_char
            },
            stdout,
        );
        i= i.wrapping_add(1);
    }
    fputs(
        if (*s).found_all_needed[depth.wrapping_sub(1 as libc::c_int as libc::c_ulong) as usize]
            as libc::c_int
            != 0
        {
            b"\xE2\x94\x94\xE2\x94\x80\xE2\x94\x80 \0" as *const u8 as *const libc::c_char
        } else {
            b"\xE2\x94\x9C\xE2\x94\x80\xE2\x94\x80 \0" as *const u8 as *const libc::c_char
        },
        stdout,
    );
}
unsafe extern "C" fn apply_exclude_list(
    mut needed_not_found: Option<&mut size_t>,
    mut needed_buf_offsets: *mut small_vec_u64_t,
    mut s: *const libtree_state_t,
) {
    let mut i = 0 as libc::c_int as size_t;
    while i < (*needed_not_found.as_deref().unwrap()) {
        if is_in_exclude_list(
            (*s).string_table.arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize),
        ) != 0
        {
            let mut tmp = *(*needed_buf_offsets).p.offset(i as isize);
            *(*needed_buf_offsets).p.offset(i as isize) = *(*needed_buf_offsets).p.offset(
                (*needed_not_found.as_deref().unwrap()).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
            );
            *needed_not_found.as_deref_mut().unwrap()= (*needed_not_found.as_deref().unwrap()).wrapping_sub(1);
            *(*needed_buf_offsets).p.offset((*needed_not_found.as_deref().unwrap()) as isize) = tmp;
        } else {
            i= i.wrapping_add(1);
        }
    }
}
unsafe extern "C" fn check_absolute_paths(
    mut needed_not_found: Option<&mut size_t>,
    mut needed_buf_offsets: *mut small_vec_u64_t,
    mut depth: size_t,
    mut s: Option<&mut libtree_state_t>,
    mut compat: compat_t,
) -> libc::c_int {
    let mut exit_code = 0 as libc::c_int;
    let mut i = 0 as libc::c_int as size_t;
    while i < (*needed_not_found.as_deref().unwrap()) {
        let mut st: *const string_table_t = core::ptr::addr_of!((*s.as_deref().unwrap()).string_table);
        if (strchr(
            (*st).arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize),
            '/' as i32,
        ))
        .is_null()
        {
            ();
            i= i.wrapping_add(1);
        } else {
            let mut path: [libc::c_char; 4096] = [0; 4096];
            let mut len =
                strlen((*st).arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize));
            if len >= 4096 as libc::c_int as libc::c_ulong {
                continue;
            }
            memcpy(
                path.as_mut_ptr() as *mut libc::c_void,
                (*st).arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize)
                    as *const libc::c_void,
                len.wrapping_add(1 as libc::c_int as libc::c_ulong),
            );
            (*s.as_deref_mut().unwrap()).found_all_needed[depth as usize] = ((*needed_not_found.as_deref().unwrap())
                <= 1 as libc::c_int as libc::c_ulong)
                as libc::c_int as libc::c_char;
            let mut err = 0 as *mut libc::c_char;
            if path[0 as libc::c_int as usize] as libc::c_int != '/' as i32 {
                err=
                    b" is not absolute\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
                exit_code= 28 as libc::c_int;
            } else {
                let mut code = recurse(
                    path.as_mut_ptr(),
                    depth.wrapping_add(1 as libc::c_int as libc::c_ulong),
                    s.as_deref_mut(),
                    compat,
                    {
                        let mut init = found_t {
                            how: DIRECT,
                            depth: 0,
                        };
                        init
                    },
                );
                if code == 28 as libc::c_int {
                    exit_code= 28 as libc::c_int;
                }
                if code != 0 as libc::c_int && code != 28 as libc::c_int {
                    err= b" not found\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
                }
            }
            if !err.is_null() {
                tree_preamble(core::mem::transmute::<_, *const crate::src::libtree::libtree_state_t>(s.as_deref()), depth.wrapping_add(1 as libc::c_int as libc::c_ulong));
                if (*s.as_deref().unwrap()).color != 0 {
                    fputs(b"\x1B[1;31m\0" as *const u8 as *const libc::c_char, stdout);
                }
                fputs(path.as_mut_ptr(), stdout);
                fputs(
                    b" is not absolute\0" as *const u8 as *const libc::c_char,
                    stdout,
                );
                fputs(
                    if (*s.as_deref().unwrap()).color != 0 {
                        b"\x1B[0m\n\0" as *const u8 as *const libc::c_char
                    } else {
                        b"\n\0" as *const u8 as *const libc::c_char
                    },
                    stdout,
                );
            } else {
                ();
            }
            let mut tmp = *(*needed_buf_offsets).p.offset(i as isize);
            *(*needed_buf_offsets).p.offset(i as isize) = *(*needed_buf_offsets).p.offset(
                (*needed_not_found.as_deref().unwrap()).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
            );
            *needed_not_found.as_deref_mut().unwrap()= (*needed_not_found.as_deref().unwrap()).wrapping_sub(1);
            *(*needed_buf_offsets).p.offset((*needed_not_found.as_deref().unwrap()) as isize) = tmp;
        }
    }
    return exit_code;
}
unsafe extern "C" fn check_search_paths(
    mut reason: found_t,
    mut offset: size_t,
    mut needed_not_found: Option<&mut size_t>,
    mut needed_buf_offsets: *mut small_vec_u64_t,
    mut depth: size_t,
    mut s: Option<&mut libtree_state_t>,
    mut compat: compat_t,
) -> libc::c_int {
    let mut exit_code = 0 as libc::c_int;
    let mut path: [libc::c_char; 4096] = [0; 4096];
    let mut path_end = path.as_mut_ptr().offset(4096 as libc::c_int as isize);
    let mut st: *const string_table_t = core::ptr::addr_of!((*s.as_deref().unwrap()).string_table);
    while *(*st).arr.offset(offset as isize) as libc::c_int != '\0' as i32 {
        while *(*st).arr.offset(offset as isize) as libc::c_int == ':' as i32
            && *(*st).arr.offset(offset as isize) as libc::c_int != '\0' as i32
        {
            offset= offset.wrapping_add(1);
        }
        if *(*st).arr.offset(offset as isize) as libc::c_int == '\0' as i32 {
            return exit_code;
        }
        let mut dest = path.as_mut_ptr();
        while *(*st).arr.offset(offset as isize) as libc::c_int != '\0' as i32
            && *(*st).arr.offset(offset as isize) as libc::c_int != ':' as i32
            && dest != path_end
        {
            let fresh16 = offset;
            offset= offset.wrapping_add(1);
            let fresh17 = dest;
            dest= dest.offset(1);
            *fresh17= *(*st).arr.offset(fresh16 as isize);
        }
        if dest.offset(1 as libc::c_int as isize) >= path_end {
            continue;
        }
        if *dest.offset(-(1 as libc::c_int as isize)) as libc::c_int != '/' as i32 {
            let fresh18 = dest;
            dest= dest.offset(1);
            *fresh18= '/' as i32 as libc::c_char;
        }
        let mut search_path_end = dest;
        let mut i = 0 as libc::c_int as size_t;
        while i < (*needed_not_found.as_deref().unwrap()) {
            let mut soname_len =
                strlen((*st).arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize));
            if search_path_end
                .offset(soname_len as isize)
                .offset(1 as libc::c_int as isize)
                >= path_end
            {
                continue;
            }
            memcpy(
                search_path_end as *mut libc::c_void,
                (*st).arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize)
                    as *const libc::c_void,
                soname_len.wrapping_add(1 as libc::c_int as libc::c_ulong),
            );
            (*s.as_deref_mut().unwrap()).found_all_needed[depth as usize] = ((*needed_not_found.as_deref().unwrap())
                <= 1 as libc::c_int as libc::c_ulong)
                as libc::c_int as libc::c_char;
            let mut code = recurse(
                path.as_mut_ptr(),
                depth.wrapping_add(1 as libc::c_int as libc::c_ulong),
                s.as_deref_mut(),
                compat,
                reason,
            );
            if code == 28 as libc::c_int {
                exit_code= 28 as libc::c_int;
            }
            if code == 0 as libc::c_int || code == 28 as libc::c_int {
                let mut tmp = *(*needed_buf_offsets).p.offset(i as isize);
                *(*needed_buf_offsets).p.offset(i as isize) = *(*needed_buf_offsets).p.offset(
                    (*needed_not_found.as_deref().unwrap()).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
                );
                *needed_not_found.as_deref_mut().unwrap()= (*needed_not_found.as_deref().unwrap()).wrapping_sub(1);
                *(*needed_buf_offsets).p.offset((*needed_not_found.as_deref().unwrap()) as isize) = tmp;
            } else {
                i= i.wrapping_add(1);
            }
        }
    }
    return exit_code;
}
unsafe extern "C" fn interpolate_variables(
    mut s: *mut libtree_state_t,
    mut src: size_t,
    mut ORIGIN: *const libc::c_char,
) -> libc::c_int {
    let mut prev_src = src;
    let mut curr_src = src;
    let mut st: *mut string_table_t = core::ptr::addr_of_mut!((*s).string_table);
    loop {
        let mut dollar = strchr((*st).arr.offset(curr_src as isize), '$' as i32);
        if dollar.is_null() {
            ();
            break;
        }
        curr_src= dollar.offset_from((*st).arr) as libc::c_long as size_t;
        let mut bytes_to_dollar = curr_src.wrapping_sub(prev_src);
        curr_src= curr_src.wrapping_add(1);
        let mut curly = 0 as libc::c_int;
        if *(*st).arr.offset(curr_src as isize) as libc::c_int == '{' as i32 {
            curly= 1 as libc::c_int;
            curr_src= curr_src.wrapping_add(1);
        }
        let mut var_val = 0 as *const libc::c_char;
        if strncmp(
            &raw mut *(*st).arr.offset(curr_src as isize),
            b"ORIGIN\0" as *const u8 as *const libc::c_char,
            6 as libc::c_int as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            var_val= ORIGIN;
            curr_src= (curr_src as libc::c_ulong).wrapping_add(6 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
        } else if strncmp(
            &raw mut *(*st).arr.offset(curr_src as isize),
            b"LIB\0" as *const u8 as *const libc::c_char,
            3 as libc::c_int as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            var_val= (*s).LIB;
            curr_src= (curr_src as libc::c_ulong).wrapping_add(3 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
        } else if strncmp(
            &raw mut *(*st).arr.offset(curr_src as isize),
            b"PLATFORM\0" as *const u8 as *const libc::c_char,
            8 as libc::c_int as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            var_val= (*s).PLATFORM;
            curr_src= (curr_src as libc::c_ulong).wrapping_add(8 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
        } else if strncmp(
            &raw mut *(*st).arr.offset(curr_src as isize),
            b"OSNAME\0" as *const u8 as *const libc::c_char,
            6 as libc::c_int as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            var_val= (*s).OSNAME;
            curr_src= (curr_src as libc::c_ulong).wrapping_add(6 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
        } else {
            if !(strncmp(
                &raw mut *(*st).arr.offset(curr_src as isize),
                b"OSREL\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int as libc::c_ulong,
            ) == 0 as libc::c_int)
            {
                continue;
            }
            var_val= (*s).OSREL;
            curr_src= (curr_src as libc::c_ulong).wrapping_add(5 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
        }
        if curly != 0 {
            if *(*st).arr.offset(curr_src as isize) as libc::c_int != '}' as i32 {
                continue;
            }
            curr_src= curr_src.wrapping_add(1);
        }
        let mut var_len = strlen(var_val);
        string_table_maybe_grow(st.as_mut(), bytes_to_dollar.wrapping_add(var_len));
        memcpy(
            &raw mut *(*st).arr.offset((*s).string_table.n as isize) as *mut libc::c_char
                as *mut libc::c_void,
            &raw mut *(*st).arr.offset(prev_src as isize) as *mut libc::c_char as *const libc::c_void,
            bytes_to_dollar,
        );
        (*s).string_table.n= ((*s).string_table.n as libc::c_ulong).wrapping_add(bytes_to_dollar)
            as size_t as size_t;
        prev_src= curr_src;
        memcpy(
            &raw mut *(*st).arr.offset((*s).string_table.n as isize) as *mut libc::c_char
                as *mut libc::c_void,
            var_val as *const libc::c_void,
            var_len,
        );
        (*s).string_table.n=
            ((*s).string_table.n as libc::c_ulong).wrapping_add(var_len) as size_t as size_t;
    }
    if prev_src != src {
        let mut n = (strlen((*st).arr.offset(prev_src as isize)))
            .wrapping_add(1 as libc::c_int as libc::c_ulong);
        string_table_maybe_grow(st.as_mut(), n);
        memcpy(
            (*st).arr.offset((*st).n as isize) as *mut libc::c_void,
            (*st).arr.offset(prev_src as isize) as *const libc::c_void,
            n,
        );
        (*st).n= ((*st).n as libc::c_ulong).wrapping_add(n) as size_t as size_t;
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn print_colon_delimited_paths(
    mut start: *const libc::c_char,
    mut indent: *const libc::c_char,
) {
    while !((*start) as libc::c_int == '\0' as i32) {
        let mut next = strchr(start, ':' as i32);
        if start == next {
            start= start.offset(1);
        } else {
            fputs(indent, stdout);
            fputs(b"    \0" as *const u8 as *const libc::c_char, stdout);
            if next.is_null() {
                ();
                puts(start);
            } else {
                fwrite(
                    start as *const libc::c_void,
                    1 as libc::c_int as size_t,
                    next.offset_from(start) as libc::c_long as size_t,
                    stdout,
                );
                putchar('\n' as i32);
            }
            if next.is_null() {
                ();
                break;
            }
            start= next.offset(1 as libc::c_int as isize);
        }
    }
}
unsafe extern "C" fn print_line(
    mut depth: size_t,
    mut name: *mut libc::c_char,
    mut color_bold: *mut libc::c_char,
    mut color_regular: *mut libc::c_char,
    mut highlight: libc::c_int,
    mut reason: found_t,
    mut s: Option<&mut libtree_state_t>,
) {
    tree_preamble(core::mem::transmute::<_, *const crate::src::libtree::libtree_state_t>(s.as_deref()), depth);
    let mut slash = 0 as *mut libc::c_char;
    if (*s.as_deref().unwrap()).color != 0 && highlight != 0 && {
        slash= strrchr(name, '/' as i32);
        !slash.is_null()
    } {
        fputs(color_regular, stdout);
        fwrite(
            name as *const libc::c_void,
            1 as libc::c_int as size_t,
            slash.offset(1 as libc::c_int as isize).offset_from(name) as libc::c_long as size_t,
            stdout,
        );
        fputs(color_bold, stdout);
        fputs(slash.offset(1 as libc::c_int as isize), stdout);
    } else {
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(color_bold, stdout);
        }
        fputs(name, stdout);
    }
    if (*s.as_deref().unwrap()).color != 0 && highlight != 0 {
        fputs(
            b"\x1B[0m \x1B[33m\0" as *const u8 as *const libc::c_char,
            stdout,
        );
    } else {
        putchar(' ' as i32);
    }
    let mut conf_name: *mut libc::c_char = 0 as *mut libc::c_char;
    match  reason.how as libc::c_uint {
        2 => {
            if reason.depth.wrapping_add(1 as libc::c_int as libc::c_ulong) >= depth {
                fputs(b"[rpath]\0" as *const u8 as *const libc::c_char, stdout);
            } else {
                let mut num: [libc::c_char; 8] = [0; 8];
                utoa(
                    num.as_mut_ptr(),
                    reason.depth.wrapping_add(1 as libc::c_int as libc::c_ulong),
                );
                fputs(b"[rpath of \0" as *const u8 as *const libc::c_char, stdout);
                fputs(num.as_mut_ptr(), stdout);
                putchar(']' as i32);
            }
        }
        3 => {
            fputs(
                b"[LD_LIBRARY_PATH]\0" as *const u8 as *const libc::c_char,
                stdout,
            );
        }
        4 => {
            fputs(b"[runpath]\0" as *const u8 as *const libc::c_char, stdout);
        }
        5 => {
            putchar('[' as i32);
            conf_name= strrchr((*s.as_deref().unwrap()).ld_conf_file, '/' as i32);
            conf_name= if conf_name.is_null() {
                ();
                (*s.as_deref().unwrap()).ld_conf_file
            } else {
                conf_name.offset(1 as libc::c_int as isize)
            };
            fputs(conf_name, stdout);
            putchar(']' as i32);
        }
        1 => {
            fputs(b"[direct]\0" as *const u8 as *const libc::c_char, stdout);
        }
        6 => {
            fputs(
                b"[default path]\0" as *const u8 as *const libc::c_char,
                stdout,
            );
        }
        _ => {}
    }
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\n\0" as *const u8 as *const libc::c_char, stdout);
    } else {
        putchar('\n' as i32);
    };
}
unsafe extern "C" fn print_error(
    mut depth: size_t,
    mut needed_not_found: size_t,
    mut needed_buf_offsets: *const small_vec_u64_t,
    mut runpath: *mut libc::c_char,
    mut s: Option<&mut libtree_state_t>,
    mut no_def_lib: libc::c_int,
) {
    let mut i = 0 as libc::c_int as size_t;
    while i < needed_not_found {
        (*s.as_deref_mut().unwrap()).found_all_needed[depth as usize] = (i.wrapping_add(1 as libc::c_int as libc::c_ulong)
            >= needed_not_found) as libc::c_int
            as libc::c_char;
        tree_preamble(core::mem::transmute::<_, *const crate::src::libtree::libtree_state_t>(s.as_deref()), depth.wrapping_add(1 as libc::c_int as libc::c_ulong));
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[1;31m\0" as *const u8 as *const libc::c_char, stdout);
        }
        fputs(
            (*s.as_deref().unwrap()).string_table.arr.offset(*(*needed_buf_offsets).p.offset(i as isize) as isize),
            stdout,
        );
        fputs(
            b" not found\n\0" as *const u8 as *const libc::c_char,
            stdout,
        );
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
        }
        i= i.wrapping_add(1);
    }
    let mut box_vertical = (if (*s.as_deref().unwrap()).color != 0 {
        b"    \x1B[0;31m\xE2\x94\x8A\x1B[0m\0" as *const u8 as *const libc::c_char
    } else {
        b"    \xE2\x94\x8A\0" as *const u8 as *const libc::c_char
    }) as *mut libc::c_char;
    let mut indent = malloc(
        (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
            .wrapping_mul(depth)
            .wrapping_add(strlen(box_vertical))
            .wrapping_add(1 as libc::c_int as libc::c_ulong),
    ) as *mut libc::c_char;
    let mut p = indent;
    let mut i_0 = 0 as libc::c_int as size_t;
    while i_0 < depth {
        if (*s.as_deref().unwrap()).found_all_needed[i_0 as usize] != 0 {
            let mut len = (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                as libc::c_int;
            memcpy(
                p as *mut libc::c_void,
                b"    \0" as *const u8 as *const libc::c_char as *const libc::c_void,
                len as libc::c_ulong,
            );
            p= p.offset(len as isize);
        } else {
            let mut len_0 = (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                as libc::c_int;
            memcpy(
                p as *mut libc::c_void,
                b"\xE2\x94\x82   \0" as *const u8 as *const libc::c_char as *const libc::c_void,
                len_0 as libc::c_ulong,
            );
            p= p.offset(len_0 as isize);
        }
        i_0= i_0.wrapping_add(1);
    }
    strcpy(p, box_vertical);
    fputs(indent as *const i8, stdout);
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(
        b" Paths considered in this order:\n\0" as *const u8 as *const libc::c_char,
        stdout,
    );
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(indent as *const i8, stdout);
    if !runpath.is_null() {
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
        }
        fputs(
            b" 1. rpath is skipped because runpath was set\n\0" as *const u8 as *const libc::c_char,
            stdout,
        );
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
        }
    } else {
        ();
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
        }
        fputs(
            b" 1. rpath:\n\0" as *const u8 as *const libc::c_char,
            stdout,
        );
        if (*s.as_deref().unwrap()).color != 0 {
            fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
        }
        let mut j = depth as libc::c_int;
        while j >= 0 as libc::c_int {
            if (*s.as_deref().unwrap()).rpath_offsets[j as usize] != 18446744073709551615 as libc::c_ulong {
                let mut num: [libc::c_char; 8] = [0; 8];
                utoa(num.as_mut_ptr(), (j + 1 as libc::c_int) as size_t);
                fputs(indent as *const i8, stdout);
                if (*s.as_deref().unwrap()).color != 0 {
                    fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
                }
                fputs(b"    depth \0" as *const u8 as *const libc::c_char, stdout);
                fputs(num.as_mut_ptr(), stdout);
                if (*s.as_deref().unwrap()).color != 0 {
                    fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
                }
                putchar('\n' as i32);
                print_colon_delimited_paths(
                    (*s.as_deref().unwrap()).string_table.arr.offset((*s.as_deref().unwrap()).rpath_offsets[j as usize] as isize),
                    indent,
                );
            }
            j-= 1;
        }
    }
    fputs(indent as *const i8, stdout);
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(
        if (*s.as_deref().unwrap()).ld_library_path_offset == 18446744073709551615 as libc::c_ulong {
            b" 2. LD_LIBRARY_PATH was not set\n\0" as *const u8 as *const libc::c_char
        } else {
            b" 2. LD_LIBRARY_PATH:\n\0" as *const u8 as *const libc::c_char
        },
        stdout,
    );
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
    }
    if (*s.as_deref().unwrap()).ld_library_path_offset != 18446744073709551615 as libc::c_ulong {
        print_colon_delimited_paths(
            (*s.as_deref().unwrap()).string_table.arr.offset((*s.as_deref().unwrap()).ld_library_path_offset as isize),
            indent,
        );
    }
    fputs(indent as *const i8, stdout);
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(
        if runpath.is_null() {
            ();
            b" 3. runpath was not set\n\0" as *const u8 as *const libc::c_char
        } else {
            b" 3. runpath:\n\0" as *const u8 as *const libc::c_char
        },
        stdout,
    );
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
    }
    if !runpath.is_null() {
        print_colon_delimited_paths(runpath, indent);
    } else {
        ();
    }
    fputs(indent as *const i8, stdout);
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(
        if no_def_lib != 0 {
            b" 4. ld config files not considered due to NODEFLIB flag\n\0" as *const u8
                as *const libc::c_char
        } else {
            b" 4. ld config files:\n\0" as *const u8 as *const libc::c_char
        },
        stdout,
    );
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
    }
    print_colon_delimited_paths(
        (*s.as_deref().unwrap()).string_table.arr.offset((*s.as_deref().unwrap()).ld_so_conf_offset as isize),
        indent,
    );
    fputs(indent as *const i8, stdout);
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0;90m\0" as *const u8 as *const libc::c_char, stdout);
    }
    fputs(
        if no_def_lib != 0 {
            b" 5. Standard paths not considered due to NODEFLIB flag\n\0" as *const u8
                as *const libc::c_char
        } else {
            b" 5. Standard paths:\n\0" as *const u8 as *const libc::c_char
        },
        stdout,
    );
    if (*s.as_deref().unwrap()).color != 0 {
        fputs(b"\x1B[0m\0" as *const u8 as *const libc::c_char, stdout);
    }
    print_colon_delimited_paths(
        (*s.as_deref().unwrap()).string_table.arr.offset((*s.as_deref().unwrap()).default_paths_offset as isize),
        indent,
    );
    free(indent as *mut libc::c_void);
}
unsafe extern "C" fn visited_files_contains(
    mut files: *const visited_file_array_t,
    mut needle: *const stat,
) -> libc::c_int {
    let mut i = 0 as libc::c_int as size_t;
    while i < (*files).n {
        let mut f: *mut visited_file_t =
            &raw mut *(*files).arr.offset(i as isize) as *mut visited_file_t;
        if (*f).st_dev == (*needle).st_dev && (*f).st_ino == (*needle).st_ino {
            return 1 as libc::c_int;
        }
        i= i.wrapping_add(1);
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn visited_files_append(
    mut files: Option<&mut visited_file_array_t>,
    mut new: *const stat,
) {
    if (*files.as_deref().unwrap()).n == (*files.as_deref().unwrap()).capacity {
        (*files.as_deref_mut().unwrap()).capacity= ((*files.as_deref().unwrap()).capacity as libc::c_ulong)
            .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t
            as size_t;
        (*files.as_deref_mut().unwrap()).arr= realloc(
            (*files.as_deref().unwrap()).arr as *mut libc::c_void,
            (*files.as_deref().unwrap()).capacity
                .wrapping_mul(::std::mem::size_of::<visited_file_t>() as libc::c_ulong),
        ) as *mut visited_file_t;
        if (*files.as_deref().unwrap()).arr.is_null() {
            ();
            exit(1 as libc::c_int);
        }
    }
    (*(*files.as_deref().unwrap()).arr.offset((*files.as_deref().unwrap()).n as isize)).st_dev = (*new).st_dev;
    (*(*files.as_deref().unwrap()).arr.offset((*files.as_deref().unwrap()).n as isize)).st_ino = (*new).st_ino;
    (*files.as_deref_mut().unwrap()).n= (*files.as_deref().unwrap()).n.wrapping_add(1);
}
unsafe extern "C" fn recurse(
    mut current_file: *mut libc::c_char,
    mut depth: size_t,
    mut s: Option<&mut libtree_state_t>,
    mut compat: compat_t,
    mut reason: found_t,
) -> libc::c_int {
    let mut fptr = fopen(current_file, b"rb\0" as *const u8 as *const libc::c_char);
    if fptr.is_null() {
        ();
        return 31 as libc::c_int;
    }
    let mut old_buf_size = (*s.as_deref().unwrap()).string_table.n;
    let mut e_ident: [libc::c_char; 16] = [0; 16];
    if fread(
        core::ptr::addr_of_mut!(e_ident) as *mut [libc::c_char; 16] as *mut libc::c_void,
        16 as libc::c_int as size_t,
        1 as libc::c_int as size_t,
        fptr,
    ) != 1 as libc::c_int as libc::c_ulong
    {
        fclose(fptr);
        return 11 as libc::c_int;
    }
    if e_ident[0 as libc::c_int as usize] as libc::c_int != 0x7f as libc::c_int
        || e_ident[1 as libc::c_int as usize] as libc::c_int != 'E' as i32
        || e_ident[2 as libc::c_int as usize] as libc::c_int != 'L' as i32
        || e_ident[3 as libc::c_int as usize] as libc::c_int != 'F' as i32
    {
        fclose(fptr);
        return 11 as libc::c_int;
    }
    if e_ident[4 as libc::c_int as usize] as libc::c_int != 1 as libc::c_int
        && e_ident[4 as libc::c_int as usize] as libc::c_int != 2 as libc::c_int
    {
        fclose(fptr);
        return 12 as libc::c_int;
    }
    if e_ident[5 as libc::c_int as usize] as libc::c_int != '\u{1}' as i32
        && e_ident[5 as libc::c_int as usize] as libc::c_int != '\u{2}' as i32
    {
        fclose(fptr);
        return 13 as libc::c_int;
    }
    let mut curr_type = {
        let mut init = compat_t {
            any: 0 as libc::c_int as libc::c_char,
            class: e_ident[4 as libc::c_int as usize] as uint8_t,
            machine: 0,
        };
        init
    };
    let mut is_little_endian =
        (e_ident[5 as libc::c_int as usize] as libc::c_int == '\u{1}' as i32) as libc::c_int;
    if compat.any == 0 && compat.class as libc::c_int != curr_type.class as libc::c_int {
        fclose(fptr);
        return 15 as libc::c_int;
    }
    if is_little_endian ^ host_is_little_endian() != 0 {
        fclose(fptr);
        return 16 as libc::c_int;
    }
    let mut header = C2RustUnnamed_1 {
        h64: header_64_t {
            e_type: 0,
            e_machine: 0,
            e_version: 0,
            e_entry: 0,
            e_phoff: 0,
            e_shoff: 0,
            e_flags: 0,
            e_ehsize: 0,
            e_phentsize: 0,
            e_phnum: 0,
            e_shentsize: 0,
            e_shnum: 0,
            e_shstrndx: 0,
        },
    };
    if curr_type.class as libc::c_int == 2 as libc::c_int {
        if fread(
            core::ptr::addr_of_mut!(header.h64) as *mut header_64_t as *mut libc::c_void,
            ::std::mem::size_of::<header_64_t>() as libc::c_ulong,
            1 as libc::c_int as size_t,
            fptr,
        ) != 1 as libc::c_int as libc::c_ulong
        {
            fclose(fptr);
            return 14 as libc::c_int;
        }
        if header.h64.e_type as libc::c_int != 2 as libc::c_int
            && header.h64.e_type as libc::c_int != 3 as libc::c_int
        {
            fclose(fptr);
            return 17 as libc::c_int;
        }
        curr_type.machine= header.h64.e_machine;
        if compat.any == 0 && compat.machine as libc::c_int != curr_type.machine as libc::c_int {
            fclose(fptr);
            return 32 as libc::c_int;
        }
        if fseek(fptr, header.h64.e_phoff as libc::c_long, 0 as libc::c_int) != 0 as libc::c_int {
            fclose(fptr);
            return 18 as libc::c_int;
        }
    } else {
        if fread(
            core::ptr::addr_of_mut!(header.h32) as *mut header_32_t as *mut libc::c_void,
            ::std::mem::size_of::<header_32_t>() as libc::c_ulong,
            1 as libc::c_int as size_t,
            fptr,
        ) != 1 as libc::c_int as libc::c_ulong
        {
            fclose(fptr);
            return 14 as libc::c_int;
        }
        if header.h32.e_type as libc::c_int != 2 as libc::c_int
            && header.h32.e_type as libc::c_int != 3 as libc::c_int
        {
            fclose(fptr);
            return 17 as libc::c_int;
        }
        curr_type.machine= header.h32.e_machine;
        if compat.any == 0 && compat.machine as libc::c_int != curr_type.machine as libc::c_int {
            fclose(fptr);
            return 32 as libc::c_int;
        }
        if fseek(fptr, header.h32.e_phoff as libc::c_long, 0 as libc::c_int) != 0 as libc::c_int {
            fclose(fptr);
            return 18 as libc::c_int;
        }
    }
    let mut prog = C2RustUnnamed_0 {
        p64: prog_64_t {
            p_type: 0,
            p_flags: 0,
            p_offset: 0,
            p_vaddr: 0,
            p_paddr: 0,
            p_filesz: 0,
            p_memsz: 0,
            p_align: 0,
        },
    };
    let mut pt_load_offset = small_vec_u64_t {
        buf: [0; 16],
        p: 0 as *mut uint64_t,
        n: 0,
        capacity: 0,
    };
    let mut pt_load_vaddr = small_vec_u64_t {
        buf: [0; 16],
        p: 0 as *mut uint64_t,
        n: 0,
        capacity: 0,
    };
    small_vec_u64_init(core::ptr::addr_of_mut!(pt_load_offset));
    small_vec_u64_init(core::ptr::addr_of_mut!(pt_load_vaddr));
    let mut p_offset = 0xffffffffffffffff as libc::c_ulong;
    if curr_type.class as libc::c_int == 2 as libc::c_int {
        let mut i = 0 as libc::c_int as uint64_t;
        while i < header.h64.e_phnum as libc::c_ulong {
            if fread(
                core::ptr::addr_of_mut!(prog.p64) as *mut prog_64_t as *mut libc::c_void,
                ::std::mem::size_of::<prog_64_t>() as libc::c_ulong,
                1 as libc::c_int as size_t,
                fptr,
            ) != 1 as libc::c_int as libc::c_ulong
            {
                fclose(fptr);
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
                return 19 as libc::c_int;
            }
            if prog.p64.p_type == 1 as libc::c_int as libc::c_uint {
                small_vec_u64_append(core::ptr::addr_of_mut!(pt_load_offset), prog.p64.p_offset);
                small_vec_u64_append(core::ptr::addr_of_mut!(pt_load_vaddr), prog.p64.p_vaddr);
            } else if prog.p64.p_type == 2 as libc::c_int as libc::c_uint {
                p_offset= prog.p64.p_offset;
            }
            i= i.wrapping_add(1);
        }
    } else {
        let mut i_0 = 0 as libc::c_int as uint32_t;
        while i_0 < header.h32.e_phnum as libc::c_uint {
            if fread(
                core::ptr::addr_of_mut!(prog.p32) as *mut prog_32_t as *mut libc::c_void,
                ::std::mem::size_of::<prog_32_t>() as libc::c_ulong,
                1 as libc::c_int as size_t,
                fptr,
            ) != 1 as libc::c_int as libc::c_ulong
            {
                fclose(fptr);
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
                return 19 as libc::c_int;
            }
            if prog.p32.p_type == 1 as libc::c_int as libc::c_uint {
                small_vec_u64_append(core::ptr::addr_of_mut!(pt_load_offset), prog.p32.p_offset as uint64_t);
                small_vec_u64_append(core::ptr::addr_of_mut!(pt_load_vaddr), prog.p32.p_vaddr as uint64_t);
            } else if prog.p32.p_type == 2 as libc::c_int as libc::c_uint {
                p_offset= prog.p32.p_offset as uint64_t;
            }
            i_0= i_0.wrapping_add(1);
        }
    }
    let mut finfo = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atime: 0,
        st_atimensec: 0,
        st_mtime: 0,
        st_mtimensec: 0,
        st_ctime: 0,
        st_ctimensec: 0,
        __glibc_reserved: [0; 3],
    };
    if stat(current_file, core::ptr::addr_of_mut!(finfo)) != 0 as libc::c_int {
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        return 20 as libc::c_int;
    }
    let mut seen_before = visited_files_contains(core::ptr::addr_of!((*s.as_deref().unwrap()).visited), core::ptr::addr_of!(finfo));
    if seen_before == 0 {
        visited_files_append(Some(&mut (*s.as_deref_mut().unwrap()).visited), core::ptr::addr_of!(finfo));
    }
    if p_offset == 0xffffffffffffffff as libc::c_ulong {
        print_line(
            depth,
            current_file,
            b"\x1B[1;36m\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            b"\x1B[0;36m\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            1 as libc::c_int,
            reason,
            s.as_deref_mut(),
        );
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        return 0 as libc::c_int;
    }
    if pt_load_offset.n == 0 as libc::c_int as libc::c_ulong {
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        return 29 as libc::c_int;
    }
    if fseek(fptr, p_offset as libc::c_long, 0 as libc::c_int) != 0 as libc::c_int {
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        return 21 as libc::c_int;
    }
    let mut no_def_lib = 0 as libc::c_int;
    let mut strtab = 0xffffffffffffffff as libc::c_ulong;
    let mut rpath = 0xffffffffffffffff as libc::c_ulong;
    let mut runpath = 0xffffffffffffffff as libc::c_ulong;
    let mut soname = 0xffffffffffffffff as libc::c_ulong;
    let mut needed = small_vec_u64_t {
        buf: [0; 16],
        p: 0 as *mut uint64_t,
        n: 0,
        capacity: 0,
    };
    small_vec_u64_init(core::ptr::addr_of_mut!(needed));
    let mut cont = 1 as libc::c_int;
    while cont != 0 {
        let mut d_tag: uint64_t = 0;
        let mut d_val: uint64_t = 0;
        if curr_type.class as libc::c_int == 2 as libc::c_int {
            let mut dyn_0 = dyn_64_t { d_tag: 0, d_val: 0 };
            if fread(
                core::ptr::addr_of_mut!(dyn_0) as *mut dyn_64_t as *mut libc::c_void,
                ::std::mem::size_of::<dyn_64_t>() as libc::c_ulong,
                1 as libc::c_int as size_t,
                fptr,
            ) != 1 as libc::c_int as libc::c_ulong
            {
                fclose(fptr);
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
                small_vec_u64_free(core::ptr::addr_of_mut!(needed));
                return 22 as libc::c_int;
            }
            d_tag= dyn_0.d_tag as uint64_t;
            d_val= dyn_0.d_val;
        } else {
            let mut dyn_1 = dyn_32_t { d_tag: 0, d_val: 0 };
            if fread(
                core::ptr::addr_of_mut!(dyn_1) as *mut dyn_32_t as *mut libc::c_void,
                ::std::mem::size_of::<dyn_32_t>() as libc::c_ulong,
                1 as libc::c_int as size_t,
                fptr,
            ) != 1 as libc::c_int as libc::c_ulong
            {
                fclose(fptr);
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
                small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
                small_vec_u64_free(core::ptr::addr_of_mut!(needed));
                return 22 as libc::c_int;
            }
            d_tag= dyn_1.d_tag as uint64_t;
            d_val= dyn_1.d_val as uint64_t;
        }
        match d_tag {
            0 => {
                cont= 0 as libc::c_int;
            }
            5 => {
                strtab= d_val;
            }
            15 => {
                rpath= d_val;
            }
            29 => {
                runpath= d_val;
            }
            1 => {
                small_vec_u64_append(core::ptr::addr_of_mut!(needed), d_val);
            }
            14 => {
                soname= d_val;
            }
            1879048187 => {
                no_def_lib|= (0x800 as libc::c_int as libc::c_ulong & d_val
                    == 0x800 as libc::c_int as libc::c_ulong)
                    as libc::c_int;
            }
            _ => {}
        }
    }
    if strtab == 0xffffffffffffffff as libc::c_ulong {
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        small_vec_u64_free(core::ptr::addr_of_mut!(needed));
        return 23 as libc::c_int;
    }
    if is_ascending_order(pt_load_vaddr.p, pt_load_vaddr.n) == 0 {
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
        small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
        small_vec_u64_free(core::ptr::addr_of_mut!(needed));
        return 30 as libc::c_int;
    }
    let mut vaddr_idx = 0 as libc::c_int as size_t;
    while vaddr_idx.wrapping_add(1 as libc::c_int as libc::c_ulong) != pt_load_vaddr.n
        && strtab
            >= *pt_load_vaddr.p
                .offset(vaddr_idx.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize)
    {
        vaddr_idx= vaddr_idx.wrapping_add(1);
    }
    let mut strtab_offset = (*pt_load_offset.p.offset(vaddr_idx as isize))
        .wrapping_add(strtab)
        .wrapping_sub(*pt_load_vaddr.p.offset(vaddr_idx as isize));
    small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_vaddr));
    small_vec_u64_free(core::ptr::addr_of_mut!(pt_load_offset));
    let mut soname_buf_offset = (*s.as_deref().unwrap()).string_table.n;
    if soname != 0xffffffffffffffff as libc::c_ulong {
        if fseek(
            fptr,
            strtab_offset.wrapping_add(soname) as libc::c_long,
            0 as libc::c_int,
        ) != 0 as libc::c_int
        {
            (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
            fclose(fptr);
            small_vec_u64_free(core::ptr::addr_of_mut!(needed));
            return 24 as libc::c_int;
        }
        string_table_copy_from_file(Some(&mut (*s.as_deref_mut().unwrap()).string_table), fptr);
    }
    let mut in_exclude_list = (soname != 0xffffffffffffffff as libc::c_ulong
        && is_in_exclude_list((*s.as_deref().unwrap()).string_table.arr.offset(soname_buf_offset as isize)) != 0)
        as libc::c_int;
    let mut should_recurse = (depth < (*s.as_deref().unwrap()).max_depth
        && (seen_before == 0 && in_exclude_list == 0
            || seen_before == 0 && in_exclude_list != 0 && (*s.as_deref().unwrap()).verbosity >= 2 as libc::c_int
            || (*s.as_deref().unwrap()).verbosity >= 3 as libc::c_int)) as libc::c_int;
    if should_recurse == 0 {
        let mut print_name = if soname == 0xffffffffffffffff as libc::c_ulong || (*s.as_deref().unwrap()).path != 0 {
            current_file
        } else {
            (*s.as_deref().unwrap()).string_table.arr.offset(soname_buf_offset as isize)
        };
        let mut bold_color = (if in_exclude_list != 0 {
            b"\x1B[0;35m\0" as *const u8 as *const libc::c_char
        } else if seen_before != 0 {
            b"\x1B[0;34m\0" as *const u8 as *const libc::c_char
        } else {
            b"\x1B[1;36m\0" as *const u8 as *const libc::c_char
        }) as *mut libc::c_char;
        let mut regular_color = (if in_exclude_list != 0 {
            b"\x1B[0;35m\0" as *const u8 as *const libc::c_char
        } else if seen_before != 0 {
            b"\x1B[0;34m\0" as *const u8 as *const libc::c_char
        } else {
            b"\x1B[0;36m\0" as *const u8 as *const libc::c_char
        }) as *mut libc::c_char;
        let mut highlight = (seen_before == 0 && in_exclude_list == 0) as libc::c_int;
        print_line(
            depth,
            print_name,
            bold_color,
            regular_color,
            highlight,
            reason,
            s.as_deref_mut(),
        );
        (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
        fclose(fptr);
        small_vec_u64_free(core::ptr::addr_of_mut!(needed));
        return 0 as libc::c_int;
    }
    let mut origin: [libc::c_char; 4096] = [0; 4096];
    let mut last_slash = strrchr(current_file, '/' as i32);
    if !last_slash.is_null() {
        let mut bytes = last_slash.offset_from(current_file) as libc::c_long as size_t;
        memcpy(
            origin.as_mut_ptr() as *mut libc::c_void,
            current_file as *const libc::c_void,
            bytes,
        );
        origin[bytes as usize] = '\0' as i32 as libc::c_char;
    } else {
        ();
        memcpy(
            origin.as_mut_ptr() as *mut libc::c_void,
            b"./\0" as *const u8 as *const libc::c_char as *const libc::c_void,
            3 as libc::c_int as libc::c_ulong,
        );
    }
    if rpath == 0xffffffffffffffff as libc::c_ulong {
        (*s.as_deref_mut().unwrap()).rpath_offsets[depth as usize] = 18446744073709551615 as libc::c_ulong;
    } else {
        (*s.as_deref_mut().unwrap()).rpath_offsets[depth as usize] = (*s.as_deref().unwrap()).string_table.n;
        if fseek(
            fptr,
            strtab_offset.wrapping_add(rpath) as libc::c_long,
            0 as libc::c_int,
        ) != 0 as libc::c_int
        {
            (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
            fclose(fptr);
            small_vec_u64_free(core::ptr::addr_of_mut!(needed));
            return 25 as libc::c_int;
        }
        string_table_copy_from_file(Some(&mut (*s.as_deref_mut().unwrap()).string_table), fptr);
        let mut curr_buf_size = (*s.as_deref().unwrap()).string_table.n;
        if interpolate_variables(core::mem::transmute::<_, *mut crate::src::libtree::libtree_state_t>(s.as_deref_mut()), (*s.as_deref().unwrap()).rpath_offsets[depth as usize], origin.as_mut_ptr()) != 0 {
            (*s.as_deref_mut().unwrap()).rpath_offsets[depth as usize] = curr_buf_size;
        }
    }
    let mut runpath_buf_offset = (*s.as_deref().unwrap()).string_table.n;
    if runpath != 0xffffffffffffffff as libc::c_ulong {
        if fseek(
            fptr,
            strtab_offset.wrapping_add(runpath) as libc::c_long,
            0 as libc::c_int,
        ) != 0 as libc::c_int
        {
            (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
            fclose(fptr);
            small_vec_u64_free(core::ptr::addr_of_mut!(needed));
            return 26 as libc::c_int;
        }
        string_table_copy_from_file(Some(&mut (*s.as_deref_mut().unwrap()).string_table), fptr);
        let mut curr_buf_size_0 = (*s.as_deref().unwrap()).string_table.n;
        if interpolate_variables(core::mem::transmute::<_, *mut crate::src::libtree::libtree_state_t>(s.as_deref_mut()), runpath_buf_offset, origin.as_mut_ptr()) != 0 {
            runpath_buf_offset= curr_buf_size_0;
        }
    }
    let mut needed_buf_offsets = small_vec_u64_t {
        buf: [0; 16],
        p: 0 as *mut uint64_t,
        n: 0,
        capacity: 0,
    };
    small_vec_u64_init(core::ptr::addr_of_mut!(needed_buf_offsets));
    let mut i_1 = 0 as libc::c_int as size_t;
    while i_1 < needed.n {
        small_vec_u64_append(core::ptr::addr_of_mut!(needed_buf_offsets), (*s.as_deref().unwrap()).string_table.n);
        if fseek(
            fptr,
            strtab_offset.wrapping_add(*needed.p.offset(i_1 as isize)) as libc::c_long,
            0 as libc::c_int,
        ) != 0 as libc::c_int
        {
            (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
            fclose(fptr);
            small_vec_u64_free(core::ptr::addr_of_mut!(needed_buf_offsets));
            small_vec_u64_free(core::ptr::addr_of_mut!(needed));
            return 27 as libc::c_int;
        }
        string_table_copy_from_file(Some(&mut (*s.as_deref_mut().unwrap()).string_table), fptr);
        i_1= i_1.wrapping_add(1);
    }
    fclose(fptr);
    let mut print_name_0 = if soname == 0xffffffffffffffff as libc::c_ulong || (*s.as_deref().unwrap()).path != 0 {
        current_file
    } else {
        (*s.as_deref().unwrap()).string_table.arr.offset(soname_buf_offset as isize)
    };
    let mut bold_color_0 = (if in_exclude_list != 0 {
        b"\x1B[0;35m\0" as *const u8 as *const libc::c_char
    } else if seen_before != 0 {
        b"\x1B[0;34m\0" as *const u8 as *const libc::c_char
    } else {
        b"\x1B[1;36m\0" as *const u8 as *const libc::c_char
    }) as *mut libc::c_char;
    let mut regular_color_0 = (if in_exclude_list != 0 {
        b"\x1B[0;35m\0" as *const u8 as *const libc::c_char
    } else if seen_before != 0 {
        b"\x1B[0;34m\0" as *const u8 as *const libc::c_char
    } else {
        b"\x1B[0;36m\0" as *const u8 as *const libc::c_char
    }) as *mut libc::c_char;
    let mut highlight_0 = (seen_before == 0 && in_exclude_list == 0) as libc::c_int;
    print_line(
        depth,
        print_name_0,
        bold_color_0,
        regular_color_0,
        highlight_0,
        reason,
        s.as_deref_mut(),
    );
    let mut exit_code = 0 as libc::c_int;
    let mut needed_not_found = needed_buf_offsets.n;
    if needed_not_found != 0 && (*s.as_deref().unwrap()).verbosity == 0 as libc::c_int {
        apply_exclude_list(Some(&mut needed_not_found), core::ptr::addr_of_mut!(needed_buf_offsets), core::mem::transmute::<_, *const crate::src::libtree::libtree_state_t>(s.as_deref()));
    }
    if needed_not_found != 0 {
        exit_code|= check_absolute_paths(
            Some(&mut needed_not_found),
            core::ptr::addr_of_mut!(needed_buf_offsets),
            depth,
            s.as_deref_mut(),
            curr_type,
        );
    }
    if runpath == 0xffffffffffffffff as libc::c_ulong {
        let mut j = depth as libc::c_int;
        while j >= 0 as libc::c_int && needed_not_found != 0 {
            if !((*s.as_deref().unwrap()).rpath_offsets[j as usize] == 18446744073709551615 as libc::c_ulong) {
                exit_code|= check_search_paths(
                    {
                        let mut init = found_t {
                            how: RPATH,
                            depth: j as size_t,
                        };
                        init
                    },
                    (*s.as_deref().unwrap()).rpath_offsets[j as usize],
                    Some(&mut needed_not_found),
                    core::ptr::addr_of_mut!(needed_buf_offsets),
                    depth,
                    s.as_deref_mut(),
                    curr_type,
                );
            }
            j-= 1;
        }
    }
    if needed_not_found != 0 && (*s.as_deref().unwrap()).ld_library_path_offset != 18446744073709551615 as libc::c_ulong
    {
        exit_code|= check_search_paths(
            {
                let mut init = found_t {
                    how: LD_LIBRARY_PATH,
                    depth: 0,
                };
                init
            },
            (*s.as_deref().unwrap()).ld_library_path_offset,
            Some(&mut needed_not_found),
            core::ptr::addr_of_mut!(needed_buf_offsets),
            depth,
            s.as_deref_mut(),
            curr_type,
        );
    }
    if needed_not_found != 0 && runpath != 0xffffffffffffffff as libc::c_ulong {
        exit_code|= check_search_paths(
            {
                let mut init = found_t {
                    how: RUNPATH,
                    depth: 0,
                };
                init
            },
            runpath_buf_offset,
            Some(&mut needed_not_found),
            core::ptr::addr_of_mut!(needed_buf_offsets),
            depth,
            s.as_deref_mut(),
            curr_type,
        );
    }
    if needed_not_found != 0 && no_def_lib == 0 {
        exit_code|= check_search_paths(
            {
                let mut init = found_t {
                    how: LD_SO_CONF,
                    depth: 0,
                };
                init
            },
            (*s.as_deref().unwrap()).ld_so_conf_offset,
            Some(&mut needed_not_found),
            core::ptr::addr_of_mut!(needed_buf_offsets),
            depth,
            s.as_deref_mut(),
            curr_type,
        );
    }
    if needed_not_found != 0 && no_def_lib == 0 {
        exit_code|= check_search_paths(
            {
                let mut init = found_t {
                    how: DEFAULT,
                    depth: 0,
                };
                init
            },
            (*s.as_deref().unwrap()).default_paths_offset,
            Some(&mut needed_not_found),
            core::ptr::addr_of_mut!(needed_buf_offsets),
            depth,
            s.as_deref_mut(),
            curr_type,
        );
    }
    if needed_not_found != 0 {
        print_error(
            depth,
            needed_not_found,
            core::ptr::addr_of!(needed_buf_offsets),
            if runpath == 0xffffffffffffffff as libc::c_ulong {
                0 as *mut libc::c_char
            } else {
                (*s.as_deref().unwrap()).string_table.arr.offset(runpath_buf_offset as isize)
            },
            s.as_deref_mut(),
            no_def_lib,
        );
        (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
        small_vec_u64_free(core::ptr::addr_of_mut!(needed_buf_offsets));
        small_vec_u64_free(core::ptr::addr_of_mut!(needed));
        return 28 as libc::c_int;
    }
    (*s.as_deref_mut().unwrap()).string_table.n= old_buf_size;
    small_vec_u64_free(core::ptr::addr_of_mut!(needed_buf_offsets));
    small_vec_u64_free(core::ptr::addr_of_mut!(needed));
    return exit_code;
}
unsafe extern "C" fn ld_conf_globbing(
    mut st: Option<&mut string_table_t>,
    mut pattern: *mut libc::c_char,
) -> libc::c_int {
    let mut result = glob_t {
        gl_pathc: 0,
        gl_pathv: 0 as *mut *mut libc::c_char,
        gl_offs: 0,
        gl_flags: 0,
        gl_closedir: None,
        gl_readdir: None,
        gl_opendir: None,
        gl_lstat: None,
        gl_stat: None,
    };
    memset(
        core::ptr::addr_of_mut!(result) as *mut glob_t as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<glob_t>() as libc::c_ulong,
    );
    let mut status = glob(pattern, 0 as libc::c_int, None, core::ptr::addr_of_mut!(result));
    match status {
        1 | 2 => {
            globfree(core::ptr::addr_of_mut!(result));
            return 1 as libc::c_int;
        }
        3 => {
            globfree(core::ptr::addr_of_mut!(result));
            return 0 as libc::c_int;
        }
        _ => {}
    }
    let mut code = 0 as libc::c_int;
    let mut i = 0 as libc::c_int as size_t;
    while i < result.gl_pathc {
        code|= parse_ld_config_file(st.as_deref_mut(), *result.gl_pathv.offset(i as isize));
        i= i.wrapping_add(1);
    }
    globfree(core::ptr::addr_of_mut!(result));
    return code;
}
unsafe extern "C" fn parse_ld_config_file(
    mut st: Option<&mut string_table_t>,
    mut path: *mut libc::c_char,
) -> libc::c_int {
    let mut fptr = fopen(path, b"r\0" as *const u8 as *const libc::c_char);
    if fptr.is_null() {
        ();
        return 1 as libc::c_int;
    }
    let mut c = 0 as libc::c_int;
    let mut line: [libc::c_char; 4096] = [0; 4096];
    let mut tmp: [libc::c_char; 4096] = [0; 4096];
    while c != -(1 as libc::c_int) {
        let mut line_len = 0 as libc::c_int as size_t;
        loop {
            c= _IO_getc(fptr);
            if !(c != '\n' as i32 && c != -(1 as libc::c_int)) {
                break;
            }
            if line_len < (4096 as libc::c_int - 1 as libc::c_int) as libc::c_ulong {
                let fresh25 = line_len;
                line_len= line_len.wrapping_add(1);
                line[fresh25 as usize] = c as libc::c_char;
            }
        }
        line[line_len as usize] = '\0' as i32 as libc::c_char;
        let mut begin = line.as_mut_ptr();
        let mut end = line.as_mut_ptr().offset(line_len as isize);
        while *(*__ctype_b_loc()).offset((*begin) as libc::c_int as isize) as libc::c_int
            & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
            != 0
        {
            begin= begin.offset(1);
        }
        let mut comment = strchr(begin, '#' as i32);
        if !comment.is_null() {
            *comment= '\0' as i32 as libc::c_char;
        } else {
            ();
        }
        while end != begin {
            end= end.offset(-1);
            if *(*__ctype_b_loc()).offset((*end) as libc::c_int as isize) as libc::c_int
                & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
                == 0
            {
                break;
            }
        }
        if begin == end {
            continue;
        }
        *end.offset(1 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
        if strncmp(
            begin,
            b"include\0" as *const u8 as *const libc::c_char,
            7 as libc::c_int as libc::c_ulong,
        ) == 0 as libc::c_int
            && *(*__ctype_b_loc())
                .offset(*begin.offset(7 as libc::c_int as isize) as libc::c_int as isize)
                as libc::c_int
                & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
                != 0
        {
            begin= begin.offset(8 as libc::c_int as isize);
            while *(*__ctype_b_loc()).offset((*begin) as libc::c_int as isize) as libc::c_int
                & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
                != 0
            {
                begin= begin.offset(1);
            }
            if (*begin) as libc::c_int != '/' as i32 {
                let mut wd = strrchr(path, '/' as i32);
                wd= if wd.is_null() {
                    ();
                    strrchr(path, '\0' as i32)
                } else {
                    wd
                };
                let mut wd_len = wd.offset_from(path) as libc::c_long as size_t;
                let mut include_len = (end.offset_from(begin) as libc::c_long
                    + 1 as libc::c_int as libc::c_long)
                    as size_t;
                if wd_len
                    .wrapping_add(1 as libc::c_int as libc::c_ulong)
                    .wrapping_add(include_len)
                    >= 4096 as libc::c_int as libc::c_ulong
                {
                    continue;
                }
                memcpy(
                    tmp.as_mut_ptr() as *mut libc::c_void,
                    path as *const libc::c_void,
                    wd_len,
                );
                tmp[wd_len as usize] = '/' as i32 as libc::c_char;
                memcpy(
                    tmp.as_mut_ptr()
                        .offset(wd_len as isize)
                        .offset(1 as libc::c_int as isize) as *mut libc::c_void,
                    begin as *const libc::c_void,
                    include_len,
                );
                tmp[wd_len
                    .wrapping_add(1 as libc::c_int as libc::c_ulong)
                    .wrapping_add(include_len) as usize] = '\0' as i32 as libc::c_char;
                begin= tmp.as_mut_ptr();
            }
            ld_conf_globbing(st.as_deref_mut(), begin);
        } else {
            string_table_store(st.as_deref_mut(), begin);
            *(*st.as_deref().unwrap()).arr
                .offset((*st.as_deref().unwrap()).n.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize) =
                ':' as i32 as libc::c_char;
        }
    }
    fclose(fptr);
    return 0 as libc::c_int;
}
unsafe extern "C" fn parse_ld_so_conf(mut s: *mut libtree_state_t) {
    let mut st: *mut string_table_t = core::ptr::addr_of_mut!((*s).string_table);
    (*s).ld_so_conf_offset= (*st).n;
    parse_ld_config_file(st.as_mut(), (*s).ld_conf_file);
    if (*st).n > (*s).ld_so_conf_offset {
        *(*st).arr.offset((*st).n.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize) =
            '\0' as i32 as libc::c_char;
    } else {
        string_table_store(st.as_mut(), b"\0" as *const u8 as *const libc::c_char);
    };
}
unsafe extern "C" fn parse_ld_library_path(mut s: Option<&mut libtree_state_t>) {
    (*s.as_deref_mut().unwrap()).ld_library_path_offset= 18446744073709551615 as libc::c_ulong;
    let mut val = getenv(b"LD_LIBRARY_PATH\0" as *const u8 as *const libc::c_char);
    if val.is_null() {
        ();
        return;
    }
    (*s.as_deref_mut().unwrap()).ld_library_path_offset= (*s.as_deref().unwrap()).string_table.n;
    string_table_store(Some(&mut (*s.as_deref_mut().unwrap()).string_table), val);
    let mut search = (*s.as_deref().unwrap()).string_table.arr.offset((*s.as_deref().unwrap()).ld_library_path_offset as isize);
    loop {
        search= strchr(search, ';' as i32);
        if search.is_null() {
            ();
            break;
        }
        let fresh26 = search;
        search= search.offset(1);
        *fresh26= ':' as i32 as libc::c_char;
    }
}
unsafe extern "C" fn set_default_paths(mut s: Option<&mut libtree_state_t>) {
    (*s.as_deref_mut().unwrap()).default_paths_offset= (*s.as_deref().unwrap()).string_table.n;
    string_table_store(
        Some(&mut (*s.as_deref_mut().unwrap()).string_table),
        b"/lib:/lib64:/usr/lib:/usr/lib64\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn libtree_state_init(mut s: Option<&mut libtree_state_t>) {
    (*s.as_deref_mut().unwrap()).string_table.n= 0 as libc::c_int as size_t;
    (*s.as_deref_mut().unwrap()).string_table.capacity= 1024 as libc::c_int as size_t;
    (*s.as_deref_mut().unwrap()).string_table.arr= malloc(
        (*s.as_deref().unwrap()).string_table.capacity
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    ) as *mut libc::c_char;
    (*s.as_deref_mut().unwrap()).visited.n= 0 as libc::c_int as size_t;
    (*s.as_deref_mut().unwrap()).visited.capacity= 256 as libc::c_int as size_t;
    (*s.as_deref_mut().unwrap()).visited.arr= malloc(
        (*s.as_deref().unwrap()).visited.capacity
            .wrapping_mul(::std::mem::size_of::<visited_file_t>() as libc::c_ulong),
    ) as *mut visited_file_t;
}
unsafe extern "C" fn libtree_state_free(mut s: Option<&mut libtree_state_t>) {
    free((*s.as_deref().unwrap()).string_table.arr as *mut libc::c_void);
    free((*s.as_deref().unwrap()).visited.arr as *mut libc::c_void);
}
unsafe extern "C" fn print_tree(
    mut pathc: libc::c_int,
    mut pathv: *mut *mut libc::c_char,
    mut s: Option<&mut libtree_state_t>,
) -> libc::c_int {
    libtree_state_init(s.as_deref_mut());
    parse_ld_so_conf(core::mem::transmute::<_, *mut crate::src::libtree::libtree_state_t>(s.as_deref_mut()));
    parse_ld_library_path(s.as_deref_mut());
    set_default_paths(s.as_deref_mut());
    let mut exit_code = 0 as libc::c_int;
    let mut i = 0 as libc::c_int;
    while i < pathc {
        let mut code = recurse(
            *pathv.offset(i as isize),
            0 as libc::c_int as size_t,
            s.as_deref_mut(),
            {
                let mut init = compat_t {
                    any: 1 as libc::c_int as libc::c_char,
                    class: 0,
                    machine: 0,
                };
                init
            },
            {
                let mut init = found_t {
                    how: INPUT,
                    depth: 0,
                };
                init
            },
        );
        fflush(stdout);
        if code != 0 as libc::c_int {
            exit_code= code;
            fputs(b"Error [\0" as *const u8 as *const libc::c_char, stderr);
            fputs(*pathv.offset(i as isize), stderr);
            fputs(b"]: \0" as *const u8 as *const libc::c_char, stderr);
        }
        let mut msg = 0 as *mut libc::c_char;
        match code {
            11 => {
                msg= b"Invalid ELF magic bytes\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            12 => {
                msg= b"Invalid ELF class\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            13 => {
                msg= b"Invalid ELF data\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            14 => {
                msg= b"Invalid ELF header\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            15 => {
                msg= b"Invalid bits\n\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
            }
            16 => {
                msg= b"Invalid endianness\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            17 => {
                msg= b"Not an ET_EXEC or ET_DYN ELF file\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            18 => {
                msg= b"Invalid ELF program header offset\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            19 => {
                msg= b"Invalid ELF program header\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            20 => {
                msg=
                    b"Can't stat file\n\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
            }
            21 => {
                msg= b"Invalid ELF dynamic section\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            22 => {
                msg= b"Invalid ELF dynamic array entry\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            23 => {
                msg= b"No ELF string table found\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            24 => {
                msg= b"Can't read DT_SONAME\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            25 => {
                msg= b"Can't read DT_RPATH\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            26 => {
                msg= b"Can't read DT_RUNPATH\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            27 => {
                msg= b"Can't read DT_NEEDED\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            28 => {
                msg= b"Not all dependencies were found\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            29 => {
                msg= b"No PT_LOAD found in ELF file\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            30 => {
                msg= b"Virtual addresses are not ordered\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            31 => {
                msg= b"Could not open file\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            32 => {
                msg= b"Incompatible ISA\n\0" as *const u8 as *const libc::c_char
                    as *mut libc::c_char;
            }
            _ => {}
        }
        if !msg.is_null() {
            fputs(msg, stderr);
        } else {
            ();
        }
        fflush(stderr);
        i+= 1;
    }
    libtree_state_free(s.as_deref_mut());
    return exit_code;
}


unsafe fn main_0(mut argc: libc::c_int, mut argv: *mut *mut libc::c_char) -> libc::c_int {
    let mut s = libtree_state_t {
        verbosity: 0,
        path: 0,
        color: 0,
        ld_conf_file: 0 as *mut libc::c_char,
        max_depth: 0,
        string_table: string_table_t {
            arr: 0 as *mut libc::c_char,
            n: 0,
            capacity: 0,
        },
        visited: visited_file_array_t {
            arr: 0 as *mut visited_file_t,
            n: 0,
            capacity: 0,
        },
        PLATFORM: 0 as *mut libc::c_char,
        LIB: 0 as *mut libc::c_char,
        OSNAME: 0 as *mut libc::c_char,
        OSREL: 0 as *mut libc::c_char,
        rpath_offsets: [0; 32],
        ld_library_path_offset: 0,
        default_paths_offset: 0,
        ld_so_conf_offset: 0,
        found_all_needed: [0; 32],
    };
    s.color= ((getenv(b"NO_COLOR\0" as *const u8 as *const libc::c_char)).is_null()
        && isatty(1 as libc::c_int) != 0) as libc::c_int;
    s.verbosity= 0 as libc::c_int;
    s.path= 0 as libc::c_int;
    s.max_depth= 32 as libc::c_int as libc::c_ulong;
    let mut positional = 1 as libc::c_int;
    let mut uname_val = utsname {
        sysname: [0; 65],
        nodename: [0; 65],
        release: [0; 65],
        version: [0; 65],
        machine: [0; 65],
        __domainname: [0; 65],
    };
    if uname(core::ptr::addr_of_mut!(uname_val)) != 0 as libc::c_int {
        return 1 as libc::c_int;
    }
    s.PLATFORM= uname_val.machine.as_mut_ptr();
    s.OSNAME= uname_val.sysname.as_mut_ptr();
    s.OSREL= uname_val.release.as_mut_ptr();
    s.ld_conf_file= b"/etc/ld.so.conf\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    if strcmp(
        uname_val.sysname.as_mut_ptr(),
        b"FreeBSD\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {
        s.ld_conf_file=
            b"/etc/ld-elf.so.conf\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    }
    s.LIB= b"lib\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    let mut opt_help = 0 as libc::c_int;
    let mut opt_version = 0 as libc::c_int;
    let mut opt_raw = 0 as libc::c_int;
    let mut i = 1 as libc::c_int;
    while i < argc {
        let mut arg = *argv.offset(i as isize);
        if opt_raw != 0
            || (*arg) as libc::c_int != '-' as i32
            || *arg.offset(1 as libc::c_int as isize) as libc::c_int == '\0' as i32
        {
            let fresh29 = positional;
            positional= positional + 1;
            *argv.offset(fresh29 as isize) = arg;
        } else {
            arg= arg.offset(1);
            if (*arg) as libc::c_int == '-' as i32 {
                arg= arg.offset(1);
                if (*arg) as libc::c_int == '\0' as i32 {
                    opt_raw= 1 as libc::c_int;
                } else if strcmp(arg, b"version\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    opt_version= 1 as libc::c_int;
                } else if strcmp(arg, b"path\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    s.path= 1 as libc::c_int;
                } else if strcmp(arg, b"verbose\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    s.verbosity+= 1;
                } else if strcmp(arg, b"help\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    opt_help= 1 as libc::c_int;
                } else if strcmp(arg, b"ldconf\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    if i + 1 as libc::c_int == argc {
                        fputs(
                            b"Expected value after `--ldconf`\n\0" as *const u8
                                as *const libc::c_char,
                            stderr,
                        );
                        return 1 as libc::c_int;
                    }
                    i+= 1;
                    s.ld_conf_file= *argv.offset(i as isize);
                } else if strcmp(arg, b"max-depth\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    if i + 1 as libc::c_int == argc {
                        fputs(
                            b"Expected value after `--max-depth`\n\0" as *const u8
                                as *const libc::c_char,
                            stderr,
                        );
                        return 1 as libc::c_int;
                    }
                    let mut ptr = 0 as *mut libc::c_char;
                    i+= 1;
                    s.max_depth= strtoul(*argv.offset(i as isize), core::ptr::addr_of_mut!(ptr), 10 as libc::c_int);
                    if s.max_depth > 32 as libc::c_int as libc::c_ulong {
                        s.max_depth= 32 as libc::c_int as libc::c_ulong;
                    }
                } else {
                    fputs(
                        b"Unrecognized flag `--\0" as *const u8 as *const libc::c_char,
                        stderr,
                    );
                    fputs(arg, stderr);
                    fputs(b"`\n\0" as *const u8 as *const libc::c_char, stderr);
                    return 1 as libc::c_int;
                }
            } else {
                while (*arg) as libc::c_int != '\0' as i32 {
                    match  (*arg) as libc::c_int {
                        104 => {
                            opt_help= 1 as libc::c_int;
                        }
                        112 => {
                            s.path= 1 as libc::c_int;
                        }
                        118 => {
                            s.verbosity+= 1;
                        }
                        _ => {
                            fputs(
                                b"Unrecognized flag `-\0" as *const u8 as *const libc::c_char,
                                stderr,
                            );
                            fputs(arg, stderr);
                            fputs(b"`\n\0" as *const u8 as *const libc::c_char, stderr);
                            return 1 as libc::c_int;
                        }
                    }
                    arg= arg.offset(1);
                }
            }
        }
        i+= 1;
    }
    argv= argv.offset(1);
    positional-= 1;
    if opt_help != 0 || opt_version == 0 && positional == 0 as libc::c_int {
        fputs(
            b"Show the dynamic dependency tree of ELF files\nUsage: libtree [OPTION]... [--] FILE [FILES]...\n\n  -h, --help     Print help info\n      --version  Print version info\n\nFile names starting with '-', for example '-.so', can be specified as follows:\n  libtree -- -.so\n\nLocating libs options:\n  -p, --path       Show the path of libraries instead of the soname\n  -v               Show libraries skipped by default*\n  -vv              Show dependencies of libraries skipped by default*\n  -vvv             Show dependencies of already encountered libraries\n  --ldconf <path>  Config file for extra search paths [\0"
                as *const u8 as *const libc::c_char,
            stdout,
        );
        fputs(s.ld_conf_file, stdout);
        fputs(
            b"]\n  --max-depth <n>  Limit library traversal to at most n levels of depth\n\n* For brevity, the following libraries are not shown by default:\n  \0"
                as *const u8 as *const libc::c_char,
            stdout,
        );
        let mut num_excluded = (::std::mem::size_of::<[*const libc::c_char; 14]>()
            as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong);
        let mut cursor_x = 3 as libc::c_int as size_t;
        let mut j = 0 as libc::c_int as size_t;
        while j < num_excluded {
            cursor_x= (cursor_x as libc::c_ulong).wrapping_add(strlen(exclude_list[j as usize]))
                as size_t as size_t;
            if cursor_x > 60 as libc::c_int as libc::c_ulong {
                cursor_x= 3 as libc::c_int as size_t;
                fputs(b"\n  \0" as *const u8 as *const libc::c_char, stdout);
            }
            fputs(exclude_list[j as usize], stdout);
            if j.wrapping_add(1 as libc::c_int as libc::c_ulong) != num_excluded {
                fputs(b", \0" as *const u8 as *const libc::c_char, stdout);
            }
            j= j.wrapping_add(1);
        }
        fputs(
            b".\n\nThe following rpath/runpath substitutions are used:\n\0" as *const u8
                as *const libc::c_char,
            stdout,
        );
        fputs(
            b"  PLATFORM       \0" as *const u8 as *const libc::c_char,
            stdout,
        );
        fputs(s.PLATFORM, stdout);
        fputs(
            b"\n  LIB            \0" as *const u8 as *const libc::c_char,
            stdout,
        );
        fputs(s.LIB, stdout);
        fputs(
            b"\n  OSNAME         \0" as *const u8 as *const libc::c_char,
            stdout,
        );
        fputs(s.OSNAME, stdout);
        fputs(
            b"\n  OSREL          \0" as *const u8 as *const libc::c_char,
            stdout,
        );
        fputs(s.OSREL, stdout);
        putchar('\n' as i32);
        return (opt_help == 0) as libc::c_int;
    }
    if opt_version != 0 {
        puts(b"3.1.1\0" as *const u8 as *const libc::c_char);
        return 0 as libc::c_int;
    }
    return print_tree(positional, argv, Some(&mut s));
}


// pub fn main() {
//     let mut args: Vec<*mut libc::c_char> = Vec::new();
//     for arg in &raw mut ::std::env::args() {
//         args.push(
//             (::std::ffi::CString::new(arg))
//                 .expect("Failed to convert argument into CString.")
//                 .into_raw(),
//         );
//     }
//     args.push(::std::ptr::null_mut());
//     unsafe {
//         ::std::process::exit(main_0(
//             (args.len() - 1) as libc::c_int,
//             args.as_mut_ptr() as *mut *mut libc::c_char,
//         ) as i32)
//     }
// }

Solving src::zunsetup::zunsetup with precision 1... ✅
Solving src::zfree::zfree with precision 1... ✅
Solving src::zstr::zstr with precision 1... ❌
Solving src::allocator::libzahl_realloc with precision 1... ✅
Solving src::zabs::zzero with precision 1... ✅
Solving src::zabs::zabs with precision 1... ✅
Solving src::zadd::zzero with precision 1... ✅
Solving src::zadd::zsignum with precision 1... ✅
Solving src::zadd::zadd_unsigned with precision 1... ✅
Solving src::zadd::zadd with precision 1... ❌
Solving src::zand::zsignum with precision 1... ✅
Solving src::zand::zzero with precision 1... ✅
Solving src::zand::zand with precision 1... ✅
Solving src::zbits::zzero with precision 1... ✅
Solving src::zbits::zbits with precision 1... ✅
Solving src::zbset::zzero with precision 1... ✅
Solving src::zbset::zbset with precision 1... ✅
Solving src::zbtest::zzero with precision 1... ✅
Solving src::zbtest::zbtest with precision 1... ✅
Solving src::zcmp::zsignum with precision 1... ✅
Solving src::zcmp::zcmp with precision 1... ✅
Solving src::zcmpi::zzero with precision 1... ✅
Solving src::zcmpi::zsignum with precision 1... ✅
Solving src::zcmpi::zcmpi with precision 1... ✅
Solving src::zcmpmag::zzero with precision 1... ✅
Solving src::zcmpmag::zcmpmag with precision 1... ✅
Solving src::zcmpu::zsignum with precision 1... ✅
Solving src::zcmpu::zcmpu with precision 1... ✅
Solving src::zdiv::zdiv with precision 1... ✅
Solving src::zdivmod::zzero with precision 1... ✅
Solving src::zdivmod::zsignum with precision 1... ✅
Solving src::zdivmod::zdivmod with precision 1... ❌
Solving src::zerror::zerror with precision 1... ✅
Solving src::zgcd::zzero with precision 1... ✅
Solving src::zgcd::zsignum with precision 1... ✅
Solving src::zgcd::zgcd with precision 1... ❌
Solving src::zload::zzero with precision 1... ✅
Solving src::zload::zload with precision 1... ✅
Solving src::zlsb::zzero with precision 1... ✅
Solving src::zlsb::zlsb with precision 1... ✅
Solving src::zlsh::zsignum with precision 1... ✅
Solving src::zlsh::zzero with precision 1... ✅
Solving src::zlsh::zlsh with precision 1... ✅
Solving src::zmod::zmod with precision 1... ✅
Solving src::zmodmul::zmodmul with precision 1... ✅
Solving src::zmodpow::zzero with precision 1... ✅
Solving src::zmodpow::zsignum with precision 1... ✅
Solving src::zmodpow::zmodpow with precision 1... ❌
Solving src::zmodpowu::zzero with precision 1... ✅
Solving src::zmodpowu::zmodpowu with precision 1... ❌
Solving src::zmodsqr::zmodsqr with precision 1... ✅
Solving src::zmul::zinit with precision 1... ✅
Solving src::zmul::zsignum with precision 1... ✅
Solving src::zmul::zmul with precision 1... ❌
Solving src::zneg::zsignum with precision 1... ✅
Solving src::zneg::zneg with precision 1... ✅
Solving src::znot::zsignum with precision 1... ✅
Solving src::znot::zzero with precision 1... ✅
Solving src::znot::znot with precision 1... ❌
Solving src::zor::zsignum with precision 1... ✅
Solving src::zor::zzero with precision 1... ✅
Solving src::zor::zor with precision 1... ✅
Solving src::zperror::zperror with precision 1... ✅
Solving src::zpow::zzero with precision 1... ✅
Solving src::zpow::zsignum with precision 1... ✅
Solving src::zpow::zpow with precision 1... ❌
Solving src::zpowu::zzero with precision 1... ✅
Solving src::zpowu::zpowu with precision 1... ❌
Solving src::zptest::zeven with precision 1... ✅
Solving src::zptest::zptest with precision 1... ❌
Solving src::zrand::zsignum with precision 1... ✅
Solving src::zrand::zzero with precision 1... ✅
Solving src::zrand::zrand_get_random_bits with precision 1... ✅
Solving src::zrand::zrand with precision 1... ❌
Solving src::zrsh::zsignum with precision 1... ✅
Solving src::zrsh::zzero with precision 1... ✅
Solving src::zrsh::zrsh with precision 1... ❌
Solving src::zsave::zzero with precision 1... ✅
Solving src::zsave::zsave with precision 1... ✅
Solving src::zset::zzero with precision 1... ✅
Solving src::zset::zset with precision 1... ✅
Solving src::zseti::zseti with precision 1... ✅
Solving src::zsets::zsignum with precision 1... ✅
Solving src::zsets::zsets with precision 1... ✅
Solving src::zsetu::zsetu with precision 1... ✅
Solving src::zsetup::zinit with precision 1... ✅
Solving src::zsetup::zsetup with precision 1... ✅
Solving src::zsplit::zzero with precision 1... ✅
Solving src::zsplit::zsplit with precision 1... ❌
Solving src::zsqr::zinit with precision 1... ✅
Solving src::zsqr::zsignum with precision 1... ✅
Solving src::zsqr::zzero with precision 1... ✅
Solving src::zsqr::zsqr with precision 1... ❌
Solving src::zstr::zzero with precision 1... ✅
Solving src::zstr::zsignum with precision 1... ✅
Solving src::zstr_length::zsignum with precision 1... ✅
Solving src::zstr_length::zzero with precision 1... ✅
Solving src::zstr_length::zstr_length with precision 1... ✅
Solving src::zsub::zzero with precision 1... ✅
Solving src::zsub::zsignum with precision 1... ✅
Solving src::zsub::zsub_unsigned with precision 1... ❌
Solving src::zsub::zsub with precision 1... ❌
Solving src::zswap::zswap with precision 1... ✅
Solving src::ztrunc::zzero with precision 1... ✅
Solving src::ztrunc::ztrunc with precision 1... ✅
Solving src::zxor::zsignum with precision 1... ✅
Solving src::zxor::zzero with precision 1... ✅
Solving src::zxor::zxor with precision 1... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq  ↓ &uniq ) -> _
src::zstr::zstr: (&any, &any) -> &any
src::allocator::libzahl_realloc: (&uniq  ↓ &uniq , _) -> _
src::zabs::zzero: (&) -> _
src::zabs::zabs: (&uniq  ↓ &uniq , &) -> _
src::zadd::zzero: (&) -> _
src::zadd::zsignum: (&) -> _
src::zadd::zadd_unsigned: (&uniq  ↓ &uniq , &, &) -> _
src::zadd::zadd: (&, &, &any) -> _
src::zand::zsignum: (&) -> _
src::zand::zzero: (&) -> _
src::zand::zand: (&uniq  ↓ &uniq , &, &) -> _
src::zbits::zzero: (&) -> _
src::zbits::zbits: (&uniq  ↓ &uniq ) -> _
src::zbset::zzero: (&) -> _
src::zbset::zbset: (&uniq  ↓ &uniq , &, _, _) -> _
src::zbtest::zzero: (&) -> _
src::zbtest::zbtest: (&, _) -> _
src::zcmp::zsignum: (&) -> _
src::zcmp::zcmp: (&, &) -> _
src::zcmpi::zzero: (&) -> _
src::zcmpi::zsignum: (&) -> _
src::zcmpi::zcmpi: (&, _) -> _
src::zcmpmag::zzero: (&) -> _
src::zcmpmag::zcmpmag: (&, &) -> _
src::zcmpu::zsignum: (&) -> _
src::zcmpu::zcmpu: (&, _) -> _
src::zdiv::zdiv: (&, &, &) -> _
src::zdivmod::zzero: (&) -> _
src::zdivmod::zsignum: (&) -> _
src::zdivmod::zdivmod: (&, &, &, &) -> _
src::zerror::zerror: (&uniq  ↓ &uniq ) -> _
src::zgcd::zzero: (&) -> _
src::zgcd::zsignum: (&) -> _
src::zgcd::zgcd: (&any, &any, &any) -> _
src::zload::zzero: (&) -> _
src::zload::zload: (&uniq  ↓ &uniq , &) -> _
src::zlsb::zzero: (&) -> _
src::zlsb::zlsb: (&) -> _
src::zlsh::zsignum: (&) -> _
src::zlsh::zzero: (&) -> _
src::zlsh::zlsh: (&uniq  ↓ &uniq , &, _) -> _
src::zmod::zmod: (&, &, &) -> _
src::zmodmul::zmodmul: (&, &, &, &) -> _
src::zmodpow::zzero: (&) -> _
src::zmodpow::zsignum: (&) -> _
src::zmodpow::zmodpow: (&any, &any, &any, &any) -> _
src::zmodpowu::zzero: (&) -> _
src::zmodpowu::zmodpowu: (&any, &any, _, &any) -> _
src::zmodsqr::zmodsqr: (&, &, &) -> _
src::zmul::zinit: (&uniq  ↓ &uniq ) -> _
src::zmul::zsignum: (&) -> _
src::zmul::zmul: (&, &, &) -> _
src::zneg::zsignum: (&) -> _
src::zneg::zneg: (&uniq  ↓ &uniq , &) -> _
src::znot::zsignum: (&) -> _
src::znot::zzero: (&) -> _
src::znot::znot: (&any, &any) -> _
src::zor::zsignum: (&) -> _
src::zor::zzero: (&) -> _
src::zor::zor: (&uniq  ↓ &uniq , &, &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (&) -> _
src::zpow::zsignum: (&) -> _
src::zpow::zpow: (&any, &any, &any) -> _
src::zpowu::zzero: (&) -> _
src::zpowu::zpowu: (&any, &any, _) -> _
src::zptest::zeven: (&) -> _
src::zptest::zptest: (&any, &any, _) -> _
src::zrand::zsignum: (&) -> _
src::zrand::zzero: (&) -> _
src::zrand::zrand_get_random_bits: (&uniq  ↓ &uniq , _, _) -> _
src::zrand::zrand: (&any, _, _, &any) -> _
src::zrsh::zsignum: (&) -> _
src::zrsh::zzero: (&) -> _
src::zrsh::zrsh: (&any, &any, _) -> _
src::zsave::zzero: (&) -> _
src::zsave::zsave: (&, &) -> _
src::zset::zzero: (&) -> _
src::zset::zset: (&uniq  ↓ &uniq , &) -> _
src::zseti::zseti: (&uniq  ↓ &uniq , _) -> _
src::zsets::zsignum: (&) -> _
src::zsets::zsets: (&, &) -> _
src::zsetu::zsetu: (&uniq  ↓ &uniq , _) -> _
src::zsetup::zinit: (&uniq  ↓ &uniq ) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (&) -> _
src::zsplit::zsplit: (&any, &any, &any, _) -> _
src::zsqr::zinit: (&uniq  ↓ &uniq ) -> _
src::zsqr::zsignum: (&) -> _
src::zsqr::zzero: (&) -> _
src::zsqr::zsqr: (&, &) -> _
src::zstr::zzero: (&) -> _
src::zstr::zsignum: (&) -> _
src::zstr_length::zsignum: (&) -> _
src::zstr_length::zzero: (&) -> _
src::zstr_length::zstr_length: (&, _) -> _
src::zsub::zzero: (&) -> _
src::zsub::zsignum: (&) -> _
src::zsub::zsub_unsigned: (&any, &any, &any) -> _
src::zsub::zsub: (&any, &any, &any) -> _
src::zswap::zswap: (&uniq  ↓ &uniq , &uniq  ↓ &uniq ) -> _
src::ztrunc::zzero: (&) -> _
src::ztrunc::ztrunc: (&uniq  ↓ &uniq , &, _) -> _
src::zxor::zsignum: (&) -> _
src::zxor::zzero: (&) -> _
src::zxor::zxor: (&uniq  ↓ &uniq , &, &) -> _
Solving src::zunsetup::zunsetup with precision 2... ❌
Solving src::zfree::zfree with precision 2... ❌
Solving src::zstr::zstr with precision 2... ❌
Solving src::allocator::libzahl_realloc with precision 2... ❌
Solving src::zabs::zzero with precision 2... ✅
Solving src::zabs::zabs with precision 2... ✅
Solving src::zadd::zzero with precision 2... ✅
Solving src::zadd::zsignum with precision 2... ✅
Solving src::zadd::zadd_unsigned with precision 2... ✅
Solving src::zadd::zadd with precision 2... ❌
Solving src::zand::zsignum with precision 2... ✅
Solving src::zand::zzero with precision 2... ✅
Solving src::zand::zand with precision 2... ✅
Solving src::zbits::zzero with precision 2... ✅
Solving src::zbits::zbits with precision 2... ✅
Solving src::zbset::zzero with precision 2... ✅
Solving src::zbset::zbset with precision 2... ✅
Solving src::zbtest::zzero with precision 2... ✅
Solving src::zbtest::zbtest with precision 2... ✅
Solving src::zcmp::zsignum with precision 2... ✅
Solving src::zcmp::zcmp with precision 2... ✅
Solving src::zcmpi::zzero with precision 2... ✅
Solving src::zcmpi::zsignum with precision 2... ✅
Solving src::zcmpi::zcmpi with precision 2... ✅
Solving src::zcmpmag::zzero with precision 2... ✅
Solving src::zcmpmag::zcmpmag with precision 2... ✅
Solving src::zcmpu::zsignum with precision 2... ✅
Solving src::zcmpu::zcmpu with precision 2... ✅
Solving src::zdiv::zdiv with precision 2... ✅
Solving src::zdivmod::zzero with precision 2... ✅
Solving src::zdivmod::zsignum with precision 2... ✅
Solving src::zdivmod::zdivmod with precision 2... ❌
Solving src::zerror::zerror with precision 2... ✅
Solving src::zgcd::zzero with precision 2... ✅
Solving src::zgcd::zsignum with precision 2... ✅
Solving src::zgcd::zgcd with precision 2... ❌
Solving src::zload::zzero with precision 2... ✅
Solving src::zload::zload with precision 2... ✅
Solving src::zlsb::zzero with precision 2... ✅
Solving src::zlsb::zlsb with precision 2... ✅
Solving src::zlsh::zsignum with precision 2... ✅
Solving src::zlsh::zzero with precision 2... ✅
Solving src::zlsh::zlsh with precision 2... ✅
Solving src::zmod::zmod with precision 2... ✅
Solving src::zmodmul::zmodmul with precision 2... ✅
Solving src::zmodpow::zzero with precision 2... ✅
Solving src::zmodpow::zsignum with precision 2... ✅
Solving src::zmodpow::zmodpow with precision 2... ❌
Solving src::zmodpowu::zzero with precision 2... ✅
Solving src::zmodpowu::zmodpowu with precision 2... ❌
Solving src::zmodsqr::zmodsqr with precision 2... ✅
Solving src::zmul::zinit with precision 2... ✅
Solving src::zmul::zsignum with precision 2... ✅
Solving src::zmul::zmul with precision 2... ❌
Solving src::zneg::zsignum with precision 2... ✅
Solving src::zneg::zneg with precision 2... ✅
Solving src::znot::zsignum with precision 2... ✅
Solving src::znot::zzero with precision 2... ✅
Solving src::znot::znot with precision 2... ❌
Solving src::zor::zsignum with precision 2... ✅
Solving src::zor::zzero with precision 2... ✅
Solving src::zor::zor with precision 2... ✅
Solving src::zperror::zperror with precision 2... ✅
Solving src::zpow::zzero with precision 2... ✅
Solving src::zpow::zsignum with precision 2... ✅
Solving src::zpow::zpow with precision 2... ❌
Solving src::zpowu::zzero with precision 2... ✅
Solving src::zpowu::zpowu with precision 2... ❌
Solving src::zptest::zeven with precision 2... ✅
Solving src::zptest::zptest with precision 2... ❌
Solving src::zrand::zsignum with precision 2... ✅
Solving src::zrand::zzero with precision 2... ✅
Solving src::zrand::zrand_get_random_bits with precision 2... ✅
Solving src::zrand::zrand with precision 2... ❌
Solving src::zrsh::zsignum with precision 2... ✅
Solving src::zrsh::zzero with precision 2... ✅
Solving src::zrsh::zrsh with precision 2... ❌
Solving src::zsave::zzero with precision 2... ✅
Solving src::zsave::zsave with precision 2... ✅
Solving src::zset::zzero with precision 2... ✅
Solving src::zset::zset with precision 2... ✅
Solving src::zseti::zseti with precision 2... ✅
Solving src::zsets::zsignum with precision 2... ✅
Solving src::zsets::zsets with precision 2... ✅
Solving src::zsetu::zsetu with precision 2... ✅
Solving src::zsetup::zinit with precision 2... ✅
Solving src::zsetup::zsetup with precision 2... ✅
Solving src::zsplit::zzero with precision 2... ✅
Solving src::zsplit::zsplit with precision 2... ❌
Solving src::zsqr::zinit with precision 2... ✅
Solving src::zsqr::zsignum with precision 2... ✅
Solving src::zsqr::zzero with precision 2... ✅
Solving src::zsqr::zsqr with precision 2... ❌
Solving src::zstr::zzero with precision 2... ✅
Solving src::zstr::zsignum with precision 2... ✅
Solving src::zstr_length::zsignum with precision 2... ✅
Solving src::zstr_length::zzero with precision 2... ✅
Solving src::zstr_length::zstr_length with precision 2... ✅
Solving src::zsub::zzero with precision 2... ✅
Solving src::zsub::zsignum with precision 2... ✅
Solving src::zsub::zsub_unsigned with precision 2... ❌
Solving src::zsub::zsub with precision 2... ❌
Solving src::zswap::zswap with precision 2... ✅
Solving src::ztrunc::zzero with precision 2... ✅
Solving src::ztrunc::ztrunc with precision 2... ✅
Solving src::zxor::zsignum with precision 2... ✅
Solving src::zxor::zzero with precision 2... ✅
Solving src::zxor::zxor with precision 2... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq &any ↓ &uniq &any) -> _
src::zstr::zstr: (&any &any, &any) -> &any
src::allocator::libzahl_realloc: (&uniq & ↓ &uniq &, _) -> _
src::zabs::zzero: (& &) -> _
src::zabs::zabs: (&uniq & ↓ &uniq &, & &) -> _
src::zadd::zzero: (& &) -> _
src::zadd::zsignum: (& &) -> _
src::zadd::zadd_unsigned: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zadd::zadd: (& &, & &, &any &any) -> _
src::zand::zsignum: (& &) -> _
src::zand::zzero: (& &) -> _
src::zand::zand: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zbits::zzero: (& &) -> _
src::zbits::zbits: (&uniq & ↓ &uniq &) -> _
src::zbset::zzero: (& &) -> _
src::zbset::zbset: (&uniq & ↓ &uniq &, & &, _, _) -> _
src::zbtest::zzero: (& &) -> _
src::zbtest::zbtest: (& &, _) -> _
src::zcmp::zsignum: (& &) -> _
src::zcmp::zcmp: (& &, & &) -> _
src::zcmpi::zzero: (& &) -> _
src::zcmpi::zsignum: (& &) -> _
src::zcmpi::zcmpi: (& &, _) -> _
src::zcmpmag::zzero: (& &) -> _
src::zcmpmag::zcmpmag: (& &, & &) -> _
src::zcmpu::zsignum: (& &) -> _
src::zcmpu::zcmpu: (& &, _) -> _
src::zdiv::zdiv: (& &, & &, & &) -> _
src::zdivmod::zzero: (& &) -> _
src::zdivmod::zsignum: (& &) -> _
src::zdivmod::zdivmod: (& &, & &, & &, & &) -> _
src::zerror::zerror: (&uniq & ↓ &uniq &) -> _
src::zgcd::zzero: (& &) -> _
src::zgcd::zsignum: (& &) -> _
src::zgcd::zgcd: (&any &any, &any &any, &any &any) -> _
src::zload::zzero: (& &) -> _
src::zload::zload: (&uniq & ↓ &uniq &, &) -> _
src::zlsb::zzero: (& &) -> _
src::zlsb::zlsb: (& &) -> _
src::zlsh::zsignum: (& &) -> _
src::zlsh::zzero: (& &) -> _
src::zlsh::zlsh: (&uniq & ↓ &uniq &, & &, _) -> _
src::zmod::zmod: (& &, & &, & &) -> _
src::zmodmul::zmodmul: (& &, & &, & &, & &) -> _
src::zmodpow::zzero: (& &) -> _
src::zmodpow::zsignum: (& &) -> _
src::zmodpow::zmodpow: (&any &any, &any &any, &any &any, &any &any) -> _
src::zmodpowu::zzero: (& &) -> _
src::zmodpowu::zmodpowu: (&any &any, &any &any, _, &any &any) -> _
src::zmodsqr::zmodsqr: (& &, & &, & &) -> _
src::zmul::zinit: (&uniq & ↓ &uniq &) -> _
src::zmul::zsignum: (& &) -> _
src::zmul::zmul: (& &, & &, & &) -> _
src::zneg::zsignum: (& &) -> _
src::zneg::zneg: (&uniq & ↓ &uniq &, & &) -> _
src::znot::zsignum: (& &) -> _
src::znot::zzero: (& &) -> _
src::znot::znot: (&any &any, &any &any) -> _
src::zor::zsignum: (& &) -> _
src::zor::zzero: (& &) -> _
src::zor::zor: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (& &) -> _
src::zpow::zsignum: (& &) -> _
src::zpow::zpow: (&any &any, &any &any, &any &any) -> _
src::zpowu::zzero: (& &) -> _
src::zpowu::zpowu: (&any &any, &any &any, _) -> _
src::zptest::zeven: (& &) -> _
src::zptest::zptest: (&any &any, &any &any, _) -> _
src::zrand::zsignum: (& &) -> _
src::zrand::zzero: (& &) -> _
src::zrand::zrand_get_random_bits: (&uniq & ↓ &uniq &, _, _) -> _
src::zrand::zrand: (&any &any, _, _, &any &any) -> _
src::zrsh::zsignum: (& &) -> _
src::zrsh::zzero: (& &) -> _
src::zrsh::zrsh: (&any &any, &any &any, _) -> _
src::zsave::zzero: (& &) -> _
src::zsave::zsave: (& &, &) -> _
src::zset::zzero: (& &) -> _
src::zset::zset: (&uniq & ↓ &uniq &, & &) -> _
src::zseti::zseti: (&uniq & ↓ &uniq &, _) -> _
src::zsets::zsignum: (& &) -> _
src::zsets::zsets: (& &, &) -> _
src::zsetu::zsetu: (&uniq & ↓ &uniq &, _) -> _
src::zsetup::zinit: (&uniq & ↓ &uniq &) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (& &) -> _
src::zsplit::zsplit: (&any &any, &any &any, &any &any, _) -> _
src::zsqr::zinit: (&uniq & ↓ &uniq &) -> _
src::zsqr::zsignum: (& &) -> _
src::zsqr::zzero: (& &) -> _
src::zsqr::zsqr: (& &, & &) -> _
src::zstr::zzero: (& &) -> _
src::zstr::zsignum: (& &) -> _
src::zstr_length::zsignum: (& &) -> _
src::zstr_length::zzero: (& &) -> _
src::zstr_length::zstr_length: (& &, _) -> _
src::zsub::zzero: (& &) -> _
src::zsub::zsignum: (& &) -> _
src::zsub::zsub_unsigned: (&any &any, &any &any, &any &any) -> _
src::zsub::zsub: (&any &any, &any &any, &any &any) -> _
src::zswap::zswap: (&uniq & ↓ &uniq &, &uniq & ↓ &uniq &) -> _
src::ztrunc::zzero: (& &) -> _
src::ztrunc::ztrunc: (&uniq & ↓ &uniq &, & &, _) -> _
src::zxor::zsignum: (& &) -> _
src::zxor::zzero: (& &) -> _
src::zxor::zxor: (&uniq & ↓ &uniq &, & &, & &) -> _
Solving src::zunsetup::zunsetup with precision 2... ❌
Solving src::zfree::zfree with precision 2... ❌
Solving src::zstr::zstr with precision 1... ❌
Solving src::allocator::libzahl_realloc with precision 2... ❌
Solving src::zabs::zzero with precision 3... ✅
Solving src::zabs::zabs with precision 3... ✅
Solving src::zadd::zzero with precision 3... ✅
Solving src::zadd::zsignum with precision 3... ✅
Solving src::zadd::zadd_unsigned with precision 3... ✅
Solving src::zadd::zadd with precision 1... ❌
Solving src::zand::zsignum with precision 3... ✅
Solving src::zand::zzero with precision 3... ✅
Solving src::zand::zand with precision 3... ✅
Solving src::zbits::zzero with precision 3... ✅
Solving src::zbits::zbits with precision 3... ✅
Solving src::zbset::zzero with precision 3... ✅
Solving src::zbset::zbset with precision 3... ✅
Solving src::zbtest::zzero with precision 3... ✅
Solving src::zbtest::zbtest with precision 3... ✅
Solving src::zcmp::zsignum with precision 3... ✅
Solving src::zcmp::zcmp with precision 3... ✅
Solving src::zcmpi::zzero with precision 3... ✅
Solving src::zcmpi::zsignum with precision 3... ✅
Solving src::zcmpi::zcmpi with precision 3... ✅
Solving src::zcmpmag::zzero with precision 3... ✅
Solving src::zcmpmag::zcmpmag with precision 3... ✅
Solving src::zcmpu::zsignum with precision 3... ✅
Solving src::zcmpu::zcmpu with precision 3... ✅
Solving src::zdiv::zdiv with precision 3... ✅
Solving src::zdivmod::zzero with precision 3... ✅
Solving src::zdivmod::zsignum with precision 3... ✅
Solving src::zdivmod::zdivmod with precision 1... ❌
Solving src::zerror::zerror with precision 3... ✅
Solving src::zgcd::zzero with precision 3... ✅
Solving src::zgcd::zsignum with precision 3... ✅
Solving src::zgcd::zgcd with precision 1... ❌
Solving src::zload::zzero with precision 3... ✅
Solving src::zload::zload with precision 3... ✅
Solving src::zlsb::zzero with precision 3... ✅
Solving src::zlsb::zlsb with precision 3... ✅
Solving src::zlsh::zsignum with precision 3... ✅
Solving src::zlsh::zzero with precision 3... ✅
Solving src::zlsh::zlsh with precision 3... ✅
Solving src::zmod::zmod with precision 3... ✅
Solving src::zmodmul::zmodmul with precision 3... ✅
Solving src::zmodpow::zzero with precision 3... ✅
Solving src::zmodpow::zsignum with precision 3... ✅
Solving src::zmodpow::zmodpow with precision 1... ❌
Solving src::zmodpowu::zzero with precision 3... ✅
Solving src::zmodpowu::zmodpowu with precision 1... ❌
Solving src::zmodsqr::zmodsqr with precision 3... ✅
Solving src::zmul::zinit with precision 3... ✅
Solving src::zmul::zsignum with precision 3... ✅
Solving src::zmul::zmul with precision 1... ❌
Solving src::zneg::zsignum with precision 3... ✅
Solving src::zneg::zneg with precision 3... ✅
Solving src::znot::zsignum with precision 3... ✅
Solving src::znot::zzero with precision 3... ✅
Solving src::znot::znot with precision 1... ❌
Solving src::zor::zsignum with precision 3... ✅
Solving src::zor::zzero with precision 3... ✅
Solving src::zor::zor with precision 3... ✅
Solving src::zperror::zperror with precision 3... ✅
Solving src::zpow::zzero with precision 3... ✅
Solving src::zpow::zsignum with precision 3... ✅
Solving src::zpow::zpow with precision 1... ❌
Solving src::zpowu::zzero with precision 3... ✅
Solving src::zpowu::zpowu with precision 1... ❌
Solving src::zptest::zeven with precision 3... ✅
Solving src::zptest::zptest with precision 1... ❌
Solving src::zrand::zsignum with precision 3... ✅
Solving src::zrand::zzero with precision 3... ✅
Solving src::zrand::zrand_get_random_bits with precision 3... ✅
Solving src::zrand::zrand with precision 1... ❌
Solving src::zrsh::zsignum with precision 3... ✅
Solving src::zrsh::zzero with precision 3... ✅
Solving src::zrsh::zrsh with precision 1... ❌
Solving src::zsave::zzero with precision 3... ✅
Solving src::zsave::zsave with precision 3... ✅
Solving src::zset::zzero with precision 3... ✅
Solving src::zset::zset with precision 3... ✅
Solving src::zseti::zseti with precision 3... ✅
Solving src::zsets::zsignum with precision 3... ✅
Solving src::zsets::zsets with precision 3... ✅
Solving src::zsetu::zsetu with precision 3... ✅
Solving src::zsetup::zinit with precision 3... ✅
Solving src::zsetup::zsetup with precision 3... ✅
Solving src::zsplit::zzero with precision 3... ✅
Solving src::zsplit::zsplit with precision 1... ❌
Solving src::zsqr::zinit with precision 3... ✅
Solving src::zsqr::zsignum with precision 3... ✅
Solving src::zsqr::zzero with precision 3... ✅
Solving src::zsqr::zsqr with precision 1... ❌
Solving src::zstr::zzero with precision 3... ✅
Solving src::zstr::zsignum with precision 3... ✅
Solving src::zstr_length::zsignum with precision 3... ✅
Solving src::zstr_length::zzero with precision 3... ✅
Solving src::zstr_length::zstr_length with precision 3... ✅
Solving src::zsub::zzero with precision 3... ✅
Solving src::zsub::zsignum with precision 3... ✅
Solving src::zsub::zsub_unsigned with precision 1... ❌
Solving src::zsub::zsub with precision 1... ❌
Solving src::zswap::zswap with precision 3... ✅
Solving src::ztrunc::zzero with precision 3... ✅
Solving src::ztrunc::ztrunc with precision 3... ✅
Solving src::zxor::zsignum with precision 3... ✅
Solving src::zxor::zzero with precision 3... ✅
Solving src::zxor::zxor with precision 3... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq &any ↓ &uniq &any) -> _
src::zstr::zstr: (&any, &any) -> &any
src::allocator::libzahl_realloc: (&uniq & ↓ &uniq &, _) -> _
src::zabs::zzero: (& &) -> _
src::zabs::zabs: (&uniq & ↓ &uniq &, & &) -> _
src::zadd::zzero: (& &) -> _
src::zadd::zsignum: (& &) -> _
src::zadd::zadd_unsigned: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zadd::zadd: (&, &, &any) -> _
src::zand::zsignum: (& &) -> _
src::zand::zzero: (& &) -> _
src::zand::zand: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zbits::zzero: (& &) -> _
src::zbits::zbits: (&uniq & ↓ &uniq &) -> _
src::zbset::zzero: (& &) -> _
src::zbset::zbset: (&uniq & ↓ &uniq &, & &, _, _) -> _
src::zbtest::zzero: (& &) -> _
src::zbtest::zbtest: (& &, _) -> _
src::zcmp::zsignum: (& &) -> _
src::zcmp::zcmp: (& &, & &) -> _
src::zcmpi::zzero: (& &) -> _
src::zcmpi::zsignum: (& &) -> _
src::zcmpi::zcmpi: (& &, _) -> _
src::zcmpmag::zzero: (& &) -> _
src::zcmpmag::zcmpmag: (& &, & &) -> _
src::zcmpu::zsignum: (& &) -> _
src::zcmpu::zcmpu: (& &, _) -> _
src::zdiv::zdiv: (& &, & &, & &) -> _
src::zdivmod::zzero: (& &) -> _
src::zdivmod::zsignum: (& &) -> _
src::zdivmod::zdivmod: (&, &, &, &) -> _
src::zerror::zerror: (&uniq & ↓ &uniq &) -> _
src::zgcd::zzero: (& &) -> _
src::zgcd::zsignum: (& &) -> _
src::zgcd::zgcd: (&any, &any, &any) -> _
src::zload::zzero: (& &) -> _
src::zload::zload: (&uniq & ↓ &uniq &, &) -> _
src::zlsb::zzero: (& &) -> _
src::zlsb::zlsb: (& &) -> _
src::zlsh::zsignum: (& &) -> _
src::zlsh::zzero: (& &) -> _
src::zlsh::zlsh: (&uniq & ↓ &uniq &, & &, _) -> _
src::zmod::zmod: (& &, & &, & &) -> _
src::zmodmul::zmodmul: (& &, & &, & &, & &) -> _
src::zmodpow::zzero: (& &) -> _
src::zmodpow::zsignum: (& &) -> _
src::zmodpow::zmodpow: (&any, &any, &any, &any) -> _
src::zmodpowu::zzero: (& &) -> _
src::zmodpowu::zmodpowu: (&any, &any, _, &any) -> _
src::zmodsqr::zmodsqr: (& &, & &, & &) -> _
src::zmul::zinit: (&uniq & ↓ &uniq &) -> _
src::zmul::zsignum: (& &) -> _
src::zmul::zmul: (&, &, &) -> _
src::zneg::zsignum: (& &) -> _
src::zneg::zneg: (&uniq & ↓ &uniq &, & &) -> _
src::znot::zsignum: (& &) -> _
src::znot::zzero: (& &) -> _
src::znot::znot: (&any, &any) -> _
src::zor::zsignum: (& &) -> _
src::zor::zzero: (& &) -> _
src::zor::zor: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (& &) -> _
src::zpow::zsignum: (& &) -> _
src::zpow::zpow: (&any, &any, &any) -> _
src::zpowu::zzero: (& &) -> _
src::zpowu::zpowu: (&any, &any, _) -> _
src::zptest::zeven: (& &) -> _
src::zptest::zptest: (&any, &any, _) -> _
src::zrand::zsignum: (& &) -> _
src::zrand::zzero: (& &) -> _
src::zrand::zrand_get_random_bits: (&uniq & ↓ &uniq &, _, _) -> _
src::zrand::zrand: (&any, _, _, &any) -> _
src::zrsh::zsignum: (& &) -> _
src::zrsh::zzero: (& &) -> _
src::zrsh::zrsh: (&any, &any, _) -> _
src::zsave::zzero: (& &) -> _
src::zsave::zsave: (& &, &) -> _
src::zset::zzero: (& &) -> _
src::zset::zset: (&uniq & ↓ &uniq &, & &) -> _
src::zseti::zseti: (&uniq & ↓ &uniq &, _) -> _
src::zsets::zsignum: (& &) -> _
src::zsets::zsets: (& &, &) -> _
src::zsetu::zsetu: (&uniq & ↓ &uniq &, _) -> _
src::zsetup::zinit: (&uniq & ↓ &uniq &) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (& &) -> _
src::zsplit::zsplit: (&any, &any, &any, _) -> _
src::zsqr::zinit: (&uniq & ↓ &uniq &) -> _
src::zsqr::zsignum: (& &) -> _
src::zsqr::zzero: (& &) -> _
src::zsqr::zsqr: (&, &) -> _
src::zstr::zzero: (& &) -> _
src::zstr::zsignum: (& &) -> _
src::zstr_length::zsignum: (& &) -> _
src::zstr_length::zzero: (& &) -> _
src::zstr_length::zstr_length: (& &, _) -> _
src::zsub::zzero: (& &) -> _
src::zsub::zsignum: (& &) -> _
src::zsub::zsub_unsigned: (&any, &any, &any) -> _
src::zsub::zsub: (&any, &any, &any) -> _
src::zswap::zswap: (&uniq & ↓ &uniq &, &uniq & ↓ &uniq &) -> _
src::ztrunc::zzero: (& &) -> _
src::ztrunc::ztrunc: (&uniq & ↓ &uniq &, & &, _) -> _
src::zxor::zsignum: (& &) -> _
src::zxor::zzero: (& &) -> _
src::zxor::zxor: (&uniq & ↓ &uniq &, & &, & &) -> _
Solving src::zunsetup::zunsetup with precision 1... ✅
Solving src::zfree::zfree with precision 1... ✅
Solving src::allocator::libzahl_realloc with precision 1... ✅
Solving src::zabs::zzero with precision 3... ✅
Solving src::zabs::zabs with precision 3... ✅
Solving src::zadd::zzero with precision 3... ✅
Solving src::zadd::zsignum with precision 3... ✅
Solving src::zadd::zadd_unsigned with precision 3... ✅
Solving src::zand::zsignum with precision 3... ✅
Solving src::zand::zzero with precision 3... ✅
Solving src::zand::zand with precision 3... ✅
Solving src::zbits::zzero with precision 3... ✅
Solving src::zbits::zbits with precision 3... ✅
Solving src::zbset::zzero with precision 3... ✅
Solving src::zbset::zbset with precision 3... ✅
Solving src::zbtest::zzero with precision 3... ✅
Solving src::zbtest::zbtest with precision 3... ✅
Solving src::zcmp::zsignum with precision 3... ✅
Solving src::zcmp::zcmp with precision 3... ✅
Solving src::zcmpi::zzero with precision 3... ✅
Solving src::zcmpi::zsignum with precision 3... ✅
Solving src::zcmpi::zcmpi with precision 3... ✅
Solving src::zcmpmag::zzero with precision 3... ✅
Solving src::zcmpmag::zcmpmag with precision 3... ✅
Solving src::zcmpu::zsignum with precision 3... ✅
Solving src::zcmpu::zcmpu with precision 3... ✅
Solving src::zdiv::zdiv with precision 3... ✅
Solving src::zdivmod::zzero with precision 3... ✅
Solving src::zdivmod::zsignum with precision 3... ✅
Solving src::zerror::zerror with precision 3... ✅
Solving src::zgcd::zzero with precision 3... ✅
Solving src::zgcd::zsignum with precision 3... ✅
Solving src::zload::zzero with precision 3... ✅
Solving src::zload::zload with precision 3... ✅
Solving src::zlsb::zzero with precision 3... ✅
Solving src::zlsb::zlsb with precision 3... ✅
Solving src::zlsh::zsignum with precision 3... ✅
Solving src::zlsh::zzero with precision 3... ✅
Solving src::zlsh::zlsh with precision 3... ✅
Solving src::zmod::zmod with precision 3... ✅
Solving src::zmodmul::zmodmul with precision 3... ✅
Solving src::zmodpow::zzero with precision 3... ✅
Solving src::zmodpow::zsignum with precision 3... ✅
Solving src::zmodpowu::zzero with precision 3... ✅
Solving src::zmodsqr::zmodsqr with precision 3... ✅
Solving src::zmul::zinit with precision 3... ✅
Solving src::zmul::zsignum with precision 3... ✅
Solving src::zneg::zsignum with precision 3... ✅
Solving src::zneg::zneg with precision 3... ✅
Solving src::znot::zsignum with precision 3... ✅
Solving src::znot::zzero with precision 3... ✅
Solving src::zor::zsignum with precision 3... ✅
Solving src::zor::zzero with precision 3... ✅
Solving src::zor::zor with precision 3... ✅
Solving src::zperror::zperror with precision 3... ✅
Solving src::zpow::zzero with precision 3... ✅
Solving src::zpow::zsignum with precision 3... ✅
Solving src::zpowu::zzero with precision 3... ✅
Solving src::zptest::zeven with precision 3... ✅
Solving src::zrand::zsignum with precision 3... ✅
Solving src::zrand::zzero with precision 3... ✅
Solving src::zrand::zrand_get_random_bits with precision 3... ✅
Solving src::zrsh::zsignum with precision 3... ✅
Solving src::zrsh::zzero with precision 3... ✅
Solving src::zsave::zzero with precision 3... ✅
Solving src::zsave::zsave with precision 3... ✅
Solving src::zset::zzero with precision 3... ✅
Solving src::zset::zset with precision 3... ✅
Solving src::zseti::zseti with precision 3... ✅
Solving src::zsets::zsignum with precision 3... ✅
Solving src::zsets::zsets with precision 3... ✅
Solving src::zsetu::zsetu with precision 3... ✅
Solving src::zsetup::zinit with precision 3... ✅
Solving src::zsetup::zsetup with precision 3... ✅
Solving src::zsplit::zzero with precision 3... ✅
Solving src::zsqr::zinit with precision 3... ✅
Solving src::zsqr::zsignum with precision 3... ✅
Solving src::zsqr::zzero with precision 3... ✅
Solving src::zstr::zzero with precision 3... ✅
Solving src::zstr::zsignum with precision 3... ✅
Solving src::zstr_length::zsignum with precision 3... ✅
Solving src::zstr_length::zzero with precision 3... ✅
Solving src::zstr_length::zstr_length with precision 3... ✅
Solving src::zsub::zzero with precision 3... ✅
Solving src::zsub::zsignum with precision 3... ✅
Solving src::zswap::zswap with precision 3... ✅
Solving src::ztrunc::zzero with precision 3... ✅
Solving src::ztrunc::ztrunc with precision 3... ✅
Solving src::zxor::zsignum with precision 3... ✅
Solving src::zxor::zzero with precision 3... ✅
Solving src::zxor::zxor with precision 3... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq  ↓ &uniq ) -> _
src::zstr::zstr: (_, _) -> _
src::allocator::libzahl_realloc: (&uniq  ↓ &uniq , _) -> _
src::zabs::zzero: (& &) -> _
src::zabs::zabs: (&uniq & ↓ &uniq &, & &) -> _
src::zadd::zzero: (& &) -> _
src::zadd::zsignum: (& &) -> _
src::zadd::zadd_unsigned: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zadd::zadd: (_, _, _) -> _
src::zand::zsignum: (& &) -> _
src::zand::zzero: (& &) -> _
src::zand::zand: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zbits::zzero: (& &) -> _
src::zbits::zbits: (&uniq & ↓ &uniq &) -> _
src::zbset::zzero: (& &) -> _
src::zbset::zbset: (&uniq & ↓ &uniq &, & &, _, _) -> _
src::zbtest::zzero: (& &) -> _
src::zbtest::zbtest: (& &, _) -> _
src::zcmp::zsignum: (& &) -> _
src::zcmp::zcmp: (& &, & &) -> _
src::zcmpi::zzero: (& &) -> _
src::zcmpi::zsignum: (& &) -> _
src::zcmpi::zcmpi: (& &, _) -> _
src::zcmpmag::zzero: (& &) -> _
src::zcmpmag::zcmpmag: (& &, & &) -> _
src::zcmpu::zsignum: (& &) -> _
src::zcmpu::zcmpu: (& &, _) -> _
src::zdiv::zdiv: (& &, & &, & &) -> _
src::zdivmod::zzero: (& &) -> _
src::zdivmod::zsignum: (& &) -> _
src::zdivmod::zdivmod: (_, _, _, _) -> _
src::zerror::zerror: (&uniq & ↓ &uniq &) -> _
src::zgcd::zzero: (& &) -> _
src::zgcd::zsignum: (& &) -> _
src::zgcd::zgcd: (_, _, _) -> _
src::zload::zzero: (& &) -> _
src::zload::zload: (&uniq & ↓ &uniq &, &) -> _
src::zlsb::zzero: (& &) -> _
src::zlsb::zlsb: (& &) -> _
src::zlsh::zsignum: (& &) -> _
src::zlsh::zzero: (& &) -> _
src::zlsh::zlsh: (&uniq & ↓ &uniq &, & &, _) -> _
src::zmod::zmod: (& &, & &, & &) -> _
src::zmodmul::zmodmul: (& &, & &, & &, & &) -> _
src::zmodpow::zzero: (& &) -> _
src::zmodpow::zsignum: (& &) -> _
src::zmodpow::zmodpow: (_, _, _, _) -> _
src::zmodpowu::zzero: (& &) -> _
src::zmodpowu::zmodpowu: (_, _, _, _) -> _
src::zmodsqr::zmodsqr: (& &, & &, & &) -> _
src::zmul::zinit: (&uniq & ↓ &uniq &) -> _
src::zmul::zsignum: (& &) -> _
src::zmul::zmul: (_, _, _) -> _
src::zneg::zsignum: (& &) -> _
src::zneg::zneg: (&uniq & ↓ &uniq &, & &) -> _
src::znot::zsignum: (& &) -> _
src::znot::zzero: (& &) -> _
src::znot::znot: (_, _) -> _
src::zor::zsignum: (& &) -> _
src::zor::zzero: (& &) -> _
src::zor::zor: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (& &) -> _
src::zpow::zsignum: (& &) -> _
src::zpow::zpow: (_, _, _) -> _
src::zpowu::zzero: (& &) -> _
src::zpowu::zpowu: (_, _, _) -> _
src::zptest::zeven: (& &) -> _
src::zptest::zptest: (_, _, _) -> _
src::zrand::zsignum: (& &) -> _
src::zrand::zzero: (& &) -> _
src::zrand::zrand_get_random_bits: (&uniq & ↓ &uniq &, _, _) -> _
src::zrand::zrand: (_, _, _, _) -> _
src::zrsh::zsignum: (& &) -> _
src::zrsh::zzero: (& &) -> _
src::zrsh::zrsh: (_, _, _) -> _
src::zsave::zzero: (& &) -> _
src::zsave::zsave: (& &, &) -> _
src::zset::zzero: (& &) -> _
src::zset::zset: (&uniq & ↓ &uniq &, & &) -> _
src::zseti::zseti: (&uniq & ↓ &uniq &, _) -> _
src::zsets::zsignum: (& &) -> _
src::zsets::zsets: (& &, &) -> _
src::zsetu::zsetu: (&uniq & ↓ &uniq &, _) -> _
src::zsetup::zinit: (&uniq & ↓ &uniq &) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (& &) -> _
src::zsplit::zsplit: (_, _, _, _) -> _
src::zsqr::zinit: (&uniq & ↓ &uniq &) -> _
src::zsqr::zsignum: (& &) -> _
src::zsqr::zzero: (& &) -> _
src::zsqr::zsqr: (_, _) -> _
src::zstr::zzero: (& &) -> _
src::zstr::zsignum: (& &) -> _
src::zstr_length::zsignum: (& &) -> _
src::zstr_length::zzero: (& &) -> _
src::zstr_length::zstr_length: (& &, _) -> _
src::zsub::zzero: (& &) -> _
src::zsub::zsignum: (& &) -> _
src::zsub::zsub_unsigned: (_, _, _) -> _
src::zsub::zsub: (_, _, _) -> _
src::zswap::zswap: (&uniq & ↓ &uniq &, &uniq & ↓ &uniq &) -> _
src::ztrunc::zzero: (& &) -> _
src::ztrunc::ztrunc: (&uniq & ↓ &uniq &, & &, _) -> _
src::zxor::zsignum: (& &) -> _
src::zxor::zzero: (& &) -> _
src::zxor::zxor: (&uniq & ↓ &uniq &, & &, & &) -> _
Solving src::zunsetup::zunsetup with precision 1... ✅
Solving src::zfree::zfree with precision 1... ✅
Solving src::allocator::libzahl_realloc with precision 1... ✅
Solving src::zabs::zzero with precision 3... ✅
Solving src::zabs::zabs with precision 3... ✅
Solving src::zadd::zzero with precision 3... ✅
Solving src::zadd::zsignum with precision 3... ✅
Solving src::zadd::zadd_unsigned with precision 3... ✅
Solving src::zand::zsignum with precision 3... ✅
Solving src::zand::zzero with precision 3... ✅
Solving src::zand::zand with precision 3... ✅
Solving src::zbits::zzero with precision 3... ✅
Solving src::zbits::zbits with precision 3... ✅
Solving src::zbset::zzero with precision 3... ✅
Solving src::zbset::zbset with precision 3... ✅
Solving src::zbtest::zzero with precision 3... ✅
Solving src::zbtest::zbtest with precision 3... ✅
Solving src::zcmp::zsignum with precision 3... ✅
Solving src::zcmp::zcmp with precision 3... ✅
Solving src::zcmpi::zzero with precision 3... ✅
Solving src::zcmpi::zsignum with precision 3... ✅
Solving src::zcmpi::zcmpi with precision 3... ✅
Solving src::zcmpmag::zzero with precision 3... ✅
Solving src::zcmpmag::zcmpmag with precision 3... ✅
Solving src::zcmpu::zsignum with precision 3... ✅
Solving src::zcmpu::zcmpu with precision 3... ✅
Solving src::zdiv::zdiv with precision 3... ✅
Solving src::zdivmod::zzero with precision 3... ✅
Solving src::zdivmod::zsignum with precision 3... ✅
Solving src::zerror::zerror with precision 3... ✅
Solving src::zgcd::zzero with precision 3... ✅
Solving src::zgcd::zsignum with precision 3... ✅
Solving src::zload::zzero with precision 3... ✅
Solving src::zload::zload with precision 3... ✅
Solving src::zlsb::zzero with precision 3... ✅
Solving src::zlsb::zlsb with precision 3... ✅
Solving src::zlsh::zsignum with precision 3... ✅
Solving src::zlsh::zzero with precision 3... ✅
Solving src::zlsh::zlsh with precision 3... ✅
Solving src::zmod::zmod with precision 3... ✅
Solving src::zmodmul::zmodmul with precision 3... ✅
Solving src::zmodpow::zzero with precision 3... ✅
Solving src::zmodpow::zsignum with precision 3... ✅
Solving src::zmodpowu::zzero with precision 3... ✅
Solving src::zmodsqr::zmodsqr with precision 3... ✅
Solving src::zmul::zinit with precision 3... ✅
Solving src::zmul::zsignum with precision 3... ✅
Solving src::zneg::zsignum with precision 3... ✅
Solving src::zneg::zneg with precision 3... ✅
Solving src::znot::zsignum with precision 3... ✅
Solving src::znot::zzero with precision 3... ✅
Solving src::zor::zsignum with precision 3... ✅
Solving src::zor::zzero with precision 3... ✅
Solving src::zor::zor with precision 3... ✅
Solving src::zperror::zperror with precision 3... ✅
Solving src::zpow::zzero with precision 3... ✅
Solving src::zpow::zsignum with precision 3... ✅
Solving src::zpowu::zzero with precision 3... ✅
Solving src::zptest::zeven with precision 3... ✅
Solving src::zrand::zsignum with precision 3... ✅
Solving src::zrand::zzero with precision 3... ✅
Solving src::zrand::zrand_get_random_bits with precision 3... ✅
Solving src::zrsh::zsignum with precision 3... ✅
Solving src::zrsh::zzero with precision 3... ✅
Solving src::zsave::zzero with precision 3... ✅
Solving src::zsave::zsave with precision 3... ✅
Solving src::zset::zzero with precision 3... ✅
Solving src::zset::zset with precision 3... ✅
Solving src::zseti::zseti with precision 3... ✅
Solving src::zsets::zsignum with precision 3... ✅
Solving src::zsets::zsets with precision 3... ✅
Solving src::zsetu::zsetu with precision 3... ✅
Solving src::zsetup::zinit with precision 3... ✅
Solving src::zsetup::zsetup with precision 3... ✅
Solving src::zsplit::zzero with precision 3... ✅
Solving src::zsqr::zinit with precision 3... ✅
Solving src::zsqr::zsignum with precision 3... ✅
Solving src::zsqr::zzero with precision 3... ✅
Solving src::zstr::zzero with precision 3... ✅
Solving src::zstr::zsignum with precision 3... ✅
Solving src::zstr_length::zsignum with precision 3... ✅
Solving src::zstr_length::zzero with precision 3... ✅
Solving src::zstr_length::zstr_length with precision 3... ✅
Solving src::zsub::zzero with precision 3... ✅
Solving src::zsub::zsignum with precision 3... ✅
Solving src::zswap::zswap with precision 3... ✅
Solving src::ztrunc::zzero with precision 3... ✅
Solving src::ztrunc::ztrunc with precision 3... ✅
Solving src::zxor::zsignum with precision 3... ✅
Solving src::zxor::zzero with precision 3... ✅
Solving src::zxor::zxor with precision 3... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq  ↓ &uniq ) -> _
src::zstr::zstr: (_, _) -> _
src::allocator::libzahl_realloc: (&uniq  ↓ &uniq , _) -> _
src::zabs::zzero: (& &) -> _
src::zabs::zabs: (&uniq & ↓ &uniq &, & &) -> _
src::zadd::zzero: (& &) -> _
src::zadd::zsignum: (& &) -> _
src::zadd::zadd_unsigned: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zadd::zadd: (_, _, _) -> _
src::zand::zsignum: (& &) -> _
src::zand::zzero: (& &) -> _
src::zand::zand: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zbits::zzero: (& &) -> _
src::zbits::zbits: (&uniq & ↓ &uniq &) -> _
src::zbset::zzero: (& &) -> _
src::zbset::zbset: (&uniq & ↓ &uniq &, & &, _, _) -> _
src::zbtest::zzero: (& &) -> _
src::zbtest::zbtest: (& &, _) -> _
src::zcmp::zsignum: (& &) -> _
src::zcmp::zcmp: (& &, & &) -> _
src::zcmpi::zzero: (& &) -> _
src::zcmpi::zsignum: (& &) -> _
src::zcmpi::zcmpi: (& &, _) -> _
src::zcmpmag::zzero: (& &) -> _
src::zcmpmag::zcmpmag: (& &, & &) -> _
src::zcmpu::zsignum: (& &) -> _
src::zcmpu::zcmpu: (& &, _) -> _
src::zdiv::zdiv: (& &, & &, & &) -> _
src::zdivmod::zzero: (& &) -> _
src::zdivmod::zsignum: (& &) -> _
src::zdivmod::zdivmod: (_, _, _, _) -> _
src::zerror::zerror: (&uniq & ↓ &uniq &) -> _
src::zgcd::zzero: (& &) -> _
src::zgcd::zsignum: (& &) -> _
src::zgcd::zgcd: (_, _, _) -> _
src::zload::zzero: (& &) -> _
src::zload::zload: (&uniq & ↓ &uniq &, &) -> _
src::zlsb::zzero: (& &) -> _
src::zlsb::zlsb: (& &) -> _
src::zlsh::zsignum: (& &) -> _
src::zlsh::zzero: (& &) -> _
src::zlsh::zlsh: (&uniq & ↓ &uniq &, & &, _) -> _
src::zmod::zmod: (& &, & &, & &) -> _
src::zmodmul::zmodmul: (& &, & &, & &, & &) -> _
src::zmodpow::zzero: (& &) -> _
src::zmodpow::zsignum: (& &) -> _
src::zmodpow::zmodpow: (_, _, _, _) -> _
src::zmodpowu::zzero: (& &) -> _
src::zmodpowu::zmodpowu: (_, _, _, _) -> _
src::zmodsqr::zmodsqr: (& &, & &, & &) -> _
src::zmul::zinit: (&uniq & ↓ &uniq &) -> _
src::zmul::zsignum: (& &) -> _
src::zmul::zmul: (_, _, _) -> _
src::zneg::zsignum: (& &) -> _
src::zneg::zneg: (&uniq & ↓ &uniq &, & &) -> _
src::znot::zsignum: (& &) -> _
src::znot::zzero: (& &) -> _
src::znot::znot: (_, _) -> _
src::zor::zsignum: (& &) -> _
src::zor::zzero: (& &) -> _
src::zor::zor: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (& &) -> _
src::zpow::zsignum: (& &) -> _
src::zpow::zpow: (_, _, _) -> _
src::zpowu::zzero: (& &) -> _
src::zpowu::zpowu: (_, _, _) -> _
src::zptest::zeven: (& &) -> _
src::zptest::zptest: (_, _, _) -> _
src::zrand::zsignum: (& &) -> _
src::zrand::zzero: (& &) -> _
src::zrand::zrand_get_random_bits: (&uniq & ↓ &uniq &, _, _) -> _
src::zrand::zrand: (_, _, _, _) -> _
src::zrsh::zsignum: (& &) -> _
src::zrsh::zzero: (& &) -> _
src::zrsh::zrsh: (_, _, _) -> _
src::zsave::zzero: (& &) -> _
src::zsave::zsave: (& &, &) -> _
src::zset::zzero: (& &) -> _
src::zset::zset: (&uniq & ↓ &uniq &, & &) -> _
src::zseti::zseti: (&uniq & ↓ &uniq &, _) -> _
src::zsets::zsignum: (& &) -> _
src::zsets::zsets: (& &, &) -> _
src::zsetu::zsetu: (&uniq & ↓ &uniq &, _) -> _
src::zsetup::zinit: (&uniq & ↓ &uniq &) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (& &) -> _
src::zsplit::zsplit: (_, _, _, _) -> _
src::zsqr::zinit: (&uniq & ↓ &uniq &) -> _
src::zsqr::zsignum: (& &) -> _
src::zsqr::zzero: (& &) -> _
src::zsqr::zsqr: (_, _) -> _
src::zstr::zzero: (& &) -> _
src::zstr::zsignum: (& &) -> _
src::zstr_length::zsignum: (& &) -> _
src::zstr_length::zzero: (& &) -> _
src::zstr_length::zstr_length: (& &, _) -> _
src::zsub::zzero: (& &) -> _
src::zsub::zsignum: (& &) -> _
src::zsub::zsub_unsigned: (_, _, _) -> _
src::zsub::zsub: (_, _, _) -> _
src::zswap::zswap: (&uniq & ↓ &uniq &, &uniq & ↓ &uniq &) -> _
src::ztrunc::zzero: (& &) -> _
src::ztrunc::ztrunc: (&uniq & ↓ &uniq &, & &, _) -> _
src::zxor::zsignum: (& &) -> _
src::zxor::zzero: (& &) -> _
src::zxor::zxor: (&uniq & ↓ &uniq &, & &, & &) -> _
Solving src::zunsetup::zunsetup with precision 1... ✅
Solving src::zfree::zfree with precision 1... ✅
Solving src::allocator::libzahl_realloc with precision 1... ✅
Solving src::zabs::zzero with precision 3... ✅
Solving src::zabs::zabs with precision 3... ✅
Solving src::zadd::zzero with precision 3... ✅
Solving src::zadd::zsignum with precision 3... ✅
Solving src::zadd::zadd_unsigned with precision 3... ✅
Solving src::zand::zsignum with precision 3... ✅
Solving src::zand::zzero with precision 3... ✅
Solving src::zand::zand with precision 3... ✅
Solving src::zbits::zzero with precision 3... ✅
Solving src::zbits::zbits with precision 3... ✅
Solving src::zbset::zzero with precision 3... ✅
Solving src::zbset::zbset with precision 3... ✅
Solving src::zbtest::zzero with precision 3... ✅
Solving src::zbtest::zbtest with precision 3... ✅
Solving src::zcmp::zsignum with precision 3... ✅
Solving src::zcmp::zcmp with precision 3... ✅
Solving src::zcmpi::zzero with precision 3... ✅
Solving src::zcmpi::zsignum with precision 3... ✅
Solving src::zcmpi::zcmpi with precision 3... ✅
Solving src::zcmpmag::zzero with precision 3... ✅
Solving src::zcmpmag::zcmpmag with precision 3... ✅
Solving src::zcmpu::zsignum with precision 3... ✅
Solving src::zcmpu::zcmpu with precision 3... ✅
Solving src::zdiv::zdiv with precision 3... ✅
Solving src::zdivmod::zzero with precision 3... ✅
Solving src::zdivmod::zsignum with precision 3... ✅
Solving src::zerror::zerror with precision 3... ✅
Solving src::zgcd::zzero with precision 3... ✅
Solving src::zgcd::zsignum with precision 3... ✅
Solving src::zload::zzero with precision 3... ✅
Solving src::zload::zload with precision 3... ✅
Solving src::zlsb::zzero with precision 3... ✅
Solving src::zlsb::zlsb with precision 3... ✅
Solving src::zlsh::zsignum with precision 3... ✅
Solving src::zlsh::zzero with precision 3... ✅
Solving src::zlsh::zlsh with precision 3... ✅
Solving src::zmod::zmod with precision 3... ✅
Solving src::zmodmul::zmodmul with precision 3... ✅
Solving src::zmodpow::zzero with precision 3... ✅
Solving src::zmodpow::zsignum with precision 3... ✅
Solving src::zmodpowu::zzero with precision 3... ✅
Solving src::zmodsqr::zmodsqr with precision 3... ✅
Solving src::zmul::zinit with precision 3... ✅
Solving src::zmul::zsignum with precision 3... ✅
Solving src::zneg::zsignum with precision 3... ✅
Solving src::zneg::zneg with precision 3... ✅
Solving src::znot::zsignum with precision 3... ✅
Solving src::znot::zzero with precision 3... ✅
Solving src::zor::zsignum with precision 3... ✅
Solving src::zor::zzero with precision 3... ✅
Solving src::zor::zor with precision 3... ✅
Solving src::zperror::zperror with precision 3... ✅
Solving src::zpow::zzero with precision 3... ✅
Solving src::zpow::zsignum with precision 3... ✅
Solving src::zpowu::zzero with precision 3... ✅
Solving src::zptest::zeven with precision 3... ✅
Solving src::zrand::zsignum with precision 3... ✅
Solving src::zrand::zzero with precision 3... ✅
Solving src::zrand::zrand_get_random_bits with precision 3... ✅
Solving src::zrsh::zsignum with precision 3... ✅
Solving src::zrsh::zzero with precision 3... ✅
Solving src::zsave::zzero with precision 3... ✅
Solving src::zsave::zsave with precision 3... ✅
Solving src::zset::zzero with precision 3... ✅
Solving src::zset::zset with precision 3... ✅
Solving src::zseti::zseti with precision 3... ✅
Solving src::zsets::zsignum with precision 3... ✅
Solving src::zsets::zsets with precision 3... ✅
Solving src::zsetu::zsetu with precision 3... ✅
Solving src::zsetup::zinit with precision 3... ✅
Solving src::zsetup::zsetup with precision 3... ✅
Solving src::zsplit::zzero with precision 3... ✅
Solving src::zsqr::zinit with precision 3... ✅
Solving src::zsqr::zsignum with precision 3... ✅
Solving src::zsqr::zzero with precision 3... ✅
Solving src::zstr::zzero with precision 3... ✅
Solving src::zstr::zsignum with precision 3... ✅
Solving src::zstr_length::zsignum with precision 3... ✅
Solving src::zstr_length::zzero with precision 3... ✅
Solving src::zstr_length::zstr_length with precision 3... ✅
Solving src::zsub::zzero with precision 3... ✅
Solving src::zsub::zsignum with precision 3... ✅
Solving src::zswap::zswap with precision 3... ✅
Solving src::ztrunc::zzero with precision 3... ✅
Solving src::ztrunc::ztrunc with precision 3... ✅
Solving src::zxor::zsignum with precision 3... ✅
Solving src::zxor::zzero with precision 3... ✅
Solving src::zxor::zxor with precision 3... ✅
src::zunsetup::zunsetup: () -> _
src::zfree::zfree: (&uniq  ↓ &uniq ) -> _
src::zstr::zstr: (_, _) -> _
src::allocator::libzahl_realloc: (&uniq  ↓ &uniq , _) -> _
src::zabs::zzero: (& &) -> _
src::zabs::zabs: (&uniq & ↓ &uniq &, & &) -> _
src::zadd::zzero: (& &) -> _
src::zadd::zsignum: (& &) -> _
src::zadd::zadd_unsigned: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zadd::zadd: (_, _, _) -> _
src::zand::zsignum: (& &) -> _
src::zand::zzero: (& &) -> _
src::zand::zand: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zbits::zzero: (& &) -> _
src::zbits::zbits: (&uniq & ↓ &uniq &) -> _
src::zbset::zzero: (& &) -> _
src::zbset::zbset: (&uniq & ↓ &uniq &, & &, _, _) -> _
src::zbtest::zzero: (& &) -> _
src::zbtest::zbtest: (& &, _) -> _
src::zcmp::zsignum: (& &) -> _
src::zcmp::zcmp: (& &, & &) -> _
src::zcmpi::zzero: (& &) -> _
src::zcmpi::zsignum: (& &) -> _
src::zcmpi::zcmpi: (& &, _) -> _
src::zcmpmag::zzero: (& &) -> _
src::zcmpmag::zcmpmag: (& &, & &) -> _
src::zcmpu::zsignum: (& &) -> _
src::zcmpu::zcmpu: (& &, _) -> _
src::zdiv::zdiv: (& &, & &, & &) -> _
src::zdivmod::zzero: (& &) -> _
src::zdivmod::zsignum: (& &) -> _
src::zdivmod::zdivmod: (_, _, _, _) -> _
src::zerror::zerror: (&uniq & ↓ &uniq &) -> _
src::zgcd::zzero: (& &) -> _
src::zgcd::zsignum: (& &) -> _
src::zgcd::zgcd: (_, _, _) -> _
src::zload::zzero: (& &) -> _
src::zload::zload: (&uniq & ↓ &uniq &, &) -> _
src::zlsb::zzero: (& &) -> _
src::zlsb::zlsb: (& &) -> _
src::zlsh::zsignum: (& &) -> _
src::zlsh::zzero: (& &) -> _
src::zlsh::zlsh: (&uniq & ↓ &uniq &, & &, _) -> _
src::zmod::zmod: (& &, & &, & &) -> _
src::zmodmul::zmodmul: (& &, & &, & &, & &) -> _
src::zmodpow::zzero: (& &) -> _
src::zmodpow::zsignum: (& &) -> _
src::zmodpow::zmodpow: (_, _, _, _) -> _
src::zmodpowu::zzero: (& &) -> _
src::zmodpowu::zmodpowu: (_, _, _, _) -> _
src::zmodsqr::zmodsqr: (& &, & &, & &) -> _
src::zmul::zinit: (&uniq & ↓ &uniq &) -> _
src::zmul::zsignum: (& &) -> _
src::zmul::zmul: (_, _, _) -> _
src::zneg::zsignum: (& &) -> _
src::zneg::zneg: (&uniq & ↓ &uniq &, & &) -> _
src::znot::zsignum: (& &) -> _
src::znot::zzero: (& &) -> _
src::znot::znot: (_, _) -> _
src::zor::zsignum: (& &) -> _
src::zor::zzero: (& &) -> _
src::zor::zor: (&uniq & ↓ &uniq &, & &, & &) -> _
src::zperror::zperror: (&) -> _
src::zpow::zzero: (& &) -> _
src::zpow::zsignum: (& &) -> _
src::zpow::zpow: (_, _, _) -> _
src::zpowu::zzero: (& &) -> _
src::zpowu::zpowu: (_, _, _) -> _
src::zptest::zeven: (& &) -> _
src::zptest::zptest: (_, _, _) -> _
src::zrand::zsignum: (& &) -> _
src::zrand::zzero: (& &) -> _
src::zrand::zrand_get_random_bits: (&uniq & ↓ &uniq &, _, _) -> _
src::zrand::zrand: (_, _, _, _) -> _
src::zrsh::zsignum: (& &) -> _
src::zrsh::zzero: (& &) -> _
src::zrsh::zrsh: (_, _, _) -> _
src::zsave::zzero: (& &) -> _
src::zsave::zsave: (& &, &) -> _
src::zset::zzero: (& &) -> _
src::zset::zset: (&uniq & ↓ &uniq &, & &) -> _
src::zseti::zseti: (&uniq & ↓ &uniq &, _) -> _
src::zsets::zsignum: (& &) -> _
src::zsets::zsets: (& &, &) -> _
src::zsetu::zsetu: (&uniq & ↓ &uniq &, _) -> _
src::zsetup::zinit: (&uniq & ↓ &uniq &) -> _
src::zsetup::zsetup: (&) -> _
src::zsplit::zzero: (& &) -> _
src::zsplit::zsplit: (_, _, _, _) -> _
src::zsqr::zinit: (&uniq & ↓ &uniq &) -> _
src::zsqr::zsignum: (& &) -> _
src::zsqr::zzero: (& &) -> _
src::zsqr::zsqr: (_, _) -> _
src::zstr::zzero: (& &) -> _
src::zstr::zsignum: (& &) -> _
src::zstr_length::zsignum: (& &) -> _
src::zstr_length::zzero: (& &) -> _
src::zstr_length::zstr_length: (& &, _) -> _
src::zsub::zzero: (& &) -> _
src::zsub::zsignum: (& &) -> _
src::zsub::zsub_unsigned: (_, _, _) -> _
src::zsub::zsub: (_, _, _) -> _
src::zswap::zswap: (&uniq & ↓ &uniq &, &uniq & ↓ &uniq &) -> _
src::ztrunc::zzero: (& &) -> _
src::ztrunc::ztrunc: (&uniq & ↓ &uniq &, & &, _) -> _
src::zxor::zsignum: (& &) -> _
src::zxor::zzero: (& &) -> _
src::zxor::zxor: (&uniq & ↓ &uniq &, & &, & &) -> _
@DefId(0:26 ~ lib[40c5]::src::allocator::libzahl_realloc)
bb0:
  _3 = const 0_u64
  using: 
  _4 = const 0_u64
  using: 
  _5 = const {0x0 as *mut u32}
  using: 
  _8 = _2
  using: _2@Entry
  _11 = _2
  using: _2@Entry
  _10 = Not(move _11)
  using: _11@Mir(bb0[4])
  _12 = const 1_u64
  using: 
  _9 = core::num::<impl u64>::wrapping_add(move _10, move _12) -> bb1
  using: _10@Mir(bb0[5]), _12@Mir(bb0[6])
bb1:
  _7 = BitAnd(move _8, move _9)
  using: _8@Mir(bb0[3]), _9@Mir(bb0[7])
  _13 = _2
  using: _2@Entry
  _6 = Ne(move _7, move _13)
  using: _7@Mir(bb1[0]), _13@Mir(bb1[1])
  switchInt(move _6) -> [0: bb14, otherwise: bb2]
  using: _6@Mir(bb1[2])
bb2:
  _15 = _2
  using: _2@Entry
  _16 = const 1_i32
  using: 
  _17 = CheckedShr(_15, _16)
  using: _15@Mir(bb2[0]), _16@Mir(bb2[1])
  assert(!move (_17.1: bool), "attempt to shift right by `{}`, which would overflow", move _16) -> bb3
  using: _17@Entry, _15@Entry, _16@Entry
bb3:
  _14 = move (_17.0: u64)
  using: _17@Mir(bb2[2])
  _2 = BitOr(_2, move _14)
  using: _14@Mir(bb3[0])
  _19 = _2
  using: _2@Mir(bb3[1])
  _20 = const 2_i32
  using: 
  _21 = CheckedShr(_19, _20)
  using: _19@Mir(bb3[2]), _20@Mir(bb3[3])
  assert(!move (_21.1: bool), "attempt to shift right by `{}`, which would overflow", move _20) -> bb4
  using: _21@Entry, _19@Entry, _20@Entry
bb4:
  _18 = move (_21.0: u64)
  using: _21@Mir(bb3[4])
  _2 = BitOr(_2, move _18)
  using: _18@Mir(bb4[0])
  _23 = _2
  using: _2@Mir(bb4[1])
  _24 = const 4_i32
  using: 
  _25 = CheckedShr(_23, _24)
  using: _23@Mir(bb4[2]), _24@Mir(bb4[3])
  assert(!move (_25.1: bool), "attempt to shift right by `{}`, which would overflow", move _24) -> bb5
  using: _25@Entry, _23@Entry, _24@Entry
bb5:
  _22 = move (_25.0: u64)
  using: _25@Mir(bb4[4])
  _2 = BitOr(_2, move _22)
  using: _22@Mir(bb5[0])
  _26 = std::mem::size_of::<u64>() -> bb6
  using: 
bb6:
  _3 = move _26 as u64 (IntToInt)
  using: _26@Mir(bb5[2])
  _4 = const 8_u64
  using: 
  goto -> bb7
  using: 
bb7:
  _27 = _3
  using: _3@Phi(bb7)
  switchInt(move _27) -> [0: bb12, otherwise: bb8]
  using: _27@Mir(bb7[0])
bb8:
  _29 = _2
  using: _2@Phi(bb7)
  _30 = _4
  using: _4@Phi(bb7)
  _31 = CheckedShr(_29, _30)
  using: _29@Mir(bb8[0]), _30@Mir(bb8[1])
  assert(!move (_31.1: bool), "attempt to shift right by `{}`, which would overflow", move _30) -> bb9
  using: _31@Entry, _29@Entry, _30@Entry
bb9:
  _28 = move (_31.0: u64)
  using: _31@Mir(bb8[2])
  _2 = BitOr(_2, move _28)
  using: _28@Mir(bb9[0])
  _32 = const 1_i32
  using: 
  _33 = CheckedShr(_3, _32)
  using: _3@Phi(bb7), _32@Mir(bb9[2])
  assert(!move (_33.1: bool), "attempt to shift right by `{}`, which would overflow", move _32) -> bb10
  using: _33@Entry, _3@Entry, _32@Entry
bb10:
  _3 = move (_33.0: u64)
  using: _33@Mir(bb9[3])
  _34 = const 1_i32
  using: 
  _35 = CheckedShl(_4, _34)
  using: _4@Phi(bb7), _34@Mir(bb10[1])
  assert(!move (_35.1: bool), "attempt to shift left by `{}`, which would overflow", move _34) -> bb11
  using: _35@Entry, _4@Entry, _34@Entry
bb11:
  _4 = move (_35.0: u64)
  using: _35@Mir(bb10[2])
  goto -> bb7
  using: 
bb12:
  _37 = _2
  using: _2@Mir(bb9[1])
  _38 = const 1_u64
  using: 
  _36 = core::num::<impl u64>::wrapping_add(move _37, move _38) -> bb13
  using: _37@Mir(bb12[0]), _38@Mir(bb12[1])
bb13:
  _2 = move _36
  using: _36@Mir(bb12[2])
  goto -> bb14
  using: 
bb14:
  _3 = const 0_u64
  using: 
  _39 = _2
  using: _2@Phi(bb14)
  _4 = move _39
  using: _39@Mir(bb14[1])
  goto -> bb15
  using: 
bb15:
  _40 = _4
  using: _4@Phi(bb15)
  switchInt(move _40) -> [0: bb19, otherwise: bb16]
  using: _40@Mir(bb15[0])
bb16:
  _42 = _3
  using: _3@Phi(bb15)
  _43 = const 1_u64
  using: 
  _41 = core::num::<impl u64>::wrapping_add(move _42, move _43) -> bb17
  using: _42@Mir(bb16[0]), _43@Mir(bb16[1])
bb17:
  _3 = move _41
  using: _41@Mir(bb16[2])
  _44 = const 1_i32
  using: 
  _45 = CheckedShr(_4, _44)
  using: _4@Phi(bb15), _44@Mir(bb17[1])
  assert(!move (_45.1: bool), "attempt to shift right by `{}`, which would overflow", move _44) -> bb18
  using: _45@Entry, _4@Entry, _44@Entry
bb18:
  _4 = move (_45.0: u64)
  using: _45@Mir(bb17[2])
  goto -> bb15
  using: 
bb19:
  _47 = const {alloc1: *mut [u64; 64]}
  using: 
  _49 = _3
  using: _3@Phi(bb15)
  _48 = move _49 as usize (IntToInt)
  using: _49@Mir(bb19[1])
  _50 = const 64_usize
  using: 
  _51 = Lt(_48, _50)
  using: _48@Mir(bb19[2]), _50@Mir(bb19[3])
  assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _48) -> bb20
  using: _51@Entry, _50@Entry, _48@Entry
bb20:
  _46 = (*_47)[_48]
  using: _47@Mir(bb19[0]), _48@Mir(bb19[2])
  switchInt(move _46) -> [0: bb32, otherwise: bb21]
  using: _46@Mir(bb20[0])
bb21:
  _54 = const {alloc1: *mut [u64; 64]}
  using: 
  _56 = _3
  using: _3@Phi(bb15)
  _55 = move _56 as usize (IntToInt)
  using: _56@Mir(bb21[1])
  _57 = const 64_usize
  using: 
  _58 = Lt(_55, _57)
  using: _55@Mir(bb21[2]), _57@Mir(bb21[3])
  assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _55) -> bb22
  using: _58@Entry, _57@Entry, _55@Entry
bb22:
  _53 = (*_54)[_55]
  using: _54@Mir(bb21[0]), _55@Mir(bb21[2])
  _52 = core::num::<impl u64>::wrapping_sub(move _53, const 1_u64) -> bb23
  using: _53@Mir(bb22[0])
bb23:
  _59 = const {alloc1: *mut [u64; 64]}
  using: 
  _61 = _3
  using: _3@Phi(bb15)
  _60 = move _61 as usize (IntToInt)
  using: _61@Mir(bb23[1])
  _62 = const 64_usize
  using: 
  _63 = Lt(_60, _62)
  using: _60@Mir(bb23[2]), _62@Mir(bb23[3])
  assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _60) -> bb24
  using: _63@Entry, _62@Entry, _60@Entry
bb24:
  (*_59)[_60] = move _52
  using: _59@Mir(bb23[0]), _60@Mir(bb23[2]), _52@Mir(bb22[1])
  _67 = const {alloc2: *mut [*mut *mut u32; 64]}
  using: 
  _69 = _3
  using: _3@Phi(bb15)
  _68 = move _69 as usize (IntToInt)
  using: _69@Mir(bb24[2])
  _70 = const 64_usize
  using: 
  _71 = Lt(_68, _70)
  using: _68@Mir(bb24[3]), _70@Mir(bb24[4])
  assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _68) -> bb25
  using: _71@Entry, _70@Entry, _68@Entry
bb25:
  _66 = (*_67)[_68]
  using: _67@Mir(bb24[1]), _68@Mir(bb24[3])
  _74 = const {alloc1: *mut [u64; 64]}
  using: 
  _76 = _3
  using: _3@Phi(bb15)
  _75 = move _76 as usize (IntToInt)
  using: _76@Mir(bb25[2])
  _77 = const 64_usize
  using: 
  _78 = Lt(_75, _77)
  using: _75@Mir(bb25[3]), _77@Mir(bb25[4])
  assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _75) -> bb26
  using: _78@Entry, _77@Entry, _75@Entry
bb26:
  _73 = (*_74)[_75]
  using: _74@Mir(bb25[1]), _75@Mir(bb25[3])
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb26[0])
  _65 = std::ptr::mut_ptr::<impl *mut *mut u32>::offset(move _66, move _72) -> bb27
  using: _66@Mir(bb25[0]), _72@Mir(bb26[1])
bb27:
  _64 = (*_65)
  using: _65@Mir(bb26[2])
  _5 = move _64
  using: _64@Mir(bb27[0])
  _81 = _5
  using: _5@Mir(bb27[1])
  _80 = move _81 as *mut libc::c_void (PtrToPtr)
  using: _81@Mir(bb27[2])
  _83 = ((*_1).3: *mut u32)
  using: _1@Entry
  _82 = move _83 as *const libc::c_void (PtrToPtr)
  using: _83@Mir(bb27[4])
  _85 = ((*_1).2: u64)
  using: _1@Entry
  _87 = std::mem::size_of::<u32>() -> bb28
  using: 
bb28:
  _86 = move _87 as u64 (IntToInt)
  using: _87@Mir(bb27[7])
  _84 = core::num::<impl u64>::wrapping_mul(move _85, move _86) -> bb29
  using: _85@Mir(bb27[6]), _86@Mir(bb28[0])
bb29:
  _79 = src::allocator::memcpy(move _80, move _82, move _84) -> bb30
  using: _80@Mir(bb27[3]), _82@Mir(bb27[5]), _84@Mir(bb28[1])
bb30:
  _89 = _1
  using: _1@Entry
  _88 = src::zfree::zfree(move _89) -> bb31
  using: _89@Mir(bb30[0])
bb31:
  _90 = _5
  using: _5@Mir(bb27[1])
  ((*_1).3: *mut u32) = move _90
  using: _1@Entry, _90@Mir(bb31[0])
  goto -> bb44
  using: 
bb32:
  _93 = ((*_1).3: *mut u32)
  using: _1@Entry
  _92 = move _93 as *mut libc::c_void (PtrToPtr)
  using: _93@Mir(bb32[0])
  _95 = _2
  using: _2@Phi(bb14)
  _97 = std::mem::size_of::<u32>() -> bb33
  using: 
bb33:
  _96 = move _97 as u64 (IntToInt)
  using: _97@Mir(bb32[3])
  _94 = core::num::<impl u64>::wrapping_mul(move _95, move _96) -> bb34
  using: _95@Mir(bb32[2]), _96@Mir(bb33[0])
bb34:
  _91 = src::allocator::realloc(move _92, move _94) -> bb35
  using: _92@Mir(bb32[1]), _94@Mir(bb33[1])
bb35:
  ((*_1).3: *mut u32) = move _91 as *mut u32 (PtrToPtr)
  using: _1@Entry, _91@Mir(bb34[0])
  _99 = ((*_1).3: *mut u32)
  using: _1@Entry
  _98 = std::ptr::mut_ptr::<impl *mut u32>::is_null(move _99) -> bb36
  using: _99@Mir(bb35[1])
bb36:
  switchInt(move _98) -> [0: bb44, otherwise: bb37]
  using: _98@Mir(bb35[2])
bb37:
  _102 = ((*_1).3: *mut u32)
  using: _1@Entry
  _101 = move _102 as usize (PointerExposeAddress)
  using: _102@Mir(bb37[0])
  _100 = Eq(move _101, const 0_usize)
  using: _101@Mir(bb37[1])
  assume(move _100)
  using: _100@Mir(bb37[2])
  _104 = src::allocator::__errno_location() -> bb38
  using: 
bb38:
  _103 = (*_104)
  using: _104@Mir(bb37[4])
  switchInt(move _103) -> [0: bb39, otherwise: bb41]
  using: _103@Mir(bb38[0])
bb39:
  _105 = const 12_i32
  using: 
  _106 = src::allocator::__errno_location() -> bb40
  using: 
bb40:
  (*_106) = move _105
  using: _106@Mir(bb39[1]), _105@Mir(bb39[0])
  goto -> bb41
  using: 
bb41:
  _108 = src::allocator::__errno_location() -> bb42
  using: 
bb42:
  _107 = (*_108)
  using: _108@Mir(bb41[0])
  _109 = const {alloc3: *mut i32}
  using: 
  (*_109) = move _107
  using: _109@Mir(bb42[1]), _107@Mir(bb42[0])
  _114 = const {alloc4: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _113 = &mut (*_114)
  using: _114@Mir(bb42[3])
  _112 = move _113 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _113@Mir(bb42[4])
  _111 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _112) -> bb43
  using: _112@Mir(bb42[5])
bb43:
  _115 = const 1_i32
  using: 
  _110 = src::allocator::longjmp(move _111, move _115)
  using: _111@Mir(bb42[6]), _115@Mir(bb43[0])
bb44:
  _116 = _2
  using: _2@Phi(bb44)
  ((*_1).2: u64) = move _116
  using: _1@Phi(bb44), _116@Mir(bb44[0])
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/allocator.rs:48:23: 48:70 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/allocator.rs:52:13: 52:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/allocator.rs:59:40: 59:87 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/allocator.rs:65:34: 65:81 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/allocator.rs:70:67: 70:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/allocator.rs:71:43: 71:86 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/allocator.rs:76:31: 76:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/allocator.rs:76:18: 76:85 (#0) by default
rewrite call src::allocator::memcpy @ workspace/libzahl/src/allocator.rs:72:9: 77:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/allocator.rs:83:31: 83:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/allocator.rs:83:18: 83:85 (#0) by default
rewrite call src::allocator::realloc @ workspace/libzahl/src/allocator.rs:81:22: 84:10 (#0) by default
rewrite call src::allocator::__errno_location @ workspace/libzahl/src/allocator.rs:86:17: 86:35 (#0) by default
rewrite call src::allocator::__errno_location @ workspace/libzahl/src/allocator.rs:87:18: 87:36 (#0) by default
rewrite call src::allocator::__errno_location @ workspace/libzahl/src/allocator.rs:89:30: 89:48 (#0) by default
rewrite call src::allocator::longjmp @ workspace/libzahl/src/allocator.rs:90:13: 90:68 (#0) by default
@DefId(0:34 ~ lib[40c5]::src::zabs::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:35 ~ lib[40c5]::src::zabs::zabs)
bb0:
  _4 = _1
  using: _1@Entry
  _5 = _2
  using: _2@Entry
  _3 = Ne(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb2, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _7 = _1
  using: _1@Entry
  _8 = _2
  using: _2@Entry
  _6 = src::zset::zset(move _7, move _8) -> bb2
  using: _7@Mir(bb1[0]), _8@Mir(bb1[1])
bb2:
  _11 = _1
  using: _1@Phi(bb2)
  _10 = src::zabs::zzero(move _11) -> bb3
  using: _11@Mir(bb2[0])
bb3:
  _9 = Eq(move _10, const 0_i32)
  using: _10@Mir(bb2[1])
  ((*_1).0: i32) = move _9 as i32 (IntToInt)
  using: _1@Phi(bb2), _9@Mir(bb3[0])
  return
  using: _0@Entry
@DefId(0:45 ~ lib[40c5]::src::zadd::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:46 ~ lib[40c5]::src::zadd::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:47 ~ lib[40c5]::src::zadd::zadd_unsigned)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _8 = const 0_u32
  using: 
  _9 = const 0_u32
  using: 
  _7 = [move _8, move _9]
  using: _8@Mir(bb0[3]), _9@Mir(bb0[4])
  _10 = const {0x0 as *mut u32}
  using: 
  _12 = _2
  using: _2@Entry
  _11 = src::zadd::zzero(move _12) -> bb1
  using: _12@Mir(bb0[7])
bb1:
  switchInt(move _11) -> [0: bb3, otherwise: bb2]
  using: _11@Mir(bb0[8])
bb2:
  _14 = _1
  using: _1@Entry
  _15 = _3
  using: _3@Entry
  _13 = src::zabs::zabs(move _14, move _15) -> bb75
  using: _14@Mir(bb2[0]), _15@Mir(bb2[1])
bb3:
  _17 = _3
  using: _3@Entry
  _16 = src::zadd::zzero(move _17) -> bb4
  using: _17@Mir(bb3[0])
bb4:
  switchInt(move _16) -> [0: bb6, otherwise: bb5]
  using: _16@Mir(bb3[1])
bb5:
  _19 = _1
  using: _1@Entry
  _20 = _2
  using: _2@Entry
  _18 = src::zabs::zabs(move _19, move _20) -> bb75
  using: _19@Mir(bb5[0]), _20@Mir(bb5[1])
bb6:
  _23 = ((*_2).1: u64)
  using: _2@Entry
  _24 = ((*_3).1: u64)
  using: _3@Entry
  _22 = Gt(move _23, move _24)
  using: _23@Mir(bb6[0]), _24@Mir(bb6[1])
  switchInt(move _22) -> [0: bb8, otherwise: bb7]
  using: _22@Mir(bb6[2])
bb7:
  _21 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb9
  using: 
bb8:
  _21 = ((*_3).1: u64)
  using: _3@Entry
  goto -> bb9
  using: 
bb9:
  _5 = move _21
  using: _21@Phi(bb9)
  _27 = ((*_2).1: u64)
  using: _2@Phi(bb9)
  _28 = ((*_3).1: u64)
  using: _3@Phi(bb9)
  _26 = core::num::<impl u64>::wrapping_add(move _27, move _28) -> bb10
  using: _27@Mir(bb9[1]), _28@Mir(bb9[2])
bb10:
  _29 = _5
  using: _5@Mir(bb9[0])
  _25 = core::num::<impl u64>::wrapping_sub(move _26, move _29) -> bb11
  using: _26@Mir(bb9[3]), _29@Mir(bb10[0])
bb11:
  _6 = move _25
  using: _25@Mir(bb10[1])
  _31 = ((*_1).2: u64)
  using: _1@Entry
  _33 = _5
  using: _5@Mir(bb9[0])
  _34 = const 1_u64
  using: 
  _32 = core::num::<impl u64>::wrapping_add(move _33, move _34) -> bb12
  using: _33@Mir(bb11[2]), _34@Mir(bb11[3])
bb12:
  _30 = Lt(move _31, move _32)
  using: _31@Mir(bb11[1]), _32@Mir(bb11[4])
  switchInt(move _30) -> [0: bb15, otherwise: bb13]
  using: _30@Mir(bb12[0])
bb13:
  _36 = _1
  using: _1@Entry
  _38 = _5
  using: _5@Mir(bb9[0])
  _39 = const 1_u64
  using: 
  _37 = core::num::<impl u64>::wrapping_add(move _38, move _39) -> bb14
  using: _38@Mir(bb13[1]), _39@Mir(bb13[2])
bb14:
  _35 = src::allocator::libzahl_realloc(move _36, move _37) -> bb15
  using: _36@Mir(bb13[0]), _37@Mir(bb13[3])
bb15:
  _40 = const 0_i32
  using: 
  _42 = ((*_1).3: *mut u32)
  using: _1@Phi(bb15)
  _44 = _5
  using: _5@Phi(bb15)
  _43 = move _44 as isize (IntToInt)
  using: _44@Mir(bb15[2])
  _41 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _42, move _43) -> bb16
  using: _42@Mir(bb15[1]), _43@Mir(bb15[3])
bb16:
  (*_41) = move _40 as u32 (IntToInt)
  using: _41@Mir(bb15[4]), _40@Mir(bb15[0])
  _46 = _1
  using: _1@Phi(bb15)
  _47 = _2
  using: _2@Phi(bb9)
  _45 = Eq(move _46, move _47)
  using: _46@Mir(bb16[1]), _47@Mir(bb16[2])
  switchInt(move _45) -> [0: bb24, otherwise: bb17]
  using: _45@Mir(bb16[3])
bb17:
  _49 = ((*_1).1: u64)
  using: _1@Phi(bb15)
  _50 = ((*_3).1: u64)
  using: _3@Phi(bb9)
  _48 = Lt(move _49, move _50)
  using: _49@Mir(bb17[0]), _50@Mir(bb17[1])
  switchInt(move _48) -> [0: bb23, otherwise: bb18]
  using: _48@Mir(bb17[2])
bb18:
  _51 = ((*_3).1: u64)
  using: _3@Phi(bb9)
  _6 = move _51
  using: _51@Mir(bb18[0])
  _55 = ((*_1).3: *mut u32)
  using: _1@Phi(bb15)
  _57 = ((*_1).1: u64)
  using: _1@Phi(bb15)
  _56 = move _57 as isize (IntToInt)
  using: _57@Mir(bb18[3])
  _54 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _55, move _56) -> bb19
  using: _55@Mir(bb18[2]), _56@Mir(bb18[4])
bb19:
  _53 = move _54 as *mut libc::c_void (PtrToPtr)
  using: _54@Mir(bb18[5])
  _58 = const 0_i32
  using: 
  _61 = _6
  using: _6@Mir(bb18[1])
  _62 = ((*_1).1: u64)
  using: _1@Phi(bb15)
  _60 = core::num::<impl u64>::wrapping_sub(move _61, move _62) -> bb20
  using: _61@Mir(bb19[2]), _62@Mir(bb19[3])
bb20:
  _64 = std::mem::size_of::<u32>() -> bb21
  using: 
bb21:
  _63 = move _64 as u64 (IntToInt)
  using: _64@Mir(bb20[0])
  _59 = core::num::<impl u64>::wrapping_mul(move _60, move _63) -> bb22
  using: _60@Mir(bb19[4]), _63@Mir(bb21[0])
bb22:
  _52 = src::zadd::memset(move _53, move _58, move _59) -> bb23
  using: _53@Mir(bb19[0]), _58@Mir(bb19[1]), _59@Mir(bb21[1])
bb23:
  _65 = ((*_3).3: *mut u32)
  using: _3@Phi(bb23)
  _10 = move _65
  using: _65@Mir(bb23[0])
  goto -> bb41
  using: 
bb24:
  _67 = _1
  using: _1@Phi(bb23)
  _68 = _3
  using: _3@Phi(bb23)
  _66 = Eq(move _67, move _68)
  using: _67@Mir(bb24[0]), _68@Mir(bb24[1])
  switchInt(move _66) -> [0: bb32, otherwise: bb25]
  using: _66@Mir(bb24[2])
bb25:
  _70 = ((*_1).1: u64)
  using: _1@Phi(bb23)
  _71 = ((*_2).1: u64)
  using: _2@Phi(bb9)
  _69 = Lt(move _70, move _71)
  using: _70@Mir(bb25[0]), _71@Mir(bb25[1])
  switchInt(move _69) -> [0: bb31, otherwise: bb26]
  using: _69@Mir(bb25[2])
bb26:
  _72 = ((*_2).1: u64)
  using: _2@Phi(bb9)
  _6 = move _72
  using: _72@Mir(bb26[0])
  _76 = ((*_1).3: *mut u32)
  using: _1@Phi(bb23)
  _78 = ((*_1).1: u64)
  using: _1@Phi(bb23)
  _77 = move _78 as isize (IntToInt)
  using: _78@Mir(bb26[3])
  _75 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _76, move _77) -> bb27
  using: _76@Mir(bb26[2]), _77@Mir(bb26[4])
bb27:
  _74 = move _75 as *mut libc::c_void (PtrToPtr)
  using: _75@Mir(bb26[5])
  _79 = const 0_i32
  using: 
  _82 = _6
  using: _6@Mir(bb26[1])
  _83 = ((*_1).1: u64)
  using: _1@Phi(bb23)
  _81 = core::num::<impl u64>::wrapping_sub(move _82, move _83) -> bb28
  using: _82@Mir(bb27[2]), _83@Mir(bb27[3])
bb28:
  _85 = std::mem::size_of::<u32>() -> bb29
  using: 
bb29:
  _84 = move _85 as u64 (IntToInt)
  using: _85@Mir(bb28[0])
  _80 = core::num::<impl u64>::wrapping_mul(move _81, move _84) -> bb30
  using: _81@Mir(bb27[4]), _84@Mir(bb29[0])
bb30:
  _73 = src::zadd::memset(move _74, move _79, move _80) -> bb31
  using: _74@Mir(bb27[0]), _79@Mir(bb27[1]), _80@Mir(bb29[1])
bb31:
  _86 = ((*_2).3: *mut u32)
  using: _2@Phi(bb31)
  _10 = move _86
  using: _86@Mir(bb31[0])
  goto -> bb41
  using: 
bb32:
  _88 = ((*_2).1: u64)
  using: _2@Phi(bb31)
  _89 = ((*_3).1: u64)
  using: _3@Phi(bb23)
  _87 = Gt(move _88, move _89)
  using: _88@Mir(bb32[0]), _89@Mir(bb32[1])
  switchInt(move _87) -> [0: bb37, otherwise: bb33]
  using: _87@Mir(bb32[2])
bb33:
  _92 = ((*_1).3: *mut u32)
  using: _1@Phi(bb31)
  _91 = move _92 as *mut libc::c_void (PtrToPtr)
  using: _92@Mir(bb33[0])
  _94 = ((*_2).3: *mut u32)
  using: _2@Phi(bb31)
  _93 = move _94 as *const libc::c_void (PtrToPtr)
  using: _94@Mir(bb33[2])
  _96 = ((*_2).1: u64)
  using: _2@Phi(bb31)
  _98 = std::mem::size_of::<u32>() -> bb34
  using: 
bb34:
  _97 = move _98 as u64 (IntToInt)
  using: _98@Mir(bb33[5])
  _95 = core::num::<impl u64>::wrapping_mul(move _96, move _97) -> bb35
  using: _96@Mir(bb33[4]), _97@Mir(bb34[0])
bb35:
  _90 = src::zadd::memcpy(move _91, move _93, move _95) -> bb36
  using: _91@Mir(bb33[1]), _93@Mir(bb33[3]), _95@Mir(bb34[1])
bb36:
  _99 = ((*_2).1: u64)
  using: _2@Phi(bb31)
  ((*_1).1: u64) = move _99
  using: _1@Phi(bb31), _99@Mir(bb36[0])
  _100 = ((*_3).3: *mut u32)
  using: _3@Phi(bb23)
  _10 = move _100
  using: _100@Mir(bb36[2])
  goto -> bb41
  using: 
bb37:
  _103 = ((*_1).3: *mut u32)
  using: _1@Phi(bb31)
  _102 = move _103 as *mut libc::c_void (PtrToPtr)
  using: _103@Mir(bb37[0])
  _105 = ((*_3).3: *mut u32)
  using: _3@Phi(bb23)
  _104 = move _105 as *const libc::c_void (PtrToPtr)
  using: _105@Mir(bb37[2])
  _107 = ((*_3).1: u64)
  using: _3@Phi(bb23)
  _109 = std::mem::size_of::<u32>() -> bb38
  using: 
bb38:
  _108 = move _109 as u64 (IntToInt)
  using: _109@Mir(bb37[5])
  _106 = core::num::<impl u64>::wrapping_mul(move _107, move _108) -> bb39
  using: _107@Mir(bb37[4]), _108@Mir(bb38[0])
bb39:
  _101 = src::zadd::memcpy(move _102, move _104, move _106) -> bb40
  using: _102@Mir(bb37[1]), _104@Mir(bb37[3]), _106@Mir(bb38[1])
bb40:
  _110 = ((*_3).1: u64)
  using: _3@Phi(bb23)
  ((*_1).1: u64) = move _110
  using: _1@Phi(bb31), _110@Mir(bb40[0])
  _111 = ((*_2).3: *mut u32)
  using: _2@Phi(bb31)
  _10 = move _111
  using: _111@Mir(bb40[2])
  goto -> bb41
  using: 
bb41:
  _4 = const 0_u64
  using: 
  goto -> bb42
  using: 
bb42:
  _113 = _4
  using: _4@Phi(bb42)
  _114 = _6
  using: _6@Phi(bb41)
  _112 = Lt(move _113, move _114)
  using: _113@Mir(bb42[0]), _114@Mir(bb42[1])
  switchInt(move _112) -> [0: bb63, otherwise: bb43]
  using: _112@Mir(bb42[2])
bb43:
  _118 = _4
  using: _4@Phi(bb42)
  _119 = const 1_u64
  using: 
  _117 = BitAnd(move _118, move _119)
  using: _118@Mir(bb43[0]), _119@Mir(bb43[1])
  _116 = move _117 as usize (IntToInt)
  using: _117@Mir(bb43[2])
  _120 = const 2_usize
  using: 
  _121 = Lt(_116, _120)
  using: _116@Mir(bb43[3]), _120@Mir(bb43[4])
  assert(move _121, "index out of bounds: the length is {} but the index is {}", move _120, _116) -> bb44
  using: _121@Entry, _120@Entry, _116@Entry
bb44:
  _115 = _7[_116]
  using: _7@Phi(bb42), _116@Mir(bb43[3])
  switchInt(move _115) -> [0: bb50, otherwise: bb45]
  using: _115@Mir(bb44[0])
bb45:
  _125 = const u32::MAX
  using: 
  _128 = ((*_1).3: *mut u32)
  using: _1@Phi(bb42)
  _130 = _4
  using: _4@Phi(bb42)
  _129 = move _130 as isize (IntToInt)
  using: _130@Mir(bb45[2])
  _127 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _128, move _129) -> bb46
  using: _128@Mir(bb45[1]), _129@Mir(bb45[3])
bb46:
  _126 = (*_127)
  using: _127@Mir(bb45[4])
  _124 = core::num::<impl u32>::wrapping_sub(move _125, move _126) -> bb47
  using: _125@Mir(bb45[0]), _126@Mir(bb46[0])
bb47:
  _133 = _10
  using: _10@Phi(bb42)
  _135 = _4
  using: _4@Phi(bb42)
  _134 = move _135 as isize (IntToInt)
  using: _135@Mir(bb47[1])
  _132 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _133, move _134) -> bb48
  using: _133@Mir(bb47[0]), _134@Mir(bb47[2])
bb48:
  _131 = (*_132)
  using: _132@Mir(bb47[3])
  _123 = Le(move _124, move _131)
  using: _124@Mir(bb46[1]), _131@Mir(bb48[0])
  _122 = move _123 as i32 (IntToInt)
  using: _123@Mir(bb48[1])
  _139 = _4
  using: _4@Phi(bb42)
  _138 = Not(move _139)
  using: _139@Mir(bb48[3])
  _140 = const 1_u64
  using: 
  _137 = BitAnd(move _138, move _140)
  using: _138@Mir(bb48[4]), _140@Mir(bb48[5])
  _136 = move _137 as usize (IntToInt)
  using: _137@Mir(bb48[6])
  _141 = const 2_usize
  using: 
  _142 = Lt(_136, _141)
  using: _136@Mir(bb48[7]), _141@Mir(bb48[8])
  assert(move _142, "index out of bounds: the length is {} but the index is {}", move _141, _136) -> bb49
  using: _142@Entry, _141@Entry, _136@Entry
bb49:
  _7[_136] = move _122 as u32 (IntToInt)
  using: _136@Mir(bb48[7]), _122@Mir(bb48[2])
  goto -> bb55
  using: 
bb50:
  _146 = const u32::MAX
  using: 
  _149 = ((*_1).3: *mut u32)
  using: _1@Phi(bb42)
  _151 = _4
  using: _4@Phi(bb42)
  _150 = move _151 as isize (IntToInt)
  using: _151@Mir(bb50[2])
  _148 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _149, move _150) -> bb51
  using: _149@Mir(bb50[1]), _150@Mir(bb50[3])
bb51:
  _147 = (*_148)
  using: _148@Mir(bb50[4])
  _145 = core::num::<impl u32>::wrapping_sub(move _146, move _147) -> bb52
  using: _146@Mir(bb50[0]), _147@Mir(bb51[0])
bb52:
  _154 = _10
  using: _10@Phi(bb42)
  _156 = _4
  using: _4@Phi(bb42)
  _155 = move _156 as isize (IntToInt)
  using: _156@Mir(bb52[1])
  _153 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _154, move _155) -> bb53
  using: _154@Mir(bb52[0]), _155@Mir(bb52[2])
bb53:
  _152 = (*_153)
  using: _153@Mir(bb52[3])
  _144 = Lt(move _145, move _152)
  using: _145@Mir(bb51[1]), _152@Mir(bb53[0])
  _143 = move _144 as i32 (IntToInt)
  using: _144@Mir(bb53[1])
  _160 = _4
  using: _4@Phi(bb42)
  _159 = Not(move _160)
  using: _160@Mir(bb53[3])
  _161 = const 1_u64
  using: 
  _158 = BitAnd(move _159, move _161)
  using: _159@Mir(bb53[4]), _161@Mir(bb53[5])
  _157 = move _158 as usize (IntToInt)
  using: _158@Mir(bb53[6])
  _162 = const 2_usize
  using: 
  _163 = Lt(_157, _162)
  using: _157@Mir(bb53[7]), _162@Mir(bb53[8])
  assert(move _163, "index out of bounds: the length is {} but the index is {}", move _162, _157) -> bb54
  using: _163@Entry, _162@Entry, _157@Entry
bb54:
  _7[_157] = move _143 as u32 (IntToInt)
  using: _157@Mir(bb53[7]), _143@Mir(bb53[2])
  goto -> bb55
  using: 
bb55:
  _167 = ((*_1).3: *mut u32)
  using: _1@Phi(bb55)
  _169 = _4
  using: _4@Phi(bb55)
  _168 = move _169 as isize (IntToInt)
  using: _169@Mir(bb55[1])
  _166 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _167, move _168) -> bb56
  using: _167@Mir(bb55[0]), _168@Mir(bb55[2])
bb56:
  _165 = (*_166)
  using: _166@Mir(bb55[3])
  _173 = _10
  using: _10@Phi(bb55)
  _175 = _4
  using: _4@Phi(bb55)
  _174 = move _175 as isize (IntToInt)
  using: _175@Mir(bb56[2])
  _172 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _173, move _174) -> bb57
  using: _173@Mir(bb56[1]), _174@Mir(bb56[3])
bb57:
  _171 = (*_172)
  using: _172@Mir(bb56[4])
  _179 = _4
  using: _4@Phi(bb55)
  _180 = const 1_u64
  using: 
  _178 = BitAnd(move _179, move _180)
  using: _179@Mir(bb57[1]), _180@Mir(bb57[2])
  _177 = move _178 as usize (IntToInt)
  using: _178@Mir(bb57[3])
  _181 = const 2_usize
  using: 
  _182 = Lt(_177, _181)
  using: _177@Mir(bb57[4]), _181@Mir(bb57[5])
  assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _177) -> bb58
  using: _182@Entry, _181@Entry, _177@Entry
bb58:
  _176 = _7[_177]
  using: _7@Phi(bb42), _177@Mir(bb57[4])
  _170 = core::num::<impl u32>::wrapping_add(move _171, move _176) -> bb59
  using: _171@Mir(bb57[0]), _176@Mir(bb58[0])
bb59:
  _164 = core::num::<impl u32>::wrapping_add(move _165, move _170) -> bb60
  using: _165@Mir(bb56[0]), _170@Mir(bb58[1])
bb60:
  _184 = ((*_1).3: *mut u32)
  using: _1@Phi(bb55)
  _186 = _4
  using: _4@Phi(bb55)
  _185 = move _186 as isize (IntToInt)
  using: _186@Mir(bb60[1])
  _183 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _184, move _185) -> bb61
  using: _184@Mir(bb60[0]), _185@Mir(bb60[2])
bb61:
  (*_183) = move _164
  using: _183@Mir(bb60[3]), _164@Mir(bb59[0])
  _188 = _4
  using: _4@Phi(bb55)
  _187 = core::num::<impl u64>::wrapping_add(move _188, const 1_u64) -> bb62
  using: _188@Mir(bb61[1])
bb62:
  _4 = move _187
  using: _187@Mir(bb61[2])
  goto -> bb42
  using: 
bb63:
  _192 = _4
  using: _4@Phi(bb63)
  _193 = const 1_u64
  using: 
  _191 = BitAnd(move _192, move _193)
  using: _192@Mir(bb63[0]), _193@Mir(bb63[1])
  _190 = move _191 as usize (IntToInt)
  using: _191@Mir(bb63[2])
  _194 = const 2_usize
  using: 
  _195 = Lt(_190, _194)
  using: _190@Mir(bb63[3]), _194@Mir(bb63[4])
  assert(move _195, "index out of bounds: the length is {} but the index is {}", move _194, _190) -> bb64
  using: _195@Entry, _194@Entry, _190@Entry
bb64:
  _189 = _7[_190]
  using: _7@Phi(bb63), _190@Mir(bb63[3])
  switchInt(move _189) -> [0: bb72, otherwise: bb65]
  using: _189@Mir(bb64[0])
bb65:
  _200 = ((*_1).3: *mut u32)
  using: _1@Phi(bb63)
  _202 = _4
  using: _4@Phi(bb63)
  _201 = move _202 as isize (IntToInt)
  using: _202@Mir(bb65[1])
  _199 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _200, move _201) -> bb66
  using: _200@Mir(bb65[0]), _201@Mir(bb65[2])
bb66:
  _198 = (*_199)
  using: _199@Mir(bb65[3])
  _203 = const u32::MAX
  using: 
  _197 = Eq(move _198, move _203)
  using: _198@Mir(bb66[0]), _203@Mir(bb66[1])
  _196 = move _197 as i32 (IntToInt)
  using: _197@Mir(bb66[2])
  _207 = _4
  using: _4@Phi(bb63)
  _206 = Not(move _207)
  using: _207@Mir(bb66[4])
  _208 = const 1_u64
  using: 
  _205 = BitAnd(move _206, move _208)
  using: _206@Mir(bb66[5]), _208@Mir(bb66[6])
  _204 = move _205 as usize (IntToInt)
  using: _205@Mir(bb66[7])
  _209 = const 2_usize
  using: 
  _210 = Lt(_204, _209)
  using: _204@Mir(bb66[8]), _209@Mir(bb66[9])
  assert(move _210, "index out of bounds: the length is {} but the index is {}", move _209, _204) -> bb67
  using: _210@Entry, _209@Entry, _204@Entry
bb67:
  _7[_204] = move _196 as u32 (IntToInt)
  using: _204@Mir(bb66[8]), _196@Mir(bb66[3])
  _211 = _4
  using: _4@Phi(bb63)
  _213 = _4
  using: _4@Phi(bb63)
  _212 = core::num::<impl u64>::wrapping_add(move _213, const 1_u64) -> bb68
  using: _213@Mir(bb67[2])
bb68:
  _4 = move _212
  using: _212@Mir(bb67[3])
  _217 = ((*_1).3: *mut u32)
  using: _1@Phi(bb63)
  _219 = _211
  using: _211@Mir(bb67[1])
  _218 = move _219 as isize (IntToInt)
  using: _219@Mir(bb68[2])
  _216 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _217, move _218) -> bb69
  using: _217@Mir(bb68[1]), _218@Mir(bb68[3])
bb69:
  _215 = (*_216)
  using: _216@Mir(bb68[4])
  _220 = const 1_u32
  using: 
  _214 = core::num::<impl u32>::wrapping_add(move _215, move _220) -> bb70
  using: _215@Mir(bb69[0]), _220@Mir(bb69[1])
bb70:
  _222 = ((*_1).3: *mut u32)
  using: _1@Phi(bb63)
  _224 = _211
  using: _211@Mir(bb67[1])
  _223 = move _224 as isize (IntToInt)
  using: _224@Mir(bb70[1])
  _221 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _222, move _223) -> bb71
  using: _222@Mir(bb70[0]), _223@Mir(bb70[2])
bb71:
  (*_221) = move _214
  using: _221@Mir(bb70[3]), _214@Mir(bb69[2])
  goto -> bb63
  using: 
bb72:
  _226 = ((*_1).1: u64)
  using: _1@Phi(bb63)
  _227 = _4
  using: _4@Phi(bb63)
  _225 = Lt(move _226, move _227)
  using: _226@Mir(bb72[0]), _227@Mir(bb72[1])
  switchInt(move _225) -> [0: bb74, otherwise: bb73]
  using: _225@Mir(bb72[2])
bb73:
  _228 = _4
  using: _4@Phi(bb63)
  ((*_1).1: u64) = move _228
  using: _1@Phi(bb63), _228@Mir(bb73[0])
  goto -> bb74
  using: 
bb74:
  _229 = const 1_i32
  using: 
  ((*_1).0: i32) = move _229
  using: _1@Phi(bb74), _229@Mir(bb74[0])
  goto -> bb75
  using: 
bb75:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _8, move _9] is not supported
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zadd.rs:58:21: 58:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zadd.rs:58:45: 58:63 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zadd.rs:59:28: 59:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zadd.rs:60:56: 60:103 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:62:19: 62:40 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:67:30: 67:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zadd.rs:70:22: 70:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zadd.rs:71:35: 71:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zadd.rs:71:22: 71:89 (#0) by default
rewrite call src::zadd::memset @ workspace/libzahl/src/zadd.rs:66:13: 72:14 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:79:30: 79:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zadd.rs:82:22: 82:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zadd.rs:83:35: 83:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zadd.rs:83:22: 83:89 (#0) by default
rewrite call src::zadd::memset @ workspace/libzahl/src/zadd.rs:78:13: 84:14 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zadd.rs:92:31: 92:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zadd.rs:92:18: 92:85 (#0) by default
rewrite call src::zadd::memcpy @ workspace/libzahl/src/zadd.rs:88:9: 93:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zadd.rs:101:31: 101:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zadd.rs:101:18: 101:85 (#0) by default
rewrite call src::zadd::memcpy @ workspace/libzahl/src/zadd.rs:97:9: 102:10 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:111:45: 111:63 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zadd.rs:111:18: 111:64 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:112:28: 112:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:116:45: 116:63 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zadd.rs:116:18: 116:64 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:117:27: 117:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:119:59: 119:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:121:26: 121:44 (#0) by default
rewrite call core::num::<impl u32>::wrapping_add @ workspace/libzahl/src/zadd.rs:122:22: 124:22 (#0) by default
rewrite call core::num::<impl u32>::wrapping_add @ workspace/libzahl/src/zadd.rs:120:14: 125:14 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:119:23: 119:41 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zadd.rs:126:15: 126:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:130:40: 130:58 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zadd.rs:133:15: 133:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:134:64: 134:87 (#0) by default
rewrite call core::num::<impl u32>::wrapping_add @ workspace/libzahl/src/zadd.rs:135:14: 135:60 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zadd.rs:134:23: 134:46 (#0) by default
@DefId(0:49 ~ lib[40c5]::src::zadd::zadd)
bb0:
  _5 = _2
  using: _2@Entry
  _4 = src::zadd::zzero(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  switchInt(move _4) -> [0: bb4, otherwise: bb2]
  using: _4@Mir(bb0[1])
bb2:
  _7 = _1
  using: _1@Entry
  _8 = _3
  using: _3@Entry
  _6 = Ne(move _7, move _8)
  using: _7@Mir(bb2[0]), _8@Mir(bb2[1])
  switchInt(move _6) -> [0: bb24, otherwise: bb3]
  using: _6@Mir(bb2[2])
bb3:
  _10 = _1
  using: _1@Entry
  _11 = _3
  using: _3@Entry
  _9 = src::zset::zset(move _10, move _11) -> bb24
  using: _10@Mir(bb3[0]), _11@Mir(bb3[1])
bb4:
  _13 = _3
  using: _3@Entry
  _12 = src::zadd::zzero(move _13) -> bb5
  using: _13@Mir(bb4[0])
bb5:
  switchInt(move _12) -> [0: bb8, otherwise: bb6]
  using: _12@Mir(bb4[1])
bb6:
  _15 = _1
  using: _1@Entry
  _16 = _2
  using: _2@Entry
  _14 = Ne(move _15, move _16)
  using: _15@Mir(bb6[0]), _16@Mir(bb6[1])
  switchInt(move _14) -> [0: bb24, otherwise: bb7]
  using: _14@Mir(bb6[2])
bb7:
  _18 = _1
  using: _1@Entry
  _19 = _2
  using: _2@Entry
  _17 = src::zset::zset(move _18, move _19) -> bb24
  using: _18@Mir(bb7[0]), _19@Mir(bb7[1])
bb8:
  _21 = _2
  using: _2@Entry
  _22 = _3
  using: _3@Entry
  _20 = Eq(move _21, move _22)
  using: _21@Mir(bb8[0]), _22@Mir(bb8[1])
  switchInt(move _20) -> [0: bb10, otherwise: bb9]
  using: _20@Mir(bb8[2])
bb9:
  _24 = _1
  using: _1@Entry
  _25 = _2
  using: _2@Entry
  _26 = const 1_u64
  using: 
  _23 = src::zlsh::zlsh(move _24, move _25, move _26) -> bb24
  using: _24@Mir(bb9[0]), _25@Mir(bb9[1]), _26@Mir(bb9[2])
bb10:
  _30 = _2
  using: _2@Entry
  _29 = src::zadd::zsignum(move _30) -> bb11
  using: _30@Mir(bb10[0])
bb11:
  _32 = _3
  using: _3@Entry
  _31 = src::zadd::zsignum(move _32) -> bb12
  using: _32@Mir(bb11[0])
bb12:
  _28 = BitOr(move _29, move _31)
  using: _29@Mir(bb10[1]), _31@Mir(bb11[1])
  _33 = const 0_i32
  using: 
  _27 = Lt(move _28, move _33)
  using: _28@Mir(bb12[0]), _33@Mir(bb12[1])
  switchInt(move _27) -> [0: bb23, otherwise: bb13]
  using: _27@Mir(bb12[2])
bb13:
  _36 = _2
  using: _2@Entry
  _35 = src::zadd::zsignum(move _36) -> bb14
  using: _36@Mir(bb13[0])
bb14:
  _37 = const 0_i32
  using: 
  _34 = Lt(move _35, move _37)
  using: _35@Mir(bb13[1]), _37@Mir(bb14[0])
  switchInt(move _34) -> [0: bb22, otherwise: bb15]
  using: _34@Mir(bb14[1])
bb15:
  _40 = _3
  using: _3@Entry
  _39 = src::zadd::zsignum(move _40) -> bb16
  using: _40@Mir(bb15[0])
bb16:
  _41 = const 0_i32
  using: 
  _38 = Lt(move _39, move _41)
  using: _39@Mir(bb15[1]), _41@Mir(bb16[0])
  switchInt(move _38) -> [0: bb21, otherwise: bb17]
  using: _38@Mir(bb16[1])
bb17:
  _43 = _1
  using: _1@Entry
  _44 = _2
  using: _2@Entry
  _45 = _3
  using: _3@Entry
  _42 = src::zadd::zadd_unsigned(move _43, move _44, move _45) -> bb18
  using: _43@Mir(bb17[0]), _44@Mir(bb17[1]), _45@Mir(bb17[2])
bb18:
  _47 = _1
  using: _1@Entry
  _46 = src::zadd::zsignum(move _47) -> bb19
  using: _47@Mir(bb18[0])
bb19:
  _48 = Eq(_46, const i32::MIN)
  using: _46@Mir(bb18[1])
  assert(!move _48, "attempt to negate `{}`, which would overflow", _46) -> bb20
  using: _48@Entry, _46@Entry
bb20:
  ((*_1).0: i32) = Neg(move _46)
  using: _1@Entry, _46@Mir(bb18[1])
  goto -> bb24
  using: 
bb21:
  _50 = _1
  using: _1@Entry
  _51 = _3
  using: _3@Entry
  _52 = _2
  using: _2@Entry
  _49 = src::zsub::zsub_unsigned(move _50, move _51, move _52) -> bb24
  using: _50@Mir(bb21[0]), _51@Mir(bb21[1]), _52@Mir(bb21[2])
bb22:
  _54 = _1
  using: _1@Entry
  _55 = _2
  using: _2@Entry
  _56 = _3
  using: _3@Entry
  _53 = src::zsub::zsub_unsigned(move _54, move _55, move _56) -> bb24
  using: _54@Mir(bb22[0]), _55@Mir(bb22[1]), _56@Mir(bb22[2])
bb23:
  _58 = _1
  using: _1@Entry
  _59 = _2
  using: _2@Entry
  _60 = _3
  using: _3@Entry
  _57 = src::zadd::zadd_unsigned(move _58, move _59, move _60) -> bb24
  using: _58@Mir(bb23[0]), _59@Mir(bb23[1]), _60@Mir(bb23[2])
bb24:
  return
  using: _0@Entry
@DefId(0:58 ~ lib[40c5]::src::zand::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:59 ~ lib[40c5]::src::zand::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:60 ~ lib[40c5]::src::zand::zand)
bb0:
  _5 = const 0_u64
  using: 
  _8 = _2
  using: _2@Entry
  _7 = src::zand::zzero(move _8) -> bb4
  using: _8@Mir(bb0[1])
bb1:
  _6 = const true
  using: 
  goto -> bb3
  using: 
bb2:
  _11 = _3
  using: _3@Entry
  _10 = src::zand::zzero(move _11) -> bb5
  using: _11@Mir(bb2[0])
bb3:
  switchInt(move _6) -> [0: bb7, otherwise: bb6]
  using: _6@Phi(bb3)
bb4:
  switchInt(move _7) -> [0: bb2, otherwise: bb1]
  using: _7@Mir(bb0[2])
bb5:
  _9 = Ne(move _10, const 0_i32)
  using: _10@Mir(bb2[1])
  _6 = move _9
  using: _9@Mir(bb5[0])
  goto -> bb3
  using: 
bb6:
  _12 = const 0_i32
  using: 
  ((*_1).0: i32) = move _12
  using: _1@Entry, _12@Mir(bb6[0])
  goto -> bb51
  using: 
bb7:
  _15 = ((*_2).1: u64)
  using: _2@Entry
  _16 = ((*_3).1: u64)
  using: _3@Phi(bb3)
  _14 = Lt(move _15, move _16)
  using: _15@Mir(bb7[0]), _16@Mir(bb7[1])
  switchInt(move _14) -> [0: bb9, otherwise: bb8]
  using: _14@Mir(bb7[2])
bb8:
  _13 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb10
  using: 
bb9:
  _13 = ((*_3).1: u64)
  using: _3@Phi(bb3)
  goto -> bb10
  using: 
bb10:
  _5 = move _13
  using: _13@Phi(bb10)
  goto -> bb11
  using: 
bb11:
  _17 = _5
  using: _5@Phi(bb11)
  _19 = _5
  using: _5@Phi(bb11)
  _18 = core::num::<impl u64>::wrapping_sub(move _19, const 1_u64) -> bb12
  using: _19@Mir(bb11[1])
bb12:
  _5 = move _18
  using: _18@Mir(bb11[2])
  _22 = _17
  using: _17@Mir(bb11[0])
  _21 = Ne(move _22, const 0_u64)
  using: _22@Mir(bb12[1])
  _20 = Not(move _21)
  using: _21@Mir(bb12[2])
  switchInt(move _20) -> [0: bb14, otherwise: bb13]
  using: _20@Mir(bb12[3])
bb13:
  _4 = const 2473556513754201174_u64
  using: 
  goto -> bb18
  using: 
bb14:
  _26 = ((*_2).3: *mut u32)
  using: _2@Phi(bb11)
  _28 = _5
  using: _5@Mir(bb12[0])
  _27 = move _28 as isize (IntToInt)
  using: _28@Mir(bb14[1])
  _25 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _26, move _27) -> bb15
  using: _26@Mir(bb14[0]), _27@Mir(bb14[2])
bb15:
  _24 = (*_25)
  using: _25@Mir(bb14[3])
  _31 = ((*_3).3: *mut u32)
  using: _3@Phi(bb11)
  _33 = _5
  using: _5@Mir(bb12[0])
  _32 = move _33 as isize (IntToInt)
  using: _33@Mir(bb15[2])
  _30 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _31, move _32) -> bb16
  using: _31@Mir(bb15[1]), _32@Mir(bb15[3])
bb16:
  _29 = (*_30)
  using: _30@Mir(bb15[4])
  _23 = BitAnd(move _24, move _29)
  using: _24@Mir(bb15[0]), _29@Mir(bb16[0])
  switchInt(move _23) -> [0: bb11, otherwise: bb17]
  using: _23@Mir(bb16[1])
bb17:
  _4 = const 8876057388401302592_u64
  using: 
  goto -> bb18
  using: 
bb18:
  switchInt(_4) -> [2473556513754201174: bb20, otherwise: bb19]
  using: _4@Phi(bb18)
bb19:
  _36 = _5
  using: _5@Phi(bb18)
  _35 = core::num::<impl u64>::wrapping_add(move _36, const 1_u64) -> bb21
  using: _36@Mir(bb19[0])
bb20:
  _34 = const 0_i32
  using: 
  ((*_1).0: i32) = move _34
  using: _1@Phi(bb43), _34@Mir(bb20[0])
  goto -> bb51
  using: 
bb21:
  _5 = move _35
  using: _35@Mir(bb19[1])
  _37 = _5
  using: _5@Mir(bb21[0])
  ((*_1).1: u64) = move _37
  using: _1@Entry, _37@Mir(bb21[1])
  _39 = _1
  using: _1@Entry
  _40 = _2
  using: _2@Phi(bb18)
  _38 = Eq(move _39, move _40)
  using: _39@Mir(bb21[3]), _40@Mir(bb21[4])
  switchInt(move _38) -> [0: bb27, otherwise: bb22]
  using: _38@Mir(bb21[5])
bb22:
  _41 = _5
  using: _5@Phi(bb22)
  _43 = _5
  using: _5@Phi(bb22)
  _42 = core::num::<impl u64>::wrapping_sub(move _43, const 1_u64) -> bb23
  using: _43@Mir(bb22[1])
bb23:
  _5 = move _42
  using: _42@Mir(bb22[2])
  _46 = _41
  using: _41@Mir(bb22[0])
  _45 = Ne(move _46, const 0_u64)
  using: _46@Mir(bb23[1])
  _44 = Not(move _45)
  using: _45@Mir(bb23[2])
  switchInt(move _44) -> [0: bb24, otherwise: bb43]
  using: _44@Mir(bb23[3])
bb24:
  _49 = ((*_3).3: *mut u32)
  using: _3@Phi(bb22)
  _51 = _5
  using: _5@Mir(bb23[0])
  _50 = move _51 as isize (IntToInt)
  using: _51@Mir(bb24[1])
  _48 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _49, move _50) -> bb25
  using: _49@Mir(bb24[0]), _50@Mir(bb24[2])
bb25:
  _47 = (*_48)
  using: _48@Mir(bb24[3])
  _53 = ((*_1).3: *mut u32)
  using: _1@Phi(bb22)
  _55 = _5
  using: _5@Mir(bb23[0])
  _54 = move _55 as isize (IntToInt)
  using: _55@Mir(bb25[2])
  _52 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _53, move _54) -> bb26
  using: _53@Mir(bb25[1]), _54@Mir(bb25[3])
bb26:
  (*_52) = BitAnd((*_52), move _47)
  using: _52@Mir(bb25[4]), _52@Mir(bb25[4]), _47@Mir(bb25[0])
  goto -> bb22
  using: 
bb27:
  _57 = _1
  using: _1@Phi(bb22)
  _58 = _3
  using: _3@Phi(bb22)
  _56 = Eq(move _57, move _58)
  using: _57@Mir(bb27[0]), _58@Mir(bb27[1])
  switchInt(move _56) -> [0: bb33, otherwise: bb28]
  using: _56@Mir(bb27[2])
bb28:
  _59 = _5
  using: _5@Phi(bb28)
  _61 = _5
  using: _5@Phi(bb28)
  _60 = core::num::<impl u64>::wrapping_sub(move _61, const 1_u64) -> bb29
  using: _61@Mir(bb28[1])
bb29:
  _5 = move _60
  using: _60@Mir(bb28[2])
  _64 = _59
  using: _59@Mir(bb28[0])
  _63 = Ne(move _64, const 0_u64)
  using: _64@Mir(bb29[1])
  _62 = Not(move _63)
  using: _63@Mir(bb29[2])
  switchInt(move _62) -> [0: bb30, otherwise: bb43]
  using: _62@Mir(bb29[3])
bb30:
  _67 = ((*_2).3: *mut u32)
  using: _2@Phi(bb28)
  _69 = _5
  using: _5@Mir(bb29[0])
  _68 = move _69 as isize (IntToInt)
  using: _69@Mir(bb30[1])
  _66 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _67, move _68) -> bb31
  using: _67@Mir(bb30[0]), _68@Mir(bb30[2])
bb31:
  _65 = (*_66)
  using: _66@Mir(bb30[3])
  _71 = ((*_1).3: *mut u32)
  using: _1@Phi(bb28)
  _73 = _5
  using: _5@Mir(bb29[0])
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb31[2])
  _70 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _71, move _72) -> bb32
  using: _71@Mir(bb31[1]), _72@Mir(bb31[3])
bb32:
  (*_70) = BitAnd((*_70), move _65)
  using: _70@Mir(bb31[4]), _70@Mir(bb31[4]), _65@Mir(bb31[0])
  goto -> bb28
  using: 
bb33:
  _75 = ((*_1).2: u64)
  using: _1@Phi(bb28)
  _76 = ((*_1).1: u64)
  using: _1@Phi(bb28)
  _74 = Lt(move _75, move _76)
  using: _75@Mir(bb33[0]), _76@Mir(bb33[1])
  switchInt(move _74) -> [0: bb35, otherwise: bb34]
  using: _74@Mir(bb33[2])
bb34:
  _78 = _1
  using: _1@Phi(bb28)
  _79 = ((*_1).1: u64)
  using: _1@Phi(bb28)
  _77 = src::allocator::libzahl_realloc(move _78, move _79) -> bb35
  using: _78@Mir(bb34[0]), _79@Mir(bb34[1])
bb35:
  _82 = ((*_1).3: *mut u32)
  using: _1@Phi(bb35)
  _81 = move _82 as *mut libc::c_void (PtrToPtr)
  using: _82@Mir(bb35[0])
  _84 = ((*_3).3: *mut u32)
  using: _3@Phi(bb22)
  _83 = move _84 as *const libc::c_void (PtrToPtr)
  using: _84@Mir(bb35[2])
  _86 = ((*_1).1: u64)
  using: _1@Phi(bb35)
  _88 = std::mem::size_of::<u32>() -> bb36
  using: 
bb36:
  _87 = move _88 as u64 (IntToInt)
  using: _88@Mir(bb35[5])
  _85 = core::num::<impl u64>::wrapping_mul(move _86, move _87) -> bb37
  using: _86@Mir(bb35[4]), _87@Mir(bb36[0])
bb37:
  _80 = src::zand::memcpy(move _81, move _83, move _85) -> bb38
  using: _81@Mir(bb35[1]), _83@Mir(bb35[3]), _85@Mir(bb36[1])
bb38:
  _89 = _5
  using: _5@Phi(bb38)
  _91 = _5
  using: _5@Phi(bb38)
  _90 = core::num::<impl u64>::wrapping_sub(move _91, const 1_u64) -> bb39
  using: _91@Mir(bb38[1])
bb39:
  _5 = move _90
  using: _90@Mir(bb38[2])
  _94 = _89
  using: _89@Mir(bb38[0])
  _93 = Ne(move _94, const 0_u64)
  using: _94@Mir(bb39[1])
  _92 = Not(move _93)
  using: _93@Mir(bb39[2])
  switchInt(move _92) -> [0: bb40, otherwise: bb43]
  using: _92@Mir(bb39[3])
bb40:
  _97 = ((*_2).3: *mut u32)
  using: _2@Phi(bb38)
  _99 = _5
  using: _5@Mir(bb39[0])
  _98 = move _99 as isize (IntToInt)
  using: _99@Mir(bb40[1])
  _96 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _97, move _98) -> bb41
  using: _97@Mir(bb40[0]), _98@Mir(bb40[2])
bb41:
  _95 = (*_96)
  using: _96@Mir(bb40[3])
  _101 = ((*_1).3: *mut u32)
  using: _1@Phi(bb38)
  _103 = _5
  using: _5@Mir(bb39[0])
  _102 = move _103 as isize (IntToInt)
  using: _103@Mir(bb41[2])
  _100 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _101, move _102) -> bb42
  using: _101@Mir(bb41[1]), _102@Mir(bb41[3])
bb42:
  (*_100) = BitAnd((*_100), move _95)
  using: _100@Mir(bb41[4]), _100@Mir(bb41[4]), _95@Mir(bb41[0])
  goto -> bb38
  using: 
bb43:
  _109 = _2
  using: _2@Phi(bb43)
  _108 = src::zand::zsignum(move _109) -> bb47
  using: _109@Mir(bb43[0])
bb44:
  _106 = const true
  using: 
  goto -> bb46
  using: 
bb45:
  _113 = _3
  using: _3@Phi(bb43)
  _112 = src::zand::zsignum(move _113) -> bb48
  using: _113@Mir(bb45[0])
bb46:
  _105 = move _106 as i32 (IntToInt)
  using: _106@Phi(bb46)
  _115 = const 2_i32
  using: 
  _116 = CheckedMul(_105, _115)
  using: _105@Mir(bb46[0]), _115@Mir(bb46[1])
  assert(!move (_116.1: bool), "attempt to compute `{} * {}`, which would overflow", move _105, move _115) -> bb49
  using: _116@Entry, _105@Entry, _115@Entry
bb47:
  _110 = const 0_i32
  using: 
  _107 = Gt(move _108, move _110)
  using: _108@Mir(bb43[1]), _110@Mir(bb47[0])
  switchInt(move _107) -> [0: bb45, otherwise: bb44]
  using: _107@Mir(bb47[1])
bb48:
  _114 = const 0_i32
  using: 
  _111 = Gt(move _112, move _114)
  using: _112@Mir(bb45[1]), _114@Mir(bb48[0])
  _106 = move _111
  using: _111@Mir(bb48[1])
  goto -> bb46
  using: 
bb49:
  _104 = move (_116.0: i32)
  using: _116@Mir(bb46[2])
  _117 = const 1_i32
  using: 
  _118 = CheckedSub(_104, _117)
  using: _104@Mir(bb49[0]), _117@Mir(bb49[1])
  assert(!move (_118.1: bool), "attempt to compute `{} - {}`, which would overflow", move _104, move _117) -> bb50
  using: _118@Entry, _104@Entry, _117@Entry
bb50:
  ((*_1).0: i32) = move (_118.0: i32)
  using: _1@Phi(bb43), _118@Mir(bb49[2])
  goto -> bb51
  using: 
bb51:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zand.rs:40:15: 40:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:45:26: 45:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:45:61: 45:79 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zand.rs:56:19: 56:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zand.rs:61:27: 61:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:65:71: 65:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:65:35: 65:53 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zand.rs:70:27: 70:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:74:71: 74:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:74:35: 74:53 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zand.rs:85:29: 85:65 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zand.rs:84:26: 86:26 (#0) by default
rewrite call src::zand::memcpy @ workspace/libzahl/src/zand.rs:80:17: 87:18 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zand.rs:90:27: 90:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:94:71: 94:89 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zand.rs:94:35: 94:53 (#0) by default
@DefId(0:67 ~ lib[40c5]::src::zbits::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:68 ~ lib[40c5]::src::zbits::zbits)
bb0:
  _2 = const 0_u64
  using: 
  _3 = const 0_u32
  using: 
  _5 = _1
  using: _1@Entry
  _4 = src::zbits::zzero(move _5) -> bb1
  using: _5@Mir(bb0[2])
bb1:
  switchInt(move _4) -> [0: bb3, otherwise: bb2]
  using: _4@Mir(bb0[3])
bb2:
  _0 = const 1_u64
  using: 
  goto -> bb17
  using: 
bb3:
  _7 = ((*_1).1: u64)
  using: _1@Entry
  _8 = const 1_u64
  using: 
  _6 = core::num::<impl u64>::wrapping_sub(move _7, move _8) -> bb4
  using: _7@Mir(bb3[0]), _8@Mir(bb3[1])
bb4:
  _2 = move _6
  using: _6@Mir(bb3[2])
  goto -> bb5
  using: 
bb5:
  _11 = ((*_1).3: *mut u32)
  using: _1@Entry
  _13 = _2
  using: _2@Phi(bb5)
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb5[1])
  _10 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _11, move _12) -> bb6
  using: _11@Mir(bb5[0]), _12@Mir(bb5[2])
bb6:
  _9 = (*_10)
  using: _10@Mir(bb5[3])
  _3 = move _9
  using: _9@Mir(bb6[0])
  _14 = _3
  using: _3@Mir(bb6[1])
  switchInt(move _14) -> [0: bb15, otherwise: bb7]
  using: _14@Mir(bb6[2])
bb7:
  _16 = _2
  using: _2@Phi(bb5)
  _17 = const 1_u64
  using: 
  _15 = core::num::<impl u64>::wrapping_add(move _16, move _17) -> bb8
  using: _16@Mir(bb7[0]), _17@Mir(bb7[1])
bb8:
  ((*_1).1: u64) = move _15
  using: _1@Entry, _15@Mir(bb7[2])
  _19 = _2
  using: _2@Phi(bb5)
  _20 = const 32_u64
  using: 
  _18 = core::num::<impl u64>::wrapping_mul(move _19, move _20) -> bb9
  using: _19@Mir(bb8[1]), _20@Mir(bb8[2])
bb9:
  _2 = move _18
  using: _18@Mir(bb8[3])
  goto -> bb10
  using: 
bb10:
  _21 = _3
  using: _3@Phi(bb10)
  switchInt(move _21) -> [0: bb14, otherwise: bb11]
  using: _21@Mir(bb10[0])
bb11:
  _22 = const 1_i32
  using: 
  _23 = CheckedShr(_3, _22)
  using: _3@Phi(bb10), _22@Mir(bb11[0])
  assert(!move (_23.1: bool), "attempt to shift right by `{}`, which would overflow", move _22) -> bb12
  using: _23@Entry, _3@Entry, _22@Entry
bb12:
  _3 = move (_23.0: u32)
  using: _23@Mir(bb11[1])
  _25 = _2
  using: _2@Phi(bb10)
  _24 = core::num::<impl u64>::wrapping_add(move _25, const 1_u64) -> bb13
  using: _25@Mir(bb12[1])
bb13:
  _2 = move _24
  using: _24@Mir(bb12[2])
  goto -> bb10
  using: 
bb14:
  _0 = _2
  using: _2@Phi(bb10)
  goto -> bb17
  using: 
bb15:
  _27 = _2
  using: _2@Mir(bb9[0])
  _26 = core::num::<impl u64>::wrapping_sub(move _27, const 1_u64) -> bb16
  using: _27@Mir(bb15[0])
bb16:
  _2 = move _26
  using: _26@Mir(bb15[1])
  goto -> bb5
  using: 
bb17:
  return
  using: _0@Phi(bb17)
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zbits.rs:20:21: 20:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbits.rs:22:27: 22:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbits.rs:24:27: 24:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zbits.rs:25:38: 25:86 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbits.rs:29:23: 29:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zbits.rs:33:15: 33:30 (#0) by default
@DefId(0:77 ~ lib[40c5]::src::zbset::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:78 ~ lib[40c5]::src::zbset::zbset)
bb0:
  _5 = const 1_u32
  using: 
  _6 = const 0_u64
  using: 
  _7 = _3
  using: _3@Entry
  _8 = const 5_i32
  using: 
  _9 = CheckedShr(_7, _8)
  using: _7@Mir(bb0[2]), _8@Mir(bb0[3])
  assert(!move (_9.1: bool), "attempt to shift right by `{}`, which would overflow", move _8) -> bb1
  using: _9@Entry, _7@Entry, _8@Entry
bb1:
  _6 = move (_9.0: u64)
  using: _9@Mir(bb0[4])
  _10 = _3
  using: _3@Entry
  _11 = const 31_u64
  using: 
  _3 = BitAnd(move _10, move _11)
  using: _10@Mir(bb1[1]), _11@Mir(bb1[2])
  _12 = _3
  using: _3@Mir(bb1[3])
  _13 = CheckedShl(_5, _12)
  using: _5@Mir(bb0[0]), _12@Mir(bb1[4])
  assert(!move (_13.1: bool), "attempt to shift left by `{}`, which would overflow", move _12) -> bb2
  using: _13@Entry, _5@Entry, _12@Entry
bb2:
  _5 = move (_13.0: u32)
  using: _13@Mir(bb1[5])
  _15 = _1
  using: _1@Entry
  _16 = _2
  using: _2@Entry
  _14 = Ne(move _15, move _16)
  using: _15@Mir(bb2[1]), _16@Mir(bb2[2])
  switchInt(move _14) -> [0: bb4, otherwise: bb3]
  using: _14@Mir(bb2[3])
bb3:
  _18 = _1
  using: _1@Entry
  _19 = _2
  using: _2@Entry
  _17 = src::zset::zset(move _18, move _19) -> bb4
  using: _18@Mir(bb3[0]), _19@Mir(bb3[1])
bb4:
  _20 = _4
  using: _4@Entry
  switchInt(move _20) -> [0: bb21, otherwise: bb5]
  using: _20@Mir(bb4[0])
bb5:
  _22 = _1
  using: _1@Phi(bb4)
  _21 = src::zbset::zzero(move _22) -> bb6
  using: _22@Mir(bb5[0])
bb6:
  switchInt(move _21) -> [0: bb8, otherwise: bb7]
  using: _21@Mir(bb5[1])
bb7:
  _23 = const 0_i32
  using: 
  ((*_1).1: u64) = move _23 as u64 (IntToInt)
  using: _1@Phi(bb4), _23@Mir(bb7[0])
  _24 = const 1_i32
  using: 
  ((*_1).0: i32) = move _24
  using: _1@Phi(bb4), _24@Mir(bb7[2])
  goto -> bb8
  using: 
bb8:
  _26 = ((*_1).1: u64)
  using: _1@Phi(bb8)
  _27 = _6
  using: _6@Mir(bb1[0])
  _25 = Le(move _26, move _27)
  using: _26@Mir(bb8[0]), _27@Mir(bb8[1])
  switchInt(move _25) -> [0: bb21, otherwise: bb9]
  using: _25@Mir(bb8[2])
bb9:
  _29 = ((*_1).2: u64)
  using: _1@Phi(bb8)
  _31 = _6
  using: _6@Mir(bb1[0])
  _32 = const 1_u64
  using: 
  _30 = core::num::<impl u64>::wrapping_add(move _31, move _32) -> bb10
  using: _31@Mir(bb9[1]), _32@Mir(bb9[2])
bb10:
  _28 = Lt(move _29, move _30)
  using: _29@Mir(bb9[0]), _30@Mir(bb9[3])
  switchInt(move _28) -> [0: bb13, otherwise: bb11]
  using: _28@Mir(bb10[0])
bb11:
  _34 = _1
  using: _1@Phi(bb8)
  _36 = _6
  using: _6@Mir(bb1[0])
  _37 = const 1_u64
  using: 
  _35 = core::num::<impl u64>::wrapping_add(move _36, move _37) -> bb12
  using: _36@Mir(bb11[1]), _37@Mir(bb11[2])
bb12:
  _33 = src::allocator::libzahl_realloc(move _34, move _35) -> bb13
  using: _34@Mir(bb11[0]), _35@Mir(bb11[3])
bb13:
  _41 = ((*_1).3: *mut u32)
  using: _1@Phi(bb13)
  _43 = ((*_1).1: u64)
  using: _1@Phi(bb13)
  _42 = move _43 as isize (IntToInt)
  using: _43@Mir(bb13[1])
  _40 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _41, move _42) -> bb14
  using: _41@Mir(bb13[0]), _42@Mir(bb13[2])
bb14:
  _39 = move _40 as *mut libc::c_void (PtrToPtr)
  using: _40@Mir(bb13[3])
  _44 = const 0_i32
  using: 
  _48 = _6
  using: _6@Phi(bb13)
  _49 = const 1_u64
  using: 
  _47 = core::num::<impl u64>::wrapping_add(move _48, move _49) -> bb15
  using: _48@Mir(bb14[2]), _49@Mir(bb14[3])
bb15:
  _50 = ((*_1).1: u64)
  using: _1@Phi(bb13)
  _46 = core::num::<impl u64>::wrapping_sub(move _47, move _50) -> bb16
  using: _47@Mir(bb14[4]), _50@Mir(bb15[0])
bb16:
  _52 = std::mem::size_of::<u32>() -> bb17
  using: 
bb17:
  _51 = move _52 as u64 (IntToInt)
  using: _52@Mir(bb16[0])
  _45 = core::num::<impl u64>::wrapping_mul(move _46, move _51) -> bb18
  using: _46@Mir(bb15[1]), _51@Mir(bb17[0])
bb18:
  _38 = src::zbset::memset(move _39, move _44, move _45) -> bb19
  using: _39@Mir(bb14[0]), _44@Mir(bb14[1]), _45@Mir(bb17[1])
bb19:
  _54 = _6
  using: _6@Phi(bb13)
  _55 = const 1_u64
  using: 
  _53 = core::num::<impl u64>::wrapping_add(move _54, move _55) -> bb20
  using: _54@Mir(bb19[0]), _55@Mir(bb19[1])
bb20:
  ((*_1).1: u64) = move _53
  using: _1@Phi(bb13), _53@Mir(bb19[2])
  goto -> bb21
  using: 
bb21:
  _57 = _4
  using: _4@Entry
  _58 = const 0_i32
  using: 
  _56 = Gt(move _57, move _58)
  using: _57@Mir(bb21[0]), _58@Mir(bb21[1])
  switchInt(move _56) -> [0: bb24, otherwise: bb22]
  using: _56@Mir(bb21[2])
bb22:
  _59 = _5
  using: _5@Mir(bb2[0])
  _61 = ((*_1).3: *mut u32)
  using: _1@Phi(bb21)
  _63 = _6
  using: _6@Phi(bb21)
  _62 = move _63 as isize (IntToInt)
  using: _63@Mir(bb22[2])
  _60 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _61, move _62) -> bb23
  using: _61@Mir(bb22[1]), _62@Mir(bb22[3])
bb23:
  (*_60) = move _59
  using: _60@Mir(bb22[4]), _59@Mir(bb22[0])
  goto -> bb40
  using: 
bb24:
  _65 = _4
  using: _4@Entry
  _66 = const 0_i32
  using: 
  _64 = Lt(move _65, move _66)
  using: _65@Mir(bb24[0]), _66@Mir(bb24[1])
  switchInt(move _64) -> [0: bb27, otherwise: bb25]
  using: _64@Mir(bb24[2])
bb25:
  _67 = _5
  using: _5@Mir(bb2[0])
  _69 = ((*_1).3: *mut u32)
  using: _1@Phi(bb21)
  _71 = _6
  using: _6@Phi(bb21)
  _70 = move _71 as isize (IntToInt)
  using: _71@Mir(bb25[2])
  _68 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _69, move _70) -> bb26
  using: _69@Mir(bb25[1]), _70@Mir(bb25[3])
bb26:
  (*_68) = BitXor((*_68), move _67)
  using: _68@Mir(bb25[4]), _68@Mir(bb25[4]), _67@Mir(bb25[0])
  goto -> bb30
  using: 
bb27:
  _73 = _6
  using: _6@Phi(bb21)
  _74 = ((*_1).1: u64)
  using: _1@Phi(bb21)
  _72 = Lt(move _73, move _74)
  using: _73@Mir(bb27[0]), _74@Mir(bb27[1])
  switchInt(move _72) -> [0: bb30, otherwise: bb28]
  using: _72@Mir(bb27[2])
bb28:
  _76 = _5
  using: _5@Mir(bb2[0])
  _75 = Not(move _76)
  using: _76@Mir(bb28[0])
  _78 = ((*_1).3: *mut u32)
  using: _1@Phi(bb21)
  _80 = _6
  using: _6@Phi(bb21)
  _79 = move _80 as isize (IntToInt)
  using: _80@Mir(bb28[3])
  _77 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _78, move _79) -> bb29
  using: _78@Mir(bb28[2]), _79@Mir(bb28[4])
bb29:
  (*_77) = BitAnd((*_77), move _75)
  using: _77@Mir(bb28[5]), _77@Mir(bb28[5]), _75@Mir(bb28[1])
  goto -> bb30
  using: 
bb30:
  _82 = ((*_1).1: u64)
  using: _1@Phi(bb30)
  switchInt(move _82) -> [0: bb31, otherwise: bb32]
  using: _82@Mir(bb30[0])
bb31:
  _81 = const false
  using: 
  goto -> bb33
  using: 
bb32:
  _86 = ((*_1).3: *mut u32)
  using: _1@Phi(bb30)
  _89 = ((*_1).1: u64)
  using: _1@Phi(bb30)
  _90 = const 1_u64
  using: 
  _88 = core::num::<impl u64>::wrapping_sub(move _89, move _90) -> bb34
  using: _89@Mir(bb32[1]), _90@Mir(bb32[2])
bb33:
  switchInt(move _81) -> [0: bb38, otherwise: bb36]
  using: _81@Phi(bb33)
bb34:
  _87 = move _88 as isize (IntToInt)
  using: _88@Mir(bb32[3])
  _85 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _86, move _87) -> bb35
  using: _86@Mir(bb32[0]), _87@Mir(bb34[0])
bb35:
  _84 = (*_85)
  using: _85@Mir(bb34[1])
  _83 = Eq(move _84, const 0_u32)
  using: _84@Mir(bb35[0])
  _81 = move _83
  using: _83@Mir(bb35[1])
  goto -> bb33
  using: 
bb36:
  _92 = ((*_1).1: u64)
  using: _1@Phi(bb33)
  _91 = core::num::<impl u64>::wrapping_sub(move _92, const 1_u64) -> bb37
  using: _92@Mir(bb36[0])
bb37:
  ((*_1).1: u64) = move _91
  using: _1@Phi(bb33), _91@Mir(bb36[1])
  goto -> bb30
  using: 
bb38:
  _93 = ((*_1).1: u64)
  using: _1@Phi(bb33)
  switchInt(move _93) -> [0: bb39, otherwise: bb40]
  using: _93@Mir(bb38[0])
bb39:
  _94 = const 0_i32
  using: 
  ((*_1).0: i32) = move _94
  using: _1@Phi(bb33), _94@Mir(bb39[0])
  goto -> bb40
  using: 
bb40:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbset.rs:43:37: 43:84 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbset.rs:46:27: 46:74 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbset.rs:50:30: 50:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbset.rs:53:22: 53:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zbset.rs:54:22: 54:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zbset.rs:55:35: 55:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zbset.rs:55:22: 55:89 (#0) by default
rewrite call src::zbset::memset @ workspace/libzahl/src/zbset.rs:49:13: 56:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zbset.rs:57:31: 57:78 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbset.rs:61:23: 61:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbset.rs:65:27: 65:49 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbset.rs:67:27: 67:49 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zbset.rs:72:33: 72:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbset.rs:72:14: 72:90 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zbset.rs:75:33: 75:48 (#0) by default
@DefId(0:85 ~ lib[40c5]::src::zbtest::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:86 ~ lib[40c5]::src::zbtest::zbtest)
bb0:
  _3 = const 0_u64
  using: 
  _5 = _1
  using: _1@Entry
  _4 = src::zbtest::zzero(move _5) -> bb1
  using: _5@Mir(bb0[1])
bb1:
  switchInt(move _4) -> [0: bb3, otherwise: bb2]
  using: _4@Mir(bb0[2])
bb2:
  _0 = const 0_i32
  using: 
  goto -> bb9
  using: 
bb3:
  _6 = _2
  using: _2@Entry
  _7 = const 5_i32
  using: 
  _8 = CheckedShr(_6, _7)
  using: _6@Mir(bb3[0]), _7@Mir(bb3[1])
  assert(!move (_8.1: bool), "attempt to shift right by `{}`, which would overflow", move _7) -> bb4
  using: _8@Entry, _6@Entry, _7@Entry
bb4:
  _3 = move (_8.0: u64)
  using: _8@Mir(bb3[2])
  _10 = _3
  using: _3@Mir(bb4[0])
  _11 = ((*_1).1: u64)
  using: _1@Entry
  _9 = Ge(move _10, move _11)
  using: _10@Mir(bb4[1]), _11@Mir(bb4[2])
  switchInt(move _9) -> [0: bb6, otherwise: bb5]
  using: _9@Mir(bb4[3])
bb5:
  _0 = const 0_i32
  using: 
  goto -> bb9
  using: 
bb6:
  _12 = _2
  using: _2@Entry
  _13 = const 31_u64
  using: 
  _2 = BitAnd(move _12, move _13)
  using: _12@Mir(bb6[0]), _13@Mir(bb6[1])
  _18 = ((*_1).3: *mut u32)
  using: _1@Entry
  _20 = _3
  using: _3@Mir(bb4[0])
  _19 = move _20 as isize (IntToInt)
  using: _20@Mir(bb6[4])
  _17 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _18, move _19) -> bb7
  using: _18@Mir(bb6[3]), _19@Mir(bb6[5])
bb7:
  _16 = (*_17)
  using: _17@Mir(bb6[6])
  _21 = _2
  using: _2@Mir(bb6[2])
  _22 = CheckedShr(_16, _21)
  using: _16@Mir(bb7[0]), _21@Mir(bb7[1])
  assert(!move (_22.1: bool), "attempt to shift right by `{}`, which would overflow", move _21) -> bb8
  using: _22@Entry, _16@Entry, _21@Entry
bb8:
  _15 = move (_22.0: u32)
  using: _22@Mir(bb7[2])
  _23 = const 1_u32
  using: 
  _14 = BitAnd(move _15, move _23)
  using: _15@Mir(bb8[0]), _23@Mir(bb8[1])
  _0 = move _14 as i32 (IntToInt)
  using: _14@Mir(bb8[2])
  goto -> bb9
  using: 
bb9:
  return
  using: _0@Phi(bb9)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zbtest.rs:27:27: 27:49 (#0) by default
@DefId(0:94 ~ lib[40c5]::src::zcmp::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:95 ~ lib[40c5]::src::zcmp::zcmp)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = src::zcmp::zsignum(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _7 = _2
  using: _2@Entry
  _6 = src::zcmp::zsignum(move _7) -> bb2
  using: _7@Mir(bb1[0])
bb2:
  _3 = Ne(move _4, move _6)
  using: _4@Mir(bb0[1]), _6@Mir(bb1[1])
  switchInt(move _3) -> [0: bb10, otherwise: bb3]
  using: _3@Mir(bb2[0])
bb3:
  _10 = _1
  using: _1@Entry
  _9 = src::zcmp::zsignum(move _10) -> bb4
  using: _10@Mir(bb3[0])
bb4:
  _12 = _2
  using: _2@Entry
  _11 = src::zcmp::zsignum(move _12) -> bb5
  using: _12@Mir(bb4[0])
bb5:
  _8 = Lt(move _9, move _11)
  using: _9@Mir(bb3[1]), _11@Mir(bb4[1])
  switchInt(move _8) -> [0: bb7, otherwise: bb6]
  using: _8@Mir(bb5[0])
bb6:
  _0 = const -1_i32
  using: 
  goto -> bb14
  using: 
bb7:
  _15 = _1
  using: _1@Entry
  _14 = src::zcmp::zsignum(move _15) -> bb8
  using: _15@Mir(bb7[0])
bb8:
  _17 = _2
  using: _2@Entry
  _16 = src::zcmp::zsignum(move _17) -> bb9
  using: _17@Mir(bb8[0])
bb9:
  _13 = Gt(move _14, move _16)
  using: _14@Mir(bb7[1]), _16@Mir(bb8[1])
  _0 = move _13 as i32 (IntToInt)
  using: _13@Mir(bb9[0])
  goto -> bb14
  using: 
bb10:
  _19 = _1
  using: _1@Entry
  _18 = src::zcmp::zsignum(move _19) -> bb11
  using: _19@Mir(bb10[0])
bb11:
  _21 = _1
  using: _1@Entry
  _22 = _2
  using: _2@Entry
  _20 = src::zcmpmag::zcmpmag(move _21, move _22) -> bb12
  using: _21@Mir(bb11[0]), _22@Mir(bb11[1])
bb12:
  _23 = CheckedMul(_18, _20)
  using: _18@Mir(bb10[1]), _20@Mir(bb11[2])
  assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, move _20) -> bb13
  using: _23@Entry, _18@Entry, _20@Entry
bb13:
  _0 = move (_23.0: i32)
  using: _23@Mir(bb12[0])
  goto -> bb14
  using: 
bb14:
  return
  using: _0@Phi(bb14)
@DefId(0:106 ~ lib[40c5]::src::zcmpi::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:107 ~ lib[40c5]::src::zcmpi::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:108 ~ lib[40c5]::src::zcmpi::zcmpi)
bb0:
  _3 = _2
  using: _2@Entry
  switchInt(move _3) -> [0: bb1, otherwise: bb2]
  using: _3@Mir(bb0[0])
bb1:
  _4 = _1
  using: _1@Entry
  _0 = src::zcmpi::zsignum(move _4) -> bb11
  using: _4@Mir(bb1[0])
bb2:
  _6 = _1
  using: _1@Entry
  _5 = src::zcmpi::zzero(move _6) -> bb3
  using: _6@Mir(bb2[0])
bb3:
  switchInt(move _5) -> [0: bb7, otherwise: bb4]
  using: _5@Mir(bb2[1])
bb4:
  _8 = _2
  using: _2@Entry
  _9 = const 0_i64
  using: 
  _7 = Gt(move _8, move _9)
  using: _8@Mir(bb4[0]), _9@Mir(bb4[1])
  switchInt(move _7) -> [0: bb6, otherwise: bb5]
  using: _7@Mir(bb4[2])
bb5:
  _0 = const -1_i32
  using: 
  goto -> bb11
  using: 
bb6:
  _11 = _2
  using: _2@Entry
  _12 = const 0_i64
  using: 
  _10 = Lt(move _11, move _12)
  using: _11@Mir(bb6[0]), _12@Mir(bb6[1])
  _0 = move _10 as i32 (IntToInt)
  using: _10@Mir(bb6[2])
  goto -> bb11
  using: 
bb7:
  _17 = const {alloc51: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _16 = &mut (*_17)
  using: _17@Mir(bb7[0])
  _15 = move _16 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _16@Mir(bb7[1])
  _14 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _15) -> bb8
  using: _15@Mir(bb7[2])
bb8:
  _18 = _2
  using: _2@Entry
  _13 = src::zseti::zseti(move _14, move _18) -> bb9
  using: _14@Mir(bb7[3]), _18@Mir(bb8[0])
bb9:
  _19 = _1
  using: _1@Entry
  _23 = const {alloc51: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _22 = &mut (*_23)
  using: _23@Mir(bb9[1])
  _21 = move _22 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _22@Mir(bb9[2])
  _20 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _21) -> bb10
  using: _21@Mir(bb9[3])
bb10:
  _0 = src::zcmp::zcmp(move _19, move _20) -> bb11
  using: _19@Mir(bb9[0]), _20@Mir(bb9[4])
bb11:
  return
  using: _0@Phi(bb11)
@DefId(0:115 ~ lib[40c5]::src::zcmpmag::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:116 ~ lib[40c5]::src::zcmpmag::zcmpmag)
bb0:
  _3 = const 0_u64
  using: 
  _4 = const 0_u64
  using: 
  _6 = _1
  using: _1@Entry
  _5 = src::zcmpmag::zzero(move _6) -> bb1
  using: _6@Mir(bb0[2])
bb1:
  switchInt(move _5) -> [0: bb5, otherwise: bb2]
  using: _5@Mir(bb0[3])
bb2:
  _10 = _2
  using: _2@Entry
  _9 = src::zcmpmag::zzero(move _10) -> bb3
  using: _10@Mir(bb2[0])
bb3:
  _8 = Eq(move _9, const 0_i32)
  using: _9@Mir(bb2[1])
  _7 = move _8 as i32 (IntToInt)
  using: _8@Mir(bb3[0])
  _11 = Eq(_7, const i32::MIN)
  using: _7@Mir(bb3[1])
  assert(!move _11, "attempt to negate `{}`, which would overflow", _7) -> bb4
  using: _11@Entry, _7@Entry
bb4:
  _0 = Neg(move _7)
  using: _7@Mir(bb3[1])
  goto -> bb43
  using: 
bb5:
  _13 = _2
  using: _2@Entry
  _12 = src::zcmpmag::zzero(move _13) -> bb6
  using: _13@Mir(bb5[0])
bb6:
  switchInt(move _12) -> [0: bb8, otherwise: bb7]
  using: _12@Mir(bb5[1])
bb7:
  _0 = const 1_i32
  using: 
  goto -> bb43
  using: 
bb8:
  _15 = ((*_1).1: u64)
  using: _1@Entry
  _16 = const 1_u64
  using: 
  _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> bb9
  using: _15@Mir(bb8[0]), _16@Mir(bb8[1])
bb9:
  _3 = move _14
  using: _14@Mir(bb8[2])
  _18 = ((*_2).1: u64)
  using: _2@Entry
  _19 = const 1_u64
  using: 
  _17 = core::num::<impl u64>::wrapping_sub(move _18, move _19) -> bb10
  using: _18@Mir(bb9[1]), _19@Mir(bb9[2])
bb10:
  _4 = move _17
  using: _17@Mir(bb9[3])
  goto -> bb11
  using: 
bb11:
  _21 = _3
  using: _3@Phi(bb11)
  _22 = _4
  using: _4@Mir(bb10[0])
  _20 = Gt(move _21, move _22)
  using: _21@Mir(bb11[0]), _22@Mir(bb11[1])
  switchInt(move _20) -> [0: bb18, otherwise: bb12]
  using: _20@Mir(bb11[2])
bb12:
  _25 = ((*_1).3: *mut u32)
  using: _1@Phi(bb11)
  _27 = _3
  using: _3@Phi(bb11)
  _26 = move _27 as isize (IntToInt)
  using: _27@Mir(bb12[1])
  _24 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _25, move _26) -> bb13
  using: _25@Mir(bb12[0]), _26@Mir(bb12[2])
bb13:
  _23 = (*_24)
  using: _24@Mir(bb12[3])
  switchInt(move _23) -> [0: bb15, otherwise: bb14]
  using: _23@Mir(bb13[0])
bb14:
  _0 = const 1_i32
  using: 
  goto -> bb43
  using: 
bb15:
  _29 = ((*_1).1: u64)
  using: _1@Phi(bb11)
  _28 = core::num::<impl u64>::wrapping_sub(move _29, const 1_u64) -> bb16
  using: _29@Mir(bb15[0])
bb16:
  ((*_1).1: u64) = move _28
  using: _1@Phi(bb11), _28@Mir(bb15[1])
  _31 = _3
  using: _3@Phi(bb11)
  _30 = core::num::<impl u64>::wrapping_sub(move _31, const 1_u64) -> bb17
  using: _31@Mir(bb16[1])
bb17:
  _3 = move _30
  using: _30@Mir(bb16[2])
  goto -> bb11
  using: 
bb18:
  _33 = _4
  using: _4@Phi(bb18)
  _34 = _3
  using: _3@Phi(bb11)
  _32 = Gt(move _33, move _34)
  using: _33@Mir(bb18[0]), _34@Mir(bb18[1])
  switchInt(move _32) -> [0: bb25, otherwise: bb19]
  using: _32@Mir(bb18[2])
bb19:
  _37 = ((*_2).3: *mut u32)
  using: _2@Phi(bb18)
  _39 = _4
  using: _4@Phi(bb18)
  _38 = move _39 as isize (IntToInt)
  using: _39@Mir(bb19[1])
  _36 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _37, move _38) -> bb20
  using: _37@Mir(bb19[0]), _38@Mir(bb19[2])
bb20:
  _35 = (*_36)
  using: _36@Mir(bb19[3])
  switchInt(move _35) -> [0: bb22, otherwise: bb21]
  using: _35@Mir(bb20[0])
bb21:
  _0 = const -1_i32
  using: 
  goto -> bb43
  using: 
bb22:
  _41 = ((*_2).1: u64)
  using: _2@Phi(bb18)
  _40 = core::num::<impl u64>::wrapping_sub(move _41, const 1_u64) -> bb23
  using: _41@Mir(bb22[0])
bb23:
  ((*_2).1: u64) = move _40
  using: _2@Phi(bb18), _40@Mir(bb22[1])
  _43 = _4
  using: _4@Phi(bb18)
  _42 = core::num::<impl u64>::wrapping_sub(move _43, const 1_u64) -> bb24
  using: _43@Mir(bb23[1])
bb24:
  _4 = move _42
  using: _42@Mir(bb23[2])
  goto -> bb18
  using: 
bb25:
  _44 = _3
  using: _3@Phi(bb25)
  switchInt(move _44) -> [0: bb36, otherwise: bb26]
  using: _44@Mir(bb25[0])
bb26:
  _48 = ((*_1).3: *mut u32)
  using: _1@Phi(bb25)
  _50 = _3
  using: _3@Phi(bb25)
  _49 = move _50 as isize (IntToInt)
  using: _50@Mir(bb26[1])
  _47 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _48, move _49) -> bb27
  using: _48@Mir(bb26[0]), _49@Mir(bb26[2])
bb27:
  _46 = (*_47)
  using: _47@Mir(bb26[3])
  _53 = ((*_2).3: *mut u32)
  using: _2@Phi(bb25)
  _55 = _3
  using: _3@Phi(bb25)
  _54 = move _55 as isize (IntToInt)
  using: _55@Mir(bb27[2])
  _52 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _53, move _54) -> bb28
  using: _53@Mir(bb27[1]), _54@Mir(bb27[3])
bb28:
  _51 = (*_52)
  using: _52@Mir(bb27[4])
  _45 = Ne(move _46, move _51)
  using: _46@Mir(bb27[0]), _51@Mir(bb28[0])
  switchInt(move _45) -> [0: bb34, otherwise: bb29]
  using: _45@Mir(bb28[1])
bb29:
  _61 = ((*_1).3: *mut u32)
  using: _1@Phi(bb25)
  _63 = _3
  using: _3@Phi(bb25)
  _62 = move _63 as isize (IntToInt)
  using: _63@Mir(bb29[1])
  _60 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _61, move _62) -> bb30
  using: _61@Mir(bb29[0]), _62@Mir(bb29[2])
bb30:
  _59 = (*_60)
  using: _60@Mir(bb29[3])
  _66 = ((*_2).3: *mut u32)
  using: _2@Phi(bb25)
  _68 = _3
  using: _3@Phi(bb25)
  _67 = move _68 as isize (IntToInt)
  using: _68@Mir(bb30[2])
  _65 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _66, move _67) -> bb31
  using: _66@Mir(bb30[1]), _67@Mir(bb30[3])
bb31:
  _64 = (*_65)
  using: _65@Mir(bb30[4])
  _58 = Gt(move _59, move _64)
  using: _59@Mir(bb30[0]), _64@Mir(bb31[0])
  _57 = move _58 as i32 (IntToInt)
  using: _58@Mir(bb31[1])
  _69 = const 2_i32
  using: 
  _70 = CheckedMul(_57, _69)
  using: _57@Mir(bb31[2]), _69@Mir(bb31[3])
  assert(!move (_70.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, move _69) -> bb32
  using: _70@Entry, _57@Entry, _69@Entry
bb32:
  _56 = move (_70.0: i32)
  using: _70@Mir(bb31[4])
  _71 = const 1_i32
  using: 
  _72 = CheckedSub(_56, _71)
  using: _56@Mir(bb32[0]), _71@Mir(bb32[1])
  assert(!move (_72.1: bool), "attempt to compute `{} - {}`, which would overflow", move _56, move _71) -> bb33
  using: _72@Entry, _56@Entry, _71@Entry
bb33:
  _0 = move (_72.0: i32)
  using: _72@Mir(bb32[2])
  goto -> bb43
  using: 
bb34:
  _74 = _3
  using: _3@Phi(bb25)
  _73 = core::num::<impl u64>::wrapping_sub(move _74, const 1_u64) -> bb35
  using: _74@Mir(bb34[0])
bb35:
  _3 = move _73
  using: _73@Mir(bb34[1])
  goto -> bb25
  using: 
bb36:
  _78 = ((*_1).3: *mut u32)
  using: _1@Phi(bb25)
  _79 = const 0_isize
  using: 
  _77 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _78, move _79) -> bb37
  using: _78@Mir(bb36[0]), _79@Mir(bb36[1])
bb37:
  _76 = (*_77)
  using: _77@Mir(bb36[2])
  _82 = ((*_2).3: *mut u32)
  using: _2@Phi(bb25)
  _83 = const 0_isize
  using: 
  _81 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _82, move _83) -> bb38
  using: _82@Mir(bb37[1]), _83@Mir(bb37[2])
bb38:
  _80 = (*_81)
  using: _81@Mir(bb37[3])
  _75 = Lt(move _76, move _80)
  using: _76@Mir(bb37[0]), _80@Mir(bb38[0])
  switchInt(move _75) -> [0: bb40, otherwise: bb39]
  using: _75@Mir(bb38[1])
bb39:
  _0 = const -1_i32
  using: 
  goto -> bb43
  using: 
bb40:
  _87 = ((*_1).3: *mut u32)
  using: _1@Phi(bb25)
  _88 = const 0_isize
  using: 
  _86 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _87, move _88) -> bb41
  using: _87@Mir(bb40[0]), _88@Mir(bb40[1])
bb41:
  _85 = (*_86)
  using: _86@Mir(bb40[2])
  _91 = ((*_2).3: *mut u32)
  using: _2@Phi(bb25)
  _92 = const 0_isize
  using: 
  _90 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _91, move _92) -> bb42
  using: _91@Mir(bb41[1]), _92@Mir(bb41[2])
bb42:
  _89 = (*_90)
  using: _90@Mir(bb41[3])
  _84 = Gt(move _85, move _89)
  using: _85@Mir(bb41[0]), _89@Mir(bb42[0])
  _0 = move _84 as i32 (IntToInt)
  using: _84@Mir(bb42[1])
  goto -> bb43
  using: 
bb43:
  return
  using: _0@Phi(bb43)
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:26:21: 26:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:27:21: 27:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:29:26: 29:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:32:33: 32:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:33:15: 33:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:36:26: 36:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:39:33: 39:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:40:15: 40:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:43:26: 43:44 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:43:62: 43:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:44:35: 44:53 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:44:70: 44:88 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zcmpmag.rs:47:15: 47:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:49:29: 49:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:50:25: 50:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:54:24: 54:57 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zcmpmag.rs:55:29: 55:62 (#0) by default
@DefId(0:127 ~ lib[40c5]::src::zcmpu::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:128 ~ lib[40c5]::src::zcmpu::zcmpu)
bb0:
  _3 = _2
  using: _2@Entry
  switchInt(move _3) -> [0: bb1, otherwise: bb2]
  using: _3@Mir(bb0[0])
bb1:
  _4 = _1
  using: _1@Entry
  _0 = src::zcmpu::zsignum(move _4) -> bb9
  using: _4@Mir(bb1[0])
bb2:
  _7 = _1
  using: _1@Entry
  _6 = src::zcmpu::zsignum(move _7) -> bb3
  using: _7@Mir(bb2[0])
bb3:
  _8 = const 0_i32
  using: 
  _5 = Le(move _6, move _8)
  using: _6@Mir(bb2[1]), _8@Mir(bb3[0])
  switchInt(move _5) -> [0: bb5, otherwise: bb4]
  using: _5@Mir(bb3[1])
bb4:
  _0 = const -1_i32
  using: 
  goto -> bb9
  using: 
bb5:
  _13 = const {alloc60: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _12 = &mut (*_13)
  using: _13@Mir(bb5[0])
  _11 = move _12 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _12@Mir(bb5[1])
  _10 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _11) -> bb6
  using: _11@Mir(bb5[2])
bb6:
  _14 = _2
  using: _2@Entry
  _9 = src::zsetu::zsetu(move _10, move _14) -> bb7
  using: _10@Mir(bb5[3]), _14@Mir(bb6[0])
bb7:
  _15 = _1
  using: _1@Entry
  _19 = const {alloc60: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _18 = &mut (*_19)
  using: _19@Mir(bb7[1])
  _17 = move _18 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _18@Mir(bb7[2])
  _16 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _17) -> bb8
  using: _17@Mir(bb7[3])
bb8:
  _0 = src::zcmp::zcmp(move _15, move _16) -> bb9
  using: _15@Mir(bb7[0]), _16@Mir(bb7[4])
bb9:
  return
  using: _0@Phi(bb9)
@DefId(0:139 ~ lib[40c5]::src::zdiv::zdiv)
bb0:
  _5 = _1
  using: _1@Entry
  _9 = const {alloc63: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _8 = &mut (*_9)
  using: _9@Mir(bb0[1])
  _7 = move _8 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _8@Mir(bb0[2])
  _6 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _7) -> bb1
  using: _7@Mir(bb0[3])
bb1:
  _10 = _2
  using: _2@Entry
  _11 = _3
  using: _3@Entry
  _4 = src::zdivmod::zdivmod(move _5, move _6, move _10, move _11) -> bb2
  using: _5@Mir(bb0[0]), _6@Mir(bb0[4]), _10@Mir(bb1[0]), _11@Mir(bb1[1])
bb2:
  return
  using: _0@Entry
@DefId(0:161 ~ lib[40c5]::src::zdivmod::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:162 ~ lib[40c5]::src::zdivmod::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:163 ~ lib[40c5]::src::zdivmod::zdivmod)
bb0:
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _7 = const 0_u64
  using: 
  _8 = const 0_i32
  using: 
  _9 = const 0_i32
  using: 
  _11 = _3
  using: _3@Entry
  _10 = src::zdivmod::zsignum(move _11) -> bb1
  using: _11@Mir(bb0[5])
bb1:
  _13 = _4
  using: _4@Entry
  _12 = src::zdivmod::zsignum(move _13) -> bb2
  using: _13@Mir(bb1[0])
bb2:
  _14 = CheckedMul(_10, _12)
  using: _10@Mir(bb0[6]), _12@Mir(bb1[1])
  assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _10, move _12) -> bb3
  using: _14@Entry, _10@Entry, _12@Entry
bb3:
  _8 = move (_14.0: i32)
  using: _14@Mir(bb2[0])
  _15 = _8
  using: _8@Mir(bb3[0])
  switchInt(move _15) -> [0: bb4, otherwise: bb13]
  using: _15@Mir(bb3[1])
bb4:
  _17 = _3
  using: _3@Entry
  _16 = src::zdivmod::zzero(move _17) -> bb5
  using: _17@Mir(bb4[0])
bb5:
  switchInt(move _16) -> [0: bb11, otherwise: bb6]
  using: _16@Mir(bb4[1])
bb6:
  _19 = _4
  using: _4@Entry
  _18 = src::zdivmod::zzero(move _19) -> bb7
  using: _19@Mir(bb6[0])
bb7:
  switchInt(move _18) -> [0: bb10, otherwise: bb8]
  using: _18@Mir(bb6[1])
bb8:
  _20 = const 33_i32
  using: 
  _21 = const {alloc70: *mut i32}
  using: 
  (*_21) = move _20
  using: _21@Mir(bb8[1]), _20@Mir(bb8[0])
  _26 = const {alloc71: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _25 = &mut (*_26)
  using: _26@Mir(bb8[3])
  _24 = move _25 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _25@Mir(bb8[4])
  _23 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _24) -> bb9
  using: _24@Mir(bb8[5])
bb9:
  _27 = const 1_i32
  using: 
  _22 = src::zdivmod::longjmp(move _23, move _27)
  using: _23@Mir(bb8[6]), _27@Mir(bb9[0])
bb10:
  _28 = const 0_i32
  using: 
  ((*_1).0: i32) = move _28
  using: _1@Entry, _28@Mir(bb10[0])
  _29 = const 0_i32
  using: 
  ((*_2).0: i32) = move _29
  using: _2@Entry, _29@Mir(bb10[2])
  goto -> bb109
  using: 
bb11:
  _30 = const 33_i32
  using: 
  _31 = const {alloc70: *mut i32}
  using: 
  (*_31) = move _30
  using: _31@Mir(bb11[1]), _30@Mir(bb11[0])
  _36 = const {alloc71: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _35 = &mut (*_36)
  using: _36@Mir(bb11[3])
  _34 = move _35 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _35@Mir(bb11[4])
  _33 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _34) -> bb12
  using: _34@Mir(bb11[5])
bb12:
  _37 = const 1_i32
  using: 
  _32 = src::zdivmod::longjmp(move _33, move _37)
  using: _33@Mir(bb11[6]), _37@Mir(bb12[0])
bb13:
  _39 = _3
  using: _3@Entry
  _40 = _4
  using: _4@Entry
  _38 = src::zcmpmag::zcmpmag(move _39, move _40) -> bb14
  using: _39@Mir(bb13[0]), _40@Mir(bb13[1])
bb14:
  _9 = move _38
  using: _38@Mir(bb13[2])
  _42 = _9
  using: _9@Mir(bb14[0])
  _43 = const 0_i32
  using: 
  _41 = Le(move _42, move _43)
  using: _42@Mir(bb14[1]), _43@Mir(bb14[2])
  switchInt(move _41) -> [0: bb21, otherwise: bb15]
  using: _41@Mir(bb14[3])
bb15:
  _45 = _9
  using: _9@Mir(bb14[0])
  _46 = const 0_i32
  using: 
  _44 = Eq(move _45, move _46)
  using: _45@Mir(bb15[0]), _46@Mir(bb15[1])
  switchInt(move _44) -> [0: bb18, otherwise: bb16]
  using: _44@Mir(bb15[2])
bb16:
  _48 = _1
  using: _1@Entry
  _50 = _8
  using: _8@Mir(bb3[0])
  _49 = move _50 as i64 (IntToInt)
  using: _50@Mir(bb16[1])
  _47 = src::zseti::zseti(move _48, move _49) -> bb17
  using: _48@Mir(bb16[0]), _49@Mir(bb16[2])
bb17:
  _51 = const 0_i32
  using: 
  ((*_2).0: i32) = move _51
  using: _2@Entry, _51@Mir(bb17[0])
  goto -> bb109
  using: 
bb18:
  _53 = _2
  using: _2@Entry
  _54 = _3
  using: _3@Entry
  _52 = Ne(move _53, move _54)
  using: _53@Mir(bb18[0]), _54@Mir(bb18[1])
  switchInt(move _52) -> [0: bb20, otherwise: bb19]
  using: _52@Mir(bb18[2])
bb19:
  _56 = _2
  using: _2@Entry
  _57 = _3
  using: _3@Entry
  _55 = src::zset::zset(move _56, move _57) -> bb20
  using: _56@Mir(bb19[0]), _57@Mir(bb19[1])
bb20:
  _58 = const 1_i32
  using: 
  ((*_2).0: i32) = move _58
  using: _2@Phi(bb20), _58@Mir(bb20[0])
  _59 = const 0_i32
  using: 
  ((*_1).0: i32) = move _59
  using: _1@Entry, _59@Mir(bb20[2])
  goto -> bb109
  using: 
bb21:
  _61 = _3
  using: _3@Phi(bb20)
  _60 = src::zbits::zbits(move _61) -> bb22
  using: _61@Mir(bb21[0])
bb22:
  _5 = move _60
  using: _60@Mir(bb21[1])
  _63 = _4
  using: _4@Entry
  _62 = src::zbits::zbits(move _63) -> bb23
  using: _63@Mir(bb22[1])
bb23:
  _6 = move _62
  using: _62@Mir(bb22[2])
  _65 = _5
  using: _5@Mir(bb22[0])
  _66 = _6
  using: _6@Mir(bb23[0])
  _64 = core::num::<impl u64>::wrapping_sub(move _65, move _66) -> bb24
  using: _65@Mir(bb23[1]), _66@Mir(bb23[2])
bb24:
  _7 = move _64
  using: _64@Mir(bb23[3])
  _71 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _70 = &mut (*_71)
  using: _71@Mir(bb24[1])
  _69 = move _70 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _70@Mir(bb24[2])
  _68 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _69) -> bb25
  using: _69@Mir(bb24[3])
bb25:
  _72 = _4
  using: _4@Entry
  _73 = _7
  using: _7@Mir(bb24[0])
  _67 = src::zlsh::zlsh(move _68, move _72, move _73) -> bb26
  using: _68@Mir(bb24[4]), _72@Mir(bb25[0]), _73@Mir(bb25[1])
bb26:
  _74 = const 1_i32
  using: 
  _78 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _77 = &mut (*_78)
  using: _78@Mir(bb26[1])
  _76 = move _77 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _77@Mir(bb26[2])
  _75 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _76) -> bb27
  using: _76@Mir(bb26[3])
bb27:
  ((*_75).0: i32) = move _74
  using: _75@Mir(bb26[4]), _74@Mir(bb26[0])
  _84 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _83 = &mut (*_84)
  using: _84@Mir(bb27[1])
  _82 = move _83 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _83@Mir(bb27[2])
  _81 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _82) -> bb28
  using: _82@Mir(bb27[3])
bb28:
  _85 = _3
  using: _3@Phi(bb20)
  _80 = src::zcmpmag::zcmpmag(move _81, move _85) -> bb29
  using: _81@Mir(bb27[4]), _85@Mir(bb28[0])
bb29:
  _86 = const 0_i32
  using: 
  _79 = Gt(move _80, move _86)
  using: _80@Mir(bb28[1]), _86@Mir(bb29[0])
  switchInt(move _79) -> [0: bb35, otherwise: bb30]
  using: _79@Mir(bb29[1])
bb30:
  _91 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _90 = &mut (*_91)
  using: _91@Mir(bb30[0])
  _89 = move _90 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _90@Mir(bb30[1])
  _88 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _89) -> bb31
  using: _89@Mir(bb30[2])
bb31:
  _95 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _94 = &mut (*_95)
  using: _95@Mir(bb31[0])
  _93 = move _94 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _94@Mir(bb31[1])
  _92 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _93) -> bb32
  using: _93@Mir(bb31[2])
bb32:
  _96 = const 1_u64
  using: 
  _87 = src::zrsh::zrsh(move _88, move _92, move _96) -> bb33
  using: _88@Mir(bb30[3]), _92@Mir(bb31[3]), _96@Mir(bb32[0])
bb33:
  _98 = _7
  using: _7@Mir(bb24[0])
  _99 = const 1_u64
  using: 
  _97 = core::num::<impl u64>::wrapping_sub(move _98, move _99) -> bb34
  using: _98@Mir(bb33[0]), _99@Mir(bb33[1])
bb34:
  _7 = move _97
  using: _97@Mir(bb33[2])
  goto -> bb35
  using: 
bb35:
  _100 = const 0_i32
  using: 
  _104 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _103 = &mut (*_104)
  using: _104@Mir(bb35[1])
  _102 = move _103 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _103@Mir(bb35[2])
  _101 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _102) -> bb36
  using: _102@Mir(bb35[3])
bb36:
  ((*_101).0: i32) = move _100
  using: _101@Mir(bb35[4]), _100@Mir(bb35[0])
  _109 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _108 = &mut (*_109)
  using: _109@Mir(bb36[1])
  _107 = move _108 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _108@Mir(bb36[2])
  _106 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _107) -> bb37
  using: _107@Mir(bb36[3])
bb37:
  _110 = _3
  using: _3@Phi(bb20)
  _105 = src::zabs::zabs(move _106, move _110) -> bb38
  using: _106@Mir(bb36[4]), _110@Mir(bb37[0])
bb38:
  _112 = _7
  using: _7@Phi(bb35)
  _113 = const 32_u64
  using: 
  _111 = Lt(move _112, move _113)
  using: _112@Mir(bb38[0]), _113@Mir(bb38[1])
  switchInt(move _111) -> [0: bb60, otherwise: bb39]
  using: _111@Mir(bb38[2])
bb39:
  _119 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _118 = &mut (*_119)
  using: _119@Mir(bb39[0])
  _117 = move _118 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _118@Mir(bb39[1])
  _116 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _117) -> bb40
  using: _117@Mir(bb39[2])
bb40:
  _123 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _122 = &mut (*_123)
  using: _123@Mir(bb40[0])
  _121 = move _122 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _122@Mir(bb40[1])
  _120 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _121) -> bb41
  using: _121@Mir(bb40[2])
bb41:
  _115 = src::zcmpmag::zcmpmag(move _116, move _120) -> bb42
  using: _116@Mir(bb39[3]), _120@Mir(bb40[3])
bb42:
  _124 = const 0_i32
  using: 
  _114 = Le(move _115, move _124)
  using: _115@Mir(bb41[0]), _124@Mir(bb42[0])
  switchInt(move _114) -> [0: bb50, otherwise: bb43]
  using: _114@Mir(bb42[1])
bb43:
  _129 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _128 = &mut (*_129)
  using: _129@Mir(bb43[0])
  _127 = move _128 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _128@Mir(bb43[1])
  _126 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _127) -> bb44
  using: _127@Mir(bb43[2])
bb44:
  _133 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _132 = &mut (*_133)
  using: _133@Mir(bb44[0])
  _131 = move _132 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _132@Mir(bb44[1])
  _130 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _131) -> bb45
  using: _131@Mir(bb44[2])
bb45:
  _137 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _136 = &mut (*_137)
  using: _137@Mir(bb45[0])
  _135 = move _136 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _136@Mir(bb45[1])
  _134 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _135) -> bb46
  using: _135@Mir(bb45[2])
bb46:
  _125 = src::zsub::zsub(move _126, move _130, move _134) -> bb47
  using: _126@Mir(bb43[3]), _130@Mir(bb44[3]), _134@Mir(bb45[3])
bb47:
  _142 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _141 = &mut (*_142)
  using: _142@Mir(bb47[0])
  _140 = move _141 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _141@Mir(bb47[1])
  _139 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _140) -> bb48
  using: _140@Mir(bb47[2])
bb48:
  _146 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _145 = &mut (*_146)
  using: _146@Mir(bb48[0])
  _144 = move _145 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _145@Mir(bb48[1])
  _143 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _144) -> bb49
  using: _144@Mir(bb48[2])
bb49:
  _147 = _7
  using: _7@Phi(bb39)
  _148 = const 1_i32
  using: 
  _138 = src::zbset::zbset(move _139, move _143, move _147, move _148) -> bb50
  using: _139@Mir(bb47[3]), _143@Mir(bb48[3]), _147@Mir(bb49[0]), _148@Mir(bb49[1])
bb50:
  _149 = _7
  using: _7@Phi(bb50)
  _151 = _7
  using: _7@Phi(bb50)
  _150 = core::num::<impl u64>::wrapping_sub(move _151, const 1_u64) -> bb51
  using: _151@Mir(bb50[1])
bb51:
  _7 = move _150
  using: _150@Mir(bb50[2])
  _153 = _149
  using: _149@Mir(bb50[0])
  switchInt(move _153) -> [0: bb52, otherwise: bb53]
  using: _153@Mir(bb51[1])
bb52:
  _152 = const true
  using: 
  goto -> bb54
  using: 
bb53:
  _159 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _158 = &mut (*_159)
  using: _159@Mir(bb53[0])
  _157 = move _158 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _158@Mir(bb53[1])
  _156 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _157) -> bb55
  using: _157@Mir(bb53[2])
bb54:
  switchInt(move _152) -> [0: bb57, otherwise: bb104]
  using: _152@Phi(bb54)
bb55:
  _155 = src::zdivmod::zzero(move _156) -> bb56
  using: _156@Mir(bb53[3])
bb56:
  _154 = Ne(move _155, const 0_i32)
  using: _155@Mir(bb55[0])
  _152 = move _154
  using: _154@Mir(bb56[0])
  goto -> bb54
  using: 
bb57:
  _164 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _163 = &mut (*_164)
  using: _164@Mir(bb57[0])
  _162 = move _163 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _163@Mir(bb57[1])
  _161 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _162) -> bb58
  using: _162@Mir(bb57[2])
bb58:
  _168 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _167 = &mut (*_168)
  using: _168@Mir(bb58[0])
  _166 = move _167 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _167@Mir(bb58[1])
  _165 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _166) -> bb59
  using: _166@Mir(bb58[2])
bb59:
  _169 = const 1_u64
  using: 
  _160 = src::zrsh::zrsh(move _161, move _165, move _169) -> bb39
  using: _161@Mir(bb57[3]), _165@Mir(bb58[3]), _169@Mir(bb59[0])
bb60:
  _170 = const 0_u64
  using: 
  _170 = const 0_u64
  using: 
  goto -> bb61
  using: 
bb61:
  _172 = _170
  using: _170@Phi(bb61)
  _173 = const 32_u64
  using: 
  _171 = Lt(move _172, move _173)
  using: _172@Mir(bb61[0]), _173@Mir(bb61[1])
  switchInt(move _171) -> [0: bb68, otherwise: bb62]
  using: _171@Mir(bb61[2])
bb62:
  _178 = const {alloc75: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _180 = _170
  using: _170@Phi(bb61)
  _179 = move _180 as usize (IntToInt)
  using: _180@Mir(bb62[1])
  _181 = const 32_usize
  using: 
  _182 = Lt(_179, _181)
  using: _179@Mir(bb62[2]), _181@Mir(bb62[3])
  assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _179) -> bb63
  using: _182@Entry, _181@Entry, _179@Entry
bb63:
  _177 = &mut (*_178)[_179]
  using: _178@Mir(bb62[0]), _179@Mir(bb62[2])
  _176 = move _177 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _177@Mir(bb63[0])
  _175 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _176) -> bb64
  using: _176@Mir(bb63[1])
bb64:
  _186 = const {alloc72: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _185 = &mut (*_186)
  using: _186@Mir(bb64[0])
  _184 = move _185 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _185@Mir(bb64[1])
  _183 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _184) -> bb65
  using: _184@Mir(bb64[2])
bb65:
  _187 = _170
  using: _170@Phi(bb61)
  _174 = src::zrsh::zrsh(move _175, move _183, move _187) -> bb66
  using: _175@Mir(bb63[2]), _183@Mir(bb64[3]), _187@Mir(bb65[0])
bb66:
  _189 = _170
  using: _170@Phi(bb61)
  _188 = core::num::<impl u64>::wrapping_add(move _189, const 1_u64) -> bb67
  using: _189@Mir(bb66[0])
bb67:
  _170 = move _188
  using: _188@Mir(bb66[1])
  goto -> bb61
  using: 
bb68:
  _170 = const 0_u64
  using: 
  goto -> bb69
  using: 
bb69:
  _191 = _170
  using: _170@Phi(bb69)
  _192 = const 32_u64
  using: 
  _190 = Lt(move _191, move _192)
  using: _191@Mir(bb69[0]), _192@Mir(bb69[1])
  switchInt(move _190) -> [0: bb92, otherwise: bb70]
  using: _190@Mir(bb69[2])
bb70:
  _198 = const {alloc75: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _200 = _170
  using: _170@Phi(bb69)
  _199 = move _200 as usize (IntToInt)
  using: _200@Mir(bb70[1])
  _201 = const 32_usize
  using: 
  _202 = Lt(_199, _201)
  using: _199@Mir(bb70[2]), _201@Mir(bb70[3])
  assert(move _202, "index out of bounds: the length is {} but the index is {}", move _201, _199) -> bb71
  using: _202@Entry, _201@Entry, _199@Entry
bb71:
  _197 = &mut (*_198)[_199]
  using: _198@Mir(bb70[0]), _199@Mir(bb70[2])
  _196 = move _197 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _197@Mir(bb71[0])
  _195 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _196) -> bb72
  using: _196@Mir(bb71[1])
bb72:
  _206 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _205 = &mut (*_206)
  using: _206@Mir(bb72[0])
  _204 = move _205 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _205@Mir(bb72[1])
  _203 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _204) -> bb73
  using: _204@Mir(bb72[2])
bb73:
  _194 = src::zcmpmag::zcmpmag(move _195, move _203) -> bb74
  using: _195@Mir(bb71[2]), _203@Mir(bb72[3])
bb74:
  _207 = const 0_i32
  using: 
  _193 = Le(move _194, move _207)
  using: _194@Mir(bb73[0]), _207@Mir(bb74[0])
  switchInt(move _193) -> [0: bb83, otherwise: bb75]
  using: _193@Mir(bb74[1])
bb75:
  _212 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _211 = &mut (*_212)
  using: _212@Mir(bb75[0])
  _210 = move _211 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _211@Mir(bb75[1])
  _209 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _210) -> bb76
  using: _210@Mir(bb75[2])
bb76:
  _216 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _215 = &mut (*_216)
  using: _216@Mir(bb76[0])
  _214 = move _215 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _215@Mir(bb76[1])
  _213 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _214) -> bb77
  using: _214@Mir(bb76[2])
bb77:
  _220 = const {alloc75: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _222 = _170
  using: _170@Phi(bb69)
  _221 = move _222 as usize (IntToInt)
  using: _222@Mir(bb77[1])
  _223 = const 32_usize
  using: 
  _224 = Lt(_221, _223)
  using: _221@Mir(bb77[2]), _223@Mir(bb77[3])
  assert(move _224, "index out of bounds: the length is {} but the index is {}", move _223, _221) -> bb78
  using: _224@Entry, _223@Entry, _221@Entry
bb78:
  _219 = &mut (*_220)[_221]
  using: _220@Mir(bb77[0]), _221@Mir(bb77[2])
  _218 = move _219 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _219@Mir(bb78[0])
  _217 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _218) -> bb79
  using: _218@Mir(bb78[1])
bb79:
  _208 = src::zsub::zsub(move _209, move _213, move _217) -> bb80
  using: _209@Mir(bb75[3]), _213@Mir(bb76[3]), _217@Mir(bb78[2])
bb80:
  _229 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _228 = &mut (*_229)
  using: _229@Mir(bb80[0])
  _227 = move _228 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _228@Mir(bb80[1])
  _226 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _227) -> bb81
  using: _227@Mir(bb80[2])
bb81:
  _233 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _232 = &mut (*_233)
  using: _233@Mir(bb81[0])
  _231 = move _232 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _232@Mir(bb81[1])
  _230 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _231) -> bb82
  using: _231@Mir(bb81[2])
bb82:
  _234 = _7
  using: _7@Phi(bb69)
  _235 = const 1_i32
  using: 
  _225 = src::zbset::zbset(move _226, move _230, move _234, move _235) -> bb83
  using: _226@Mir(bb80[3]), _230@Mir(bb81[3]), _234@Mir(bb82[0]), _235@Mir(bb82[1])
bb83:
  _236 = _7
  using: _7@Phi(bb83)
  _238 = _7
  using: _7@Phi(bb83)
  _237 = core::num::<impl u64>::wrapping_sub(move _238, const 1_u64) -> bb84
  using: _238@Mir(bb83[1])
bb84:
  _7 = move _237
  using: _237@Mir(bb83[2])
  _240 = _236
  using: _236@Mir(bb83[0])
  switchInt(move _240) -> [0: bb85, otherwise: bb86]
  using: _240@Mir(bb84[1])
bb85:
  _239 = const true
  using: 
  goto -> bb87
  using: 
bb86:
  _246 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _245 = &mut (*_246)
  using: _246@Mir(bb86[0])
  _244 = move _245 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _245@Mir(bb86[1])
  _243 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _244) -> bb88
  using: _244@Mir(bb86[2])
bb87:
  switchInt(move _239) -> [0: bb90, otherwise: bb104]
  using: _239@Phi(bb87)
bb88:
  _242 = src::zdivmod::zzero(move _243) -> bb89
  using: _243@Mir(bb86[3])
bb89:
  _241 = Ne(move _242, const 0_i32)
  using: _242@Mir(bb88[0])
  _239 = move _241
  using: _241@Mir(bb89[0])
  goto -> bb87
  using: 
bb90:
  _248 = _170
  using: _170@Phi(bb83)
  _247 = core::num::<impl u64>::wrapping_add(move _248, const 1_u64) -> bb91
  using: _248@Mir(bb90[0])
bb91:
  _170 = move _247
  using: _247@Mir(bb90[1])
  goto -> bb69
  using: 
bb92:
  _252 = _7
  using: _7@Phi(bb83)
  _253 = const 31_u64
  using: 
  _251 = Lt(move _252, move _253)
  using: _252@Mir(bb92[0]), _253@Mir(bb92[1])
  switchInt(move _251) -> [0: bb94, otherwise: bb93]
  using: _251@Mir(bb92[2])
bb93:
  _250 = _7
  using: _7@Phi(bb83)
  goto -> bb95
  using: 
bb94:
  _250 = const 31_u64
  using: 
  goto -> bb95
  using: 
bb95:
  _254 = const 1_u64
  using: 
  _249 = core::num::<impl u64>::wrapping_add(move _250, move _254) -> bb96
  using: _250@Phi(bb95), _254@Mir(bb95[0])
bb96:
  _170 = move _249
  using: _249@Mir(bb95[1])
  goto -> bb97
  using: 
bb97:
  _255 = _170
  using: _170@Phi(bb97)
  _257 = _170
  using: _170@Phi(bb97)
  _256 = core::num::<impl u64>::wrapping_sub(move _257, const 1_u64) -> bb98
  using: _257@Mir(bb97[1])
bb98:
  _170 = move _256
  using: _256@Mir(bb97[2])
  _260 = _255
  using: _255@Mir(bb97[0])
  _259 = Ne(move _260, const 0_u64)
  using: _260@Mir(bb98[1])
  _258 = Not(move _259)
  using: _259@Mir(bb98[2])
  switchInt(move _258) -> [0: bb99, otherwise: bb68]
  using: _258@Mir(bb98[3])
bb99:
  _265 = const {alloc75: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _267 = _170
  using: _170@Mir(bb98[0])
  _266 = move _267 as usize (IntToInt)
  using: _267@Mir(bb99[1])
  _268 = const 32_usize
  using: 
  _269 = Lt(_266, _268)
  using: _266@Mir(bb99[2]), _268@Mir(bb99[3])
  assert(move _269, "index out of bounds: the length is {} but the index is {}", move _268, _266) -> bb100
  using: _269@Entry, _268@Entry, _266@Entry
bb100:
  _264 = &mut (*_265)[_266]
  using: _265@Mir(bb99[0]), _266@Mir(bb99[2])
  _263 = move _264 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _264@Mir(bb100[0])
  _262 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _263) -> bb101
  using: _263@Mir(bb100[1])
bb101:
  _273 = const {alloc75: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _275 = _170
  using: _170@Mir(bb98[0])
  _274 = move _275 as usize (IntToInt)
  using: _275@Mir(bb101[1])
  _276 = const 32_usize
  using: 
  _277 = Lt(_274, _276)
  using: _274@Mir(bb101[2]), _276@Mir(bb101[3])
  assert(move _277, "index out of bounds: the length is {} but the index is {}", move _276, _274) -> bb102
  using: _277@Entry, _276@Entry, _274@Entry
bb102:
  _272 = &mut (*_273)[_274]
  using: _273@Mir(bb101[0]), _274@Mir(bb101[2])
  _271 = move _272 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _272@Mir(bb102[0])
  _270 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _271) -> bb103
  using: _271@Mir(bb102[1])
bb103:
  _278 = const 32_u64
  using: 
  _261 = src::zrsh::zrsh(move _262, move _270, move _278) -> bb97
  using: _262@Mir(bb100[2]), _270@Mir(bb102[2]), _278@Mir(bb103[0])
bb104:
  _280 = _1
  using: _1@Entry
  _284 = const {alloc73: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _283 = &mut (*_284)
  using: _284@Mir(bb104[1])
  _282 = move _283 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _283@Mir(bb104[2])
  _281 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _282) -> bb105
  using: _282@Mir(bb104[3])
bb105:
  _279 = src::zswap::zswap(move _280, move _281) -> bb106
  using: _280@Mir(bb104[0]), _281@Mir(bb104[4])
bb106:
  _286 = _2
  using: _2@Phi(bb20)
  _290 = const {alloc74: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _289 = &mut (*_290)
  using: _290@Mir(bb106[1])
  _288 = move _289 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _289@Mir(bb106[2])
  _287 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _288) -> bb107
  using: _288@Mir(bb106[3])
bb107:
  _285 = src::zswap::zswap(move _286, move _287) -> bb108
  using: _286@Mir(bb106[0]), _287@Mir(bb106[4])
bb108:
  _291 = _8
  using: _8@Mir(bb3[0])
  ((*_1).0: i32) = move _291
  using: _1@Entry, _291@Mir(bb108[0])
  goto -> bb109
  using: 
bb109:
  return
  using: _0@Entry
rewrite call src::zdivmod::longjmp @ workspace/libzahl/src/zdivmod.rs:62:17: 62:72 (#0) by default
rewrite call src::zdivmod::longjmp @ workspace/libzahl/src/zdivmod.rs:69:13: 69:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zdivmod.rs:91:18: 91:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zdivmod.rs:100:38: 100:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zdivmod.rs:125:23: 125:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zdivmod.rs:144:19: 144:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zdivmod.rs:167:27: 167:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zdivmod.rs:171:23: 171:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zdivmod.rs:178:18: 178:65 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zdivmod.rs:181:23: 181:38 (#0) by default
@DefId(0:173 ~ lib[40c5]::src::zerror::zerror)
bb0:
  _4 = const {alloc82: *mut i32}
  using: 
  _3 = (*_4)
  using: _4@Mir(bb0[0])
  _5 = const 0_i32
  using: 
  _2 = Ge(move _3, move _5)
  using: _3@Mir(bb0[1]), _5@Mir(bb0[2])
  switchInt(move _2) -> [0: bb8, otherwise: bb1]
  using: _2@Mir(bb0[3])
bb1:
  _8 = _1
  using: _1@Entry
  _7 = std::ptr::mut_ptr::<impl *mut *const i8>::is_null(move _8) -> bb2
  using: _8@Mir(bb1[0])
bb2:
  _6 = Not(move _7)
  using: _7@Mir(bb1[1])
  switchInt(move _6) -> [0: bb5, otherwise: bb3]
  using: _6@Mir(bb2[0])
bb3:
  _11 = const {alloc82: *mut i32}
  using: 
  _10 = (*_11)
  using: _11@Mir(bb3[0])
  _9 = src::zerror::strerror(move _10) -> bb4
  using: _10@Mir(bb3[1])
bb4:
  (*_1) = move _9 as *const i8 (Pointer(MutToConstPointer))
  using: _1@Entry, _9@Mir(bb3[2])
  goto -> bb6
  using: 
bb5:
  _14 = _1
  using: _1@Entry
  _13 = move _14 as usize (PointerExposeAddress)
  using: _14@Mir(bb5[0])
  _12 = Eq(move _13, const 0_usize)
  using: _13@Mir(bb5[1])
  assume(move _12)
  using: _12@Mir(bb5[2])
  goto -> bb6
  using: 
bb6:
  _16 = const {alloc82: *mut i32}
  using: 
  _15 = (*_16)
  using: _16@Mir(bb6[0])
  _17 = src::zerror::__errno_location() -> bb7
  using: 
bb7:
  (*_17) = move _15
  using: _17@Mir(bb6[2]), _15@Mir(bb6[1])
  _0 = const _
  using: 
  goto -> bb13
  using: 
bb8:
  _20 = _1
  using: _1@Phi(bb6)
  _19 = std::ptr::mut_ptr::<impl *mut *const i8>::is_null(move _20) -> bb9
  using: _20@Mir(bb8[0])
bb9:
  _18 = Not(move _19)
  using: _19@Mir(bb8[1])
  switchInt(move _18) -> [0: bb11, otherwise: bb10]
  using: _18@Mir(bb9[0])
bb10:
  _21 = src::zerror::abort()
  using: 
bb11:
  _24 = _1
  using: _1@Phi(bb6)
  _23 = move _24 as usize (PointerExposeAddress)
  using: _24@Mir(bb11[0])
  _22 = Eq(move _23, const 0_usize)
  using: _23@Mir(bb11[1])
  assume(move _22)
  using: _22@Mir(bb11[2])
  _27 = const {alloc82: *mut i32}
  using: 
  _26 = (*_27)
  using: _27@Mir(bb11[4])
  _28 = Eq(_26, const i32::MIN)
  using: _26@Mir(bb11[5])
  assert(!move _28, "attempt to negate `{}`, which would overflow", _26) -> bb12
  using: _28@Entry, _26@Entry
bb12:
  _25 = Neg(move _26)
  using: _26@Mir(bb11[5])
  _0 = move _25 as u32 (IntToInt)
  using: _25@Mir(bb12[0])
  goto -> bb13
  using: 
bb13:
  return
  using: _0@Phi(bb13)
rewrite call src::zerror::strerror @ workspace/libzahl/src/zerror.rs:14:21: 14:44 (#0) by default
rewrite call src::zerror::__errno_location @ workspace/libzahl/src/zerror.rs:16:10: 16:28 (#0) by default
rewrite call src::zerror::abort @ workspace/libzahl/src/zerror.rs:20:13: 20:20 (#0) by default
@DefId(0:189 ~ lib[40c5]::src::zfree::zfree)
bb0:
  _2 = const 0_u64
  using: 
  _3 = const 0_u64
  using: 
  _4 = const 0_u64
  using: 
  _5 = const {0x0 as *mut *mut u32}
  using: 
  _7 = ((*_1).3: *mut u32)
  using: _1@Entry
  _6 = std::ptr::mut_ptr::<impl *mut u32>::is_null(move _7) -> bb1
  using: _7@Mir(bb0[4])
bb1:
  switchInt(move _6) -> [0: bb3, otherwise: bb2]
  using: _6@Mir(bb0[5])
bb2:
  _10 = ((*_1).3: *mut u32)
  using: _1@Entry
  _9 = move _10 as usize (PointerExposeAddress)
  using: _10@Mir(bb2[0])
  _8 = Eq(move _9, const 0_usize)
  using: _9@Mir(bb2[1])
  assume(move _8)
  using: _8@Mir(bb2[2])
  goto -> bb38
  using: 
bb3:
  _11 = ((*_1).2: u64)
  using: _1@Entry
  _3 = move _11
  using: _11@Mir(bb3[0])
  goto -> bb4
  using: 
bb4:
  _12 = _3
  using: _3@Phi(bb4)
  switchInt(move _12) -> [0: bb8, otherwise: bb5]
  using: _12@Mir(bb4[0])
bb5:
  _14 = _2
  using: _2@Phi(bb4)
  _15 = const 1_u64
  using: 
  _13 = core::num::<impl u64>::wrapping_add(move _14, move _15) -> bb6
  using: _14@Mir(bb5[0]), _15@Mir(bb5[1])
bb6:
  _2 = move _13
  using: _13@Mir(bb5[2])
  _16 = const 1_i32
  using: 
  _17 = CheckedShr(_3, _16)
  using: _3@Phi(bb4), _16@Mir(bb6[1])
  assert(!move (_17.1: bool), "attempt to shift right by `{}`, which would overflow", move _16) -> bb7
  using: _17@Entry, _3@Entry, _16@Entry
bb7:
  _3 = move (_17.0: u64)
  using: _17@Mir(bb6[2])
  goto -> bb4
  using: 
bb8:
  _19 = const {alloc86: *mut [u64; 64]}
  using: 
  _21 = _2
  using: _2@Phi(bb4)
  _20 = move _21 as usize (IntToInt)
  using: _21@Mir(bb8[1])
  _22 = const 64_usize
  using: 
  _23 = Lt(_20, _22)
  using: _20@Mir(bb8[2]), _22@Mir(bb8[3])
  assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _20) -> bb9
  using: _23@Entry, _22@Entry, _20@Entry
bb9:
  _18 = (*_19)[_20]
  using: _19@Mir(bb8[0]), _20@Mir(bb8[2])
  _26 = const {alloc86: *mut [u64; 64]}
  using: 
  _28 = _2
  using: _2@Phi(bb4)
  _27 = move _28 as usize (IntToInt)
  using: _28@Mir(bb9[2])
  _29 = const 64_usize
  using: 
  _30 = Lt(_27, _29)
  using: _27@Mir(bb9[3]), _29@Mir(bb9[4])
  assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _27) -> bb10
  using: _30@Entry, _29@Entry, _27@Entry
bb10:
  _25 = (*_26)[_27]
  using: _26@Mir(bb9[1]), _27@Mir(bb9[3])
  _24 = core::num::<impl u64>::wrapping_add(move _25, const 1_u64) -> bb11
  using: _25@Mir(bb10[0])
bb11:
  _31 = const {alloc86: *mut [u64; 64]}
  using: 
  _33 = _2
  using: _2@Phi(bb4)
  _32 = move _33 as usize (IntToInt)
  using: _33@Mir(bb11[1])
  _34 = const 64_usize
  using: 
  _35 = Lt(_32, _34)
  using: _32@Mir(bb11[2]), _34@Mir(bb11[3])
  assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _32) -> bb12
  using: _35@Entry, _34@Entry, _32@Entry
bb12:
  (*_31)[_32] = move _24
  using: _31@Mir(bb11[0]), _32@Mir(bb11[2]), _24@Mir(bb10[1])
  _36 = _18
  using: _18@Mir(bb9[0])
  _4 = move _36
  using: _36@Mir(bb12[1])
  _38 = _4
  using: _4@Mir(bb12[2])
  _40 = const {alloc87: *mut [u64; 64]}
  using: 
  _42 = _2
  using: _2@Phi(bb4)
  _41 = move _42 as usize (IntToInt)
  using: _42@Mir(bb12[5])
  _43 = const 64_usize
  using: 
  _44 = Lt(_41, _43)
  using: _41@Mir(bb12[6]), _43@Mir(bb12[7])
  assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _41) -> bb13
  using: _44@Entry, _43@Entry, _41@Entry
bb13:
  _39 = (*_40)[_41]
  using: _40@Mir(bb12[4]), _41@Mir(bb12[6])
  _37 = Eq(move _38, move _39)
  using: _38@Mir(bb12[3]), _39@Mir(bb13[0])
  switchInt(move _37) -> [0: bb35, otherwise: bb14]
  using: _37@Mir(bb13[1])
bb14:
  _46 = _4
  using: _4@Mir(bb12[2])
  switchInt(move _46) -> [0: bb18, otherwise: bb15]
  using: _46@Mir(bb14[0])
bb15:
  _48 = _4
  using: _4@Mir(bb12[2])
  _49 = const 3_u64
  using: 
  _47 = core::num::<impl u64>::wrapping_mul(move _48, move _49) -> bb16
  using: _48@Mir(bb15[0]), _49@Mir(bb15[1])
bb16:
  _50 = const 1_i32
  using: 
  _51 = CheckedShr(_47, _50)
  using: _47@Mir(bb15[2]), _50@Mir(bb16[0])
  assert(!move (_51.1: bool), "attempt to shift right by `{}`, which would overflow", move _50) -> bb17
  using: _51@Entry, _47@Entry, _50@Entry
bb17:
  _45 = move (_51.0: u64)
  using: _51@Mir(bb16[1])
  goto -> bb19
  using: 
bb18:
  _45 = const 128_u64
  using: 
  goto -> bb19
  using: 
bb19:
  _3 = move _45
  using: _45@Phi(bb19)
  _55 = const {alloc88: *mut [*mut *mut u32; 64]}
  using: 
  _57 = _2
  using: _2@Phi(bb4)
  _56 = move _57 as usize (IntToInt)
  using: _57@Mir(bb19[2])
  _58 = const 64_usize
  using: 
  _59 = Lt(_56, _58)
  using: _56@Mir(bb19[3]), _58@Mir(bb19[4])
  assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _56) -> bb20
  using: _59@Entry, _58@Entry, _56@Entry
bb20:
  _54 = (*_55)[_56]
  using: _55@Mir(bb19[1]), _56@Mir(bb19[3])
  _53 = move _54 as *mut libc::c_void (PtrToPtr)
  using: _54@Mir(bb20[0])
  _61 = _3
  using: _3@Mir(bb19[0])
  _63 = std::mem::size_of::<*mut u32>() -> bb21
  using: 
bb21:
  _62 = move _63 as u64 (IntToInt)
  using: _63@Mir(bb20[3])
  _60 = core::num::<impl u64>::wrapping_mul(move _61, move _62) -> bb22
  using: _61@Mir(bb20[2]), _62@Mir(bb21[0])
bb22:
  _52 = src::zfree::realloc(move _53, move _60) -> bb23
  using: _53@Mir(bb20[1]), _60@Mir(bb21[1])
bb23:
  _5 = move _52 as *mut *mut u32 (PtrToPtr)
  using: _52@Mir(bb22[0])
  _65 = _5
  using: _5@Mir(bb23[0])
  _64 = std::ptr::mut_ptr::<impl *mut *mut u32>::is_null(move _65) -> bb24
  using: _65@Mir(bb23[1])
bb24:
  switchInt(move _64) -> [0: bb32, otherwise: bb25]
  using: _64@Mir(bb23[2])
bb25:
  _68 = _5
  using: _5@Mir(bb23[0])
  _67 = move _68 as usize (PointerExposeAddress)
  using: _68@Mir(bb25[0])
  _66 = Eq(move _67, const 0_usize)
  using: _67@Mir(bb25[1])
  assume(move _66)
  using: _66@Mir(bb25[2])
  _71 = ((*_1).3: *mut u32)
  using: _1@Entry
  _70 = move _71 as *mut libc::c_void (PtrToPtr)
  using: _71@Mir(bb25[4])
  _69 = src::zfree::free(move _70) -> bb26
  using: _70@Mir(bb25[5])
bb26:
  _75 = const {alloc88: *mut [*mut *mut u32; 64]}
  using: 
  _77 = _2
  using: _2@Phi(bb4)
  _76 = move _77 as usize (IntToInt)
  using: _77@Mir(bb26[1])
  _78 = const 64_usize
  using: 
  _79 = Lt(_76, _78)
  using: _76@Mir(bb26[2]), _78@Mir(bb26[3])
  assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _76) -> bb27
  using: _79@Entry, _78@Entry, _76@Entry
bb27:
  _74 = (*_75)[_76]
  using: _75@Mir(bb26[0]), _76@Mir(bb26[2])
  _73 = move _74 as *mut libc::c_void (PtrToPtr)
  using: _74@Mir(bb27[0])
  _72 = src::zfree::free(move _73) -> bb28
  using: _73@Mir(bb27[1])
bb28:
  _80 = const 0_i32
  using: 
  _81 = const {alloc86: *mut [u64; 64]}
  using: 
  _83 = _2
  using: _2@Phi(bb4)
  _82 = move _83 as usize (IntToInt)
  using: _83@Mir(bb28[2])
  _84 = const 64_usize
  using: 
  _85 = Lt(_82, _84)
  using: _82@Mir(bb28[3]), _84@Mir(bb28[4])
  assert(move _85, "index out of bounds: the length is {} but the index is {}", move _84, _82) -> bb29
  using: _85@Entry, _84@Entry, _82@Entry
bb29:
  (*_81)[_82] = move _80 as u64 (IntToInt)
  using: _81@Mir(bb28[1]), _82@Mir(bb28[3]), _80@Mir(bb28[0])
  _86 = const {alloc88: *mut [*mut *mut u32; 64]}
  using: 
  _88 = _2
  using: _2@Phi(bb4)
  _87 = move _88 as usize (IntToInt)
  using: _88@Mir(bb29[2])
  _89 = const 64_usize
  using: 
  _90 = Lt(_87, _89)
  using: _87@Mir(bb29[3]), _89@Mir(bb29[4])
  assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _87) -> bb30
  using: _90@Entry, _89@Entry, _87@Entry
bb30:
  (*_86)[_87] = const 0_usize as *mut *mut u32 (PointerFromExposedAddress)
  using: _86@Mir(bb29[1]), _87@Mir(bb29[3])
  _91 = const 0_i32
  using: 
  _92 = const {alloc87: *mut [u64; 64]}
  using: 
  _94 = _2
  using: _2@Phi(bb4)
  _93 = move _94 as usize (IntToInt)
  using: _94@Mir(bb30[3])
  _95 = const 64_usize
  using: 
  _96 = Lt(_93, _95)
  using: _93@Mir(bb30[4]), _95@Mir(bb30[5])
  assert(move _96, "index out of bounds: the length is {} but the index is {}", move _95, _93) -> bb31
  using: _96@Entry, _95@Entry, _93@Entry
bb31:
  (*_92)[_93] = move _91 as u64 (IntToInt)
  using: _92@Mir(bb30[2]), _93@Mir(bb30[4]), _91@Mir(bb30[1])
  goto -> bb38
  using: 
bb32:
  _97 = _5
  using: _5@Mir(bb23[0])
  _98 = const {alloc88: *mut [*mut *mut u32; 64]}
  using: 
  _100 = _2
  using: _2@Phi(bb4)
  _99 = move _100 as usize (IntToInt)
  using: _100@Mir(bb32[2])
  _101 = const 64_usize
  using: 
  _102 = Lt(_99, _101)
  using: _99@Mir(bb32[3]), _101@Mir(bb32[4])
  assert(move _102, "index out of bounds: the length is {} but the index is {}", move _101, _99) -> bb33
  using: _102@Entry, _101@Entry, _99@Entry
bb33:
  (*_98)[_99] = move _97
  using: _98@Mir(bb32[1]), _99@Mir(bb32[3]), _97@Mir(bb32[0])
  _103 = _3
  using: _3@Mir(bb19[0])
  _104 = const {alloc87: *mut [u64; 64]}
  using: 
  _106 = _2
  using: _2@Phi(bb4)
  _105 = move _106 as usize (IntToInt)
  using: _106@Mir(bb33[3])
  _107 = const 64_usize
  using: 
  _108 = Lt(_105, _107)
  using: _105@Mir(bb33[4]), _107@Mir(bb33[5])
  assert(move _108, "index out of bounds: the length is {} but the index is {}", move _107, _105) -> bb34
  using: _108@Entry, _107@Entry, _105@Entry
bb34:
  (*_104)[_105] = move _103
  using: _104@Mir(bb33[2]), _105@Mir(bb33[4]), _103@Mir(bb33[1])
  goto -> bb35
  using: 
bb35:
  _109 = ((*_1).3: *mut u32)
  using: _1@Entry
  _112 = const {alloc88: *mut [*mut *mut u32; 64]}
  using: 
  _114 = _2
  using: _2@Phi(bb35)
  _113 = move _114 as usize (IntToInt)
  using: _114@Mir(bb35[2])
  _115 = const 64_usize
  using: 
  _116 = Lt(_113, _115)
  using: _113@Mir(bb35[3]), _115@Mir(bb35[4])
  assert(move _116, "index out of bounds: the length is {} but the index is {}", move _115, _113) -> bb36
  using: _116@Entry, _115@Entry, _113@Entry
bb36:
  _111 = (*_112)[_113]
  using: _112@Mir(bb35[1]), _113@Mir(bb35[3])
  _118 = _4
  using: _4@Phi(bb35)
  _117 = move _118 as isize (IntToInt)
  using: _118@Mir(bb36[1])
  _110 = std::ptr::mut_ptr::<impl *mut *mut u32>::offset(move _111, move _117) -> bb37
  using: _111@Mir(bb36[0]), _117@Mir(bb36[2])
bb37:
  (*_110) = move _109
  using: _110@Mir(bb36[3]), _109@Mir(bb35[0])
  goto -> bb38
  using: 
bb38:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zfree.rs:27:34: 27:81 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zfree.rs:32:63: 32:78 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zfree.rs:36:15: 36:62 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zfree.rs:42:28: 42:69 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zfree.rs:42:15: 42:87 (#0) by default
rewrite call src::zfree::realloc @ workspace/libzahl/src/zfree.rs:40:15: 43:10 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zfree.rs:55:33: 55:51 (#0) by default
@DefId(0:201 ~ lib[40c5]::src::zgcd::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:202 ~ lib[40c5]::src::zgcd::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:203 ~ lib[40c5]::src::zgcd::zgcd)
bb0:
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _7 = const 0_u64
  using: 
  _8 = const 0_u32
  using: 
  _9 = const 0_u32
  using: 
  _10 = const 0_i32
  using: 
  _12 = _2
  using: _2@Entry
  _13 = _3
  using: _3@Entry
  _11 = src::zcmp::zcmp(move _12, move _13) -> bb1
  using: _12@Mir(bb0[6]), _13@Mir(bb0[7])
bb1:
  switchInt(move _11) -> [0: bb2, otherwise: bb4]
  using: _11@Mir(bb0[8])
bb2:
  _15 = _1
  using: _1@Entry
  _16 = _2
  using: _2@Entry
  _14 = Ne(move _15, move _16)
  using: _15@Mir(bb2[0]), _16@Mir(bb2[1])
  switchInt(move _14) -> [0: bb108, otherwise: bb3]
  using: _14@Mir(bb2[2])
bb3:
  _18 = _1
  using: _1@Entry
  _19 = _2
  using: _2@Entry
  _17 = src::zset::zset(move _18, move _19) -> bb108
  using: _18@Mir(bb3[0]), _19@Mir(bb3[1])
bb4:
  _21 = _2
  using: _2@Entry
  _20 = src::zgcd::zzero(move _21) -> bb5
  using: _21@Mir(bb4[0])
bb5:
  switchInt(move _20) -> [0: bb8, otherwise: bb6]
  using: _20@Mir(bb4[1])
bb6:
  _23 = _1
  using: _1@Entry
  _24 = _3
  using: _3@Entry
  _22 = Ne(move _23, move _24)
  using: _23@Mir(bb6[0]), _24@Mir(bb6[1])
  switchInt(move _22) -> [0: bb108, otherwise: bb7]
  using: _22@Mir(bb6[2])
bb7:
  _26 = _1
  using: _1@Entry
  _27 = _3
  using: _3@Entry
  _25 = src::zset::zset(move _26, move _27) -> bb108
  using: _26@Mir(bb7[0]), _27@Mir(bb7[1])
bb8:
  _29 = _3
  using: _3@Entry
  _28 = src::zgcd::zzero(move _29) -> bb9
  using: _29@Mir(bb8[0])
bb9:
  switchInt(move _28) -> [0: bb12, otherwise: bb10]
  using: _28@Mir(bb8[1])
bb10:
  _31 = _1
  using: _1@Entry
  _32 = _2
  using: _2@Entry
  _30 = Ne(move _31, move _32)
  using: _31@Mir(bb10[0]), _32@Mir(bb10[1])
  switchInt(move _30) -> [0: bb108, otherwise: bb11]
  using: _30@Mir(bb10[2])
bb11:
  _34 = _1
  using: _1@Entry
  _35 = _2
  using: _2@Entry
  _33 = src::zset::zset(move _34, move _35) -> bb108
  using: _34@Mir(bb11[0]), _35@Mir(bb11[1])
bb12:
  _40 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _39 = &mut (*_40)
  using: _40@Mir(bb12[0])
  _38 = move _39 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _39@Mir(bb12[1])
  _37 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _38) -> bb13
  using: _38@Mir(bb12[2])
bb13:
  _41 = _2
  using: _2@Entry
  _36 = src::zabs::zabs(move _37, move _41) -> bb14
  using: _37@Mir(bb12[3]), _41@Mir(bb13[0])
bb14:
  _46 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _45 = &mut (*_46)
  using: _46@Mir(bb14[0])
  _44 = move _45 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _45@Mir(bb14[1])
  _43 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _44) -> bb15
  using: _44@Mir(bb14[2])
bb15:
  _47 = _3
  using: _3@Entry
  _42 = src::zabs::zabs(move _43, move _47) -> bb16
  using: _43@Mir(bb14[3]), _47@Mir(bb15[0])
bb16:
  _51 = _2
  using: _2@Entry
  _50 = src::zgcd::zsignum(move _51) -> bb20
  using: _51@Mir(bb16[0])
bb17:
  _48 = const false
  using: 
  goto -> bb19
  using: 
bb18:
  _55 = _3
  using: _3@Entry
  _54 = src::zgcd::zsignum(move _55) -> bb21
  using: _55@Mir(bb18[0])
bb19:
  _10 = move _48 as i32 (IntToInt)
  using: _48@Phi(bb19)
  _63 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _62 = &mut (*_63)
  using: _63@Mir(bb19[1])
  _61 = move _62 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _62@Mir(bb19[2])
  _60 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _61) -> bb22
  using: _61@Mir(bb19[3])
bb20:
  _52 = const 0_i32
  using: 
  _49 = Lt(move _50, move _52)
  using: _50@Mir(bb16[1]), _52@Mir(bb20[0])
  switchInt(move _49) -> [0: bb17, otherwise: bb18]
  using: _49@Mir(bb20[1])
bb21:
  _56 = const 0_i32
  using: 
  _53 = Lt(move _54, move _56)
  using: _54@Mir(bb18[1]), _56@Mir(bb21[0])
  _48 = move _53
  using: _53@Mir(bb21[1])
  goto -> bb19
  using: 
bb22:
  _59 = ((*_60).1: u64)
  using: _60@Mir(bb19[4])
  _68 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _67 = &mut (*_68)
  using: _68@Mir(bb22[1])
  _66 = move _67 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _67@Mir(bb22[2])
  _65 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _66) -> bb23
  using: _66@Mir(bb22[3])
bb23:
  _64 = ((*_65).1: u64)
  using: _65@Mir(bb22[4])
  _58 = Lt(move _59, move _64)
  using: _59@Mir(bb22[0]), _64@Mir(bb23[0])
  switchInt(move _58) -> [0: bb26, otherwise: bb24]
  using: _58@Mir(bb23[1])
bb24:
  _72 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _71 = &mut (*_72)
  using: _72@Mir(bb24[0])
  _70 = move _71 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _71@Mir(bb24[1])
  _69 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _70) -> bb25
  using: _70@Mir(bb24[2])
bb25:
  _57 = ((*_69).1: u64)
  using: _69@Mir(bb24[3])
  goto -> bb28
  using: 
bb26:
  _76 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _75 = &mut (*_76)
  using: _76@Mir(bb26[0])
  _74 = move _75 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _75@Mir(bb26[1])
  _73 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _74) -> bb27
  using: _74@Mir(bb26[2])
bb27:
  _57 = ((*_73).1: u64)
  using: _73@Mir(bb26[3])
  goto -> bb28
  using: 
bb28:
  _7 = move _57
  using: _57@Phi(bb28)
  goto -> bb29
  using: 
bb29:
  _79 = _6
  using: _6@Phi(bb29)
  _80 = _7
  using: _7@Mir(bb28[0])
  _78 = Lt(move _79, move _80)
  using: _79@Mir(bb29[0]), _80@Mir(bb29[1])
  _77 = Not(move _78)
  using: _78@Mir(bb29[2])
  switchInt(move _77) -> [0: bb31, otherwise: bb30]
  using: _77@Mir(bb29[3])
bb30:
  _4 = const 11459959175219260272_u64
  using: 
  goto -> bb44
  using: 
bb31:
  _87 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _86 = &mut (*_87)
  using: _87@Mir(bb31[0])
  _85 = move _86 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _86@Mir(bb31[1])
  _84 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _85) -> bb32
  using: _85@Mir(bb31[2])
bb32:
  _83 = ((*_84).3: *mut u32)
  using: _84@Mir(bb31[3])
  _89 = _6
  using: _6@Phi(bb29)
  _88 = move _89 as isize (IntToInt)
  using: _89@Mir(bb32[1])
  _82 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _83, move _88) -> bb33
  using: _83@Mir(bb32[0]), _88@Mir(bb32[2])
bb33:
  _81 = (*_82)
  using: _82@Mir(bb32[3])
  _96 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _95 = &mut (*_96)
  using: _96@Mir(bb33[1])
  _94 = move _95 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _95@Mir(bb33[2])
  _93 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _94) -> bb34
  using: _94@Mir(bb33[3])
bb34:
  _92 = ((*_93).3: *mut u32)
  using: _93@Mir(bb33[4])
  _98 = _6
  using: _6@Phi(bb29)
  _97 = move _98 as isize (IntToInt)
  using: _98@Mir(bb34[1])
  _91 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _92, move _97) -> bb35
  using: _92@Mir(bb34[0]), _97@Mir(bb34[2])
bb35:
  _90 = (*_91)
  using: _91@Mir(bb34[3])
  _8 = BitOr(move _81, move _90)
  using: _81@Mir(bb33[0]), _90@Mir(bb35[0])
  _9 = const 1_u32
  using: 
  goto -> bb36
  using: 
bb36:
  _99 = _9
  using: _9@Phi(bb36)
  switchInt(move _99) -> [0: bb42, otherwise: bb37]
  using: _99@Mir(bb36[0])
bb37:
  _101 = _8
  using: _8@Phi(bb36)
  _102 = _9
  using: _9@Phi(bb36)
  _100 = BitAnd(move _101, move _102)
  using: _101@Mir(bb37[0]), _102@Mir(bb37[1])
  switchInt(move _100) -> [0: bb39, otherwise: bb38]
  using: _100@Mir(bb37[2])
bb38:
  _4 = const 4217392055787675399_u64
  using: 
  goto -> bb44
  using: 
bb39:
  _103 = const 1_i32
  using: 
  _104 = CheckedShl(_9, _103)
  using: _9@Phi(bb36), _103@Mir(bb39[0])
  assert(!move (_104.1: bool), "attempt to shift left by `{}`, which would overflow", move _103) -> bb40
  using: _104@Entry, _9@Entry, _103@Entry
bb40:
  _9 = move (_104.0: u32)
  using: _104@Mir(bb39[1])
  _106 = _5
  using: _5@Phi(bb36)
  _105 = core::num::<impl u64>::wrapping_add(move _106, const 1_u64) -> bb41
  using: _106@Mir(bb40[1])
bb41:
  _5 = move _105
  using: _105@Mir(bb40[2])
  goto -> bb36
  using: 
bb42:
  _108 = _6
  using: _6@Phi(bb29)
  _107 = core::num::<impl u64>::wrapping_add(move _108, const 1_u64) -> bb43
  using: _108@Mir(bb42[0])
bb43:
  _6 = move _107
  using: _107@Mir(bb42[1])
  goto -> bb29
  using: 
bb44:
  switchInt(_4) -> [4217392055787675399: bb46, otherwise: bb45]
  using: _4@Phi(bb44)
bb45:
  _120 = _6
  using: _6@Phi(bb44)
  _125 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _124 = &mut (*_125)
  using: _125@Mir(bb45[1])
  _123 = move _124 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _124@Mir(bb45[2])
  _122 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _123) -> bb50
  using: _123@Mir(bb45[3])
bb46:
  _113 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _112 = &mut (*_113)
  using: _113@Mir(bb46[0])
  _111 = move _112 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _112@Mir(bb46[1])
  _110 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _111) -> bb47
  using: _111@Mir(bb46[2])
bb47:
  _117 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _116 = &mut (*_117)
  using: _117@Mir(bb47[0])
  _115 = move _116 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _116@Mir(bb47[1])
  _114 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _115) -> bb48
  using: _115@Mir(bb47[2])
bb48:
  _118 = _5
  using: _5@Phi(bb66)
  _109 = src::zrsh::zrsh(move _110, move _114, move _118) -> bb49
  using: _110@Mir(bb46[3]), _114@Mir(bb47[3]), _118@Mir(bb48[0])
bb49:
  _174 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _173 = &mut (*_174)
  using: _174@Mir(bb49[0])
  _172 = move _173 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _173@Mir(bb49[1])
  _171 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _172) -> bb76
  using: _172@Mir(bb49[2])
bb50:
  _121 = ((*_122).1: u64)
  using: _122@Mir(bb45[4])
  _119 = Lt(move _120, move _121)
  using: _120@Mir(bb45[0]), _121@Mir(bb50[0])
  switchInt(move _119) -> [0: bb62, otherwise: bb51]
  using: _119@Mir(bb50[1])
bb51:
  _9 = const 1_u32
  using: 
  goto -> bb52
  using: 
bb52:
  _126 = _9
  using: _9@Phi(bb52)
  switchInt(move _126) -> [0: bb60, otherwise: bb53]
  using: _126@Mir(bb52[0])
bb53:
  _134 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _133 = &mut (*_134)
  using: _134@Mir(bb53[0])
  _132 = move _133 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _133@Mir(bb53[1])
  _131 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _132) -> bb54
  using: _132@Mir(bb53[2])
bb54:
  _130 = ((*_131).3: *mut u32)
  using: _131@Mir(bb53[3])
  _136 = _6
  using: _6@Phi(bb52)
  _135 = move _136 as isize (IntToInt)
  using: _136@Mir(bb54[1])
  _129 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _130, move _135) -> bb55
  using: _130@Mir(bb54[0]), _135@Mir(bb54[2])
bb55:
  _128 = (*_129)
  using: _129@Mir(bb54[3])
  _137 = _9
  using: _9@Phi(bb52)
  _127 = BitAnd(move _128, move _137)
  using: _128@Mir(bb55[0]), _137@Mir(bb55[1])
  switchInt(move _127) -> [0: bb57, otherwise: bb56]
  using: _127@Mir(bb55[2])
bb56:
  _4 = const 4217392055787675399_u64
  using: 
  goto -> bb44
  using: 
bb57:
  _138 = const 1_i32
  using: 
  _139 = CheckedShl(_9, _138)
  using: _9@Phi(bb52), _138@Mir(bb57[0])
  assert(!move (_139.1: bool), "attempt to shift left by `{}`, which would overflow", move _138) -> bb58
  using: _139@Entry, _9@Entry, _138@Entry
bb58:
  _9 = move (_139.0: u32)
  using: _139@Mir(bb57[1])
  _141 = _5
  using: _5@Phi(bb52)
  _140 = core::num::<impl u64>::wrapping_add(move _141, const 1_u64) -> bb59
  using: _141@Mir(bb58[1])
bb59:
  _5 = move _140
  using: _140@Mir(bb58[2])
  goto -> bb52
  using: 
bb60:
  _143 = _6
  using: _6@Phi(bb52)
  _142 = core::num::<impl u64>::wrapping_add(move _143, const 1_u64) -> bb61
  using: _143@Mir(bb60[0])
bb61:
  _6 = move _142
  using: _142@Mir(bb60[1])
  _4 = const 11459959175219260272_u64
  using: 
  goto -> bb44
  using: 
bb62:
  _146 = _6
  using: _6@Phi(bb62)
  _151 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _150 = &mut (*_151)
  using: _151@Mir(bb62[1])
  _149 = move _150 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _150@Mir(bb62[2])
  _148 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _149) -> bb63
  using: _149@Mir(bb62[3])
bb63:
  _147 = ((*_148).1: u64)
  using: _148@Mir(bb62[4])
  _145 = Lt(move _146, move _147)
  using: _146@Mir(bb62[0]), _147@Mir(bb63[0])
  _144 = Not(move _145)
  using: _145@Mir(bb63[1])
  switchInt(move _144) -> [0: bb65, otherwise: bb64]
  using: _144@Mir(bb63[2])
bb64:
  _4 = const 4217392055787675399_u64
  using: 
  goto -> bb44
  using: 
bb65:
  _9 = const 1_u32
  using: 
  goto -> bb66
  using: 
bb66:
  _152 = _9
  using: _9@Phi(bb66)
  switchInt(move _152) -> [0: bb74, otherwise: bb67]
  using: _152@Mir(bb66[0])
bb67:
  _160 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _159 = &mut (*_160)
  using: _160@Mir(bb67[0])
  _158 = move _159 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _159@Mir(bb67[1])
  _157 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _158) -> bb68
  using: _158@Mir(bb67[2])
bb68:
  _156 = ((*_157).3: *mut u32)
  using: _157@Mir(bb67[3])
  _162 = _6
  using: _6@Phi(bb66)
  _161 = move _162 as isize (IntToInt)
  using: _162@Mir(bb68[1])
  _155 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _156, move _161) -> bb69
  using: _156@Mir(bb68[0]), _161@Mir(bb68[2])
bb69:
  _154 = (*_155)
  using: _155@Mir(bb68[3])
  _163 = _9
  using: _9@Phi(bb66)
  _153 = BitAnd(move _154, move _163)
  using: _154@Mir(bb69[0]), _163@Mir(bb69[1])
  switchInt(move _153) -> [0: bb71, otherwise: bb70]
  using: _153@Mir(bb69[2])
bb70:
  _4 = const 4217392055787675399_u64
  using: 
  goto -> bb44
  using: 
bb71:
  _164 = const 1_i32
  using: 
  _165 = CheckedShl(_9, _164)
  using: _9@Phi(bb66), _164@Mir(bb71[0])
  assert(!move (_165.1: bool), "attempt to shift left by `{}`, which would overflow", move _164) -> bb72
  using: _165@Entry, _9@Entry, _164@Entry
bb72:
  _9 = move (_165.0: u32)
  using: _165@Mir(bb71[1])
  _167 = _5
  using: _5@Phi(bb66)
  _166 = core::num::<impl u64>::wrapping_add(move _167, const 1_u64) -> bb73
  using: _167@Mir(bb72[1])
bb73:
  _5 = move _166
  using: _166@Mir(bb72[2])
  goto -> bb66
  using: 
bb74:
  _169 = _6
  using: _6@Phi(bb66)
  _168 = core::num::<impl u64>::wrapping_add(move _169, const 1_u64) -> bb75
  using: _169@Mir(bb74[0])
bb75:
  _6 = move _168
  using: _168@Mir(bb74[1])
  goto -> bb62
  using: 
bb76:
  _178 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _177 = &mut (*_178)
  using: _178@Mir(bb76[0])
  _176 = move _177 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _177@Mir(bb76[1])
  _175 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _176) -> bb77
  using: _176@Mir(bb76[2])
bb77:
  _179 = _5
  using: _5@Phi(bb66)
  _170 = src::zrsh::zrsh(move _171, move _175, move _179) -> bb78
  using: _171@Mir(bb49[3]), _175@Mir(bb76[3]), _179@Mir(bb77[0])
bb78:
  _184 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _183 = &mut (*_184)
  using: _184@Mir(bb78[0])
  _182 = move _183 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _183@Mir(bb78[1])
  _181 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _182) -> bb79
  using: _182@Mir(bb78[2])
bb79:
  _188 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _187 = &mut (*_188)
  using: _188@Mir(bb79[0])
  _186 = move _187 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _187@Mir(bb79[1])
  _185 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _186) -> bb80
  using: _186@Mir(bb79[2])
bb80:
  _193 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _192 = &mut (*_193)
  using: _193@Mir(bb80[0])
  _191 = move _192 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _192@Mir(bb80[1])
  _190 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _191) -> bb81
  using: _191@Mir(bb80[2])
bb81:
  _189 = src::zlsb::zlsb(move _190) -> bb82
  using: _190@Mir(bb80[3])
bb82:
  _180 = src::zrsh::zrsh(move _181, move _185, move _189) -> bb83
  using: _181@Mir(bb78[3]), _185@Mir(bb79[3]), _189@Mir(bb81[0])
bb83:
  _198 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _197 = &mut (*_198)
  using: _198@Mir(bb83[0])
  _196 = move _197 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _197@Mir(bb83[1])
  _195 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _196) -> bb84
  using: _196@Mir(bb83[2])
bb84:
  _202 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _201 = &mut (*_202)
  using: _202@Mir(bb84[0])
  _200 = move _201 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _201@Mir(bb84[1])
  _199 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _200) -> bb85
  using: _200@Mir(bb84[2])
bb85:
  _207 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _206 = &mut (*_207)
  using: _207@Mir(bb85[0])
  _205 = move _206 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _206@Mir(bb85[1])
  _204 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _205) -> bb86
  using: _205@Mir(bb85[2])
bb86:
  _203 = src::zlsb::zlsb(move _204) -> bb87
  using: _204@Mir(bb85[3])
bb87:
  _194 = src::zrsh::zrsh(move _195, move _199, move _203) -> bb88
  using: _195@Mir(bb83[3]), _199@Mir(bb84[3]), _203@Mir(bb86[0])
bb88:
  _213 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _212 = &mut (*_213)
  using: _213@Mir(bb88[0])
  _211 = move _212 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _212@Mir(bb88[1])
  _210 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _211) -> bb89
  using: _211@Mir(bb88[2])
bb89:
  _217 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _216 = &mut (*_217)
  using: _217@Mir(bb89[0])
  _215 = move _216 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _216@Mir(bb89[1])
  _214 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _215) -> bb90
  using: _215@Mir(bb89[2])
bb90:
  _209 = src::zcmpmag::zcmpmag(move _210, move _214) -> bb91
  using: _210@Mir(bb88[3]), _214@Mir(bb89[3])
bb91:
  _218 = const 0_i32
  using: 
  _208 = Gt(move _209, move _218)
  using: _209@Mir(bb90[0]), _218@Mir(bb91[0])
  switchInt(move _208) -> [0: bb95, otherwise: bb92]
  using: _208@Mir(bb91[1])
bb92:
  _223 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _222 = &mut (*_223)
  using: _223@Mir(bb92[0])
  _221 = move _222 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _222@Mir(bb92[1])
  _220 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _221) -> bb93
  using: _221@Mir(bb92[2])
bb93:
  _227 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _226 = &mut (*_227)
  using: _227@Mir(bb93[0])
  _225 = move _226 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _226@Mir(bb93[1])
  _224 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _225) -> bb94
  using: _225@Mir(bb93[2])
bb94:
  _219 = src::zswap::zswap(move _220, move _224) -> bb95
  using: _220@Mir(bb92[3]), _224@Mir(bb93[3])
bb95:
  _232 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _231 = &mut (*_232)
  using: _232@Mir(bb95[0])
  _230 = move _231 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _231@Mir(bb95[1])
  _229 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _230) -> bb96
  using: _230@Mir(bb95[2])
bb96:
  _236 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _235 = &mut (*_236)
  using: _236@Mir(bb96[0])
  _234 = move _235 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _235@Mir(bb96[1])
  _233 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _234) -> bb97
  using: _234@Mir(bb96[2])
bb97:
  _240 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _239 = &mut (*_240)
  using: _240@Mir(bb97[0])
  _238 = move _239 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _239@Mir(bb97[1])
  _237 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _238) -> bb98
  using: _238@Mir(bb97[2])
bb98:
  _228 = src::zsub::zsub_unsigned(move _229, move _233, move _237) -> bb99
  using: _229@Mir(bb95[3]), _233@Mir(bb96[3]), _237@Mir(bb97[3])
bb99:
  _247 = const {alloc96: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _246 = &mut (*_247)
  using: _247@Mir(bb99[0])
  _245 = move _246 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _246@Mir(bb99[1])
  _244 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _245) -> bb100
  using: _245@Mir(bb99[2])
bb100:
  _243 = src::zgcd::zzero(move _244) -> bb101
  using: _244@Mir(bb99[3])
bb101:
  _242 = Eq(move _243, const 0_i32)
  using: _243@Mir(bb100[0])
  _241 = Not(move _242)
  using: _242@Mir(bb101[0])
  switchInt(move _241) -> [0: bb83, otherwise: bb102]
  using: _241@Mir(bb101[1])
bb102:
  _249 = _1
  using: _1@Entry
  _253 = const {alloc95: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _252 = &mut (*_253)
  using: _253@Mir(bb102[1])
  _251 = move _252 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _252@Mir(bb102[2])
  _250 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _251) -> bb103
  using: _251@Mir(bb102[3])
bb103:
  _254 = _5
  using: _5@Phi(bb66)
  _248 = src::zlsh::zlsh(move _249, move _250, move _254) -> bb104
  using: _249@Mir(bb102[0]), _250@Mir(bb102[4]), _254@Mir(bb103[0])
bb104:
  _256 = _10
  using: _10@Mir(bb19[0])
  switchInt(move _256) -> [0: bb106, otherwise: bb105]
  using: _256@Mir(bb104[0])
bb105:
  _255 = const -1_i32
  using: 
  goto -> bb107
  using: 
bb106:
  _255 = const 1_i32
  using: 
  goto -> bb107
  using: 
bb107:
  ((*_1).0: i32) = move _255
  using: _1@Entry, _255@Phi(bb107)
  goto -> bb108
  using: 
bb108:
  return
  using: _0@Entry
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zgcd.rs:78:57: 78:75 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zgcd.rs:79:58: 79:76 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:87:29: 87:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:89:15: 89:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zgcd.rs:105:71: 105:89 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:112:41: 112:56 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:114:27: 114:42 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zgcd.rs:125:34: 125:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:131:45: 131:60 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zgcd.rs:133:31: 133:46 (#0) by default
@DefId(0:212 ~ lib[40c5]::src::zload::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:213 ~ lib[40c5]::src::zload::zload)
bb0:
  _4 = _2
  using: _2@Entry
  _3 = move _4 as *const i8 (PtrToPtr)
  using: _4@Mir(bb0[0])
  _7 = _3
  using: _3@Mir(bb0[1])
  _6 = move _7 as *const i32 (PtrToPtr)
  using: _7@Mir(bb0[2])
  _5 = (*_6)
  using: _6@Mir(bb0[3])
  ((*_1).0: i32) = move _5
  using: _1@Entry, _5@Mir(bb0[4])
  _9 = _3
  using: _3@Mir(bb0[1])
  _12 = std::mem::size_of::<i32>() -> bb1
  using: 
bb1:
  _11 = move _12 as u64 (IntToInt)
  using: _12@Mir(bb0[7])
  _10 = move _11 as isize (IntToInt)
  using: _11@Mir(bb1[0])
  _8 = std::ptr::const_ptr::<impl *const i8>::offset(move _9, move _10) -> bb2
  using: _9@Mir(bb0[6]), _10@Mir(bb1[1])
bb2:
  _3 = move _8
  using: _8@Mir(bb1[2])
  _15 = _3
  using: _3@Mir(bb2[0])
  _14 = move _15 as *const u64 (PtrToPtr)
  using: _15@Mir(bb2[1])
  _13 = (*_14)
  using: _14@Mir(bb2[2])
  ((*_1).1: u64) = move _13
  using: _1@Entry, _13@Mir(bb2[3])
  _17 = _3
  using: _3@Mir(bb2[0])
  _20 = std::mem::size_of::<u64>() -> bb3
  using: 
bb3:
  _19 = move _20 as u64 (IntToInt)
  using: _20@Mir(bb2[6])
  _18 = move _19 as isize (IntToInt)
  using: _19@Mir(bb3[0])
  _16 = std::ptr::const_ptr::<impl *const i8>::offset(move _17, move _18) -> bb4
  using: _17@Mir(bb2[5]), _18@Mir(bb3[1])
bb4:
  _3 = move _16
  using: _16@Mir(bb3[2])
  _21 = ((*_1).0: i32)
  using: _1@Entry
  switchInt(move _21) -> [0: bb10, otherwise: bb5]
  using: _21@Mir(bb4[1])
bb5:
  _23 = ((*_1).2: u64)
  using: _1@Entry
  _24 = ((*_1).1: u64)
  using: _1@Entry
  _22 = Lt(move _23, move _24)
  using: _23@Mir(bb5[0]), _24@Mir(bb5[1])
  switchInt(move _22) -> [0: bb7, otherwise: bb6]
  using: _22@Mir(bb5[2])
bb6:
  _26 = _1
  using: _1@Entry
  _27 = ((*_1).1: u64)
  using: _1@Entry
  _25 = src::allocator::libzahl_realloc(move _26, move _27) -> bb7
  using: _26@Mir(bb6[0]), _27@Mir(bb6[1])
bb7:
  _30 = ((*_1).3: *mut u32)
  using: _1@Phi(bb7)
  _29 = move _30 as *mut libc::c_void (PtrToPtr)
  using: _30@Mir(bb7[0])
  _32 = _3
  using: _3@Mir(bb4[0])
  _31 = move _32 as *const libc::c_void (PtrToPtr)
  using: _32@Mir(bb7[2])
  _34 = ((*_1).1: u64)
  using: _1@Phi(bb7)
  _36 = std::mem::size_of::<u32>() -> bb8
  using: 
bb8:
  _35 = move _36 as u64 (IntToInt)
  using: _36@Mir(bb7[5])
  _33 = core::num::<impl u64>::wrapping_mul(move _34, move _35) -> bb9
  using: _34@Mir(bb7[4]), _35@Mir(bb8[0])
bb9:
  _28 = src::zload::memcpy(move _29, move _31, move _33) -> bb10
  using: _29@Mir(bb7[1]), _31@Mir(bb7[3]), _33@Mir(bb8[1])
bb10:
  _39 = std::mem::size_of::<i32>() -> bb11
  using: 
bb11:
  _38 = move _39 as u64 (IntToInt)
  using: _39@Mir(bb10[0])
  _41 = std::mem::size_of::<u64>() -> bb12
  using: 
bb12:
  _40 = move _41 as u64 (IntToInt)
  using: _41@Mir(bb11[1])
  _37 = core::num::<impl u64>::wrapping_add(move _38, move _40) -> bb13
  using: _38@Mir(bb11[0]), _40@Mir(bb12[0])
bb13:
  _44 = _1
  using: _1@Phi(bb10)
  _43 = src::zload::zzero(move _44) -> bb14
  using: _44@Mir(bb13[0])
bb14:
  switchInt(move _43) -> [0: bb16, otherwise: bb15]
  using: _43@Mir(bb13[1])
bb15:
  _42 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb16:
  _45 = ((*_1).1: u64)
  using: _1@Phi(bb10)
  _47 = std::mem::size_of::<u32>() -> bb17
  using: 
bb17:
  _46 = move _47 as u64 (IntToInt)
  using: _47@Mir(bb16[1])
  _42 = core::num::<impl u64>::wrapping_mul(move _45, move _46) -> bb18
  using: _45@Mir(bb16[0]), _46@Mir(bb17[0])
bb18:
  _0 = core::num::<impl u64>::wrapping_add(move _37, move _42) -> bb19
  using: _37@Mir(bb12[1]), _42@Phi(bb18)
bb19:
  return
  using: _0@Mir(bb18[0])
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:28:22: 28:58 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zload.rs:28:15: 28:85 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:30:22: 30:53 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zload.rs:30:15: 30:80 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:39:31: 39:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zload.rs:39:18: 39:85 (#0) by default
rewrite call src::zload::memcpy @ workspace/libzahl/src/zload.rs:35:9: 40:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:42:13: 42:49 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:43:23: 43:54 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zload.rs:43:10: 43:72 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zload.rs:49:35: 49:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zload.rs:49:22: 49:89 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zload.rs:44:10: 51:10 (#0) by default
@DefId(0:220 ~ lib[40c5]::src::zlsb::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:221 ~ lib[40c5]::src::zlsb::zlsb)
bb0:
  _2 = const 0_u64
  using: 
  _3 = const 0_u32
  using: 
  _5 = _1
  using: _1@Entry
  _4 = src::zlsb::zzero(move _5) -> bb1
  using: _5@Mir(bb0[2])
bb1:
  switchInt(move _4) -> [0: bb3, otherwise: bb2]
  using: _4@Mir(bb0[3])
bb2:
  _0 = const u64::MAX
  using: 
  goto -> bb14
  using: 
bb3:
  _8 = ((*_1).3: *mut u32)
  using: _1@Entry
  _10 = _2
  using: _2@Phi(bb3)
  _9 = move _10 as isize (IntToInt)
  using: _10@Mir(bb3[1])
  _7 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _8, move _9) -> bb4
  using: _8@Mir(bb3[0]), _9@Mir(bb3[2])
bb4:
  _6 = (*_7)
  using: _7@Mir(bb3[3])
  _3 = move _6
  using: _6@Mir(bb4[0])
  _11 = _3
  using: _3@Mir(bb4[1])
  switchInt(move _11) -> [0: bb12, otherwise: bb5]
  using: _11@Mir(bb4[2])
bb5:
  _12 = _3
  using: _3@Mir(bb4[1])
  _3 = Not(move _12)
  using: _12@Mir(bb5[0])
  _14 = _2
  using: _2@Phi(bb3)
  _15 = const 32_u64
  using: 
  _13 = core::num::<impl u64>::wrapping_mul(move _14, move _15) -> bb6
  using: _14@Mir(bb5[2]), _15@Mir(bb5[3])
bb6:
  _2 = move _13
  using: _13@Mir(bb5[4])
  goto -> bb7
  using: 
bb7:
  _17 = _3
  using: _3@Phi(bb7)
  _18 = const 1_u32
  using: 
  _16 = BitAnd(move _17, move _18)
  using: _17@Mir(bb7[0]), _18@Mir(bb7[1])
  switchInt(move _16) -> [0: bb11, otherwise: bb8]
  using: _16@Mir(bb7[2])
bb8:
  _19 = const 1_i32
  using: 
  _20 = CheckedShr(_3, _19)
  using: _3@Phi(bb7), _19@Mir(bb8[0])
  assert(!move (_20.1: bool), "attempt to shift right by `{}`, which would overflow", move _19) -> bb9
  using: _20@Entry, _3@Entry, _19@Entry
bb9:
  _3 = move (_20.0: u32)
  using: _20@Mir(bb8[1])
  _22 = _2
  using: _2@Phi(bb7)
  _21 = core::num::<impl u64>::wrapping_add(move _22, const 1_u64) -> bb10
  using: _22@Mir(bb9[1])
bb10:
  _2 = move _21
  using: _21@Mir(bb9[2])
  goto -> bb7
  using: 
bb11:
  _0 = _2
  using: _2@Phi(bb7)
  goto -> bb14
  using: 
bb12:
  _24 = _2
  using: _2@Mir(bb6[0])
  _23 = core::num::<impl u64>::wrapping_add(move _24, const 1_u64) -> bb13
  using: _24@Mir(bb12[0])
bb13:
  _2 = move _23
  using: _23@Mir(bb12[1])
  goto -> bb3
  using: 
bb14:
  return
  using: _0@Phi(bb14)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsb.rs:21:27: 21:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zlsb.rs:24:38: 24:86 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsb.rs:28:23: 28:38 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsb.rs:32:15: 32:30 (#0) by default
@DefId(0:232 ~ lib[40c5]::src::zlsh::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:233 ~ lib[40c5]::src::zlsh::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:234 ~ lib[40c5]::src::zlsh::zlsh)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _8 = const 0_u32
  using: 
  _9 = const 0_u32
  using: 
  _7 = [move _8, move _9]
  using: _8@Mir(bb0[3]), _9@Mir(bb0[4])
  _11 = _2
  using: _2@Entry
  _10 = src::zlsh::zzero(move _11) -> bb1
  using: _11@Mir(bb0[6])
bb1:
  switchInt(move _10) -> [0: bb3, otherwise: bb2]
  using: _10@Mir(bb0[7])
bb2:
  _12 = const 0_i32
  using: 
  ((*_1).0: i32) = move _12
  using: _1@Entry, _12@Mir(bb2[0])
  goto -> bb49
  using: 
bb3:
  _13 = _3
  using: _3@Entry
  switchInt(move _13) -> [0: bb4, otherwise: bb5]
  using: _13@Mir(bb3[0])
bb4:
  _15 = _1
  using: _1@Entry
  _16 = _2
  using: _2@Entry
  _14 = Ne(move _15, move _16)
  using: _15@Mir(bb4[0]), _16@Mir(bb4[1])
  switchInt(move _14) -> [0: bb49, otherwise: bb6]
  using: _14@Mir(bb4[2])
bb5:
  _20 = _3
  using: _3@Entry
  _21 = const 5_i32
  using: 
  _22 = CheckedShr(_20, _21)
  using: _20@Mir(bb5[0]), _21@Mir(bb5[1])
  assert(!move (_22.1: bool), "attempt to shift right by `{}`, which would overflow", move _21) -> bb7
  using: _22@Entry, _20@Entry, _21@Entry
bb6:
  _18 = _1
  using: _1@Entry
  _19 = _2
  using: _2@Entry
  _17 = src::zset::zset(move _18, move _19) -> bb49
  using: _18@Mir(bb6[0]), _19@Mir(bb6[1])
bb7:
  _5 = move (_22.0: u64)
  using: _22@Mir(bb5[2])
  _23 = _3
  using: _3@Entry
  _24 = const 31_u64
  using: 
  _3 = BitAnd(move _23, move _24)
  using: _23@Mir(bb7[1]), _24@Mir(bb7[2])
  _26 = const 32_u64
  using: 
  _27 = _3
  using: _3@Mir(bb7[3])
  _25 = core::num::<impl u64>::wrapping_sub(move _26, move _27) -> bb8
  using: _26@Mir(bb7[4]), _27@Mir(bb7[5])
bb8:
  _6 = move _25
  using: _25@Mir(bb7[6])
  _29 = ((*_1).2: u64)
  using: _1@Entry
  _31 = ((*_2).1: u64)
  using: _2@Entry
  _32 = _5
  using: _5@Mir(bb7[0])
  _30 = core::num::<impl u64>::wrapping_add(move _31, move _32) -> bb9
  using: _31@Mir(bb8[2]), _32@Mir(bb8[3])
bb9:
  _28 = Lt(move _29, move _30)
  using: _29@Mir(bb8[1]), _30@Mir(bb8[4])
  switchInt(move _28) -> [0: bb12, otherwise: bb10]
  using: _28@Mir(bb9[0])
bb10:
  _34 = _1
  using: _1@Entry
  _36 = ((*_2).1: u64)
  using: _2@Entry
  _37 = _5
  using: _5@Mir(bb7[0])
  _35 = core::num::<impl u64>::wrapping_add(move _36, move _37) -> bb11
  using: _36@Mir(bb10[1]), _37@Mir(bb10[2])
bb11:
  _33 = src::allocator::libzahl_realloc(move _34, move _35) -> bb12
  using: _34@Mir(bb10[0]), _35@Mir(bb10[3])
bb12:
  _39 = _1
  using: _1@Phi(bb12)
  _40 = _2
  using: _2@Phi(bb12)
  _38 = Eq(move _39, move _40)
  using: _39@Mir(bb12[0]), _40@Mir(bb12[1])
  switchInt(move _38) -> [0: bb17, otherwise: bb13]
  using: _38@Mir(bb12[2])
bb13:
  _44 = ((*_1).3: *mut u32)
  using: _1@Phi(bb12)
  _46 = _5
  using: _5@Phi(bb12)
  _45 = move _46 as isize (IntToInt)
  using: _46@Mir(bb13[1])
  _43 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _44, move _45) -> bb14
  using: _44@Mir(bb13[0]), _45@Mir(bb13[2])
bb14:
  _42 = move _43 as *mut libc::c_void (PtrToPtr)
  using: _43@Mir(bb13[3])
  _48 = ((*_2).3: *mut u32)
  using: _2@Phi(bb12)
  _47 = move _48 as *const libc::c_void (PtrToPtr)
  using: _48@Mir(bb14[1])
  _50 = ((*_2).1: u64)
  using: _2@Phi(bb12)
  _52 = std::mem::size_of::<u32>() -> bb15
  using: 
bb15:
  _51 = move _52 as u64 (IntToInt)
  using: _52@Mir(bb14[4])
  _49 = core::num::<impl u64>::wrapping_mul(move _50, move _51) -> bb16
  using: _50@Mir(bb14[3]), _51@Mir(bb15[0])
bb16:
  _41 = src::zlsh::memmove(move _42, move _47, move _49) -> bb21
  using: _42@Mir(bb14[0]), _47@Mir(bb14[2]), _49@Mir(bb15[1])
bb17:
  _56 = ((*_1).3: *mut u32)
  using: _1@Phi(bb12)
  _58 = _5
  using: _5@Phi(bb12)
  _57 = move _58 as isize (IntToInt)
  using: _58@Mir(bb17[1])
  _55 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _56, move _57) -> bb18
  using: _56@Mir(bb17[0]), _57@Mir(bb17[2])
bb18:
  _54 = move _55 as *mut libc::c_void (PtrToPtr)
  using: _55@Mir(bb17[3])
  _60 = ((*_2).3: *mut u32)
  using: _2@Phi(bb12)
  _59 = move _60 as *const libc::c_void (PtrToPtr)
  using: _60@Mir(bb18[1])
  _62 = ((*_2).1: u64)
  using: _2@Phi(bb12)
  _64 = std::mem::size_of::<u32>() -> bb19
  using: 
bb19:
  _63 = move _64 as u64 (IntToInt)
  using: _64@Mir(bb18[4])
  _61 = core::num::<impl u64>::wrapping_mul(move _62, move _63) -> bb20
  using: _62@Mir(bb18[3]), _63@Mir(bb19[0])
bb20:
  _53 = src::zlsh::memcpy(move _54, move _59, move _61) -> bb21
  using: _54@Mir(bb18[0]), _59@Mir(bb18[2]), _61@Mir(bb19[1])
bb21:
  _67 = ((*_1).3: *mut u32)
  using: _1@Phi(bb21)
  _66 = move _67 as *mut libc::c_void (PtrToPtr)
  using: _67@Mir(bb21[0])
  _68 = const 0_i32
  using: 
  _70 = _5
  using: _5@Phi(bb21)
  _72 = std::mem::size_of::<u32>() -> bb22
  using: 
bb22:
  _71 = move _72 as u64 (IntToInt)
  using: _72@Mir(bb21[4])
  _69 = core::num::<impl u64>::wrapping_mul(move _70, move _71) -> bb23
  using: _70@Mir(bb21[3]), _71@Mir(bb22[0])
bb23:
  _65 = src::zlsh::memset(move _66, move _68, move _69) -> bb24
  using: _66@Mir(bb21[1]), _68@Mir(bb21[2]), _69@Mir(bb22[1])
bb24:
  _74 = ((*_2).1: u64)
  using: _2@Phi(bb21)
  _75 = _5
  using: _5@Phi(bb21)
  _73 = core::num::<impl u64>::wrapping_add(move _74, move _75) -> bb25
  using: _74@Mir(bb24[0]), _75@Mir(bb24[1])
bb25:
  ((*_1).1: u64) = move _73
  using: _1@Phi(bb21), _73@Mir(bb24[2])
  _76 = _3
  using: _3@Mir(bb7[3])
  switchInt(move _76) -> [0: bb47, otherwise: bb26]
  using: _76@Mir(bb25[1])
bb26:
  _77 = _5
  using: _5@Phi(bb21)
  _4 = move _77
  using: _77@Mir(bb26[0])
  goto -> bb27
  using: 
bb27:
  _79 = _4
  using: _4@Phi(bb27)
  _80 = ((*_1).1: u64)
  using: _1@Phi(bb27)
  _78 = Lt(move _79, move _80)
  using: _79@Mir(bb27[0]), _80@Mir(bb27[1])
  switchInt(move _78) -> [0: bb37, otherwise: bb28]
  using: _78@Mir(bb27[2])
bb28:
  _83 = ((*_1).3: *mut u32)
  using: _1@Phi(bb27)
  _85 = _4
  using: _4@Phi(bb27)
  _84 = move _85 as isize (IntToInt)
  using: _85@Mir(bb28[1])
  _82 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _83, move _84) -> bb29
  using: _83@Mir(bb28[0]), _84@Mir(bb28[2])
bb29:
  _81 = (*_82)
  using: _82@Mir(bb28[3])
  _86 = _6
  using: _6@Phi(bb27)
  _87 = CheckedShr(_81, _86)
  using: _81@Mir(bb29[0]), _86@Mir(bb29[1])
  assert(!move (_87.1: bool), "attempt to shift right by `{}`, which would overflow", move _86) -> bb30
  using: _87@Entry, _81@Entry, _86@Entry
bb30:
  _91 = _4
  using: _4@Phi(bb27)
  _90 = Not(move _91)
  using: _91@Mir(bb30[0])
  _92 = const 1_u64
  using: 
  _89 = BitAnd(move _90, move _92)
  using: _90@Mir(bb30[1]), _92@Mir(bb30[2])
  _88 = move _89 as usize (IntToInt)
  using: _89@Mir(bb30[3])
  _93 = const 2_usize
  using: 
  _94 = Lt(_88, _93)
  using: _88@Mir(bb30[4]), _93@Mir(bb30[5])
  assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _88) -> bb31
  using: _94@Entry, _93@Entry, _88@Entry
bb31:
  _7[_88] = move (_87.0: u32)
  using: _88@Mir(bb30[4]), _87@Mir(bb29[2])
  _95 = _3
  using: _3@Phi(bb27)
  _97 = ((*_1).3: *mut u32)
  using: _1@Phi(bb27)
  _99 = _4
  using: _4@Phi(bb27)
  _98 = move _99 as isize (IntToInt)
  using: _99@Mir(bb31[3])
  _96 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _97, move _98) -> bb32
  using: _97@Mir(bb31[2]), _98@Mir(bb31[4])
bb32:
  _100 = CheckedShl((*_96), _95)
  using: _96@Mir(bb31[5]), _95@Mir(bb31[1])
  assert(!move (_100.1: bool), "attempt to shift left by `{}`, which would overflow", move _95) -> bb33
  using: _100@Entry, _96@Entry, _95@Entry
bb33:
  (*_96) = move (_100.0: u32)
  using: _96@Mir(bb31[5]), _100@Mir(bb32[0])
  _104 = _4
  using: _4@Phi(bb27)
  _105 = const 1_u64
  using: 
  _103 = BitAnd(move _104, move _105)
  using: _104@Mir(bb33[1]), _105@Mir(bb33[2])
  _102 = move _103 as usize (IntToInt)
  using: _103@Mir(bb33[3])
  _106 = const 2_usize
  using: 
  _107 = Lt(_102, _106)
  using: _102@Mir(bb33[4]), _106@Mir(bb33[5])
  assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _102) -> bb34
  using: _107@Entry, _106@Entry, _102@Entry
bb34:
  _101 = _7[_102]
  using: _7@Phi(bb27), _102@Mir(bb33[4])
  _109 = ((*_1).3: *mut u32)
  using: _1@Phi(bb27)
  _111 = _4
  using: _4@Phi(bb27)
  _110 = move _111 as isize (IntToInt)
  using: _111@Mir(bb34[2])
  _108 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _109, move _110) -> bb35
  using: _109@Mir(bb34[1]), _110@Mir(bb34[3])
bb35:
  (*_108) = move _101
  using: _108@Mir(bb34[4]), _101@Mir(bb34[0])
  _113 = _4
  using: _4@Phi(bb27)
  _112 = core::num::<impl u64>::wrapping_add(move _113, const 1_u64) -> bb36
  using: _113@Mir(bb35[1])
bb36:
  _4 = move _112
  using: _112@Mir(bb35[2])
  goto -> bb27
  using: 
bb37:
  _117 = _4
  using: _4@Phi(bb27)
  _118 = const 1_u64
  using: 
  _116 = BitAnd(move _117, move _118)
  using: _117@Mir(bb37[0]), _118@Mir(bb37[1])
  _115 = move _116 as usize (IntToInt)
  using: _116@Mir(bb37[2])
  _119 = const 2_usize
  using: 
  _120 = Lt(_115, _119)
  using: _115@Mir(bb37[3]), _119@Mir(bb37[4])
  assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _115) -> bb38
  using: _120@Entry, _119@Entry, _115@Entry
bb38:
  _114 = _7[_115]
  using: _7@Phi(bb27), _115@Mir(bb37[3])
  switchInt(move _114) -> [0: bb47, otherwise: bb39]
  using: _114@Mir(bb38[0])
bb39:
  _122 = ((*_1).2: u64)
  using: _1@Phi(bb27)
  _124 = ((*_1).1: u64)
  using: _1@Phi(bb27)
  _125 = const 1_u64
  using: 
  _123 = core::num::<impl u64>::wrapping_add(move _124, move _125) -> bb40
  using: _124@Mir(bb39[1]), _125@Mir(bb39[2])
bb40:
  _121 = Lt(move _122, move _123)
  using: _122@Mir(bb39[0]), _123@Mir(bb39[3])
  switchInt(move _121) -> [0: bb43, otherwise: bb41]
  using: _121@Mir(bb40[0])
bb41:
  _127 = _1
  using: _1@Phi(bb27)
  _129 = ((*_1).1: u64)
  using: _1@Phi(bb27)
  _130 = const 1_u64
  using: 
  _128 = core::num::<impl u64>::wrapping_add(move _129, move _130) -> bb42
  using: _129@Mir(bb41[1]), _130@Mir(bb41[2])
bb42:
  _126 = src::allocator::libzahl_realloc(move _127, move _128) -> bb43
  using: _127@Mir(bb41[0]), _128@Mir(bb41[3])
bb43:
  _134 = _4
  using: _4@Phi(bb27)
  _135 = const 1_u64
  using: 
  _133 = BitAnd(move _134, move _135)
  using: _134@Mir(bb43[0]), _135@Mir(bb43[1])
  _132 = move _133 as usize (IntToInt)
  using: _133@Mir(bb43[2])
  _136 = const 2_usize
  using: 
  _137 = Lt(_132, _136)
  using: _132@Mir(bb43[3]), _136@Mir(bb43[4])
  assert(move _137, "index out of bounds: the length is {} but the index is {}", move _136, _132) -> bb44
  using: _137@Entry, _136@Entry, _132@Entry
bb44:
  _131 = _7[_132]
  using: _7@Phi(bb27), _132@Mir(bb43[3])
  _139 = ((*_1).3: *mut u32)
  using: _1@Phi(bb43)
  _141 = _4
  using: _4@Phi(bb27)
  _140 = move _141 as isize (IntToInt)
  using: _141@Mir(bb44[2])
  _138 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _139, move _140) -> bb45
  using: _139@Mir(bb44[1]), _140@Mir(bb44[3])
bb45:
  (*_138) = move _131
  using: _138@Mir(bb44[4]), _131@Mir(bb44[0])
  _143 = ((*_1).1: u64)
  using: _1@Phi(bb43)
  _142 = core::num::<impl u64>::wrapping_add(move _143, const 1_u64) -> bb46
  using: _143@Mir(bb45[1])
bb46:
  ((*_1).1: u64) = move _142
  using: _1@Phi(bb43), _142@Mir(bb45[2])
  goto -> bb47
  using: 
bb47:
  _145 = _2
  using: _2@Phi(bb21)
  _144 = src::zlsh::zsignum(move _145) -> bb48
  using: _145@Mir(bb47[0])
bb48:
  ((*_1).0: i32) = move _144
  using: _1@Phi(bb47), _144@Mir(bb47[1])
  goto -> bb49
  using: 
bb49:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _8, move _9] is not supported
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zlsh.rs:61:50: 61:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:62:35: 62:54 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:63:63: 63:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:67:26: 67:48 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zlsh.rs:70:31: 70:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zlsh.rs:70:18: 70:85 (#0) by default
rewrite call src::zlsh::memmove @ workspace/libzahl/src/zlsh.rs:66:9: 71:10 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:74:26: 74:48 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zlsh.rs:77:31: 77:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zlsh.rs:77:18: 77:85 (#0) by default
rewrite call src::zlsh::memcpy @ workspace/libzahl/src/zlsh.rs:73:9: 78:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zlsh.rs:83:28: 83:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zlsh.rs:83:15: 83:82 (#0) by default
rewrite call src::zlsh::memset @ workspace/libzahl/src/zlsh.rs:80:5: 84:6 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:85:29: 85:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:90:43: 90:61 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:91:27: 91:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:92:27: 92:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:93:19: 93:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:96:43: 96:90 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:100:33: 100:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zlsh.rs:104:18: 106:18 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zlsh.rs:107:37: 107:52 (#0) by default
@DefId(0:246 ~ lib[40c5]::src::zmod::zmod)
bb0:
  _8 = const {alloc117: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _7 = &mut (*_8)
  using: _8@Mir(bb0[0])
  _6 = move _7 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _7@Mir(bb0[1])
  _5 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _6) -> bb1
  using: _6@Mir(bb0[2])
bb1:
  _9 = _1
  using: _1@Entry
  _10 = _2
  using: _2@Entry
  _11 = _3
  using: _3@Entry
  _4 = src::zdivmod::zdivmod(move _5, move _9, move _10, move _11) -> bb2
  using: _5@Mir(bb0[3]), _9@Mir(bb1[0]), _10@Mir(bb1[1]), _11@Mir(bb1[2])
bb2:
  return
  using: _0@Entry
@DefId(0:257 ~ lib[40c5]::src::zmodmul::zmodmul)
bb0:
  _6 = _1
  using: _1@Entry
  _7 = _4
  using: _4@Entry
  _5 = Eq(move _6, move _7)
  using: _6@Mir(bb0[0]), _7@Mir(bb0[1])
  switchInt(move _5) -> [0: bb6, otherwise: bb1]
  using: _5@Mir(bb0[2])
bb1:
  _12 = const {alloc120: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _11 = &mut (*_12)
  using: _12@Mir(bb1[0])
  _10 = move _11 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _11@Mir(bb1[1])
  _9 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _10) -> bb2
  using: _10@Mir(bb1[2])
bb2:
  _13 = _4
  using: _4@Entry
  _8 = src::zset::zset(move _9, move _13) -> bb3
  using: _9@Mir(bb1[3]), _13@Mir(bb2[0])
bb3:
  _15 = _1
  using: _1@Entry
  _16 = _2
  using: _2@Entry
  _17 = _3
  using: _3@Entry
  _14 = src::zmul::zmul(move _15, move _16, move _17) -> bb4
  using: _15@Mir(bb3[0]), _16@Mir(bb3[1]), _17@Mir(bb3[2])
bb4:
  _19 = _1
  using: _1@Entry
  _20 = _1
  using: _1@Entry
  _24 = const {alloc120: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _23 = &mut (*_24)
  using: _24@Mir(bb4[2])
  _22 = move _23 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _23@Mir(bb4[3])
  _21 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _22) -> bb5
  using: _22@Mir(bb4[4])
bb5:
  _18 = src::zmod::zmod(move _19, move _20, move _21) -> bb8
  using: _19@Mir(bb4[0]), _20@Mir(bb4[1]), _21@Mir(bb4[5])
bb6:
  _26 = _1
  using: _1@Entry
  _27 = _2
  using: _2@Entry
  _28 = _3
  using: _3@Entry
  _25 = src::zmul::zmul(move _26, move _27, move _28) -> bb7
  using: _26@Mir(bb6[0]), _27@Mir(bb6[1]), _28@Mir(bb6[2])
bb7:
  _30 = _1
  using: _1@Entry
  _31 = _1
  using: _1@Entry
  _32 = _4
  using: _4@Entry
  _29 = src::zmod::zmod(move _30, move _31, move _32) -> bb8
  using: _30@Mir(bb7[0]), _31@Mir(bb7[1]), _32@Mir(bb7[2])
bb8:
  return
  using: _0@Entry
@DefId(0:277 ~ lib[40c5]::src::zmodpow::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:278 ~ lib[40c5]::src::zmodpow::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:279 ~ lib[40c5]::src::zmodpow::zmodpow)
bb0:
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _7 = const 0_u64
  using: 
  _8 = const 0_u64
  using: 
  _9 = const 0_u32
  using: 
  _12 = _3
  using: _3@Entry
  _11 = src::zmodpow::zsignum(move _12) -> bb1
  using: _12@Mir(bb0[5])
bb1:
  _13 = const 0_i32
  using: 
  _10 = Le(move _11, move _13)
  using: _11@Mir(bb0[6]), _13@Mir(bb1[0])
  switchInt(move _10) -> [0: bb22, otherwise: bb2]
  using: _10@Mir(bb1[1])
bb2:
  _15 = _3
  using: _3@Entry
  _14 = src::zmodpow::zzero(move _15) -> bb3
  using: _15@Mir(bb2[0])
bb3:
  switchInt(move _14) -> [0: bb13, otherwise: bb4]
  using: _14@Mir(bb2[1])
bb4:
  _17 = _2
  using: _2@Entry
  _16 = src::zmodpow::zzero(move _17) -> bb5
  using: _17@Mir(bb4[0])
bb5:
  switchInt(move _16) -> [0: bb8, otherwise: bb6]
  using: _16@Mir(bb4[1])
bb6:
  _18 = const 33_i32
  using: 
  _19 = const {alloc127: *mut i32}
  using: 
  (*_19) = move _18
  using: _19@Mir(bb6[1]), _18@Mir(bb6[0])
  _24 = const {alloc128: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _23 = &mut (*_24)
  using: _24@Mir(bb6[3])
  _22 = move _23 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _23@Mir(bb6[4])
  _21 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _22) -> bb7
  using: _22@Mir(bb6[5])
bb7:
  _25 = const 1_i32
  using: 
  _20 = src::zmodpow::longjmp(move _21, move _25)
  using: _21@Mir(bb6[6]), _25@Mir(bb7[0])
bb8:
  _27 = _4
  using: _4@Entry
  _26 = src::zmodpow::zzero(move _27) -> bb9
  using: _27@Mir(bb8[0])
bb9:
  switchInt(move _26) -> [0: bb12, otherwise: bb10]
  using: _26@Mir(bb8[1])
bb10:
  _28 = const 33_i32
  using: 
  _29 = const {alloc127: *mut i32}
  using: 
  (*_29) = move _28
  using: _29@Mir(bb10[1]), _28@Mir(bb10[0])
  _34 = const {alloc128: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _33 = &mut (*_34)
  using: _34@Mir(bb10[3])
  _32 = move _33 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _33@Mir(bb10[4])
  _31 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _32) -> bb11
  using: _32@Mir(bb10[5])
bb11:
  _35 = const 1_i32
  using: 
  _30 = src::zmodpow::longjmp(move _31, move _35)
  using: _31@Mir(bb10[6]), _35@Mir(bb11[0])
bb12:
  _37 = _1
  using: _1@Entry
  _38 = const 1_u64
  using: 
  _36 = src::zsetu::zsetu(move _37, move _38) -> bb71
  using: _37@Mir(bb12[0]), _38@Mir(bb12[1])
bb13:
  _41 = _2
  using: _2@Entry
  _40 = src::zmodpow::zzero(move _41) -> bb17
  using: _41@Mir(bb13[0])
bb14:
  _39 = const true
  using: 
  goto -> bb16
  using: 
bb15:
  _44 = _4
  using: _4@Entry
  _43 = src::zmodpow::zzero(move _44) -> bb18
  using: _44@Mir(bb15[0])
bb16:
  switchInt(move _39) -> [0: bb21, otherwise: bb19]
  using: _39@Phi(bb16)
bb17:
  switchInt(move _40) -> [0: bb15, otherwise: bb14]
  using: _40@Mir(bb13[1])
bb18:
  _42 = Ne(move _43, const 0_i32)
  using: _43@Mir(bb15[1])
  _39 = move _42
  using: _42@Mir(bb18[0])
  goto -> bb16
  using: 
bb19:
  _45 = const 33_i32
  using: 
  _46 = const {alloc127: *mut i32}
  using: 
  (*_46) = move _45
  using: _46@Mir(bb19[1]), _45@Mir(bb19[0])
  _51 = const {alloc128: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _50 = &mut (*_51)
  using: _51@Mir(bb19[3])
  _49 = move _50 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _50@Mir(bb19[4])
  _48 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _49) -> bb20
  using: _49@Mir(bb19[5])
bb20:
  _52 = const 1_i32
  using: 
  _47 = src::zmodpow::longjmp(move _48, move _52)
  using: _48@Mir(bb19[6]), _52@Mir(bb20[0])
bb21:
  _53 = const 0_i32
  using: 
  ((*_1).0: i32) = move _53
  using: _1@Entry, _53@Mir(bb21[0])
  goto -> bb71
  using: 
bb22:
  _55 = _4
  using: _4@Phi(bb16)
  _54 = src::zmodpow::zzero(move _55) -> bb23
  using: _55@Mir(bb22[0])
bb23:
  switchInt(move _54) -> [0: bb26, otherwise: bb24]
  using: _54@Mir(bb22[1])
bb24:
  _56 = const 33_i32
  using: 
  _57 = const {alloc127: *mut i32}
  using: 
  (*_57) = move _56
  using: _57@Mir(bb24[1]), _56@Mir(bb24[0])
  _62 = const {alloc128: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _61 = &mut (*_62)
  using: _62@Mir(bb24[3])
  _60 = move _61 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _61@Mir(bb24[4])
  _59 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _60) -> bb25
  using: _60@Mir(bb24[5])
bb25:
  _63 = const 1_i32
  using: 
  _58 = src::zmodpow::longjmp(move _59, move _63)
  using: _59@Mir(bb24[6]), _63@Mir(bb25[0])
bb26:
  _65 = _2
  using: _2@Entry
  _64 = src::zmodpow::zzero(move _65) -> bb27
  using: _65@Mir(bb26[0])
bb27:
  switchInt(move _64) -> [0: bb29, otherwise: bb28]
  using: _64@Mir(bb26[1])
bb28:
  _66 = const 0_i32
  using: 
  ((*_1).0: i32) = move _66
  using: _1@Entry, _66@Mir(bb28[0])
  goto -> bb71
  using: 
bb29:
  _68 = _3
  using: _3@Entry
  _67 = src::zbits::zbits(move _68) -> bb30
  using: _68@Mir(bb29[0])
bb30:
  _8 = move _67
  using: _67@Mir(bb29[1])
  _69 = _8
  using: _8@Mir(bb30[0])
  _70 = const 5_i32
  using: 
  _71 = CheckedShr(_69, _70)
  using: _69@Mir(bb30[1]), _70@Mir(bb30[2])
  assert(!move (_71.1: bool), "attempt to shift right by `{}`, which would overflow", move _70) -> bb31
  using: _71@Entry, _69@Entry, _70@Entry
bb31:
  _7 = move (_71.0: u64)
  using: _71@Mir(bb30[3])
  _76 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _75 = &mut (*_76)
  using: _76@Mir(bb31[1])
  _74 = move _75 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _75@Mir(bb31[2])
  _73 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _74) -> bb32
  using: _74@Mir(bb31[3])
bb32:
  _77 = _2
  using: _2@Entry
  _78 = _4
  using: _4@Phi(bb16)
  _72 = src::zmod::zmod(move _73, move _77, move _78) -> bb33
  using: _73@Mir(bb31[4]), _77@Mir(bb32[0]), _78@Mir(bb32[1])
bb33:
  _83 = const {alloc130: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _82 = &mut (*_83)
  using: _83@Mir(bb33[0])
  _81 = move _82 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _82@Mir(bb33[1])
  _80 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _81) -> bb34
  using: _81@Mir(bb33[2])
bb34:
  _84 = _3
  using: _3@Entry
  _79 = src::zset::zset(move _80, move _84) -> bb35
  using: _80@Mir(bb33[3]), _84@Mir(bb34[0])
bb35:
  _89 = const {alloc131: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _88 = &mut (*_89)
  using: _89@Mir(bb35[0])
  _87 = move _88 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _88@Mir(bb35[1])
  _86 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _87) -> bb36
  using: _87@Mir(bb35[2])
bb36:
  _90 = _4
  using: _4@Phi(bb16)
  _85 = src::zset::zset(move _86, move _90) -> bb37
  using: _86@Mir(bb35[3]), _90@Mir(bb36[0])
bb37:
  _92 = _1
  using: _1@Entry
  _93 = const 1_u64
  using: 
  _91 = src::zsetu::zsetu(move _92, move _93) -> bb38
  using: _92@Mir(bb37[0]), _93@Mir(bb37[1])
bb38:
  _5 = const 0_u64
  using: 
  goto -> bb39
  using: 
bb39:
  _95 = _5
  using: _5@Phi(bb39)
  _96 = _7
  using: _7@Mir(bb31[0])
  _94 = Lt(move _95, move _96)
  using: _95@Mir(bb39[0]), _96@Mir(bb39[1])
  switchInt(move _94) -> [0: bb57, otherwise: bb40]
  using: _94@Mir(bb39[2])
bb40:
  _103 = const {alloc130: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _102 = &mut (*_103)
  using: _103@Mir(bb40[0])
  _101 = move _102 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _102@Mir(bb40[1])
  _100 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _101) -> bb41
  using: _101@Mir(bb40[2])
bb41:
  _99 = ((*_100).3: *mut u32)
  using: _100@Mir(bb40[3])
  _105 = _5
  using: _5@Phi(bb39)
  _104 = move _105 as isize (IntToInt)
  using: _105@Mir(bb41[1])
  _98 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _99, move _104) -> bb42
  using: _99@Mir(bb41[0]), _104@Mir(bb41[2])
bb42:
  _97 = (*_98)
  using: _98@Mir(bb41[3])
  _9 = move _97
  using: _97@Mir(bb42[0])
  _6 = const 32_u64
  using: 
  goto -> bb43
  using: 
bb43:
  _106 = _6
  using: _6@Phi(bb43)
  _108 = _6
  using: _6@Phi(bb43)
  _107 = core::num::<impl u64>::wrapping_sub(move _108, const 1_u64) -> bb44
  using: _108@Mir(bb43[1])
bb44:
  _6 = move _107
  using: _107@Mir(bb43[2])
  _111 = _106
  using: _106@Mir(bb43[0])
  _110 = Ne(move _111, const 0_u64)
  using: _111@Mir(bb44[1])
  _109 = Not(move _110)
  using: _110@Mir(bb44[2])
  switchInt(move _109) -> [0: bb46, otherwise: bb45]
  using: _109@Mir(bb44[3])
bb45:
  _142 = _5
  using: _5@Phi(bb39)
  _141 = core::num::<impl u64>::wrapping_add(move _142, const 1_u64) -> bb56
  using: _142@Mir(bb45[0])
bb46:
  _113 = _9
  using: _9@Phi(bb43)
  _114 = const 1_u32
  using: 
  _112 = BitAnd(move _113, move _114)
  using: _113@Mir(bb46[0]), _114@Mir(bb46[1])
  switchInt(move _112) -> [0: bb50, otherwise: bb47]
  using: _112@Mir(bb46[2])
bb47:
  _116 = _1
  using: _1@Phi(bb43)
  _117 = _1
  using: _1@Phi(bb43)
  _121 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _120 = &mut (*_121)
  using: _121@Mir(bb47[2])
  _119 = move _120 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _120@Mir(bb47[3])
  _118 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _119) -> bb48
  using: _119@Mir(bb47[4])
bb48:
  _125 = const {alloc131: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _124 = &mut (*_125)
  using: _125@Mir(bb48[0])
  _123 = move _124 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _124@Mir(bb48[1])
  _122 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _123) -> bb49
  using: _123@Mir(bb48[2])
bb49:
  _115 = src::zmodmul::zmodmul(move _116, move _117, move _118, move _122) -> bb50
  using: _116@Mir(bb47[0]), _117@Mir(bb47[1]), _118@Mir(bb47[5]), _122@Mir(bb48[3])
bb50:
  _130 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _129 = &mut (*_130)
  using: _130@Mir(bb50[0])
  _128 = move _129 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _129@Mir(bb50[1])
  _127 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _128) -> bb51
  using: _128@Mir(bb50[2])
bb51:
  _134 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _133 = &mut (*_134)
  using: _134@Mir(bb51[0])
  _132 = move _133 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _133@Mir(bb51[1])
  _131 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _132) -> bb52
  using: _132@Mir(bb51[2])
bb52:
  _138 = const {alloc131: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _137 = &mut (*_138)
  using: _138@Mir(bb52[0])
  _136 = move _137 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _137@Mir(bb52[1])
  _135 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _136) -> bb53
  using: _136@Mir(bb52[2])
bb53:
  _126 = src::zmodsqr::zmodsqr(move _127, move _131, move _135) -> bb54
  using: _127@Mir(bb50[3]), _131@Mir(bb51[3]), _135@Mir(bb52[3])
bb54:
  _139 = const 1_i32
  using: 
  _140 = CheckedShr(_9, _139)
  using: _9@Phi(bb43), _139@Mir(bb54[0])
  assert(!move (_140.1: bool), "attempt to shift right by `{}`, which would overflow", move _139) -> bb55
  using: _140@Entry, _9@Entry, _139@Entry
bb55:
  _9 = move (_140.0: u32)
  using: _140@Mir(bb54[1])
  goto -> bb43
  using: 
bb56:
  _5 = move _141
  using: _141@Mir(bb45[1])
  goto -> bb39
  using: 
bb57:
  _149 = const {alloc130: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _148 = &mut (*_149)
  using: _149@Mir(bb57[0])
  _147 = move _148 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _148@Mir(bb57[1])
  _146 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _147) -> bb58
  using: _147@Mir(bb57[2])
bb58:
  _145 = ((*_146).3: *mut u32)
  using: _146@Mir(bb57[3])
  _151 = _5
  using: _5@Phi(bb39)
  _150 = move _151 as isize (IntToInt)
  using: _151@Mir(bb58[1])
  _144 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _145, move _150) -> bb59
  using: _145@Mir(bb58[0]), _150@Mir(bb58[2])
bb59:
  _143 = (*_144)
  using: _144@Mir(bb58[3])
  _9 = move _143
  using: _143@Mir(bb59[0])
  goto -> bb60
  using: 
bb60:
  _152 = _9
  using: _9@Phi(bb60)
  switchInt(move _152) -> [0: bb71, otherwise: bb61]
  using: _152@Mir(bb60[0])
bb61:
  _154 = _9
  using: _9@Phi(bb60)
  _155 = const 1_u32
  using: 
  _153 = BitAnd(move _154, move _155)
  using: _154@Mir(bb61[0]), _155@Mir(bb61[1])
  switchInt(move _153) -> [0: bb65, otherwise: bb62]
  using: _153@Mir(bb61[2])
bb62:
  _157 = _1
  using: _1@Phi(bb60)
  _158 = _1
  using: _1@Phi(bb60)
  _162 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _161 = &mut (*_162)
  using: _162@Mir(bb62[2])
  _160 = move _161 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _161@Mir(bb62[3])
  _159 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _160) -> bb63
  using: _160@Mir(bb62[4])
bb63:
  _166 = const {alloc131: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _165 = &mut (*_166)
  using: _166@Mir(bb63[0])
  _164 = move _165 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _165@Mir(bb63[1])
  _163 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _164) -> bb64
  using: _164@Mir(bb63[2])
bb64:
  _156 = src::zmodmul::zmodmul(move _157, move _158, move _159, move _163) -> bb65
  using: _157@Mir(bb62[0]), _158@Mir(bb62[1]), _159@Mir(bb62[5]), _163@Mir(bb63[3])
bb65:
  _171 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _170 = &mut (*_171)
  using: _171@Mir(bb65[0])
  _169 = move _170 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _170@Mir(bb65[1])
  _168 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _169) -> bb66
  using: _169@Mir(bb65[2])
bb66:
  _175 = const {alloc129: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _174 = &mut (*_175)
  using: _175@Mir(bb66[0])
  _173 = move _174 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _174@Mir(bb66[1])
  _172 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _173) -> bb67
  using: _173@Mir(bb66[2])
bb67:
  _179 = const {alloc131: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _178 = &mut (*_179)
  using: _179@Mir(bb67[0])
  _177 = move _178 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _178@Mir(bb67[1])
  _176 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _177) -> bb68
  using: _177@Mir(bb67[2])
bb68:
  _167 = src::zmodsqr::zmodsqr(move _168, move _172, move _176) -> bb69
  using: _168@Mir(bb65[3]), _172@Mir(bb66[3]), _176@Mir(bb67[3])
bb69:
  _180 = const 1_i32
  using: 
  _181 = CheckedShr(_9, _180)
  using: _9@Phi(bb60), _180@Mir(bb69[0])
  assert(!move (_181.1: bool), "attempt to shift right by `{}`, which would overflow", move _180) -> bb70
  using: _181@Entry, _9@Entry, _180@Entry
bb70:
  _9 = move (_181.0: u32)
  using: _181@Mir(bb69[1])
  goto -> bb60
  using: 
bb71:
  return
  using: _0@Entry
rewrite call src::zmodpow::longjmp @ workspace/libzahl/src/zmodpow.rs:56:17: 56:72 (#0) by default
rewrite call src::zmodpow::longjmp @ workspace/libzahl/src/zmodpow.rs:59:17: 59:72 (#0) by default
rewrite call src::zmodpow::longjmp @ workspace/libzahl/src/zmodpow.rs:64:13: 64:68 (#0) by default
rewrite call src::zmodpow::longjmp @ workspace/libzahl/src/zmodpow.rs:72:13: 72:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zmodpow.rs:86:56: 86:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zmodpow.rs:90:19: 90:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zmodpow.rs:109:15: 109:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zmodpow.rs:111:52: 111:70 (#0) by default
@DefId(0:298 ~ lib[40c5]::src::zmodpowu::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:299 ~ lib[40c5]::src::zmodpowu::zmodpowu)
bb0:
  _5 = _3
  using: _3@Entry
  switchInt(move _5) -> [0: bb1, otherwise: bb10]
  using: _5@Mir(bb0[0])
bb1:
  _7 = _2
  using: _2@Entry
  _6 = src::zmodpowu::zzero(move _7) -> bb2
  using: _7@Mir(bb1[0])
bb2:
  switchInt(move _6) -> [0: bb5, otherwise: bb3]
  using: _6@Mir(bb1[1])
bb3:
  _8 = const 33_i32
  using: 
  _9 = const {alloc136: *mut i32}
  using: 
  (*_9) = move _8
  using: _9@Mir(bb3[1]), _8@Mir(bb3[0])
  _14 = const {alloc137: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _13 = &mut (*_14)
  using: _14@Mir(bb3[3])
  _12 = move _13 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _13@Mir(bb3[4])
  _11 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _12) -> bb4
  using: _12@Mir(bb3[5])
bb4:
  _15 = const 1_i32
  using: 
  _10 = src::zmodpowu::longjmp(move _11, move _15)
  using: _11@Mir(bb3[6]), _15@Mir(bb4[0])
bb5:
  _17 = _4
  using: _4@Entry
  _16 = src::zmodpowu::zzero(move _17) -> bb6
  using: _17@Mir(bb5[0])
bb6:
  switchInt(move _16) -> [0: bb9, otherwise: bb7]
  using: _16@Mir(bb5[1])
bb7:
  _18 = const 33_i32
  using: 
  _19 = const {alloc136: *mut i32}
  using: 
  (*_19) = move _18
  using: _19@Mir(bb7[1]), _18@Mir(bb7[0])
  _24 = const {alloc137: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _23 = &mut (*_24)
  using: _24@Mir(bb7[3])
  _22 = move _23 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _23@Mir(bb7[4])
  _21 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _22) -> bb8
  using: _22@Mir(bb7[5])
bb8:
  _25 = const 1_i32
  using: 
  _20 = src::zmodpowu::longjmp(move _21, move _25)
  using: _21@Mir(bb7[6]), _25@Mir(bb8[0])
bb9:
  _27 = _1
  using: _1@Entry
  _28 = const 1_u64
  using: 
  _26 = src::zsetu::zsetu(move _27, move _28) -> bb33
  using: _27@Mir(bb9[0]), _28@Mir(bb9[1])
bb10:
  _30 = _4
  using: _4@Entry
  _29 = src::zmodpowu::zzero(move _30) -> bb11
  using: _30@Mir(bb10[0])
bb11:
  switchInt(move _29) -> [0: bb14, otherwise: bb12]
  using: _29@Mir(bb10[1])
bb12:
  _31 = const 33_i32
  using: 
  _32 = const {alloc136: *mut i32}
  using: 
  (*_32) = move _31
  using: _32@Mir(bb12[1]), _31@Mir(bb12[0])
  _37 = const {alloc137: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _36 = &mut (*_37)
  using: _37@Mir(bb12[3])
  _35 = move _36 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _36@Mir(bb12[4])
  _34 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _35) -> bb13
  using: _35@Mir(bb12[5])
bb13:
  _38 = const 1_i32
  using: 
  _33 = src::zmodpowu::longjmp(move _34, move _38)
  using: _34@Mir(bb12[6]), _38@Mir(bb13[0])
bb14:
  _40 = _2
  using: _2@Entry
  _39 = src::zmodpowu::zzero(move _40) -> bb15
  using: _40@Mir(bb14[0])
bb15:
  switchInt(move _39) -> [0: bb17, otherwise: bb16]
  using: _39@Mir(bb14[1])
bb16:
  _41 = const 0_i32
  using: 
  ((*_1).0: i32) = move _41
  using: _1@Entry, _41@Mir(bb16[0])
  goto -> bb33
  using: 
bb17:
  _46 = const {alloc138: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _45 = &mut (*_46)
  using: _46@Mir(bb17[0])
  _44 = move _45 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _45@Mir(bb17[1])
  _43 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _44) -> bb18
  using: _44@Mir(bb17[2])
bb18:
  _47 = _2
  using: _2@Entry
  _48 = _4
  using: _4@Entry
  _42 = src::zmod::zmod(move _43, move _47, move _48) -> bb19
  using: _43@Mir(bb17[3]), _47@Mir(bb18[0]), _48@Mir(bb18[1])
bb19:
  _53 = const {alloc139: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _52 = &mut (*_53)
  using: _53@Mir(bb19[0])
  _51 = move _52 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _52@Mir(bb19[1])
  _50 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _51) -> bb20
  using: _51@Mir(bb19[2])
bb20:
  _54 = _4
  using: _4@Entry
  _49 = src::zset::zset(move _50, move _54) -> bb21
  using: _50@Mir(bb19[3]), _54@Mir(bb20[0])
bb21:
  _56 = _1
  using: _1@Entry
  _57 = const 1_u64
  using: 
  _55 = src::zsetu::zsetu(move _56, move _57) -> bb22
  using: _56@Mir(bb21[0]), _57@Mir(bb21[1])
bb22:
  _58 = _3
  using: _3@Phi(bb22)
  switchInt(move _58) -> [0: bb33, otherwise: bb23]
  using: _58@Mir(bb22[0])
bb23:
  _60 = _3
  using: _3@Phi(bb22)
  _61 = const 1_u64
  using: 
  _59 = BitAnd(move _60, move _61)
  using: _60@Mir(bb23[0]), _61@Mir(bb23[1])
  switchInt(move _59) -> [0: bb27, otherwise: bb24]
  using: _59@Mir(bb23[2])
bb24:
  _63 = _1
  using: _1@Phi(bb22)
  _64 = _1
  using: _1@Phi(bb22)
  _68 = const {alloc138: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _67 = &mut (*_68)
  using: _68@Mir(bb24[2])
  _66 = move _67 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _67@Mir(bb24[3])
  _65 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _66) -> bb25
  using: _66@Mir(bb24[4])
bb25:
  _72 = const {alloc139: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _71 = &mut (*_72)
  using: _72@Mir(bb25[0])
  _70 = move _71 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _71@Mir(bb25[1])
  _69 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _70) -> bb26
  using: _70@Mir(bb25[2])
bb26:
  _62 = src::zmodmul::zmodmul(move _63, move _64, move _65, move _69) -> bb27
  using: _63@Mir(bb24[0]), _64@Mir(bb24[1]), _65@Mir(bb24[5]), _69@Mir(bb25[3])
bb27:
  _77 = const {alloc138: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _76 = &mut (*_77)
  using: _77@Mir(bb27[0])
  _75 = move _76 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _76@Mir(bb27[1])
  _74 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _75) -> bb28
  using: _75@Mir(bb27[2])
bb28:
  _81 = const {alloc138: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _80 = &mut (*_81)
  using: _81@Mir(bb28[0])
  _79 = move _80 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _80@Mir(bb28[1])
  _78 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _79) -> bb29
  using: _79@Mir(bb28[2])
bb29:
  _85 = const {alloc139: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _84 = &mut (*_85)
  using: _85@Mir(bb29[0])
  _83 = move _84 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _84@Mir(bb29[1])
  _82 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _83) -> bb30
  using: _83@Mir(bb29[2])
bb30:
  _73 = src::zmodsqr::zmodsqr(move _74, move _78, move _82) -> bb31
  using: _74@Mir(bb27[3]), _78@Mir(bb28[3]), _82@Mir(bb29[3])
bb31:
  _86 = const 1_i32
  using: 
  _87 = CheckedShr(_3, _86)
  using: _3@Phi(bb22), _86@Mir(bb31[0])
  assert(!move (_87.1: bool), "attempt to shift right by `{}`, which would overflow", move _86) -> bb32
  using: _87@Entry, _3@Entry, _86@Entry
bb32:
  _3 = move (_87.0: u64)
  using: _87@Mir(bb31[1])
  goto -> bb22
  using: 
bb33:
  return
  using: _0@Entry
rewrite call src::zmodpowu::longjmp @ workspace/libzahl/src/zmodpowu.rs:44:13: 44:68 (#0) by default
rewrite call src::zmodpowu::longjmp @ workspace/libzahl/src/zmodpowu.rs:47:13: 47:68 (#0) by default
rewrite call src::zmodpowu::longjmp @ workspace/libzahl/src/zmodpowu.rs:55:13: 55:68 (#0) by default
@DefId(0:310 ~ lib[40c5]::src::zmodsqr::zmodsqr)
bb0:
  _5 = _1
  using: _1@Entry
  _6 = _3
  using: _3@Entry
  _4 = Eq(move _5, move _6)
  using: _5@Mir(bb0[0]), _6@Mir(bb0[1])
  switchInt(move _4) -> [0: bb6, otherwise: bb1]
  using: _4@Mir(bb0[2])
bb1:
  _11 = const {alloc142: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _10 = &mut (*_11)
  using: _11@Mir(bb1[0])
  _9 = move _10 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _10@Mir(bb1[1])
  _8 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _9) -> bb2
  using: _9@Mir(bb1[2])
bb2:
  _12 = _3
  using: _3@Entry
  _7 = src::zset::zset(move _8, move _12) -> bb3
  using: _8@Mir(bb1[3]), _12@Mir(bb2[0])
bb3:
  _14 = _1
  using: _1@Entry
  _15 = _2
  using: _2@Entry
  _13 = src::zsqr::zsqr(move _14, move _15) -> bb4
  using: _14@Mir(bb3[0]), _15@Mir(bb3[1])
bb4:
  _17 = _1
  using: _1@Entry
  _18 = _1
  using: _1@Entry
  _22 = const {alloc142: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _21 = &mut (*_22)
  using: _22@Mir(bb4[2])
  _20 = move _21 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _21@Mir(bb4[3])
  _19 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _20) -> bb5
  using: _20@Mir(bb4[4])
bb5:
  _16 = src::zmod::zmod(move _17, move _18, move _19) -> bb8
  using: _17@Mir(bb4[0]), _18@Mir(bb4[1]), _19@Mir(bb4[5])
bb6:
  _24 = _1
  using: _1@Entry
  _25 = _2
  using: _2@Entry
  _23 = src::zsqr::zsqr(move _24, move _25) -> bb7
  using: _24@Mir(bb6[0]), _25@Mir(bb6[1])
bb7:
  _27 = _1
  using: _1@Entry
  _28 = _1
  using: _1@Entry
  _29 = _3
  using: _3@Entry
  _26 = src::zmod::zmod(move _27, move _28, move _29) -> bb8
  using: _27@Mir(bb7[0]), _28@Mir(bb7[1]), _29@Mir(bb7[2])
bb8:
  return
  using: _0@Entry
@DefId(0:320 ~ lib[40c5]::src::zmul::zinit)
bb0:
  _2 = const 0_i32
  using: 
  ((*_1).2: u64) = move _2 as u64 (IntToInt)
  using: _1@Entry, _2@Mir(bb0[0])
  ((*_1).3: *mut u32) = const 0_usize as *mut u32 (PointerFromExposedAddress)
  using: _1@Entry
  return
  using: _0@Entry
@DefId(0:321 ~ lib[40c5]::src::zmul::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:322 ~ lib[40c5]::src::zmul::zmul)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  Deinit(_7)
  using: 
  (_7.0: i32) = const 0_i32
  using: 
  (_7.1: u64) = const 0_u64
  using: 
  (_7.2: u64) = const 0_u64
  using: 
  (_7.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _6 = [move _7; 1]
  using: _7@Mir(bb0[2])
  Deinit(_9)
  using: 
  (_9.0: i32) = const 0_i32
  using: 
  (_9.1: u64) = const 0_u64
  using: 
  (_9.2: u64) = const 0_u64
  using: 
  (_9.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _8 = [move _9; 1]
  using: _9@Mir(bb0[8])
  Deinit(_11)
  using: 
  (_11.0: i32) = const 0_i32
  using: 
  (_11.1: u64) = const 0_u64
  using: 
  (_11.2: u64) = const 0_u64
  using: 
  (_11.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _10 = [move _11; 1]
  using: _11@Mir(bb0[14])
  Deinit(_13)
  using: 
  (_13.0: i32) = const 0_i32
  using: 
  (_13.1: u64) = const 0_u64
  using: 
  (_13.2: u64) = const 0_u64
  using: 
  (_13.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _12 = [move _13; 1]
  using: _13@Mir(bb0[20])
  Deinit(_15)
  using: 
  (_15.0: i32) = const 0_i32
  using: 
  (_15.1: u64) = const 0_u64
  using: 
  (_15.2: u64) = const 0_u64
  using: 
  (_15.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _14 = [move _15; 1]
  using: _15@Mir(bb0[26])
  Deinit(_17)
  using: 
  (_17.0: i32) = const 0_i32
  using: 
  (_17.1: u64) = const 0_u64
  using: 
  (_17.2: u64) = const 0_u64
  using: 
  (_17.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _16 = [move _17; 1]
  using: _17@Mir(bb0[32])
  Deinit(_19)
  using: 
  (_19.0: i32) = const 0_i32
  using: 
  (_19.1: u64) = const 0_u64
  using: 
  (_19.2: u64) = const 0_u64
  using: 
  (_19.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _18 = [move _19; 1]
  using: _19@Mir(bb0[38])
  _20 = const 0_i32
  using: 
  _21 = const 0_i32
  using: 
  _23 = _2
  using: _2@Entry
  _22 = src::zmul::zsignum(move _23) -> bb1
  using: _23@Mir(bb0[46])
bb1:
  _20 = move _22
  using: _22@Mir(bb0[47])
  _25 = _3
  using: _3@Entry
  _24 = src::zmul::zsignum(move _25) -> bb2
  using: _25@Mir(bb1[1])
bb2:
  _21 = move _24
  using: _24@Mir(bb1[2])
  _27 = _20
  using: _20@Mir(bb1[0])
  switchInt(move _27) -> [0: bb3, otherwise: bb4]
  using: _27@Mir(bb2[1])
bb3:
  _26 = const true
  using: 
  goto -> bb5
  using: 
bb4:
  _29 = _21
  using: _21@Mir(bb2[0])
  _28 = Eq(move _29, const 0_i32)
  using: _29@Mir(bb4[0])
  _26 = move _28
  using: _28@Mir(bb4[1])
  goto -> bb5
  using: 
bb5:
  switchInt(move _26) -> [0: bb7, otherwise: bb6]
  using: _26@Phi(bb5)
bb6:
  _30 = const 0_i32
  using: 
  ((*_1).0: i32) = move _30
  using: _1@Entry, _30@Mir(bb6[0])
  goto -> bb101
  using: 
bb7:
  _32 = _2
  using: _2@Entry
  _31 = src::zbits::zbits(move _32) -> bb8
  using: _32@Mir(bb7[0])
bb8:
  _4 = move _31
  using: _31@Mir(bb7[1])
  _35 = _2
  using: _2@Entry
  _36 = _3
  using: _3@Entry
  _34 = Eq(move _35, move _36)
  using: _35@Mir(bb8[1]), _36@Mir(bb8[2])
  switchInt(move _34) -> [0: bb10, otherwise: bb9]
  using: _34@Mir(bb8[3])
bb9:
  _33 = _4
  using: _4@Mir(bb8[0])
  goto -> bb11
  using: 
bb10:
  _37 = _3
  using: _3@Entry
  _33 = src::zbits::zbits(move _37) -> bb11
  using: _37@Mir(bb10[0])
bb11:
  _5 = move _33
  using: _33@Phi(bb11)
  _40 = _4
  using: _4@Phi(bb11)
  _41 = _5
  using: _5@Mir(bb11[0])
  _39 = core::num::<impl u64>::wrapping_add(move _40, move _41) -> bb12
  using: _40@Mir(bb11[1]), _41@Mir(bb11[2])
bb12:
  _42 = const 32_u64
  using: 
  _38 = Le(move _39, move _42)
  using: _39@Mir(bb11[3]), _42@Mir(bb12[0])
  switchInt(move _38) -> [0: bb21, otherwise: bb13]
  using: _38@Mir(bb12[1])
bb13:
  _44 = ((*_1).2: u64)
  using: _1@Entry
  _45 = const 1_u64
  using: 
  _43 = Lt(move _44, move _45)
  using: _44@Mir(bb13[0]), _45@Mir(bb13[1])
  switchInt(move _43) -> [0: bb15, otherwise: bb14]
  using: _43@Mir(bb13[2])
bb14:
  _47 = _1
  using: _1@Entry
  _48 = const 1_u64
  using: 
  _46 = src::allocator::libzahl_realloc(move _47, move _48) -> bb15
  using: _47@Mir(bb14[0]), _48@Mir(bb14[1])
bb15:
  _49 = const 1_i32
  using: 
  ((*_1).1: u64) = move _49 as u64 (IntToInt)
  using: _1@Phi(bb15), _49@Mir(bb15[0])
  _53 = ((*_2).3: *mut u32)
  using: _2@Entry
  _54 = const 0_isize
  using: 
  _52 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _53, move _54) -> bb16
  using: _53@Mir(bb15[2]), _54@Mir(bb15[3])
bb16:
  _51 = (*_52)
  using: _52@Mir(bb15[4])
  _57 = ((*_3).3: *mut u32)
  using: _3@Phi(bb11)
  _58 = const 0_isize
  using: 
  _56 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _57, move _58) -> bb17
  using: _57@Mir(bb16[1]), _58@Mir(bb16[2])
bb17:
  _55 = (*_56)
  using: _56@Mir(bb16[3])
  _50 = core::num::<impl u32>::wrapping_mul(move _51, move _55) -> bb18
  using: _51@Mir(bb16[0]), _55@Mir(bb17[0])
bb18:
  _60 = ((*_1).3: *mut u32)
  using: _1@Phi(bb15)
  _61 = const 0_isize
  using: 
  _59 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _60, move _61) -> bb19
  using: _60@Mir(bb18[0]), _61@Mir(bb18[1])
bb19:
  (*_59) = move _50
  using: _59@Mir(bb18[2]), _50@Mir(bb17[1])
  _62 = _20
  using: _20@Mir(bb1[0])
  _63 = _21
  using: _21@Phi(bb5)
  _64 = CheckedMul(_62, _63)
  using: _62@Mir(bb19[1]), _63@Mir(bb19[2])
  assert(!move (_64.1: bool), "attempt to compute `{} * {}`, which would overflow", move _62, move _63) -> bb20
  using: _64@Entry, _62@Entry, _63@Entry
bb20:
  ((*_1).0: i32) = move (_64.0: i32)
  using: _1@Phi(bb15), _64@Mir(bb19[3])
  goto -> bb101
  using: 
bb21:
  _65 = const 1_i32
  using: 
  ((*_2).0: i32) = move _65
  using: _2@Entry, _65@Mir(bb21[0])
  _66 = const 1_i32
  using: 
  ((*_3).0: i32) = move _66
  using: _3@Phi(bb11), _66@Mir(bb21[2])
  _69 = _4
  using: _4@Phi(bb11)
  _70 = _5
  using: _5@Mir(bb11[0])
  _68 = Gt(move _69, move _70)
  using: _69@Mir(bb21[4]), _70@Mir(bb21[5])
  switchInt(move _68) -> [0: bb23, otherwise: bb22]
  using: _68@Mir(bb21[6])
bb22:
  _67 = _4
  using: _4@Phi(bb11)
  goto -> bb24
  using: 
bb23:
  _67 = _5
  using: _5@Mir(bb11[0])
  goto -> bb24
  using: 
bb24:
  _4 = move _67
  using: _67@Phi(bb24)
  _71 = _4
  using: _4@Mir(bb24[0])
  _72 = const 1_i32
  using: 
  _73 = CheckedShr(_71, _72)
  using: _71@Mir(bb24[1]), _72@Mir(bb24[2])
  assert(!move (_73.1: bool), "attempt to shift right by `{}`, which would overflow", move _72) -> bb25
  using: _73@Entry, _71@Entry, _72@Entry
bb25:
  _5 = move (_73.0: u64)
  using: _73@Mir(bb24[3])
  _77 = &mut _6
  using: _6@Mir(bb0[7])
  _76 = move _77 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _77@Mir(bb25[1])
  _75 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _76) -> bb26
  using: _76@Mir(bb25[2])
bb26:
  _74 = src::zmul::zinit(move _75) -> bb27
  using: _75@Mir(bb25[3])
bb27:
  _81 = &mut _8
  using: _8@Mir(bb0[13])
  _80 = move _81 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _81@Mir(bb27[0])
  _79 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _80) -> bb28
  using: _80@Mir(bb27[1])
bb28:
  _78 = src::zmul::zinit(move _79) -> bb29
  using: _79@Mir(bb27[2])
bb29:
  _85 = &mut _10
  using: _10@Mir(bb0[19])
  _84 = move _85 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _85@Mir(bb29[0])
  _83 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _84) -> bb30
  using: _84@Mir(bb29[1])
bb30:
  _82 = src::zmul::zinit(move _83) -> bb31
  using: _83@Mir(bb29[2])
bb31:
  _89 = &mut _12
  using: _12@Mir(bb0[25])
  _88 = move _89 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _89@Mir(bb31[0])
  _87 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _88) -> bb32
  using: _88@Mir(bb31[1])
bb32:
  _86 = src::zmul::zinit(move _87) -> bb33
  using: _87@Mir(bb31[2])
bb33:
  _93 = &mut _14
  using: _14@Mir(bb0[31])
  _92 = move _93 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _93@Mir(bb33[0])
  _91 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _92) -> bb34
  using: _92@Mir(bb33[1])
bb34:
  _90 = src::zmul::zinit(move _91) -> bb35
  using: _91@Mir(bb33[2])
bb35:
  _97 = &mut _16
  using: _16@Mir(bb0[37])
  _96 = move _97 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _97@Mir(bb35[0])
  _95 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _96) -> bb36
  using: _96@Mir(bb35[1])
bb36:
  _94 = src::zmul::zinit(move _95) -> bb37
  using: _95@Mir(bb35[2])
bb37:
  _101 = &mut _18
  using: _18@Mir(bb0[43])
  _100 = move _101 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _101@Mir(bb37[0])
  _99 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _100) -> bb38
  using: _100@Mir(bb37[1])
bb38:
  _98 = src::zmul::zinit(move _99) -> bb39
  using: _99@Mir(bb37[2])
bb39:
  _105 = &mut _12
  using: _12@Mir(bb0[25])
  _104 = move _105 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _105@Mir(bb39[0])
  _103 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _104) -> bb40
  using: _104@Mir(bb39[1])
bb40:
  _108 = &mut _14
  using: _14@Mir(bb0[31])
  _107 = move _108 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _108@Mir(bb40[0])
  _106 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _107) -> bb41
  using: _107@Mir(bb40[1])
bb41:
  _109 = _2
  using: _2@Entry
  _110 = _5
  using: _5@Mir(bb25[0])
  _102 = src::zsplit::zsplit(move _103, move _106, move _109, move _110) -> bb42
  using: _103@Mir(bb39[2]), _106@Mir(bb40[2]), _109@Mir(bb41[0]), _110@Mir(bb41[1])
bb42:
  _114 = &mut _16
  using: _16@Mir(bb0[37])
  _113 = move _114 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _114@Mir(bb42[0])
  _112 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _113) -> bb43
  using: _113@Mir(bb42[1])
bb43:
  _117 = &mut _18
  using: _18@Mir(bb0[43])
  _116 = move _117 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _117@Mir(bb43[0])
  _115 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _116) -> bb44
  using: _116@Mir(bb43[1])
bb44:
  _118 = _3
  using: _3@Phi(bb11)
  _119 = _5
  using: _5@Mir(bb25[0])
  _111 = src::zsplit::zsplit(move _112, move _115, move _118, move _119) -> bb45
  using: _112@Mir(bb42[2]), _115@Mir(bb43[2]), _118@Mir(bb44[0]), _119@Mir(bb44[1])
bb45:
  _123 = &mut _6
  using: _6@Mir(bb0[7])
  _122 = move _123 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _123@Mir(bb45[0])
  _121 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _122) -> bb46
  using: _122@Mir(bb45[1])
bb46:
  _126 = &mut _14
  using: _14@Mir(bb0[31])
  _125 = move _126 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _126@Mir(bb46[0])
  _124 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _125) -> bb47
  using: _125@Mir(bb46[1])
bb47:
  _129 = &mut _18
  using: _18@Mir(bb0[43])
  _128 = move _129 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _129@Mir(bb47[0])
  _127 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _128) -> bb48
  using: _128@Mir(bb47[1])
bb48:
  _120 = src::zmul::zmul(move _121, move _124, move _127) -> bb49
  using: _121@Mir(bb45[2]), _124@Mir(bb46[2]), _127@Mir(bb47[2])
bb49:
  _133 = &mut _10
  using: _10@Mir(bb0[19])
  _132 = move _133 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _133@Mir(bb49[0])
  _131 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _132) -> bb50
  using: _132@Mir(bb49[1])
bb50:
  _136 = &mut _12
  using: _12@Mir(bb0[25])
  _135 = move _136 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _136@Mir(bb50[0])
  _134 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _135) -> bb51
  using: _135@Mir(bb50[1])
bb51:
  _139 = &mut _16
  using: _16@Mir(bb0[37])
  _138 = move _139 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _139@Mir(bb51[0])
  _137 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _138) -> bb52
  using: _138@Mir(bb51[1])
bb52:
  _130 = src::zmul::zmul(move _131, move _134, move _137) -> bb53
  using: _131@Mir(bb49[2]), _134@Mir(bb50[2]), _137@Mir(bb51[2])
bb53:
  _143 = &mut _14
  using: _14@Mir(bb0[31])
  _142 = move _143 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _143@Mir(bb53[0])
  _141 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _142) -> bb54
  using: _142@Mir(bb53[1])
bb54:
  _146 = &mut _14
  using: _14@Mir(bb0[31])
  _145 = move _146 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _146@Mir(bb54[0])
  _144 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _145) -> bb55
  using: _145@Mir(bb54[1])
bb55:
  _149 = &mut _12
  using: _12@Mir(bb0[25])
  _148 = move _149 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _149@Mir(bb55[0])
  _147 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _148) -> bb56
  using: _148@Mir(bb55[1])
bb56:
  _140 = src::zadd::zadd(move _141, move _144, move _147) -> bb57
  using: _141@Mir(bb53[2]), _144@Mir(bb54[2]), _147@Mir(bb55[2])
bb57:
  _153 = &mut _18
  using: _18@Mir(bb0[43])
  _152 = move _153 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _153@Mir(bb57[0])
  _151 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _152) -> bb58
  using: _152@Mir(bb57[1])
bb58:
  _156 = &mut _18
  using: _18@Mir(bb0[43])
  _155 = move _156 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _156@Mir(bb58[0])
  _154 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _155) -> bb59
  using: _155@Mir(bb58[1])
bb59:
  _159 = &mut _16
  using: _16@Mir(bb0[37])
  _158 = move _159 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _159@Mir(bb59[0])
  _157 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _158) -> bb60
  using: _158@Mir(bb59[1])
bb60:
  _150 = src::zadd::zadd(move _151, move _154, move _157) -> bb61
  using: _151@Mir(bb57[2]), _154@Mir(bb58[2]), _157@Mir(bb59[2])
bb61:
  _163 = &mut _8
  using: _8@Mir(bb0[13])
  _162 = move _163 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _163@Mir(bb61[0])
  _161 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _162) -> bb62
  using: _162@Mir(bb61[1])
bb62:
  _166 = &mut _14
  using: _14@Mir(bb0[31])
  _165 = move _166 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _166@Mir(bb62[0])
  _164 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _165) -> bb63
  using: _165@Mir(bb62[1])
bb63:
  _169 = &mut _18
  using: _18@Mir(bb0[43])
  _168 = move _169 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _169@Mir(bb63[0])
  _167 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _168) -> bb64
  using: _168@Mir(bb63[1])
bb64:
  _160 = src::zmul::zmul(move _161, move _164, move _167) -> bb65
  using: _161@Mir(bb61[2]), _164@Mir(bb62[2]), _167@Mir(bb63[2])
bb65:
  _173 = &mut _8
  using: _8@Mir(bb0[13])
  _172 = move _173 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _173@Mir(bb65[0])
  _171 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _172) -> bb66
  using: _172@Mir(bb65[1])
bb66:
  _176 = &mut _8
  using: _8@Mir(bb0[13])
  _175 = move _176 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _176@Mir(bb66[0])
  _174 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _175) -> bb67
  using: _175@Mir(bb66[1])
bb67:
  _179 = &mut _6
  using: _6@Mir(bb0[7])
  _178 = move _179 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _179@Mir(bb67[0])
  _177 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _178) -> bb68
  using: _178@Mir(bb67[1])
bb68:
  _170 = src::zsub::zsub(move _171, move _174, move _177) -> bb69
  using: _171@Mir(bb65[2]), _174@Mir(bb66[2]), _177@Mir(bb67[2])
bb69:
  _183 = &mut _8
  using: _8@Mir(bb0[13])
  _182 = move _183 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _183@Mir(bb69[0])
  _181 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _182) -> bb70
  using: _182@Mir(bb69[1])
bb70:
  _186 = &mut _8
  using: _8@Mir(bb0[13])
  _185 = move _186 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _186@Mir(bb70[0])
  _184 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _185) -> bb71
  using: _185@Mir(bb70[1])
bb71:
  _189 = &mut _10
  using: _10@Mir(bb0[19])
  _188 = move _189 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _189@Mir(bb71[0])
  _187 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _188) -> bb72
  using: _188@Mir(bb71[1])
bb72:
  _180 = src::zsub::zsub(move _181, move _184, move _187) -> bb73
  using: _181@Mir(bb69[2]), _184@Mir(bb70[2]), _187@Mir(bb71[2])
bb73:
  _193 = &mut _8
  using: _8@Mir(bb0[13])
  _192 = move _193 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _193@Mir(bb73[0])
  _191 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _192) -> bb74
  using: _192@Mir(bb73[1])
bb74:
  _196 = &mut _8
  using: _8@Mir(bb0[13])
  _195 = move _196 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _196@Mir(bb74[0])
  _194 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _195) -> bb75
  using: _195@Mir(bb74[1])
bb75:
  _197 = _5
  using: _5@Mir(bb25[0])
  _190 = src::zlsh::zlsh(move _191, move _194, move _197) -> bb76
  using: _191@Mir(bb73[2]), _194@Mir(bb74[2]), _197@Mir(bb75[0])
bb76:
  _198 = const 1_i32
  using: 
  _199 = CheckedShl(_5, _198)
  using: _5@Mir(bb25[0]), _198@Mir(bb76[0])
  assert(!move (_199.1: bool), "attempt to shift left by `{}`, which would overflow", move _198) -> bb77
  using: _199@Entry, _5@Entry, _198@Entry
bb77:
  _5 = move (_199.0: u64)
  using: _199@Mir(bb76[1])
  _203 = &mut _10
  using: _10@Mir(bb0[19])
  _202 = move _203 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _203@Mir(bb77[1])
  _201 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _202) -> bb78
  using: _202@Mir(bb77[2])
bb78:
  _206 = &mut _10
  using: _10@Mir(bb0[19])
  _205 = move _206 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _206@Mir(bb78[0])
  _204 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _205) -> bb79
  using: _205@Mir(bb78[1])
bb79:
  _207 = _5
  using: _5@Mir(bb77[0])
  _200 = src::zlsh::zlsh(move _201, move _204, move _207) -> bb80
  using: _201@Mir(bb77[3]), _204@Mir(bb78[2]), _207@Mir(bb79[0])
bb80:
  _209 = _1
  using: _1@Phi(bb15)
  _212 = &mut _10
  using: _10@Mir(bb0[19])
  _211 = move _212 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _212@Mir(bb80[1])
  _210 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _211) -> bb81
  using: _211@Mir(bb80[2])
bb81:
  _215 = &mut _8
  using: _8@Mir(bb0[13])
  _214 = move _215 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _215@Mir(bb81[0])
  _213 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _214) -> bb82
  using: _214@Mir(bb81[1])
bb82:
  _208 = src::zadd::zadd(move _209, move _210, move _213) -> bb83
  using: _209@Mir(bb80[0]), _210@Mir(bb80[3]), _213@Mir(bb81[2])
bb83:
  _217 = _1
  using: _1@Phi(bb15)
  _218 = _1
  using: _1@Phi(bb15)
  _221 = &mut _6
  using: _6@Mir(bb0[7])
  _220 = move _221 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _221@Mir(bb83[2])
  _219 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _220) -> bb84
  using: _220@Mir(bb83[3])
bb84:
  _216 = src::zadd::zadd(move _217, move _218, move _219) -> bb85
  using: _217@Mir(bb83[0]), _218@Mir(bb83[1]), _219@Mir(bb83[4])
bb85:
  _225 = &mut _6
  using: _6@Mir(bb0[7])
  _224 = move _225 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _225@Mir(bb85[0])
  _223 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _224) -> bb86
  using: _224@Mir(bb85[1])
bb86:
  _222 = src::zfree::zfree(move _223) -> bb87
  using: _223@Mir(bb85[2])
bb87:
  _229 = &mut _8
  using: _8@Mir(bb0[13])
  _228 = move _229 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _229@Mir(bb87[0])
  _227 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _228) -> bb88
  using: _228@Mir(bb87[1])
bb88:
  _226 = src::zfree::zfree(move _227) -> bb89
  using: _227@Mir(bb87[2])
bb89:
  _233 = &mut _10
  using: _10@Mir(bb0[19])
  _232 = move _233 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _233@Mir(bb89[0])
  _231 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _232) -> bb90
  using: _232@Mir(bb89[1])
bb90:
  _230 = src::zfree::zfree(move _231) -> bb91
  using: _231@Mir(bb89[2])
bb91:
  _237 = &mut _12
  using: _12@Mir(bb0[25])
  _236 = move _237 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _237@Mir(bb91[0])
  _235 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _236) -> bb92
  using: _236@Mir(bb91[1])
bb92:
  _234 = src::zfree::zfree(move _235) -> bb93
  using: _235@Mir(bb91[2])
bb93:
  _241 = &mut _14
  using: _14@Mir(bb0[31])
  _240 = move _241 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _241@Mir(bb93[0])
  _239 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _240) -> bb94
  using: _240@Mir(bb93[1])
bb94:
  _238 = src::zfree::zfree(move _239) -> bb95
  using: _239@Mir(bb93[2])
bb95:
  _245 = &mut _16
  using: _16@Mir(bb0[37])
  _244 = move _245 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _245@Mir(bb95[0])
  _243 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _244) -> bb96
  using: _244@Mir(bb95[1])
bb96:
  _242 = src::zfree::zfree(move _243) -> bb97
  using: _243@Mir(bb95[2])
bb97:
  _249 = &mut _18
  using: _18@Mir(bb0[43])
  _248 = move _249 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _249@Mir(bb97[0])
  _247 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _248) -> bb98
  using: _248@Mir(bb97[1])
bb98:
  _246 = src::zfree::zfree(move _247) -> bb99
  using: _247@Mir(bb97[2])
bb99:
  _250 = _20
  using: _20@Mir(bb1[0])
  ((*_2).0: i32) = move _250
  using: _2@Entry, _250@Mir(bb99[0])
  _251 = _21
  using: _21@Phi(bb5)
  ((*_3).0: i32) = move _251
  using: _3@Phi(bb11), _251@Mir(bb99[2])
  _252 = _20
  using: _20@Mir(bb1[0])
  _253 = _21
  using: _21@Phi(bb5)
  _254 = CheckedMul(_252, _253)
  using: _252@Mir(bb99[4]), _253@Mir(bb99[5])
  assert(!move (_254.1: bool), "attempt to compute `{} * {}`, which would overflow", move _252, move _253) -> bb100
  using: _254@Entry, _252@Entry, _253@Entry
bb100:
  ((*_1).0: i32) = move (_254.0: i32)
  using: _1@Phi(bb15), _254@Mir(bb99[6])
  goto -> bb101
  using: 
bb101:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_7) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _7; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_9) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _9; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_11) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _11; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_13) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _13; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_15) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _15; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_17) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _17; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_19) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _19; 1] is not supported
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zmul.rs:88:10: 88:26 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zmul.rs:96:32: 96:65 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zmul.rs:97:41: 97:74 (#0) by default
rewrite call core::num::<impl u32>::wrapping_mul @ workspace/libzahl/src/zmul.rs:97:14: 97:75 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zmul.rs:94:14: 96:14 (#0) by default
@DefId(0:337 ~ lib[40c5]::src::zneg::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:338 ~ lib[40c5]::src::zneg::zneg)
bb0:
  _4 = _1
  using: _1@Entry
  _5 = _2
  using: _2@Entry
  _3 = Ne(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb2, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _7 = _1
  using: _1@Entry
  _8 = _2
  using: _2@Entry
  _6 = src::zset::zset(move _7, move _8) -> bb2
  using: _7@Mir(bb1[0]), _8@Mir(bb1[1])
bb2:
  _10 = _1
  using: _1@Phi(bb2)
  _9 = src::zneg::zsignum(move _10) -> bb3
  using: _10@Mir(bb2[0])
bb3:
  _11 = Eq(_9, const i32::MIN)
  using: _9@Mir(bb2[1])
  assert(!move _11, "attempt to negate `{}`, which would overflow", _9) -> bb4
  using: _11@Entry, _9@Entry
bb4:
  ((*_1).0: i32) = Neg(move _9)
  using: _1@Phi(bb2), _9@Mir(bb2[1])
  return
  using: _0@Entry
@DefId(0:346 ~ lib[40c5]::src::znot::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:347 ~ lib[40c5]::src::znot::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:348 ~ lib[40c5]::src::znot::znot)
bb0:
  _3 = const 0_u64
  using: 
  _4 = const 0_u64
  using: 
  _6 = _2
  using: _2@Entry
  _5 = src::znot::zzero(move _6) -> bb1
  using: _6@Mir(bb0[2])
bb1:
  switchInt(move _5) -> [0: bb3, otherwise: bb2]
  using: _5@Mir(bb0[3])
bb2:
  _7 = const 0_i32
  using: 
  ((*_1).0: i32) = move _7
  using: _1@Entry, _7@Mir(bb2[0])
  goto -> bb30
  using: 
bb3:
  _9 = _2
  using: _2@Entry
  _8 = src::zbits::zbits(move _9) -> bb4
  using: _9@Mir(bb3[0])
bb4:
  _3 = move _8
  using: _8@Mir(bb3[1])
  _11 = _1
  using: _1@Entry
  _12 = _2
  using: _2@Entry
  _10 = Ne(move _11, move _12)
  using: _11@Mir(bb4[1]), _12@Mir(bb4[2])
  switchInt(move _10) -> [0: bb6, otherwise: bb5]
  using: _10@Mir(bb4[3])
bb5:
  _14 = _1
  using: _1@Entry
  _15 = _2
  using: _2@Entry
  _13 = src::zset::zset(move _14, move _15) -> bb6
  using: _14@Mir(bb5[0]), _15@Mir(bb5[1])
bb6:
  _17 = _1
  using: _1@Phi(bb6)
  _16 = src::znot::zsignum(move _17) -> bb7
  using: _17@Mir(bb6[0])
bb7:
  _18 = Eq(_16, const i32::MIN)
  using: _16@Mir(bb6[1])
  assert(!move _18, "attempt to negate `{}`, which would overflow", _16) -> bb8
  using: _18@Entry, _16@Entry
bb8:
  ((*_1).0: i32) = Neg(move _16)
  using: _1@Phi(bb6), _16@Mir(bb6[1])
  _19 = ((*_1).1: u64)
  using: _1@Phi(bb6)
  _4 = move _19
  using: _19@Mir(bb8[1])
  goto -> bb9
  using: 
bb9:
  _20 = _4
  using: _4@Phi(bb9)
  _22 = _4
  using: _4@Phi(bb9)
  _21 = core::num::<impl u64>::wrapping_sub(move _22, const 1_u64) -> bb10
  using: _22@Mir(bb9[1])
bb10:
  _4 = move _21
  using: _21@Mir(bb9[2])
  _25 = _20
  using: _20@Mir(bb9[0])
  _24 = Ne(move _25, const 0_u64)
  using: _25@Mir(bb10[1])
  _23 = Not(move _24)
  using: _24@Mir(bb10[2])
  switchInt(move _23) -> [0: bb12, otherwise: bb11]
  using: _23@Mir(bb10[3])
bb11:
  _35 = _3
  using: _3@Mir(bb4[0])
  _36 = const 31_u64
  using: 
  _3 = BitAnd(move _35, move _36)
  using: _35@Mir(bb11[0]), _36@Mir(bb11[1])
  _37 = _3
  using: _3@Mir(bb11[2])
  switchInt(move _37) -> [0: bb20, otherwise: bb15]
  using: _37@Mir(bb11[3])
bb12:
  _28 = ((*_1).3: *mut u32)
  using: _1@Phi(bb23)
  _30 = _4
  using: _4@Mir(bb10[0])
  _29 = move _30 as isize (IntToInt)
  using: _30@Mir(bb12[1])
  _27 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _28, move _29) -> bb13
  using: _28@Mir(bb12[0]), _29@Mir(bb12[2])
bb13:
  _26 = (*_27)
  using: _27@Mir(bb12[3])
  _32 = ((*_1).3: *mut u32)
  using: _1@Phi(bb23)
  _34 = _4
  using: _4@Mir(bb10[0])
  _33 = move _34 as isize (IntToInt)
  using: _34@Mir(bb13[2])
  _31 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _32, move _33) -> bb14
  using: _32@Mir(bb13[1]), _33@Mir(bb13[3])
bb14:
  (*_31) = Not(move _26)
  using: _31@Mir(bb13[4]), _26@Mir(bb13[0])
  goto -> bb9
  using: 
bb15:
  _40 = const 1_u32
  using: 
  _41 = _3
  using: _3@Mir(bb11[2])
  _42 = CheckedShl(_40, _41)
  using: _40@Mir(bb15[0]), _41@Mir(bb15[1])
  assert(!move (_42.1: bool), "attempt to shift left by `{}`, which would overflow", move _41) -> bb16
  using: _42@Entry, _40@Entry, _41@Entry
bb16:
  _39 = move (_42.0: u32)
  using: _42@Mir(bb15[2])
  _43 = const 1_u32
  using: 
  _38 = core::num::<impl u32>::wrapping_sub(move _39, move _43) -> bb17
  using: _39@Mir(bb16[0]), _43@Mir(bb16[1])
bb17:
  _45 = ((*_1).3: *mut u32)
  using: _1@Phi(bb9)
  _48 = ((*_1).1: u64)
  using: _1@Phi(bb9)
  _49 = const 1_u64
  using: 
  _47 = core::num::<impl u64>::wrapping_sub(move _48, move _49) -> bb18
  using: _48@Mir(bb17[1]), _49@Mir(bb17[2])
bb18:
  _46 = move _47 as isize (IntToInt)
  using: _47@Mir(bb17[3])
  _44 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _45, move _46) -> bb19
  using: _45@Mir(bb17[0]), _46@Mir(bb18[0])
bb19:
  (*_44) = BitAnd((*_44), move _38)
  using: _44@Mir(bb18[1]), _44@Mir(bb18[1]), _38@Mir(bb16[2])
  goto -> bb20
  using: 
bb20:
  _51 = ((*_1).1: u64)
  using: _1@Phi(bb20)
  switchInt(move _51) -> [0: bb21, otherwise: bb22]
  using: _51@Mir(bb20[0])
bb21:
  _50 = const false
  using: 
  goto -> bb23
  using: 
bb22:
  _55 = ((*_1).3: *mut u32)
  using: _1@Phi(bb20)
  _58 = ((*_1).1: u64)
  using: _1@Phi(bb20)
  _59 = const 1_u64
  using: 
  _57 = core::num::<impl u64>::wrapping_sub(move _58, move _59) -> bb24
  using: _58@Mir(bb22[1]), _59@Mir(bb22[2])
bb23:
  switchInt(move _50) -> [0: bb28, otherwise: bb26]
  using: _50@Phi(bb23)
bb24:
  _56 = move _57 as isize (IntToInt)
  using: _57@Mir(bb22[3])
  _54 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _55, move _56) -> bb25
  using: _55@Mir(bb22[0]), _56@Mir(bb24[0])
bb25:
  _53 = (*_54)
  using: _54@Mir(bb24[1])
  _52 = Eq(move _53, const 0_u32)
  using: _53@Mir(bb25[0])
  _50 = move _52
  using: _52@Mir(bb25[1])
  goto -> bb23
  using: 
bb26:
  _61 = ((*_1).1: u64)
  using: _1@Phi(bb23)
  _60 = core::num::<impl u64>::wrapping_sub(move _61, const 1_u64) -> bb27
  using: _61@Mir(bb26[0])
bb27:
  ((*_1).1: u64) = move _60
  using: _1@Phi(bb23), _60@Mir(bb26[1])
  goto -> bb20
  using: 
bb28:
  _62 = ((*_1).1: u64)
  using: _1@Phi(bb23)
  switchInt(move _62) -> [0: bb29, otherwise: bb30]
  using: _62@Mir(bb28[0])
bb29:
  _63 = const 0_i32
  using: 
  ((*_1).0: i32) = move _63
  using: _1@Phi(bb23), _63@Mir(bb29[0])
  goto -> bb30
  using: 
bb30:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/znot.rs:37:15: 37:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/znot.rs:41:59: 41:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/znot.rs:41:23: 41:41 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/znot.rs:49:18: 49:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/znot.rs:47:29: 47:76 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/znot.rs:46:14: 48:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/znot.rs:53:33: 53:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/znot.rs:53:14: 53:90 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/znot.rs:56:33: 56:48 (#0) by default
@DefId(0:357 ~ lib[40c5]::src::zor::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:358 ~ lib[40c5]::src::zor::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:359 ~ lib[40c5]::src::zor::zor)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _7 = _2
  using: _2@Entry
  _6 = src::zor::zzero(move _7) -> bb1
  using: _7@Mir(bb0[2])
bb1:
  switchInt(move _6) -> [0: bb7, otherwise: bb2]
  using: _6@Mir(bb0[3])
bb2:
  _9 = _3
  using: _3@Entry
  _8 = src::zor::zzero(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  switchInt(move _8) -> [0: bb5, otherwise: bb4]
  using: _8@Mir(bb2[1])
bb4:
  _10 = const 0_i32
  using: 
  ((*_1).0: i32) = move _10
  using: _1@Entry, _10@Mir(bb4[0])
  goto -> bb69
  using: 
bb5:
  _12 = _1
  using: _1@Entry
  _13 = _3
  using: _3@Entry
  _11 = Ne(move _12, move _13)
  using: _12@Mir(bb5[0]), _13@Mir(bb5[1])
  switchInt(move _11) -> [0: bb69, otherwise: bb6]
  using: _11@Mir(bb5[2])
bb6:
  _15 = _1
  using: _1@Entry
  _16 = _3
  using: _3@Entry
  _14 = src::zset::zset(move _15, move _16) -> bb69
  using: _15@Mir(bb6[0]), _16@Mir(bb6[1])
bb7:
  _18 = _3
  using: _3@Entry
  _17 = src::zor::zzero(move _18) -> bb8
  using: _18@Mir(bb7[0])
bb8:
  switchInt(move _17) -> [0: bb11, otherwise: bb9]
  using: _17@Mir(bb7[1])
bb9:
  _20 = _1
  using: _1@Entry
  _21 = _2
  using: _2@Entry
  _19 = Ne(move _20, move _21)
  using: _20@Mir(bb9[0]), _21@Mir(bb9[1])
  switchInt(move _19) -> [0: bb69, otherwise: bb10]
  using: _19@Mir(bb9[2])
bb10:
  _23 = _1
  using: _1@Entry
  _24 = _2
  using: _2@Entry
  _22 = src::zset::zset(move _23, move _24) -> bb69
  using: _23@Mir(bb10[0]), _24@Mir(bb10[1])
bb11:
  _27 = ((*_2).1: u64)
  using: _2@Entry
  _28 = ((*_3).1: u64)
  using: _3@Entry
  _26 = Gt(move _27, move _28)
  using: _27@Mir(bb11[0]), _28@Mir(bb11[1])
  switchInt(move _26) -> [0: bb13, otherwise: bb12]
  using: _26@Mir(bb11[2])
bb12:
  _25 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb14
  using: 
bb13:
  _25 = ((*_3).1: u64)
  using: _3@Entry
  goto -> bb14
  using: 
bb14:
  _5 = move _25
  using: _25@Phi(bb14)
  _31 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _32 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  _30 = core::num::<impl u64>::wrapping_add(move _31, move _32) -> bb15
  using: _31@Mir(bb14[1]), _32@Mir(bb14[2])
bb15:
  _33 = _5
  using: _5@Mir(bb14[0])
  _29 = core::num::<impl u64>::wrapping_sub(move _30, move _33) -> bb16
  using: _30@Mir(bb14[3]), _33@Mir(bb15[0])
bb16:
  _4 = move _29
  using: _29@Mir(bb15[1])
  _35 = ((*_1).2: u64)
  using: _1@Entry
  _36 = _5
  using: _5@Mir(bb14[0])
  _34 = Lt(move _35, move _36)
  using: _35@Mir(bb16[1]), _36@Mir(bb16[2])
  switchInt(move _34) -> [0: bb18, otherwise: bb17]
  using: _34@Mir(bb16[3])
bb17:
  _38 = _1
  using: _1@Entry
  _39 = _5
  using: _5@Mir(bb14[0])
  _37 = src::allocator::libzahl_realloc(move _38, move _39) -> bb18
  using: _38@Mir(bb17[0]), _39@Mir(bb17[1])
bb18:
  _41 = _1
  using: _1@Phi(bb18)
  _42 = _2
  using: _2@Phi(bb14)
  _40 = Eq(move _41, move _42)
  using: _41@Mir(bb18[0]), _42@Mir(bb18[1])
  switchInt(move _40) -> [0: bb31, otherwise: bb19]
  using: _40@Mir(bb18[2])
bb19:
  _44 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _45 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  _43 = Lt(move _44, move _45)
  using: _44@Mir(bb19[0]), _45@Mir(bb19[1])
  switchInt(move _43) -> [0: bb26, otherwise: bb20]
  using: _43@Mir(bb19[2])
bb20:
  _49 = ((*_1).3: *mut u32)
  using: _1@Phi(bb18)
  _51 = _4
  using: _4@Mir(bb16[0])
  _50 = move _51 as isize (IntToInt)
  using: _51@Mir(bb20[1])
  _48 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _49, move _50) -> bb21
  using: _49@Mir(bb20[0]), _50@Mir(bb20[2])
bb21:
  _47 = move _48 as *mut libc::c_void (PtrToPtr)
  using: _48@Mir(bb20[3])
  _54 = ((*_3).3: *mut u32)
  using: _3@Phi(bb14)
  _56 = _4
  using: _4@Mir(bb16[0])
  _55 = move _56 as isize (IntToInt)
  using: _56@Mir(bb21[2])
  _53 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _54, move _55) -> bb22
  using: _54@Mir(bb21[1]), _55@Mir(bb21[3])
bb22:
  _52 = move _53 as *const libc::c_void (PtrToPtr)
  using: _53@Mir(bb21[4])
  _59 = _5
  using: _5@Phi(bb18)
  _60 = _4
  using: _4@Mir(bb16[0])
  _58 = core::num::<impl u64>::wrapping_sub(move _59, move _60) -> bb23
  using: _59@Mir(bb22[1]), _60@Mir(bb22[2])
bb23:
  _62 = std::mem::size_of::<u32>() -> bb24
  using: 
bb24:
  _61 = move _62 as u64 (IntToInt)
  using: _62@Mir(bb23[0])
  _57 = core::num::<impl u64>::wrapping_mul(move _58, move _61) -> bb25
  using: _58@Mir(bb22[3]), _61@Mir(bb24[0])
bb25:
  _46 = src::zor::memcpy(move _47, move _52, move _57) -> bb26
  using: _47@Mir(bb21[0]), _52@Mir(bb22[0]), _57@Mir(bb24[1])
bb26:
  _63 = _4
  using: _4@Phi(bb26)
  _65 = _4
  using: _4@Phi(bb26)
  _64 = core::num::<impl u64>::wrapping_sub(move _65, const 1_u64) -> bb27
  using: _65@Mir(bb26[1])
bb27:
  _4 = move _64
  using: _64@Mir(bb26[2])
  _68 = _63
  using: _63@Mir(bb26[0])
  _67 = Ne(move _68, const 0_u64)
  using: _68@Mir(bb27[1])
  _66 = Not(move _67)
  using: _67@Mir(bb27[2])
  switchInt(move _66) -> [0: bb28, otherwise: bb61]
  using: _66@Mir(bb27[3])
bb28:
  _71 = ((*_3).3: *mut u32)
  using: _3@Phi(bb26)
  _73 = _4
  using: _4@Mir(bb27[0])
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb28[1])
  _70 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _71, move _72) -> bb29
  using: _71@Mir(bb28[0]), _72@Mir(bb28[2])
bb29:
  _69 = (*_70)
  using: _70@Mir(bb28[3])
  _75 = ((*_1).3: *mut u32)
  using: _1@Phi(bb26)
  _77 = _4
  using: _4@Mir(bb27[0])
  _76 = move _77 as isize (IntToInt)
  using: _77@Mir(bb29[2])
  _74 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _75, move _76) -> bb30
  using: _75@Mir(bb29[1]), _76@Mir(bb29[3])
bb30:
  (*_74) = move _69
  using: _74@Mir(bb29[4]), _69@Mir(bb29[0])
  goto -> bb26
  using: 
bb31:
  _79 = _1
  using: _1@Phi(bb26)
  _80 = _3
  using: _3@Phi(bb26)
  _78 = Eq(move _79, move _80)
  using: _79@Mir(bb31[0]), _80@Mir(bb31[1])
  switchInt(move _78) -> [0: bb44, otherwise: bb32]
  using: _78@Mir(bb31[2])
bb32:
  _82 = ((*_3).1: u64)
  using: _3@Phi(bb26)
  _83 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _81 = Lt(move _82, move _83)
  using: _82@Mir(bb32[0]), _83@Mir(bb32[1])
  switchInt(move _81) -> [0: bb39, otherwise: bb33]
  using: _81@Mir(bb32[2])
bb33:
  _87 = ((*_1).3: *mut u32)
  using: _1@Phi(bb26)
  _89 = _4
  using: _4@Phi(bb26)
  _88 = move _89 as isize (IntToInt)
  using: _89@Mir(bb33[1])
  _86 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _87, move _88) -> bb34
  using: _87@Mir(bb33[0]), _88@Mir(bb33[2])
bb34:
  _85 = move _86 as *mut libc::c_void (PtrToPtr)
  using: _86@Mir(bb33[3])
  _92 = ((*_2).3: *mut u32)
  using: _2@Phi(bb14)
  _94 = _4
  using: _4@Phi(bb26)
  _93 = move _94 as isize (IntToInt)
  using: _94@Mir(bb34[2])
  _91 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _92, move _93) -> bb35
  using: _92@Mir(bb34[1]), _93@Mir(bb34[3])
bb35:
  _90 = move _91 as *const libc::c_void (PtrToPtr)
  using: _91@Mir(bb34[4])
  _97 = _5
  using: _5@Phi(bb26)
  _98 = _4
  using: _4@Phi(bb26)
  _96 = core::num::<impl u64>::wrapping_sub(move _97, move _98) -> bb36
  using: _97@Mir(bb35[1]), _98@Mir(bb35[2])
bb36:
  _100 = std::mem::size_of::<u32>() -> bb37
  using: 
bb37:
  _99 = move _100 as u64 (IntToInt)
  using: _100@Mir(bb36[0])
  _95 = core::num::<impl u64>::wrapping_mul(move _96, move _99) -> bb38
  using: _96@Mir(bb35[3]), _99@Mir(bb37[0])
bb38:
  _84 = src::zor::memcpy(move _85, move _90, move _95) -> bb39
  using: _85@Mir(bb34[0]), _90@Mir(bb35[0]), _95@Mir(bb37[1])
bb39:
  _101 = _4
  using: _4@Phi(bb39)
  _103 = _4
  using: _4@Phi(bb39)
  _102 = core::num::<impl u64>::wrapping_sub(move _103, const 1_u64) -> bb40
  using: _103@Mir(bb39[1])
bb40:
  _4 = move _102
  using: _102@Mir(bb39[2])
  _106 = _101
  using: _101@Mir(bb39[0])
  _105 = Ne(move _106, const 0_u64)
  using: _106@Mir(bb40[1])
  _104 = Not(move _105)
  using: _105@Mir(bb40[2])
  switchInt(move _104) -> [0: bb41, otherwise: bb61]
  using: _104@Mir(bb40[3])
bb41:
  _109 = ((*_2).3: *mut u32)
  using: _2@Phi(bb39)
  _111 = _4
  using: _4@Mir(bb40[0])
  _110 = move _111 as isize (IntToInt)
  using: _111@Mir(bb41[1])
  _108 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _109, move _110) -> bb42
  using: _109@Mir(bb41[0]), _110@Mir(bb41[2])
bb42:
  _107 = (*_108)
  using: _108@Mir(bb41[3])
  _113 = ((*_1).3: *mut u32)
  using: _1@Phi(bb39)
  _115 = _4
  using: _4@Mir(bb40[0])
  _114 = move _115 as isize (IntToInt)
  using: _115@Mir(bb42[2])
  _112 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _113, move _114) -> bb43
  using: _113@Mir(bb42[1]), _114@Mir(bb42[3])
bb43:
  (*_112) = move _107
  using: _112@Mir(bb42[4]), _107@Mir(bb42[0])
  goto -> bb39
  using: 
bb44:
  _117 = _5
  using: _5@Phi(bb39)
  _118 = ((*_2).1: u64)
  using: _2@Phi(bb39)
  _116 = Eq(move _117, move _118)
  using: _117@Mir(bb44[0]), _118@Mir(bb44[1])
  switchInt(move _116) -> [0: bb53, otherwise: bb45]
  using: _116@Mir(bb44[2])
bb45:
  _121 = ((*_1).3: *mut u32)
  using: _1@Phi(bb39)
  _120 = move _121 as *mut libc::c_void (PtrToPtr)
  using: _121@Mir(bb45[0])
  _123 = ((*_2).3: *mut u32)
  using: _2@Phi(bb39)
  _122 = move _123 as *const libc::c_void (PtrToPtr)
  using: _123@Mir(bb45[2])
  _125 = _5
  using: _5@Phi(bb39)
  _127 = std::mem::size_of::<u32>() -> bb46
  using: 
bb46:
  _126 = move _127 as u64 (IntToInt)
  using: _127@Mir(bb45[5])
  _124 = core::num::<impl u64>::wrapping_mul(move _125, move _126) -> bb47
  using: _125@Mir(bb45[4]), _126@Mir(bb46[0])
bb47:
  _119 = src::zor::memcpy(move _120, move _122, move _124) -> bb48
  using: _120@Mir(bb45[1]), _122@Mir(bb45[3]), _124@Mir(bb46[1])
bb48:
  _128 = _4
  using: _4@Phi(bb48)
  _130 = _4
  using: _4@Phi(bb48)
  _129 = core::num::<impl u64>::wrapping_sub(move _130, const 1_u64) -> bb49
  using: _130@Mir(bb48[1])
bb49:
  _4 = move _129
  using: _129@Mir(bb48[2])
  _133 = _128
  using: _128@Mir(bb48[0])
  _132 = Ne(move _133, const 0_u64)
  using: _133@Mir(bb49[1])
  _131 = Not(move _132)
  using: _132@Mir(bb49[2])
  switchInt(move _131) -> [0: bb50, otherwise: bb61]
  using: _131@Mir(bb49[3])
bb50:
  _136 = ((*_3).3: *mut u32)
  using: _3@Phi(bb48)
  _138 = _4
  using: _4@Mir(bb49[0])
  _137 = move _138 as isize (IntToInt)
  using: _138@Mir(bb50[1])
  _135 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _136, move _137) -> bb51
  using: _136@Mir(bb50[0]), _137@Mir(bb50[2])
bb51:
  _134 = (*_135)
  using: _135@Mir(bb50[3])
  _140 = ((*_1).3: *mut u32)
  using: _1@Phi(bb48)
  _142 = _4
  using: _4@Mir(bb49[0])
  _141 = move _142 as isize (IntToInt)
  using: _142@Mir(bb51[2])
  _139 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _140, move _141) -> bb52
  using: _140@Mir(bb51[1]), _141@Mir(bb51[3])
bb52:
  (*_139) = move _134
  using: _139@Mir(bb51[4]), _134@Mir(bb51[0])
  goto -> bb48
  using: 
bb53:
  _145 = ((*_1).3: *mut u32)
  using: _1@Phi(bb48)
  _144 = move _145 as *mut libc::c_void (PtrToPtr)
  using: _145@Mir(bb53[0])
  _147 = ((*_3).3: *mut u32)
  using: _3@Phi(bb48)
  _146 = move _147 as *const libc::c_void (PtrToPtr)
  using: _147@Mir(bb53[2])
  _149 = _5
  using: _5@Phi(bb39)
  _151 = std::mem::size_of::<u32>() -> bb54
  using: 
bb54:
  _150 = move _151 as u64 (IntToInt)
  using: _151@Mir(bb53[5])
  _148 = core::num::<impl u64>::wrapping_mul(move _149, move _150) -> bb55
  using: _149@Mir(bb53[4]), _150@Mir(bb54[0])
bb55:
  _143 = src::zor::memcpy(move _144, move _146, move _148) -> bb56
  using: _144@Mir(bb53[1]), _146@Mir(bb53[3]), _148@Mir(bb54[1])
bb56:
  _152 = _4
  using: _4@Phi(bb56)
  _154 = _4
  using: _4@Phi(bb56)
  _153 = core::num::<impl u64>::wrapping_sub(move _154, const 1_u64) -> bb57
  using: _154@Mir(bb56[1])
bb57:
  _4 = move _153
  using: _153@Mir(bb56[2])
  _157 = _152
  using: _152@Mir(bb56[0])
  _156 = Ne(move _157, const 0_u64)
  using: _157@Mir(bb57[1])
  _155 = Not(move _156)
  using: _156@Mir(bb57[2])
  switchInt(move _155) -> [0: bb58, otherwise: bb61]
  using: _155@Mir(bb57[3])
bb58:
  _160 = ((*_2).3: *mut u32)
  using: _2@Phi(bb56)
  _162 = _4
  using: _4@Mir(bb57[0])
  _161 = move _162 as isize (IntToInt)
  using: _162@Mir(bb58[1])
  _159 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _160, move _161) -> bb59
  using: _160@Mir(bb58[0]), _161@Mir(bb58[2])
bb59:
  _158 = (*_159)
  using: _159@Mir(bb58[3])
  _164 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _166 = _4
  using: _4@Mir(bb57[0])
  _165 = move _166 as isize (IntToInt)
  using: _166@Mir(bb59[2])
  _163 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _164, move _165) -> bb60
  using: _164@Mir(bb59[1]), _165@Mir(bb59[3])
bb60:
  (*_163) = move _158
  using: _163@Mir(bb59[4]), _158@Mir(bb59[0])
  goto -> bb56
  using: 
bb61:
  _167 = _5
  using: _5@Phi(bb61)
  ((*_1).1: u64) = move _167
  using: _1@Phi(bb61), _167@Mir(bb61[0])
  _173 = _2
  using: _2@Phi(bb61)
  _172 = src::zor::zsignum(move _173) -> bb65
  using: _173@Mir(bb61[2])
bb62:
  _170 = const false
  using: 
  goto -> bb64
  using: 
bb63:
  _177 = _3
  using: _3@Phi(bb61)
  _176 = src::zor::zsignum(move _177) -> bb66
  using: _177@Mir(bb63[0])
bb64:
  _169 = move _170 as i32 (IntToInt)
  using: _170@Phi(bb64)
  _179 = const 2_i32
  using: 
  _180 = CheckedMul(_169, _179)
  using: _169@Mir(bb64[0]), _179@Mir(bb64[1])
  assert(!move (_180.1: bool), "attempt to compute `{} * {}`, which would overflow", move _169, move _179) -> bb67
  using: _180@Entry, _169@Entry, _179@Entry
bb65:
  _174 = const 0_i32
  using: 
  _171 = Gt(move _172, move _174)
  using: _172@Mir(bb61[3]), _174@Mir(bb65[0])
  switchInt(move _171) -> [0: bb62, otherwise: bb63]
  using: _171@Mir(bb65[1])
bb66:
  _178 = const 0_i32
  using: 
  _175 = Gt(move _176, move _178)
  using: _176@Mir(bb63[1]), _178@Mir(bb66[0])
  _170 = move _175
  using: _175@Mir(bb66[1])
  goto -> bb64
  using: 
bb67:
  _168 = move (_180.0: i32)
  using: _180@Mir(bb64[2])
  _181 = const 1_i32
  using: 
  _182 = CheckedSub(_168, _181)
  using: _168@Mir(bb67[0]), _181@Mir(bb67[1])
  assert(!move (_182.1: bool), "attempt to compute `{} - {}`, which would overflow", move _168, move _181) -> bb68
  using: _182@Entry, _168@Entry, _181@Entry
bb68:
  ((*_1).0: i32) = move (_182.0: i32)
  using: _1@Phi(bb61), _182@Mir(bb67[2])
  goto -> bb69
  using: 
bb69:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zor.rs:50:21: 50:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:50:45: 50:60 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:57:30: 57:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:58:30: 58:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:60:22: 60:37 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zor.rs:61:35: 61:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zor.rs:61:22: 61:89 (#0) by default
rewrite call src::zor::memcpy @ workspace/libzahl/src/zor.rs:56:13: 62:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:66:19: 66:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:70:62: 70:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:70:27: 70:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:75:30: 75:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:76:30: 76:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:78:22: 78:37 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zor.rs:79:35: 79:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zor.rs:79:22: 79:89 (#0) by default
rewrite call src::zor::memcpy @ workspace/libzahl/src/zor.rs:74:13: 80:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:84:19: 84:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:88:62: 88:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:88:27: 88:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zor.rs:94:28: 94:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zor.rs:94:15: 94:82 (#0) by default
rewrite call src::zor::memcpy @ workspace/libzahl/src/zor.rs:91:9: 95:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:98:19: 98:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:102:62: 102:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:102:27: 102:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zor.rs:108:28: 108:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zor.rs:108:15: 108:82 (#0) by default
rewrite call src::zor::memcpy @ workspace/libzahl/src/zor.rs:105:9: 109:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zor.rs:112:19: 112:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:116:62: 116:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zor.rs:116:27: 116:45 (#0) by default
@DefId(0:367 ~ lib[40c5]::src::zperror::zperror)
bb0:
  _4 = const {alloc183: *mut i32}
  using: 
  _3 = (*_4)
  using: _4@Mir(bb0[0])
  _5 = const 0_i32
  using: 
  _2 = Ge(move _3, move _5)
  using: _3@Mir(bb0[1]), _5@Mir(bb0[2])
  switchInt(move _2) -> [0: bb4, otherwise: bb1]
  using: _2@Mir(bb0[3])
bb1:
  _7 = const {alloc183: *mut i32}
  using: 
  _6 = (*_7)
  using: _7@Mir(bb1[0])
  _8 = src::zperror::__errno_location() -> bb2
  using: 
bb2:
  (*_8) = move _6
  using: _8@Mir(bb1[2]), _6@Mir(bb1[1])
  _10 = _1
  using: _1@Entry
  _9 = src::zperror::perror(move _10) -> bb3
  using: _10@Mir(bb2[1])
bb3:
  return
  using: _0@Entry
bb4:
  _11 = src::zperror::abort()
  using: 
rewrite call src::zperror::__errno_location @ workspace/libzahl/src/zperror.rs:11:10: 11:28 (#0) by default
rewrite call src::zperror::perror @ workspace/libzahl/src/zperror.rs:12:9: 12:23 (#0) by default
rewrite call src::zperror::abort @ workspace/libzahl/src/zperror.rs:14:9: 14:16 (#0) by default
@DefId(0:386 ~ lib[40c5]::src::zpow::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:387 ~ lib[40c5]::src::zpow::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:388 ~ lib[40c5]::src::zpow::zpow)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _7 = const 0_u64
  using: 
  _8 = const 0_u32
  using: 
  _11 = _3
  using: _3@Entry
  _10 = src::zpow::zsignum(move _11) -> bb1
  using: _11@Mir(bb0[5])
bb1:
  _12 = const 0_i32
  using: 
  _9 = Le(move _10, move _12)
  using: _10@Mir(bb0[6]), _12@Mir(bb1[0])
  switchInt(move _9) -> [0: bb14, otherwise: bb2]
  using: _9@Mir(bb1[1])
bb2:
  _14 = _3
  using: _3@Entry
  _13 = src::zpow::zzero(move _14) -> bb3
  using: _14@Mir(bb2[0])
bb3:
  switchInt(move _13) -> [0: bb9, otherwise: bb4]
  using: _13@Mir(bb2[1])
bb4:
  _16 = _2
  using: _2@Entry
  _15 = src::zpow::zzero(move _16) -> bb5
  using: _16@Mir(bb4[0])
bb5:
  switchInt(move _15) -> [0: bb8, otherwise: bb6]
  using: _15@Mir(bb4[1])
bb6:
  _17 = const 33_i32
  using: 
  _18 = const {alloc190: *mut i32}
  using: 
  (*_18) = move _17
  using: _18@Mir(bb6[1]), _17@Mir(bb6[0])
  _23 = const {alloc191: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _22 = &mut (*_23)
  using: _23@Mir(bb6[3])
  _21 = move _22 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _22@Mir(bb6[4])
  _20 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _21) -> bb7
  using: _21@Mir(bb6[5])
bb7:
  _24 = const 1_i32
  using: 
  _19 = src::zpow::longjmp(move _20, move _24)
  using: _20@Mir(bb6[6]), _24@Mir(bb7[0])
bb8:
  _26 = _1
  using: _1@Entry
  _27 = const 1_u64
  using: 
  _25 = src::zsetu::zsetu(move _26, move _27) -> bb53
  using: _26@Mir(bb8[0]), _27@Mir(bb8[1])
bb9:
  _29 = _2
  using: _2@Entry
  _28 = src::zpow::zzero(move _29) -> bb10
  using: _29@Mir(bb9[0])
bb10:
  switchInt(move _28) -> [0: bb13, otherwise: bb11]
  using: _28@Mir(bb9[1])
bb11:
  _30 = const 33_i32
  using: 
  _31 = const {alloc190: *mut i32}
  using: 
  (*_31) = move _30
  using: _31@Mir(bb11[1]), _30@Mir(bb11[0])
  _36 = const {alloc191: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _35 = &mut (*_36)
  using: _36@Mir(bb11[3])
  _34 = move _35 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _35@Mir(bb11[4])
  _33 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _34) -> bb12
  using: _34@Mir(bb11[5])
bb12:
  _37 = const 1_i32
  using: 
  _32 = src::zpow::longjmp(move _33, move _37)
  using: _33@Mir(bb11[6]), _37@Mir(bb12[0])
bb13:
  _38 = const 0_i32
  using: 
  ((*_1).0: i32) = move _38
  using: _1@Entry, _38@Mir(bb13[0])
  goto -> bb53
  using: 
bb14:
  _40 = _2
  using: _2@Entry
  _39 = src::zpow::zzero(move _40) -> bb15
  using: _40@Mir(bb14[0])
bb15:
  switchInt(move _39) -> [0: bb17, otherwise: bb16]
  using: _39@Mir(bb14[1])
bb16:
  _41 = const 0_i32
  using: 
  ((*_1).0: i32) = move _41
  using: _1@Entry, _41@Mir(bb16[0])
  goto -> bb53
  using: 
bb17:
  _43 = _3
  using: _3@Entry
  _42 = src::zbits::zbits(move _43) -> bb18
  using: _43@Mir(bb17[0])
bb18:
  _7 = move _42
  using: _42@Mir(bb17[1])
  _44 = _7
  using: _7@Mir(bb18[0])
  _45 = const 5_i32
  using: 
  _46 = CheckedShr(_44, _45)
  using: _44@Mir(bb18[1]), _45@Mir(bb18[2])
  assert(!move (_46.1: bool), "attempt to shift right by `{}`, which would overflow", move _45) -> bb19
  using: _46@Entry, _44@Entry, _45@Entry
bb19:
  _6 = move (_46.0: u64)
  using: _46@Mir(bb18[3])
  _51 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _50 = &mut (*_51)
  using: _51@Mir(bb19[1])
  _49 = move _50 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _50@Mir(bb19[2])
  _48 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _49) -> bb20
  using: _49@Mir(bb19[3])
bb20:
  _52 = _2
  using: _2@Entry
  _47 = src::zset::zset(move _48, move _52) -> bb21
  using: _48@Mir(bb19[4]), _52@Mir(bb20[0])
bb21:
  _57 = const {alloc193: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _56 = &mut (*_57)
  using: _57@Mir(bb21[0])
  _55 = move _56 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _56@Mir(bb21[1])
  _54 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _55) -> bb22
  using: _55@Mir(bb21[2])
bb22:
  _58 = _3
  using: _3@Entry
  _53 = src::zset::zset(move _54, move _58) -> bb23
  using: _54@Mir(bb21[3]), _58@Mir(bb22[0])
bb23:
  _60 = _1
  using: _1@Entry
  _61 = const 1_u64
  using: 
  _59 = src::zsetu::zsetu(move _60, move _61) -> bb24
  using: _60@Mir(bb23[0]), _61@Mir(bb23[1])
bb24:
  _4 = const 0_u64
  using: 
  goto -> bb25
  using: 
bb25:
  _63 = _4
  using: _4@Phi(bb25)
  _64 = _6
  using: _6@Mir(bb19[0])
  _62 = Lt(move _63, move _64)
  using: _63@Mir(bb25[0]), _64@Mir(bb25[1])
  switchInt(move _62) -> [0: bb41, otherwise: bb26]
  using: _62@Mir(bb25[2])
bb26:
  _71 = const {alloc193: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _70 = &mut (*_71)
  using: _71@Mir(bb26[0])
  _69 = move _70 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _70@Mir(bb26[1])
  _68 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _69) -> bb27
  using: _69@Mir(bb26[2])
bb27:
  _67 = ((*_68).3: *mut u32)
  using: _68@Mir(bb26[3])
  _73 = _4
  using: _4@Phi(bb25)
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb27[1])
  _66 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _67, move _72) -> bb28
  using: _67@Mir(bb27[0]), _72@Mir(bb27[2])
bb28:
  _65 = (*_66)
  using: _66@Mir(bb27[3])
  _8 = move _65
  using: _65@Mir(bb28[0])
  _5 = const 32_u64
  using: 
  goto -> bb29
  using: 
bb29:
  _74 = _5
  using: _5@Phi(bb29)
  _76 = _5
  using: _5@Phi(bb29)
  _75 = core::num::<impl u64>::wrapping_sub(move _76, const 1_u64) -> bb30
  using: _76@Mir(bb29[1])
bb30:
  _5 = move _75
  using: _75@Mir(bb29[2])
  _79 = _74
  using: _74@Mir(bb29[0])
  _78 = Ne(move _79, const 0_u64)
  using: _79@Mir(bb30[1])
  _77 = Not(move _78)
  using: _78@Mir(bb30[2])
  switchInt(move _77) -> [0: bb32, otherwise: bb31]
  using: _77@Mir(bb30[3])
bb31:
  _102 = _4
  using: _4@Phi(bb25)
  _101 = core::num::<impl u64>::wrapping_add(move _102, const 1_u64) -> bb40
  using: _102@Mir(bb31[0])
bb32:
  _81 = _8
  using: _8@Phi(bb29)
  _82 = const 1_u32
  using: 
  _80 = BitAnd(move _81, move _82)
  using: _81@Mir(bb32[0]), _82@Mir(bb32[1])
  switchInt(move _80) -> [0: bb35, otherwise: bb33]
  using: _80@Mir(bb32[2])
bb33:
  _84 = _1
  using: _1@Phi(bb29)
  _85 = _1
  using: _1@Phi(bb29)
  _89 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _88 = &mut (*_89)
  using: _89@Mir(bb33[2])
  _87 = move _88 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _88@Mir(bb33[3])
  _86 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _87) -> bb34
  using: _87@Mir(bb33[4])
bb34:
  _83 = src::zmul::zmul(move _84, move _85, move _86) -> bb35
  using: _84@Mir(bb33[0]), _85@Mir(bb33[1]), _86@Mir(bb33[5])
bb35:
  _94 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _93 = &mut (*_94)
  using: _94@Mir(bb35[0])
  _92 = move _93 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _93@Mir(bb35[1])
  _91 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _92) -> bb36
  using: _92@Mir(bb35[2])
bb36:
  _98 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _97 = &mut (*_98)
  using: _98@Mir(bb36[0])
  _96 = move _97 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _97@Mir(bb36[1])
  _95 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _96) -> bb37
  using: _96@Mir(bb36[2])
bb37:
  _90 = src::zsqr::zsqr(move _91, move _95) -> bb38
  using: _91@Mir(bb35[3]), _95@Mir(bb36[3])
bb38:
  _99 = const 1_i32
  using: 
  _100 = CheckedShr(_8, _99)
  using: _8@Phi(bb29), _99@Mir(bb38[0])
  assert(!move (_100.1: bool), "attempt to shift right by `{}`, which would overflow", move _99) -> bb39
  using: _100@Entry, _8@Entry, _99@Entry
bb39:
  _8 = move (_100.0: u32)
  using: _100@Mir(bb38[1])
  goto -> bb29
  using: 
bb40:
  _4 = move _101
  using: _101@Mir(bb31[1])
  goto -> bb25
  using: 
bb41:
  _109 = const {alloc193: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _108 = &mut (*_109)
  using: _109@Mir(bb41[0])
  _107 = move _108 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _108@Mir(bb41[1])
  _106 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _107) -> bb42
  using: _107@Mir(bb41[2])
bb42:
  _105 = ((*_106).3: *mut u32)
  using: _106@Mir(bb41[3])
  _111 = _4
  using: _4@Phi(bb25)
  _110 = move _111 as isize (IntToInt)
  using: _111@Mir(bb42[1])
  _104 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _105, move _110) -> bb43
  using: _105@Mir(bb42[0]), _110@Mir(bb42[2])
bb43:
  _103 = (*_104)
  using: _104@Mir(bb42[3])
  _8 = move _103
  using: _103@Mir(bb43[0])
  goto -> bb44
  using: 
bb44:
  _112 = _8
  using: _8@Phi(bb44)
  switchInt(move _112) -> [0: bb53, otherwise: bb45]
  using: _112@Mir(bb44[0])
bb45:
  _114 = _8
  using: _8@Phi(bb44)
  _115 = const 1_u32
  using: 
  _113 = BitAnd(move _114, move _115)
  using: _114@Mir(bb45[0]), _115@Mir(bb45[1])
  switchInt(move _113) -> [0: bb48, otherwise: bb46]
  using: _113@Mir(bb45[2])
bb46:
  _117 = _1
  using: _1@Phi(bb44)
  _118 = _1
  using: _1@Phi(bb44)
  _122 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _121 = &mut (*_122)
  using: _122@Mir(bb46[2])
  _120 = move _121 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _121@Mir(bb46[3])
  _119 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _120) -> bb47
  using: _120@Mir(bb46[4])
bb47:
  _116 = src::zmul::zmul(move _117, move _118, move _119) -> bb48
  using: _117@Mir(bb46[0]), _118@Mir(bb46[1]), _119@Mir(bb46[5])
bb48:
  _127 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _126 = &mut (*_127)
  using: _127@Mir(bb48[0])
  _125 = move _126 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _126@Mir(bb48[1])
  _124 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _125) -> bb49
  using: _125@Mir(bb48[2])
bb49:
  _131 = const {alloc192: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _130 = &mut (*_131)
  using: _131@Mir(bb49[0])
  _129 = move _130 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _130@Mir(bb49[1])
  _128 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _129) -> bb50
  using: _129@Mir(bb49[2])
bb50:
  _123 = src::zsqr::zsqr(move _124, move _128) -> bb51
  using: _124@Mir(bb48[3]), _128@Mir(bb49[3])
bb51:
  _132 = const 1_i32
  using: 
  _133 = CheckedShr(_8, _132)
  using: _8@Phi(bb44), _132@Mir(bb51[0])
  assert(!move (_133.1: bool), "attempt to shift right by `{}`, which would overflow", move _132) -> bb52
  using: _133@Entry, _8@Entry, _132@Entry
bb52:
  _8 = move (_133.0: u32)
  using: _133@Mir(bb51[1])
  goto -> bb44
  using: 
bb53:
  return
  using: _0@Entry
rewrite call src::zpow::longjmp @ workspace/libzahl/src/zpow.rs:53:17: 53:72 (#0) by default
rewrite call src::zpow::longjmp @ workspace/libzahl/src/zpow.rs:58:13: 58:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zpow.rs:76:56: 76:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zpow.rs:80:19: 80:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zpow.rs:90:15: 90:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zpow.rs:92:52: 92:70 (#0) by default
@DefId(0:406 ~ lib[40c5]::src::zpowu::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:407 ~ lib[40c5]::src::zpowu::zpowu)
bb0:
  _4 = _3
  using: _3@Entry
  switchInt(move _4) -> [0: bb1, otherwise: bb6]
  using: _4@Mir(bb0[0])
bb1:
  _6 = _2
  using: _2@Entry
  _5 = src::zpowu::zzero(move _6) -> bb2
  using: _6@Mir(bb1[0])
bb2:
  switchInt(move _5) -> [0: bb5, otherwise: bb3]
  using: _5@Mir(bb1[1])
bb3:
  _7 = const 33_i32
  using: 
  _8 = const {alloc198: *mut i32}
  using: 
  (*_8) = move _7
  using: _8@Mir(bb3[1]), _7@Mir(bb3[0])
  _13 = const {alloc199: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _12 = &mut (*_13)
  using: _13@Mir(bb3[3])
  _11 = move _12 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _12@Mir(bb3[4])
  _10 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _11) -> bb4
  using: _11@Mir(bb3[5])
bb4:
  _14 = const 1_i32
  using: 
  _9 = src::zpowu::longjmp(move _10, move _14)
  using: _10@Mir(bb3[6]), _14@Mir(bb4[0])
bb5:
  _16 = _1
  using: _1@Entry
  _17 = const 1_u64
  using: 
  _15 = src::zsetu::zsetu(move _16, move _17) -> bb21
  using: _16@Mir(bb5[0]), _17@Mir(bb5[1])
bb6:
  _19 = _2
  using: _2@Entry
  _18 = src::zpowu::zzero(move _19) -> bb7
  using: _19@Mir(bb6[0])
bb7:
  switchInt(move _18) -> [0: bb9, otherwise: bb8]
  using: _18@Mir(bb6[1])
bb8:
  _20 = const 0_i32
  using: 
  ((*_1).0: i32) = move _20
  using: _1@Entry, _20@Mir(bb8[0])
  goto -> bb21
  using: 
bb9:
  _25 = const {alloc200: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _24 = &mut (*_25)
  using: _25@Mir(bb9[0])
  _23 = move _24 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _24@Mir(bb9[1])
  _22 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _23) -> bb10
  using: _23@Mir(bb9[2])
bb10:
  _26 = _2
  using: _2@Entry
  _21 = src::zset::zset(move _22, move _26) -> bb11
  using: _22@Mir(bb9[3]), _26@Mir(bb10[0])
bb11:
  _28 = _1
  using: _1@Entry
  _29 = const 1_u64
  using: 
  _27 = src::zsetu::zsetu(move _28, move _29) -> bb12
  using: _28@Mir(bb11[0]), _29@Mir(bb11[1])
bb12:
  _30 = _3
  using: _3@Phi(bb12)
  switchInt(move _30) -> [0: bb21, otherwise: bb13]
  using: _30@Mir(bb12[0])
bb13:
  _32 = _3
  using: _3@Phi(bb12)
  _33 = const 1_u64
  using: 
  _31 = BitAnd(move _32, move _33)
  using: _32@Mir(bb13[0]), _33@Mir(bb13[1])
  switchInt(move _31) -> [0: bb16, otherwise: bb14]
  using: _31@Mir(bb13[2])
bb14:
  _35 = _1
  using: _1@Phi(bb12)
  _36 = _1
  using: _1@Phi(bb12)
  _40 = const {alloc200: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _39 = &mut (*_40)
  using: _40@Mir(bb14[2])
  _38 = move _39 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _39@Mir(bb14[3])
  _37 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _38) -> bb15
  using: _38@Mir(bb14[4])
bb15:
  _34 = src::zmul::zmul(move _35, move _36, move _37) -> bb16
  using: _35@Mir(bb14[0]), _36@Mir(bb14[1]), _37@Mir(bb14[5])
bb16:
  _45 = const {alloc200: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _44 = &mut (*_45)
  using: _45@Mir(bb16[0])
  _43 = move _44 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _44@Mir(bb16[1])
  _42 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _43) -> bb17
  using: _43@Mir(bb16[2])
bb17:
  _49 = const {alloc200: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _48 = &mut (*_49)
  using: _49@Mir(bb17[0])
  _47 = move _48 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _48@Mir(bb17[1])
  _46 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _47) -> bb18
  using: _47@Mir(bb17[2])
bb18:
  _41 = src::zsqr::zsqr(move _42, move _46) -> bb19
  using: _42@Mir(bb16[3]), _46@Mir(bb17[3])
bb19:
  _50 = const 1_i32
  using: 
  _51 = CheckedShr(_3, _50)
  using: _3@Phi(bb12), _50@Mir(bb19[0])
  assert(!move (_51.1: bool), "attempt to shift right by `{}`, which would overflow", move _50) -> bb20
  using: _51@Entry, _3@Entry, _50@Entry
bb20:
  _3 = move (_51.0: u64)
  using: _51@Mir(bb19[1])
  goto -> bb12
  using: 
bb21:
  return
  using: _0@Entry
rewrite call src::zpowu::longjmp @ workspace/libzahl/src/zpowu.rs:41:13: 41:68 (#0) by default
@DefId(0:435 ~ lib[40c5]::src::zptest::zeven)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  switchInt(move _3) -> [0: bb1, otherwise: bb2]
  using: _3@Mir(bb0[0])
bb1:
  _2 = const true
  using: 
  goto -> bb3
  using: 
bb2:
  _8 = ((*_1).3: *mut u32)
  using: _1@Entry
  _9 = const 0_isize
  using: 
  _7 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _8, move _9) -> bb4
  using: _8@Mir(bb2[0]), _9@Mir(bb2[1])
bb3:
  _0 = move _2 as i32 (IntToInt)
  using: _2@Phi(bb3)
  return
  using: _0@Mir(bb3[0])
bb4:
  _6 = (*_7)
  using: _7@Mir(bb2[2])
  _10 = const 1_u32
  using: 
  _5 = BitAnd(move _6, move _10)
  using: _6@Mir(bb4[0]), _10@Mir(bb4[1])
  _4 = Eq(move _5, const 0_u32)
  using: _5@Mir(bb4[2])
  _2 = move _4
  using: _4@Mir(bb4[3])
  goto -> bb3
  using: 
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zptest.rs:45:28: 45:61 (#0) by default
@DefId(0:436 ~ lib[40c5]::src::zptest::zptest)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _8 = _2
  using: _2@Entry
  _9 = const 3_u64
  using: 
  _7 = src::zcmpu::zcmpu(move _8, move _9) -> bb1
  using: _8@Mir(bb0[2]), _9@Mir(bb0[3])
bb1:
  _10 = const 0_i32
  using: 
  _6 = Le(move _7, move _10)
  using: _7@Mir(bb0[4]), _10@Mir(bb1[0])
  switchInt(move _6) -> [0: bb11, otherwise: bb2]
  using: _6@Mir(bb1[1])
bb2:
  _13 = _2
  using: _2@Entry
  _14 = const 1_u64
  using: 
  _12 = src::zcmpu::zcmpu(move _13, move _14) -> bb3
  using: _13@Mir(bb2[0]), _14@Mir(bb2[1])
bb3:
  _15 = const 0_i32
  using: 
  _11 = Le(move _12, move _15)
  using: _12@Mir(bb2[2]), _15@Mir(bb3[0])
  switchInt(move _11) -> [0: bb10, otherwise: bb4]
  using: _11@Mir(bb3[1])
bb4:
  _18 = _1
  using: _1@Entry
  _17 = std::ptr::mut_ptr::<impl *mut src::allocator::C2RustUnnamed>::is_null(move _18) -> bb5
  using: _18@Mir(bb4[0])
bb5:
  _16 = Not(move _17)
  using: _17@Mir(bb4[1])
  switchInt(move _16) -> [0: bb8, otherwise: bb6]
  using: _16@Mir(bb5[0])
bb6:
  _20 = _1
  using: _1@Entry
  _21 = _2
  using: _2@Entry
  _19 = Ne(move _20, move _21)
  using: _20@Mir(bb6[0]), _21@Mir(bb6[1])
  switchInt(move _19) -> [0: bb9, otherwise: bb7]
  using: _19@Mir(bb6[2])
bb7:
  _23 = _1
  using: _1@Entry
  _24 = _2
  using: _2@Entry
  _22 = src::zset::zset(move _23, move _24) -> bb9
  using: _23@Mir(bb7[0]), _24@Mir(bb7[1])
bb8:
  _27 = _1
  using: _1@Entry
  _26 = move _27 as usize (PointerExposeAddress)
  using: _27@Mir(bb8[0])
  _25 = Eq(move _26, const 0_usize)
  using: _26@Mir(bb8[1])
  assume(move _25)
  using: _25@Mir(bb8[2])
  goto -> bb9
  using: 
bb9:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb10:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb11:
  _29 = _2
  using: _2@Phi(bb9)
  _28 = src::zptest::zeven(move _29) -> bb12
  using: _29@Mir(bb11[0])
bb12:
  switchInt(move _28) -> [0: bb19, otherwise: bb13]
  using: _28@Mir(bb11[1])
bb13:
  _32 = _1
  using: _1@Phi(bb9)
  _31 = std::ptr::mut_ptr::<impl *mut src::allocator::C2RustUnnamed>::is_null(move _32) -> bb14
  using: _32@Mir(bb13[0])
bb14:
  _30 = Not(move _31)
  using: _31@Mir(bb13[1])
  switchInt(move _30) -> [0: bb17, otherwise: bb15]
  using: _30@Mir(bb14[0])
bb15:
  _34 = _1
  using: _1@Phi(bb9)
  _35 = _2
  using: _2@Phi(bb9)
  _33 = Ne(move _34, move _35)
  using: _34@Mir(bb15[0]), _35@Mir(bb15[1])
  switchInt(move _33) -> [0: bb18, otherwise: bb16]
  using: _33@Mir(bb15[2])
bb16:
  _37 = _1
  using: _1@Phi(bb9)
  _38 = _2
  using: _2@Phi(bb9)
  _36 = src::zset::zset(move _37, move _38) -> bb18
  using: _37@Mir(bb16[0]), _38@Mir(bb16[1])
bb17:
  _41 = _1
  using: _1@Phi(bb9)
  _40 = move _41 as usize (PointerExposeAddress)
  using: _41@Mir(bb17[0])
  _39 = Eq(move _40, const 0_usize)
  using: _40@Mir(bb17[1])
  assume(move _39)
  using: _39@Mir(bb17[2])
  goto -> bb18
  using: 
bb18:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb19:
  _46 = const {alloc205: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _45 = &mut (*_46)
  using: _46@Mir(bb19[0])
  _44 = move _45 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _45@Mir(bb19[1])
  _43 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _44) -> bb20
  using: _44@Mir(bb19[2])
bb20:
  _47 = _2
  using: _2@Phi(bb18)
  _51 = const {alloc206: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _50 = &mut (*_51)
  using: _51@Mir(bb20[1])
  _49 = move _50 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _50@Mir(bb20[2])
  _48 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _49) -> bb21
  using: _49@Mir(bb20[3])
bb21:
  _42 = src::zsub::zsub_unsigned(move _43, move _47, move _48) -> bb22
  using: _43@Mir(bb19[3]), _47@Mir(bb20[0]), _48@Mir(bb20[4])
bb22:
  _56 = const {alloc207: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _55 = &mut (*_56)
  using: _56@Mir(bb22[0])
  _54 = move _55 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _55@Mir(bb22[1])
  _53 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _54) -> bb23
  using: _54@Mir(bb22[2])
bb23:
  _57 = _2
  using: _2@Phi(bb18)
  _61 = const {alloc208: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _60 = &mut (*_61)
  using: _61@Mir(bb23[1])
  _59 = move _60 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _60@Mir(bb23[2])
  _58 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _59) -> bb24
  using: _59@Mir(bb23[3])
bb24:
  _52 = src::zsub::zsub_unsigned(move _53, move _57, move _58) -> bb25
  using: _53@Mir(bb22[3]), _57@Mir(bb23[0]), _58@Mir(bb23[4])
bb25:
  _66 = const {alloc205: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _65 = &mut (*_66)
  using: _66@Mir(bb25[0])
  _64 = move _65 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _65@Mir(bb25[1])
  _63 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _64) -> bb26
  using: _64@Mir(bb25[2])
bb26:
  _62 = src::zlsb::zlsb(move _63) -> bb27
  using: _63@Mir(bb25[3])
bb27:
  _5 = move _62
  using: _62@Mir(bb26[0])
  _71 = const {alloc209: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _70 = &mut (*_71)
  using: _71@Mir(bb27[1])
  _69 = move _70 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _70@Mir(bb27[2])
  _68 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _69) -> bb28
  using: _69@Mir(bb27[3])
bb28:
  _75 = const {alloc205: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _74 = &mut (*_75)
  using: _75@Mir(bb28[0])
  _73 = move _74 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _74@Mir(bb28[1])
  _72 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _73) -> bb29
  using: _73@Mir(bb28[2])
bb29:
  _76 = _5
  using: _5@Mir(bb27[0])
  _67 = src::zrsh::zrsh(move _68, move _72, move _76) -> bb30
  using: _68@Mir(bb27[4]), _72@Mir(bb28[3]), _76@Mir(bb29[0])
bb30:
  _77 = _3
  using: _3@Phi(bb30)
  _78 = _3
  using: _3@Phi(bb30)
  _79 = CheckedSub(_78, const 1_i32)
  using: _78@Mir(bb30[1])
  assert(!move (_79.1: bool), "attempt to compute `{} - {}`, which would overflow", move _78, const 1_i32) -> bb31
  using: _79@Entry, _78@Entry
bb31:
  _3 = move (_79.0: i32)
  using: _79@Mir(bb30[2])
  _82 = _77
  using: _77@Mir(bb30[0])
  _81 = Ne(move _82, const 0_i32)
  using: _82@Mir(bb31[1])
  _80 = Not(move _81)
  using: _81@Mir(bb31[2])
  switchInt(move _80) -> [0: bb33, otherwise: bb32]
  using: _80@Mir(bb31[3])
bb32:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb33:
  _87 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _86 = &mut (*_87)
  using: _87@Mir(bb33[0])
  _85 = move _86 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _86@Mir(bb33[1])
  _84 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _85) -> bb34
  using: _85@Mir(bb33[2])
bb34:
  _91 = const {alloc207: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _90 = &mut (*_91)
  using: _91@Mir(bb34[0])
  _89 = move _90 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _90@Mir(bb34[1])
  _88 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _89) -> bb35
  using: _89@Mir(bb34[2])
bb35:
  _83 = src::zrand::zrand(move _84, const _, const _, move _88) -> bb36
  using: _84@Mir(bb33[3]), _88@Mir(bb34[3])
bb36:
  _96 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _95 = &mut (*_96)
  using: _96@Mir(bb36[0])
  _94 = move _95 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _95@Mir(bb36[1])
  _93 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _94) -> bb37
  using: _94@Mir(bb36[2])
bb37:
  _100 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _99 = &mut (*_100)
  using: _100@Mir(bb37[0])
  _98 = move _99 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _99@Mir(bb37[1])
  _97 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _98) -> bb38
  using: _98@Mir(bb37[2])
bb38:
  _104 = const {alloc211: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _103 = &mut (*_104)
  using: _104@Mir(bb38[0])
  _102 = move _103 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _103@Mir(bb38[1])
  _101 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _102) -> bb39
  using: _102@Mir(bb38[2])
bb39:
  _92 = src::zadd::zadd_unsigned(move _93, move _97, move _101) -> bb40
  using: _93@Mir(bb36[3]), _97@Mir(bb37[3]), _101@Mir(bb38[3])
bb40:
  _109 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _108 = &mut (*_109)
  using: _109@Mir(bb40[0])
  _107 = move _108 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _108@Mir(bb40[1])
  _106 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _107) -> bb41
  using: _107@Mir(bb40[2])
bb41:
  _113 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _112 = &mut (*_113)
  using: _113@Mir(bb41[0])
  _111 = move _112 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _112@Mir(bb41[1])
  _110 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _111) -> bb42
  using: _111@Mir(bb41[2])
bb42:
  _117 = const {alloc209: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _116 = &mut (*_117)
  using: _117@Mir(bb42[0])
  _115 = move _116 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _116@Mir(bb42[1])
  _114 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _115) -> bb43
  using: _115@Mir(bb42[2])
bb43:
  _118 = _2
  using: _2@Phi(bb30)
  _105 = src::zmodpow::zmodpow(move _106, move _110, move _114, move _118) -> bb44
  using: _106@Mir(bb40[3]), _110@Mir(bb41[3]), _114@Mir(bb42[3]), _118@Mir(bb43[0])
bb44:
  _124 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _123 = &mut (*_124)
  using: _124@Mir(bb44[0])
  _122 = move _123 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _123@Mir(bb44[1])
  _121 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _122) -> bb48
  using: _122@Mir(bb44[2])
bb45:
  _119 = const true
  using: 
  goto -> bb47
  using: 
bb46:
  _134 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _133 = &mut (*_134)
  using: _134@Mir(bb46[0])
  _132 = move _133 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _133@Mir(bb46[1])
  _131 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _132) -> bb51
  using: _132@Mir(bb46[2])
bb47:
  switchInt(move _119) -> [0: bb54, otherwise: bb30]
  using: _119@Phi(bb47)
bb48:
  _128 = const {alloc206: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _127 = &mut (*_128)
  using: _128@Mir(bb48[0])
  _126 = move _127 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _127@Mir(bb48[1])
  _125 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _126) -> bb49
  using: _126@Mir(bb48[2])
bb49:
  _120 = src::zcmp::zcmp(move _121, move _125) -> bb50
  using: _121@Mir(bb44[3]), _125@Mir(bb48[3])
bb50:
  switchInt(move _120) -> [0: bb45, otherwise: bb46]
  using: _120@Mir(bb49[0])
bb51:
  _138 = const {alloc205: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _137 = &mut (*_138)
  using: _138@Mir(bb51[0])
  _136 = move _137 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _137@Mir(bb51[1])
  _135 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _136) -> bb52
  using: _136@Mir(bb51[2])
bb52:
  _130 = src::zcmp::zcmp(move _131, move _135) -> bb53
  using: _131@Mir(bb46[3]), _135@Mir(bb51[3])
bb53:
  _129 = Eq(move _130, const 0_i32)
  using: _130@Mir(bb52[0])
  _119 = move _129
  using: _129@Mir(bb53[0])
  goto -> bb47
  using: 
bb54:
  _4 = const 1_u64
  using: 
  goto -> bb55
  using: 
bb55:
  _140 = _4
  using: _4@Phi(bb55)
  _141 = _5
  using: _5@Phi(bb30)
  _139 = Lt(move _140, move _141)
  using: _140@Mir(bb55[0]), _141@Mir(bb55[1])
  switchInt(move _139) -> [0: bb78, otherwise: bb56]
  using: _139@Mir(bb55[2])
bb56:
  _146 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _145 = &mut (*_146)
  using: _146@Mir(bb56[0])
  _144 = move _145 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _145@Mir(bb56[1])
  _143 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _144) -> bb57
  using: _144@Mir(bb56[2])
bb57:
  _150 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _149 = &mut (*_150)
  using: _150@Mir(bb57[0])
  _148 = move _149 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _149@Mir(bb57[1])
  _147 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _148) -> bb58
  using: _148@Mir(bb57[2])
bb58:
  _142 = src::zsqr::zsqr(move _143, move _147) -> bb59
  using: _143@Mir(bb56[3]), _147@Mir(bb57[3])
bb59:
  _155 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _154 = &mut (*_155)
  using: _155@Mir(bb59[0])
  _153 = move _154 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _154@Mir(bb59[1])
  _152 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _153) -> bb60
  using: _153@Mir(bb59[2])
bb60:
  _159 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _158 = &mut (*_159)
  using: _159@Mir(bb60[0])
  _157 = move _158 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _158@Mir(bb60[1])
  _156 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _157) -> bb61
  using: _157@Mir(bb60[2])
bb61:
  _160 = _2
  using: _2@Phi(bb55)
  _151 = src::zmod::zmod(move _152, move _156, move _160) -> bb62
  using: _152@Mir(bb59[3]), _156@Mir(bb60[3]), _160@Mir(bb61[0])
bb62:
  _165 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _164 = &mut (*_165)
  using: _165@Mir(bb62[0])
  _163 = move _164 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _164@Mir(bb62[1])
  _162 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _163) -> bb63
  using: _163@Mir(bb62[2])
bb63:
  _169 = const {alloc206: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _168 = &mut (*_169)
  using: _169@Mir(bb63[0])
  _167 = move _168 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _168@Mir(bb63[1])
  _166 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _167) -> bb64
  using: _167@Mir(bb63[2])
bb64:
  _161 = src::zcmp::zcmp(move _162, move _166) -> bb65
  using: _162@Mir(bb62[3]), _166@Mir(bb63[3])
bb65:
  switchInt(move _161) -> [0: bb66, otherwise: bb72]
  using: _161@Mir(bb64[0])
bb66:
  _172 = _1
  using: _1@Phi(bb18)
  _171 = std::ptr::mut_ptr::<impl *mut src::allocator::C2RustUnnamed>::is_null(move _172) -> bb67
  using: _172@Mir(bb66[0])
bb67:
  _170 = Not(move _171)
  using: _171@Mir(bb66[1])
  switchInt(move _170) -> [0: bb70, otherwise: bb68]
  using: _170@Mir(bb67[0])
bb68:
  _174 = _1
  using: _1@Phi(bb18)
  _178 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _177 = &mut (*_178)
  using: _178@Mir(bb68[1])
  _176 = move _177 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _177@Mir(bb68[2])
  _175 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _176) -> bb69
  using: _176@Mir(bb68[3])
bb69:
  _173 = src::zswap::zswap(move _174, move _175) -> bb71
  using: _174@Mir(bb68[0]), _175@Mir(bb68[4])
bb70:
  _181 = _1
  using: _1@Phi(bb18)
  _180 = move _181 as usize (PointerExposeAddress)
  using: _181@Mir(bb70[0])
  _179 = Eq(move _180, const 0_usize)
  using: _180@Mir(bb70[1])
  assume(move _179)
  using: _179@Mir(bb70[2])
  goto -> bb71
  using: 
bb71:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb72:
  _186 = const {alloc212: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _185 = &mut (*_186)
  using: _186@Mir(bb72[0])
  _184 = move _185 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _185@Mir(bb72[1])
  _183 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _184) -> bb73
  using: _184@Mir(bb72[2])
bb73:
  _190 = const {alloc205: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _189 = &mut (*_190)
  using: _190@Mir(bb73[0])
  _188 = move _189 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _189@Mir(bb73[1])
  _187 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _188) -> bb74
  using: _188@Mir(bb73[2])
bb74:
  _182 = src::zcmp::zcmp(move _183, move _187) -> bb75
  using: _183@Mir(bb72[3]), _187@Mir(bb73[3])
bb75:
  switchInt(move _182) -> [0: bb78, otherwise: bb76]
  using: _182@Mir(bb74[0])
bb76:
  _192 = _4
  using: _4@Phi(bb55)
  _191 = core::num::<impl u64>::wrapping_add(move _192, const 1_u64) -> bb77
  using: _192@Mir(bb76[0])
bb77:
  _4 = move _191
  using: _191@Mir(bb76[1])
  goto -> bb55
  using: 
bb78:
  _194 = _4
  using: _4@Phi(bb55)
  _195 = _5
  using: _5@Phi(bb30)
  _193 = Eq(move _194, move _195)
  using: _194@Mir(bb78[0]), _195@Mir(bb78[1])
  switchInt(move _193) -> [0: bb30, otherwise: bb79]
  using: _193@Mir(bb78[2])
bb79:
  _198 = _1
  using: _1@Phi(bb71)
  _197 = std::ptr::mut_ptr::<impl *mut src::allocator::C2RustUnnamed>::is_null(move _198) -> bb80
  using: _198@Mir(bb79[0])
bb80:
  _196 = Not(move _197)
  using: _197@Mir(bb79[1])
  switchInt(move _196) -> [0: bb83, otherwise: bb81]
  using: _196@Mir(bb80[0])
bb81:
  _200 = _1
  using: _1@Phi(bb71)
  _204 = const {alloc210: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _203 = &mut (*_204)
  using: _204@Mir(bb81[1])
  _202 = move _203 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _203@Mir(bb81[2])
  _201 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _202) -> bb82
  using: _202@Mir(bb81[3])
bb82:
  _199 = src::zswap::zswap(move _200, move _201) -> bb84
  using: _200@Mir(bb81[0]), _201@Mir(bb81[4])
bb83:
  _207 = _1
  using: _1@Phi(bb71)
  _206 = move _207 as usize (PointerExposeAddress)
  using: _207@Mir(bb83[0])
  _205 = Eq(move _206, const 0_usize)
  using: _206@Mir(bb83[1])
  assume(move _205)
  using: _205@Mir(bb83[2])
  goto -> bb84
  using: 
bb84:
  _0 = const _
  using: 
  goto -> bb85
  using: 
bb85:
  return
  using: _0@Phi(bb85)
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zptest.rs:125:19: 125:34 (#0) by default
@DefId(0:467 ~ lib[40c5]::src::zrand::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:468 ~ lib[40c5]::src::zrand::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:469 ~ lib[40c5]::src::zrand::zrand_get_random_bits)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _8 = _2
  using: _2@Entry
  _9 = const 31_u64
  using: 
  _7 = core::num::<impl u64>::wrapping_add(move _8, move _9) -> bb1
  using: _8@Mir(bb0[2]), _9@Mir(bb0[3])
bb1:
  _10 = const 5_i32
  using: 
  _11 = CheckedShr(_7, _10)
  using: _7@Mir(bb0[4]), _10@Mir(bb1[0])
  assert(!move (_11.1: bool), "attempt to shift right by `{}`, which would overflow", move _10) -> bb2
  using: _11@Entry, _7@Entry, _10@Entry
bb2:
  _6 = move (_11.0: u64)
  using: _11@Mir(bb1[1])
  _12 = const 0_i64
  using: 
  _13 = const 1_u32
  using: 
  _14 = const {0x0 as *mut i8}
  using: 
  _16 = ((*_1).2: u64)
  using: _1@Entry
  _17 = _6
  using: _6@Mir(bb2[0])
  _15 = Lt(move _16, move _17)
  using: _16@Mir(bb2[4]), _17@Mir(bb2[5])
  switchInt(move _15) -> [0: bb4, otherwise: bb3]
  using: _15@Mir(bb2[6])
bb3:
  _19 = _1
  using: _1@Entry
  _20 = _6
  using: _6@Mir(bb2[0])
  _18 = src::allocator::libzahl_realloc(move _19, move _20) -> bb4
  using: _19@Mir(bb3[0]), _20@Mir(bb3[1])
bb4:
  _21 = ((*_1).3: *mut u32)
  using: _1@Phi(bb4)
  _14 = move _21 as *mut i8 (PtrToPtr)
  using: _21@Mir(bb4[0])
  _23 = _6
  using: _6@Phi(bb4)
  _25 = std::mem::size_of::<u32>() -> bb5
  using: 
bb5:
  _24 = move _25 as u64 (IntToInt)
  using: _25@Mir(bb4[3])
  _22 = core::num::<impl u64>::wrapping_mul(move _23, move _24) -> bb6
  using: _23@Mir(bb4[2]), _24@Mir(bb5[0])
bb6:
  _5 = move _22
  using: _22@Mir(bb5[1])
  goto -> bb7
  using: 
bb7:
  _26 = _5
  using: _5@Phi(bb7)
  switchInt(move _26) -> [0: bb17, otherwise: bb8]
  using: _26@Mir(bb7[0])
bb8:
  _28 = _3
  using: _3@Phi(bb7)
  _31 = _14
  using: _14@Phi(bb7)
  _33 = _4
  using: _4@Phi(bb7)
  _32 = move _33 as isize (IntToInt)
  using: _33@Mir(bb8[2])
  _30 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _31, move _32) -> bb9
  using: _31@Mir(bb8[1]), _32@Mir(bb8[3])
bb9:
  _29 = move _30 as *mut libc::c_void (PtrToPtr)
  using: _30@Mir(bb8[4])
  _34 = _5
  using: _5@Phi(bb7)
  _27 = src::zrand::read(move _28, move _29, move _34) -> bb10
  using: _28@Mir(bb8[0]), _29@Mir(bb9[0]), _34@Mir(bb9[1])
bb10:
  _12 = move _27
  using: _27@Mir(bb9[2])
  _36 = _12
  using: _12@Mir(bb10[0])
  _37 = const 0_i64
  using: 
  _35 = Lt(move _36, move _37)
  using: _36@Mir(bb10[1]), _37@Mir(bb10[2])
  switchInt(move _35) -> [0: bb14, otherwise: bb11]
  using: _35@Mir(bb10[3])
bb11:
  _39 = src::zrand::__errno_location() -> bb12
  using: 
bb12:
  _38 = (*_39)
  using: _39@Mir(bb11[0])
  _40 = const {alloc224: *mut i32}
  using: 
  (*_40) = move _38
  using: _40@Mir(bb12[1]), _38@Mir(bb12[0])
  _45 = const {alloc225: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _44 = &mut (*_45)
  using: _45@Mir(bb12[3])
  _43 = move _44 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _44@Mir(bb12[4])
  _42 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _43) -> bb13
  using: _43@Mir(bb12[5])
bb13:
  _46 = const 1_i32
  using: 
  _41 = src::zrand::longjmp(move _42, move _46)
  using: _42@Mir(bb12[6]), _46@Mir(bb13[0])
bb14:
  _48 = _4
  using: _4@Phi(bb7)
  _50 = _12
  using: _12@Mir(bb10[0])
  _49 = move _50 as u64 (IntToInt)
  using: _50@Mir(bb14[1])
  _47 = core::num::<impl u64>::wrapping_add(move _48, move _49) -> bb15
  using: _48@Mir(bb14[0]), _49@Mir(bb14[2])
bb15:
  _4 = move _47
  using: _47@Mir(bb14[3])
  _52 = _5
  using: _5@Phi(bb7)
  _54 = _12
  using: _12@Mir(bb10[0])
  _53 = move _54 as u64 (IntToInt)
  using: _54@Mir(bb15[2])
  _51 = core::num::<impl u64>::wrapping_sub(move _52, move _53) -> bb16
  using: _52@Mir(bb15[1]), _53@Mir(bb15[3])
bb16:
  _5 = move _51
  using: _51@Mir(bb15[4])
  goto -> bb7
  using: 
bb17:
  _55 = _2
  using: _2@Entry
  _56 = const 31_u64
  using: 
  _2 = BitAnd(move _55, move _56)
  using: _55@Mir(bb17[0]), _56@Mir(bb17[1])
  _57 = _2
  using: _2@Mir(bb17[2])
  _58 = CheckedShl(_13, _57)
  using: _13@Mir(bb2[2]), _57@Mir(bb17[3])
  assert(!move (_58.1: bool), "attempt to shift left by `{}`, which would overflow", move _57) -> bb18
  using: _58@Entry, _13@Entry, _57@Entry
bb18:
  _13 = move (_58.0: u32)
  using: _58@Mir(bb17[4])
  _60 = _13
  using: _13@Mir(bb18[0])
  _61 = const 1_u32
  using: 
  _59 = core::num::<impl u32>::wrapping_sub(move _60, move _61) -> bb19
  using: _60@Mir(bb18[1]), _61@Mir(bb18[2])
bb19:
  _13 = move _59
  using: _59@Mir(bb18[3])
  _62 = _13
  using: _13@Mir(bb19[0])
  _64 = ((*_1).3: *mut u32)
  using: _1@Phi(bb4)
  _67 = _6
  using: _6@Phi(bb4)
  _68 = const 1_u64
  using: 
  _66 = core::num::<impl u64>::wrapping_sub(move _67, move _68) -> bb20
  using: _67@Mir(bb19[3]), _68@Mir(bb19[4])
bb20:
  _65 = move _66 as isize (IntToInt)
  using: _66@Mir(bb19[5])
  _63 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _64, move _65) -> bb21
  using: _64@Mir(bb19[2]), _65@Mir(bb20[0])
bb21:
  (*_63) = BitAnd((*_63), move _62)
  using: _63@Mir(bb20[1]), _63@Mir(bb20[1]), _62@Mir(bb19[1])
  _69 = _6
  using: _6@Phi(bb4)
  _5 = move _69
  using: _69@Mir(bb21[1])
  goto -> bb22
  using: 
bb22:
  _70 = _5
  using: _5@Phi(bb22)
  _72 = _5
  using: _5@Phi(bb22)
  _71 = core::num::<impl u64>::wrapping_sub(move _72, const 1_u64) -> bb23
  using: _72@Mir(bb22[1])
bb23:
  _5 = move _71
  using: _71@Mir(bb22[2])
  _75 = _70
  using: _70@Mir(bb22[0])
  _74 = Ne(move _75, const 0_u64)
  using: _75@Mir(bb23[1])
  _73 = Not(move _74)
  using: _74@Mir(bb23[2])
  switchInt(move _73) -> [0: bb25, otherwise: bb24]
  using: _73@Mir(bb23[3])
bb24:
  _85 = const 0_i32
  using: 
  ((*_1).0: i32) = move _85
  using: _1@Phi(bb22), _85@Mir(bb24[0])
  goto -> bb29
  using: 
bb25:
  _78 = ((*_1).3: *mut u32)
  using: _1@Phi(bb22)
  _80 = _5
  using: _5@Mir(bb23[0])
  _79 = move _80 as isize (IntToInt)
  using: _80@Mir(bb25[1])
  _77 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _78, move _79) -> bb26
  using: _78@Mir(bb25[0]), _79@Mir(bb25[2])
bb26:
  _76 = (*_77)
  using: _77@Mir(bb25[3])
  switchInt(move _76) -> [0: bb22, otherwise: bb27]
  using: _76@Mir(bb26[0])
bb27:
  _82 = _5
  using: _5@Mir(bb23[0])
  _83 = const 1_u64
  using: 
  _81 = core::num::<impl u64>::wrapping_add(move _82, move _83) -> bb28
  using: _82@Mir(bb27[0]), _83@Mir(bb27[1])
bb28:
  ((*_1).1: u64) = move _81
  using: _1@Phi(bb22), _81@Mir(bb27[2])
  _84 = const 1_i32
  using: 
  ((*_1).0: i32) = move _84
  using: _1@Phi(bb22), _84@Mir(bb28[1])
  goto -> bb29
  using: 
bb29:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zrand.rs:59:10: 59:79 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zrand.rs:68:28: 68:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zrand.rs:68:15: 68:82 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrand.rs:70:34: 70:61 (#0) by default
rewrite call src::zrand::read @ workspace/libzahl/src/zrand.rs:70:21: 70:86 (#0) by default
rewrite call src::zrand::__errno_location @ workspace/libzahl/src/zrand.rs:72:30: 72:48 (#0) by default
rewrite call src::zrand::longjmp @ workspace/libzahl/src/zrand.rs:73:13: 73:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zrand.rs:75:52: 75:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrand.rs:77:34: 77:67 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zrand.rs:81:35: 81:81 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrand.rs:84:23: 84:70 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrand.rs:84:10: 84:80 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrand.rs:88:15: 88:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrand.rs:92:26: 92:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zrand.rs:93:27: 93:74 (#0) by default
@DefId(0:470 ~ lib[40c5]::src::zrand::zrand)
bb0:
  _5 = const {0x0 as *const i8}
  using: 
  _6 = const 0_u64
  using: 
  _7 = const 0_i32
  using: 
  _8 = _2
  using: _2@Entry
  switchInt(_8) -> [0: bb2, 1: bb3, otherwise: bb1]
  using: _8@Mir(bb0[3])
bb1:
  _15 = src::zrand::abort()
  using: 
bb2:
  _11 = const b"/dev/urandom\x00"
  using: 
  _10 = &raw const (*_11)
  using: _11@Mir(bb2[0])
  _9 = move _10 as *const u8 (Pointer(ArrayToPointer))
  using: _10@Mir(bb2[1])
  _5 = move _9 as *const i8 (PtrToPtr)
  using: _9@Mir(bb2[2])
  goto -> bb4
  using: 
bb3:
  _14 = const b"/dev/random\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb3[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb3[1])
  _5 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  _17 = _4
  using: _4@Entry
  _16 = src::zrand::zzero(move _17) -> bb5
  using: _17@Mir(bb4[0])
bb5:
  switchInt(move _16) -> [0: bb7, otherwise: bb6]
  using: _16@Mir(bb4[1])
bb6:
  _18 = const 0_i32
  using: 
  ((*_1).0: i32) = move _18
  using: _1@Entry, _18@Mir(bb6[0])
  goto -> bb34
  using: 
bb7:
  _20 = _5
  using: _5@Phi(bb4)
  _21 = const 0_i32
  using: 
  _19 = src::zrand::open(move _20, move _21) -> bb8
  using: _20@Mir(bb7[0]), _21@Mir(bb7[1])
bb8:
  _7 = move _19
  using: _19@Mir(bb7[2])
  _23 = _7
  using: _7@Mir(bb8[0])
  _24 = const 0_i32
  using: 
  _22 = Lt(move _23, move _24)
  using: _23@Mir(bb8[1]), _24@Mir(bb8[2])
  switchInt(move _22) -> [0: bb12, otherwise: bb9]
  using: _22@Mir(bb8[3])
bb9:
  _26 = src::zrand::__errno_location() -> bb10
  using: 
bb10:
  _25 = (*_26)
  using: _26@Mir(bb9[0])
  _27 = const {alloc224: *mut i32}
  using: 
  (*_27) = move _25
  using: _27@Mir(bb10[1]), _25@Mir(bb10[0])
  _32 = const {alloc225: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _31 = &mut (*_32)
  using: _32@Mir(bb10[3])
  _30 = move _31 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _31@Mir(bb10[4])
  _29 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _30) -> bb11
  using: _30@Mir(bb10[5])
bb11:
  _33 = const 1_i32
  using: 
  _28 = src::zrand::longjmp(move _29, move _33)
  using: _29@Mir(bb10[6]), _33@Mir(bb11[0])
bb12:
  _34 = _3
  using: _3@Entry
  switchInt(_34) -> [0: bb14, 1: bb24, otherwise: bb13]
  using: _34@Mir(bb12[0])
bb13:
  _92 = src::zrand::abort()
  using: 
bb14:
  _37 = _4
  using: _4@Entry
  _36 = src::zrand::zsignum(move _37) -> bb15
  using: _37@Mir(bb14[0])
bb15:
  _38 = const 0_i32
  using: 
  _35 = Lt(move _36, move _38)
  using: _36@Mir(bb14[1]), _38@Mir(bb15[0])
  switchInt(move _35) -> [0: bb18, otherwise: bb16]
  using: _35@Mir(bb15[1])
bb16:
  _39 = const 33_i32
  using: 
  _40 = const {alloc224: *mut i32}
  using: 
  (*_40) = move _39
  using: _40@Mir(bb16[1]), _39@Mir(bb16[0])
  _45 = const {alloc225: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _44 = &mut (*_45)
  using: _45@Mir(bb16[3])
  _43 = move _44 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _44@Mir(bb16[4])
  _42 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _43) -> bb17
  using: _43@Mir(bb16[5])
bb17:
  _46 = const 1_i32
  using: 
  _41 = src::zrand::longjmp(move _42, move _46)
  using: _42@Mir(bb16[6]), _46@Mir(bb17[0])
bb18:
  _48 = _4
  using: _4@Entry
  _47 = src::zbits::zbits(move _48) -> bb19
  using: _48@Mir(bb18[0])
bb19:
  _6 = move _47
  using: _47@Mir(bb18[1])
  _50 = _1
  using: _1@Entry
  _51 = _6
  using: _6@Mir(bb19[0])
  _52 = _7
  using: _7@Mir(bb8[0])
  _49 = src::zrand::zrand_get_random_bits(move _50, move _51, move _52) -> bb20
  using: _50@Mir(bb19[1]), _51@Mir(bb19[2]), _52@Mir(bb19[3])
bb20:
  _54 = _1
  using: _1@Entry
  _55 = _1
  using: _1@Entry
  _59 = const {alloc232: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _58 = &mut (*_59)
  using: _59@Mir(bb20[2])
  _57 = move _58 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _58@Mir(bb20[3])
  _56 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _57) -> bb21
  using: _57@Mir(bb20[4])
bb21:
  _53 = src::zadd::zadd(move _54, move _55, move _56) -> bb22
  using: _54@Mir(bb20[0]), _55@Mir(bb20[1]), _56@Mir(bb20[5])
bb22:
  _61 = _1
  using: _1@Entry
  _62 = _1
  using: _1@Entry
  _63 = _4
  using: _4@Entry
  _60 = src::zmul::zmul(move _61, move _62, move _63) -> bb23
  using: _61@Mir(bb22[0]), _62@Mir(bb22[1]), _63@Mir(bb22[2])
bb23:
  _65 = _1
  using: _1@Entry
  _66 = _1
  using: _1@Entry
  _67 = _6
  using: _6@Mir(bb19[0])
  _64 = src::zrsh::zrsh(move _65, move _66, move _67) -> bb33
  using: _65@Mir(bb23[0]), _66@Mir(bb23[1]), _67@Mir(bb23[2])
bb24:
  _70 = _4
  using: _4@Entry
  _69 = src::zrand::zsignum(move _70) -> bb25
  using: _70@Mir(bb24[0])
bb25:
  _71 = const 0_i32
  using: 
  _68 = Lt(move _69, move _71)
  using: _69@Mir(bb24[1]), _71@Mir(bb25[0])
  switchInt(move _68) -> [0: bb28, otherwise: bb26]
  using: _68@Mir(bb25[1])
bb26:
  _72 = const 33_i32
  using: 
  _73 = const {alloc224: *mut i32}
  using: 
  (*_73) = move _72
  using: _73@Mir(bb26[1]), _72@Mir(bb26[0])
  _78 = const {alloc225: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _77 = &mut (*_78)
  using: _78@Mir(bb26[3])
  _76 = move _77 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _77@Mir(bb26[4])
  _75 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _76) -> bb27
  using: _76@Mir(bb26[5])
bb27:
  _79 = const 1_i32
  using: 
  _74 = src::zrand::longjmp(move _75, move _79)
  using: _75@Mir(bb26[6]), _79@Mir(bb27[0])
bb28:
  _81 = _4
  using: _4@Entry
  _80 = src::zbits::zbits(move _81) -> bb29
  using: _81@Mir(bb28[0])
bb29:
  _6 = move _80
  using: _80@Mir(bb28[1])
  goto -> bb30
  using: 
bb30:
  _83 = _1
  using: _1@Phi(bb30)
  _84 = _6
  using: _6@Mir(bb29[0])
  _85 = _7
  using: _7@Mir(bb8[0])
  _82 = src::zrand::zrand_get_random_bits(move _83, move _84, move _85) -> bb31
  using: _83@Mir(bb30[0]), _84@Mir(bb30[1]), _85@Mir(bb30[2])
bb31:
  _89 = _1
  using: _1@Phi(bb30)
  _90 = _4
  using: _4@Phi(bb30)
  _88 = src::zcmpmag::zcmpmag(move _89, move _90) -> bb32
  using: _89@Mir(bb31[0]), _90@Mir(bb31[1])
bb32:
  _91 = const 0_i32
  using: 
  _87 = Gt(move _88, move _91)
  using: _88@Mir(bb31[2]), _91@Mir(bb32[0])
  _86 = Not(move _87)
  using: _87@Mir(bb32[1])
  switchInt(move _86) -> [0: bb30, otherwise: bb33]
  using: _86@Mir(bb32[2])
bb33:
  _94 = _7
  using: _7@Phi(bb33)
  _93 = src::zrand::close(move _94) -> bb34
  using: _94@Mir(bb33[0])
bb34:
  return
  using: _0@Entry
rewrite call src::zrand::abort @ workspace/libzahl/src/zrand.rs:118:13: 118:20 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call src::zrand::open @ workspace/libzahl/src/zrand.rs:125:10: 125:42 (#0) by default
rewrite call src::zrand::__errno_location @ workspace/libzahl/src/zrand.rs:127:26: 127:44 (#0) by default
rewrite call src::zrand::longjmp @ workspace/libzahl/src/zrand.rs:128:9: 128:64 (#0) by default
rewrite call src::zrand::abort @ workspace/libzahl/src/zrand.rs:156:13: 156:20 (#0) by default
rewrite call src::zrand::longjmp @ workspace/libzahl/src/zrand.rs:134:17: 134:72 (#0) by default
rewrite call src::zrand::longjmp @ workspace/libzahl/src/zrand.rs:145:17: 145:72 (#0) by default
rewrite call src::zrand::close @ workspace/libzahl/src/zrand.rs:159:5: 159:14 (#0) by default
@DefId(0:480 ~ lib[40c5]::src::zrsh::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:481 ~ lib[40c5]::src::zrsh::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:482 ~ lib[40c5]::src::zrsh::zrsh)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _7 = _3
  using: _3@Entry
  switchInt(move _7) -> [0: bb1, otherwise: bb3]
  using: _7@Mir(bb0[3])
bb1:
  _9 = _1
  using: _1@Entry
  _10 = _2
  using: _2@Entry
  _8 = Ne(move _9, move _10)
  using: _9@Mir(bb1[0]), _10@Mir(bb1[1])
  switchInt(move _8) -> [0: bb52, otherwise: bb2]
  using: _8@Mir(bb1[2])
bb2:
  _12 = _1
  using: _1@Entry
  _13 = _2
  using: _2@Entry
  _11 = src::zset::zset(move _12, move _13) -> bb52
  using: _12@Mir(bb2[0]), _13@Mir(bb2[1])
bb3:
  _14 = _3
  using: _3@Entry
  _15 = const 5_i32
  using: 
  _16 = CheckedShr(_14, _15)
  using: _14@Mir(bb3[0]), _15@Mir(bb3[1])
  assert(!move (_16.1: bool), "attempt to shift right by `{}`, which would overflow", move _15) -> bb4
  using: _16@Entry, _14@Entry, _15@Entry
bb4:
  _5 = move (_16.0: u64)
  using: _16@Mir(bb3[2])
  _20 = _2
  using: _2@Entry
  _19 = src::zrsh::zzero(move _20) -> bb11
  using: _20@Mir(bb4[1])
bb5:
  _17 = const true
  using: 
  goto -> bb7
  using: 
bb6:
  _26 = _2
  using: _2@Phi(bb10)
  _25 = src::zbits::zbits(move _26) -> bb12
  using: _26@Mir(bb6[0])
bb7:
  switchInt(move _17) -> [0: bb14, otherwise: bb13]
  using: _17@Phi(bb7)
bb8:
  _18 = const true
  using: 
  goto -> bb10
  using: 
bb9:
  _22 = _5
  using: _5@Mir(bb4[0])
  _23 = ((*_2).1: u64)
  using: _2@Entry
  _21 = Ge(move _22, move _23)
  using: _22@Mir(bb9[0]), _23@Mir(bb9[1])
  _18 = move _21
  using: _21@Mir(bb9[2])
  goto -> bb10
  using: 
bb10:
  switchInt(move _18) -> [0: bb6, otherwise: bb5]
  using: _18@Phi(bb10)
bb11:
  switchInt(move _19) -> [0: bb9, otherwise: bb8]
  using: _19@Mir(bb4[2])
bb12:
  _27 = _3
  using: _3@Entry
  _24 = Le(move _25, move _27)
  using: _25@Mir(bb6[1]), _27@Mir(bb12[0])
  _17 = move _24
  using: _24@Mir(bb12[1])
  goto -> bb7
  using: 
bb13:
  _28 = const 0_i32
  using: 
  ((*_1).0: i32) = move _28
  using: _1@Entry, _28@Mir(bb13[0])
  goto -> bb52
  using: 
bb14:
  _29 = _3
  using: _3@Phi(bb7)
  _30 = const 31_u64
  using: 
  _3 = BitAnd(move _29, move _30)
  using: _29@Mir(bb14[0]), _30@Mir(bb14[1])
  _32 = const 32_u64
  using: 
  _33 = _3
  using: _3@Mir(bb14[2])
  _31 = core::num::<impl u64>::wrapping_sub(move _32, move _33) -> bb15
  using: _32@Mir(bb14[3]), _33@Mir(bb14[4])
bb15:
  _6 = move _31
  using: _31@Mir(bb14[5])
  _35 = _5
  using: _5@Phi(bb10)
  switchInt(move _35) -> [0: bb16, otherwise: bb17]
  using: _35@Mir(bb15[1])
bb16:
  _34 = const false
  using: 
  goto -> bb18
  using: 
bb17:
  _37 = _1
  using: _1@Entry
  _38 = _2
  using: _2@Phi(bb7)
  _36 = Eq(move _37, move _38)
  using: _37@Mir(bb17[0]), _38@Mir(bb17[1])
  _34 = move _36
  using: _36@Mir(bb17[2])
  goto -> bb18
  using: 
bb18:
  switchInt(move _34) -> [0: bb24, otherwise: bb19]
  using: _34@Phi(bb18)
bb19:
  _40 = ((*_1).1: u64)
  using: _1@Phi(bb18)
  _41 = _5
  using: _5@Phi(bb10)
  _39 = core::num::<impl u64>::wrapping_sub(move _40, move _41) -> bb20
  using: _40@Mir(bb19[0]), _41@Mir(bb19[1])
bb20:
  ((*_1).1: u64) = move _39
  using: _1@Phi(bb18), _39@Mir(bb19[2])
  _44 = ((*_1).3: *mut u32)
  using: _1@Phi(bb18)
  _43 = move _44 as *mut libc::c_void (PtrToPtr)
  using: _44@Mir(bb20[1])
  _47 = ((*_1).3: *mut u32)
  using: _1@Phi(bb18)
  _49 = _5
  using: _5@Phi(bb10)
  _48 = move _49 as isize (IntToInt)
  using: _49@Mir(bb20[4])
  _46 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _47, move _48) -> bb21
  using: _47@Mir(bb20[3]), _48@Mir(bb20[5])
bb21:
  _45 = move _46 as *const libc::c_void (PtrToPtr)
  using: _46@Mir(bb20[6])
  _51 = ((*_1).1: u64)
  using: _1@Phi(bb18)
  _53 = std::mem::size_of::<u32>() -> bb22
  using: 
bb22:
  _52 = move _53 as u64 (IntToInt)
  using: _53@Mir(bb21[2])
  _50 = core::num::<impl u64>::wrapping_mul(move _51, move _52) -> bb23
  using: _51@Mir(bb21[1]), _52@Mir(bb22[0])
bb23:
  _42 = src::zrsh::memmove(move _43, move _45, move _50) -> bb32
  using: _43@Mir(bb20[2]), _45@Mir(bb21[0]), _50@Mir(bb22[1])
bb24:
  _55 = _1
  using: _1@Phi(bb18)
  _56 = _2
  using: _2@Phi(bb18)
  _54 = Ne(move _55, move _56)
  using: _55@Mir(bb24[0]), _56@Mir(bb24[1])
  switchInt(move _54) -> [0: bb32, otherwise: bb25]
  using: _54@Mir(bb24[2])
bb25:
  _58 = ((*_2).1: u64)
  using: _2@Phi(bb18)
  _59 = _5
  using: _5@Phi(bb10)
  _57 = core::num::<impl u64>::wrapping_sub(move _58, move _59) -> bb26
  using: _58@Mir(bb25[0]), _59@Mir(bb25[1])
bb26:
  ((*_1).1: u64) = move _57
  using: _1@Phi(bb18), _57@Mir(bb25[2])
  _61 = ((*_1).2: u64)
  using: _1@Phi(bb18)
  _62 = ((*_1).1: u64)
  using: _1@Phi(bb18)
  _60 = Lt(move _61, move _62)
  using: _61@Mir(bb26[1]), _62@Mir(bb26[2])
  switchInt(move _60) -> [0: bb28, otherwise: bb27]
  using: _60@Mir(bb26[3])
bb27:
  _64 = _1
  using: _1@Phi(bb18)
  _65 = ((*_1).1: u64)
  using: _1@Phi(bb18)
  _63 = src::allocator::libzahl_realloc(move _64, move _65) -> bb28
  using: _64@Mir(bb27[0]), _65@Mir(bb27[1])
bb28:
  _68 = ((*_1).3: *mut u32)
  using: _1@Phi(bb28)
  _67 = move _68 as *mut libc::c_void (PtrToPtr)
  using: _68@Mir(bb28[0])
  _71 = ((*_2).3: *mut u32)
  using: _2@Phi(bb18)
  _73 = _5
  using: _5@Phi(bb10)
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb28[3])
  _70 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _71, move _72) -> bb29
  using: _71@Mir(bb28[2]), _72@Mir(bb28[4])
bb29:
  _69 = move _70 as *const libc::c_void (PtrToPtr)
  using: _70@Mir(bb28[5])
  _75 = ((*_1).1: u64)
  using: _1@Phi(bb28)
  _77 = std::mem::size_of::<u32>() -> bb30
  using: 
bb30:
  _76 = move _77 as u64 (IntToInt)
  using: _77@Mir(bb29[2])
  _74 = core::num::<impl u64>::wrapping_mul(move _75, move _76) -> bb31
  using: _75@Mir(bb29[1]), _76@Mir(bb30[0])
bb31:
  _66 = src::zrsh::memcpy(move _67, move _69, move _74) -> bb32
  using: _67@Mir(bb28[1]), _69@Mir(bb29[0]), _74@Mir(bb30[1])
bb32:
  _78 = _3
  using: _3@Mir(bb14[2])
  switchInt(move _78) -> [0: bb50, otherwise: bb33]
  using: _78@Mir(bb32[0])
bb33:
  _79 = _3
  using: _3@Mir(bb14[2])
  _81 = ((*_1).3: *mut u32)
  using: _1@Phi(bb32)
  _82 = const 0_isize
  using: 
  _80 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _81, move _82) -> bb34
  using: _81@Mir(bb33[1]), _82@Mir(bb33[2])
bb34:
  _83 = CheckedShr((*_80), _79)
  using: _80@Mir(bb33[3]), _79@Mir(bb33[0])
  assert(!move (_83.1: bool), "attempt to shift right by `{}`, which would overflow", move _79) -> bb35
  using: _83@Entry, _80@Entry, _79@Entry
bb35:
  (*_80) = move (_83.0: u32)
  using: _80@Mir(bb33[3]), _83@Mir(bb34[0])
  _4 = const 1_u64
  using: 
  goto -> bb36
  using: 
bb36:
  _85 = _4
  using: _4@Phi(bb36)
  _86 = ((*_1).1: u64)
  using: _1@Phi(bb36)
  _84 = Lt(move _85, move _86)
  using: _85@Mir(bb36[0]), _86@Mir(bb36[1])
  switchInt(move _84) -> [0: bb45, otherwise: bb37]
  using: _84@Mir(bb36[2])
bb37:
  _89 = ((*_1).3: *mut u32)
  using: _1@Phi(bb36)
  _91 = _4
  using: _4@Phi(bb36)
  _90 = move _91 as isize (IntToInt)
  using: _91@Mir(bb37[1])
  _88 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _89, move _90) -> bb38
  using: _89@Mir(bb37[0]), _90@Mir(bb37[2])
bb38:
  _87 = (*_88)
  using: _88@Mir(bb37[3])
  _92 = _6
  using: _6@Phi(bb36)
  _93 = CheckedShl(_87, _92)
  using: _87@Mir(bb38[0]), _92@Mir(bb38[1])
  assert(!move (_93.1: bool), "attempt to shift left by `{}`, which would overflow", move _92) -> bb39
  using: _93@Entry, _87@Entry, _92@Entry
bb39:
  _95 = ((*_1).3: *mut u32)
  using: _1@Phi(bb36)
  _98 = _4
  using: _4@Phi(bb36)
  _99 = const 1_u64
  using: 
  _97 = core::num::<impl u64>::wrapping_sub(move _98, move _99) -> bb40
  using: _98@Mir(bb39[1]), _99@Mir(bb39[2])
bb40:
  _96 = move _97 as isize (IntToInt)
  using: _97@Mir(bb39[3])
  _94 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _95, move _96) -> bb41
  using: _95@Mir(bb39[0]), _96@Mir(bb40[0])
bb41:
  (*_94) = move (_93.0: u32)
  using: _94@Mir(bb40[1]), _93@Mir(bb38[2])
  _100 = _3
  using: _3@Phi(bb36)
  _102 = ((*_1).3: *mut u32)
  using: _1@Phi(bb36)
  _104 = _4
  using: _4@Phi(bb36)
  _103 = move _104 as isize (IntToInt)
  using: _104@Mir(bb41[3])
  _101 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _102, move _103) -> bb42
  using: _102@Mir(bb41[2]), _103@Mir(bb41[4])
bb42:
  _105 = CheckedShr((*_101), _100)
  using: _101@Mir(bb41[5]), _100@Mir(bb41[1])
  assert(!move (_105.1: bool), "attempt to shift right by `{}`, which would overflow", move _100) -> bb43
  using: _105@Entry, _101@Entry, _100@Entry
bb43:
  (*_101) = move (_105.0: u32)
  using: _101@Mir(bb41[5]), _105@Mir(bb42[0])
  _107 = _4
  using: _4@Phi(bb36)
  _106 = core::num::<impl u64>::wrapping_add(move _107, const 1_u64) -> bb44
  using: _107@Mir(bb43[1])
bb44:
  _4 = move _106
  using: _106@Mir(bb43[2])
  goto -> bb36
  using: 
bb45:
  _110 = ((*_1).3: *mut u32)
  using: _1@Phi(bb45)
  _113 = ((*_1).1: u64)
  using: _1@Phi(bb45)
  _114 = const 1_u64
  using: 
  _112 = core::num::<impl u64>::wrapping_sub(move _113, move _114) -> bb46
  using: _113@Mir(bb45[1]), _114@Mir(bb45[2])
bb46:
  _111 = move _112 as isize (IntToInt)
  using: _112@Mir(bb45[3])
  _109 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _110, move _111) -> bb47
  using: _110@Mir(bb45[0]), _111@Mir(bb46[0])
bb47:
  _108 = (*_109)
  using: _109@Mir(bb46[1])
  switchInt(move _108) -> [0: bb48, otherwise: bb50]
  using: _108@Mir(bb47[0])
bb48:
  _116 = ((*_1).1: u64)
  using: _1@Phi(bb45)
  _115 = core::num::<impl u64>::wrapping_sub(move _116, const 1_u64) -> bb49
  using: _116@Mir(bb48[0])
bb49:
  ((*_1).1: u64) = move _115
  using: _1@Phi(bb45), _115@Mir(bb48[1])
  goto -> bb45
  using: 
bb50:
  _118 = _2
  using: _2@Phi(bb32)
  _117 = src::zrsh::zsignum(move _118) -> bb51
  using: _118@Mir(bb50[0])
bb51:
  ((*_1).0: i32) = move _117
  using: _1@Phi(bb50), _117@Mir(bb50[1])
  goto -> bb52
  using: 
bb52:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:53:50: 53:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:55:50: 55:69 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:58:26: 58:48 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zrsh.rs:60:31: 60:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zrsh.rs:60:18: 60:85 (#0) by default
rewrite call src::zrsh::memmove @ workspace/libzahl/src/zrsh.rs:56:9: 61:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:63:33: 63:52 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:69:26: 69:48 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zrsh.rs:71:31: 71:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zrsh.rs:71:18: 71:85 (#0) by default
rewrite call src::zrsh::memcpy @ workspace/libzahl/src/zrsh.rs:67:9: 72:10 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:75:23: 75:56 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:79:101: 79:119 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:79:27: 79:74 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:79:18: 79:84 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:80:27: 80:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zrsh.rs:81:19: 81:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:84:33: 84:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zrsh.rs:84:14: 84:90 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zrsh.rs:87:37: 87:52 (#0) by default
@DefId(0:491 ~ lib[40c5]::src::zsave::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:492 ~ lib[40c5]::src::zsave::zsave)
bb0:
  _5 = _2
  using: _2@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libc::c_void>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb11, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _7 = _2
  using: _2@Entry
  _6 = move _7 as *mut i8 (PtrToPtr)
  using: _7@Mir(bb2[0])
  _8 = ((*_1).0: i32)
  using: _1@Entry
  _10 = _6
  using: _6@Mir(bb2[1])
  _9 = move _10 as *mut i32 (PtrToPtr)
  using: _10@Mir(bb2[3])
  (*_9) = move _8
  using: _9@Mir(bb2[4]), _8@Mir(bb2[2])
  _12 = _6
  using: _6@Mir(bb2[1])
  _15 = std::mem::size_of::<i32>() -> bb3
  using: 
bb3:
  _14 = move _15 as u64 (IntToInt)
  using: _15@Mir(bb2[7])
  _13 = move _14 as isize (IntToInt)
  using: _14@Mir(bb3[0])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _12, move _13) -> bb4
  using: _12@Mir(bb2[6]), _13@Mir(bb3[1])
bb4:
  _6 = move _11
  using: _11@Mir(bb3[2])
  _16 = ((*_1).1: u64)
  using: _1@Entry
  _18 = _6
  using: _6@Mir(bb4[0])
  _17 = move _18 as *mut u64 (PtrToPtr)
  using: _18@Mir(bb4[2])
  (*_17) = move _16
  using: _17@Mir(bb4[3]), _16@Mir(bb4[1])
  _20 = _6
  using: _6@Mir(bb4[0])
  _23 = std::mem::size_of::<u64>() -> bb5
  using: 
bb5:
  _22 = move _23 as u64 (IntToInt)
  using: _23@Mir(bb4[6])
  _21 = move _22 as isize (IntToInt)
  using: _22@Mir(bb5[0])
  _19 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _20, move _21) -> bb6
  using: _20@Mir(bb4[5]), _21@Mir(bb5[1])
bb6:
  _6 = move _19
  using: _19@Mir(bb5[2])
  _25 = _1
  using: _1@Entry
  _24 = src::zsave::zzero(move _25) -> bb7
  using: _25@Mir(bb6[1])
bb7:
  switchInt(move _24) -> [0: bb8, otherwise: bb12]
  using: _24@Mir(bb6[2])
bb8:
  _28 = _6
  using: _6@Mir(bb6[0])
  _27 = move _28 as *mut libc::c_void (PtrToPtr)
  using: _28@Mir(bb8[0])
  _30 = ((*_1).3: *mut u32)
  using: _1@Entry
  _29 = move _30 as *const libc::c_void (PtrToPtr)
  using: _30@Mir(bb8[2])
  _32 = ((*_1).1: u64)
  using: _1@Entry
  _34 = std::mem::size_of::<u32>() -> bb9
  using: 
bb9:
  _33 = move _34 as u64 (IntToInt)
  using: _34@Mir(bb8[5])
  _31 = core::num::<impl u64>::wrapping_mul(move _32, move _33) -> bb10
  using: _32@Mir(bb8[4]), _33@Mir(bb9[0])
bb10:
  _26 = src::zsave::memcpy(move _27, move _29, move _31) -> bb12
  using: _27@Mir(bb8[1]), _29@Mir(bb8[3]), _31@Mir(bb9[1])
bb11:
  _37 = _2
  using: _2@Entry
  _36 = move _37 as usize (PointerExposeAddress)
  using: _37@Mir(bb11[0])
  _35 = Eq(move _36, const 0_usize)
  using: _36@Mir(bb11[1])
  assume(move _35)
  using: _35@Mir(bb11[2])
  goto -> bb12
  using: 
bb12:
  _40 = std::mem::size_of::<i32>() -> bb13
  using: 
bb13:
  _39 = move _40 as u64 (IntToInt)
  using: _40@Mir(bb12[0])
  _42 = std::mem::size_of::<u64>() -> bb14
  using: 
bb14:
  _41 = move _42 as u64 (IntToInt)
  using: _42@Mir(bb13[1])
  _38 = core::num::<impl u64>::wrapping_add(move _39, move _41) -> bb15
  using: _39@Mir(bb13[0]), _41@Mir(bb14[0])
bb15:
  _45 = _1
  using: _1@Phi(bb12)
  _44 = src::zsave::zzero(move _45) -> bb16
  using: _45@Mir(bb15[0])
bb16:
  switchInt(move _44) -> [0: bb18, otherwise: bb17]
  using: _44@Mir(bb15[1])
bb17:
  _43 = const 0_u64
  using: 
  goto -> bb20
  using: 
bb18:
  _46 = ((*_1).1: u64)
  using: _1@Phi(bb12)
  _48 = std::mem::size_of::<u32>() -> bb19
  using: 
bb19:
  _47 = move _48 as u64 (IntToInt)
  using: _48@Mir(bb18[1])
  _43 = core::num::<impl u64>::wrapping_mul(move _46, move _47) -> bb20
  using: _46@Mir(bb18[0]), _47@Mir(bb19[0])
bb20:
  _0 = core::num::<impl u64>::wrapping_add(move _38, move _43) -> bb21
  using: _38@Mir(bb14[1]), _43@Phi(bb20)
bb21:
  return
  using: _0@Mir(bb20[0])
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:28:26: 28:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsave.rs:28:19: 28:89 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:30:26: 30:57 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsave.rs:30:19: 30:84 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:36:35: 36:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsave.rs:36:22: 36:89 (#0) by default
rewrite call src::zsave::memcpy @ workspace/libzahl/src/zsave.rs:32:13: 37:14 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:40:13: 40:49 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:41:23: 41:54 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsave.rs:41:10: 41:72 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsave.rs:47:35: 47:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsave.rs:47:22: 47:89 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsave.rs:42:10: 49:10 (#0) by default
@DefId(0:501 ~ lib[40c5]::src::zset::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:502 ~ lib[40c5]::src::zset::zset)
bb0:
  _4 = _2
  using: _2@Entry
  _3 = src::zset::zzero(move _4) -> bb1
  using: _4@Mir(bb0[0])
bb1:
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb0[1])
bb2:
  _5 = const 0_i32
  using: 
  ((*_1).0: i32) = move _5
  using: _1@Entry, _5@Mir(bb2[0])
  goto -> bb8
  using: 
bb3:
  _7 = ((*_1).2: u64)
  using: _1@Entry
  _8 = ((*_2).1: u64)
  using: _2@Entry
  _6 = Lt(move _7, move _8)
  using: _7@Mir(bb3[0]), _8@Mir(bb3[1])
  switchInt(move _6) -> [0: bb5, otherwise: bb4]
  using: _6@Mir(bb3[2])
bb4:
  _10 = _1
  using: _1@Entry
  _11 = ((*_2).1: u64)
  using: _2@Entry
  _9 = src::allocator::libzahl_realloc(move _10, move _11) -> bb5
  using: _10@Mir(bb4[0]), _11@Mir(bb4[1])
bb5:
  _12 = ((*_2).0: i32)
  using: _2@Phi(bb5)
  ((*_1).0: i32) = move _12
  using: _1@Phi(bb5), _12@Mir(bb5[0])
  _13 = ((*_2).1: u64)
  using: _2@Phi(bb5)
  ((*_1).1: u64) = move _13
  using: _1@Phi(bb5), _13@Mir(bb5[2])
  _16 = ((*_1).3: *mut u32)
  using: _1@Phi(bb5)
  _15 = move _16 as *mut libc::c_void (PtrToPtr)
  using: _16@Mir(bb5[4])
  _18 = ((*_2).3: *mut u32)
  using: _2@Phi(bb5)
  _17 = move _18 as *const libc::c_void (PtrToPtr)
  using: _18@Mir(bb5[6])
  _20 = ((*_2).1: u64)
  using: _2@Phi(bb5)
  _22 = std::mem::size_of::<u32>() -> bb6
  using: 
bb6:
  _21 = move _22 as u64 (IntToInt)
  using: _22@Mir(bb5[9])
  _19 = core::num::<impl u64>::wrapping_mul(move _20, move _21) -> bb7
  using: _20@Mir(bb5[8]), _21@Mir(bb6[0])
bb7:
  _14 = src::zset::memcpy(move _15, move _17, move _19) -> bb8
  using: _15@Mir(bb5[5]), _17@Mir(bb5[7]), _19@Mir(bb6[1])
bb8:
  return
  using: _0@Entry
rewrite call std::mem::size_of @ workspace/libzahl/src/zset.rs:35:31: 35:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zset.rs:35:18: 35:85 (#0) by default
rewrite call src::zset::memcpy @ workspace/libzahl/src/zset.rs:31:9: 36:10 (#0) by default
@DefId(0:510 ~ lib[40c5]::src::zseti::zseti)
bb0:
  _4 = _2
  using: _2@Entry
  _5 = const 0_i64
  using: 
  _3 = Ge(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb2, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _7 = _1
  using: _1@Entry
  _9 = _2
  using: _2@Entry
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb1[1])
  _6 = src::zsetu::zsetu(move _7, move _8) -> bb5
  using: _7@Mir(bb1[0]), _8@Mir(bb1[2])
bb2:
  _11 = _1
  using: _1@Entry
  _14 = _2
  using: _2@Entry
  _15 = Eq(_14, const i64::MIN)
  using: _14@Mir(bb2[1])
  assert(!move _15, "attempt to negate `{}`, which would overflow", _14) -> bb3
  using: _15@Entry, _14@Entry
bb3:
  _13 = Neg(move _14)
  using: _14@Mir(bb2[1])
  _12 = move _13 as u64 (IntToInt)
  using: _13@Mir(bb3[0])
  _10 = src::zsetu::zsetu(move _11, move _12) -> bb4
  using: _11@Mir(bb2[0]), _12@Mir(bb3[1])
bb4:
  _16 = const 1_i32
  using: 
  ((*_1).0: i32) = Neg(move _16)
  using: _1@Entry, _16@Mir(bb4[0])
  goto -> bb5
  using: 
bb5:
  return
  using: _0@Entry
@DefId(0:537 ~ lib[40c5]::src::zsets::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:538 ~ lib[40c5]::src::zsets::zsets)
bb0:
  _3 = const 0_u64
  using: 
  _7 = (*_2)
  using: _2@Entry
  _6 = move _7 as i32 (IntToInt)
  using: _7@Mir(bb0[1])
  _8 = const 45_i32
  using: 
  _5 = Eq(move _6, move _8)
  using: _6@Mir(bb0[2]), _8@Mir(bb0[3])
  _4 = move _5 as i32 (IntToInt)
  using: _5@Mir(bb0[4])
  _9 = const {0x0 as *const i8}
  using: 
  _11 = _2
  using: _2@Entry
  _15 = _4
  using: _4@Mir(bb0[5])
  switchInt(move _15) -> [0: bb2, otherwise: bb1]
  using: _15@Mir(bb0[8])
bb1:
  _14 = const true
  using: 
  goto -> bb3
  using: 
bb2:
  _18 = (*_2)
  using: _2@Entry
  _17 = move _18 as i32 (IntToInt)
  using: _18@Mir(bb2[0])
  _19 = const 43_i32
  using: 
  _16 = Eq(move _17, move _19)
  using: _17@Mir(bb2[1]), _19@Mir(bb2[2])
  _14 = move _16
  using: _16@Mir(bb2[3])
  goto -> bb3
  using: 
bb3:
  _13 = move _14 as i32 (IntToInt)
  using: _14@Phi(bb3)
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb3[0])
  _10 = std::ptr::const_ptr::<impl *const i8>::offset(move _11, move _12) -> bb4
  using: _11@Mir(bb0[7]), _12@Mir(bb3[1])
bb4:
  _2 = move _10
  using: _10@Mir(bb3[2])
  _20 = (*_2)
  using: _2@Mir(bb4[0])
  switchInt(move _20) -> [0: bb5, otherwise: bb7]
  using: _20@Mir(bb4[1])
bb5:
  _21 = const 22_i32
  using: 
  _22 = src::zsets::__errno_location() -> bb6
  using: 
bb6:
  (*_22) = move _21
  using: _22@Mir(bb5[1]), _21@Mir(bb5[0])
  _0 = const -1_i32
  using: 
  goto -> bb138
  using: 
bb7:
  _23 = _2
  using: _2@Mir(bb4[0])
  _9 = move _23
  using: _23@Mir(bb7[0])
  goto -> bb8
  using: 
bb8:
  _24 = (*_9)
  using: _9@Phi(bb8)
  switchInt(move _24) -> [0: bb16, otherwise: bb9]
  using: _24@Mir(bb8[0])
bb9:
  _30 = src::zsets::__ctype_b_loc() -> bb10
  using: 
bb10:
  _29 = (*_30)
  using: _30@Mir(bb9[0])
  _33 = (*_9)
  using: _9@Phi(bb8)
  _32 = move _33 as i32 (IntToInt)
  using: _33@Mir(bb10[1])
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb10[2])
  _28 = std::ptr::const_ptr::<impl *const u16>::offset(move _29, move _31) -> bb11
  using: _29@Mir(bb10[0]), _31@Mir(bb10[3])
bb11:
  _27 = (*_28)
  using: _28@Mir(bb10[4])
  _26 = move _27 as i32 (IntToInt)
  using: _27@Mir(bb11[0])
  _34 = const 2048_i32
  using: 
  _25 = BitAnd(move _26, move _34)
  using: _26@Mir(bb11[1]), _34@Mir(bb11[2])
  switchInt(move _25) -> [0: bb12, otherwise: bb14]
  using: _25@Mir(bb11[3])
bb12:
  _35 = const 22_i32
  using: 
  _36 = src::zsets::__errno_location() -> bb13
  using: 
bb13:
  (*_36) = move _35
  using: _36@Mir(bb12[1]), _35@Mir(bb12[0])
  _0 = const -1_i32
  using: 
  goto -> bb138
  using: 
bb14:
  _38 = _9
  using: _9@Phi(bb8)
  _37 = std::ptr::const_ptr::<impl *const i8>::offset(move _38, const 1_isize) -> bb15
  using: _38@Mir(bb14[0])
bb15:
  _9 = move _37
  using: _37@Mir(bb14[1])
  goto -> bb8
  using: 
bb16:
  _39 = const 0_i32
  using: 
  ((*_1).0: i32) = move _39
  using: _1@Entry, _39@Mir(bb16[0])
  _44 = const {alloc257: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _43 = &mut (*_44)
  using: _44@Mir(bb16[2])
  _42 = move _43 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _43@Mir(bb16[3])
  _41 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _42) -> bb17
  using: _42@Mir(bb16[4])
bb17:
  _48 = const {alloc258: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _47 = &mut (*_48)
  using: _48@Mir(bb17[0])
  _46 = move _47 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _47@Mir(bb17[1])
  _45 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _46) -> bb18
  using: _46@Mir(bb17[2])
bb18:
  _40 = src::zset::zset(move _41, move _45) -> bb19
  using: _41@Mir(bb16[5]), _45@Mir(bb17[3])
bb19:
  _53 = _9
  using: _9@Phi(bb8)
  _54 = _2
  using: _2@Mir(bb4[0])
  _52 = std::ptr::const_ptr::<impl *const i8>::offset_from(move _53, move _54) -> bb20
  using: _53@Mir(bb19[0]), _54@Mir(bb19[1])
bb20:
  _51 = move _52 as i64 (IntToInt)
  using: _52@Mir(bb19[2])
  _55 = const 19_i64
  using: 
  _56 = const false
  using: 
  _57 = Eq(_51, const i64::MIN)
  using: _51@Mir(bb20[0])
  _58 = BitAnd(move _56, move _57)
  using: _56@Mir(bb20[2]), _57@Mir(bb20[3])
  assert(!move _58, "attempt to compute the remainder of `{} % {}`, which would overflow", _51, _55) -> bb21
  using: _58@Entry, _51@Entry, _55@Entry
bb21:
  _50 = Rem(move _51, move _55)
  using: _51@Mir(bb20[0]), _55@Mir(bb20[1])
  switchInt(_50) -> [0: bb23, 18: bb24, 17: bb25, 16: bb26, 15: bb27, 14: bb28, 13: bb29, 12: bb30, 11: bb31, 10: bb32, 9: bb33, 8: bb34, 7: bb35, 6: bb36, 5: bb37, 4: bb38, 3: bb39, 2: bb40, 1: bb41, otherwise: bb22]
  using: _50@Mir(bb21[0])
bb22:
  _49 = const 1434579379687443766_u64
  using: 
  goto -> bb42
  using: 
bb23:
  _49 = const 2009900886467833939_u64
  using: 
  goto -> bb42
  using: 
bb24:
  _49 = const 15121320231496893747_u64
  using: 
  goto -> bb42
  using: 
bb25:
  _49 = const 16368488404610608819_u64
  using: 
  goto -> bb42
  using: 
bb26:
  _49 = const 2817806250783016588_u64
  using: 
  goto -> bb42
  using: 
bb27:
  _49 = const 8436272415664805267_u64
  using: 
  goto -> bb42
  using: 
bb28:
  _49 = const 17260602820350443736_u64
  using: 
  goto -> bb42
  using: 
bb29:
  _49 = const 13506216435796342560_u64
  using: 
  goto -> bb42
  using: 
bb30:
  _49 = const 3798081891250826146_u64
  using: 
  goto -> bb42
  using: 
bb31:
  _49 = const 3337010891255527766_u64
  using: 
  goto -> bb42
  using: 
bb32:
  _49 = const 14701426646074699728_u64
  using: 
  goto -> bb42
  using: 
bb33:
  _49 = const 7675967895758458727_u64
  using: 
  goto -> bb42
  using: 
bb34:
  _49 = const 17228944538289729950_u64
  using: 
  goto -> bb42
  using: 
bb35:
  _49 = const 16906717074776190969_u64
  using: 
  goto -> bb42
  using: 
bb36:
  _49 = const 5148048065308018341_u64
  using: 
  goto -> bb42
  using: 
bb37:
  _49 = const 18210558662916816231_u64
  using: 
  goto -> bb42
  using: 
bb38:
  _49 = const 13503438682059240994_u64
  using: 
  goto -> bb42
  using: 
bb39:
  _49 = const 5618369753603485945_u64
  using: 
  goto -> bb42
  using: 
bb40:
  _49 = const 12749676338018479376_u64
  using: 
  goto -> bb42
  using: 
bb41:
  _49 = const 13992101357592761495_u64
  using: 
  goto -> bb42
  using: 
bb42:
  switchInt(_49) -> [1434579379687443766: bb44, 2009900886467833939: bb45, 15121320231496893747: bb49, 16368488404610608819: bb53, 2817806250783016588: bb57, 8436272415664805267: bb61, 17260602820350443736: bb65, 13506216435796342560: bb69, 3798081891250826146: bb73, 3337010891255527766: bb77, 14701426646074699728: bb81, 7675967895758458727: bb85, 17228944538289729950: bb89, 16906717074776190969: bb93, 5148048065308018341: bb97, 18210558662916816231: bb101, 13503438682059240994: bb105, 5618369753603485945: bb109, 12749676338018479376: bb113, otherwise: bb43]
  using: _49@Phi(bb42)
bb43:
  _294 = _3
  using: _3@Phi(bb42)
  _295 = const 10_u64
  using: 
  _293 = core::num::<impl u64>::wrapping_mul(move _294, move _295) -> bb117
  using: _294@Mir(bb43[0]), _295@Mir(bb43[1])
bb44:
  _354 = _4
  using: _4@Mir(bb0[5])
  switchInt(move _354) -> [0: bb137, otherwise: bb134]
  using: _354@Mir(bb44[0])
bb45:
  _60 = _3
  using: _3@Mir(bb117[0])
  _61 = const 10_u64
  using: 
  _59 = core::num::<impl u64>::wrapping_mul(move _60, move _61) -> bb46
  using: _60@Mir(bb45[0]), _61@Mir(bb45[1])
bb46:
  _3 = move _59
  using: _59@Mir(bb45[2])
  _62 = _2
  using: _2@Phi(bb42)
  _64 = _2
  using: _2@Phi(bb42)
  _63 = std::ptr::const_ptr::<impl *const i8>::offset(move _64, const 1_isize) -> bb47
  using: _64@Mir(bb46[2])
bb47:
  _2 = move _63
  using: _63@Mir(bb46[3])
  _66 = _3
  using: _3@Mir(bb46[0])
  _70 = (*_62)
  using: _62@Mir(bb46[1])
  _69 = move _70 as i32 (IntToInt)
  using: _70@Mir(bb47[2])
  _71 = const 15_i32
  using: 
  _68 = BitAnd(move _69, move _71)
  using: _69@Mir(bb47[3]), _71@Mir(bb47[4])
  _67 = move _68 as u64 (IntToInt)
  using: _68@Mir(bb47[5])
  _65 = core::num::<impl u64>::wrapping_add(move _66, move _67) -> bb48
  using: _66@Mir(bb47[1]), _67@Mir(bb47[6])
bb48:
  _3 = move _65
  using: _65@Mir(bb47[7])
  _49 = const 15121320231496893747_u64
  using: 
  goto -> bb42
  using: 
bb49:
  _73 = _3
  using: _3@Mir(bb117[0])
  _74 = const 10_u64
  using: 
  _72 = core::num::<impl u64>::wrapping_mul(move _73, move _74) -> bb50
  using: _73@Mir(bb49[0]), _74@Mir(bb49[1])
bb50:
  _3 = move _72
  using: _72@Mir(bb49[2])
  _75 = _2
  using: _2@Phi(bb42)
  _77 = _2
  using: _2@Phi(bb42)
  _76 = std::ptr::const_ptr::<impl *const i8>::offset(move _77, const 1_isize) -> bb51
  using: _77@Mir(bb50[2])
bb51:
  _2 = move _76
  using: _76@Mir(bb50[3])
  _79 = _3
  using: _3@Mir(bb50[0])
  _83 = (*_75)
  using: _75@Mir(bb50[1])
  _82 = move _83 as i32 (IntToInt)
  using: _83@Mir(bb51[2])
  _84 = const 15_i32
  using: 
  _81 = BitAnd(move _82, move _84)
  using: _82@Mir(bb51[3]), _84@Mir(bb51[4])
  _80 = move _81 as u64 (IntToInt)
  using: _81@Mir(bb51[5])
  _78 = core::num::<impl u64>::wrapping_add(move _79, move _80) -> bb52
  using: _79@Mir(bb51[1]), _80@Mir(bb51[6])
bb52:
  _3 = move _78
  using: _78@Mir(bb51[7])
  _49 = const 16368488404610608819_u64
  using: 
  goto -> bb42
  using: 
bb53:
  _86 = _3
  using: _3@Mir(bb117[0])
  _87 = const 10_u64
  using: 
  _85 = core::num::<impl u64>::wrapping_mul(move _86, move _87) -> bb54
  using: _86@Mir(bb53[0]), _87@Mir(bb53[1])
bb54:
  _3 = move _85
  using: _85@Mir(bb53[2])
  _88 = _2
  using: _2@Phi(bb42)
  _90 = _2
  using: _2@Phi(bb42)
  _89 = std::ptr::const_ptr::<impl *const i8>::offset(move _90, const 1_isize) -> bb55
  using: _90@Mir(bb54[2])
bb55:
  _2 = move _89
  using: _89@Mir(bb54[3])
  _92 = _3
  using: _3@Mir(bb54[0])
  _96 = (*_88)
  using: _88@Mir(bb54[1])
  _95 = move _96 as i32 (IntToInt)
  using: _96@Mir(bb55[2])
  _97 = const 15_i32
  using: 
  _94 = BitAnd(move _95, move _97)
  using: _95@Mir(bb55[3]), _97@Mir(bb55[4])
  _93 = move _94 as u64 (IntToInt)
  using: _94@Mir(bb55[5])
  _91 = core::num::<impl u64>::wrapping_add(move _92, move _93) -> bb56
  using: _92@Mir(bb55[1]), _93@Mir(bb55[6])
bb56:
  _3 = move _91
  using: _91@Mir(bb55[7])
  _49 = const 2817806250783016588_u64
  using: 
  goto -> bb42
  using: 
bb57:
  _99 = _3
  using: _3@Mir(bb117[0])
  _100 = const 10_u64
  using: 
  _98 = core::num::<impl u64>::wrapping_mul(move _99, move _100) -> bb58
  using: _99@Mir(bb57[0]), _100@Mir(bb57[1])
bb58:
  _3 = move _98
  using: _98@Mir(bb57[2])
  _101 = _2
  using: _2@Phi(bb42)
  _103 = _2
  using: _2@Phi(bb42)
  _102 = std::ptr::const_ptr::<impl *const i8>::offset(move _103, const 1_isize) -> bb59
  using: _103@Mir(bb58[2])
bb59:
  _2 = move _102
  using: _102@Mir(bb58[3])
  _105 = _3
  using: _3@Mir(bb58[0])
  _109 = (*_101)
  using: _101@Mir(bb58[1])
  _108 = move _109 as i32 (IntToInt)
  using: _109@Mir(bb59[2])
  _110 = const 15_i32
  using: 
  _107 = BitAnd(move _108, move _110)
  using: _108@Mir(bb59[3]), _110@Mir(bb59[4])
  _106 = move _107 as u64 (IntToInt)
  using: _107@Mir(bb59[5])
  _104 = core::num::<impl u64>::wrapping_add(move _105, move _106) -> bb60
  using: _105@Mir(bb59[1]), _106@Mir(bb59[6])
bb60:
  _3 = move _104
  using: _104@Mir(bb59[7])
  _49 = const 8436272415664805267_u64
  using: 
  goto -> bb42
  using: 
bb61:
  _112 = _3
  using: _3@Mir(bb117[0])
  _113 = const 10_u64
  using: 
  _111 = core::num::<impl u64>::wrapping_mul(move _112, move _113) -> bb62
  using: _112@Mir(bb61[0]), _113@Mir(bb61[1])
bb62:
  _3 = move _111
  using: _111@Mir(bb61[2])
  _114 = _2
  using: _2@Phi(bb42)
  _116 = _2
  using: _2@Phi(bb42)
  _115 = std::ptr::const_ptr::<impl *const i8>::offset(move _116, const 1_isize) -> bb63
  using: _116@Mir(bb62[2])
bb63:
  _2 = move _115
  using: _115@Mir(bb62[3])
  _118 = _3
  using: _3@Mir(bb62[0])
  _122 = (*_114)
  using: _114@Mir(bb62[1])
  _121 = move _122 as i32 (IntToInt)
  using: _122@Mir(bb63[2])
  _123 = const 15_i32
  using: 
  _120 = BitAnd(move _121, move _123)
  using: _121@Mir(bb63[3]), _123@Mir(bb63[4])
  _119 = move _120 as u64 (IntToInt)
  using: _120@Mir(bb63[5])
  _117 = core::num::<impl u64>::wrapping_add(move _118, move _119) -> bb64
  using: _118@Mir(bb63[1]), _119@Mir(bb63[6])
bb64:
  _3 = move _117
  using: _117@Mir(bb63[7])
  _49 = const 17260602820350443736_u64
  using: 
  goto -> bb42
  using: 
bb65:
  _125 = _3
  using: _3@Mir(bb117[0])
  _126 = const 10_u64
  using: 
  _124 = core::num::<impl u64>::wrapping_mul(move _125, move _126) -> bb66
  using: _125@Mir(bb65[0]), _126@Mir(bb65[1])
bb66:
  _3 = move _124
  using: _124@Mir(bb65[2])
  _127 = _2
  using: _2@Phi(bb42)
  _129 = _2
  using: _2@Phi(bb42)
  _128 = std::ptr::const_ptr::<impl *const i8>::offset(move _129, const 1_isize) -> bb67
  using: _129@Mir(bb66[2])
bb67:
  _2 = move _128
  using: _128@Mir(bb66[3])
  _131 = _3
  using: _3@Mir(bb66[0])
  _135 = (*_127)
  using: _127@Mir(bb66[1])
  _134 = move _135 as i32 (IntToInt)
  using: _135@Mir(bb67[2])
  _136 = const 15_i32
  using: 
  _133 = BitAnd(move _134, move _136)
  using: _134@Mir(bb67[3]), _136@Mir(bb67[4])
  _132 = move _133 as u64 (IntToInt)
  using: _133@Mir(bb67[5])
  _130 = core::num::<impl u64>::wrapping_add(move _131, move _132) -> bb68
  using: _131@Mir(bb67[1]), _132@Mir(bb67[6])
bb68:
  _3 = move _130
  using: _130@Mir(bb67[7])
  _49 = const 13506216435796342560_u64
  using: 
  goto -> bb42
  using: 
bb69:
  _138 = _3
  using: _3@Mir(bb117[0])
  _139 = const 10_u64
  using: 
  _137 = core::num::<impl u64>::wrapping_mul(move _138, move _139) -> bb70
  using: _138@Mir(bb69[0]), _139@Mir(bb69[1])
bb70:
  _3 = move _137
  using: _137@Mir(bb69[2])
  _140 = _2
  using: _2@Phi(bb42)
  _142 = _2
  using: _2@Phi(bb42)
  _141 = std::ptr::const_ptr::<impl *const i8>::offset(move _142, const 1_isize) -> bb71
  using: _142@Mir(bb70[2])
bb71:
  _2 = move _141
  using: _141@Mir(bb70[3])
  _144 = _3
  using: _3@Mir(bb70[0])
  _148 = (*_140)
  using: _140@Mir(bb70[1])
  _147 = move _148 as i32 (IntToInt)
  using: _148@Mir(bb71[2])
  _149 = const 15_i32
  using: 
  _146 = BitAnd(move _147, move _149)
  using: _147@Mir(bb71[3]), _149@Mir(bb71[4])
  _145 = move _146 as u64 (IntToInt)
  using: _146@Mir(bb71[5])
  _143 = core::num::<impl u64>::wrapping_add(move _144, move _145) -> bb72
  using: _144@Mir(bb71[1]), _145@Mir(bb71[6])
bb72:
  _3 = move _143
  using: _143@Mir(bb71[7])
  _49 = const 3798081891250826146_u64
  using: 
  goto -> bb42
  using: 
bb73:
  _151 = _3
  using: _3@Mir(bb117[0])
  _152 = const 10_u64
  using: 
  _150 = core::num::<impl u64>::wrapping_mul(move _151, move _152) -> bb74
  using: _151@Mir(bb73[0]), _152@Mir(bb73[1])
bb74:
  _3 = move _150
  using: _150@Mir(bb73[2])
  _153 = _2
  using: _2@Phi(bb42)
  _155 = _2
  using: _2@Phi(bb42)
  _154 = std::ptr::const_ptr::<impl *const i8>::offset(move _155, const 1_isize) -> bb75
  using: _155@Mir(bb74[2])
bb75:
  _2 = move _154
  using: _154@Mir(bb74[3])
  _157 = _3
  using: _3@Mir(bb74[0])
  _161 = (*_153)
  using: _153@Mir(bb74[1])
  _160 = move _161 as i32 (IntToInt)
  using: _161@Mir(bb75[2])
  _162 = const 15_i32
  using: 
  _159 = BitAnd(move _160, move _162)
  using: _160@Mir(bb75[3]), _162@Mir(bb75[4])
  _158 = move _159 as u64 (IntToInt)
  using: _159@Mir(bb75[5])
  _156 = core::num::<impl u64>::wrapping_add(move _157, move _158) -> bb76
  using: _157@Mir(bb75[1]), _158@Mir(bb75[6])
bb76:
  _3 = move _156
  using: _156@Mir(bb75[7])
  _49 = const 3337010891255527766_u64
  using: 
  goto -> bb42
  using: 
bb77:
  _164 = _3
  using: _3@Mir(bb117[0])
  _165 = const 10_u64
  using: 
  _163 = core::num::<impl u64>::wrapping_mul(move _164, move _165) -> bb78
  using: _164@Mir(bb77[0]), _165@Mir(bb77[1])
bb78:
  _3 = move _163
  using: _163@Mir(bb77[2])
  _166 = _2
  using: _2@Phi(bb42)
  _168 = _2
  using: _2@Phi(bb42)
  _167 = std::ptr::const_ptr::<impl *const i8>::offset(move _168, const 1_isize) -> bb79
  using: _168@Mir(bb78[2])
bb79:
  _2 = move _167
  using: _167@Mir(bb78[3])
  _170 = _3
  using: _3@Mir(bb78[0])
  _174 = (*_166)
  using: _166@Mir(bb78[1])
  _173 = move _174 as i32 (IntToInt)
  using: _174@Mir(bb79[2])
  _175 = const 15_i32
  using: 
  _172 = BitAnd(move _173, move _175)
  using: _173@Mir(bb79[3]), _175@Mir(bb79[4])
  _171 = move _172 as u64 (IntToInt)
  using: _172@Mir(bb79[5])
  _169 = core::num::<impl u64>::wrapping_add(move _170, move _171) -> bb80
  using: _170@Mir(bb79[1]), _171@Mir(bb79[6])
bb80:
  _3 = move _169
  using: _169@Mir(bb79[7])
  _49 = const 14701426646074699728_u64
  using: 
  goto -> bb42
  using: 
bb81:
  _177 = _3
  using: _3@Mir(bb117[0])
  _178 = const 10_u64
  using: 
  _176 = core::num::<impl u64>::wrapping_mul(move _177, move _178) -> bb82
  using: _177@Mir(bb81[0]), _178@Mir(bb81[1])
bb82:
  _3 = move _176
  using: _176@Mir(bb81[2])
  _179 = _2
  using: _2@Phi(bb42)
  _181 = _2
  using: _2@Phi(bb42)
  _180 = std::ptr::const_ptr::<impl *const i8>::offset(move _181, const 1_isize) -> bb83
  using: _181@Mir(bb82[2])
bb83:
  _2 = move _180
  using: _180@Mir(bb82[3])
  _183 = _3
  using: _3@Mir(bb82[0])
  _187 = (*_179)
  using: _179@Mir(bb82[1])
  _186 = move _187 as i32 (IntToInt)
  using: _187@Mir(bb83[2])
  _188 = const 15_i32
  using: 
  _185 = BitAnd(move _186, move _188)
  using: _186@Mir(bb83[3]), _188@Mir(bb83[4])
  _184 = move _185 as u64 (IntToInt)
  using: _185@Mir(bb83[5])
  _182 = core::num::<impl u64>::wrapping_add(move _183, move _184) -> bb84
  using: _183@Mir(bb83[1]), _184@Mir(bb83[6])
bb84:
  _3 = move _182
  using: _182@Mir(bb83[7])
  _49 = const 7675967895758458727_u64
  using: 
  goto -> bb42
  using: 
bb85:
  _190 = _3
  using: _3@Mir(bb117[0])
  _191 = const 10_u64
  using: 
  _189 = core::num::<impl u64>::wrapping_mul(move _190, move _191) -> bb86
  using: _190@Mir(bb85[0]), _191@Mir(bb85[1])
bb86:
  _3 = move _189
  using: _189@Mir(bb85[2])
  _192 = _2
  using: _2@Phi(bb42)
  _194 = _2
  using: _2@Phi(bb42)
  _193 = std::ptr::const_ptr::<impl *const i8>::offset(move _194, const 1_isize) -> bb87
  using: _194@Mir(bb86[2])
bb87:
  _2 = move _193
  using: _193@Mir(bb86[3])
  _196 = _3
  using: _3@Mir(bb86[0])
  _200 = (*_192)
  using: _192@Mir(bb86[1])
  _199 = move _200 as i32 (IntToInt)
  using: _200@Mir(bb87[2])
  _201 = const 15_i32
  using: 
  _198 = BitAnd(move _199, move _201)
  using: _199@Mir(bb87[3]), _201@Mir(bb87[4])
  _197 = move _198 as u64 (IntToInt)
  using: _198@Mir(bb87[5])
  _195 = core::num::<impl u64>::wrapping_add(move _196, move _197) -> bb88
  using: _196@Mir(bb87[1]), _197@Mir(bb87[6])
bb88:
  _3 = move _195
  using: _195@Mir(bb87[7])
  _49 = const 17228944538289729950_u64
  using: 
  goto -> bb42
  using: 
bb89:
  _203 = _3
  using: _3@Mir(bb117[0])
  _204 = const 10_u64
  using: 
  _202 = core::num::<impl u64>::wrapping_mul(move _203, move _204) -> bb90
  using: _203@Mir(bb89[0]), _204@Mir(bb89[1])
bb90:
  _3 = move _202
  using: _202@Mir(bb89[2])
  _205 = _2
  using: _2@Phi(bb42)
  _207 = _2
  using: _2@Phi(bb42)
  _206 = std::ptr::const_ptr::<impl *const i8>::offset(move _207, const 1_isize) -> bb91
  using: _207@Mir(bb90[2])
bb91:
  _2 = move _206
  using: _206@Mir(bb90[3])
  _209 = _3
  using: _3@Mir(bb90[0])
  _213 = (*_205)
  using: _205@Mir(bb90[1])
  _212 = move _213 as i32 (IntToInt)
  using: _213@Mir(bb91[2])
  _214 = const 15_i32
  using: 
  _211 = BitAnd(move _212, move _214)
  using: _212@Mir(bb91[3]), _214@Mir(bb91[4])
  _210 = move _211 as u64 (IntToInt)
  using: _211@Mir(bb91[5])
  _208 = core::num::<impl u64>::wrapping_add(move _209, move _210) -> bb92
  using: _209@Mir(bb91[1]), _210@Mir(bb91[6])
bb92:
  _3 = move _208
  using: _208@Mir(bb91[7])
  _49 = const 16906717074776190969_u64
  using: 
  goto -> bb42
  using: 
bb93:
  _216 = _3
  using: _3@Mir(bb117[0])
  _217 = const 10_u64
  using: 
  _215 = core::num::<impl u64>::wrapping_mul(move _216, move _217) -> bb94
  using: _216@Mir(bb93[0]), _217@Mir(bb93[1])
bb94:
  _3 = move _215
  using: _215@Mir(bb93[2])
  _218 = _2
  using: _2@Phi(bb42)
  _220 = _2
  using: _2@Phi(bb42)
  _219 = std::ptr::const_ptr::<impl *const i8>::offset(move _220, const 1_isize) -> bb95
  using: _220@Mir(bb94[2])
bb95:
  _2 = move _219
  using: _219@Mir(bb94[3])
  _222 = _3
  using: _3@Mir(bb94[0])
  _226 = (*_218)
  using: _218@Mir(bb94[1])
  _225 = move _226 as i32 (IntToInt)
  using: _226@Mir(bb95[2])
  _227 = const 15_i32
  using: 
  _224 = BitAnd(move _225, move _227)
  using: _225@Mir(bb95[3]), _227@Mir(bb95[4])
  _223 = move _224 as u64 (IntToInt)
  using: _224@Mir(bb95[5])
  _221 = core::num::<impl u64>::wrapping_add(move _222, move _223) -> bb96
  using: _222@Mir(bb95[1]), _223@Mir(bb95[6])
bb96:
  _3 = move _221
  using: _221@Mir(bb95[7])
  _49 = const 5148048065308018341_u64
  using: 
  goto -> bb42
  using: 
bb97:
  _229 = _3
  using: _3@Mir(bb117[0])
  _230 = const 10_u64
  using: 
  _228 = core::num::<impl u64>::wrapping_mul(move _229, move _230) -> bb98
  using: _229@Mir(bb97[0]), _230@Mir(bb97[1])
bb98:
  _3 = move _228
  using: _228@Mir(bb97[2])
  _231 = _2
  using: _2@Phi(bb42)
  _233 = _2
  using: _2@Phi(bb42)
  _232 = std::ptr::const_ptr::<impl *const i8>::offset(move _233, const 1_isize) -> bb99
  using: _233@Mir(bb98[2])
bb99:
  _2 = move _232
  using: _232@Mir(bb98[3])
  _235 = _3
  using: _3@Mir(bb98[0])
  _239 = (*_231)
  using: _231@Mir(bb98[1])
  _238 = move _239 as i32 (IntToInt)
  using: _239@Mir(bb99[2])
  _240 = const 15_i32
  using: 
  _237 = BitAnd(move _238, move _240)
  using: _238@Mir(bb99[3]), _240@Mir(bb99[4])
  _236 = move _237 as u64 (IntToInt)
  using: _237@Mir(bb99[5])
  _234 = core::num::<impl u64>::wrapping_add(move _235, move _236) -> bb100
  using: _235@Mir(bb99[1]), _236@Mir(bb99[6])
bb100:
  _3 = move _234
  using: _234@Mir(bb99[7])
  _49 = const 18210558662916816231_u64
  using: 
  goto -> bb42
  using: 
bb101:
  _242 = _3
  using: _3@Mir(bb117[0])
  _243 = const 10_u64
  using: 
  _241 = core::num::<impl u64>::wrapping_mul(move _242, move _243) -> bb102
  using: _242@Mir(bb101[0]), _243@Mir(bb101[1])
bb102:
  _3 = move _241
  using: _241@Mir(bb101[2])
  _244 = _2
  using: _2@Phi(bb42)
  _246 = _2
  using: _2@Phi(bb42)
  _245 = std::ptr::const_ptr::<impl *const i8>::offset(move _246, const 1_isize) -> bb103
  using: _246@Mir(bb102[2])
bb103:
  _2 = move _245
  using: _245@Mir(bb102[3])
  _248 = _3
  using: _3@Mir(bb102[0])
  _252 = (*_244)
  using: _244@Mir(bb102[1])
  _251 = move _252 as i32 (IntToInt)
  using: _252@Mir(bb103[2])
  _253 = const 15_i32
  using: 
  _250 = BitAnd(move _251, move _253)
  using: _251@Mir(bb103[3]), _253@Mir(bb103[4])
  _249 = move _250 as u64 (IntToInt)
  using: _250@Mir(bb103[5])
  _247 = core::num::<impl u64>::wrapping_add(move _248, move _249) -> bb104
  using: _248@Mir(bb103[1]), _249@Mir(bb103[6])
bb104:
  _3 = move _247
  using: _247@Mir(bb103[7])
  _49 = const 13503438682059240994_u64
  using: 
  goto -> bb42
  using: 
bb105:
  _255 = _3
  using: _3@Mir(bb117[0])
  _256 = const 10_u64
  using: 
  _254 = core::num::<impl u64>::wrapping_mul(move _255, move _256) -> bb106
  using: _255@Mir(bb105[0]), _256@Mir(bb105[1])
bb106:
  _3 = move _254
  using: _254@Mir(bb105[2])
  _257 = _2
  using: _2@Phi(bb42)
  _259 = _2
  using: _2@Phi(bb42)
  _258 = std::ptr::const_ptr::<impl *const i8>::offset(move _259, const 1_isize) -> bb107
  using: _259@Mir(bb106[2])
bb107:
  _2 = move _258
  using: _258@Mir(bb106[3])
  _261 = _3
  using: _3@Mir(bb106[0])
  _265 = (*_257)
  using: _257@Mir(bb106[1])
  _264 = move _265 as i32 (IntToInt)
  using: _265@Mir(bb107[2])
  _266 = const 15_i32
  using: 
  _263 = BitAnd(move _264, move _266)
  using: _264@Mir(bb107[3]), _266@Mir(bb107[4])
  _262 = move _263 as u64 (IntToInt)
  using: _263@Mir(bb107[5])
  _260 = core::num::<impl u64>::wrapping_add(move _261, move _262) -> bb108
  using: _261@Mir(bb107[1]), _262@Mir(bb107[6])
bb108:
  _3 = move _260
  using: _260@Mir(bb107[7])
  _49 = const 5618369753603485945_u64
  using: 
  goto -> bb42
  using: 
bb109:
  _268 = _3
  using: _3@Mir(bb117[0])
  _269 = const 10_u64
  using: 
  _267 = core::num::<impl u64>::wrapping_mul(move _268, move _269) -> bb110
  using: _268@Mir(bb109[0]), _269@Mir(bb109[1])
bb110:
  _3 = move _267
  using: _267@Mir(bb109[2])
  _270 = _2
  using: _2@Phi(bb42)
  _272 = _2
  using: _2@Phi(bb42)
  _271 = std::ptr::const_ptr::<impl *const i8>::offset(move _272, const 1_isize) -> bb111
  using: _272@Mir(bb110[2])
bb111:
  _2 = move _271
  using: _271@Mir(bb110[3])
  _274 = _3
  using: _3@Mir(bb110[0])
  _278 = (*_270)
  using: _270@Mir(bb110[1])
  _277 = move _278 as i32 (IntToInt)
  using: _278@Mir(bb111[2])
  _279 = const 15_i32
  using: 
  _276 = BitAnd(move _277, move _279)
  using: _277@Mir(bb111[3]), _279@Mir(bb111[4])
  _275 = move _276 as u64 (IntToInt)
  using: _276@Mir(bb111[5])
  _273 = core::num::<impl u64>::wrapping_add(move _274, move _275) -> bb112
  using: _274@Mir(bb111[1]), _275@Mir(bb111[6])
bb112:
  _3 = move _273
  using: _273@Mir(bb111[7])
  _49 = const 12749676338018479376_u64
  using: 
  goto -> bb42
  using: 
bb113:
  _281 = _3
  using: _3@Mir(bb117[0])
  _282 = const 10_u64
  using: 
  _280 = core::num::<impl u64>::wrapping_mul(move _281, move _282) -> bb114
  using: _281@Mir(bb113[0]), _282@Mir(bb113[1])
bb114:
  _3 = move _280
  using: _280@Mir(bb113[2])
  _283 = _2
  using: _2@Phi(bb42)
  _285 = _2
  using: _2@Phi(bb42)
  _284 = std::ptr::const_ptr::<impl *const i8>::offset(move _285, const 1_isize) -> bb115
  using: _285@Mir(bb114[2])
bb115:
  _2 = move _284
  using: _284@Mir(bb114[3])
  _287 = _3
  using: _3@Mir(bb114[0])
  _291 = (*_283)
  using: _283@Mir(bb114[1])
  _290 = move _291 as i32 (IntToInt)
  using: _291@Mir(bb115[2])
  _292 = const 15_i32
  using: 
  _289 = BitAnd(move _290, move _292)
  using: _290@Mir(bb115[3]), _292@Mir(bb115[4])
  _288 = move _289 as u64 (IntToInt)
  using: _289@Mir(bb115[5])
  _286 = core::num::<impl u64>::wrapping_add(move _287, move _288) -> bb116
  using: _287@Mir(bb115[1]), _288@Mir(bb115[6])
bb116:
  _3 = move _286
  using: _286@Mir(bb115[7])
  _49 = const 13992101357592761495_u64
  using: 
  goto -> bb42
  using: 
bb117:
  _3 = move _293
  using: _293@Mir(bb43[2])
  _296 = _2
  using: _2@Phi(bb42)
  _298 = _2
  using: _2@Phi(bb42)
  _297 = std::ptr::const_ptr::<impl *const i8>::offset(move _298, const 1_isize) -> bb118
  using: _298@Mir(bb117[2])
bb118:
  _2 = move _297
  using: _297@Mir(bb117[3])
  _300 = _3
  using: _3@Mir(bb117[0])
  _304 = (*_296)
  using: _296@Mir(bb117[1])
  _303 = move _304 as i32 (IntToInt)
  using: _304@Mir(bb118[2])
  _305 = const 15_i32
  using: 
  _302 = BitAnd(move _303, move _305)
  using: _303@Mir(bb118[3]), _305@Mir(bb118[4])
  _301 = move _302 as u64 (IntToInt)
  using: _302@Mir(bb118[5])
  _299 = core::num::<impl u64>::wrapping_add(move _300, move _301) -> bb119
  using: _300@Mir(bb118[1]), _301@Mir(bb118[6])
bb119:
  _3 = move _299
  using: _299@Mir(bb118[7])
  _308 = _3
  using: _3@Mir(bb119[0])
  _307 = Eq(move _308, const 0_u64)
  using: _308@Mir(bb119[1])
  _306 = Not(move _307)
  using: _307@Mir(bb119[2])
  switchInt(move _306) -> [0: bb129, otherwise: bb120]
  using: _306@Mir(bb119[3])
bb120:
  _309 = _3
  using: _3@Mir(bb119[0])
  _315 = const {alloc257: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _314 = &mut (*_315)
  using: _315@Mir(bb120[1])
  _313 = move _314 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _314@Mir(bb120[2])
  _312 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _313) -> bb121
  using: _313@Mir(bb120[3])
bb121:
  _311 = ((*_312).3: *mut u32)
  using: _312@Mir(bb120[4])
  _316 = const 0_isize
  using: 
  _310 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _311, move _316) -> bb122
  using: _311@Mir(bb121[0]), _316@Mir(bb121[1])
bb122:
  (*_310) = move _309 as u32 (IntToInt)
  using: _310@Mir(bb121[2]), _309@Mir(bb120[0])
  _317 = const 32_i32
  using: 
  _318 = CheckedShr(_3, _317)
  using: _3@Mir(bb119[0]), _317@Mir(bb122[1])
  assert(!move (_318.1: bool), "attempt to shift right by `{}`, which would overflow", move _317) -> bb123
  using: _318@Entry, _3@Entry, _317@Entry
bb123:
  _3 = move (_318.0: u64)
  using: _318@Mir(bb122[2])
  _319 = _3
  using: _3@Mir(bb123[0])
  _325 = const {alloc257: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _324 = &mut (*_325)
  using: _325@Mir(bb123[2])
  _323 = move _324 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _324@Mir(bb123[3])
  _322 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _323) -> bb124
  using: _323@Mir(bb123[4])
bb124:
  _321 = ((*_322).3: *mut u32)
  using: _322@Mir(bb123[5])
  _326 = const 1_isize
  using: 
  _320 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _321, move _326) -> bb125
  using: _321@Mir(bb124[0]), _326@Mir(bb124[1])
bb125:
  (*_320) = move _319 as u32 (IntToInt)
  using: _320@Mir(bb124[2]), _319@Mir(bb123[1])
  _328 = const 1_i32
  using: 
  _331 = _3
  using: _3@Mir(bb123[0])
  _330 = Ne(move _331, const 0_u64)
  using: _331@Mir(bb125[2])
  _329 = move _330 as i32 (IntToInt)
  using: _330@Mir(bb125[3])
  _332 = CheckedAdd(_328, _329)
  using: _328@Mir(bb125[1]), _329@Mir(bb125[4])
  assert(!move (_332.1: bool), "attempt to compute `{} + {}`, which would overflow", move _328, move _329) -> bb126
  using: _332@Entry, _328@Entry, _329@Entry
bb126:
  _327 = move (_332.0: i32)
  using: _332@Mir(bb125[5])
  _336 = const {alloc257: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _335 = &mut (*_336)
  using: _336@Mir(bb126[1])
  _334 = move _335 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _335@Mir(bb126[2])
  _333 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _334) -> bb127
  using: _334@Mir(bb126[3])
bb127:
  ((*_333).1: u64) = move _327 as u64 (IntToInt)
  using: _333@Mir(bb126[4]), _327@Mir(bb126[0])
  _338 = _1
  using: _1@Phi(bb42)
  _339 = _1
  using: _1@Phi(bb42)
  _343 = const {alloc257: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _342 = &mut (*_343)
  using: _343@Mir(bb127[3])
  _341 = move _342 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _342@Mir(bb127[4])
  _340 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _341) -> bb128
  using: _341@Mir(bb127[5])
bb128:
  _337 = src::zadd::zadd(move _338, move _339, move _340) -> bb129
  using: _338@Mir(bb127[1]), _339@Mir(bb127[2]), _340@Mir(bb127[6])
bb129:
  _346 = (*_2)
  using: _2@Mir(bb118[0])
  _345 = Ne(move _346, const 0_i8)
  using: _346@Mir(bb129[0])
  _344 = Not(move _345)
  using: _345@Mir(bb129[1])
  switchInt(move _344) -> [0: bb131, otherwise: bb130]
  using: _344@Mir(bb129[2])
bb130:
  _49 = const 1434579379687443766_u64
  using: 
  goto -> bb42
  using: 
bb131:
  _348 = _1
  using: _1@Phi(bb129)
  _349 = _1
  using: _1@Phi(bb129)
  _353 = const {alloc258: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _352 = &mut (*_353)
  using: _353@Mir(bb131[2])
  _351 = move _352 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _352@Mir(bb131[3])
  _350 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _351) -> bb132
  using: _351@Mir(bb131[4])
bb132:
  _347 = src::zmul::zmul(move _348, move _349, move _350) -> bb133
  using: _348@Mir(bb131[0]), _349@Mir(bb131[1]), _350@Mir(bb131[5])
bb133:
  _3 = const 0_u64
  using: 
  _49 = const 2009900886467833939_u64
  using: 
  goto -> bb42
  using: 
bb134:
  _356 = _1
  using: _1@Phi(bb129)
  _355 = src::zsets::zsignum(move _356) -> bb135
  using: _356@Mir(bb134[0])
bb135:
  _357 = Eq(_355, const i32::MIN)
  using: _355@Mir(bb134[1])
  assert(!move _357, "attempt to negate `{}`, which would overflow", _355) -> bb136
  using: _357@Entry, _355@Entry
bb136:
  ((*_1).0: i32) = Neg(move _355)
  using: _1@Phi(bb129), _355@Mir(bb134[1])
  goto -> bb137
  using: 
bb137:
  _0 = const 0_i32
  using: 
  goto -> bb138
  using: 
bb138:
  return
  using: _0@Phi(bb138)
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:45:10: 45:89 (#0) by default
rewrite call src::zsets::__errno_location @ workspace/libzahl/src/zsets.rs:47:10: 47:28 (#0) by default
rewrite call src::zsets::__ctype_b_loc @ workspace/libzahl/src/zsets.rs:52:15: 52:30 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:52:32: 52:72 (#0) by default
rewrite call src::zsets::__errno_location @ workspace/libzahl/src/zsets.rs:55:14: 55:32 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:58:27: 58:36 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset_from @ workspace/libzahl/src/zsets.rs:64:23: 64:39 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:332:33: 332:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:134:33: 134:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:136:31: 136:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:138:26: 141:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:145:33: 145:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:147:31: 147:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:149:26: 152:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:156:33: 156:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:158:31: 158:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:160:26: 163:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:167:33: 167:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:169:31: 169:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:171:26: 174:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:178:33: 178:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:180:31: 180:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:182:26: 185:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:189:33: 189:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:191:31: 191:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:193:26: 196:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:200:33: 200:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:202:31: 202:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:204:26: 207:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:211:33: 211:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:213:31: 213:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:215:26: 218:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:222:33: 222:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:224:31: 224:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:226:26: 229:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:233:33: 233:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:235:31: 235:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:237:26: 240:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:244:33: 244:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:246:31: 246:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:248:26: 251:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:255:33: 255:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:257:31: 257:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:259:26: 262:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:266:33: 266:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:268:31: 268:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:270:26: 273:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:277:33: 277:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:279:31: 279:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:281:26: 284:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:288:33: 288:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:290:31: 290:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:292:26: 295:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:299:33: 299:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:301:31: 301:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:303:26: 306:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:310:33: 310:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:312:31: 312:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:314:26: 317:26 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zsets.rs:321:33: 321:85 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:323:31: 323:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:325:26: 328:26 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libzahl/src/zsets.rs:334:31: 334:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsets.rs:336:26: 339:26 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsets.rs:342:30: 342:63 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsets.rs:345:30: 345:63 (#0) by default
@DefId(0:546 ~ lib[40c5]::src::zsetu::zsetu)
bb0:
  _3 = _2
  using: _2@Entry
  switchInt(move _3) -> [0: bb1, otherwise: bb2]
  using: _3@Mir(bb0[0])
bb1:
  _4 = const 0_i32
  using: 
  ((*_1).0: i32) = move _4
  using: _1@Entry, _4@Mir(bb1[0])
  goto -> bb22
  using: 
bb2:
  _6 = ((*_1).2: u64)
  using: _1@Entry
  _11 = std::mem::size_of::<u64>() -> bb3
  using: 
bb3:
  _10 = move _11 as u64 (IntToInt)
  using: _11@Mir(bb2[1])
  _13 = std::mem::size_of::<u32>() -> bb4
  using: 
bb4:
  _12 = move _13 as u64 (IntToInt)
  using: _13@Mir(bb3[1])
  _9 = core::num::<impl u64>::wrapping_add(move _10, move _12) -> bb5
  using: _10@Mir(bb3[0]), _12@Mir(bb4[0])
bb5:
  _14 = const 1_u64
  using: 
  _8 = core::num::<impl u64>::wrapping_sub(move _9, move _14) -> bb6
  using: _9@Mir(bb4[1]), _14@Mir(bb5[0])
bb6:
  _16 = std::mem::size_of::<u32>() -> bb7
  using: 
bb7:
  _15 = move _16 as u64 (IntToInt)
  using: _16@Mir(bb6[0])
  _7 = core::num::<impl u64>::wrapping_div(move _8, move _15) -> bb8
  using: _8@Mir(bb5[1]), _15@Mir(bb7[0])
bb8:
  _5 = Lt(move _6, move _7)
  using: _6@Mir(bb2[0]), _7@Mir(bb7[1])
  switchInt(move _5) -> [0: bb16, otherwise: bb9]
  using: _5@Mir(bb8[0])
bb9:
  _18 = _1
  using: _1@Entry
  _23 = std::mem::size_of::<u64>() -> bb10
  using: 
bb10:
  _22 = move _23 as u64 (IntToInt)
  using: _23@Mir(bb9[1])
  _25 = std::mem::size_of::<u32>() -> bb11
  using: 
bb11:
  _24 = move _25 as u64 (IntToInt)
  using: _25@Mir(bb10[1])
  _21 = core::num::<impl u64>::wrapping_add(move _22, move _24) -> bb12
  using: _22@Mir(bb10[0]), _24@Mir(bb11[0])
bb12:
  _26 = const 1_u64
  using: 
  _20 = core::num::<impl u64>::wrapping_sub(move _21, move _26) -> bb13
  using: _21@Mir(bb11[1]), _26@Mir(bb12[0])
bb13:
  _28 = std::mem::size_of::<u32>() -> bb14
  using: 
bb14:
  _27 = move _28 as u64 (IntToInt)
  using: _28@Mir(bb13[0])
  _19 = core::num::<impl u64>::wrapping_div(move _20, move _27) -> bb15
  using: _20@Mir(bb12[1]), _27@Mir(bb14[0])
bb15:
  _17 = src::allocator::libzahl_realloc(move _18, move _19) -> bb16
  using: _18@Mir(bb9[0]), _19@Mir(bb14[1])
bb16:
  _29 = const 1_i32
  using: 
  ((*_1).0: i32) = move _29
  using: _1@Phi(bb16), _29@Mir(bb16[0])
  _30 = const 0_i32
  using: 
  ((*_1).1: u64) = move _30 as u64 (IntToInt)
  using: _1@Phi(bb16), _30@Mir(bb16[2])
  goto -> bb17
  using: 
bb17:
  _31 = _2
  using: _2@Phi(bb17)
  switchInt(move _31) -> [0: bb22, otherwise: bb18]
  using: _31@Mir(bb17[0])
bb18:
  _32 = ((*_1).1: u64)
  using: _1@Phi(bb17)
  _34 = ((*_1).1: u64)
  using: _1@Phi(bb17)
  _33 = core::num::<impl u64>::wrapping_add(move _34, const 1_u64) -> bb19
  using: _34@Mir(bb18[1])
bb19:
  ((*_1).1: u64) = move _33
  using: _1@Phi(bb17), _33@Mir(bb18[2])
  _35 = _2
  using: _2@Phi(bb17)
  _37 = ((*_1).3: *mut u32)
  using: _1@Phi(bb17)
  _39 = _32
  using: _32@Mir(bb18[0])
  _38 = move _39 as isize (IntToInt)
  using: _39@Mir(bb19[3])
  _36 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _37, move _38) -> bb20
  using: _37@Mir(bb19[2]), _38@Mir(bb19[4])
bb20:
  (*_36) = move _35 as u32 (IntToInt)
  using: _36@Mir(bb19[5]), _35@Mir(bb19[1])
  _40 = const 32_i32
  using: 
  _41 = CheckedShr(_2, _40)
  using: _2@Phi(bb17), _40@Mir(bb20[1])
  assert(!move (_41.1: bool), "attempt to shift right by `{}`, which would overflow", move _40) -> bb21
  using: _41@Entry, _2@Entry, _40@Entry
bb21:
  _2 = move (_41.0: u64)
  using: _41@Mir(bb20[2])
  goto -> bb17
  using: 
bb22:
  return
  using: _0@Entry
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:19:12: 19:54 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:20:27: 20:63 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsetu.rs:20:14: 20:81 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zsetu.rs:21:14: 21:61 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:22:27: 22:63 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libzahl/src/zsetu.rs:22:14: 22:81 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:26:14: 26:56 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:27:31: 27:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsetu.rs:27:18: 27:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zsetu.rs:28:18: 28:65 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetu.rs:29:31: 29:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libzahl/src/zsetu.rs:29:18: 29:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsetu.rs:35:56: 35:71 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsetu.rs:36:23: 36:46 (#0) by default
@DefId(0:561 ~ lib[40c5]::src::zsetup::zinit)
bb0:
  _2 = const 0_i32
  using: 
  ((*_1).2: u64) = move _2 as u64 (IntToInt)
  using: _1@Entry, _2@Mir(bb0[0])
  ((*_1).3: *mut u32) = const 0_usize as *mut u32 (PointerFromExposedAddress)
  using: _1@Entry
  return
  using: _0@Entry
@DefId(0:637 ~ lib[40c5]::src::zsetup::zsetup)
bb0:
  _2 = const 0_u64
  using: 
  _3 = (*_1)
  using: _1@Entry
  _7 = const {alloc266: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _6 = &mut (*_7)
  using: _7@Mir(bb0[2])
  _5 = move _6 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _6@Mir(bb0[3])
  _4 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _5) -> bb1
  using: _5@Mir(bb0[4])
bb1:
  (*_4) = move _3
  using: _4@Mir(bb0[5]), _3@Mir(bb0[1])
  _9 = const {alloc267: *mut i32}
  using: 
  _8 = (*_9)
  using: _9@Mir(bb1[1])
  switchInt(move _8) -> [0: bb2, otherwise: bb83]
  using: _8@Mir(bb1[2])
bb2:
  _10 = const 1_i32
  using: 
  _11 = const {alloc267: *mut i32}
  using: 
  (*_11) = move _10
  using: _11@Mir(bb2[1]), _10@Mir(bb2[0])
  _17 = const {alloc268: *mut [*mut *mut u32; 64]}
  using: 
  _16 = &mut (*_17)
  using: _17@Mir(bb2[3])
  _15 = move _16 as &mut [*mut *mut u32] (Pointer(Unsize))
  using: _16@Mir(bb2[4])
  _14 = core::slice::<impl [*mut *mut u32]>::as_mut_ptr(move _15) -> bb3
  using: _15@Mir(bb2[5])
bb3:
  _13 = move _14 as *mut libc::c_void (PtrToPtr)
  using: _14@Mir(bb2[6])
  _18 = const 0_i32
  using: 
  _20 = std::mem::size_of::<[*mut *mut u32; 64]>() -> bb4
  using: 
bb4:
  _19 = move _20 as u64 (IntToInt)
  using: _20@Mir(bb3[2])
  _12 = src::zsetup::memset(move _13, move _18, move _19) -> bb5
  using: _13@Mir(bb3[0]), _18@Mir(bb3[1]), _19@Mir(bb4[0])
bb5:
  _26 = const {alloc269: *mut [u64; 64]}
  using: 
  _25 = &mut (*_26)
  using: _26@Mir(bb5[0])
  _24 = move _25 as &mut [u64] (Pointer(Unsize))
  using: _25@Mir(bb5[1])
  _23 = core::slice::<impl [u64]>::as_mut_ptr(move _24) -> bb6
  using: _24@Mir(bb5[2])
bb6:
  _22 = move _23 as *mut libc::c_void (PtrToPtr)
  using: _23@Mir(bb5[3])
  _27 = const 0_i32
  using: 
  _29 = std::mem::size_of::<[u64; 64]>() -> bb7
  using: 
bb7:
  _28 = move _29 as u64 (IntToInt)
  using: _29@Mir(bb6[2])
  _21 = src::zsetup::memset(move _22, move _27, move _28) -> bb8
  using: _22@Mir(bb6[0]), _27@Mir(bb6[1]), _28@Mir(bb7[0])
bb8:
  _35 = const {alloc270: *mut [u64; 64]}
  using: 
  _34 = &mut (*_35)
  using: _35@Mir(bb8[0])
  _33 = move _34 as &mut [u64] (Pointer(Unsize))
  using: _34@Mir(bb8[1])
  _32 = core::slice::<impl [u64]>::as_mut_ptr(move _33) -> bb9
  using: _33@Mir(bb8[2])
bb9:
  _31 = move _32 as *mut libc::c_void (PtrToPtr)
  using: _32@Mir(bb8[3])
  _36 = const 0_i32
  using: 
  _38 = std::mem::size_of::<[u64; 64]>() -> bb10
  using: 
bb10:
  _37 = move _38 as u64 (IntToInt)
  using: _38@Mir(bb9[2])
  _30 = src::zsetup::memset(move _31, move _36, move _37) -> bb11
  using: _31@Mir(bb9[0]), _36@Mir(bb9[1]), _37@Mir(bb10[0])
bb11:
  _43 = const {alloc271: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _42 = &mut (*_43)
  using: _43@Mir(bb11[0])
  _41 = move _42 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _42@Mir(bb11[1])
  _40 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _41) -> bb12
  using: _41@Mir(bb11[2])
bb12:
  _39 = src::zsetup::zinit(move _40) -> bb13
  using: _40@Mir(bb11[3])
bb13:
  _48 = const {alloc272: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _47 = &mut (*_48)
  using: _48@Mir(bb13[0])
  _46 = move _47 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _47@Mir(bb13[1])
  _45 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _46) -> bb14
  using: _46@Mir(bb13[2])
bb14:
  _44 = src::zsetup::zinit(move _45) -> bb15
  using: _45@Mir(bb13[3])
bb15:
  _53 = const {alloc273: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _52 = &mut (*_53)
  using: _53@Mir(bb15[0])
  _51 = move _52 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _52@Mir(bb15[1])
  _50 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _51) -> bb16
  using: _51@Mir(bb15[2])
bb16:
  _49 = src::zsetup::zinit(move _50) -> bb17
  using: _50@Mir(bb15[3])
bb17:
  _58 = const {alloc274: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _57 = &mut (*_58)
  using: _58@Mir(bb17[0])
  _56 = move _57 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _57@Mir(bb17[1])
  _55 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _56) -> bb18
  using: _56@Mir(bb17[2])
bb18:
  _54 = src::zsetup::zinit(move _55) -> bb19
  using: _55@Mir(bb17[3])
bb19:
  _63 = const {alloc275: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _62 = &mut (*_63)
  using: _63@Mir(bb19[0])
  _61 = move _62 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _62@Mir(bb19[1])
  _60 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _61) -> bb20
  using: _61@Mir(bb19[2])
bb20:
  _59 = src::zsetup::zinit(move _60) -> bb21
  using: _60@Mir(bb19[3])
bb21:
  _68 = const {alloc276: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _67 = &mut (*_68)
  using: _68@Mir(bb21[0])
  _66 = move _67 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _67@Mir(bb21[1])
  _65 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _66) -> bb22
  using: _66@Mir(bb21[2])
bb22:
  _64 = src::zsetup::zinit(move _65) -> bb23
  using: _65@Mir(bb21[3])
bb23:
  _73 = const {alloc277: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _72 = &mut (*_73)
  using: _73@Mir(bb23[0])
  _71 = move _72 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _72@Mir(bb23[1])
  _70 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _71) -> bb24
  using: _71@Mir(bb23[2])
bb24:
  _69 = src::zsetup::zinit(move _70) -> bb25
  using: _70@Mir(bb23[3])
bb25:
  _78 = const {alloc278: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _77 = &mut (*_78)
  using: _78@Mir(bb25[0])
  _76 = move _77 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _77@Mir(bb25[1])
  _75 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _76) -> bb26
  using: _76@Mir(bb25[2])
bb26:
  _74 = src::zsetup::zinit(move _75) -> bb27
  using: _75@Mir(bb25[3])
bb27:
  _83 = const {alloc279: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _82 = &mut (*_83)
  using: _83@Mir(bb27[0])
  _81 = move _82 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _82@Mir(bb27[1])
  _80 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _81) -> bb28
  using: _81@Mir(bb27[2])
bb28:
  _79 = src::zsetup::zinit(move _80) -> bb29
  using: _80@Mir(bb27[3])
bb29:
  _88 = const {alloc280: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _87 = &mut (*_88)
  using: _88@Mir(bb29[0])
  _86 = move _87 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _87@Mir(bb29[1])
  _85 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _86) -> bb30
  using: _86@Mir(bb29[2])
bb30:
  _84 = src::zsetup::zinit(move _85) -> bb31
  using: _85@Mir(bb29[3])
bb31:
  _93 = const {alloc281: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _92 = &mut (*_93)
  using: _93@Mir(bb31[0])
  _91 = move _92 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _92@Mir(bb31[1])
  _90 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _91) -> bb32
  using: _91@Mir(bb31[2])
bb32:
  _89 = src::zsetup::zinit(move _90) -> bb33
  using: _90@Mir(bb31[3])
bb33:
  _98 = const {alloc282: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _97 = &mut (*_98)
  using: _98@Mir(bb33[0])
  _96 = move _97 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _97@Mir(bb33[1])
  _95 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _96) -> bb34
  using: _96@Mir(bb33[2])
bb34:
  _94 = src::zsetup::zinit(move _95) -> bb35
  using: _95@Mir(bb33[3])
bb35:
  _103 = const {alloc283: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _102 = &mut (*_103)
  using: _103@Mir(bb35[0])
  _101 = move _102 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _102@Mir(bb35[1])
  _100 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _101) -> bb36
  using: _101@Mir(bb35[2])
bb36:
  _99 = src::zsetup::zinit(move _100) -> bb37
  using: _100@Mir(bb35[3])
bb37:
  _108 = const {alloc284: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _107 = &mut (*_108)
  using: _108@Mir(bb37[0])
  _106 = move _107 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _107@Mir(bb37[1])
  _105 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _106) -> bb38
  using: _106@Mir(bb37[2])
bb38:
  _104 = src::zsetup::zinit(move _105) -> bb39
  using: _105@Mir(bb37[3])
bb39:
  _113 = const {alloc285: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _112 = &mut (*_113)
  using: _113@Mir(bb39[0])
  _111 = move _112 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _112@Mir(bb39[1])
  _110 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _111) -> bb40
  using: _111@Mir(bb39[2])
bb40:
  _109 = src::zsetup::zinit(move _110) -> bb41
  using: _110@Mir(bb39[3])
bb41:
  _118 = const {alloc286: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _117 = &mut (*_118)
  using: _118@Mir(bb41[0])
  _116 = move _117 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _117@Mir(bb41[1])
  _115 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _116) -> bb42
  using: _116@Mir(bb41[2])
bb42:
  _114 = src::zsetup::zinit(move _115) -> bb43
  using: _115@Mir(bb41[3])
bb43:
  _123 = const {alloc287: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _122 = &mut (*_123)
  using: _123@Mir(bb43[0])
  _121 = move _122 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _122@Mir(bb43[1])
  _120 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _121) -> bb44
  using: _121@Mir(bb43[2])
bb44:
  _119 = src::zsetup::zinit(move _120) -> bb45
  using: _120@Mir(bb43[3])
bb45:
  _128 = const {alloc288: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _127 = &mut (*_128)
  using: _128@Mir(bb45[0])
  _126 = move _127 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _127@Mir(bb45[1])
  _125 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _126) -> bb46
  using: _126@Mir(bb45[2])
bb46:
  _124 = src::zsetup::zinit(move _125) -> bb47
  using: _125@Mir(bb45[3])
bb47:
  _133 = const {alloc289: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _132 = &mut (*_133)
  using: _133@Mir(bb47[0])
  _131 = move _132 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _132@Mir(bb47[1])
  _130 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _131) -> bb48
  using: _131@Mir(bb47[2])
bb48:
  _129 = src::zsetup::zinit(move _130) -> bb49
  using: _130@Mir(bb47[3])
bb49:
  _138 = const {alloc290: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _137 = &mut (*_138)
  using: _138@Mir(bb49[0])
  _136 = move _137 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _137@Mir(bb49[1])
  _135 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _136) -> bb50
  using: _136@Mir(bb49[2])
bb50:
  _134 = src::zsetup::zinit(move _135) -> bb51
  using: _135@Mir(bb49[3])
bb51:
  _143 = const {alloc291: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _142 = &mut (*_143)
  using: _143@Mir(bb51[0])
  _141 = move _142 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _142@Mir(bb51[1])
  _140 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _141) -> bb52
  using: _141@Mir(bb51[2])
bb52:
  _139 = src::zsetup::zinit(move _140) -> bb53
  using: _140@Mir(bb51[3])
bb53:
  _148 = const {alloc292: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _147 = &mut (*_148)
  using: _148@Mir(bb53[0])
  _146 = move _147 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _147@Mir(bb53[1])
  _145 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _146) -> bb54
  using: _146@Mir(bb53[2])
bb54:
  _144 = src::zsetup::zinit(move _145) -> bb55
  using: _145@Mir(bb53[3])
bb55:
  _153 = const {alloc293: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _152 = &mut (*_153)
  using: _153@Mir(bb55[0])
  _151 = move _152 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _152@Mir(bb55[1])
  _150 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _151) -> bb56
  using: _151@Mir(bb55[2])
bb56:
  _149 = src::zsetup::zinit(move _150) -> bb57
  using: _150@Mir(bb55[3])
bb57:
  _158 = const {alloc294: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _157 = &mut (*_158)
  using: _158@Mir(bb57[0])
  _156 = move _157 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _157@Mir(bb57[1])
  _155 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _156) -> bb58
  using: _156@Mir(bb57[2])
bb58:
  _154 = src::zsetup::zinit(move _155) -> bb59
  using: _155@Mir(bb57[3])
bb59:
  _163 = const {alloc294: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _162 = &mut (*_163)
  using: _163@Mir(bb59[0])
  _161 = move _162 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _162@Mir(bb59[1])
  _160 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _161) -> bb60
  using: _161@Mir(bb59[2])
bb60:
  _164 = const 10000000000000000000_u64
  using: 
  _159 = src::zsetu::zsetu(move _160, move _164) -> bb61
  using: _160@Mir(bb59[3]), _164@Mir(bb60[0])
bb61:
  _169 = const {alloc295: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _168 = &mut (*_169)
  using: _169@Mir(bb61[0])
  _167 = move _168 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _168@Mir(bb61[1])
  _166 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _167) -> bb62
  using: _167@Mir(bb61[2])
bb62:
  _165 = src::zsetup::zinit(move _166) -> bb63
  using: _166@Mir(bb61[3])
bb63:
  _174 = const {alloc295: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _173 = &mut (*_174)
  using: _174@Mir(bb63[0])
  _172 = move _173 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _173@Mir(bb63[1])
  _171 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _172) -> bb64
  using: _172@Mir(bb63[2])
bb64:
  _175 = const 1000000000_u64
  using: 
  _170 = src::zsetu::zsetu(move _171, move _175) -> bb65
  using: _171@Mir(bb63[3]), _175@Mir(bb64[0])
bb65:
  _180 = const {alloc296: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _179 = &mut (*_180)
  using: _180@Mir(bb65[0])
  _178 = move _179 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _179@Mir(bb65[1])
  _177 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _178) -> bb66
  using: _178@Mir(bb65[2])
bb66:
  _176 = src::zsetup::zinit(move _177) -> bb67
  using: _177@Mir(bb65[3])
bb67:
  _185 = const {alloc296: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _184 = &mut (*_185)
  using: _185@Mir(bb67[0])
  _183 = move _184 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _184@Mir(bb67[1])
  _182 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _183) -> bb68
  using: _183@Mir(bb67[2])
bb68:
  _186 = const 1_u64
  using: 
  _181 = src::zsetu::zsetu(move _182, move _186) -> bb69
  using: _182@Mir(bb67[3]), _186@Mir(bb68[0])
bb69:
  _191 = const {alloc297: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _190 = &mut (*_191)
  using: _191@Mir(bb69[0])
  _189 = move _190 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _190@Mir(bb69[1])
  _188 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _189) -> bb70
  using: _189@Mir(bb69[2])
bb70:
  _187 = src::zsetup::zinit(move _188) -> bb71
  using: _188@Mir(bb69[3])
bb71:
  _196 = const {alloc297: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _195 = &mut (*_196)
  using: _196@Mir(bb71[0])
  _194 = move _195 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _195@Mir(bb71[1])
  _193 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _194) -> bb72
  using: _194@Mir(bb71[2])
bb72:
  _197 = const 2_u64
  using: 
  _192 = src::zsetu::zsetu(move _193, move _197) -> bb73
  using: _193@Mir(bb71[3]), _197@Mir(bb72[0])
bb73:
  _202 = const {alloc298: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _201 = &mut (*_202)
  using: _202@Mir(bb73[0])
  _200 = move _201 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _201@Mir(bb73[1])
  _199 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _200) -> bb74
  using: _200@Mir(bb73[2])
bb74:
  _198 = src::zsetup::zinit(move _199) -> bb75
  using: _199@Mir(bb73[3])
bb75:
  _207 = const {alloc298: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _206 = &mut (*_207)
  using: _207@Mir(bb75[0])
  _205 = move _206 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _206@Mir(bb75[1])
  _204 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _205) -> bb76
  using: _205@Mir(bb75[2])
bb76:
  _208 = const 4_u64
  using: 
  _203 = src::zsetu::zsetu(move _204, move _208) -> bb77
  using: _204@Mir(bb75[3]), _208@Mir(bb76[0])
bb77:
  _2 = const 32_u64
  using: 
  goto -> bb78
  using: 
bb78:
  _209 = _2
  using: _2@Phi(bb78)
  _211 = _2
  using: _2@Phi(bb78)
  _210 = core::num::<impl u64>::wrapping_sub(move _211, const 1_u64) -> bb79
  using: _211@Mir(bb78[1])
bb79:
  _2 = move _210
  using: _210@Mir(bb78[2])
  _214 = _209
  using: _209@Mir(bb78[0])
  _213 = Ne(move _214, const 0_u64)
  using: _214@Mir(bb79[1])
  _212 = Not(move _213)
  using: _213@Mir(bb79[2])
  switchInt(move _212) -> [0: bb80, otherwise: bb83]
  using: _212@Mir(bb79[3])
bb80:
  _219 = const {alloc299: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _221 = _2
  using: _2@Mir(bb79[0])
  _220 = move _221 as usize (IntToInt)
  using: _221@Mir(bb80[1])
  _222 = const 32_usize
  using: 
  _223 = Lt(_220, _222)
  using: _220@Mir(bb80[2]), _222@Mir(bb80[3])
  assert(move _223, "index out of bounds: the length is {} but the index is {}", move _222, _220) -> bb81
  using: _223@Entry, _222@Entry, _220@Entry
bb81:
  _218 = &mut (*_219)[_220]
  using: _219@Mir(bb80[0]), _220@Mir(bb80[2])
  _217 = move _218 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _218@Mir(bb81[0])
  _216 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _217) -> bb82
  using: _217@Mir(bb81[1])
bb82:
  _215 = src::zsetup::zinit(move _216) -> bb78
  using: _216@Mir(bb81[2])
bb83:
  return
  using: _0@Entry
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetup.rs:260:13: 260:65 (#0) by default
rewrite call src::zsetup::memset @ workspace/libzahl/src/zsetup.rs:257:9: 261:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetup.rs:265:13: 265:50 (#0) by default
rewrite call src::zsetup::memset @ workspace/libzahl/src/zsetup.rs:262:9: 266:10 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zsetup.rs:270:13: 270:50 (#0) by default
rewrite call src::zsetup::memset @ workspace/libzahl/src/zsetup.rs:267:9: 271:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zsetup.rs:311:19: 311:34 (#0) by default
@DefId(0:648 ~ lib[40c5]::src::zsplit::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:649 ~ lib[40c5]::src::zsplit::zsplit)
bb0:
  _6 = _3
  using: _3@Entry
  _5 = src::zsplit::zzero(move _6) -> bb1
  using: _6@Mir(bb0[0])
bb1:
  switchInt(move _5) -> [0: bb3, otherwise: bb2]
  using: _5@Mir(bb0[1])
bb2:
  _7 = const 0_i32
  using: 
  ((*_1).0: i32) = move _7
  using: _1@Entry, _7@Mir(bb2[0])
  _8 = const 0_i32
  using: 
  ((*_2).0: i32) = move _8
  using: _2@Entry, _8@Mir(bb2[2])
  goto -> bb8
  using: 
bb3:
  _10 = _1
  using: _1@Entry
  _11 = _3
  using: _3@Entry
  _9 = Eq(move _10, move _11)
  using: _10@Mir(bb3[0]), _11@Mir(bb3[1])
  switchInt(move _9) -> [0: bb5, otherwise: bb4]
  using: _9@Mir(bb3[2])
bb4:
  _13 = _2
  using: _2@Entry
  _14 = _3
  using: _3@Entry
  _15 = _4
  using: _4@Entry
  _12 = src::ztrunc::ztrunc(move _13, move _14, move _15) -> bb6
  using: _13@Mir(bb4[0]), _14@Mir(bb4[1]), _15@Mir(bb4[2])
bb5:
  _21 = _1
  using: _1@Entry
  _22 = _3
  using: _3@Entry
  _23 = _4
  using: _4@Entry
  _20 = src::zrsh::zrsh(move _21, move _22, move _23) -> bb7
  using: _21@Mir(bb5[0]), _22@Mir(bb5[1]), _23@Mir(bb5[2])
bb6:
  _17 = _1
  using: _1@Entry
  _18 = _3
  using: _3@Entry
  _19 = _4
  using: _4@Entry
  _16 = src::zrsh::zrsh(move _17, move _18, move _19) -> bb8
  using: _17@Mir(bb6[0]), _18@Mir(bb6[1]), _19@Mir(bb6[2])
bb7:
  _25 = _2
  using: _2@Entry
  _26 = _3
  using: _3@Entry
  _27 = _4
  using: _4@Entry
  _24 = src::ztrunc::ztrunc(move _25, move _26, move _27) -> bb8
  using: _25@Mir(bb7[0]), _26@Mir(bb7[1]), _27@Mir(bb7[2])
bb8:
  return
  using: _0@Entry
@DefId(0:659 ~ lib[40c5]::src::zsqr::zinit)
bb0:
  _2 = const 0_i32
  using: 
  ((*_1).2: u64) = move _2 as u64 (IntToInt)
  using: _1@Entry, _2@Mir(bb0[0])
  ((*_1).3: *mut u32) = const 0_usize as *mut u32 (PointerFromExposedAddress)
  using: _1@Entry
  return
  using: _0@Entry
@DefId(0:660 ~ lib[40c5]::src::zsqr::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:661 ~ lib[40c5]::src::zsqr::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:662 ~ lib[40c5]::src::zsqr::zsqr)
bb0:
  _3 = const 0_u64
  using: 
  Deinit(_5)
  using: 
  (_5.0: i32) = const 0_i32
  using: 
  (_5.1: u64) = const 0_u64
  using: 
  (_5.2: u64) = const 0_u64
  using: 
  (_5.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _4 = [move _5; 1]
  using: _5@Mir(bb0[1])
  Deinit(_7)
  using: 
  (_7.0: i32) = const 0_i32
  using: 
  (_7.1: u64) = const 0_u64
  using: 
  (_7.2: u64) = const 0_u64
  using: 
  (_7.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _6 = [move _7; 1]
  using: _7@Mir(bb0[7])
  Deinit(_9)
  using: 
  (_9.0: i32) = const 0_i32
  using: 
  (_9.1: u64) = const 0_u64
  using: 
  (_9.2: u64) = const 0_u64
  using: 
  (_9.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _8 = [move _9; 1]
  using: _9@Mir(bb0[13])
  Deinit(_11)
  using: 
  (_11.0: i32) = const 0_i32
  using: 
  (_11.1: u64) = const 0_u64
  using: 
  (_11.2: u64) = const 0_u64
  using: 
  (_11.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _10 = [move _11; 1]
  using: _11@Mir(bb0[19])
  Deinit(_13)
  using: 
  (_13.0: i32) = const 0_i32
  using: 
  (_13.1: u64) = const 0_u64
  using: 
  (_13.2: u64) = const 0_u64
  using: 
  (_13.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _12 = [move _13; 1]
  using: _13@Mir(bb0[25])
  _14 = const 0_i32
  using: 
  _16 = _2
  using: _2@Entry
  _15 = src::zsqr::zzero(move _16) -> bb1
  using: _16@Mir(bb0[32])
bb1:
  switchInt(move _15) -> [0: bb3, otherwise: bb2]
  using: _15@Mir(bb0[33])
bb2:
  _17 = const 0_i32
  using: 
  ((*_1).0: i32) = move _17
  using: _1@Entry, _17@Mir(bb2[0])
  goto -> bb61
  using: 
bb3:
  _19 = _2
  using: _2@Entry
  _18 = src::zbits::zbits(move _19) -> bb4
  using: _19@Mir(bb3[0])
bb4:
  _3 = move _18
  using: _18@Mir(bb3[1])
  _21 = _3
  using: _3@Mir(bb4[0])
  _22 = const 16_u64
  using: 
  _20 = Le(move _21, move _22)
  using: _21@Mir(bb4[1]), _22@Mir(bb4[2])
  switchInt(move _20) -> [0: bb12, otherwise: bb5]
  using: _20@Mir(bb4[3])
bb5:
  _24 = ((*_1).2: u64)
  using: _1@Entry
  _25 = const 1_u64
  using: 
  _23 = Lt(move _24, move _25)
  using: _24@Mir(bb5[0]), _25@Mir(bb5[1])
  switchInt(move _23) -> [0: bb7, otherwise: bb6]
  using: _23@Mir(bb5[2])
bb6:
  _27 = _1
  using: _1@Entry
  _28 = const 1_u64
  using: 
  _26 = src::allocator::libzahl_realloc(move _27, move _28) -> bb7
  using: _27@Mir(bb6[0]), _28@Mir(bb6[1])
bb7:
  _29 = const 1_i32
  using: 
  ((*_1).1: u64) = move _29 as u64 (IntToInt)
  using: _1@Phi(bb7), _29@Mir(bb7[0])
  _33 = ((*_2).3: *mut u32)
  using: _2@Entry
  _34 = const 0_isize
  using: 
  _32 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _33, move _34) -> bb8
  using: _33@Mir(bb7[2]), _34@Mir(bb7[3])
bb8:
  _31 = (*_32)
  using: _32@Mir(bb7[4])
  _37 = ((*_2).3: *mut u32)
  using: _2@Entry
  _38 = const 0_isize
  using: 
  _36 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _37, move _38) -> bb9
  using: _37@Mir(bb8[1]), _38@Mir(bb8[2])
bb9:
  _35 = (*_36)
  using: _36@Mir(bb8[3])
  _30 = core::num::<impl u32>::wrapping_mul(move _31, move _35) -> bb10
  using: _31@Mir(bb8[0]), _35@Mir(bb9[0])
bb10:
  _40 = ((*_1).3: *mut u32)
  using: _1@Phi(bb7)
  _41 = const 0_isize
  using: 
  _39 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _40, move _41) -> bb11
  using: _40@Mir(bb10[0]), _41@Mir(bb10[1])
bb11:
  (*_39) = move _30
  using: _39@Mir(bb10[2]), _30@Mir(bb9[1])
  _42 = const 1_i32
  using: 
  ((*_1).0: i32) = move _42
  using: _1@Phi(bb7), _42@Mir(bb11[1])
  goto -> bb61
  using: 
bb12:
  _44 = _2
  using: _2@Entry
  _43 = src::zsqr::zsignum(move _44) -> bb13
  using: _44@Mir(bb12[0])
bb13:
  _14 = move _43
  using: _43@Mir(bb12[1])
  _45 = const 1_i32
  using: 
  ((*_2).0: i32) = move _45
  using: _2@Entry, _45@Mir(bb13[1])
  _46 = const 1_i32
  using: 
  _47 = CheckedShr(_3, _46)
  using: _3@Mir(bb4[0]), _46@Mir(bb13[3])
  assert(!move (_47.1: bool), "attempt to shift right by `{}`, which would overflow", move _46) -> bb14
  using: _47@Entry, _3@Entry, _46@Entry
bb14:
  _3 = move (_47.0: u64)
  using: _47@Mir(bb13[4])
  _51 = &mut _4
  using: _4@Mir(bb0[6])
  _50 = move _51 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _51@Mir(bb14[1])
  _49 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _50) -> bb15
  using: _50@Mir(bb14[2])
bb15:
  _48 = src::zsqr::zinit(move _49) -> bb16
  using: _49@Mir(bb14[3])
bb16:
  _55 = &mut _6
  using: _6@Mir(bb0[12])
  _54 = move _55 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _55@Mir(bb16[0])
  _53 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _54) -> bb17
  using: _54@Mir(bb16[1])
bb17:
  _52 = src::zsqr::zinit(move _53) -> bb18
  using: _53@Mir(bb16[2])
bb18:
  _59 = &mut _8
  using: _8@Mir(bb0[18])
  _58 = move _59 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _59@Mir(bb18[0])
  _57 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _58) -> bb19
  using: _58@Mir(bb18[1])
bb19:
  _56 = src::zsqr::zinit(move _57) -> bb20
  using: _57@Mir(bb18[2])
bb20:
  _63 = &mut _10
  using: _10@Mir(bb0[24])
  _62 = move _63 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _63@Mir(bb20[0])
  _61 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _62) -> bb21
  using: _62@Mir(bb20[1])
bb21:
  _60 = src::zsqr::zinit(move _61) -> bb22
  using: _61@Mir(bb20[2])
bb22:
  _67 = &mut _12
  using: _12@Mir(bb0[30])
  _66 = move _67 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _67@Mir(bb22[0])
  _65 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _66) -> bb23
  using: _66@Mir(bb22[1])
bb23:
  _64 = src::zsqr::zinit(move _65) -> bb24
  using: _65@Mir(bb22[2])
bb24:
  _71 = &mut _10
  using: _10@Mir(bb0[24])
  _70 = move _71 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _71@Mir(bb24[0])
  _69 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _70) -> bb25
  using: _70@Mir(bb24[1])
bb25:
  _74 = &mut _12
  using: _12@Mir(bb0[30])
  _73 = move _74 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _74@Mir(bb25[0])
  _72 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _73) -> bb26
  using: _73@Mir(bb25[1])
bb26:
  _75 = _2
  using: _2@Entry
  _76 = _3
  using: _3@Mir(bb14[0])
  _68 = src::zsplit::zsplit(move _69, move _72, move _75, move _76) -> bb27
  using: _69@Mir(bb24[2]), _72@Mir(bb25[2]), _75@Mir(bb26[0]), _76@Mir(bb26[1])
bb27:
  _80 = &mut _4
  using: _4@Mir(bb0[6])
  _79 = move _80 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _80@Mir(bb27[0])
  _78 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _79) -> bb28
  using: _79@Mir(bb27[1])
bb28:
  _83 = &mut _12
  using: _12@Mir(bb0[30])
  _82 = move _83 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _83@Mir(bb28[0])
  _81 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _82) -> bb29
  using: _82@Mir(bb28[1])
bb29:
  _77 = src::zsqr::zsqr(move _78, move _81) -> bb30
  using: _78@Mir(bb27[2]), _81@Mir(bb28[2])
bb30:
  _87 = &mut _8
  using: _8@Mir(bb0[18])
  _86 = move _87 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _87@Mir(bb30[0])
  _85 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _86) -> bb31
  using: _86@Mir(bb30[1])
bb31:
  _90 = &mut _10
  using: _10@Mir(bb0[24])
  _89 = move _90 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _90@Mir(bb31[0])
  _88 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _89) -> bb32
  using: _89@Mir(bb31[1])
bb32:
  _84 = src::zsqr::zsqr(move _85, move _88) -> bb33
  using: _85@Mir(bb30[2]), _88@Mir(bb31[2])
bb33:
  _94 = &mut _6
  using: _6@Mir(bb0[12])
  _93 = move _94 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _94@Mir(bb33[0])
  _92 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _93) -> bb34
  using: _93@Mir(bb33[1])
bb34:
  _97 = &mut _12
  using: _12@Mir(bb0[30])
  _96 = move _97 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _97@Mir(bb34[0])
  _95 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _96) -> bb35
  using: _96@Mir(bb34[1])
bb35:
  _100 = &mut _10
  using: _10@Mir(bb0[24])
  _99 = move _100 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _100@Mir(bb35[0])
  _98 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _99) -> bb36
  using: _99@Mir(bb35[1])
bb36:
  _91 = src::zmul::zmul(move _92, move _95, move _98) -> bb37
  using: _92@Mir(bb33[2]), _95@Mir(bb34[2]), _98@Mir(bb35[2])
bb37:
  _104 = &mut _6
  using: _6@Mir(bb0[12])
  _103 = move _104 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _104@Mir(bb37[0])
  _102 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _103) -> bb38
  using: _103@Mir(bb37[1])
bb38:
  _107 = &mut _6
  using: _6@Mir(bb0[12])
  _106 = move _107 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _107@Mir(bb38[0])
  _105 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _106) -> bb39
  using: _106@Mir(bb38[1])
bb39:
  _109 = _3
  using: _3@Mir(bb14[0])
  _110 = const 1_u64
  using: 
  _108 = core::num::<impl u64>::wrapping_add(move _109, move _110) -> bb40
  using: _109@Mir(bb39[0]), _110@Mir(bb39[1])
bb40:
  _101 = src::zlsh::zlsh(move _102, move _105, move _108) -> bb41
  using: _102@Mir(bb37[2]), _105@Mir(bb38[2]), _108@Mir(bb39[2])
bb41:
  _111 = const 1_i32
  using: 
  _112 = CheckedShl(_3, _111)
  using: _3@Mir(bb14[0]), _111@Mir(bb41[0])
  assert(!move (_112.1: bool), "attempt to shift left by `{}`, which would overflow", move _111) -> bb42
  using: _112@Entry, _3@Entry, _111@Entry
bb42:
  _3 = move (_112.0: u64)
  using: _112@Mir(bb41[1])
  _116 = &mut _8
  using: _8@Mir(bb0[18])
  _115 = move _116 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _116@Mir(bb42[1])
  _114 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _115) -> bb43
  using: _115@Mir(bb42[2])
bb43:
  _119 = &mut _8
  using: _8@Mir(bb0[18])
  _118 = move _119 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _119@Mir(bb43[0])
  _117 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _118) -> bb44
  using: _118@Mir(bb43[1])
bb44:
  _120 = _3
  using: _3@Mir(bb42[0])
  _113 = src::zlsh::zlsh(move _114, move _117, move _120) -> bb45
  using: _114@Mir(bb42[3]), _117@Mir(bb43[2]), _120@Mir(bb44[0])
bb45:
  _122 = _1
  using: _1@Phi(bb7)
  _125 = &mut _8
  using: _8@Mir(bb0[18])
  _124 = move _125 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _125@Mir(bb45[1])
  _123 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _124) -> bb46
  using: _124@Mir(bb45[2])
bb46:
  _128 = &mut _6
  using: _6@Mir(bb0[12])
  _127 = move _128 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _128@Mir(bb46[0])
  _126 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _127) -> bb47
  using: _127@Mir(bb46[1])
bb47:
  _121 = src::zadd::zadd(move _122, move _123, move _126) -> bb48
  using: _122@Mir(bb45[0]), _123@Mir(bb45[3]), _126@Mir(bb46[2])
bb48:
  _130 = _1
  using: _1@Phi(bb7)
  _131 = _1
  using: _1@Phi(bb7)
  _134 = &mut _4
  using: _4@Mir(bb0[6])
  _133 = move _134 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _134@Mir(bb48[2])
  _132 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _133) -> bb49
  using: _133@Mir(bb48[3])
bb49:
  _129 = src::zadd::zadd(move _130, move _131, move _132) -> bb50
  using: _130@Mir(bb48[0]), _131@Mir(bb48[1]), _132@Mir(bb48[4])
bb50:
  _138 = &mut _4
  using: _4@Mir(bb0[6])
  _137 = move _138 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _138@Mir(bb50[0])
  _136 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _137) -> bb51
  using: _137@Mir(bb50[1])
bb51:
  _135 = src::zfree::zfree(move _136) -> bb52
  using: _136@Mir(bb50[2])
bb52:
  _142 = &mut _6
  using: _6@Mir(bb0[12])
  _141 = move _142 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _142@Mir(bb52[0])
  _140 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _141) -> bb53
  using: _141@Mir(bb52[1])
bb53:
  _139 = src::zfree::zfree(move _140) -> bb54
  using: _140@Mir(bb52[2])
bb54:
  _146 = &mut _8
  using: _8@Mir(bb0[18])
  _145 = move _146 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _146@Mir(bb54[0])
  _144 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _145) -> bb55
  using: _145@Mir(bb54[1])
bb55:
  _143 = src::zfree::zfree(move _144) -> bb56
  using: _144@Mir(bb54[2])
bb56:
  _150 = &mut _10
  using: _10@Mir(bb0[24])
  _149 = move _150 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _150@Mir(bb56[0])
  _148 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _149) -> bb57
  using: _149@Mir(bb56[1])
bb57:
  _147 = src::zfree::zfree(move _148) -> bb58
  using: _148@Mir(bb56[2])
bb58:
  _154 = &mut _12
  using: _12@Mir(bb0[30])
  _153 = move _154 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _154@Mir(bb58[0])
  _152 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _153) -> bb59
  using: _153@Mir(bb58[1])
bb59:
  _151 = src::zfree::zfree(move _152) -> bb60
  using: _152@Mir(bb58[2])
bb60:
  _155 = _14
  using: _14@Mir(bb13[0])
  ((*_2).0: i32) = move _155
  using: _2@Entry, _155@Mir(bb60[0])
  _156 = const 1_i32
  using: 
  ((*_1).0: i32) = move _156
  using: _1@Phi(bb7), _156@Mir(bb60[2])
  goto -> bb61
  using: 
bb61:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_5) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _5; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_7) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _7; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_9) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _9; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_11) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _11; 1] is not supported
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_13) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _13; 1] is not supported
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsqr.rs:79:32: 79:65 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsqr.rs:80:41: 80:74 (#0) by default
rewrite call core::num::<impl u32>::wrapping_mul @ workspace/libzahl/src/zsqr.rs:80:14: 80:75 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsqr.rs:77:14: 79:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsqr.rs:99:12: 99:59 (#0) by default
@DefId(0:691 ~ lib[40c5]::src::zstr::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:692 ~ lib[40c5]::src::zstr::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:693 ~ lib[40c5]::src::zstr::zstr)
bb0:
  _3 = [const 0_i8; 10]
  using: 
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_i8
  using: 
  _7 = const 0_i32
  using: 
  _9 = _1
  using: _1@Entry
  _8 = src::zstr::zzero(move _9) -> bb1
  using: _9@Mir(bb0[5])
bb1:
  switchInt(move _8) -> [0: bb13, otherwise: bb2]
  using: _8@Mir(bb0[6])
bb2:
  _11 = _2
  using: _2@Entry
  _10 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _11) -> bb3
  using: _11@Mir(bb2[0])
bb3:
  switchInt(move _10) -> [0: bb10, otherwise: bb4]
  using: _10@Mir(bb2[1])
bb4:
  _14 = _2
  using: _2@Entry
  _13 = move _14 as usize (PointerExposeAddress)
  using: _14@Mir(bb4[0])
  _12 = Eq(move _13, const 0_usize)
  using: _13@Mir(bb4[1])
  assume(move _12)
  using: _12@Mir(bb4[2])
  _16 = const 2_u64
  using: 
  _15 = src::zstr::malloc(move _16) -> bb5
  using: _16@Mir(bb4[4])
bb5:
  _2 = move _15 as *mut i8 (PtrToPtr)
  using: _15@Mir(bb4[5])
  _18 = _2
  using: _2@Mir(bb5[0])
  _17 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _18) -> bb6
  using: _18@Mir(bb5[1])
bb6:
  switchInt(move _17) -> [0: bb10, otherwise: bb7]
  using: _17@Mir(bb5[2])
bb7:
  _21 = _2
  using: _2@Mir(bb5[0])
  _20 = move _21 as usize (PointerExposeAddress)
  using: _21@Mir(bb7[0])
  _19 = Eq(move _20, const 0_usize)
  using: _20@Mir(bb7[1])
  assume(move _19)
  using: _19@Mir(bb7[2])
  _23 = src::zstr::__errno_location() -> bb8
  using: 
bb8:
  _22 = (*_23)
  using: _23@Mir(bb7[4])
  _24 = const {alloc329: *mut i32}
  using: 
  (*_24) = move _22
  using: _24@Mir(bb8[1]), _22@Mir(bb8[0])
  _29 = const {alloc330: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _28 = &mut (*_29)
  using: _29@Mir(bb8[3])
  _27 = move _28 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _28@Mir(bb8[4])
  _26 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _27) -> bb9
  using: _27@Mir(bb8[5])
bb9:
  _30 = const 1_i32
  using: 
  _25 = src::zstr::longjmp(move _26, move _30)
  using: _26@Mir(bb8[6]), _30@Mir(bb9[0])
bb10:
  _31 = const 48_i32
  using: 
  _33 = _2
  using: _2@Phi(bb10)
  _34 = const 0_isize
  using: 
  _32 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _33, move _34) -> bb11
  using: _33@Mir(bb10[1]), _34@Mir(bb10[2])
bb11:
  (*_32) = move _31 as i8 (IntToInt)
  using: _32@Mir(bb10[3]), _31@Mir(bb10[0])
  _35 = const 0_i32
  using: 
  _37 = _2
  using: _2@Phi(bb10)
  _38 = const 1_isize
  using: 
  _36 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _37, move _38) -> bb12
  using: _37@Mir(bb11[2]), _38@Mir(bb11[3])
bb12:
  (*_36) = move _35 as i8 (IntToInt)
  using: _36@Mir(bb11[4]), _35@Mir(bb11[1])
  _0 = _2
  using: _2@Phi(bb10)
  goto -> bb72
  using: 
bb13:
  _40 = _1
  using: _1@Entry
  _41 = const 10_u64
  using: 
  _39 = src::zstr_length::zstr_length(move _40, move _41) -> bb14
  using: _40@Mir(bb13[0]), _41@Mir(bb13[1])
bb14:
  _4 = move _39
  using: _39@Mir(bb13[2])
  _43 = _2
  using: _2@Phi(bb10)
  _42 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _43) -> bb15
  using: _43@Mir(bb14[1])
bb15:
  switchInt(move _42) -> [0: bb23, otherwise: bb16]
  using: _42@Mir(bb14[2])
bb16:
  _46 = _2
  using: _2@Phi(bb10)
  _45 = move _46 as usize (PointerExposeAddress)
  using: _46@Mir(bb16[0])
  _44 = Eq(move _45, const 0_usize)
  using: _45@Mir(bb16[1])
  assume(move _44)
  using: _44@Mir(bb16[2])
  _49 = _4
  using: _4@Mir(bb14[0])
  _50 = const 1_u64
  using: 
  _48 = core::num::<impl u64>::wrapping_add(move _49, move _50) -> bb17
  using: _49@Mir(bb16[4]), _50@Mir(bb16[5])
bb17:
  _47 = src::zstr::malloc(move _48) -> bb18
  using: _48@Mir(bb16[6])
bb18:
  _2 = move _47 as *mut i8 (PtrToPtr)
  using: _47@Mir(bb17[0])
  _52 = _2
  using: _2@Mir(bb18[0])
  _51 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _52) -> bb19
  using: _52@Mir(bb18[1])
bb19:
  switchInt(move _51) -> [0: bb23, otherwise: bb20]
  using: _51@Mir(bb18[2])
bb20:
  _55 = _2
  using: _2@Mir(bb18[0])
  _54 = move _55 as usize (PointerExposeAddress)
  using: _55@Mir(bb20[0])
  _53 = Eq(move _54, const 0_usize)
  using: _54@Mir(bb20[1])
  assume(move _53)
  using: _53@Mir(bb20[2])
  _57 = src::zstr::__errno_location() -> bb21
  using: 
bb21:
  _56 = (*_57)
  using: _57@Mir(bb20[4])
  _58 = const {alloc329: *mut i32}
  using: 
  (*_58) = move _56
  using: _58@Mir(bb21[1]), _56@Mir(bb21[0])
  _63 = const {alloc330: *mut [src::allocator::__jmp_buf_tag; 1]}
  using: 
  _62 = &mut (*_63)
  using: _63@Mir(bb21[3])
  _61 = move _62 as &mut [src::allocator::__jmp_buf_tag] (Pointer(Unsize))
  using: _62@Mir(bb21[4])
  _60 = core::slice::<impl [src::allocator::__jmp_buf_tag]>::as_mut_ptr(move _61) -> bb22
  using: _61@Mir(bb21[5])
bb22:
  _64 = const 1_i32
  using: 
  _59 = src::zstr::longjmp(move _60, move _64)
  using: _60@Mir(bb21[6]), _64@Mir(bb22[0])
bb23:
  _67 = _1
  using: _1@Entry
  _66 = src::zstr::zsignum(move _67) -> bb24
  using: _67@Mir(bb23[0])
bb24:
  _68 = const 0_i32
  using: 
  _65 = Lt(move _66, move _68)
  using: _66@Mir(bb23[1]), _68@Mir(bb24[0])
  _7 = move _65 as i32 (IntToInt)
  using: _65@Mir(bb24[1])
  _73 = const {alloc331: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _72 = &mut (*_73)
  using: _73@Mir(bb24[3])
  _71 = move _72 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _72@Mir(bb24[4])
  _70 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _71) -> bb25
  using: _71@Mir(bb24[5])
bb25:
  _74 = _1
  using: _1@Entry
  _69 = src::zabs::zabs(move _70, move _74) -> bb26
  using: _70@Mir(bb24[6]), _74@Mir(bb25[0])
bb26:
  _75 = const 45_i32
  using: 
  _77 = _2
  using: _2@Phi(bb23)
  _78 = const 0_isize
  using: 
  _76 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _77, move _78) -> bb27
  using: _77@Mir(bb26[1]), _78@Mir(bb26[2])
bb27:
  (*_76) = move _75 as i8 (IntToInt)
  using: _76@Mir(bb26[3]), _75@Mir(bb26[0])
  _80 = _2
  using: _2@Phi(bb23)
  _82 = _7
  using: _7@Mir(bb24[2])
  _81 = move _82 as isize (IntToInt)
  using: _82@Mir(bb27[2])
  _79 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _80, move _81) -> bb28
  using: _80@Mir(bb27[1]), _81@Mir(bb27[3])
bb28:
  _2 = move _79
  using: _79@Mir(bb27[4])
  _84 = _4
  using: _4@Phi(bb23)
  _86 = _7
  using: _7@Mir(bb24[2])
  _85 = move _86 as u64 (IntToInt)
  using: _86@Mir(bb28[2])
  _83 = core::num::<impl u64>::wrapping_sub(move _84, move _85) -> bb29
  using: _84@Mir(bb28[1]), _85@Mir(bb28[3])
bb29:
  _4 = move _83
  using: _83@Mir(bb28[4])
  _89 = _4
  using: _4@Mir(bb29[0])
  _90 = const 9_u64
  using: 
  _88 = Gt(move _89, move _90)
  using: _89@Mir(bb29[1]), _90@Mir(bb29[2])
  switchInt(move _88) -> [0: bb31, otherwise: bb30]
  using: _88@Mir(bb29[3])
bb30:
  _91 = _4
  using: _4@Mir(bb29[0])
  _92 = const 9_u64
  using: 
  _87 = core::num::<impl u64>::wrapping_sub(move _91, move _92) -> bb32
  using: _91@Mir(bb30[0]), _92@Mir(bb30[1])
bb31:
  _87 = const 0_u64
  using: 
  goto -> bb32
  using: 
bb32:
  _4 = move _87
  using: _87@Phi(bb32)
  goto -> bb33
  using: 
bb33:
  _97 = const {alloc331: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _96 = &mut (*_97)
  using: _97@Mir(bb33[0])
  _95 = move _96 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _96@Mir(bb33[1])
  _94 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _95) -> bb34
  using: _95@Mir(bb33[2])
bb34:
  _101 = const {alloc332: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _100 = &mut (*_101)
  using: _101@Mir(bb34[0])
  _99 = move _100 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _100@Mir(bb34[1])
  _98 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _99) -> bb35
  using: _99@Mir(bb34[2])
bb35:
  _105 = const {alloc331: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _104 = &mut (*_105)
  using: _105@Mir(bb35[0])
  _103 = move _104 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _104@Mir(bb35[1])
  _102 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _103) -> bb36
  using: _103@Mir(bb35[2])
bb36:
  _109 = const {alloc333: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _108 = &mut (*_109)
  using: _109@Mir(bb36[0])
  _107 = move _108 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _108@Mir(bb36[1])
  _106 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _107) -> bb37
  using: _107@Mir(bb36[2])
bb37:
  _93 = src::zdivmod::zdivmod(move _94, move _98, move _102, move _106) -> bb38
  using: _94@Mir(bb33[3]), _98@Mir(bb34[3]), _102@Mir(bb35[3]), _106@Mir(bb36[3])
bb38:
  _114 = const {alloc331: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _113 = &mut (*_114)
  using: _114@Mir(bb38[0])
  _112 = move _113 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _113@Mir(bb38[1])
  _111 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _112) -> bb39
  using: _112@Mir(bb38[2])
bb39:
  _110 = src::zstr::zzero(move _111) -> bb40
  using: _111@Mir(bb38[3])
bb40:
  switchInt(move _110) -> [0: bb41, otherwise: bb57]
  using: _110@Mir(bb39[0])
bb41:
  _117 = _2
  using: _2@Phi(bb33)
  _119 = _4
  using: _4@Phi(bb33)
  _118 = move _119 as isize (IntToInt)
  using: _119@Mir(bb41[1])
  _116 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _117, move _118) -> bb42
  using: _117@Mir(bb41[0]), _118@Mir(bb41[2])
bb42:
  _123 = const b"%09lu\x00"
  using: 
  _122 = &raw const (*_123)
  using: _123@Mir(bb42[0])
  _121 = move _122 as *const u8 (Pointer(ArrayToPointer))
  using: _122@Mir(bb42[1])
  _120 = move _121 as *const i8 (PtrToPtr)
  using: _121@Mir(bb42[2])
  _129 = const {alloc332: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _128 = &mut (*_129)
  using: _129@Mir(bb42[4])
  _127 = move _128 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _128@Mir(bb42[5])
  _126 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _127) -> bb43
  using: _127@Mir(bb42[6])
bb43:
  _125 = src::zstr::zzero(move _126) -> bb44
  using: _126@Mir(bb42[7])
bb44:
  switchInt(move _125) -> [0: bb46, otherwise: bb45]
  using: _125@Mir(bb43[0])
bb45:
  _124 = const 0_u64
  using: 
  goto -> bb49
  using: 
bb46:
  _136 = const {alloc332: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _135 = &mut (*_136)
  using: _136@Mir(bb46[0])
  _134 = move _135 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _135@Mir(bb46[1])
  _133 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _134) -> bb47
  using: _134@Mir(bb46[2])
bb47:
  _132 = ((*_133).3: *mut u32)
  using: _133@Mir(bb46[3])
  _137 = const 0_isize
  using: 
  _131 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _132, move _137) -> bb48
  using: _132@Mir(bb47[0]), _137@Mir(bb47[1])
bb48:
  _130 = (*_131)
  using: _131@Mir(bb47[2])
  _124 = move _130 as u64 (IntToInt)
  using: _130@Mir(bb48[0])
  goto -> bb49
  using: 
bb49:
  _115 = src::zstr::sprintf(move _116, move _120, move _124) -> bb50
  using: _116@Mir(bb41[3]), _120@Mir(bb42[3]), _124@Phi(bb49)
bb50:
  _138 = _6
  using: _6@Phi(bb33)
  _140 = _2
  using: _2@Phi(bb33)
  _143 = _4
  using: _4@Phi(bb33)
  _144 = const 9_u64
  using: 
  _142 = core::num::<impl u64>::wrapping_add(move _143, move _144) -> bb51
  using: _143@Mir(bb50[2]), _144@Mir(bb50[3])
bb51:
  _141 = move _142 as isize (IntToInt)
  using: _142@Mir(bb50[4])
  _139 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _140, move _141) -> bb52
  using: _140@Mir(bb50[1]), _141@Mir(bb51[0])
bb52:
  (*_139) = move _138
  using: _139@Mir(bb51[1]), _138@Mir(bb50[0])
  _147 = _2
  using: _2@Phi(bb33)
  _149 = _4
  using: _4@Phi(bb33)
  _148 = move _149 as isize (IntToInt)
  using: _149@Mir(bb52[2])
  _146 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _147, move _148) -> bb53
  using: _147@Mir(bb52[1]), _148@Mir(bb52[3])
bb53:
  _145 = (*_146)
  using: _146@Mir(bb52[4])
  _6 = move _145
  using: _145@Mir(bb53[0])
  _152 = _4
  using: _4@Phi(bb33)
  _153 = const 9_u64
  using: 
  _151 = Gt(move _152, move _153)
  using: _152@Mir(bb53[2]), _153@Mir(bb53[3])
  switchInt(move _151) -> [0: bb55, otherwise: bb54]
  using: _151@Mir(bb53[4])
bb54:
  _154 = _4
  using: _4@Phi(bb33)
  _155 = const 9_u64
  using: 
  _150 = core::num::<impl u64>::wrapping_sub(move _154, move _155) -> bb56
  using: _154@Mir(bb54[0]), _155@Mir(bb54[1])
bb55:
  _150 = const 0_u64
  using: 
  goto -> bb56
  using: 
bb56:
  _4 = move _150
  using: _150@Phi(bb56)
  goto -> bb33
  using: 
bb57:
  _159 = &mut _3
  using: _3@Mir(bb0[0])
  _158 = move _159 as &mut [i8] (Pointer(Unsize))
  using: _159@Mir(bb57[0])
  _157 = core::slice::<impl [i8]>::as_mut_ptr(move _158) -> bb58
  using: _158@Mir(bb57[1])
bb58:
  _163 = const b"%lu\x00"
  using: 
  _162 = &raw const (*_163)
  using: _163@Mir(bb58[0])
  _161 = move _162 as *const u8 (Pointer(ArrayToPointer))
  using: _162@Mir(bb58[1])
  _160 = move _161 as *const i8 (PtrToPtr)
  using: _161@Mir(bb58[2])
  _171 = const {alloc332: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _170 = &mut (*_171)
  using: _171@Mir(bb58[4])
  _169 = move _170 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _170@Mir(bb58[5])
  _168 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _169) -> bb59
  using: _169@Mir(bb58[6])
bb59:
  _167 = ((*_168).3: *mut u32)
  using: _168@Mir(bb58[7])
  _172 = const 0_isize
  using: 
  _166 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _167, move _172) -> bb60
  using: _167@Mir(bb59[0]), _172@Mir(bb59[1])
bb60:
  _165 = (*_166)
  using: _166@Mir(bb59[2])
  _164 = move _165 as u64 (IntToInt)
  using: _165@Mir(bb60[0])
  _156 = src::zstr::sprintf(move _157, move _160, move _164) -> bb61
  using: _157@Mir(bb57[2]), _160@Mir(bb58[3]), _164@Mir(bb60[1])
bb61:
  _5 = move _156 as u64 (IntToInt)
  using: _156@Mir(bb60[2])
  _173 = _6
  using: _6@Phi(bb33)
  switchInt(move _173) -> [0: bb66, otherwise: bb62]
  using: _173@Mir(bb61[1])
bb62:
  _176 = _2
  using: _2@Phi(bb33)
  _179 = _4
  using: _4@Phi(bb56)
  _180 = _5
  using: _5@Mir(bb61[0])
  _178 = core::num::<impl u64>::wrapping_add(move _179, move _180) -> bb63
  using: _179@Mir(bb62[1]), _180@Mir(bb62[2])
bb63:
  _177 = move _178 as isize (IntToInt)
  using: _178@Mir(bb62[3])
  _175 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _176, move _177) -> bb64
  using: _176@Mir(bb62[0]), _177@Mir(bb63[0])
bb64:
  _174 = (*_175)
  using: _175@Mir(bb63[1])
  _182 = _5
  using: _5@Mir(bb61[0])
  _181 = move _182 as usize (IntToInt)
  using: _182@Mir(bb64[1])
  _183 = const 10_usize
  using: 
  _184 = Lt(_181, _183)
  using: _181@Mir(bb64[2]), _183@Mir(bb64[3])
  assert(move _184, "index out of bounds: the length is {} but the index is {}", move _183, _181) -> bb65
  using: _184@Entry, _183@Entry, _181@Entry
bb65:
  _3[_181] = move _174
  using: _181@Mir(bb64[2]), _174@Mir(bb64[0])
  goto -> bb66
  using: 
bb66:
  _188 = _2
  using: _2@Phi(bb66)
  _190 = _4
  using: _4@Phi(bb66)
  _189 = move _190 as isize (IntToInt)
  using: _190@Mir(bb66[1])
  _187 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _188, move _189) -> bb67
  using: _188@Mir(bb66[0]), _189@Mir(bb66[2])
bb67:
  _186 = move _187 as *mut libc::c_void (PtrToPtr)
  using: _187@Mir(bb66[3])
  _194 = &mut _3
  using: _3@Mir(bb0[0])
  _193 = move _194 as &mut [i8] (Pointer(Unsize))
  using: _194@Mir(bb67[1])
  _192 = core::slice::<impl [i8]>::as_mut_ptr(move _193) -> bb68
  using: _193@Mir(bb67[2])
bb68:
  _191 = move _192 as *const libc::c_void (PtrToPtr)
  using: _192@Mir(bb67[3])
  _196 = _5
  using: _5@Phi(bb66)
  _197 = const 1_u64
  using: 
  _195 = core::num::<impl u64>::wrapping_add(move _196, move _197) -> bb69
  using: _196@Mir(bb68[1]), _197@Mir(bb68[2])
bb69:
  _185 = src::zstr::memcpy(move _186, move _191, move _195) -> bb70
  using: _186@Mir(bb67[0]), _191@Mir(bb68[0]), _195@Mir(bb68[3])
bb70:
  _198 = _2
  using: _2@Phi(bb66)
  _201 = _7
  using: _7@Mir(bb24[2])
  _200 = move _201 as isize (IntToInt)
  using: _201@Mir(bb70[1])
  _202 = Eq(_200, const isize::MIN)
  using: _200@Mir(bb70[2])
  assert(!move _202, "attempt to negate `{}`, which would overflow", _200) -> bb71
  using: _202@Entry, _200@Entry
bb71:
  _199 = Neg(move _200)
  using: _200@Mir(bb70[2])
  _0 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _198, move _199) -> bb72
  using: _198@Mir(bb70[0]), _199@Mir(bb71[0])
bb72:
  return
  using: _0@Phi(bb72)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [const 0_i8; 10] is not supported
rewrite call src::zstr::malloc @ workspace/libzahl/src/zstr.rs:57:17: 57:58 (#0) by default
rewrite call src::zstr::__errno_location @ workspace/libzahl/src/zstr.rs:59:34: 59:52 (#0) by default
rewrite call src::zstr::longjmp @ workspace/libzahl/src/zstr.rs:60:17: 60:72 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:63:12: 63:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:64:12: 64:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr.rs:69:22: 69:69 (#0) by default
rewrite call src::zstr::malloc @ workspace/libzahl/src/zstr.rs:69:13: 69:70 (#0) by default
rewrite call src::zstr::__errno_location @ workspace/libzahl/src/zstr.rs:72:30: 72:48 (#0) by default
rewrite call src::zstr::longjmp @ workspace/libzahl/src/zstr.rs:73:13: 73:68 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:78:8: 78:41 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:79:11: 79:31 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zstr.rs:80:30: 80:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zstr.rs:82:11: 82:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:95:19: 95:37 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:101:26: 101:59 (#0) by default
rewrite call src::zstr::sprintf @ workspace/libzahl/src/zstr.rs:94:13: 103:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr.rs:106:23: 106:70 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:105:18: 107:18 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:108:29: 108:47 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zstr.rs:110:19: 110:66 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:119:22: 119:55 (#0) by default
rewrite call src::zstr::sprintf @ workspace/libzahl/src/zstr.rs:115:19: 120:14 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr.rs:122:49: 122:66 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:122:40: 122:76 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:125:19: 125:37 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr.rs:127:21: 127:68 (#0) by default
rewrite call src::zstr::memcpy @ workspace/libzahl/src/zstr.rs:124:13: 128:14 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zstr.rs:132:14: 132:37 (#0) by default
@DefId(0:708 ~ lib[40c5]::src::zstr_length::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:709 ~ lib[40c5]::src::zstr_length::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:710 ~ lib[40c5]::src::zstr_length::zstr_length)
bb0:
  _3 = const 1_u64
  using: 
  _4 = const 0_u64
  using: 
  _9 = const {alloc342: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _8 = &mut (*_9)
  using: _9@Mir(bb0[2])
  _7 = move _8 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _8@Mir(bb0[3])
  _6 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _7) -> bb1
  using: _7@Mir(bb0[4])
bb1:
  _10 = _1
  using: _1@Entry
  _5 = src::zset::zset(move _6, move _10) -> bb2
  using: _6@Mir(bb0[5]), _10@Mir(bb1[0])
bb2:
  _15 = const {alloc342: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _14 = &mut (*_15)
  using: _15@Mir(bb2[0])
  _13 = move _14 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _14@Mir(bb2[1])
  _12 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _13) -> bb3
  using: _13@Mir(bb2[2])
bb3:
  _11 = src::zstr_length::zzero(move _12) -> bb4
  using: _12@Mir(bb2[3])
bb4:
  switchInt(move _11) -> [0: bb5, otherwise: bb29]
  using: _11@Mir(bb3[0])
bb5:
  _20 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _19 = &mut (*_20)
  using: _20@Mir(bb5[0])
  _18 = move _19 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _19@Mir(bb5[1])
  _17 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _18) -> bb6
  using: _18@Mir(bb5[2])
bb6:
  _21 = _2
  using: _2@Phi(bb2)
  _16 = src::zsetu::zsetu(move _17, move _21) -> bb7
  using: _17@Mir(bb5[3]), _21@Mir(bb6[0])
bb7:
  _26 = const {alloc344: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _25 = &mut (*_26)
  using: _26@Mir(bb7[0])
  _24 = move _25 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _25@Mir(bb7[1])
  _23 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _24) -> bb8
  using: _24@Mir(bb7[2])
bb8:
  _30 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _29 = &mut (*_30)
  using: _30@Mir(bb8[0])
  _28 = move _29 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _29@Mir(bb8[1])
  _27 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _28) -> bb9
  using: _28@Mir(bb8[2])
bb9:
  _22 = src::zset::zset(move _23, move _27) -> bb10
  using: _23@Mir(bb7[3]), _27@Mir(bb8[3])
bb10:
  _4 = const 1_u64
  using: 
  goto -> bb11
  using: 
bb11:
  _36 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _35 = &mut (*_36)
  using: _36@Mir(bb11[0])
  _34 = move _35 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _35@Mir(bb11[1])
  _33 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _34) -> bb12
  using: _34@Mir(bb11[2])
bb12:
  _40 = const {alloc342: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _39 = &mut (*_40)
  using: _40@Mir(bb12[0])
  _38 = move _39 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _39@Mir(bb12[1])
  _37 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _38) -> bb13
  using: _38@Mir(bb12[2])
bb13:
  _32 = src::zcmpmag::zcmpmag(move _33, move _37) -> bb14
  using: _33@Mir(bb11[3]), _37@Mir(bb12[3])
bb14:
  _41 = const 0_i32
  using: 
  _31 = Le(move _32, move _41)
  using: _32@Mir(bb13[0]), _41@Mir(bb14[0])
  switchInt(move _31) -> [0: bb23, otherwise: bb15]
  using: _31@Mir(bb14[1])
bb15:
  _46 = const {alloc344: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _45 = &mut (*_46)
  using: _46@Mir(bb15[0])
  _44 = move _45 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _45@Mir(bb15[1])
  _43 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _44) -> bb16
  using: _44@Mir(bb15[2])
bb16:
  _50 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _49 = &mut (*_50)
  using: _50@Mir(bb16[0])
  _48 = move _49 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _49@Mir(bb16[1])
  _47 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _48) -> bb17
  using: _48@Mir(bb16[2])
bb17:
  _42 = src::zset::zset(move _43, move _47) -> bb18
  using: _43@Mir(bb15[3]), _47@Mir(bb16[3])
bb18:
  _55 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _54 = &mut (*_55)
  using: _55@Mir(bb18[0])
  _53 = move _54 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _54@Mir(bb18[1])
  _52 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _53) -> bb19
  using: _53@Mir(bb18[2])
bb19:
  _59 = const {alloc343: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _58 = &mut (*_59)
  using: _59@Mir(bb19[0])
  _57 = move _58 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _58@Mir(bb19[1])
  _56 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _57) -> bb20
  using: _57@Mir(bb19[2])
bb20:
  _51 = src::zsqr::zsqr(move _52, move _56) -> bb21
  using: _52@Mir(bb18[3]), _56@Mir(bb19[3])
bb21:
  _60 = const 1_i32
  using: 
  _61 = CheckedShl(_4, _60)
  using: _4@Phi(bb11), _60@Mir(bb21[0])
  assert(!move (_61.1: bool), "attempt to shift left by `{}`, which would overflow", move _60) -> bb22
  using: _61@Entry, _4@Entry, _60@Entry
bb22:
  _4 = move (_61.0: u64)
  using: _61@Mir(bb21[1])
  goto -> bb11
  using: 
bb23:
  _62 = const 1_i32
  using: 
  _63 = CheckedShr(_4, _62)
  using: _4@Phi(bb11), _62@Mir(bb23[0])
  assert(!move (_63.1: bool), "attempt to shift right by `{}`, which would overflow", move _62) -> bb24
  using: _63@Entry, _4@Entry, _62@Entry
bb24:
  _4 = move (_63.0: u64)
  using: _63@Mir(bb23[1])
  _65 = _3
  using: _3@Phi(bb2)
  _66 = _4
  using: _4@Mir(bb24[0])
  _64 = core::num::<impl u64>::wrapping_add(move _65, move _66) -> bb25
  using: _65@Mir(bb24[1]), _66@Mir(bb24[2])
bb25:
  _3 = move _64
  using: _64@Mir(bb24[3])
  _71 = const {alloc342: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _70 = &mut (*_71)
  using: _71@Mir(bb25[1])
  _69 = move _70 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _70@Mir(bb25[2])
  _68 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _69) -> bb26
  using: _69@Mir(bb25[3])
bb26:
  _75 = const {alloc342: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _74 = &mut (*_75)
  using: _75@Mir(bb26[0])
  _73 = move _74 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _74@Mir(bb26[1])
  _72 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _73) -> bb27
  using: _73@Mir(bb26[2])
bb27:
  _79 = const {alloc344: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _78 = &mut (*_79)
  using: _79@Mir(bb27[0])
  _77 = move _78 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _78@Mir(bb27[1])
  _76 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _77) -> bb28
  using: _77@Mir(bb27[2])
bb28:
  _67 = src::zdiv::zdiv(move _68, move _72, move _76) -> bb2
  using: _68@Mir(bb25[4]), _72@Mir(bb26[3]), _76@Mir(bb27[3])
bb29:
  _80 = _3
  using: _3@Phi(bb2)
  _85 = _1
  using: _1@Entry
  _84 = src::zstr_length::zsignum(move _85) -> bb30
  using: _85@Mir(bb29[1])
bb30:
  _86 = const 0_i32
  using: 
  _83 = Lt(move _84, move _86)
  using: _84@Mir(bb29[2]), _86@Mir(bb30[0])
  _82 = move _83 as i32 (IntToInt)
  using: _83@Mir(bb30[1])
  _81 = move _82 as u64 (IntToInt)
  using: _82@Mir(bb30[2])
  _0 = core::num::<impl u64>::wrapping_add(move _80, move _81) -> bb31
  using: _80@Mir(bb29[0]), _81@Mir(bb30[3])
bb31:
  return
  using: _0@Mir(bb30[4])
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr_length.rs:48:52: 48:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zstr_length.rs:57:10: 57:87 (#0) by default
@DefId(0:721 ~ lib[40c5]::src::zsub::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:722 ~ lib[40c5]::src::zsub::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:723 ~ lib[40c5]::src::zsub::zsub_unsigned)
bb0:
  _5 = const 0_u32
  using: 
  _6 = const 0_u32
  using: 
  _4 = [move _5, move _6]
  using: _5@Mir(bb0[0]), _6@Mir(bb0[1])
  _7 = const {0x0 as *mut u32}
  using: 
  _8 = const 0_u64
  using: 
  _9 = const 0_u64
  using: 
  _10 = const 0_i32
  using: 
  _12 = _2
  using: _2@Entry
  _11 = src::zsub::zzero(move _12) -> bb1
  using: _12@Mir(bb0[7])
bb1:
  switchInt(move _11) -> [0: bb4, otherwise: bb2]
  using: _11@Mir(bb0[8])
bb2:
  _14 = _1
  using: _1@Entry
  _15 = _3
  using: _3@Entry
  _13 = src::zabs::zabs(move _14, move _15) -> bb3
  using: _14@Mir(bb2[0]), _15@Mir(bb2[1])
bb3:
  _17 = _1
  using: _1@Entry
  _18 = _1
  using: _1@Entry
  _16 = src::zneg::zneg(move _17, move _18) -> bb66
  using: _17@Mir(bb3[0]), _18@Mir(bb3[1])
bb4:
  _20 = _3
  using: _3@Entry
  _19 = src::zsub::zzero(move _20) -> bb5
  using: _20@Mir(bb4[0])
bb5:
  switchInt(move _19) -> [0: bb7, otherwise: bb6]
  using: _19@Mir(bb4[1])
bb6:
  _22 = _1
  using: _1@Entry
  _23 = _2
  using: _2@Entry
  _21 = src::zabs::zabs(move _22, move _23) -> bb66
  using: _22@Mir(bb6[0]), _23@Mir(bb6[1])
bb7:
  _25 = _2
  using: _2@Entry
  _26 = _3
  using: _3@Entry
  _24 = src::zcmpmag::zcmpmag(move _25, move _26) -> bb8
  using: _25@Mir(bb7[0]), _26@Mir(bb7[1])
bb8:
  _10 = move _24
  using: _24@Mir(bb7[2])
  _28 = _10
  using: _10@Mir(bb8[0])
  _29 = const 0_i32
  using: 
  _27 = Le(move _28, move _29)
  using: _28@Mir(bb8[1]), _29@Mir(bb8[2])
  switchInt(move _27) -> [0: bb22, otherwise: bb9]
  using: _27@Mir(bb8[3])
bb9:
  _31 = _10
  using: _10@Mir(bb8[0])
  _32 = const 0_i32
  using: 
  _30 = Eq(move _31, move _32)
  using: _31@Mir(bb9[0]), _32@Mir(bb9[1])
  switchInt(move _30) -> [0: bb11, otherwise: bb10]
  using: _30@Mir(bb9[2])
bb10:
  _33 = const 0_i32
  using: 
  ((*_1).0: i32) = move _33
  using: _1@Entry, _33@Mir(bb10[0])
  goto -> bb66
  using: 
bb11:
  _36 = ((*_2).1: u64)
  using: _2@Entry
  _37 = ((*_3).1: u64)
  using: _3@Entry
  _35 = Lt(move _36, move _37)
  using: _36@Mir(bb11[0]), _37@Mir(bb11[1])
  switchInt(move _35) -> [0: bb13, otherwise: bb12]
  using: _35@Mir(bb11[2])
bb12:
  _34 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb14
  using: 
bb13:
  _34 = ((*_3).1: u64)
  using: _3@Entry
  goto -> bb14
  using: 
bb14:
  _9 = move _34
  using: _34@Phi(bb14)
  _39 = _1
  using: _1@Entry
  _40 = _2
  using: _2@Phi(bb14)
  _38 = Eq(move _39, move _40)
  using: _39@Mir(bb14[1]), _40@Mir(bb14[2])
  switchInt(move _38) -> [0: bb19, otherwise: bb15]
  using: _38@Mir(bb14[3])
bb15:
  _45 = const {alloc351: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _44 = &mut (*_45)
  using: _45@Mir(bb15[0])
  _43 = move _44 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _44@Mir(bb15[1])
  _42 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _43) -> bb16
  using: _43@Mir(bb15[2])
bb16:
  _46 = _2
  using: _2@Phi(bb14)
  _41 = src::zset::zset(move _42, move _46) -> bb17
  using: _42@Mir(bb15[3]), _46@Mir(bb16[0])
bb17:
  _51 = const {alloc351: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _50 = &mut (*_51)
  using: _51@Mir(bb17[0])
  _49 = move _50 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _50@Mir(bb17[1])
  _48 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _49) -> bb18
  using: _49@Mir(bb17[2])
bb18:
  _47 = ((*_48).3: *mut u32)
  using: _48@Mir(bb17[3])
  _7 = move _47
  using: _47@Mir(bb18[0])
  goto -> bb20
  using: 
bb19:
  _52 = ((*_2).3: *mut u32)
  using: _2@Phi(bb14)
  _7 = move _52
  using: _52@Mir(bb19[0])
  goto -> bb20
  using: 
bb20:
  _54 = _1
  using: _1@Entry
  _55 = _3
  using: _3@Phi(bb14)
  _53 = Ne(move _54, move _55)
  using: _54@Mir(bb20[0]), _55@Mir(bb20[1])
  switchInt(move _53) -> [0: bb33, otherwise: bb21]
  using: _53@Mir(bb20[2])
bb21:
  _57 = _1
  using: _1@Entry
  _58 = _3
  using: _3@Phi(bb14)
  _56 = src::zset::zset(move _57, move _58) -> bb33
  using: _57@Mir(bb21[0]), _58@Mir(bb21[1])
bb22:
  _61 = ((*_2).1: u64)
  using: _2@Phi(bb20)
  _62 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  _60 = Lt(move _61, move _62)
  using: _61@Mir(bb22[0]), _62@Mir(bb22[1])
  switchInt(move _60) -> [0: bb24, otherwise: bb23]
  using: _60@Mir(bb22[2])
bb23:
  _59 = ((*_2).1: u64)
  using: _2@Phi(bb20)
  goto -> bb25
  using: 
bb24:
  _59 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  goto -> bb25
  using: 
bb25:
  _9 = move _59
  using: _59@Phi(bb25)
  _64 = _1
  using: _1@Entry
  _65 = _3
  using: _3@Phi(bb25)
  _63 = Eq(move _64, move _65)
  using: _64@Mir(bb25[1]), _65@Mir(bb25[2])
  switchInt(move _63) -> [0: bb30, otherwise: bb26]
  using: _63@Mir(bb25[3])
bb26:
  _70 = const {alloc351: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _69 = &mut (*_70)
  using: _70@Mir(bb26[0])
  _68 = move _69 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _69@Mir(bb26[1])
  _67 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _68) -> bb27
  using: _68@Mir(bb26[2])
bb27:
  _71 = _3
  using: _3@Phi(bb25)
  _66 = src::zset::zset(move _67, move _71) -> bb28
  using: _67@Mir(bb26[3]), _71@Mir(bb27[0])
bb28:
  _76 = const {alloc351: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _75 = &mut (*_76)
  using: _76@Mir(bb28[0])
  _74 = move _75 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _75@Mir(bb28[1])
  _73 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _74) -> bb29
  using: _74@Mir(bb28[2])
bb29:
  _72 = ((*_73).3: *mut u32)
  using: _73@Mir(bb28[3])
  _7 = move _72
  using: _72@Mir(bb29[0])
  goto -> bb31
  using: 
bb30:
  _77 = ((*_3).3: *mut u32)
  using: _3@Phi(bb25)
  _7 = move _77
  using: _77@Mir(bb30[0])
  goto -> bb31
  using: 
bb31:
  _79 = _1
  using: _1@Entry
  _80 = _2
  using: _2@Phi(bb25)
  _78 = Ne(move _79, move _80)
  using: _79@Mir(bb31[0]), _80@Mir(bb31[1])
  switchInt(move _78) -> [0: bb33, otherwise: bb32]
  using: _78@Mir(bb31[2])
bb32:
  _82 = _1
  using: _1@Entry
  _83 = _2
  using: _2@Phi(bb25)
  _81 = src::zset::zset(move _82, move _83) -> bb33
  using: _82@Mir(bb32[0]), _83@Mir(bb32[1])
bb33:
  _8 = const 0_u64
  using: 
  goto -> bb34
  using: 
bb34:
  _85 = _8
  using: _8@Phi(bb34)
  _86 = _9
  using: _9@Phi(bb33)
  _84 = Lt(move _85, move _86)
  using: _85@Mir(bb34[0]), _86@Mir(bb34[1])
  switchInt(move _84) -> [0: bb54, otherwise: bb35]
  using: _84@Mir(bb34[2])
bb35:
  _91 = _8
  using: _8@Phi(bb34)
  _92 = const 1_u64
  using: 
  _90 = BitAnd(move _91, move _92)
  using: _91@Mir(bb35[0]), _92@Mir(bb35[1])
  _89 = move _90 as usize (IntToInt)
  using: _90@Mir(bb35[2])
  _93 = const 2_usize
  using: 
  _94 = Lt(_89, _93)
  using: _89@Mir(bb35[3]), _93@Mir(bb35[4])
  assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _89) -> bb36
  using: _94@Entry, _93@Entry, _89@Entry
bb36:
  _88 = _4[_89]
  using: _4@Phi(bb34), _89@Mir(bb35[3])
  switchInt(move _88) -> [0: bb40, otherwise: bb37]
  using: _88@Mir(bb36[0])
bb37:
  _98 = ((*_1).3: *mut u32)
  using: _1@Phi(bb34)
  _100 = _8
  using: _8@Phi(bb34)
  _99 = move _100 as isize (IntToInt)
  using: _100@Mir(bb37[1])
  _97 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _98, move _99) -> bb38
  using: _98@Mir(bb37[0]), _99@Mir(bb37[2])
bb38:
  _96 = (*_97)
  using: _97@Mir(bb37[3])
  _103 = _7
  using: _7@Phi(bb34)
  _105 = _8
  using: _8@Phi(bb34)
  _104 = move _105 as isize (IntToInt)
  using: _105@Mir(bb38[2])
  _102 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _103, move _104) -> bb39
  using: _103@Mir(bb38[1]), _104@Mir(bb38[3])
bb39:
  _101 = (*_102)
  using: _102@Mir(bb38[4])
  _95 = Le(move _96, move _101)
  using: _96@Mir(bb38[0]), _101@Mir(bb39[0])
  _87 = move _95 as i32 (IntToInt)
  using: _95@Mir(bb39[1])
  goto -> bb43
  using: 
bb40:
  _109 = ((*_1).3: *mut u32)
  using: _1@Phi(bb34)
  _111 = _8
  using: _8@Phi(bb34)
  _110 = move _111 as isize (IntToInt)
  using: _111@Mir(bb40[1])
  _108 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _109, move _110) -> bb41
  using: _109@Mir(bb40[0]), _110@Mir(bb40[2])
bb41:
  _107 = (*_108)
  using: _108@Mir(bb40[3])
  _114 = _7
  using: _7@Phi(bb34)
  _116 = _8
  using: _8@Phi(bb34)
  _115 = move _116 as isize (IntToInt)
  using: _116@Mir(bb41[2])
  _113 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _114, move _115) -> bb42
  using: _114@Mir(bb41[1]), _115@Mir(bb41[3])
bb42:
  _112 = (*_113)
  using: _113@Mir(bb41[4])
  _106 = Lt(move _107, move _112)
  using: _107@Mir(bb41[0]), _112@Mir(bb42[0])
  _87 = move _106 as i32 (IntToInt)
  using: _106@Mir(bb42[1])
  goto -> bb43
  using: 
bb43:
  _120 = _8
  using: _8@Phi(bb43)
  _119 = Not(move _120)
  using: _120@Mir(bb43[0])
  _121 = const 1_u64
  using: 
  _118 = BitAnd(move _119, move _121)
  using: _119@Mir(bb43[1]), _121@Mir(bb43[2])
  _117 = move _118 as usize (IntToInt)
  using: _118@Mir(bb43[3])
  _122 = const 2_usize
  using: 
  _123 = Lt(_117, _122)
  using: _117@Mir(bb43[4]), _122@Mir(bb43[5])
  assert(move _123, "index out of bounds: the length is {} but the index is {}", move _122, _117) -> bb44
  using: _123@Entry, _122@Entry, _117@Entry
bb44:
  _4[_117] = move _87 as u32 (IntToInt)
  using: _117@Mir(bb43[4]), _87@Phi(bb43)
  _127 = ((*_1).3: *mut u32)
  using: _1@Phi(bb43)
  _129 = _8
  using: _8@Phi(bb43)
  _128 = move _129 as isize (IntToInt)
  using: _129@Mir(bb44[2])
  _126 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _127, move _128) -> bb45
  using: _127@Mir(bb44[1]), _128@Mir(bb44[3])
bb45:
  _125 = (*_126)
  using: _126@Mir(bb44[4])
  _132 = _7
  using: _7@Phi(bb43)
  _134 = _8
  using: _8@Phi(bb43)
  _133 = move _134 as isize (IntToInt)
  using: _134@Mir(bb45[2])
  _131 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _132, move _133) -> bb46
  using: _132@Mir(bb45[1]), _133@Mir(bb45[3])
bb46:
  _130 = (*_131)
  using: _131@Mir(bb45[4])
  _124 = core::num::<impl u32>::wrapping_sub(move _125, move _130) -> bb47
  using: _125@Mir(bb45[0]), _130@Mir(bb46[0])
bb47:
  _136 = ((*_1).3: *mut u32)
  using: _1@Phi(bb43)
  _138 = _8
  using: _8@Phi(bb43)
  _137 = move _138 as isize (IntToInt)
  using: _138@Mir(bb47[1])
  _135 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _136, move _137) -> bb48
  using: _136@Mir(bb47[0]), _137@Mir(bb47[2])
bb48:
  (*_135) = move _124
  using: _135@Mir(bb47[3]), _124@Mir(bb46[1])
  _142 = ((*_1).3: *mut u32)
  using: _1@Phi(bb43)
  _144 = _8
  using: _8@Phi(bb43)
  _143 = move _144 as isize (IntToInt)
  using: _144@Mir(bb48[2])
  _141 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _142, move _143) -> bb49
  using: _142@Mir(bb48[1]), _143@Mir(bb48[3])
bb49:
  _140 = (*_141)
  using: _141@Mir(bb48[4])
  _148 = _8
  using: _8@Phi(bb43)
  _149 = const 1_u64
  using: 
  _147 = BitAnd(move _148, move _149)
  using: _148@Mir(bb49[1]), _149@Mir(bb49[2])
  _146 = move _147 as usize (IntToInt)
  using: _147@Mir(bb49[3])
  _150 = const 2_usize
  using: 
  _151 = Lt(_146, _150)
  using: _146@Mir(bb49[4]), _150@Mir(bb49[5])
  assert(move _151, "index out of bounds: the length is {} but the index is {}", move _150, _146) -> bb50
  using: _151@Entry, _150@Entry, _146@Entry
bb50:
  _145 = _4[_146]
  using: _4@Phi(bb34), _146@Mir(bb49[4])
  _139 = core::num::<impl u32>::wrapping_sub(move _140, move _145) -> bb51
  using: _140@Mir(bb49[0]), _145@Mir(bb50[0])
bb51:
  _153 = ((*_1).3: *mut u32)
  using: _1@Phi(bb43)
  _155 = _8
  using: _8@Phi(bb43)
  _154 = move _155 as isize (IntToInt)
  using: _155@Mir(bb51[1])
  _152 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _153, move _154) -> bb52
  using: _153@Mir(bb51[0]), _154@Mir(bb51[2])
bb52:
  (*_152) = move _139
  using: _152@Mir(bb51[3]), _139@Mir(bb50[1])
  _157 = _8
  using: _8@Phi(bb43)
  _156 = core::num::<impl u64>::wrapping_add(move _157, const 1_u64) -> bb53
  using: _157@Mir(bb52[1])
bb53:
  _8 = move _156
  using: _156@Mir(bb52[2])
  goto -> bb34
  using: 
bb54:
  _161 = _8
  using: _8@Phi(bb43)
  _162 = const 1_u64
  using: 
  _160 = BitAnd(move _161, move _162)
  using: _161@Mir(bb54[0]), _162@Mir(bb54[1])
  _159 = move _160 as usize (IntToInt)
  using: _160@Mir(bb54[2])
  _163 = const 2_usize
  using: 
  _164 = Lt(_159, _163)
  using: _159@Mir(bb54[3]), _163@Mir(bb54[4])
  assert(move _164, "index out of bounds: the length is {} but the index is {}", move _163, _159) -> bb55
  using: _164@Entry, _163@Entry, _159@Entry
bb55:
  _158 = _4[_159]
  using: _4@Phi(bb34), _159@Mir(bb54[3])
  switchInt(move _158) -> [0: bb65, otherwise: bb56]
  using: _158@Mir(bb55[0])
bb56:
  _167 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _169 = _8
  using: _8@Phi(bb56)
  _168 = move _169 as isize (IntToInt)
  using: _169@Mir(bb56[1])
  _166 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _167, move _168) -> bb57
  using: _167@Mir(bb56[0]), _168@Mir(bb56[2])
bb57:
  _165 = (*_166)
  using: _166@Mir(bb56[3])
  switchInt(move _165) -> [0: bb58, otherwise: bb61]
  using: _165@Mir(bb57[0])
bb58:
  _170 = _8
  using: _8@Phi(bb56)
  _172 = _8
  using: _8@Phi(bb56)
  _171 = core::num::<impl u64>::wrapping_add(move _172, const 1_u64) -> bb59
  using: _172@Mir(bb58[1])
bb59:
  _8 = move _171
  using: _171@Mir(bb58[2])
  _173 = const u32::MAX
  using: 
  _175 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _177 = _170
  using: _170@Mir(bb58[0])
  _176 = move _177 as isize (IntToInt)
  using: _177@Mir(bb59[3])
  _174 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _175, move _176) -> bb60
  using: _175@Mir(bb59[2]), _176@Mir(bb59[4])
bb60:
  (*_174) = move _173
  using: _174@Mir(bb59[5]), _173@Mir(bb59[1])
  goto -> bb56
  using: 
bb61:
  _181 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _183 = _8
  using: _8@Phi(bb56)
  _182 = move _183 as isize (IntToInt)
  using: _183@Mir(bb61[1])
  _180 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _181, move _182) -> bb62
  using: _181@Mir(bb61[0]), _182@Mir(bb61[2])
bb62:
  _179 = (*_180)
  using: _180@Mir(bb61[3])
  _184 = const 1_u32
  using: 
  _178 = core::num::<impl u32>::wrapping_sub(move _179, move _184) -> bb63
  using: _179@Mir(bb62[0]), _184@Mir(bb62[1])
bb63:
  _186 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _188 = _8
  using: _8@Phi(bb56)
  _187 = move _188 as isize (IntToInt)
  using: _188@Mir(bb63[1])
  _185 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _186, move _187) -> bb64
  using: _186@Mir(bb63[0]), _187@Mir(bb63[2])
bb64:
  (*_185) = move _178
  using: _185@Mir(bb63[3]), _178@Mir(bb62[2])
  goto -> bb65
  using: 
bb65:
  _189 = _10
  using: _10@Phi(bb33)
  ((*_1).0: i32) = move _189
  using: _1@Phi(bb65), _189@Mir(bb65[0])
  goto -> bb66
  using: 
bb66:
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _5, move _6] is not supported
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:83:28: 83:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:83:53: 83:71 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:85:28: 85:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:85:52: 85:70 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:87:59: 87:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:87:111: 87:129 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zsub.rs:87:95: 87:130 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:87:23: 87:41 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:89:59: 89:77 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zsub.rs:90:14: 90:83 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:89:23: 89:41 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsub.rs:92:15: 92:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:95:29: 95:47 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zsub.rs:97:19: 97:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:98:27: 98:50 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:100:59: 100:77 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/zsub.rs:101:14: 101:60 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zsub.rs:100:23: 100:41 (#0) by default
@DefId(0:725 ~ lib[40c5]::src::zsub::zsub)
bb0:
  _5 = _2
  using: _2@Entry
  _6 = _3
  using: _3@Entry
  _4 = Eq(move _5, move _6)
  using: _5@Mir(bb0[0]), _6@Mir(bb0[1])
  switchInt(move _4) -> [0: bb2, otherwise: bb1]
  using: _4@Mir(bb0[2])
bb1:
  _7 = const 0_i32
  using: 
  ((*_1).0: i32) = move _7
  using: _1@Entry, _7@Mir(bb1[0])
  goto -> bb23
  using: 
bb2:
  _9 = _2
  using: _2@Entry
  _8 = src::zsub::zzero(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  switchInt(move _8) -> [0: bb5, otherwise: bb4]
  using: _8@Mir(bb2[1])
bb4:
  _11 = _1
  using: _1@Entry
  _12 = _3
  using: _3@Entry
  _10 = src::zneg::zneg(move _11, move _12) -> bb23
  using: _11@Mir(bb4[0]), _12@Mir(bb4[1])
bb5:
  _14 = _3
  using: _3@Entry
  _13 = src::zsub::zzero(move _14) -> bb6
  using: _14@Mir(bb5[0])
bb6:
  switchInt(move _13) -> [0: bb9, otherwise: bb7]
  using: _13@Mir(bb5[1])
bb7:
  _16 = _1
  using: _1@Entry
  _17 = _2
  using: _2@Entry
  _15 = Ne(move _16, move _17)
  using: _16@Mir(bb7[0]), _17@Mir(bb7[1])
  switchInt(move _15) -> [0: bb23, otherwise: bb8]
  using: _15@Mir(bb7[2])
bb8:
  _19 = _1
  using: _1@Entry
  _20 = _2
  using: _2@Entry
  _18 = src::zset::zset(move _19, move _20) -> bb23
  using: _19@Mir(bb8[0]), _20@Mir(bb8[1])
bb9:
  _24 = _2
  using: _2@Entry
  _23 = src::zsub::zsignum(move _24) -> bb10
  using: _24@Mir(bb9[0])
bb10:
  _26 = _3
  using: _3@Entry
  _25 = src::zsub::zsignum(move _26) -> bb11
  using: _26@Mir(bb10[0])
bb11:
  _22 = BitOr(move _23, move _25)
  using: _23@Mir(bb9[1]), _25@Mir(bb10[1])
  _27 = const 0_i32
  using: 
  _21 = Lt(move _22, move _27)
  using: _22@Mir(bb11[0]), _27@Mir(bb11[1])
  switchInt(move _21) -> [0: bb22, otherwise: bb12]
  using: _21@Mir(bb11[2])
bb12:
  _30 = _2
  using: _2@Entry
  _29 = src::zsub::zsignum(move _30) -> bb13
  using: _30@Mir(bb12[0])
bb13:
  _31 = const 0_i32
  using: 
  _28 = Lt(move _29, move _31)
  using: _29@Mir(bb12[1]), _31@Mir(bb13[0])
  switchInt(move _28) -> [0: bb21, otherwise: bb14]
  using: _28@Mir(bb13[1])
bb14:
  _34 = _3
  using: _3@Entry
  _33 = src::zsub::zsignum(move _34) -> bb15
  using: _34@Mir(bb14[0])
bb15:
  _35 = const 0_i32
  using: 
  _32 = Lt(move _33, move _35)
  using: _33@Mir(bb14[1]), _35@Mir(bb15[0])
  switchInt(move _32) -> [0: bb17, otherwise: bb16]
  using: _32@Mir(bb15[1])
bb16:
  _37 = _1
  using: _1@Entry
  _38 = _3
  using: _3@Entry
  _39 = _2
  using: _2@Entry
  _36 = src::zsub::zsub_unsigned(move _37, move _38, move _39) -> bb23
  using: _37@Mir(bb16[0]), _38@Mir(bb16[1]), _39@Mir(bb16[2])
bb17:
  _41 = _1
  using: _1@Entry
  _42 = _2
  using: _2@Entry
  _43 = _3
  using: _3@Entry
  _40 = src::zadd::zadd_unsigned(move _41, move _42, move _43) -> bb18
  using: _41@Mir(bb17[0]), _42@Mir(bb17[1]), _43@Mir(bb17[2])
bb18:
  _45 = _1
  using: _1@Entry
  _44 = src::zsub::zsignum(move _45) -> bb19
  using: _45@Mir(bb18[0])
bb19:
  _46 = Eq(_44, const i32::MIN)
  using: _44@Mir(bb18[1])
  assert(!move _46, "attempt to negate `{}`, which would overflow", _44) -> bb20
  using: _46@Entry, _44@Entry
bb20:
  ((*_1).0: i32) = Neg(move _44)
  using: _1@Entry, _44@Mir(bb18[1])
  goto -> bb23
  using: 
bb21:
  _48 = _1
  using: _1@Entry
  _49 = _2
  using: _2@Entry
  _50 = _3
  using: _3@Entry
  _47 = src::zadd::zadd_unsigned(move _48, move _49, move _50) -> bb23
  using: _48@Mir(bb21[0]), _49@Mir(bb21[1]), _50@Mir(bb21[2])
bb22:
  _52 = _1
  using: _1@Entry
  _53 = _2
  using: _2@Entry
  _54 = _3
  using: _3@Entry
  _51 = src::zsub::zsub_unsigned(move _52, move _53, move _54) -> bb23
  using: _52@Mir(bb22[0]), _53@Mir(bb22[1]), _54@Mir(bb22[2])
bb23:
  return
  using: _0@Entry
@DefId(0:734 ~ lib[40c5]::src::zswap::zswap)
bb0:
  Deinit(_4)
  using: 
  (_4.0: i32) = const 0_i32
  using: 
  (_4.1: u64) = const 0_u64
  using: 
  (_4.2: u64) = const 0_u64
  using: 
  (_4.3: *mut u32) = const {0x0 as *mut u32}
  using: 
  _3 = [move _4; 1]
  using: _4@Mir(bb0[0])
  _5 = (*_1)
  using: _1@Entry
  _8 = &mut _3
  using: _3@Mir(bb0[5])
  _7 = move _8 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _8@Mir(bb0[7])
  _6 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _7) -> bb1
  using: _7@Mir(bb0[8])
bb1:
  (*_6) = move _5
  using: _6@Mir(bb0[9]), _5@Mir(bb0[6])
  _9 = (*_2)
  using: _2@Entry
  (*_1) = move _9
  using: _1@Entry, _9@Mir(bb1[1])
  _13 = &mut _3
  using: _3@Mir(bb0[5])
  _12 = move _13 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _13@Mir(bb1[3])
  _11 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _12) -> bb2
  using: _12@Mir(bb1[4])
bb2:
  _10 = (*_11)
  using: _11@Mir(bb1[5])
  (*_2) = move _10
  using: _2@Entry, _10@Mir(bb2[0])
  return
  using: _0@Entry
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_4) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m [move _4; 1] is not supported
@DefId(0:744 ~ lib[40c5]::src::ztrunc::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:745 ~ lib[40c5]::src::ztrunc::ztrunc)
bb0:
  _4 = const 1_u32
  using: 
  _5 = const 0_u64
  using: 
  _6 = const 0_u64
  using: 
  _8 = _2
  using: _2@Entry
  _7 = src::ztrunc::zzero(move _8) -> bb1
  using: _8@Mir(bb0[3])
bb1:
  switchInt(move _7) -> [0: bb3, otherwise: bb2]
  using: _7@Mir(bb0[4])
bb2:
  _9 = const 0_i32
  using: 
  ((*_1).0: i32) = move _9
  using: _1@Entry, _9@Mir(bb2[0])
  goto -> bb28
  using: 
bb3:
  _11 = _3
  using: _3@Entry
  _12 = const 31_u64
  using: 
  _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb4
  using: _11@Mir(bb3[0]), _12@Mir(bb3[1])
bb4:
  _13 = const 5_i32
  using: 
  _14 = CheckedShr(_10, _13)
  using: _10@Mir(bb3[2]), _13@Mir(bb4[0])
  assert(!move (_14.1: bool), "attempt to shift right by `{}`, which would overflow", move _13) -> bb5
  using: _14@Entry, _10@Entry, _13@Entry
bb5:
  _5 = move (_14.0: u64)
  using: _14@Mir(bb4[1])
  _15 = ((*_2).0: i32)
  using: _2@Entry
  ((*_1).0: i32) = move _15
  using: _1@Entry, _15@Mir(bb5[1])
  _18 = _5
  using: _5@Mir(bb5[0])
  _19 = ((*_2).1: u64)
  using: _2@Entry
  _17 = Lt(move _18, move _19)
  using: _18@Mir(bb5[3]), _19@Mir(bb5[4])
  switchInt(move _17) -> [0: bb7, otherwise: bb6]
  using: _17@Mir(bb5[5])
bb6:
  _16 = _5
  using: _5@Mir(bb5[0])
  goto -> bb8
  using: 
bb7:
  _16 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb8
  using: 
bb8:
  ((*_1).1: u64) = move _16
  using: _1@Entry, _16@Phi(bb8)
  _21 = ((*_1).1: u64)
  using: _1@Entry
  _22 = _5
  using: _5@Phi(bb8)
  _20 = Lt(move _21, move _22)
  using: _21@Mir(bb8[1]), _22@Mir(bb8[2])
  switchInt(move _20) -> [0: bb10, otherwise: bb9]
  using: _20@Mir(bb8[3])
bb9:
  _3 = const 0_u64
  using: 
  goto -> bb10
  using: 
bb10:
  _24 = _1
  using: _1@Entry
  _25 = _2
  using: _2@Phi(bb8)
  _23 = Ne(move _24, move _25)
  using: _24@Mir(bb10[0]), _25@Mir(bb10[1])
  switchInt(move _23) -> [0: bb16, otherwise: bb11]
  using: _23@Mir(bb10[2])
bb11:
  _27 = ((*_1).2: u64)
  using: _1@Entry
  _28 = ((*_1).1: u64)
  using: _1@Entry
  _26 = Lt(move _27, move _28)
  using: _27@Mir(bb11[0]), _28@Mir(bb11[1])
  switchInt(move _26) -> [0: bb13, otherwise: bb12]
  using: _26@Mir(bb11[2])
bb12:
  _30 = _1
  using: _1@Entry
  _31 = ((*_1).1: u64)
  using: _1@Entry
  _29 = src::allocator::libzahl_realloc(move _30, move _31) -> bb13
  using: _30@Mir(bb12[0]), _31@Mir(bb12[1])
bb13:
  _34 = ((*_1).3: *mut u32)
  using: _1@Phi(bb13)
  _33 = move _34 as *mut libc::c_void (PtrToPtr)
  using: _34@Mir(bb13[0])
  _36 = ((*_2).3: *mut u32)
  using: _2@Phi(bb8)
  _35 = move _36 as *const libc::c_void (PtrToPtr)
  using: _36@Mir(bb13[2])
  _38 = ((*_1).1: u64)
  using: _1@Phi(bb13)
  _40 = std::mem::size_of::<u32>() -> bb14
  using: 
bb14:
  _39 = move _40 as u64 (IntToInt)
  using: _40@Mir(bb13[5])
  _37 = core::num::<impl u64>::wrapping_mul(move _38, move _39) -> bb15
  using: _38@Mir(bb13[4]), _39@Mir(bb14[0])
bb15:
  _32 = src::ztrunc::memcpy(move _33, move _35, move _37) -> bb16
  using: _33@Mir(bb13[1]), _35@Mir(bb13[3]), _37@Mir(bb14[1])
bb16:
  _41 = _3
  using: _3@Phi(bb10)
  _42 = const 31_u64
  using: 
  _3 = BitAnd(move _41, move _42)
  using: _41@Mir(bb16[0]), _42@Mir(bb16[1])
  _43 = _3
  using: _3@Mir(bb16[2])
  switchInt(move _43) -> [0: bb22, otherwise: bb17]
  using: _43@Mir(bb16[3])
bb17:
  _44 = _3
  using: _3@Mir(bb16[2])
  _45 = CheckedShl(_4, _44)
  using: _4@Mir(bb0[0]), _44@Mir(bb17[0])
  assert(!move (_45.1: bool), "attempt to shift left by `{}`, which would overflow", move _44) -> bb18
  using: _45@Entry, _4@Entry, _44@Entry
bb18:
  _4 = move (_45.0: u32)
  using: _45@Mir(bb17[1])
  _47 = _4
  using: _4@Mir(bb18[0])
  _48 = const 1_u32
  using: 
  _46 = core::num::<impl u32>::wrapping_sub(move _47, move _48) -> bb19
  using: _47@Mir(bb18[1]), _48@Mir(bb18[2])
bb19:
  _4 = move _46
  using: _46@Mir(bb18[3])
  _49 = _4
  using: _4@Mir(bb19[0])
  _51 = ((*_1).3: *mut u32)
  using: _1@Phi(bb16)
  _54 = ((*_1).1: u64)
  using: _1@Phi(bb16)
  _55 = const 1_u64
  using: 
  _53 = core::num::<impl u64>::wrapping_sub(move _54, move _55) -> bb20
  using: _54@Mir(bb19[3]), _55@Mir(bb19[4])
bb20:
  _52 = move _53 as isize (IntToInt)
  using: _53@Mir(bb19[5])
  _50 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _51, move _52) -> bb21
  using: _51@Mir(bb19[2]), _52@Mir(bb20[0])
bb21:
  (*_50) = BitAnd((*_50), move _49)
  using: _50@Mir(bb20[1]), _50@Mir(bb20[1]), _49@Mir(bb19[1])
  goto -> bb22
  using: 
bb22:
  _56 = ((*_1).1: u64)
  using: _1@Phi(bb22)
  _6 = move _56
  using: _56@Mir(bb22[0])
  goto -> bb23
  using: 
bb23:
  _57 = _6
  using: _6@Phi(bb23)
  _59 = _6
  using: _6@Phi(bb23)
  _58 = core::num::<impl u64>::wrapping_sub(move _59, const 1_u64) -> bb24
  using: _59@Mir(bb23[1])
bb24:
  _6 = move _58
  using: _58@Mir(bb23[2])
  _62 = _57
  using: _57@Mir(bb23[0])
  _61 = Ne(move _62, const 0_u64)
  using: _62@Mir(bb24[1])
  _60 = Not(move _61)
  using: _61@Mir(bb24[2])
  switchInt(move _60) -> [0: bb26, otherwise: bb25]
  using: _60@Mir(bb24[3])
bb25:
  _68 = const 0_i32
  using: 
  ((*_1).0: i32) = move _68
  using: _1@Phi(bb23), _68@Mir(bb25[0])
  goto -> bb28
  using: 
bb26:
  _65 = ((*_1).3: *mut u32)
  using: _1@Phi(bb23)
  _67 = _6
  using: _6@Mir(bb24[0])
  _66 = move _67 as isize (IntToInt)
  using: _67@Mir(bb26[1])
  _64 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _65, move _66) -> bb27
  using: _65@Mir(bb26[0]), _66@Mir(bb26[2])
bb27:
  _63 = (*_64)
  using: _64@Mir(bb26[3])
  switchInt(move _63) -> [0: bb23, otherwise: bb28]
  using: _63@Mir(bb27[0])
bb28:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/ztrunc.rs:34:18: 34:87 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/ztrunc.rs:49:31: 49:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/ztrunc.rs:49:18: 49:85 (#0) by default
rewrite call src::ztrunc::memcpy @ workspace/libzahl/src/ztrunc.rs:45:9: 50:10 (#0) by default
rewrite call core::num::<impl u32>::wrapping_sub @ workspace/libzahl/src/ztrunc.rs:55:39: 55:85 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/ztrunc.rs:59:29: 59:76 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/ztrunc.rs:58:14: 60:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/ztrunc.rs:65:15: 65:30 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/ztrunc.rs:69:26: 69:44 (#0) by default
@DefId(0:791 ~ lib[40c5]::src::zunsetup::zunsetup)
bb0:
  _1 = const 0_u64
  using: 
  _3 = const {alloc370: *mut i32}
  using: 
  _2 = (*_3)
  using: _3@Mir(bb0[1])
  switchInt(move _2) -> [0: bb80, otherwise: bb1]
  using: _2@Mir(bb0[2])
bb1:
  _4 = const 0_i32
  using: 
  _5 = const {alloc370: *mut i32}
  using: 
  (*_5) = move _4
  using: _5@Mir(bb1[1]), _4@Mir(bb1[0])
  _12 = const {alloc371: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _11 = &mut (*_12)
  using: _12@Mir(bb1[3])
  _10 = move _11 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _11@Mir(bb1[4])
  _9 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _10) -> bb2
  using: _10@Mir(bb1[5])
bb2:
  _8 = ((*_9).3: *mut u32)
  using: _9@Mir(bb1[6])
  _7 = move _8 as *mut libc::c_void (PtrToPtr)
  using: _8@Mir(bb2[0])
  _6 = src::zunsetup::free(move _7) -> bb3
  using: _7@Mir(bb2[1])
bb3:
  _19 = const {alloc372: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _18 = &mut (*_19)
  using: _19@Mir(bb3[0])
  _17 = move _18 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _18@Mir(bb3[1])
  _16 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _17) -> bb4
  using: _17@Mir(bb3[2])
bb4:
  _15 = ((*_16).3: *mut u32)
  using: _16@Mir(bb3[3])
  _14 = move _15 as *mut libc::c_void (PtrToPtr)
  using: _15@Mir(bb4[0])
  _13 = src::zunsetup::free(move _14) -> bb5
  using: _14@Mir(bb4[1])
bb5:
  _26 = const {alloc373: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _25 = &mut (*_26)
  using: _26@Mir(bb5[0])
  _24 = move _25 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _25@Mir(bb5[1])
  _23 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _24) -> bb6
  using: _24@Mir(bb5[2])
bb6:
  _22 = ((*_23).3: *mut u32)
  using: _23@Mir(bb5[3])
  _21 = move _22 as *mut libc::c_void (PtrToPtr)
  using: _22@Mir(bb6[0])
  _20 = src::zunsetup::free(move _21) -> bb7
  using: _21@Mir(bb6[1])
bb7:
  _33 = const {alloc374: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _32 = &mut (*_33)
  using: _33@Mir(bb7[0])
  _31 = move _32 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _32@Mir(bb7[1])
  _30 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _31) -> bb8
  using: _31@Mir(bb7[2])
bb8:
  _29 = ((*_30).3: *mut u32)
  using: _30@Mir(bb7[3])
  _28 = move _29 as *mut libc::c_void (PtrToPtr)
  using: _29@Mir(bb8[0])
  _27 = src::zunsetup::free(move _28) -> bb9
  using: _28@Mir(bb8[1])
bb9:
  _40 = const {alloc375: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _39 = &mut (*_40)
  using: _40@Mir(bb9[0])
  _38 = move _39 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _39@Mir(bb9[1])
  _37 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _38) -> bb10
  using: _38@Mir(bb9[2])
bb10:
  _36 = ((*_37).3: *mut u32)
  using: _37@Mir(bb9[3])
  _35 = move _36 as *mut libc::c_void (PtrToPtr)
  using: _36@Mir(bb10[0])
  _34 = src::zunsetup::free(move _35) -> bb11
  using: _35@Mir(bb10[1])
bb11:
  _47 = const {alloc376: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _46 = &mut (*_47)
  using: _47@Mir(bb11[0])
  _45 = move _46 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _46@Mir(bb11[1])
  _44 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _45) -> bb12
  using: _45@Mir(bb11[2])
bb12:
  _43 = ((*_44).3: *mut u32)
  using: _44@Mir(bb11[3])
  _42 = move _43 as *mut libc::c_void (PtrToPtr)
  using: _43@Mir(bb12[0])
  _41 = src::zunsetup::free(move _42) -> bb13
  using: _42@Mir(bb12[1])
bb13:
  _54 = const {alloc377: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _53 = &mut (*_54)
  using: _54@Mir(bb13[0])
  _52 = move _53 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _53@Mir(bb13[1])
  _51 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _52) -> bb14
  using: _52@Mir(bb13[2])
bb14:
  _50 = ((*_51).3: *mut u32)
  using: _51@Mir(bb13[3])
  _49 = move _50 as *mut libc::c_void (PtrToPtr)
  using: _50@Mir(bb14[0])
  _48 = src::zunsetup::free(move _49) -> bb15
  using: _49@Mir(bb14[1])
bb15:
  _61 = const {alloc378: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _60 = &mut (*_61)
  using: _61@Mir(bb15[0])
  _59 = move _60 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _60@Mir(bb15[1])
  _58 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _59) -> bb16
  using: _59@Mir(bb15[2])
bb16:
  _57 = ((*_58).3: *mut u32)
  using: _58@Mir(bb15[3])
  _56 = move _57 as *mut libc::c_void (PtrToPtr)
  using: _57@Mir(bb16[0])
  _55 = src::zunsetup::free(move _56) -> bb17
  using: _56@Mir(bb16[1])
bb17:
  _68 = const {alloc379: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _67 = &mut (*_68)
  using: _68@Mir(bb17[0])
  _66 = move _67 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _67@Mir(bb17[1])
  _65 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _66) -> bb18
  using: _66@Mir(bb17[2])
bb18:
  _64 = ((*_65).3: *mut u32)
  using: _65@Mir(bb17[3])
  _63 = move _64 as *mut libc::c_void (PtrToPtr)
  using: _64@Mir(bb18[0])
  _62 = src::zunsetup::free(move _63) -> bb19
  using: _63@Mir(bb18[1])
bb19:
  _75 = const {alloc380: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _74 = &mut (*_75)
  using: _75@Mir(bb19[0])
  _73 = move _74 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _74@Mir(bb19[1])
  _72 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _73) -> bb20
  using: _73@Mir(bb19[2])
bb20:
  _71 = ((*_72).3: *mut u32)
  using: _72@Mir(bb19[3])
  _70 = move _71 as *mut libc::c_void (PtrToPtr)
  using: _71@Mir(bb20[0])
  _69 = src::zunsetup::free(move _70) -> bb21
  using: _70@Mir(bb20[1])
bb21:
  _82 = const {alloc381: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _81 = &mut (*_82)
  using: _82@Mir(bb21[0])
  _80 = move _81 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _81@Mir(bb21[1])
  _79 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _80) -> bb22
  using: _80@Mir(bb21[2])
bb22:
  _78 = ((*_79).3: *mut u32)
  using: _79@Mir(bb21[3])
  _77 = move _78 as *mut libc::c_void (PtrToPtr)
  using: _78@Mir(bb22[0])
  _76 = src::zunsetup::free(move _77) -> bb23
  using: _77@Mir(bb22[1])
bb23:
  _89 = const {alloc382: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _88 = &mut (*_89)
  using: _89@Mir(bb23[0])
  _87 = move _88 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _88@Mir(bb23[1])
  _86 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _87) -> bb24
  using: _87@Mir(bb23[2])
bb24:
  _85 = ((*_86).3: *mut u32)
  using: _86@Mir(bb23[3])
  _84 = move _85 as *mut libc::c_void (PtrToPtr)
  using: _85@Mir(bb24[0])
  _83 = src::zunsetup::free(move _84) -> bb25
  using: _84@Mir(bb24[1])
bb25:
  _96 = const {alloc383: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _95 = &mut (*_96)
  using: _96@Mir(bb25[0])
  _94 = move _95 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _95@Mir(bb25[1])
  _93 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _94) -> bb26
  using: _94@Mir(bb25[2])
bb26:
  _92 = ((*_93).3: *mut u32)
  using: _93@Mir(bb25[3])
  _91 = move _92 as *mut libc::c_void (PtrToPtr)
  using: _92@Mir(bb26[0])
  _90 = src::zunsetup::free(move _91) -> bb27
  using: _91@Mir(bb26[1])
bb27:
  _103 = const {alloc384: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _102 = &mut (*_103)
  using: _103@Mir(bb27[0])
  _101 = move _102 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _102@Mir(bb27[1])
  _100 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _101) -> bb28
  using: _101@Mir(bb27[2])
bb28:
  _99 = ((*_100).3: *mut u32)
  using: _100@Mir(bb27[3])
  _98 = move _99 as *mut libc::c_void (PtrToPtr)
  using: _99@Mir(bb28[0])
  _97 = src::zunsetup::free(move _98) -> bb29
  using: _98@Mir(bb28[1])
bb29:
  _110 = const {alloc385: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _109 = &mut (*_110)
  using: _110@Mir(bb29[0])
  _108 = move _109 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _109@Mir(bb29[1])
  _107 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _108) -> bb30
  using: _108@Mir(bb29[2])
bb30:
  _106 = ((*_107).3: *mut u32)
  using: _107@Mir(bb29[3])
  _105 = move _106 as *mut libc::c_void (PtrToPtr)
  using: _106@Mir(bb30[0])
  _104 = src::zunsetup::free(move _105) -> bb31
  using: _105@Mir(bb30[1])
bb31:
  _117 = const {alloc386: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _116 = &mut (*_117)
  using: _117@Mir(bb31[0])
  _115 = move _116 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _116@Mir(bb31[1])
  _114 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _115) -> bb32
  using: _115@Mir(bb31[2])
bb32:
  _113 = ((*_114).3: *mut u32)
  using: _114@Mir(bb31[3])
  _112 = move _113 as *mut libc::c_void (PtrToPtr)
  using: _113@Mir(bb32[0])
  _111 = src::zunsetup::free(move _112) -> bb33
  using: _112@Mir(bb32[1])
bb33:
  _124 = const {alloc387: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _123 = &mut (*_124)
  using: _124@Mir(bb33[0])
  _122 = move _123 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _123@Mir(bb33[1])
  _121 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _122) -> bb34
  using: _122@Mir(bb33[2])
bb34:
  _120 = ((*_121).3: *mut u32)
  using: _121@Mir(bb33[3])
  _119 = move _120 as *mut libc::c_void (PtrToPtr)
  using: _120@Mir(bb34[0])
  _118 = src::zunsetup::free(move _119) -> bb35
  using: _119@Mir(bb34[1])
bb35:
  _131 = const {alloc388: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _130 = &mut (*_131)
  using: _131@Mir(bb35[0])
  _129 = move _130 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _130@Mir(bb35[1])
  _128 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _129) -> bb36
  using: _129@Mir(bb35[2])
bb36:
  _127 = ((*_128).3: *mut u32)
  using: _128@Mir(bb35[3])
  _126 = move _127 as *mut libc::c_void (PtrToPtr)
  using: _127@Mir(bb36[0])
  _125 = src::zunsetup::free(move _126) -> bb37
  using: _126@Mir(bb36[1])
bb37:
  _138 = const {alloc389: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _137 = &mut (*_138)
  using: _138@Mir(bb37[0])
  _136 = move _137 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _137@Mir(bb37[1])
  _135 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _136) -> bb38
  using: _136@Mir(bb37[2])
bb38:
  _134 = ((*_135).3: *mut u32)
  using: _135@Mir(bb37[3])
  _133 = move _134 as *mut libc::c_void (PtrToPtr)
  using: _134@Mir(bb38[0])
  _132 = src::zunsetup::free(move _133) -> bb39
  using: _133@Mir(bb38[1])
bb39:
  _145 = const {alloc390: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _144 = &mut (*_145)
  using: _145@Mir(bb39[0])
  _143 = move _144 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _144@Mir(bb39[1])
  _142 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _143) -> bb40
  using: _143@Mir(bb39[2])
bb40:
  _141 = ((*_142).3: *mut u32)
  using: _142@Mir(bb39[3])
  _140 = move _141 as *mut libc::c_void (PtrToPtr)
  using: _141@Mir(bb40[0])
  _139 = src::zunsetup::free(move _140) -> bb41
  using: _140@Mir(bb40[1])
bb41:
  _152 = const {alloc391: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _151 = &mut (*_152)
  using: _152@Mir(bb41[0])
  _150 = move _151 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _151@Mir(bb41[1])
  _149 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _150) -> bb42
  using: _150@Mir(bb41[2])
bb42:
  _148 = ((*_149).3: *mut u32)
  using: _149@Mir(bb41[3])
  _147 = move _148 as *mut libc::c_void (PtrToPtr)
  using: _148@Mir(bb42[0])
  _146 = src::zunsetup::free(move _147) -> bb43
  using: _147@Mir(bb42[1])
bb43:
  _159 = const {alloc392: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _158 = &mut (*_159)
  using: _159@Mir(bb43[0])
  _157 = move _158 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _158@Mir(bb43[1])
  _156 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _157) -> bb44
  using: _157@Mir(bb43[2])
bb44:
  _155 = ((*_156).3: *mut u32)
  using: _156@Mir(bb43[3])
  _154 = move _155 as *mut libc::c_void (PtrToPtr)
  using: _155@Mir(bb44[0])
  _153 = src::zunsetup::free(move _154) -> bb45
  using: _154@Mir(bb44[1])
bb45:
  _166 = const {alloc393: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _165 = &mut (*_166)
  using: _166@Mir(bb45[0])
  _164 = move _165 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _165@Mir(bb45[1])
  _163 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _164) -> bb46
  using: _164@Mir(bb45[2])
bb46:
  _162 = ((*_163).3: *mut u32)
  using: _163@Mir(bb45[3])
  _161 = move _162 as *mut libc::c_void (PtrToPtr)
  using: _162@Mir(bb46[0])
  _160 = src::zunsetup::free(move _161) -> bb47
  using: _161@Mir(bb46[1])
bb47:
  _173 = const {alloc394: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _172 = &mut (*_173)
  using: _173@Mir(bb47[0])
  _171 = move _172 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _172@Mir(bb47[1])
  _170 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _171) -> bb48
  using: _171@Mir(bb47[2])
bb48:
  _169 = ((*_170).3: *mut u32)
  using: _170@Mir(bb47[3])
  _168 = move _169 as *mut libc::c_void (PtrToPtr)
  using: _169@Mir(bb48[0])
  _167 = src::zunsetup::free(move _168) -> bb49
  using: _168@Mir(bb48[1])
bb49:
  _180 = const {alloc395: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _179 = &mut (*_180)
  using: _180@Mir(bb49[0])
  _178 = move _179 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _179@Mir(bb49[1])
  _177 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _178) -> bb50
  using: _178@Mir(bb49[2])
bb50:
  _176 = ((*_177).3: *mut u32)
  using: _177@Mir(bb49[3])
  _175 = move _176 as *mut libc::c_void (PtrToPtr)
  using: _176@Mir(bb50[0])
  _174 = src::zunsetup::free(move _175) -> bb51
  using: _175@Mir(bb50[1])
bb51:
  _187 = const {alloc396: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _186 = &mut (*_187)
  using: _187@Mir(bb51[0])
  _185 = move _186 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _186@Mir(bb51[1])
  _184 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _185) -> bb52
  using: _185@Mir(bb51[2])
bb52:
  _183 = ((*_184).3: *mut u32)
  using: _184@Mir(bb51[3])
  _182 = move _183 as *mut libc::c_void (PtrToPtr)
  using: _183@Mir(bb52[0])
  _181 = src::zunsetup::free(move _182) -> bb53
  using: _182@Mir(bb52[1])
bb53:
  _194 = const {alloc397: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _193 = &mut (*_194)
  using: _194@Mir(bb53[0])
  _192 = move _193 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _193@Mir(bb53[1])
  _191 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _192) -> bb54
  using: _192@Mir(bb53[2])
bb54:
  _190 = ((*_191).3: *mut u32)
  using: _191@Mir(bb53[3])
  _189 = move _190 as *mut libc::c_void (PtrToPtr)
  using: _190@Mir(bb54[0])
  _188 = src::zunsetup::free(move _189) -> bb55
  using: _189@Mir(bb54[1])
bb55:
  _201 = const {alloc398: *mut [src::allocator::C2RustUnnamed; 1]}
  using: 
  _200 = &mut (*_201)
  using: _201@Mir(bb55[0])
  _199 = move _200 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _200@Mir(bb55[1])
  _198 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _199) -> bb56
  using: _199@Mir(bb55[2])
bb56:
  _197 = ((*_198).3: *mut u32)
  using: _198@Mir(bb55[3])
  _196 = move _197 as *mut libc::c_void (PtrToPtr)
  using: _197@Mir(bb56[0])
  _195 = src::zunsetup::free(move _196) -> bb57
  using: _196@Mir(bb56[1])
bb57:
  _1 = const 32_u64
  using: 
  goto -> bb58
  using: 
bb58:
  _202 = _1
  using: _1@Phi(bb58)
  _204 = _1
  using: _1@Phi(bb58)
  _203 = core::num::<impl u64>::wrapping_sub(move _204, const 1_u64) -> bb59
  using: _204@Mir(bb58[1])
bb59:
  _1 = move _203
  using: _203@Mir(bb58[2])
  _207 = _202
  using: _202@Mir(bb58[0])
  _206 = Ne(move _207, const 0_u64)
  using: _207@Mir(bb59[1])
  _205 = Not(move _206)
  using: _206@Mir(bb59[2])
  switchInt(move _205) -> [0: bb61, otherwise: bb60]
  using: _205@Mir(bb59[3])
bb60:
  _221 = std::mem::size_of::<[*mut *mut u32; 64]>() -> bb64
  using: 
bb61:
  _214 = const {alloc399: *mut [[src::allocator::C2RustUnnamed; 1]; 32]}
  using: 
  _216 = _1
  using: _1@Phi(bb67)
  _215 = move _216 as usize (IntToInt)
  using: _216@Mir(bb61[1])
  _217 = const 32_usize
  using: 
  _218 = Lt(_215, _217)
  using: _215@Mir(bb61[2]), _217@Mir(bb61[3])
  assert(move _218, "index out of bounds: the length is {} but the index is {}", move _217, _215) -> bb62
  using: _218@Entry, _217@Entry, _215@Entry
bb62:
  _213 = &mut (*_214)[_215]
  using: _214@Mir(bb61[0]), _215@Mir(bb61[2])
  _212 = move _213 as &mut [src::allocator::C2RustUnnamed] (Pointer(Unsize))
  using: _213@Mir(bb62[0])
  _211 = core::slice::<impl [src::allocator::C2RustUnnamed]>::as_mut_ptr(move _212) -> bb63
  using: _212@Mir(bb62[1])
bb63:
  _210 = ((*_211).3: *mut u32)
  using: _211@Mir(bb62[2])
  _209 = move _210 as *mut libc::c_void (PtrToPtr)
  using: _210@Mir(bb63[0])
  _208 = src::zunsetup::free(move _209) -> bb58
  using: _209@Mir(bb63[1])
bb64:
  _220 = move _221 as u64 (IntToInt)
  using: _221@Mir(bb60[0])
  _223 = std::mem::size_of::<*mut *mut u32>() -> bb65
  using: 
bb65:
  _222 = move _223 as u64 (IntToInt)
  using: _223@Mir(bb64[1])
  _219 = core::num::<impl u64>::wrapping_div(move _220, move _222) -> bb66
  using: _220@Mir(bb64[0]), _222@Mir(bb65[0])
bb66:
  _1 = move _219
  using: _219@Mir(bb65[1])
  goto -> bb67
  using: 
bb67:
  _224 = _1
  using: _1@Phi(bb67)
  _226 = _1
  using: _1@Phi(bb67)
  _225 = core::num::<impl u64>::wrapping_sub(move _226, const 1_u64) -> bb68
  using: _226@Mir(bb67[1])
bb68:
  _1 = move _225
  using: _225@Mir(bb67[2])
  _229 = _224
  using: _224@Mir(bb67[0])
  _228 = Ne(move _229, const 0_u64)
  using: _229@Mir(bb68[1])
  _227 = Not(move _228)
  using: _228@Mir(bb68[2])
  switchInt(move _227) -> [0: bb69, otherwise: bb80]
  using: _227@Mir(bb68[3])
bb69:
  _231 = const {alloc400: *mut [u64; 64]}
  using: 
  _233 = _1
  using: _1@Phi(bb69)
  _232 = move _233 as usize (IntToInt)
  using: _233@Mir(bb69[1])
  _234 = const 64_usize
  using: 
  _235 = Lt(_232, _234)
  using: _232@Mir(bb69[2]), _234@Mir(bb69[3])
  assert(move _235, "index out of bounds: the length is {} but the index is {}", move _234, _232) -> bb70
  using: _235@Entry, _234@Entry, _232@Entry
bb70:
  _230 = (*_231)[_232]
  using: _231@Mir(bb69[0]), _232@Mir(bb69[2])
  _238 = const {alloc400: *mut [u64; 64]}
  using: 
  _240 = _1
  using: _1@Phi(bb69)
  _239 = move _240 as usize (IntToInt)
  using: _240@Mir(bb70[2])
  _241 = const 64_usize
  using: 
  _242 = Lt(_239, _241)
  using: _239@Mir(bb70[3]), _241@Mir(bb70[4])
  assert(move _242, "index out of bounds: the length is {} but the index is {}", move _241, _239) -> bb71
  using: _242@Entry, _241@Entry, _239@Entry
bb71:
  _237 = (*_238)[_239]
  using: _238@Mir(bb70[1]), _239@Mir(bb70[3])
  _236 = core::num::<impl u64>::wrapping_sub(move _237, const 1_u64) -> bb72
  using: _237@Mir(bb71[0])
bb72:
  _243 = const {alloc400: *mut [u64; 64]}
  using: 
  _245 = _1
  using: _1@Phi(bb69)
  _244 = move _245 as usize (IntToInt)
  using: _245@Mir(bb72[1])
  _246 = const 64_usize
  using: 
  _247 = Lt(_244, _246)
  using: _244@Mir(bb72[2]), _246@Mir(bb72[3])
  assert(move _247, "index out of bounds: the length is {} but the index is {}", move _246, _244) -> bb73
  using: _247@Entry, _246@Entry, _244@Entry
bb73:
  (*_243)[_244] = move _236
  using: _243@Mir(bb72[0]), _244@Mir(bb72[2]), _236@Mir(bb71[1])
  _250 = _230
  using: _230@Mir(bb70[0])
  _249 = Ne(move _250, const 0_u64)
  using: _250@Mir(bb73[1])
  _248 = Not(move _249)
  using: _249@Mir(bb73[2])
  switchInt(move _248) -> [0: bb75, otherwise: bb74]
  using: _248@Mir(bb73[3])
bb74:
  _271 = const {alloc401: *mut [*mut *mut u32; 64]}
  using: 
  _273 = _1
  using: _1@Phi(bb69)
  _272 = move _273 as usize (IntToInt)
  using: _273@Mir(bb74[1])
  _274 = const 64_usize
  using: 
  _275 = Lt(_272, _274)
  using: _272@Mir(bb74[2]), _274@Mir(bb74[3])
  assert(move _275, "index out of bounds: the length is {} but the index is {}", move _274, _272) -> bb79
  using: _275@Entry, _274@Entry, _272@Entry
bb75:
  _256 = const {alloc401: *mut [*mut *mut u32; 64]}
  using: 
  _258 = _1
  using: _1@Phi(bb69)
  _257 = move _258 as usize (IntToInt)
  using: _258@Mir(bb75[1])
  _259 = const 64_usize
  using: 
  _260 = Lt(_257, _259)
  using: _257@Mir(bb75[2]), _259@Mir(bb75[3])
  assert(move _260, "index out of bounds: the length is {} but the index is {}", move _259, _257) -> bb76
  using: _260@Entry, _259@Entry, _257@Entry
bb76:
  _255 = (*_256)[_257]
  using: _256@Mir(bb75[0]), _257@Mir(bb75[2])
  _263 = const {alloc400: *mut [u64; 64]}
  using: 
  _265 = _1
  using: _1@Phi(bb69)
  _264 = move _265 as usize (IntToInt)
  using: _265@Mir(bb76[2])
  _266 = const 64_usize
  using: 
  _267 = Lt(_264, _266)
  using: _264@Mir(bb76[3]), _266@Mir(bb76[4])
  assert(move _267, "index out of bounds: the length is {} but the index is {}", move _266, _264) -> bb77
  using: _267@Entry, _266@Entry, _264@Entry
bb77:
  _262 = (*_263)[_264]
  using: _263@Mir(bb76[1]), _264@Mir(bb76[3])
  _261 = move _262 as isize (IntToInt)
  using: _262@Mir(bb77[0])
  _254 = std::ptr::mut_ptr::<impl *mut *mut u32>::offset(move _255, move _261) -> bb78
  using: _255@Mir(bb76[0]), _261@Mir(bb77[1])
bb78:
  _253 = (*_254)
  using: _254@Mir(bb77[2])
  _252 = move _253 as *mut libc::c_void (PtrToPtr)
  using: _253@Mir(bb78[0])
  _251 = src::zunsetup::free(move _252) -> bb69
  using: _252@Mir(bb78[1])
bb79:
  _270 = (*_271)[_272]
  using: _271@Mir(bb74[0]), _272@Mir(bb74[2])
  _269 = move _270 as *mut libc::c_void (PtrToPtr)
  using: _270@Mir(bb79[0])
  _268 = src::zunsetup::free(move _269) -> bb67
  using: _269@Mir(bb79[1])
bb80:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zunsetup.rs:81:19: 81:34 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zunsetup.rs:90:14: 90:66 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zunsetup.rs:92:17: 92:63 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libzahl/src/zunsetup.rs:91:14: 93:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zunsetup.rs:96:19: 96:34 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zunsetup.rs:103:62: 103:77 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zunsetup.rs:109:26: 109:69 (#0) by default
@DefId(0:801 ~ lib[40c5]::src::zxor::zsignum)
bb0:
  _0 = ((*_1).0: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb0[0])
@DefId(0:802 ~ lib[40c5]::src::zxor::zzero)
bb0:
  _3 = ((*_1).0: i32)
  using: _1@Entry
  _2 = Eq(move _3, const 0_i32)
  using: _3@Mir(bb0[0])
  _0 = move _2 as i32 (IntToInt)
  using: _2@Mir(bb0[1])
  return
  using: _0@Mir(bb0[2])
@DefId(0:803 ~ lib[40c5]::src::zxor::zxor)
bb0:
  _4 = const 0_u64
  using: 
  _5 = const 0_u64
  using: 
  _7 = _2
  using: _2@Entry
  _6 = src::zxor::zzero(move _7) -> bb1
  using: _7@Mir(bb0[2])
bb1:
  switchInt(move _6) -> [0: bb7, otherwise: bb2]
  using: _6@Mir(bb0[3])
bb2:
  _9 = _3
  using: _3@Entry
  _8 = src::zxor::zzero(move _9) -> bb3
  using: _9@Mir(bb2[0])
bb3:
  switchInt(move _8) -> [0: bb5, otherwise: bb4]
  using: _8@Mir(bb2[1])
bb4:
  _10 = const 0_i32
  using: 
  ((*_1).0: i32) = move _10
  using: _1@Entry, _10@Mir(bb4[0])
  goto -> bb77
  using: 
bb5:
  _12 = _1
  using: _1@Entry
  _13 = _3
  using: _3@Entry
  _11 = Ne(move _12, move _13)
  using: _12@Mir(bb5[0]), _13@Mir(bb5[1])
  switchInt(move _11) -> [0: bb77, otherwise: bb6]
  using: _11@Mir(bb5[2])
bb6:
  _15 = _1
  using: _1@Entry
  _16 = _3
  using: _3@Entry
  _14 = src::zset::zset(move _15, move _16) -> bb77
  using: _15@Mir(bb6[0]), _16@Mir(bb6[1])
bb7:
  _18 = _3
  using: _3@Entry
  _17 = src::zxor::zzero(move _18) -> bb8
  using: _18@Mir(bb7[0])
bb8:
  switchInt(move _17) -> [0: bb11, otherwise: bb9]
  using: _17@Mir(bb7[1])
bb9:
  _20 = _1
  using: _1@Entry
  _21 = _2
  using: _2@Entry
  _19 = Ne(move _20, move _21)
  using: _20@Mir(bb9[0]), _21@Mir(bb9[1])
  switchInt(move _19) -> [0: bb77, otherwise: bb10]
  using: _19@Mir(bb9[2])
bb10:
  _23 = _1
  using: _1@Entry
  _24 = _2
  using: _2@Entry
  _22 = src::zset::zset(move _23, move _24) -> bb77
  using: _23@Mir(bb10[0]), _24@Mir(bb10[1])
bb11:
  _27 = ((*_2).1: u64)
  using: _2@Entry
  _28 = ((*_3).1: u64)
  using: _3@Entry
  _26 = Gt(move _27, move _28)
  using: _27@Mir(bb11[0]), _28@Mir(bb11[1])
  switchInt(move _26) -> [0: bb13, otherwise: bb12]
  using: _26@Mir(bb11[2])
bb12:
  _25 = ((*_2).1: u64)
  using: _2@Entry
  goto -> bb14
  using: 
bb13:
  _25 = ((*_3).1: u64)
  using: _3@Entry
  goto -> bb14
  using: 
bb14:
  _5 = move _25
  using: _25@Phi(bb14)
  _31 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _32 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  _30 = core::num::<impl u64>::wrapping_add(move _31, move _32) -> bb15
  using: _31@Mir(bb14[1]), _32@Mir(bb14[2])
bb15:
  _33 = _5
  using: _5@Mir(bb14[0])
  _29 = core::num::<impl u64>::wrapping_sub(move _30, move _33) -> bb16
  using: _30@Mir(bb14[3]), _33@Mir(bb15[0])
bb16:
  _4 = move _29
  using: _29@Mir(bb15[1])
  _35 = ((*_1).2: u64)
  using: _1@Entry
  _36 = _5
  using: _5@Mir(bb14[0])
  _34 = Lt(move _35, move _36)
  using: _35@Mir(bb16[1]), _36@Mir(bb16[2])
  switchInt(move _34) -> [0: bb18, otherwise: bb17]
  using: _34@Mir(bb16[3])
bb17:
  _38 = _1
  using: _1@Entry
  _39 = _5
  using: _5@Mir(bb14[0])
  _37 = src::allocator::libzahl_realloc(move _38, move _39) -> bb18
  using: _38@Mir(bb17[0]), _39@Mir(bb17[1])
bb18:
  _41 = _1
  using: _1@Phi(bb18)
  _42 = _2
  using: _2@Phi(bb14)
  _40 = Eq(move _41, move _42)
  using: _41@Mir(bb18[0]), _42@Mir(bb18[1])
  switchInt(move _40) -> [0: bb31, otherwise: bb19]
  using: _40@Mir(bb18[2])
bb19:
  _44 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _45 = ((*_3).1: u64)
  using: _3@Phi(bb14)
  _43 = Lt(move _44, move _45)
  using: _44@Mir(bb19[0]), _45@Mir(bb19[1])
  switchInt(move _43) -> [0: bb26, otherwise: bb20]
  using: _43@Mir(bb19[2])
bb20:
  _49 = ((*_1).3: *mut u32)
  using: _1@Phi(bb18)
  _51 = _4
  using: _4@Mir(bb16[0])
  _50 = move _51 as isize (IntToInt)
  using: _51@Mir(bb20[1])
  _48 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _49, move _50) -> bb21
  using: _49@Mir(bb20[0]), _50@Mir(bb20[2])
bb21:
  _47 = move _48 as *mut libc::c_void (PtrToPtr)
  using: _48@Mir(bb20[3])
  _54 = ((*_3).3: *mut u32)
  using: _3@Phi(bb14)
  _56 = _4
  using: _4@Mir(bb16[0])
  _55 = move _56 as isize (IntToInt)
  using: _56@Mir(bb21[2])
  _53 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _54, move _55) -> bb22
  using: _54@Mir(bb21[1]), _55@Mir(bb21[3])
bb22:
  _52 = move _53 as *const libc::c_void (PtrToPtr)
  using: _53@Mir(bb21[4])
  _59 = _5
  using: _5@Phi(bb18)
  _60 = _4
  using: _4@Mir(bb16[0])
  _58 = core::num::<impl u64>::wrapping_sub(move _59, move _60) -> bb23
  using: _59@Mir(bb22[1]), _60@Mir(bb22[2])
bb23:
  _62 = std::mem::size_of::<u32>() -> bb24
  using: 
bb24:
  _61 = move _62 as u64 (IntToInt)
  using: _62@Mir(bb23[0])
  _57 = core::num::<impl u64>::wrapping_mul(move _58, move _61) -> bb25
  using: _58@Mir(bb22[3]), _61@Mir(bb24[0])
bb25:
  _46 = src::zxor::memcpy(move _47, move _52, move _57) -> bb26
  using: _47@Mir(bb21[0]), _52@Mir(bb22[0]), _57@Mir(bb24[1])
bb26:
  _63 = _4
  using: _4@Phi(bb26)
  _65 = _4
  using: _4@Phi(bb26)
  _64 = core::num::<impl u64>::wrapping_sub(move _65, const 1_u64) -> bb27
  using: _65@Mir(bb26[1])
bb27:
  _4 = move _64
  using: _64@Mir(bb26[2])
  _68 = _63
  using: _63@Mir(bb26[0])
  _67 = Ne(move _68, const 0_u64)
  using: _68@Mir(bb27[1])
  _66 = Not(move _67)
  using: _67@Mir(bb27[2])
  switchInt(move _66) -> [0: bb28, otherwise: bb61]
  using: _66@Mir(bb27[3])
bb28:
  _71 = ((*_3).3: *mut u32)
  using: _3@Phi(bb26)
  _73 = _4
  using: _4@Mir(bb27[0])
  _72 = move _73 as isize (IntToInt)
  using: _73@Mir(bb28[1])
  _70 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _71, move _72) -> bb29
  using: _71@Mir(bb28[0]), _72@Mir(bb28[2])
bb29:
  _69 = (*_70)
  using: _70@Mir(bb28[3])
  _75 = ((*_1).3: *mut u32)
  using: _1@Phi(bb26)
  _77 = _4
  using: _4@Mir(bb27[0])
  _76 = move _77 as isize (IntToInt)
  using: _77@Mir(bb29[2])
  _74 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _75, move _76) -> bb30
  using: _75@Mir(bb29[1]), _76@Mir(bb29[3])
bb30:
  (*_74) = BitXor((*_74), move _69)
  using: _74@Mir(bb29[4]), _74@Mir(bb29[4]), _69@Mir(bb29[0])
  goto -> bb26
  using: 
bb31:
  _79 = _1
  using: _1@Phi(bb26)
  _80 = _3
  using: _3@Phi(bb26)
  _78 = Eq(move _79, move _80)
  using: _79@Mir(bb31[0]), _80@Mir(bb31[1])
  switchInt(move _78) -> [0: bb44, otherwise: bb32]
  using: _78@Mir(bb31[2])
bb32:
  _82 = ((*_3).1: u64)
  using: _3@Phi(bb26)
  _83 = ((*_2).1: u64)
  using: _2@Phi(bb14)
  _81 = Lt(move _82, move _83)
  using: _82@Mir(bb32[0]), _83@Mir(bb32[1])
  switchInt(move _81) -> [0: bb39, otherwise: bb33]
  using: _81@Mir(bb32[2])
bb33:
  _87 = ((*_1).3: *mut u32)
  using: _1@Phi(bb26)
  _89 = _4
  using: _4@Phi(bb26)
  _88 = move _89 as isize (IntToInt)
  using: _89@Mir(bb33[1])
  _86 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _87, move _88) -> bb34
  using: _87@Mir(bb33[0]), _88@Mir(bb33[2])
bb34:
  _85 = move _86 as *mut libc::c_void (PtrToPtr)
  using: _86@Mir(bb33[3])
  _92 = ((*_2).3: *mut u32)
  using: _2@Phi(bb14)
  _94 = _4
  using: _4@Phi(bb26)
  _93 = move _94 as isize (IntToInt)
  using: _94@Mir(bb34[2])
  _91 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _92, move _93) -> bb35
  using: _92@Mir(bb34[1]), _93@Mir(bb34[3])
bb35:
  _90 = move _91 as *const libc::c_void (PtrToPtr)
  using: _91@Mir(bb34[4])
  _97 = _5
  using: _5@Phi(bb26)
  _98 = _4
  using: _4@Phi(bb26)
  _96 = core::num::<impl u64>::wrapping_sub(move _97, move _98) -> bb36
  using: _97@Mir(bb35[1]), _98@Mir(bb35[2])
bb36:
  _100 = std::mem::size_of::<u32>() -> bb37
  using: 
bb37:
  _99 = move _100 as u64 (IntToInt)
  using: _100@Mir(bb36[0])
  _95 = core::num::<impl u64>::wrapping_mul(move _96, move _99) -> bb38
  using: _96@Mir(bb35[3]), _99@Mir(bb37[0])
bb38:
  _84 = src::zxor::memcpy(move _85, move _90, move _95) -> bb39
  using: _85@Mir(bb34[0]), _90@Mir(bb35[0]), _95@Mir(bb37[1])
bb39:
  _101 = _4
  using: _4@Phi(bb39)
  _103 = _4
  using: _4@Phi(bb39)
  _102 = core::num::<impl u64>::wrapping_sub(move _103, const 1_u64) -> bb40
  using: _103@Mir(bb39[1])
bb40:
  _4 = move _102
  using: _102@Mir(bb39[2])
  _106 = _101
  using: _101@Mir(bb39[0])
  _105 = Ne(move _106, const 0_u64)
  using: _106@Mir(bb40[1])
  _104 = Not(move _105)
  using: _105@Mir(bb40[2])
  switchInt(move _104) -> [0: bb41, otherwise: bb61]
  using: _104@Mir(bb40[3])
bb41:
  _109 = ((*_2).3: *mut u32)
  using: _2@Phi(bb39)
  _111 = _4
  using: _4@Mir(bb40[0])
  _110 = move _111 as isize (IntToInt)
  using: _111@Mir(bb41[1])
  _108 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _109, move _110) -> bb42
  using: _109@Mir(bb41[0]), _110@Mir(bb41[2])
bb42:
  _107 = (*_108)
  using: _108@Mir(bb41[3])
  _113 = ((*_1).3: *mut u32)
  using: _1@Phi(bb39)
  _115 = _4
  using: _4@Mir(bb40[0])
  _114 = move _115 as isize (IntToInt)
  using: _115@Mir(bb42[2])
  _112 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _113, move _114) -> bb43
  using: _113@Mir(bb42[1]), _114@Mir(bb42[3])
bb43:
  (*_112) = BitXor((*_112), move _107)
  using: _112@Mir(bb42[4]), _112@Mir(bb42[4]), _107@Mir(bb42[0])
  goto -> bb39
  using: 
bb44:
  _117 = _5
  using: _5@Phi(bb39)
  _118 = ((*_2).1: u64)
  using: _2@Phi(bb39)
  _116 = Eq(move _117, move _118)
  using: _117@Mir(bb44[0]), _118@Mir(bb44[1])
  switchInt(move _116) -> [0: bb53, otherwise: bb45]
  using: _116@Mir(bb44[2])
bb45:
  _121 = ((*_1).3: *mut u32)
  using: _1@Phi(bb39)
  _120 = move _121 as *mut libc::c_void (PtrToPtr)
  using: _121@Mir(bb45[0])
  _123 = ((*_2).3: *mut u32)
  using: _2@Phi(bb39)
  _122 = move _123 as *const libc::c_void (PtrToPtr)
  using: _123@Mir(bb45[2])
  _125 = _5
  using: _5@Phi(bb39)
  _127 = std::mem::size_of::<u32>() -> bb46
  using: 
bb46:
  _126 = move _127 as u64 (IntToInt)
  using: _127@Mir(bb45[5])
  _124 = core::num::<impl u64>::wrapping_mul(move _125, move _126) -> bb47
  using: _125@Mir(bb45[4]), _126@Mir(bb46[0])
bb47:
  _119 = src::zxor::memcpy(move _120, move _122, move _124) -> bb48
  using: _120@Mir(bb45[1]), _122@Mir(bb45[3]), _124@Mir(bb46[1])
bb48:
  _128 = _4
  using: _4@Phi(bb48)
  _130 = _4
  using: _4@Phi(bb48)
  _129 = core::num::<impl u64>::wrapping_sub(move _130, const 1_u64) -> bb49
  using: _130@Mir(bb48[1])
bb49:
  _4 = move _129
  using: _129@Mir(bb48[2])
  _133 = _128
  using: _128@Mir(bb48[0])
  _132 = Ne(move _133, const 0_u64)
  using: _133@Mir(bb49[1])
  _131 = Not(move _132)
  using: _132@Mir(bb49[2])
  switchInt(move _131) -> [0: bb50, otherwise: bb61]
  using: _131@Mir(bb49[3])
bb50:
  _136 = ((*_3).3: *mut u32)
  using: _3@Phi(bb48)
  _138 = _4
  using: _4@Mir(bb49[0])
  _137 = move _138 as isize (IntToInt)
  using: _138@Mir(bb50[1])
  _135 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _136, move _137) -> bb51
  using: _136@Mir(bb50[0]), _137@Mir(bb50[2])
bb51:
  _134 = (*_135)
  using: _135@Mir(bb50[3])
  _140 = ((*_1).3: *mut u32)
  using: _1@Phi(bb48)
  _142 = _4
  using: _4@Mir(bb49[0])
  _141 = move _142 as isize (IntToInt)
  using: _142@Mir(bb51[2])
  _139 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _140, move _141) -> bb52
  using: _140@Mir(bb51[1]), _141@Mir(bb51[3])
bb52:
  (*_139) = BitXor((*_139), move _134)
  using: _139@Mir(bb51[4]), _139@Mir(bb51[4]), _134@Mir(bb51[0])
  goto -> bb48
  using: 
bb53:
  _145 = ((*_1).3: *mut u32)
  using: _1@Phi(bb48)
  _144 = move _145 as *mut libc::c_void (PtrToPtr)
  using: _145@Mir(bb53[0])
  _147 = ((*_3).3: *mut u32)
  using: _3@Phi(bb48)
  _146 = move _147 as *const libc::c_void (PtrToPtr)
  using: _147@Mir(bb53[2])
  _149 = _5
  using: _5@Phi(bb39)
  _151 = std::mem::size_of::<u32>() -> bb54
  using: 
bb54:
  _150 = move _151 as u64 (IntToInt)
  using: _151@Mir(bb53[5])
  _148 = core::num::<impl u64>::wrapping_mul(move _149, move _150) -> bb55
  using: _149@Mir(bb53[4]), _150@Mir(bb54[0])
bb55:
  _143 = src::zxor::memcpy(move _144, move _146, move _148) -> bb56
  using: _144@Mir(bb53[1]), _146@Mir(bb53[3]), _148@Mir(bb54[1])
bb56:
  _152 = _4
  using: _4@Phi(bb56)
  _154 = _4
  using: _4@Phi(bb56)
  _153 = core::num::<impl u64>::wrapping_sub(move _154, const 1_u64) -> bb57
  using: _154@Mir(bb56[1])
bb57:
  _4 = move _153
  using: _153@Mir(bb56[2])
  _157 = _152
  using: _152@Mir(bb56[0])
  _156 = Ne(move _157, const 0_u64)
  using: _157@Mir(bb57[1])
  _155 = Not(move _156)
  using: _156@Mir(bb57[2])
  switchInt(move _155) -> [0: bb58, otherwise: bb61]
  using: _155@Mir(bb57[3])
bb58:
  _160 = ((*_2).3: *mut u32)
  using: _2@Phi(bb56)
  _162 = _4
  using: _4@Mir(bb57[0])
  _161 = move _162 as isize (IntToInt)
  using: _162@Mir(bb58[1])
  _159 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _160, move _161) -> bb59
  using: _160@Mir(bb58[0]), _161@Mir(bb58[2])
bb59:
  _158 = (*_159)
  using: _159@Mir(bb58[3])
  _164 = ((*_1).3: *mut u32)
  using: _1@Phi(bb56)
  _166 = _4
  using: _4@Mir(bb57[0])
  _165 = move _166 as isize (IntToInt)
  using: _166@Mir(bb59[2])
  _163 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _164, move _165) -> bb60
  using: _164@Mir(bb59[1]), _165@Mir(bb59[3])
bb60:
  (*_163) = BitXor((*_163), move _158)
  using: _163@Mir(bb59[4]), _163@Mir(bb59[4]), _158@Mir(bb59[0])
  goto -> bb56
  using: 
bb61:
  _167 = _5
  using: _5@Phi(bb61)
  ((*_1).1: u64) = move _167
  using: _1@Phi(bb61), _167@Mir(bb61[0])
  goto -> bb62
  using: 
bb62:
  _169 = ((*_1).1: u64)
  using: _1@Phi(bb62)
  switchInt(move _169) -> [0: bb63, otherwise: bb64]
  using: _169@Mir(bb62[0])
bb63:
  _168 = const false
  using: 
  goto -> bb65
  using: 
bb64:
  _173 = ((*_1).3: *mut u32)
  using: _1@Phi(bb62)
  _176 = ((*_1).1: u64)
  using: _1@Phi(bb62)
  _177 = const 1_u64
  using: 
  _175 = core::num::<impl u64>::wrapping_sub(move _176, move _177) -> bb66
  using: _176@Mir(bb64[1]), _177@Mir(bb64[2])
bb65:
  switchInt(move _168) -> [0: bb70, otherwise: bb68]
  using: _168@Phi(bb65)
bb66:
  _174 = move _175 as isize (IntToInt)
  using: _175@Mir(bb64[3])
  _172 = std::ptr::mut_ptr::<impl *mut u32>::offset(move _173, move _174) -> bb67
  using: _173@Mir(bb64[0]), _174@Mir(bb66[0])
bb67:
  _171 = (*_172)
  using: _172@Mir(bb66[1])
  _170 = Eq(move _171, const 0_u32)
  using: _171@Mir(bb67[0])
  _168 = move _170
  using: _170@Mir(bb67[1])
  goto -> bb65
  using: 
bb68:
  _179 = ((*_1).1: u64)
  using: _1@Phi(bb65)
  _178 = core::num::<impl u64>::wrapping_sub(move _179, const 1_u64) -> bb69
  using: _179@Mir(bb68[0])
bb69:
  ((*_1).1: u64) = move _178
  using: _1@Phi(bb65), _178@Mir(bb68[1])
  goto -> bb62
  using: 
bb70:
  _180 = ((*_1).1: u64)
  using: _1@Phi(bb65)
  switchInt(move _180) -> [0: bb72, otherwise: bb71]
  using: _180@Mir(bb70[0])
bb71:
  _181 = const 1_i32
  using: 
  _183 = const 2_i32
  using: 
  _188 = _2
  using: _2@Phi(bb61)
  _187 = src::zxor::zsignum(move _188) -> bb73
  using: _188@Mir(bb71[2])
bb72:
  _194 = const 0_i32
  using: 
  ((*_1).0: i32) = move _194
  using: _1@Phi(bb65), _194@Mir(bb72[0])
  goto -> bb77
  using: 
bb73:
  _190 = _3
  using: _3@Phi(bb61)
  _189 = src::zxor::zsignum(move _190) -> bb74
  using: _190@Mir(bb73[0])
bb74:
  _186 = BitXor(move _187, move _189)
  using: _187@Mir(bb71[3]), _189@Mir(bb73[1])
  _191 = const 0_i32
  using: 
  _185 = Lt(move _186, move _191)
  using: _186@Mir(bb74[0]), _191@Mir(bb74[1])
  _184 = move _185 as i32 (IntToInt)
  using: _185@Mir(bb74[2])
  _192 = CheckedMul(_183, _184)
  using: _183@Mir(bb71[1]), _184@Mir(bb74[3])
  assert(!move (_192.1: bool), "attempt to compute `{} * {}`, which would overflow", move _183, move _184) -> bb75
  using: _192@Entry, _183@Entry, _184@Entry
bb75:
  _182 = move (_192.0: i32)
  using: _192@Mir(bb74[4])
  _193 = CheckedSub(_181, _182)
  using: _181@Mir(bb71[0]), _182@Mir(bb75[0])
  assert(!move (_193.1: bool), "attempt to compute `{} - {}`, which would overflow", move _181, move _182) -> bb76
  using: _193@Entry, _181@Entry, _182@Entry
bb76:
  ((*_1).0: i32) = move (_193.0: i32)
  using: _1@Phi(bb65), _193@Mir(bb75[1])
  goto -> bb77
  using: 
bb77:
  return
  using: _0@Entry
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libzahl/src/zxor.rs:50:21: 50:44 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:50:45: 50:60 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:57:30: 57:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:58:30: 58:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:60:22: 60:37 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zxor.rs:61:35: 61:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zxor.rs:61:22: 61:89 (#0) by default
rewrite call src::zxor::memcpy @ workspace/libzahl/src/zxor.rs:56:13: 62:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:66:19: 66:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:70:63: 70:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:70:27: 70:45 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:75:30: 75:48 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:76:30: 76:48 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:78:22: 78:37 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zxor.rs:79:35: 79:71 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zxor.rs:79:22: 79:89 (#0) by default
rewrite call src::zxor::memcpy @ workspace/libzahl/src/zxor.rs:74:13: 80:14 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:84:19: 84:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:88:63: 88:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:88:27: 88:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zxor.rs:94:28: 94:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zxor.rs:94:15: 94:82 (#0) by default
rewrite call src::zxor::memcpy @ workspace/libzahl/src/zxor.rs:91:9: 95:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:98:19: 98:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:102:63: 102:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:102:27: 102:45 (#0) by default
rewrite call std::mem::size_of @ workspace/libzahl/src/zxor.rs:108:28: 108:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_mul @ workspace/libzahl/src/zxor.rs:108:15: 108:82 (#0) by default
rewrite call src::zxor::memcpy @ workspace/libzahl/src/zxor.rs:105:9: 109:10 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:112:19: 112:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:116:63: 116:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:116:27: 116:45 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:122:33: 122:80 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libzahl/src/zxor.rs:122:14: 122:90 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libzahl/src/zxor.rs:125:33: 125:48 (#0) by default
use ::libc;
extern "C" {
    
    
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memmove(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX18;
impl Default for OrcGeneratedXXX18 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zlsh(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut bits: size_t,
) {
    let mut i: size_t = 0;
    let mut chars: size_t = 0;
    let mut cbits: size_t = 0;
    let mut carry: [zahl_char_t; 2] = [
        0 as libc::c_int as zahl_char_t,
        0 as libc::c_int as zahl_char_t,
    ];
    if zzero(b) != 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        return;
    }
    if bits == 0 {
        if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
            crate::src::zset::zset(a.as_deref_mut(), b);
        }
        return;
    }
    chars= bits >> 5 as libc::c_int;
    bits= bits & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    cbits= (32 as libc::c_int as libc::c_ulong).wrapping_sub(bits);
    if (*a.as_deref().unwrap()).alloced < (*b).used.wrapping_add(chars) {
        crate::src::allocator::libzahl_realloc(a.as_deref_mut(), (*b).used.wrapping_add(chars));
    }
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == b {
        memmove(
            (*a.as_deref().unwrap()).chars.offset(chars as isize) as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            (*b).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    } else {
        memcpy(
            (*a.as_deref().unwrap()).chars.offset(chars as isize) as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            (*b).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    }
    memset(
        (*a.as_deref().unwrap()).chars as *mut libc::c_void,
        0 as libc::c_int,
        chars.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
    );
    (*a.as_deref_mut().unwrap()).used= (*b).used.wrapping_add(chars);
    if bits != 0 {
        i= chars;
        while i < (*a.as_deref().unwrap()).used {
            carry[(!i & 1 as libc::c_int as libc::c_ulong)
                as usize] = *(*a.as_deref().unwrap()).chars.offset(i as isize) >> cbits;
            *(*a.as_deref().unwrap()).chars.offset(i as isize) <<= bits;
            *(*a.as_deref().unwrap()).chars.offset(i as isize) = carry[(i & 1 as libc::c_int as libc::c_ulong) as usize];
            i= i.wrapping_add(1);
        }
        if carry[(i & 1 as libc::c_int as libc::c_ulong) as usize] != 0 {
            if (*a.as_deref().unwrap()).alloced < (*a.as_deref().unwrap()).used.wrapping_add(1 as libc::c_int as libc::c_ulong)
            {
                crate::src::allocator::libzahl_realloc(
                    a.as_deref_mut(),
                    (*a.as_deref().unwrap()).used.wrapping_add(1 as libc::c_int as libc::c_ulong),
                );
            }
            *(*a.as_deref().unwrap()).chars
                .offset(
                    i as isize,
                ) = carry[(i & 1 as libc::c_int as libc::c_ulong) as usize];
            (*a.as_deref_mut().unwrap()).used= (*a.as_deref().unwrap()).used.wrapping_add(1);
        }
    }
    (*a.as_deref_mut().unwrap()).sign= zsignum(b);
}
use ::libc;
extern "C" {
    
    static mut libzahl_tmp_mod: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX19;
impl Default for OrcGeneratedXXX19 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zmod(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    crate::src::zdivmod::zdivmod(libzahl_tmp_mod.as_mut_ptr(), a, b, c);
}
use ::libc;
extern "C" {
    
    
    
    
    
    static mut libzahl_tmp_divmod_b: z_t;
    static mut libzahl_tmp_divmod_a: z_t;
    static mut libzahl_tmp_divmod_ds: [z_t; 32];
    
    
    static mut libzahl_tmp_divmod_d: z_t;
    
    
    
    static mut libzahl_jmp_buf: jmp_buf;
    static mut libzahl_error: libc::c_int;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX11;
impl Default for OrcGeneratedXXX11 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX12;
impl Default for OrcGeneratedXXX12 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX13;
impl Default for OrcGeneratedXXX13 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zdivmod(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
    mut d: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut c_bits: size_t = 0;
    let mut d_bits: size_t = 0;
    let mut bit: size_t = 0;
    let mut sign: libc::c_int = 0;
    let mut cmpmag: libc::c_int = 0;
    sign= zsignum(c) * zsignum(d);
    if sign == 0 {
        if zzero(c) != 0 {
            if zzero(d) != 0 {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            } else {
                (*a).sign= 0 as libc::c_int;
                (*b).sign= 0 as libc::c_int;
            }
        } else {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        }
        return;
    } else {
        cmpmag= crate::src::zcmpmag::zcmpmag(c, d);
        if cmpmag <= 0 as libc::c_int {
            if cmpmag == 0 as libc::c_int {
                crate::src::zseti::zseti(a.as_mut(), sign as libc::c_longlong);
                (*b).sign= 0 as libc::c_int;
                return;
            } else {
                if b != c {
                    crate::src::zset::zset(b.as_mut(), c);
                }
            }
            (*b).sign= 1 as libc::c_int;
            (*a).sign= 0 as libc::c_int;
            return;
        }
    }
    c_bits= crate::src::zbits::zbits(c.as_mut());
    d_bits= crate::src::zbits::zbits(d.as_mut());
    bit= c_bits.wrapping_sub(d_bits);
    crate::src::zlsh::zlsh(libzahl_tmp_divmod_d.as_mut_ptr().as_mut(), d, bit);
    (*libzahl_tmp_divmod_d.as_mut_ptr()).sign = 1 as libc::c_int;
    if crate::src::zcmpmag::zcmpmag(libzahl_tmp_divmod_d.as_mut_ptr(), c) > 0 as libc::c_int {
        crate::src::zrsh::zrsh(
            libzahl_tmp_divmod_d.as_mut_ptr(),
            libzahl_tmp_divmod_d.as_mut_ptr(),
            1 as libc::c_int as size_t,
        );
        bit= (bit as libc::c_ulong).wrapping_sub(1 as libc::c_int as libc::c_ulong)
            as size_t as size_t;
    }
    (*libzahl_tmp_divmod_a.as_mut_ptr()).sign = 0 as libc::c_int;
    crate::src::zabs::zabs(libzahl_tmp_divmod_b.as_mut_ptr().as_mut(), c);
    if bit < 32 as libc::c_int as libc::c_ulong {
        loop {
            if crate::src::zcmpmag::zcmpmag(
                libzahl_tmp_divmod_d.as_mut_ptr(),
                libzahl_tmp_divmod_b.as_mut_ptr(),
            ) <= 0 as libc::c_int
            {
                crate::src::zsub::zsub(
                    libzahl_tmp_divmod_b.as_mut_ptr(),
                    libzahl_tmp_divmod_b.as_mut_ptr(),
                    libzahl_tmp_divmod_d.as_mut_ptr(),
                );
                crate::src::zbset::zbset(
                    libzahl_tmp_divmod_a.as_mut_ptr().as_mut(),
                    libzahl_tmp_divmod_a.as_mut_ptr(),
                    bit,
                    1 as libc::c_int,
                );
            }
            let fresh0 = bit;
            bit= bit.wrapping_sub(1);
            if fresh0 == 0 || zzero(libzahl_tmp_divmod_b.as_mut_ptr()) != 0 {
                break;
            }
            crate::src::zrsh::zrsh(
                libzahl_tmp_divmod_d.as_mut_ptr(),
                libzahl_tmp_divmod_d.as_mut_ptr(),
                1 as libc::c_int as size_t,
            );
        }
    } else {
        let mut i: size_t = 0;
        i= 0 as libc::c_int as size_t;
        while i < 32 as libc::c_int as libc::c_ulong {
            crate::src::zrsh::zrsh(
                (libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr(),
                libzahl_tmp_divmod_d.as_mut_ptr(),
                i,
            );
            i= i.wrapping_add(1);
        }
        's_253: loop {
            i= 0 as libc::c_int as size_t;
            while i < 32 as libc::c_int as libc::c_ulong {
                if crate::src::zcmpmag::zcmpmag(
                    (libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr(),
                    libzahl_tmp_divmod_b.as_mut_ptr(),
                ) <= 0 as libc::c_int
                {
                    crate::src::zsub::zsub(
                        libzahl_tmp_divmod_b.as_mut_ptr(),
                        libzahl_tmp_divmod_b.as_mut_ptr(),
                        (libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr(),
                    );
                    crate::src::zbset::zbset(
                        libzahl_tmp_divmod_a.as_mut_ptr().as_mut(),
                        libzahl_tmp_divmod_a.as_mut_ptr(),
                        bit,
                        1 as libc::c_int,
                    );
                }
                let fresh1 = bit;
                bit= bit.wrapping_sub(1);
                if fresh1 == 0 || zzero(libzahl_tmp_divmod_b.as_mut_ptr()) != 0 {
                    break 's_253;
                }
                i= i.wrapping_add(1);
            }
            i= (if bit < (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong {
                bit
            } else {
                (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong
            })
                .wrapping_add(1 as libc::c_int as libc::c_ulong);
            loop {
                let fresh2 = i;
                i= i.wrapping_sub(1);
                if !(fresh2 != 0) {
                    break;
                }
                crate::src::zrsh::zrsh(
                    (libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr(),
                    (libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr(),
                    32 as libc::c_int as size_t,
                );
            }
        }
    }
    crate::src::zswap::zswap(a.as_mut(), libzahl_tmp_divmod_a.as_mut_ptr().as_mut());
    crate::src::zswap::zswap(b.as_mut(), libzahl_tmp_divmod_b.as_mut_ptr().as_mut());
    (*a).sign= sign;
}
use ::libc;
extern "C" {
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX47;
impl Default for OrcGeneratedXXX47 {fn default() -> Self {Self {
}}}

#[no_mangle]
pub unsafe extern "C" fn zsetu(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: libc::c_ulonglong) {
    if b == 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        return;
    }
    if (*a.as_deref().unwrap()).alloced
        < (::std::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
            .wrapping_add(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong)
    {
        crate::src::allocator::libzahl_realloc(
            a.as_deref_mut(),
            (::std::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
                .wrapping_add(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    }
    (*a.as_deref_mut().unwrap()).sign= 1 as libc::c_int;
    (*a.as_deref_mut().unwrap()).used= 0 as libc::c_int as size_t;
    while b != 0 {
        let fresh1 = (*a.as_deref().unwrap()).used;(*a.as_deref_mut().unwrap()).used= (*a.as_deref().unwrap()).used.wrapping_add(1);
        *(*a.as_deref().unwrap()).chars.offset(fresh1 as isize) = b as zahl_char_t;
        b>>= 32 as libc::c_int;
    }
}
use ::libc;
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX17;
impl Default for OrcGeneratedXXX17 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zlsb(mut a: *const crate::src::allocator::C2RustUnnamed) -> size_t {
    let mut i = 0 as libc::c_int as size_t;
    let mut x: zahl_char_t = 0;
    if zzero(a) != 0 {
        return 18446744073709551615 as libc::c_ulong;
    }
    loop {
        x= *(*a).chars.offset(i as isize);
        if x != 0 {
            x= !x;
            i= (i as libc::c_ulong).wrapping_mul(32 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
            while x & 1 as libc::c_int as libc::c_uint != 0 {
                x>>= 1 as libc::c_int;
                i= i.wrapping_add(1);
            }
            return i;
        }
        i= i.wrapping_add(1);
    };
}
use ::libc;
extern "C" {
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
    
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    static mut libzahl_tmp_str_rem: z_t;
    static mut libzahl_tmp_str_num: z_t;
    static mut libzahl_const_1e9: z_t;
    static mut libzahl_jmp_buf: jmp_buf;
    fn __errno_location() -> *mut libc::c_int;
    static mut libzahl_error: libc::c_int;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    
    fn sprintf(_: *mut libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX53;
impl Default for OrcGeneratedXXX53 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX54;
impl Default for OrcGeneratedXXX54 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX55;
impl Default for OrcGeneratedXXX55 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zstr(
    mut a: *const crate::src::allocator::C2RustUnnamed,
    mut b: *mut libc::c_char,
) -> *const libc::c_char {
    let mut buf: [libc::c_char; 10] = [0; 10];
    let mut n: size_t = 0;
    let mut len: size_t = 0;
    let mut overridden = 0 as libc::c_int as libc::c_char;
    let mut neg: libc::c_int = 0;
    if zzero(a) != 0 {
        if b.is_null() {();
            b= malloc(2 as libc::c_int as libc::c_ulong) as *mut libc::c_char;
            if b.is_null() {();
                libzahl_error = *__errno_location();
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            }
        }
        *b.offset(0 as libc::c_int as isize) = '0' as i32 as libc::c_char;
        *b.offset(1 as libc::c_int as isize) = 0 as libc::c_int as libc::c_char;
        return b;
    }
    n= crate::src::zstr_length::zstr_length(a, 10 as libc::c_int as libc::c_ulonglong);
    if b.is_null() {();
        b= malloc(n.wrapping_add(1 as libc::c_int as libc::c_ulong))
            as *mut libc::c_char;
        if b.is_null() {();
            libzahl_error = *__errno_location();
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        }
    }
    neg= (zsignum(a) < 0 as libc::c_int) as libc::c_int;
    crate::src::zabs::zabs(libzahl_tmp_str_num.as_mut_ptr().as_mut(), a);
    *b.offset(0 as libc::c_int as isize) = '-' as i32 as libc::c_char;
    b= b.offset(neg as isize);
    n= (n as libc::c_ulong).wrapping_sub(neg as libc::c_ulong) as size_t as size_t;
    n= if n > 9 as libc::c_int as libc::c_ulong {
        n.wrapping_sub(9 as libc::c_int as libc::c_ulong)
    } else {
        0 as libc::c_int as libc::c_ulong
    };
    loop {
        crate::src::zdivmod::zdivmod(
            libzahl_tmp_str_num.as_mut_ptr(),
            libzahl_tmp_str_rem.as_mut_ptr(),
            libzahl_tmp_str_num.as_mut_ptr(),
            libzahl_const_1e9.as_mut_ptr(),
        );
        if zzero(libzahl_tmp_str_num.as_mut_ptr()) == 0 {
            sprintf(
                b.offset(n as isize),
                b"%09lu\0" as *const u8 as *const libc::c_char,
                if zzero(libzahl_tmp_str_rem.as_mut_ptr()) != 0 {
                    0 as libc::c_ulong
                } else {
                    *((*libzahl_tmp_str_rem.as_mut_ptr()).chars)
                        .offset(0 as libc::c_int as isize) as libc::c_ulong
                },
            );
            *b
                .offset(
                    n.wrapping_add(9 as libc::c_int as libc::c_ulong) as isize,
                ) = overridden;
            overridden= *b.offset(n as isize);
            n= if n > 9 as libc::c_int as libc::c_ulong {
                n.wrapping_sub(9 as libc::c_int as libc::c_ulong)
            } else {
                0 as libc::c_int as libc::c_ulong
            };
        } else {
            len= sprintf(
                buf.as_mut_ptr(),
                b"%lu\0" as *const u8 as *const libc::c_char,
                *((*libzahl_tmp_str_rem.as_mut_ptr()).chars)
                    .offset(0 as libc::c_int as isize) as libc::c_ulong,
            ) as size_t;
            if overridden != 0 {
                buf[len as usize] = *b.offset(n.wrapping_add(len) as isize);
            }
            memcpy(
                b.offset(n as isize) as *mut libc::c_void,
                buf.as_mut_ptr() as *const libc::c_void,
                len.wrapping_add(1 as libc::c_int as libc::c_ulong),
            );
            break;
        }
    }
    return b.offset(-(neg as isize));
}
use ::libc;
extern "C" {
    
    
    static mut libzahl_tmp_sub: z_t;
    
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX57;
impl Default for OrcGeneratedXXX57 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zsub_unsigned(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut carry: [zahl_char_t; 2] = [
        0 as libc::c_int as zahl_char_t,
        0 as libc::c_int as zahl_char_t,
    ];
    let mut s = 0 as *mut zahl_char_t;
    let mut i: size_t = 0;
    let mut n: size_t = 0;
    let mut magcmp: libc::c_int = 0;
    if zzero(b) != 0 {
        crate::src::zabs::zabs(a.as_mut(), c);
        crate::src::zneg::zneg(a.as_mut(), a);
        return;
    } else {
        if zzero(c) != 0 {
            crate::src::zabs::zabs(a.as_mut(), b);
            return;
        }
    }
    magcmp= crate::src::zcmpmag::zcmpmag(b, c);
    if magcmp <= 0 as libc::c_int {
        if magcmp == 0 as libc::c_int {
            (*a).sign= 0 as libc::c_int;
            return;
        }
        n= if (*b).used < (*c).used { (*b).used } else { (*c).used };
        if a == b {
            crate::src::zset::zset(libzahl_tmp_sub.as_mut_ptr().as_mut(), b);
            s= (*libzahl_tmp_sub.as_mut_ptr()).chars;
        } else {
            s= (*b).chars;
        }
        if a != c {
            crate::src::zset::zset(a.as_mut(), c);
        }
    } else {
        n= if (*b).used < (*c).used { (*b).used } else { (*c).used };
        if a == c {
            crate::src::zset::zset(libzahl_tmp_sub.as_mut_ptr().as_mut(), c);
            s= (*libzahl_tmp_sub.as_mut_ptr()).chars;
        } else {
            s= (*c).chars;
        }
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
    }
    i= 0 as libc::c_int as size_t;
    while i < n {
        carry[(!i & 1 as libc::c_int as libc::c_ulong)
            as usize] = (if carry[(i & 1 as libc::c_int as libc::c_ulong) as usize] != 0
        {
            (*(*a).chars.offset(i as isize) <= *s.offset(i as isize)) as libc::c_int
        } else {
            (*(*a).chars.offset(i as isize) < *s.offset(i as isize)) as libc::c_int
        }) as zahl_char_t;
        *(*a).chars.offset(i as isize) = (*(*a).chars.offset(i as isize) as libc::c_uint).wrapping_sub(*s.offset(i as isize))
            as zahl_char_t as zahl_char_t;
        *(*a).chars.offset(i as isize) = (*(*a).chars.offset(i as isize) as libc::c_uint)
            .wrapping_sub(carry[(i & 1 as libc::c_int as libc::c_ulong) as usize])
            as zahl_char_t as zahl_char_t;
        i= i.wrapping_add(1);
    }
    if carry[(i & 1 as libc::c_int as libc::c_ulong) as usize] != 0 {
        while *(*a).chars.offset(i as isize) == 0 {
            let fresh2 = i;
            i= i.wrapping_add(1);
            *(*a).chars.offset(fresh2 as isize) = 4294967295 as libc::c_uint;
        }
        *(*a).chars.offset(i as isize) = (*(*a).chars.offset(i as isize) as libc::c_uint)
            .wrapping_sub(1 as libc::c_int as libc::c_uint) as zahl_char_t
            as zahl_char_t;
    }
    (*a).sign= magcmp;
}
#[no_mangle]
pub unsafe extern "C" fn zsub(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    if b == c {
        (*a).sign= 0 as libc::c_int;
    } else if zzero(b) != 0 {
        crate::src::zneg::zneg(a.as_mut(), c);
    } else if zzero(c) != 0 {
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
    } else if zsignum(b) | zsignum(c) < 0 as libc::c_int {
        if zsignum(b) < 0 as libc::c_int {
            if zsignum(c) < 0 as libc::c_int {
                zsub_unsigned(a, c, b);
            } else {
                crate::src::zadd::zadd_unsigned(a.as_mut(), b, c);
                (*a).sign= -zsignum(a);
            }
        } else {
            crate::src::zadd::zadd_unsigned(a.as_mut(), b, c);
        }
    } else {
        zsub_unsigned(a, b, c);
    };
}
use ::libc;
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX58;
impl Default for OrcGeneratedXXX58 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zswap(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: Option<&mut crate::src::allocator::C2RustUnnamed>) {
    // let mut t = &mut crate::src::allocator::C2RustUnnamed {
    //     sign: 0,
    //     used: 0,
    //     alloced: 0,
    //     chars: 0 as *mut zahl_char_t,
    // };
    // *t = *a;
    // *a = *b;
    // *b = *t;
    let mut t: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    *t.as_mut_ptr() = *a;
    *a.as_deref_mut().unwrap()= (*b.as_deref().unwrap());
    *b.as_deref_mut().unwrap()= *t.as_mut_ptr();
}
use ::libc;
extern "C" {
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    static mut libzahl_error: libc::c_int;
    fn abort() -> !;
    fn __errno_location() -> *mut libc::c_int;
}
pub type zerror = libc::c_uint;
pub const ZERROR_ERRNO_SET: zerror = 0;
#[no_mangle]
pub unsafe extern "C" fn zerror(mut desc: Option<&mut *const libc::c_char>) -> zerror {
    if libzahl_error >= 0 as libc::c_int {
        if !desc.as_deref().is_none() {
            *desc.as_deref_mut().unwrap()= strerror(libzahl_error);
        }else { (); }
        *__errno_location() = libzahl_error;
        return ZERROR_ERRNO_SET;
    } else {
        if !desc.as_deref().is_none() {
            abort();
        }else { (); }
        return -libzahl_error as zerror;
    };
}
use ::libc;
extern "C" {
    fn abort() -> !;
    static mut libzahl_error: libc::c_int;
    fn __errno_location() -> *mut libc::c_int;
    fn perror(__s: *const libc::c_char);
}
#[no_mangle]
pub unsafe extern "C" fn zperror(mut prefix: *const libc::c_char) {
    if libzahl_error >= 0 as libc::c_int {
        *__errno_location() = libzahl_error;
        perror(prefix);
    } else {
        abort();
    };
}
use ::libc;
extern "C" {
    static mut libzahl_pool: [*mut *mut zahl_char_t; 64];
    static mut libzahl_pool_alloc: [size_t; 64];
    static mut libzahl_pool_n: [size_t; 64];
    fn free(__ptr: *mut libc::c_void);
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX14;
impl Default for OrcGeneratedXXX14 {fn default() -> Self {Self {
}}}

#[no_mangle]
pub unsafe extern "C" fn zfree(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>) {
    let mut i = 0 as libc::c_int as size_t;
    let mut x: size_t = 0;
    let mut j: size_t = 0;
    let mut new = 0 as *mut *mut zahl_char_t;
    if (*a.as_deref().unwrap()).chars.is_null() {();
        return;
    }
    x= (*a.as_deref().unwrap()).alloced;
    while x != 0 {
        i= (i as libc::c_ulong).wrapping_add(1 as libc::c_int as libc::c_ulong)
            as size_t as size_t;
        x>>= 1 as libc::c_int;
    }
    let fresh0 = libzahl_pool_n[i as usize];
    libzahl_pool_n[i as usize] = (libzahl_pool_n[i as usize]).wrapping_add(1);
    j= fresh0;
    if j == libzahl_pool_alloc[i as usize] {
        x= if j != 0 {
            j.wrapping_mul(3 as libc::c_int as libc::c_ulong) >> 1 as libc::c_int
        } else {
            128 as libc::c_int as libc::c_ulong
        };
        new= realloc(
            libzahl_pool[i as usize] as *mut libc::c_void,
            x.wrapping_mul(::std::mem::size_of::<*mut zahl_char_t>() as libc::c_ulong),
        ) as *mut *mut zahl_char_t;
        if new.is_null() {();
            free((*a.as_deref().unwrap()).chars as *mut libc::c_void);
            ();
            libzahl_pool_n[i as usize] = 0 as libc::c_int as size_t;
            libzahl_pool[i as usize] = 0 as *mut *mut zahl_char_t;
            libzahl_pool_alloc[i as usize] = 0 as libc::c_int as size_t;
            return;
        }
        libzahl_pool[i as usize] = new;
        libzahl_pool_alloc[i as usize] = x;
    }
    *(libzahl_pool[i as usize]).offset(j as isize) = (*a).chars;
}
use ::libc;
extern "C" {
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX30;
impl Default for OrcGeneratedXXX30 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn znot(mut a: *mut crate::src::allocator::C2RustUnnamed, mut b: *mut crate::src::allocator::C2RustUnnamed) {
    let mut bits: size_t = 0;
    let mut n: size_t = 0;
    if zzero(b) != 0 {
        (*a).sign= 0 as libc::c_int;
        return;
    }
    bits= crate::src::zbits::zbits(b.as_mut());
    if a != b {
        crate::src::zset::zset(a.as_mut(), b);
    }
    (*a).sign= -zsignum(a);
    n= (*a).used;
    loop {
        let fresh0 = n;
        n= n.wrapping_sub(1);
        if !(fresh0 != 0) {
            break;
        }
        *(*a).chars.offset(n as isize) = !*(*a).chars.offset(n as isize);
    }
    bits= bits & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    if bits != 0 {
        *(*a).chars
            .offset(
                (*a).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
            ) &= ((1 as libc::c_int as zahl_char_t) << bits)
                .wrapping_sub(1 as libc::c_int as libc::c_uint);
    }
    while (*a).used != 0
        && *(*a).chars
            .offset((*a).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
            == 0
    {
        (*a).used= (*a).used.wrapping_sub(1);
    }
    if (*a).used == 0 {
        (*a).sign= 0 as libc::c_int;
    }
}
use ::libc;
extern "C" {
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX51;
impl Default for OrcGeneratedXXX51 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zsplit(
    mut high: *mut crate::src::allocator::C2RustUnnamed,
    mut low: *mut crate::src::allocator::C2RustUnnamed,
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut delim: size_t,
) {
    if zzero(a) != 0 {
        (*high).sign= 0 as libc::c_int;
        (*low).sign= 0 as libc::c_int;
        return;
    }
    if high == a {
        crate::src::ztrunc::ztrunc(low.as_mut(), a, delim);
        crate::src::zrsh::zrsh(high, a, delim);
    } else {
        crate::src::zrsh::zrsh(high, a, delim);
        crate::src::ztrunc::ztrunc(low.as_mut(), a, delim);
    };
}
use ::libc;
extern "C" {
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX45;
impl Default for OrcGeneratedXXX45 {fn default() -> Self {Self {
}}}

#[no_mangle]
pub unsafe extern "C" fn zseti(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: libc::c_longlong) {
    if b >= 0 as libc::c_int as libc::c_longlong {
        crate::src::zsetu::zsetu(a.as_deref_mut(), b as libc::c_ulonglong);
    } else {
        crate::src::zsetu::zsetu(a.as_deref_mut(), -b as libc::c_ulonglong);
        (*a.as_deref_mut().unwrap()).sign= -(1 as libc::c_int);
    };
}
use ::libc;
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX3;
impl Default for OrcGeneratedXXX3 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zbits(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>) -> size_t {
    let mut i: size_t = 0;
    let mut x: zahl_char_t = 0;
    if zzero(core::mem::transmute::<_, *const crate::src::allocator::C2RustUnnamed>(a.as_deref())) != 0 {
        return 1 as libc::c_int as size_t;
    }
    i= (*a.as_deref().unwrap()).used.wrapping_sub(1 as libc::c_int as libc::c_ulong);
    loop {
        x= *(*a.as_deref().unwrap()).chars.offset(i as isize);
        if x != 0 {
            (*a.as_deref_mut().unwrap()).used= i.wrapping_add(1 as libc::c_int as libc::c_ulong);
            i= (i as libc::c_ulong).wrapping_mul(32 as libc::c_int as libc::c_ulong)
                as size_t as size_t;
            while x != 0 {
                x>>= 1 as libc::c_int;
                i= i.wrapping_add(1);
            }
            return i;
        }
        i= i.wrapping_sub(1);
    };
}
use ::libc;
extern "C" {
    
    
    
    static mut libzahl_tmp_modmul: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX20;
impl Default for OrcGeneratedXXX20 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zmodmul(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
    mut d: *mut crate::src::allocator::C2RustUnnamed,
) {
    if a == d {
        crate::src::zset::zset(libzahl_tmp_modmul.as_mut_ptr().as_mut(), d);
        crate::src::zmul::zmul(a, b, c);
        crate::src::zmod::zmod(a, a, libzahl_tmp_modmul.as_mut_ptr());
    } else {
        crate::src::zmul::zmul(a, b, c);
        crate::src::zmod::zmod(a, a, d);
    };
}
use ::libc;
extern "C" {
    
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX4;
impl Default for OrcGeneratedXXX4 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zbset(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut bit: size_t,
    mut action: libc::c_int,
) {
    let mut mask = 1 as libc::c_int as zahl_char_t;
    let mut chars: size_t = 0;
    chars= bit >> 5 as libc::c_int;
    bit= bit & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    mask<<= bit;
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
        crate::src::zset::zset(a.as_deref_mut(), b);
    }
    if action != 0 {
        if zzero(core::mem::transmute::<_, *const crate::src::allocator::C2RustUnnamed>(a.as_deref())) != 0 {
            (*a.as_deref_mut().unwrap()).used= 0 as libc::c_int as size_t;
            (*a.as_deref_mut().unwrap()).sign= 1 as libc::c_int;
        }
        if (*a.as_deref().unwrap()).used <= chars {
            if (*a.as_deref().unwrap()).alloced < chars.wrapping_add(1 as libc::c_int as libc::c_ulong) {
                crate::src::allocator::libzahl_realloc(
                    a.as_deref_mut(),
                    chars.wrapping_add(1 as libc::c_int as libc::c_ulong),
                );
            }
            memset(
                (*a.as_deref().unwrap()).chars.offset((*a.as_deref().unwrap()).used as isize) as *mut libc::c_void,
                0 as libc::c_int,
                chars
                    .wrapping_add(1 as libc::c_int as libc::c_ulong)
                    .wrapping_sub((*a.as_deref().unwrap()).used)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
            (*a.as_deref_mut().unwrap()).used= chars.wrapping_add(1 as libc::c_int as libc::c_ulong);
        }
    }
    if action > 0 as libc::c_int {
        *(*a.as_deref().unwrap()).chars.offset(chars as isize) = mask;
        return;
    } else {
        if action < 0 as libc::c_int {
            *(*a.as_deref().unwrap()).chars.offset(chars as isize) ^= mask;
        } else if chars < (*a.as_deref().unwrap()).used {
            *(*a.as_deref().unwrap()).chars.offset(chars as isize) &= !mask;
        }
    }
    while (*a.as_deref().unwrap()).used != 0
        && *(*a.as_deref().unwrap()).chars
            .offset((*a.as_deref().unwrap()).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
            == 0
    {
        (*a.as_deref_mut().unwrap()).used= (*a.as_deref().unwrap()).used.wrapping_sub(1);
    }
    if (*a.as_deref().unwrap()).used == 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
    }
}
use ::libc;
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX5;
impl Default for OrcGeneratedXXX5 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zbtest(
    mut a: *const crate::src::allocator::C2RustUnnamed,
    mut bit: size_t,
) -> libc::c_int {
    let mut chars: size_t = 0;
    if zzero(a) != 0 {
        return 0 as libc::c_int;
    }
    chars= bit >> 5 as libc::c_int;
    if chars >= (*a).used {
        return 0 as libc::c_int;
    }
    bit= bit & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    return (*(*a).chars.offset(chars as isize) >> bit
        & 1 as libc::c_int as libc::c_uint) as libc::c_int;
}
use ::libc;
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX8;
impl Default for OrcGeneratedXXX8 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zcmpmag(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
) -> libc::c_int {
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    if zzero(a) != 0 {
        return -((zzero(b) == 0) as libc::c_int);
    }
    if zzero(b) != 0 {
        return 1 as libc::c_int;
    }
    i= (*a).used.wrapping_sub(1 as libc::c_int as libc::c_ulong);
    j= (*b).used.wrapping_sub(1 as libc::c_int as libc::c_ulong);
    while i > j {
        if *(*a).chars.offset(i as isize) != 0 {
            return 1 as libc::c_int;
        }
        (*a).used= (*a).used.wrapping_sub(1);
        i= i.wrapping_sub(1);
    }
    while j > i {
        if *(*b).chars.offset(j as isize) != 0 {
            return -(1 as libc::c_int);
        }
        (*b).used= (*b).used.wrapping_sub(1);
        j= j.wrapping_sub(1);
    }
    while i != 0 {
        if *(*a).chars.offset(i as isize) != *(*b).chars.offset(i as isize) {
            return (*(*a).chars.offset(i as isize) > *(*b).chars.offset(i as isize))
                as libc::c_int * 2 as libc::c_int - 1 as libc::c_int;
        }
        i= i.wrapping_sub(1);
    }
    return if *(*a).chars.offset(0 as libc::c_int as isize)
        < *(*b).chars.offset(0 as libc::c_int as isize)
    {
        -(1 as libc::c_int)
    } else {
        (*(*a).chars.offset(0 as libc::c_int as isize)
            > *(*b).chars.offset(0 as libc::c_int as isize)) as libc::c_int
    };
}
use ::libc;
extern "C" {
    
    
    
    
    
    
    
    
    
    static mut libzahl_tmp_gcd_u: z_t;
    static mut libzahl_tmp_gcd_v: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX15;
impl Default for OrcGeneratedXXX15 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zgcd(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut current_block: u64;
    let mut shifts = 0 as libc::c_int as size_t;
    let mut i = 0 as libc::c_int as size_t;
    let mut min: size_t = 0;
    let mut uv: zahl_char_t = 0;
    let mut bit: zahl_char_t = 0;
    let mut neg: libc::c_int = 0;
    if crate::src::zcmp::zcmp(b, c) == 0 {
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
        return;
    }
    if zzero(b) != 0 {
        if a != c {
            crate::src::zset::zset(a.as_mut(), c);
        }
        return;
    }
    if zzero(c) != 0 {
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
        return;
    }
    crate::src::zabs::zabs(libzahl_tmp_gcd_u.as_mut_ptr().as_mut(), b);
    crate::src::zabs::zabs(libzahl_tmp_gcd_v.as_mut_ptr().as_mut(), c);
    neg= (zsignum(b) < 0 as libc::c_int && zsignum(c) < 0 as libc::c_int)
        as libc::c_int;
    min= if (*libzahl_tmp_gcd_u.as_mut_ptr()).used
        < (*libzahl_tmp_gcd_v.as_mut_ptr()).used
    {
        (*libzahl_tmp_gcd_u.as_mut_ptr()).used
    } else {
        (*libzahl_tmp_gcd_v.as_mut_ptr()).used
    };
    's_124: loop {
        if !(i < min) {
            current_block= 11459959175219260272;
            break;
        }
        uv= *((*libzahl_tmp_gcd_u.as_mut_ptr()).chars).offset(i as isize)
            | *((*libzahl_tmp_gcd_v.as_mut_ptr()).chars).offset(i as isize);
        bit= 1 as libc::c_int as zahl_char_t;
        while bit != 0 {
            if uv & bit != 0 {
                current_block= 4217392055787675399;
                break 's_124;
            }
            bit<<= 1 as libc::c_int;
            shifts= shifts.wrapping_add(1);
        }
        i= i.wrapping_add(1);
    }
    's_155: loop {
        match current_block {
            4217392055787675399 => {
                crate::src::zrsh::zrsh(
                    libzahl_tmp_gcd_u.as_mut_ptr(),
                    libzahl_tmp_gcd_u.as_mut_ptr(),
                    shifts,
                );
                break;
            }
            _ => {
                if i < (*libzahl_tmp_gcd_u.as_mut_ptr()).used {
                    bit= 1 as libc::c_int as zahl_char_t;
                    while bit != 0 {
                        if *((*libzahl_tmp_gcd_u.as_mut_ptr()).chars).offset(i as isize)
                            & bit != 0
                        {
                            current_block= 4217392055787675399;
                            continue 's_155;
                        }
                        bit<<= 1 as libc::c_int;
                        shifts= shifts.wrapping_add(1);
                    }
                    i= i.wrapping_add(1);
                    current_block= 11459959175219260272;
                } else {
                    's_178: loop {
                        if !(i < (*libzahl_tmp_gcd_v.as_mut_ptr()).used) {
                            current_block= 4217392055787675399;
                            break;
                        }
                        bit= 1 as libc::c_int as zahl_char_t;
                        while bit != 0 {
                            if *((*libzahl_tmp_gcd_v.as_mut_ptr()).chars)
                                .offset(i as isize) & bit != 0
                            {
                                current_block= 4217392055787675399;
                                break 's_178;
                            }
                            bit<<= 1 as libc::c_int;
                            shifts= shifts.wrapping_add(1);
                        }
                        i= i.wrapping_add(1);
                    }
                }
            }
        }
    }
    crate::src::zrsh::zrsh(libzahl_tmp_gcd_v.as_mut_ptr(), libzahl_tmp_gcd_v.as_mut_ptr(), shifts);
    crate::src::zrsh::zrsh(
        libzahl_tmp_gcd_u.as_mut_ptr(),
        libzahl_tmp_gcd_u.as_mut_ptr(),
        crate::src::zlsb::zlsb(libzahl_tmp_gcd_u.as_mut_ptr()),
    );
    loop {
        crate::src::zrsh::zrsh(
            libzahl_tmp_gcd_v.as_mut_ptr(),
            libzahl_tmp_gcd_v.as_mut_ptr(),
            crate::src::zlsb::zlsb(libzahl_tmp_gcd_v.as_mut_ptr()),
        );
        if crate::src::zcmpmag::zcmpmag(libzahl_tmp_gcd_u.as_mut_ptr(), libzahl_tmp_gcd_v.as_mut_ptr())
            > 0 as libc::c_int
        {
            crate::src::zswap::zswap(libzahl_tmp_gcd_u.as_mut_ptr().as_mut(), libzahl_tmp_gcd_v.as_mut_ptr());
        }
        crate::src::zsub::zsub_unsigned(
            libzahl_tmp_gcd_v.as_mut_ptr(),
            libzahl_tmp_gcd_v.as_mut_ptr(),
            libzahl_tmp_gcd_u.as_mut_ptr(),
        );
        if !(zzero(libzahl_tmp_gcd_v.as_mut_ptr()) == 0) {
            break;
        }
    }
    crate::src::zlsh::zlsh(a.as_mut(), libzahl_tmp_gcd_u.as_mut_ptr(), shifts);
    (*a).sign= if neg != 0 { -(1 as libc::c_int) } else { 1 as libc::c_int };
}
use ::libc;
extern "C" {
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX59;
impl Default for OrcGeneratedXXX59 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn ztrunc(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut bits: size_t,
) {
    let mut mask = 1 as libc::c_int as zahl_char_t;
    let mut chars: size_t = 0;
    let mut i: size_t = 0;
    if zzero(b) != 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        return;
    }
    chars= bits.wrapping_add((32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong)
        >> 5 as libc::c_int;
    (*a.as_deref_mut().unwrap()).sign= (*b).sign;
    (*a.as_deref_mut().unwrap()).used= if chars < (*b).used { chars } else { (*b).used };
    if (*a.as_deref().unwrap()).used < chars {
        bits= 0 as libc::c_int as size_t;
    }
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
        if (*a.as_deref().unwrap()).alloced < (*a.as_deref().unwrap()).used {
            crate::src::allocator::libzahl_realloc(a.as_deref_mut(), (*a.as_deref().unwrap()).used);
        }
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            (*a.as_deref().unwrap()).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    }
    bits= bits & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    if bits != 0 {
        mask<<= bits;
        mask= (mask as libc::c_uint).wrapping_sub(1 as libc::c_int as libc::c_uint)
            as zahl_char_t as zahl_char_t;
        *(*a.as_deref().unwrap()).chars
            .offset(
                (*a.as_deref().unwrap()).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
            ) &= mask;
    }
    i= (*a.as_deref().unwrap()).used;
    loop {
        let fresh1 = i;
        i= i.wrapping_sub(1);
        if !(fresh1 != 0) {
            break;
        }
        if *(*a.as_deref().unwrap()).chars.offset(i as isize) != 0 {
            return;
        }
    }
    (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
}
use ::libc;
extern "C" {
    
    
    static mut libzahl_tmp_cmp: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX7;
impl Default for OrcGeneratedXXX7 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zcmpi(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: libc::c_longlong,
) -> libc::c_int {
    if b == 0 {
        return zsignum(a);
    }
    if zzero(a) != 0 {
        return if b > 0 as libc::c_int as libc::c_longlong {
            -(1 as libc::c_int)
        } else {
            (b < 0 as libc::c_int as libc::c_longlong) as libc::c_int
        };
    }
    crate::src::zseti::zseti(libzahl_tmp_cmp.as_mut_ptr().as_mut(), b);
    return crate::src::zcmp::zcmp(a, libzahl_tmp_cmp.as_mut_ptr());
}
use ::libc;
extern "C" {
    
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX48;
impl Default for OrcGeneratedXXX48 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX49;
impl Default for OrcGeneratedXXX49 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX50;
impl Default for OrcGeneratedXXX50 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zinit(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>) {
    (*a.as_deref_mut().unwrap()).alloced= 0 as libc::c_int as size_t;
    (*a.as_deref_mut().unwrap()).chars= 0 as *mut zahl_char_t;
}
#[no_mangle]
pub static mut libzahl_tmp_modmul: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_pow_d: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_div: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_str_num: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_ptest_n4: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_pow_b: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_cmp: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_str_mag: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_pow_c: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_str_div: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_str_rem: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_gcd_u: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_gcd_v: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_sub: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_mod: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_ptest_d: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_ptest_a: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_ptest_x: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_divmod_d: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_ptest_n1: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_modsqr: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_divmod_a: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_divmod_b: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_const_1e9: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_const_1e19: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_const_1: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_const_2: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_const_4: z_t = [crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1];
#[no_mangle]
pub static mut libzahl_tmp_divmod_ds: [z_t; 32] = [[crate::src::allocator::C2RustUnnamed {
    sign: 0,
    used: 0,
    alloced: 0,
    chars: 0 as *const zahl_char_t as *mut zahl_char_t,
}; 1]; 32];
#[no_mangle]
pub static mut libzahl_jmp_buf: jmp_buf = [crate::src::allocator::__jmp_buf_tag {
    __jmpbuf: [0; 8],
    __mask_was_saved: 0,
    __saved_mask: crate::src::allocator::__sigset_t { __val: [0; 16] },
}; 1];
#[no_mangle]
pub static mut libzahl_set_up: libc::c_int = 0 as libc::c_int;
#[no_mangle]
pub static mut libzahl_error: libc::c_int = 0;
#[no_mangle]
pub static mut libzahl_pool: [*mut *mut zahl_char_t; 64] = [0 as *const *mut zahl_char_t
    as *mut *mut zahl_char_t; 64];
#[no_mangle]
pub static mut libzahl_pool_n: [size_t; 64] = [0; 64];
#[no_mangle]
pub static mut libzahl_pool_alloc: [size_t; 64] = [0; 64];
#[no_mangle]
pub unsafe extern "C" fn zsetup(mut env: *const crate::src::allocator::__jmp_buf_tag) {
    let mut i: size_t = 0;
    *libzahl_jmp_buf.as_mut_ptr() = *env;
    if libzahl_set_up == 0 {
        libzahl_set_up = 1 as libc::c_int;
        memset(
            libzahl_pool.as_mut_ptr() as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<[*mut *mut zahl_char_t; 64]>() as libc::c_ulong,
        );
        memset(
            libzahl_pool_n.as_mut_ptr() as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<[size_t; 64]>() as libc::c_ulong,
        );
        memset(
            libzahl_pool_alloc.as_mut_ptr() as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<[size_t; 64]>() as libc::c_ulong,
        );
        zinit(libzahl_tmp_cmp.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_str_num.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_str_mag.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_str_div.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_str_rem.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_gcd_u.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_gcd_v.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_sub.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_modmul.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_div.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_mod.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_pow_b.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_pow_c.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_pow_d.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_modsqr.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_divmod_a.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_divmod_b.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_divmod_d.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_ptest_x.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_ptest_a.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_ptest_d.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_ptest_n1.as_mut_ptr().as_mut());
        zinit(libzahl_tmp_ptest_n4.as_mut_ptr().as_mut());
        zinit(libzahl_const_1e19.as_mut_ptr().as_mut());
        crate::src::zsetu::zsetu(
            libzahl_const_1e19.as_mut_ptr().as_mut(),
            10000000000000000000 as libc::c_ulonglong,
        );
        zinit(libzahl_const_1e9.as_mut_ptr().as_mut());
        crate::src::zsetu::zsetu(libzahl_const_1e9.as_mut_ptr().as_mut(), 1000000000 as libc::c_ulonglong);
        zinit(libzahl_const_1.as_mut_ptr().as_mut());
        crate::src::zsetu::zsetu(libzahl_const_1.as_mut_ptr().as_mut(), 1 as libc::c_int as libc::c_ulonglong);
        zinit(libzahl_const_2.as_mut_ptr().as_mut());
        crate::src::zsetu::zsetu(libzahl_const_2.as_mut_ptr().as_mut(), 2 as libc::c_int as libc::c_ulonglong);
        zinit(libzahl_const_4.as_mut_ptr().as_mut());
        crate::src::zsetu::zsetu(libzahl_const_4.as_mut_ptr().as_mut(), 4 as libc::c_int as libc::c_ulonglong);
        i= 32 as libc::c_int as size_t;
        loop {
            let fresh1 = i;
            i= i.wrapping_sub(1);
            if !(fresh1 != 0) {
                break;
            }
            zinit((libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr().as_mut());
        }
    }
}
use ::libc;
extern "C" {
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX16;
impl Default for OrcGeneratedXXX16 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zload(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut buffer: *const libc::c_void,
) -> size_t {
    let mut buf = buffer as *const libc::c_char;
    (*a.as_deref_mut().unwrap()).sign= *(buf as *const libc::c_int);
    buf= buf.offset(::std::mem::size_of::<libc::c_int>() as libc::c_ulong as isize);
    (*a.as_deref_mut().unwrap()).used= *(buf as *const size_t);
    buf= buf.offset(::std::mem::size_of::<size_t>() as libc::c_ulong as isize);
    if (*a.as_deref().unwrap()).sign != 0 {
        if (*a.as_deref().unwrap()).alloced < (*a.as_deref().unwrap()).used {
            crate::src::allocator::libzahl_realloc(a.as_deref_mut(), (*a.as_deref().unwrap()).used);
        }
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            buf as *const libc::c_void,
            (*a.as_deref().unwrap()).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    }
    return (::std::mem::size_of::<libc::c_int>() as libc::c_ulong)
        .wrapping_add(::std::mem::size_of::<size_t>() as libc::c_ulong)
        .wrapping_add(
            (if zzero(core::mem::transmute::<_, *const crate::src::allocator::C2RustUnnamed>(a.as_deref())) != 0 {
                0 as libc::c_int as libc::c_ulong
            } else {
                (*a.as_deref().unwrap()).used
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong)
            }),
        );
}
use ::libc;
extern "C" {
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
    fn memmove(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX42;
impl Default for OrcGeneratedXXX42 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zrsh(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut bits: size_t,
) {
    let mut i: size_t = 0;
    let mut chars: size_t = 0;
    let mut cbits: size_t = 0;
    if bits == 0 {
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
        return;
    }
    chars= bits >> 5 as libc::c_int;
    if zzero(b) != 0 || chars >= (*b).used || crate::src::zbits::zbits(b.as_mut()) <= bits {
        (*a).sign= 0 as libc::c_int;
        return;
    }
    bits= bits & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    cbits= (32 as libc::c_int as libc::c_ulong).wrapping_sub(bits);
    if chars != 0 && a == b {
        (*a).used= ((*a).used as libc::c_ulong).wrapping_sub(chars) as size_t as size_t;
        memmove(
            (*a).chars as *mut libc::c_void,
            (*a).chars.offset(chars as isize) as *const libc::c_void,
            (*a).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    } else if a != b {
        (*a).used= (*b).used.wrapping_sub(chars);
        if (*a).alloced < (*a).used {
            crate::src::allocator::libzahl_realloc(a.as_mut(), (*a).used);
        }
        memcpy(
            (*a).chars as *mut libc::c_void,
            (*b).chars.offset(chars as isize) as *const libc::c_void,
            (*a).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    }
    if bits != 0 {
        *(*a).chars.offset(0 as libc::c_int as isize) >>= bits;
        i= 1 as libc::c_int as size_t;
        while i < (*a).used {
            *(*a).chars
                .offset(i.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize) = *(*a).chars.offset(i as isize) << cbits;
            *(*a).chars.offset(i as isize) >>= bits;
            i= i.wrapping_add(1);
        }
        while *(*a).chars
            .offset((*a).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
            == 0
        {
            (*a).used= (*a).used.wrapping_sub(1);
        }
    }
    (*a).sign= zsignum(b);
}
use ::libc;
extern "C" {
    
    
    
    
    
    static mut libzahl_tmp_pow_d: z_t;
    static mut libzahl_tmp_pow_b: z_t;
    static mut libzahl_tmp_pow_c: z_t;
    
    static mut libzahl_jmp_buf: jmp_buf;
    static mut libzahl_error: libc::c_int;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX21;
impl Default for OrcGeneratedXXX21 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX22;
impl Default for OrcGeneratedXXX22 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX23;
impl Default for OrcGeneratedXXX23 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zmodpow(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
    mut d: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    let mut n: size_t = 0;
    let mut bits: size_t = 0;
    let mut x: zahl_char_t = 0;
    if zsignum(c) <= 0 as libc::c_int {
        if zzero(c) != 0 {
            if zzero(b) != 0 {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            } else if zzero(d) != 0 {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            }
            crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
        } else if zzero(b) != 0 || zzero(d) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else {
            (*a).sign= 0 as libc::c_int;
        }
        return;
    } else {
        if zzero(d) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else if zzero(b) != 0 {
            (*a).sign= 0 as libc::c_int;
            return;
        }
    }
    bits= crate::src::zbits::zbits(c.as_mut());
    n= bits >> 5 as libc::c_int;
    crate::src::zmod::zmod(libzahl_tmp_pow_b.as_mut_ptr(), b, d);
    crate::src::zset::zset(libzahl_tmp_pow_c.as_mut_ptr().as_mut(), c);
    crate::src::zset::zset(libzahl_tmp_pow_d.as_mut_ptr().as_mut(), d);
    crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
    i= 0 as libc::c_int as size_t;
    while i < n {
        x= *((*libzahl_tmp_pow_c.as_mut_ptr()).chars).offset(i as isize);
        j= 32 as libc::c_int as size_t;
        loop {
            let fresh0 = j;
            j= j.wrapping_sub(1);
            if !(fresh0 != 0) {
                break;
            }
            if x & 1 as libc::c_int as libc::c_uint != 0 {
                crate::src::zmodmul::zmodmul(
                    a,
                    a,
                    libzahl_tmp_pow_b.as_mut_ptr(),
                    libzahl_tmp_pow_d.as_mut_ptr(),
                );
            }
            crate::src::zmodsqr::zmodsqr(
                libzahl_tmp_pow_b.as_mut_ptr(),
                libzahl_tmp_pow_b.as_mut_ptr(),
                libzahl_tmp_pow_d.as_mut_ptr(),
            );
            x>>= 1 as libc::c_int;
        }
        i= i.wrapping_add(1);
    }
    x= *((*libzahl_tmp_pow_c.as_mut_ptr()).chars).offset(i as isize);
    while x != 0 {
        if x & 1 as libc::c_int as libc::c_uint != 0 {
            crate::src::zmodmul::zmodmul(
                a,
                a,
                libzahl_tmp_pow_b.as_mut_ptr(),
                libzahl_tmp_pow_d.as_mut_ptr(),
            );
        }
        crate::src::zmodsqr::zmodsqr(
            libzahl_tmp_pow_b.as_mut_ptr(),
            libzahl_tmp_pow_b.as_mut_ptr(),
            libzahl_tmp_pow_d.as_mut_ptr(),
        );
        x>>= 1 as libc::c_int;
    }
}
use ::libc;
extern "C" {
    static mut libzahl_pool: [*mut *mut zahl_char_t; 64];
    fn free(__ptr: *mut libc::c_void);
    static mut libzahl_pool_n: [size_t; 64];
    static mut libzahl_tmp_divmod_ds: [z_t; 32];
    static mut libzahl_const_4: z_t;
    static mut libzahl_const_2: z_t;
    static mut libzahl_const_1: z_t;
    static mut libzahl_const_1e9: z_t;
    static mut libzahl_const_1e19: z_t;
    static mut libzahl_tmp_ptest_n4: z_t;
    static mut libzahl_tmp_ptest_n1: z_t;
    static mut libzahl_tmp_ptest_d: z_t;
    static mut libzahl_tmp_ptest_a: z_t;
    static mut libzahl_tmp_ptest_x: z_t;
    static mut libzahl_tmp_divmod_d: z_t;
    static mut libzahl_tmp_divmod_b: z_t;
    static mut libzahl_tmp_divmod_a: z_t;
    static mut libzahl_tmp_modsqr: z_t;
    static mut libzahl_tmp_pow_d: z_t;
    static mut libzahl_tmp_pow_c: z_t;
    static mut libzahl_tmp_pow_b: z_t;
    static mut libzahl_tmp_mod: z_t;
    static mut libzahl_tmp_div: z_t;
    static mut libzahl_tmp_modmul: z_t;
    static mut libzahl_tmp_sub: z_t;
    static mut libzahl_tmp_gcd_v: z_t;
    static mut libzahl_tmp_gcd_u: z_t;
    static mut libzahl_tmp_str_rem: z_t;
    static mut libzahl_tmp_str_div: z_t;
    static mut libzahl_tmp_str_mag: z_t;
    static mut libzahl_tmp_str_num: z_t;
    static mut libzahl_tmp_cmp: z_t;
    static mut libzahl_set_up: libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX60;
impl Default for OrcGeneratedXXX60 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zunsetup() {
    let mut i: size_t = 0;
    if libzahl_set_up != 0 {
        libzahl_set_up = 0 as libc::c_int;
        free((*libzahl_tmp_cmp.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_str_num.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_str_mag.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_str_div.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_str_rem.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_gcd_u.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_gcd_v.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_sub.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_modmul.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_div.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_mod.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_pow_b.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_pow_c.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_pow_d.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_modsqr.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_divmod_a.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_divmod_b.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_divmod_d.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_ptest_x.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_ptest_a.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_ptest_d.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_ptest_n1.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_tmp_ptest_n4.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_const_1e19.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_const_1e9.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_const_1.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_const_2.as_mut_ptr()).chars as *mut libc::c_void);
        free((*libzahl_const_4.as_mut_ptr()).chars as *mut libc::c_void);
        i= 32 as libc::c_int as size_t;
        loop {
            let fresh0 = i;
            i= i.wrapping_sub(1);
            if !(fresh0 != 0) {
                break;
            }
            free(
                (*(libzahl_tmp_divmod_ds[i as usize]).as_mut_ptr()).chars
                    as *mut libc::c_void,
            );
        }
        i= (::std::mem::size_of::<[*mut *mut zahl_char_t; 64]>() as libc::c_ulong)
            .wrapping_div(
                ::std::mem::size_of::<*mut *mut zahl_char_t>() as libc::c_ulong,
            );
        loop {
            let fresh1 = i;
            i= i.wrapping_sub(1);
            if !(fresh1 != 0) {
                break;
            }
            loop {
                let fresh2 = libzahl_pool_n[i as usize];
                libzahl_pool_n[i
                    as usize] = (libzahl_pool_n[i as usize]).wrapping_sub(1);
                if !(fresh2 != 0) {
                    break;
                }
                ();
            }
            ();
        }
    }
}
use ::libc;
extern "C" {
    
    
    
    
    
    static mut libzahl_tmp_pow_d: z_t;
    static mut libzahl_tmp_pow_b: z_t;
    static mut libzahl_jmp_buf: jmp_buf;
    static mut libzahl_error: libc::c_int;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX24;
impl Default for OrcGeneratedXXX24 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX25;
impl Default for OrcGeneratedXXX25 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX26;
impl Default for OrcGeneratedXXX26 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zmodpowu(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: libc::c_ulonglong,
    mut d: *mut crate::src::allocator::C2RustUnnamed,
) {
    if c == 0 {
        if zzero(b) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else if zzero(d) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else {
            crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
        }
        return;
    } else {
        if zzero(d) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else if zzero(b) != 0 {
            (*a).sign= 0 as libc::c_int;
            return;
        }
    }
    crate::src::zmod::zmod(libzahl_tmp_pow_b.as_mut_ptr(), b, d);
    crate::src::zset::zset(libzahl_tmp_pow_d.as_mut_ptr().as_mut(), d);
    crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
    while c != 0 {
        if c & 1 as libc::c_int as libc::c_ulonglong != 0 {
            crate::src::zmodmul::zmodmul(
                a,
                a,
                libzahl_tmp_pow_b.as_mut_ptr(),
                libzahl_tmp_pow_d.as_mut_ptr(),
            );
        }
        crate::src::zmodsqr::zmodsqr(
            libzahl_tmp_pow_b.as_mut_ptr(),
            libzahl_tmp_pow_b.as_mut_ptr(),
            libzahl_tmp_pow_d.as_mut_ptr(),
        );
        c>>= 1 as libc::c_int;
    }
}
use ::libc;
extern "C" {
    
    
    
    
    
    static mut libzahl_tmp_str_div: z_t;
    static mut libzahl_tmp_str_num: z_t;
    static mut libzahl_tmp_str_mag: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX56;
impl Default for OrcGeneratedXXX56 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zstr_length(
    mut a: *const crate::src::allocator::C2RustUnnamed,
    mut radix: libc::c_ulonglong,
) -> size_t {
    let mut size_total = 1 as libc::c_int as size_t;
    let mut size_temp: size_t = 0;
    crate::src::zset::zset(libzahl_tmp_str_num.as_mut_ptr().as_mut(), a);
    while zzero(libzahl_tmp_str_num.as_mut_ptr()) == 0 {
        crate::src::zsetu::zsetu(libzahl_tmp_str_mag.as_mut_ptr().as_mut(), radix);
        crate::src::zset::zset(libzahl_tmp_str_div.as_mut_ptr().as_mut(), libzahl_tmp_str_mag.as_mut_ptr());
        size_temp= 1 as libc::c_int as size_t;
        while crate::src::zcmpmag::zcmpmag(libzahl_tmp_str_mag.as_mut_ptr(), libzahl_tmp_str_num.as_mut_ptr())
            <= 0 as libc::c_int
        {
            crate::src::zset::zset(libzahl_tmp_str_div.as_mut_ptr().as_mut(), libzahl_tmp_str_mag.as_mut_ptr());
            crate::src::zsqr::zsqr(libzahl_tmp_str_mag.as_mut_ptr(), libzahl_tmp_str_mag.as_mut_ptr());
            size_temp<<= 1 as libc::c_int;
        }
        size_temp>>= 1 as libc::c_int;
        size_total= (size_total as libc::c_ulong).wrapping_add(size_temp) as size_t
            as size_t;
        crate::src::zdiv::zdiv(
            libzahl_tmp_str_num.as_mut_ptr(),
            libzahl_tmp_str_num.as_mut_ptr(),
            libzahl_tmp_str_div.as_mut_ptr(),
        );
    }
    return size_total
        .wrapping_add((zsignum(a) < 0 as libc::c_int) as libc::c_int as libc::c_ulong);
}
use ::libc;
extern "C" {
    
    
    
    
    
    
    
    
    
    
    
    static mut libzahl_tmp_ptest_a: z_t;
    static mut libzahl_tmp_ptest_n1: z_t;
    static mut libzahl_tmp_ptest_x: z_t;
    static mut libzahl_const_1: z_t;
    static mut libzahl_tmp_ptest_d: z_t;
    static mut libzahl_const_2: z_t;
    static mut libzahl_tmp_ptest_n4: z_t;
    
    static mut libzahl_const_4: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX38;
impl Default for OrcGeneratedXXX38 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
pub type zprimality = libc::c_uint;
pub const PRIME: zprimality = 2;
pub const PROBABLY_PRIME: zprimality = 1;
pub const NONPRIME: zprimality = 0;
pub type zranddev = libc::c_uint;
pub const SECURE_RANDOM: zranddev = 1;
pub const FAST_RANDOM: zranddev = 0;
pub type zranddist = libc::c_uint;
pub const UNIFORM: zranddist = 1;
pub const QUASIUNIFORM: zranddist = 0;
#[inline]
unsafe extern "C" fn zeven(mut a_0: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a_0).sign == 0
        || *(*a_0).chars.offset(0 as libc::c_int as isize)
            & 1 as libc::c_int as libc::c_uint == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zptest(
    mut witness: *mut crate::src::allocator::C2RustUnnamed,
    mut n: *mut crate::src::allocator::C2RustUnnamed,
    mut t: libc::c_int,
) -> zprimality {
    let mut i: size_t = 0;
    let mut r: size_t = 0;
    if crate::src::zcmpu::zcmpu(n, 3 as libc::c_int as libc::c_ulonglong) <= 0 as libc::c_int {
        if crate::src::zcmpu::zcmpu(n, 1 as libc::c_int as libc::c_ulonglong) <= 0 as libc::c_int {
            if !witness.is_null() {
                if witness != n {
                    crate::src::zset::zset(witness.as_mut(), n);
                }
            }else { (); }
            return NONPRIME;
        } else {
            return PRIME
        }
    }
    if zeven(n) != 0 {
        if !witness.is_null() {
            if witness != n {
                crate::src::zset::zset(witness.as_mut(), n);
            }
        }else { (); }
        return NONPRIME;
    }
    crate::src::zsub::zsub_unsigned(libzahl_tmp_ptest_n1.as_mut_ptr(), n, libzahl_const_1.as_mut_ptr());
    crate::src::zsub::zsub_unsigned(libzahl_tmp_ptest_n4.as_mut_ptr(), n, libzahl_const_4.as_mut_ptr());
    r= crate::src::zlsb::zlsb(libzahl_tmp_ptest_n1.as_mut_ptr());
    crate::src::zrsh::zrsh(libzahl_tmp_ptest_d.as_mut_ptr(), libzahl_tmp_ptest_n1.as_mut_ptr(), r);
    loop {
        let fresh0 = t;
        t= t - 1;
        if !(fresh0 != 0) {
            break;
        }
        crate::src::zrand::zrand(
            libzahl_tmp_ptest_a.as_mut_ptr(),
            FAST_RANDOM,
            UNIFORM,
            libzahl_tmp_ptest_n4.as_mut_ptr(),
        );
        crate::src::zadd::zadd_unsigned(
            libzahl_tmp_ptest_a.as_mut_ptr().as_mut(),
            libzahl_tmp_ptest_a.as_mut_ptr(),
            libzahl_const_2.as_mut_ptr(),
        );
        crate::src::zmodpow::zmodpow(
            libzahl_tmp_ptest_x.as_mut_ptr(),
            libzahl_tmp_ptest_a.as_mut_ptr(),
            libzahl_tmp_ptest_d.as_mut_ptr(),
            n,
        );
        if crate::src::zcmp::zcmp(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_const_1.as_mut_ptr()) == 0
            || crate::src::zcmp::zcmp(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_tmp_ptest_n1.as_mut_ptr())
                == 0
        {
            continue;
        }
        i= 1 as libc::c_int as size_t;
        while i < r {
            crate::src::zsqr::zsqr(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_tmp_ptest_x.as_mut_ptr());
            crate::src::zmod::zmod(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_tmp_ptest_x.as_mut_ptr(), n);
            if crate::src::zcmp::zcmp(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_const_1.as_mut_ptr()) == 0
            {
                if !witness.is_null() {
                    crate::src::zswap::zswap(witness.as_mut(), libzahl_tmp_ptest_a.as_mut_ptr().as_mut());
                }else { (); }
                return NONPRIME;
            }
            if crate::src::zcmp::zcmp(libzahl_tmp_ptest_x.as_mut_ptr(), libzahl_tmp_ptest_n1.as_mut_ptr())
                == 0
            {
                break;
            }
            i= i.wrapping_add(1);
        }
        if i == r {
            if !witness.is_null() {
                crate::src::zswap::zswap(witness.as_mut(), libzahl_tmp_ptest_a.as_mut_ptr().as_mut());
            }else { (); }
            return NONPRIME;
        }
    }
    return PROBABLY_PRIME;
}
use ::libc;
extern "C" {
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX44;
impl Default for OrcGeneratedXXX44 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zset(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: *const crate::src::allocator::C2RustUnnamed) {
    if zzero(b) != 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
    } else {
        if (*a.as_deref().unwrap()).alloced < (*b).used {
            crate::src::allocator::libzahl_realloc(a.as_deref_mut(), (*b).used);
        }
        (*a.as_deref_mut().unwrap()).sign= (*b).sign;
        (*a.as_deref_mut().unwrap()).used= (*b).used;
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            (*b).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
    };
}
use ::libc;
extern "C" {
    static mut libzahl_tmp_div: z_t;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX10;
impl Default for OrcGeneratedXXX10 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zdiv(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    crate::src::zdivmod::zdivmod(a, libzahl_tmp_div.as_mut_ptr(), b, c);
}
use ::libc;
extern "C" {
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX6;
impl Default for OrcGeneratedXXX6 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zcmp(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
) -> libc::c_int {
    if zsignum(a) != zsignum(b) {
        return if zsignum(a) < zsignum(b) {
            -(1 as libc::c_int)
        } else {
            (zsignum(a) > zsignum(b)) as libc::c_int
        };
    }
    return zsignum(a) * crate::src::zcmpmag::zcmpmag(a, b);
}
use ::libc;
extern "C" {
    fn abort() -> !;
    
    
    
    
    
    static mut libzahl_jmp_buf: jmp_buf;
    fn __errno_location() -> *mut libc::c_int;
    static mut libzahl_error: libc::c_int;
    
    static mut libzahl_const_1: z_t;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
    fn open(__file: *const libc::c_char, __oflag: libc::c_int, _: ...) -> libc::c_int;
    fn close(__fd: libc::c_int) -> libc::c_int;
    fn read(__fd: libc::c_int, __buf: *mut libc::c_void, __nbytes: size_t) -> ssize_t;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX39;
impl Default for OrcGeneratedXXX39 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX40;
impl Default for OrcGeneratedXXX40 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type __ssize_t = libc::c_long;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX41;
impl Default for OrcGeneratedXXX41 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
pub type zranddev = libc::c_uint;
pub const SECURE_RANDOM: zranddev = 1;
pub const FAST_RANDOM: zranddev = 0;
pub type zranddist = libc::c_uint;
pub const UNIFORM: zranddist = 1;
pub const QUASIUNIFORM: zranddist = 0;
pub type ssize_t = __ssize_t;
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
unsafe extern "C" fn zrand_get_random_bits(
    mut r: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut bits: size_t,
    mut fd: libc::c_int,
) {
    let mut read_total = 0 as libc::c_int as size_t;
    let mut n: size_t = 0;
    let mut chars = bits
        .wrapping_add((32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong)
        >> 5 as libc::c_int;
    let mut read_just: ssize_t = 0;
    let mut mask = 1 as libc::c_int as zahl_char_t;
    let mut buf = 0 as *mut libc::c_char;
    if (*r.as_deref().unwrap()).alloced < chars {
        crate::src::allocator::libzahl_realloc(r.as_deref_mut(), chars);
    }
    buf= (*r.as_deref().unwrap()).chars as *mut libc::c_char;
    n= chars.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong);
    while n != 0 {
        read_just= read(fd, buf.offset(read_total as isize) as *mut libc::c_void, n);
        if read_just < 0 as libc::c_int as libc::c_long {
            libzahl_error = *__errno_location();
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        }
        read_total= (read_total as libc::c_ulong).wrapping_add(read_just as size_t)
            as size_t as size_t;
        n= (n as libc::c_ulong).wrapping_sub(read_just as size_t) as size_t as size_t;
    }
    bits= bits & (32 as libc::c_int - 1 as libc::c_int) as libc::c_ulong;
    mask<<= bits;
    mask= (mask as libc::c_uint).wrapping_sub(1 as libc::c_int as libc::c_uint)
        as zahl_char_t as zahl_char_t;
    *(*r.as_deref().unwrap()).chars
        .offset(chars.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize) &= mask;
    n= chars;
    loop {
        let fresh1 = n;
        n= n.wrapping_sub(1);
        if !(fresh1 != 0) {
            break;
        }
        if *(*r.as_deref().unwrap()).chars.offset(n as isize) != 0 {
            (*r.as_deref_mut().unwrap()).used= n.wrapping_add(1 as libc::c_int as libc::c_ulong);
            (*r.as_deref_mut().unwrap()).sign= 1 as libc::c_int;
            return;
        }
    }
    (*r.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zrand(
    mut r: *mut crate::src::allocator::C2RustUnnamed,
    mut dev: zranddev,
    mut dist: zranddist,
    mut n: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut pathname = 0 as *const libc::c_char;
    let mut bits: size_t = 0;
    let mut fd: libc::c_int = 0;
    match  dev as libc::c_uint {
        0 => {
            pathname= b"/dev/urandom\0" as *const u8 as *const libc::c_char;
        }
        1 => {
            pathname= b"/dev/random\0" as *const u8 as *const libc::c_char;
        }
        _ => {
            abort();
        }
    }
    if zzero(n) != 0 {
        (*r).sign= 0 as libc::c_int;
        return;
    }
    fd= open(pathname, 0 as libc::c_int);
    if fd < 0 as libc::c_int {
        libzahl_error = *__errno_location();
        longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
    }
    match  dist as libc::c_uint {
        0 => {
            if zsignum(n) < 0 as libc::c_int {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            }
            bits= crate::src::zbits::zbits(n.as_mut());
            zrand_get_random_bits(r.as_mut(), bits, fd);
            crate::src::zadd::zadd(r, r, libzahl_const_1.as_mut_ptr());
            crate::src::zmul::zmul(r, r, n);
            crate::src::zrsh::zrsh(r, r, bits);
        }
        1 => {
            if zsignum(n) < 0 as libc::c_int {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            }
            bits= crate::src::zbits::zbits(n.as_mut());
            loop {
                zrand_get_random_bits(r.as_mut(), bits, fd);
                if !(crate::src::zcmpmag::zcmpmag(r, n) > 0 as libc::c_int) {
                    break;
                }
            }
        }
        _ => {
            abort();
        }
    }
    close(fd);
}
use ::libc;
extern "C" {
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX61;
impl Default for OrcGeneratedXXX61 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zxor(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: *const crate::src::allocator::C2RustUnnamed,
) {
    let mut n: size_t = 0;
    let mut m: size_t = 0;
    if zzero(b) != 0 {
        if zzero(c) != 0 {
            (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != c {
            crate::src::zset::zset(a.as_deref_mut(), c);
        }
        return;
    } else {
        if zzero(c) != 0 {
            if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
                crate::src::zset::zset(a.as_deref_mut(), b);
            }
            return;
        }
    }
    m= if (*b).used > (*c).used { (*b).used } else { (*c).used };
    n= (*b).used.wrapping_add((*c).used).wrapping_sub(m);
    if (*a.as_deref().unwrap()).alloced < m {
        crate::src::allocator::libzahl_realloc(a.as_deref_mut(), m);
    }
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == b {
        if (*b).used < (*c).used {
            memcpy(
                (*a.as_deref().unwrap()).chars.offset(n as isize) as *mut libc::c_void,
                (*c).chars.offset(n as isize) as *const libc::c_void,
                m
                    .wrapping_sub(n)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        loop {
            let fresh0 = n;
            n= n.wrapping_sub(1);
            if !(fresh0 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) ^= *(*c).chars.offset(n as isize);
        }
    } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == c {
        if (*c).used < (*b).used {
            memcpy(
                (*a.as_deref().unwrap()).chars.offset(n as isize) as *mut libc::c_void,
                (*b).chars.offset(n as isize) as *const libc::c_void,
                m
                    .wrapping_sub(n)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        loop {
            let fresh2 = n;
            n= n.wrapping_sub(1);
            if !(fresh2 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) ^= *(*b).chars.offset(n as isize);
        }
    } else if m == (*b).used {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            m.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        loop {
            let fresh4 = n;
            n= n.wrapping_sub(1);
            if !(fresh4 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) ^= *(*c).chars.offset(n as isize);
        }
    } else {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*c).chars as *const libc::c_void,
            m.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        loop {
            let fresh6 = n;
            n= n.wrapping_sub(1);
            if !(fresh6 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) ^= *(*b).chars.offset(n as isize);
        }
    }
    (*a.as_deref_mut().unwrap()).used= m;
    while (*a.as_deref().unwrap()).used != 0
        && *(*a.as_deref().unwrap()).chars
            .offset((*a.as_deref().unwrap()).used.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
            == 0
    {
        (*a.as_deref_mut().unwrap()).used= (*a.as_deref().unwrap()).used.wrapping_sub(1);
    }
    if (*a.as_deref().unwrap()).used != 0 {
        (*a.as_deref_mut().unwrap()).sign= 1 as libc::c_int
            - 2 as libc::c_int
                * (zsignum(b) ^ zsignum(c) < 0 as libc::c_int) as libc::c_int;
    } else {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
    };
}
use ::libc;
extern "C" {
    
    
    
    
    static mut libzahl_tmp_pow_b: z_t;
    static mut libzahl_jmp_buf: jmp_buf;
    static mut libzahl_error: libc::c_int;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX35;
impl Default for OrcGeneratedXXX35 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX36;
impl Default for OrcGeneratedXXX36 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX37;
impl Default for OrcGeneratedXXX37 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zpowu(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: libc::c_ulonglong,
) {
    if c == 0 {
        if zzero(b) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        }
        crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
        return;
    } else {
        if zzero(b) != 0 {
            (*a).sign= 0 as libc::c_int;
            return;
        }
    }
    crate::src::zset::zset(libzahl_tmp_pow_b.as_mut_ptr().as_mut(), b);
    crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
    while c != 0 {
        if c & 1 as libc::c_int as libc::c_ulonglong != 0 {
            crate::src::zmul::zmul(a, a, libzahl_tmp_pow_b.as_mut_ptr());
        }
        crate::src::zsqr::zsqr(libzahl_tmp_pow_b.as_mut_ptr(), libzahl_tmp_pow_b.as_mut_ptr());
        c>>= 1 as libc::c_int;
    }
}
use ::libc;
extern "C" {
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX2;
impl Default for OrcGeneratedXXX2 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zand(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: *const crate::src::allocator::C2RustUnnamed,
) {
    let mut current_block: u64;
    let mut n: size_t = 0;
    if zzero(b) != 0 || zzero(c) != 0 {
        (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        return;
    }
    n= if (*b).used < (*c).used { (*b).used } else { (*c).used };
    loop {
        let fresh0 = n;
        n= n.wrapping_sub(1);
        if !(fresh0 != 0) {
            current_block= 2473556513754201174;
            break;
        }
        if *(*b).chars.offset(n as isize) & *(*c).chars.offset(n as isize) != 0 {
            current_block= 8876057388401302592;
            break;
        }
    }
    match current_block {
        2473556513754201174 => {
            (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
            return;
        }
        _ => {
            n= n.wrapping_add(1);
            (*a.as_deref_mut().unwrap()).used= n;
            if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == b {
                loop {
                    let fresh1 = n;
                    n= n.wrapping_sub(1);
                    if !(fresh1 != 0) {
                        break;
                    }
                    *(*a.as_deref().unwrap()).chars.offset(n as isize) &= *(*c).chars.offset(n as isize);
                }
            } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == c {
                loop {
                    let fresh3 = n;
                    n= n.wrapping_sub(1);
                    if !(fresh3 != 0) {
                        break;
                    }
                    *(*a.as_deref().unwrap()).chars.offset(n as isize) &= *(*b).chars.offset(n as isize);
                }
            } else {
                if (*a.as_deref().unwrap()).alloced < (*a.as_deref().unwrap()).used {
                    crate::src::allocator::libzahl_realloc(a.as_deref_mut(), (*a.as_deref().unwrap()).used);
                }
                memcpy(
                    (*a.as_deref().unwrap()).chars as *mut libc::c_void,
                    (*c).chars as *const libc::c_void,
                    (*a.as_deref().unwrap()).used
                        .wrapping_mul(
                            ::std::mem::size_of::<zahl_char_t>() as libc::c_ulong,
                        ),
                );
                loop {
                    let fresh5 = n;
                    n= n.wrapping_sub(1);
                    if !(fresh5 != 0) {
                        break;
                    }
                    *(*a.as_deref().unwrap()).chars.offset(n as isize) &= *(*b).chars.offset(n as isize);
                }
            }
            (*a.as_deref_mut().unwrap()).sign= (zsignum(b) > 0 as libc::c_int || zsignum(c) > 0 as libc::c_int)
                as libc::c_int * 2 as libc::c_int - 1 as libc::c_int;
            return;
        }
    };
}
use ::libc;
extern "C" {
    
    
    
    
    static mut libzahl_tmp_pow_b: z_t;
    static mut libzahl_tmp_pow_c: z_t;
    
    static mut libzahl_jmp_buf: jmp_buf;
    static mut libzahl_error: libc::c_int;
    fn longjmp(_: *mut crate::src::allocator::__jmp_buf_tag, _: libc::c_int) -> !;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]

struct OrcGeneratedXXX32;
impl Default for OrcGeneratedXXX32 {fn default() -> Self {Self {
}}}

#[derive(Copy, Clone)]

struct OrcGeneratedXXX33;
impl Default for OrcGeneratedXXX33 {fn default() -> Self {Self {
}}}

pub type jmp_buf = [crate::src::allocator::__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX34;
impl Default for OrcGeneratedXXX34 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zpow(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    let mut n: size_t = 0;
    let mut bits: size_t = 0;
    let mut x: zahl_char_t = 0;
    if zsignum(c) <= 0 as libc::c_int {
        if zzero(c) != 0 {
            if zzero(b) != 0 {
                libzahl_error = 33 as libc::c_int;
                longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
            }
            crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
        } else if zzero(b) != 0 {
            libzahl_error = 33 as libc::c_int;
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        } else {
            (*a).sign= 0 as libc::c_int;
        }
        return;
    } else {
        if zzero(b) != 0 {
            (*a).sign= 0 as libc::c_int;
            return;
        }
    }
    bits= crate::src::zbits::zbits(c.as_mut());
    n= bits >> 5 as libc::c_int;
    crate::src::zset::zset(libzahl_tmp_pow_b.as_mut_ptr().as_mut(), b);
    crate::src::zset::zset(libzahl_tmp_pow_c.as_mut_ptr().as_mut(), c);
    crate::src::zsetu::zsetu(a.as_mut(), 1 as libc::c_int as libc::c_ulonglong);
    i= 0 as libc::c_int as size_t;
    while i < n {
        x= *((*libzahl_tmp_pow_c.as_mut_ptr()).chars).offset(i as isize);
        j= 32 as libc::c_int as size_t;
        loop {
            let fresh0 = j;
            j= j.wrapping_sub(1);
            if !(fresh0 != 0) {
                break;
            }
            if x & 1 as libc::c_int as libc::c_uint != 0 {
                crate::src::zmul::zmul(a, a, libzahl_tmp_pow_b.as_mut_ptr());
            }
            crate::src::zsqr::zsqr(libzahl_tmp_pow_b.as_mut_ptr(), libzahl_tmp_pow_b.as_mut_ptr());
            x>>= 1 as libc::c_int;
        }
        i= i.wrapping_add(1);
    }
    x= *((*libzahl_tmp_pow_c.as_mut_ptr()).chars).offset(i as isize);
    while x != 0 {
        if x & 1 as libc::c_int as libc::c_uint != 0 {
            crate::src::zmul::zmul(a, a, libzahl_tmp_pow_b.as_mut_ptr());
        }
        crate::src::zsqr::zsqr(libzahl_tmp_pow_b.as_mut_ptr(), libzahl_tmp_pow_b.as_mut_ptr());
        x>>= 1 as libc::c_int;
    }
}
use ::libc;
extern "C" {
    
    
    
    
    
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX28;
impl Default for OrcGeneratedXXX28 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zinit(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>) {
    (*a.as_deref_mut().unwrap()).alloced= 0 as libc::c_int as size_t;
    (*a.as_deref_mut().unwrap()).chars= 0 as *mut zahl_char_t;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zmul(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    let mut m: size_t = 0;
    let mut m2: size_t = 0;
    let mut z0: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut z1: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut z2: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut b_high: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut b_low: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut c_high: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut c_low: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut b_sign: libc::c_int = 0;
    let mut c_sign: libc::c_int = 0;
    b_sign= zsignum(b);
    c_sign= zsignum(c);
    if b_sign == 0 || c_sign == 0 {
        (*a).sign= 0 as libc::c_int;
        return;
    }
    m= crate::src::zbits::zbits(b.as_mut());
    m2= if b == c { m } else { crate::src::zbits::zbits(c.as_mut()) };
    if m.wrapping_add(m2) <= 32 as libc::c_int as libc::c_ulong {
        if (*a).alloced < 1 as libc::c_int as libc::c_ulong {
            crate::src::allocator::libzahl_realloc(a.as_mut(), 1 as libc::c_int as size_t);
        }
        (*a).used= 1 as libc::c_int as size_t;
        *(*a).chars
            .offset(
                0 as libc::c_int as isize,
            ) = (*(*b).chars.offset(0 as libc::c_int as isize))
            .wrapping_mul(*(*c).chars.offset(0 as libc::c_int as isize));
        (*a).sign= b_sign * c_sign;
        return;
    }
    (*b).sign= 1 as libc::c_int;
    (*c).sign= 1 as libc::c_int;
    m= if m > m2 { m } else { m2 };
    m2= m >> 1 as libc::c_int;
    zinit(z0.as_mut_ptr().as_mut());
    zinit(z1.as_mut_ptr().as_mut());
    zinit(z2.as_mut_ptr().as_mut());
    zinit(b_high.as_mut_ptr().as_mut());
    zinit(b_low.as_mut_ptr().as_mut());
    zinit(c_high.as_mut_ptr().as_mut());
    zinit(c_low.as_mut_ptr().as_mut());
    crate::src::zsplit::zsplit(b_high.as_mut_ptr(), b_low.as_mut_ptr(), b, m2);
    crate::src::zsplit::zsplit(c_high.as_mut_ptr(), c_low.as_mut_ptr(), c, m2);
    zmul(z0.as_mut_ptr(), b_low.as_mut_ptr(), c_low.as_mut_ptr());
    zmul(z2.as_mut_ptr(), b_high.as_mut_ptr(), c_high.as_mut_ptr());
    crate::src::zadd::zadd(b_low.as_mut_ptr(), b_low.as_mut_ptr(), b_high.as_mut_ptr());
    crate::src::zadd::zadd(c_low.as_mut_ptr(), c_low.as_mut_ptr(), c_high.as_mut_ptr());
    zmul(z1.as_mut_ptr(), b_low.as_mut_ptr(), c_low.as_mut_ptr());
    crate::src::zsub::zsub(z1.as_mut_ptr(), z1.as_mut_ptr(), z0.as_mut_ptr());
    crate::src::zsub::zsub(z1.as_mut_ptr(), z1.as_mut_ptr(), z2.as_mut_ptr());
    crate::src::zlsh::zlsh(z1.as_mut_ptr().as_mut(), z1.as_mut_ptr(), m2);
    m2<<= 1 as libc::c_int;
    crate::src::zlsh::zlsh(z2.as_mut_ptr().as_mut(), z2.as_mut_ptr(), m2);
    crate::src::zadd::zadd(a, z2.as_mut_ptr(), z1.as_mut_ptr());
    crate::src::zadd::zadd(a, a, z0.as_mut_ptr());
    crate::src::zfree::zfree(z0.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(z1.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(z2.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(b_high.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(b_low.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(c_high.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(c_low.as_mut_ptr().as_mut());
    (*b).sign= b_sign;
    (*c).sign= c_sign;
    (*a).sign= b_sign * c_sign;
}
use ::libc;
extern "C" {
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
    
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX1;
impl Default for OrcGeneratedXXX1 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zadd_unsigned(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: *const crate::src::allocator::C2RustUnnamed,
) {
    let mut i: size_t = 0;
    let mut size: size_t = 0;
    let mut n: size_t = 0;
    let mut carry: [uint32_t; 2] = [
        0 as libc::c_int as uint32_t,
        0 as libc::c_int as uint32_t,
    ];
    let mut addend = 0 as *mut zahl_char_t;
    if zzero(b) != 0 {
        crate::src::zabs::zabs(a.as_deref_mut(), c);
        return;
    } else {
        if zzero(c) != 0 {
            crate::src::zabs::zabs(a.as_deref_mut(), b);
            return;
        }
    }
    size= if (*b).used > (*c).used { (*b).used } else { (*c).used };
    n= (*b).used.wrapping_add((*c).used).wrapping_sub(size);
    if (*a.as_deref().unwrap()).alloced < size.wrapping_add(1 as libc::c_int as libc::c_ulong) {
        crate::src::allocator::libzahl_realloc(a.as_deref_mut(), size.wrapping_add(1 as libc::c_int as libc::c_ulong));
    }
    *(*a.as_deref().unwrap()).chars.offset(size as isize) = 0 as libc::c_int as zahl_char_t;
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == b {
        if (*a.as_deref().unwrap()).used < (*c).used {
            n= (*c).used;
            memset(
                (*a.as_deref().unwrap()).chars.offset((*a.as_deref().unwrap()).used as isize) as *mut libc::c_void,
                0 as libc::c_int,
                n
                    .wrapping_sub((*a.as_deref().unwrap()).used)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        addend= (*c).chars;
    } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == c {
        if (*a.as_deref().unwrap()).used < (*b).used {
            n= (*b).used;
            memset(
                (*a.as_deref().unwrap()).chars.offset((*a.as_deref().unwrap()).used as isize) as *mut libc::c_void,
                0 as libc::c_int,
                n
                    .wrapping_sub((*a.as_deref().unwrap()).used)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        addend= (*b).chars;
    } else if (*b).used > (*c).used {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            (*b).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        (*a.as_deref_mut().unwrap()).used= (*b).used;
        addend= (*c).chars;
    } else {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*c).chars as *const libc::c_void,
            (*c).used
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        (*a.as_deref_mut().unwrap()).used= (*c).used;
        addend= (*b).chars;
    }
    i= 0 as libc::c_int as size_t;
    while i < n {
        if carry[(i & 1 as libc::c_int as libc::c_ulong) as usize] != 0 {
            carry[(!i & 1 as libc::c_int as libc::c_ulong)
                as usize] = ((4294967295 as libc::c_uint)
                .wrapping_sub(*(*a.as_deref().unwrap()).chars.offset(i as isize))
                <= *addend.offset(i as isize)) as libc::c_int as uint32_t;
        } else {
            carry[(!i & 1 as libc::c_int as libc::c_ulong)
                as usize] = ((4294967295 as libc::c_uint)
                .wrapping_sub(*(*a.as_deref().unwrap()).chars.offset(i as isize))
                < *addend.offset(i as isize)) as libc::c_int as uint32_t;
        }
        *(*a.as_deref().unwrap()).chars.offset(i as isize) = (*(*a.as_deref().unwrap()).chars.offset(i as isize) as libc::c_uint)
            .wrapping_add(
                (*addend.offset(i as isize))
                    .wrapping_add(
                        carry[(i & 1 as libc::c_int as libc::c_ulong) as usize],
                    ),
            ) as zahl_char_t as zahl_char_t;
        i= i.wrapping_add(1);
    }
    while carry[(i & 1 as libc::c_int as libc::c_ulong) as usize] != 0 {
        carry[(!i & 1 as libc::c_int as libc::c_ulong)
            as usize] = (*(*a.as_deref().unwrap()).chars.offset(i as isize) == 4294967295 as libc::c_uint)
            as libc::c_int as uint32_t;
        let fresh1 = i;
        i= i.wrapping_add(1);
        *(*a.as_deref().unwrap()).chars.offset(fresh1 as isize) = (*(*a.as_deref().unwrap()).chars.offset(fresh1 as isize) as libc::c_uint)
            .wrapping_add(1 as libc::c_int as libc::c_uint) as zahl_char_t
            as zahl_char_t;
    }
    if (*a.as_deref().unwrap()).used < i {
        (*a.as_deref_mut().unwrap()).used= i;
    }
    (*a.as_deref_mut().unwrap()).sign= 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zadd(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    if zzero(b) != 0 {
        if a != c {
            crate::src::zset::zset(a.as_mut(), c);
        }
    } else if zzero(c) != 0 {
        if a != b {
            crate::src::zset::zset(a.as_mut(), b);
        }
    } else if b == c {
        crate::src::zlsh::zlsh(a.as_mut(), b, 1 as libc::c_int as size_t);
    } else if zsignum(b) | zsignum(c) < 0 as libc::c_int {
        if zsignum(b) < 0 as libc::c_int {
            if zsignum(c) < 0 as libc::c_int {
                zadd_unsigned(a.as_mut(), b, c);
                (*a).sign= -zsignum(a);
            } else {
                crate::src::zsub::zsub_unsigned(a, c, b);
            }
        } else {
            crate::src::zsub::zsub_unsigned(a, b, c);
        }
    } else {
        zadd_unsigned(a.as_mut(), b, c);
    };
}
use ::libc;
extern "C" {
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX31;
impl Default for OrcGeneratedXXX31 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zor(
    mut a: Option<&mut crate::src::allocator::C2RustUnnamed>,
    mut b: *const crate::src::allocator::C2RustUnnamed,
    mut c: *const crate::src::allocator::C2RustUnnamed,
) {
    let mut n: size_t = 0;
    let mut m: size_t = 0;
    if zzero(b) != 0 {
        if zzero(c) != 0 {
            (*a.as_deref_mut().unwrap()).sign= 0 as libc::c_int;
        } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != c {
            crate::src::zset::zset(a.as_deref_mut(), c);
        }
        return;
    } else {
        if zzero(c) != 0 {
            if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
                crate::src::zset::zset(a.as_deref_mut(), b);
            }
            return;
        }
    }
    m= if (*b).used > (*c).used { (*b).used } else { (*c).used };
    n= (*b).used.wrapping_add((*c).used).wrapping_sub(m);
    if (*a.as_deref().unwrap()).alloced < m {
        crate::src::allocator::libzahl_realloc(a.as_deref_mut(), m);
    }
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == b {
        if (*b).used < (*c).used {
            memcpy(
                (*a.as_deref().unwrap()).chars.offset(n as isize) as *mut libc::c_void,
                (*c).chars.offset(n as isize) as *const libc::c_void,
                m
                    .wrapping_sub(n)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        loop {
            let fresh0 = n;
            n= n.wrapping_sub(1);
            if !(fresh0 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) = *(*c).chars.offset(n as isize);
        }
    } else if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) == c {
        if (*c).used < (*b).used {
            memcpy(
                (*a.as_deref().unwrap()).chars.offset(n as isize) as *mut libc::c_void,
                (*b).chars.offset(n as isize) as *const libc::c_void,
                m
                    .wrapping_sub(n)
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
        loop {
            let fresh2 = n;
            n= n.wrapping_sub(1);
            if !(fresh2 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) = *(*b).chars.offset(n as isize);
        }
    } else if m == (*b).used {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*b).chars as *const libc::c_void,
            m.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        loop {
            let fresh4 = n;
            n= n.wrapping_sub(1);
            if !(fresh4 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) = *(*c).chars.offset(n as isize);
        }
    } else {
        memcpy(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            (*c).chars as *const libc::c_void,
            m.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        loop {
            let fresh6 = n;
            n= n.wrapping_sub(1);
            if !(fresh6 != 0) {
                break;
            }
            *(*a.as_deref().unwrap()).chars.offset(n as isize) = *(*b).chars.offset(n as isize);
        }
    }
    (*a.as_deref_mut().unwrap()).used= m;
    (*a.as_deref_mut().unwrap()).sign= (zsignum(b) > 0 as libc::c_int && zsignum(c) > 0 as libc::c_int)
        as libc::c_int * 2 as libc::c_int - 1 as libc::c_int;
}
use ::libc;
extern "C" {
    
    
    
    static mut libzahl_tmp_str_num: z_t;
    static mut libzahl_const_1e19: z_t;
    fn __errno_location() -> *mut libc::c_int;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX46;
impl Default for OrcGeneratedXXX46 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
pub const _ISdigit: C2RustUnnamed_0 = 2048;
pub type C2RustUnnamed_0 = libc::c_uint;
pub const _ISalnum: C2RustUnnamed_0 = 8;
pub const _ISpunct: C2RustUnnamed_0 = 4;
pub const _IScntrl: C2RustUnnamed_0 = 2;
pub const _ISblank: C2RustUnnamed_0 = 1;
pub const _ISgraph: C2RustUnnamed_0 = 32768;
pub const _ISprint: C2RustUnnamed_0 = 16384;
pub const _ISspace: C2RustUnnamed_0 = 8192;
pub const _ISxdigit: C2RustUnnamed_0 = 4096;
pub const _ISalpha: C2RustUnnamed_0 = 1024;
pub const _ISlower: C2RustUnnamed_0 = 512;
pub const _ISupper: C2RustUnnamed_0 = 256;
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zsets(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut str: *const libc::c_char,
) -> libc::c_int {
    let mut temp = 0 as libc::c_int as libc::c_ulonglong;
    let mut neg = ((*str) as libc::c_int == '-' as i32) as libc::c_int;
    let mut str_end = 0 as *const libc::c_char;
    str= str
        .offset((neg != 0 || (*str) as libc::c_int == '+' as i32) as libc::c_int as isize);
    if (*str) == 0 {
        *__errno_location() = 22 as libc::c_int;
        return -(1 as libc::c_int);
    }
    str_end= str;
    while (*str_end) != 0 {
        if *(*__ctype_b_loc()).offset((*str_end) as libc::c_int as isize) as libc::c_int
            & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int == 0
        {
            *__errno_location() = 22 as libc::c_int;
            return -(1 as libc::c_int);
        }
        str_end= str_end.offset(1);
    }
    (*a).sign= 0 as libc::c_int;
    crate::src::zset::zset(libzahl_tmp_str_num.as_mut_ptr().as_mut(), libzahl_const_1e19.as_mut_ptr());
    's_234: {
        let mut current_block_39: u64;
        match  str_end.offset_from(str) as libc::c_long
            % 19 as libc::c_int as libc::c_long
        {
            0 => {
                current_block_39= 2009900886467833939;
            }
            18 => {
                current_block_39= 15121320231496893747;
            }
            17 => {
                current_block_39= 16368488404610608819;
            }
            16 => {
                current_block_39= 2817806250783016588;
            }
            15 => {
                current_block_39= 8436272415664805267;
            }
            14 => {
                current_block_39= 17260602820350443736;
            }
            13 => {
                current_block_39= 13506216435796342560;
            }
            12 => {
                current_block_39= 3798081891250826146;
            }
            11 => {
                current_block_39= 3337010891255527766;
            }
            10 => {
                current_block_39= 14701426646074699728;
            }
            9 => {
                current_block_39= 7675967895758458727;
            }
            8 => {
                current_block_39= 17228944538289729950;
            }
            7 => {
                current_block_39= 16906717074776190969;
            }
            6 => {
                current_block_39= 5148048065308018341;
            }
            5 => {
                current_block_39= 18210558662916816231;
            }
            4 => {
                current_block_39= 13503438682059240994;
            }
            3 => {
                current_block_39= 5618369753603485945;
            }
            2 => {
                current_block_39= 12749676338018479376;
            }
            1 => {
                current_block_39= 13992101357592761495;
            }
            _ => {
                current_block_39= 1434579379687443766;
            }
        }
        loop {
            match current_block_39 {
                1434579379687443766 => {
                    break 's_234;
                }
                2009900886467833939 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh0 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh0) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 15121320231496893747;
                }
                15121320231496893747 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh1 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh1) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 16368488404610608819;
                }
                16368488404610608819 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh2 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh2) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 2817806250783016588;
                }
                2817806250783016588 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh3 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh3) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 8436272415664805267;
                }
                8436272415664805267 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh4 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh4) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 17260602820350443736;
                }
                17260602820350443736 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh5 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh5) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 13506216435796342560;
                }
                13506216435796342560 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh6 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh6) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 3798081891250826146;
                }
                3798081891250826146 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh7 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh7) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 3337010891255527766;
                }
                3337010891255527766 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh8 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh8) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 14701426646074699728;
                }
                14701426646074699728 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh9 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh9) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 7675967895758458727;
                }
                7675967895758458727 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh10 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh10) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 17228944538289729950;
                }
                17228944538289729950 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh11 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh11) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 16906717074776190969;
                }
                16906717074776190969 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh12 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh12) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 5148048065308018341;
                }
                5148048065308018341 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh13 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh13) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 18210558662916816231;
                }
                18210558662916816231 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh14 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh14) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 13503438682059240994;
                }
                13503438682059240994 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh15 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh15) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 5618369753603485945;
                }
                5618369753603485945 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh16 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh16) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 12749676338018479376;
                }
                12749676338018479376 => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh17 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh17) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    current_block_39= 13992101357592761495;
                }
                _ => {
                    temp= temp.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    let fresh18 = str;
                    str= str.offset(1);
                    temp= temp
                        .wrapping_add(
                            ((*fresh18) as libc::c_int & 15 as libc::c_int)
                                as libc::c_ulonglong,
                        );
                    if !(temp == 0) {
                        *((*libzahl_tmp_str_num.as_mut_ptr()).chars)
                            .offset(0 as libc::c_int as isize) = temp as zahl_char_t;
                        temp>>= 32 as libc::c_int;
                        *((*libzahl_tmp_str_num.as_mut_ptr()).chars)
                            .offset(1 as libc::c_int as isize) = temp as zahl_char_t;
                        (*libzahl_tmp_str_num.as_mut_ptr())
                            .used = (1 as libc::c_int + (temp != 0) as libc::c_int)
                            as size_t;
                        crate::src::zadd::zadd(a, a, libzahl_tmp_str_num.as_mut_ptr());
                    }
                    if !((*str) != 0) {
                        current_block_39= 1434579379687443766;
                        continue;
                    }
                    crate::src::zmul::zmul(a, a, libzahl_const_1e19.as_mut_ptr());
                    temp= 0 as libc::c_int as libc::c_ulonglong;
                    current_block_39= 2009900886467833939;
                }
            }
        }
    }
    if neg != 0 {
        (*a).sign= -zsignum(a);
    }
    return 0 as libc::c_int;
}
use ::libc;
extern "C" {
    
    
    
    static mut libzahl_tmp_modsqr: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX27;
impl Default for OrcGeneratedXXX27 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[no_mangle]
pub unsafe extern "C" fn zmodsqr(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: *mut crate::src::allocator::C2RustUnnamed,
    mut c: *mut crate::src::allocator::C2RustUnnamed,
) {
    if a == c {
        crate::src::zset::zset(libzahl_tmp_modsqr.as_mut_ptr().as_mut(), c);
        crate::src::zsqr::zsqr(a, b);
        crate::src::zmod::zmod(a, a, libzahl_tmp_modsqr.as_mut_ptr());
    } else {
        crate::src::zsqr::zsqr(a, b);
        crate::src::zmod::zmod(a, a, c);
    };
}
use ::libc;
extern "C" {
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX29;
impl Default for OrcGeneratedXXX29 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zneg(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: *const crate::src::allocator::C2RustUnnamed) {
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
        crate::src::zset::zset(a.as_deref_mut(), b);
    }
    (*a.as_deref_mut().unwrap()).sign= -zsignum(core::mem::transmute::<_, *const crate::src::allocator::C2RustUnnamed>(a.as_deref()));
}
use ::libc;
extern "C" {
    
    
    static mut libzahl_tmp_cmp: z_t;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX9;
impl Default for OrcGeneratedXXX9 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[no_mangle]
pub unsafe extern "C" fn zcmpu(
    mut a: *mut crate::src::allocator::C2RustUnnamed,
    mut b: libc::c_ulonglong,
) -> libc::c_int {
    if b == 0 {
        return zsignum(a);
    }
    if zsignum(a) <= 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    crate::src::zsetu::zsetu(libzahl_tmp_cmp.as_mut_ptr().as_mut(), b);
    return crate::src::zcmp::zcmp(a, libzahl_tmp_cmp.as_mut_ptr());
}
use ::libc;
extern "C" {
    
    
    
    
    
    
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX52;
impl Default for OrcGeneratedXXX52 {fn default() -> Self {Self {
}}}

pub type z_t = [crate::src::allocator::C2RustUnnamed; 1];
#[inline]
unsafe extern "C" fn zinit(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>) {
    (*a.as_deref_mut().unwrap()).alloced= 0 as libc::c_int as size_t;
    (*a.as_deref_mut().unwrap()).chars= 0 as *mut zahl_char_t;
}
#[inline]
unsafe extern "C" fn zsignum(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return (*a).sign;
}
#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zsqr(mut a: *mut crate::src::allocator::C2RustUnnamed, mut b: *mut crate::src::allocator::C2RustUnnamed) {
    let mut m2: size_t = 0;
    let mut z0: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut z1: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut z2: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut high: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut low: z_t = [crate::src::allocator::C2RustUnnamed {
        sign: 0,
        used: 0,
        alloced: 0,
        chars: 0 as *mut zahl_char_t,
    }; 1];
    let mut sign: libc::c_int = 0;
    if zzero(b) != 0 {
        (*a).sign= 0 as libc::c_int;
        return;
    }
    m2= crate::src::zbits::zbits(b.as_mut());
    if m2 <= (32 as libc::c_int / 2 as libc::c_int) as libc::c_ulong {
        if (*a).alloced < 1 as libc::c_int as libc::c_ulong {
            crate::src::allocator::libzahl_realloc(a.as_mut(), 1 as libc::c_int as size_t);
        }
        (*a).used= 1 as libc::c_int as size_t;
        *(*a).chars
            .offset(
                0 as libc::c_int as isize,
            ) = (*(*b).chars.offset(0 as libc::c_int as isize))
            .wrapping_mul(*(*b).chars.offset(0 as libc::c_int as isize));
        (*a).sign= 1 as libc::c_int;
        return;
    }
    sign= zsignum(b);
    (*b).sign= 1 as libc::c_int;
    m2>>= 1 as libc::c_int;
    zinit(z0.as_mut_ptr().as_mut());
    zinit(z1.as_mut_ptr().as_mut());
    zinit(z2.as_mut_ptr().as_mut());
    zinit(high.as_mut_ptr().as_mut());
    zinit(low.as_mut_ptr().as_mut());
    crate::src::zsplit::zsplit(high.as_mut_ptr(), low.as_mut_ptr(), b, m2);
    zsqr(z0.as_mut_ptr(), low.as_mut_ptr());
    zsqr(z2.as_mut_ptr(), high.as_mut_ptr());
    crate::src::zmul::zmul(z1.as_mut_ptr(), low.as_mut_ptr(), high.as_mut_ptr());
    crate::src::zlsh::zlsh(
        z1.as_mut_ptr().as_mut(),
        z1.as_mut_ptr(),
        m2.wrapping_add(1 as libc::c_int as libc::c_ulong),
    );
    m2<<= 1 as libc::c_int;
    crate::src::zlsh::zlsh(z2.as_mut_ptr().as_mut(), z2.as_mut_ptr(), m2);
    crate::src::zadd::zadd(a, z2.as_mut_ptr(), z1.as_mut_ptr());
    crate::src::zadd::zadd(a, a, z0.as_mut_ptr());
    crate::src::zfree::zfree(z0.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(z1.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(z2.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(high.as_mut_ptr().as_mut());
    crate::src::zfree::zfree(low.as_mut_ptr().as_mut());
    (*b).sign= sign;
    (*a).sign= 1 as libc::c_int;
}
use ::libc;
extern "C" {
    fn longjmp(_: *mut __jmp_buf_tag, _: libc::c_int) -> !;
    
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    static mut libzahl_pool_n: [size_t; 64];
    static mut libzahl_pool: [*mut *mut zahl_char_t; 64];
    static mut libzahl_error: libc::c_int;
    static mut libzahl_jmp_buf: jmp_buf;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn __errno_location() -> *mut libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __sigset_t {
    pub __val: [libc::c_ulong; 16],
}
impl Default for __sigset_t {fn default() -> Self {Self {
__val: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: libc::c_int,
    pub __saved_mask: __sigset_t,
}
impl Default for __jmp_buf_tag {fn default() -> Self {Self {
__jmpbuf: Default::default(),
__mask_was_saved: Default::default(),
__saved_mask: Default::default(),
}}}

pub type jmp_buf = [__jmp_buf_tag; 1];
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub sign: libc::c_int,
    pub used: size_t,
    pub alloced: size_t,
    pub chars: *mut zahl_char_t,
}
impl Default for C2RustUnnamed {fn default() -> Self {Self {
sign: Default::default(),
used: Default::default(),
alloced: Default::default(),
chars: std::ptr::null_mut(),
}}}

#[no_mangle]
pub unsafe extern "C" fn libzahl_realloc(mut a: Option<&mut C2RustUnnamed>, mut need: size_t) {
    let mut i: size_t = 0;
    let mut x: size_t = 0;
    let mut new = 0 as *mut zahl_char_t;
    if need & (!need).wrapping_add(1 as libc::c_int as libc::c_ulong) != need {
        need|= need >> 1 as libc::c_int;
        need|= need >> 2 as libc::c_int;
        need|= need >> 4 as libc::c_int;
        i= ::std::mem::size_of::<size_t>() as libc::c_ulong;
        x= 8 as libc::c_int as size_t;
        while i != 0 {
            need|= need >> x;
            i>>= 1 as libc::c_int;
            x<<= 1 as libc::c_int;
        }
        need= (need as libc::c_ulong).wrapping_add(1 as libc::c_int as libc::c_ulong)
            as size_t as size_t;
    }
    i= 0 as libc::c_int as size_t;
    x= need;
    while x != 0 {
        i= (i as libc::c_ulong).wrapping_add(1 as libc::c_int as libc::c_ulong)
            as size_t as size_t;
        x>>= 1 as libc::c_int;
    }
    if libzahl_pool_n[i as usize] != 0 {
        libzahl_pool_n[i as usize] = (libzahl_pool_n[i as usize]).wrapping_sub(1);
        new= *(libzahl_pool[i as usize]).offset(libzahl_pool_n[i as usize] as isize);
        memcpy(
            new as *mut libc::c_void,
            (*a.as_deref().unwrap()).chars as *const libc::c_void,
            (*a.as_deref().unwrap()).alloced
                .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        );
        crate::src::zfree::zfree(a.as_deref_mut());
        (*a.as_deref_mut().unwrap()).chars= new;
    } else {
        (*a.as_deref_mut().unwrap()).chars= realloc(
            (*a.as_deref().unwrap()).chars as *mut libc::c_void,
            need.wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
        ) as *mut zahl_char_t;
        if (*a.as_deref().unwrap()).chars.is_null() {();
            if *__errno_location() == 0 {
                *__errno_location() = 12 as libc::c_int;
            }
            libzahl_error = *__errno_location();
            longjmp(libzahl_jmp_buf.as_mut_ptr(), 1 as libc::c_int);
        }
    }
    (*a.as_deref_mut().unwrap()).alloced= need;
}
use ::libc;
extern "C" {
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX43;
impl Default for OrcGeneratedXXX43 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zsave(
    mut a: *const crate::src::allocator::C2RustUnnamed,
    mut buffer: *mut libc::c_void,
) -> size_t {
    if !buffer.is_null() {
        let mut buf = buffer as *mut libc::c_char;
        *(buf as *mut libc::c_int) = (*a).sign;
        buf= buf.offset(::std::mem::size_of::<libc::c_int>() as libc::c_ulong as isize);
        *(buf as *mut size_t) = (*a).used;
        buf= buf.offset(::std::mem::size_of::<size_t>() as libc::c_ulong as isize);
        if zzero(a) == 0 {
            memcpy(
                buf as *mut libc::c_void,
                (*a).chars as *const libc::c_void,
                (*a).used
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong),
            );
        }
    }else { (); }
    return (::std::mem::size_of::<libc::c_int>() as libc::c_ulong)
        .wrapping_add(::std::mem::size_of::<size_t>() as libc::c_ulong)
        .wrapping_add(
            (if zzero(a) != 0 {
                0 as libc::c_int as libc::c_ulong
            } else {
                (*a).used
                    .wrapping_mul(::std::mem::size_of::<zahl_char_t>() as libc::c_ulong)
            }),
        );
}
use ::libc;
extern "C" {
    
}
pub type size_t = libc::c_ulong;
pub type __uint32_t = libc::c_uint;
pub type uint32_t = __uint32_t;
pub type zahl_char_t = uint32_t;
#[derive(Copy, Clone)]

struct OrcGeneratedXXX0;
impl Default for OrcGeneratedXXX0 {fn default() -> Self {Self {
}}}

#[inline]
unsafe extern "C" fn zzero(mut a: *const crate::src::allocator::C2RustUnnamed) -> libc::c_int {
    return ((*a).sign == 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn zabs(mut a: Option<&mut crate::src::allocator::C2RustUnnamed>, mut b: *const crate::src::allocator::C2RustUnnamed) {
    if a.as_deref().map(|r| r as *const _).unwrap_or(std::ptr::null()) != b {
        crate::src::zset::zset(a.as_deref_mut(), b);
    }
    (*a.as_deref_mut().unwrap()).sign= (zzero(core::mem::transmute::<_, *const crate::src::allocator::C2RustUnnamed>(a.as_deref())) == 0) as libc::c_int;
}

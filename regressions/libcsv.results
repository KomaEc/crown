Solving libcsv::csv_error with precision 1... ✅
Solving libcsv::csv_strerror with precision 1... ✅
Solving libcsv::csv_get_opts with precision 1... ✅
Solving libcsv::csv_set_opts with precision 1... ✅
Solving libcsv::csv_init with precision 1... ✅
Solving libcsv::csv_free with precision 1... ✅
Solving libcsv::csv_fini with precision 1... ✅
Solving libcsv::csv_set_delim with precision 1... ✅
Solving libcsv::csv_set_quote with precision 1... ✅
Solving libcsv::csv_get_delim with precision 1... ✅
Solving libcsv::csv_get_quote with precision 1... ✅
Solving libcsv::csv_set_space_func with precision 1... ✅
Solving libcsv::csv_set_term_func with precision 1... ✅
Solving libcsv::csv_set_realloc_func with precision 1... ✅
Solving libcsv::csv_set_free_func with precision 1... ✅
Solving libcsv::csv_set_blk_size with precision 1... ✅
Solving libcsv::csv_get_buffer_size with precision 1... ✅
Solving libcsv::csv_increase_buffer with precision 1... ✅
Solving libcsv::csv_parse with precision 1... ✅
Solving libcsv::csv_write with precision 1... ✅
Solving libcsv::csv_fwrite with precision 1... ✅
Solving libcsv::csv_write2 with precision 1... ✅
Solving libcsv::csv_fwrite2 with precision 1... ✅
libcsv::csv_error: (&) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (&) -> _
libcsv::csv_set_opts: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_init: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_free: (&) -> _
libcsv::csv_fini: (&uniq  ↓ &uniq , _, _, &) -> _
libcsv::csv_set_delim: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_set_quote: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_get_delim: (&) -> _
libcsv::csv_get_quote: (&) -> _
libcsv::csv_set_space_func: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_set_term_func: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_set_realloc_func: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_set_free_func: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_set_blk_size: (&uniq  ↓ &uniq , _) -> _
libcsv::csv_get_buffer_size: (&) -> _
libcsv::csv_increase_buffer: (&) -> _
libcsv::csv_parse: (&uniq  ↓ &uniq , &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq  ↓ &uniq , &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (&, &, _, _) -> _
Solving libcsv::csv_error with precision 2... ✅
Solving libcsv::csv_strerror with precision 2... ✅
Solving libcsv::csv_get_opts with precision 2... ✅
Solving libcsv::csv_set_opts with precision 2... ✅
Solving libcsv::csv_init with precision 2... ✅
Solving libcsv::csv_free with precision 2... ✅
Solving libcsv::csv_fini with precision 2... ✅
Solving libcsv::csv_set_delim with precision 2... ✅
Solving libcsv::csv_set_quote with precision 2... ✅
Solving libcsv::csv_get_delim with precision 2... ✅
Solving libcsv::csv_get_quote with precision 2... ✅
Solving libcsv::csv_set_space_func with precision 2... ✅
Solving libcsv::csv_set_term_func with precision 2... ✅
Solving libcsv::csv_set_realloc_func with precision 2... ✅
Solving libcsv::csv_set_free_func with precision 2... ✅
Solving libcsv::csv_set_blk_size with precision 2... ✅
Solving libcsv::csv_get_buffer_size with precision 2... ✅
Solving libcsv::csv_increase_buffer with precision 2... ✅
Solving libcsv::csv_parse with precision 2... ✅
Solving libcsv::csv_write with precision 2... ✅
Solving libcsv::csv_fwrite with precision 2... ✅
Solving libcsv::csv_write2 with precision 2... ✅
Solving libcsv::csv_fwrite2 with precision 2... ✅
libcsv::csv_error: (& &) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (& &) -> _
libcsv::csv_set_opts: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_init: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_free: (& &) -> _
libcsv::csv_fini: (&uniq & ↓ &uniq &, _, _, &) -> _
libcsv::csv_set_delim: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_quote: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_delim: (& &) -> _
libcsv::csv_get_quote: (& &) -> _
libcsv::csv_set_space_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_term_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_realloc_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_free_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_blk_size: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_buffer_size: (& &) -> _
libcsv::csv_increase_buffer: (& &) -> _
libcsv::csv_parse: (&uniq & ↓ &uniq &, &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq & & & & & & ↓ &uniq & & & & & &, &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (& & & & & & &, &, _, _) -> _
Solving libcsv::csv_error with precision 3... ✅
Solving libcsv::csv_strerror with precision 3... ✅
Solving libcsv::csv_get_opts with precision 3... ✅
Solving libcsv::csv_set_opts with precision 3... ✅
Solving libcsv::csv_init with precision 3... ✅
Solving libcsv::csv_free with precision 3... ✅
Solving libcsv::csv_fini with precision 3... ✅
Solving libcsv::csv_set_delim with precision 3... ✅
Solving libcsv::csv_set_quote with precision 3... ✅
Solving libcsv::csv_get_delim with precision 3... ✅
Solving libcsv::csv_get_quote with precision 3... ✅
Solving libcsv::csv_set_space_func with precision 3... ✅
Solving libcsv::csv_set_term_func with precision 3... ✅
Solving libcsv::csv_set_realloc_func with precision 3... ✅
Solving libcsv::csv_set_free_func with precision 3... ✅
Solving libcsv::csv_set_blk_size with precision 3... ✅
Solving libcsv::csv_get_buffer_size with precision 3... ✅
Solving libcsv::csv_increase_buffer with precision 3... ✅
Solving libcsv::csv_parse with precision 3... ✅
Solving libcsv::csv_write with precision 3... ✅
Solving libcsv::csv_fwrite with precision 3... ✅
Solving libcsv::csv_write2 with precision 3... ✅
Solving libcsv::csv_fwrite2 with precision 3... ✅
libcsv::csv_error: (& &) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (& &) -> _
libcsv::csv_set_opts: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_init: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_free: (& &) -> _
libcsv::csv_fini: (&uniq & ↓ &uniq &, _, _, &) -> _
libcsv::csv_set_delim: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_quote: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_delim: (& &) -> _
libcsv::csv_get_quote: (& &) -> _
libcsv::csv_set_space_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_term_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_realloc_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_free_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_blk_size: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_buffer_size: (& &) -> _
libcsv::csv_increase_buffer: (& &) -> _
libcsv::csv_parse: (&uniq & ↓ &uniq &, &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq & & & & & & ↓ &uniq & & & & & &, &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (& & & & & & &, &, _, _) -> _
Solving libcsv::csv_error with precision 3... ✅
Solving libcsv::csv_strerror with precision 3... ✅
Solving libcsv::csv_get_opts with precision 3... ✅
Solving libcsv::csv_set_opts with precision 3... ✅
Solving libcsv::csv_init with precision 3... ✅
Solving libcsv::csv_free with precision 3... ✅
Solving libcsv::csv_fini with precision 3... ✅
Solving libcsv::csv_set_delim with precision 3... ✅
Solving libcsv::csv_set_quote with precision 3... ✅
Solving libcsv::csv_get_delim with precision 3... ✅
Solving libcsv::csv_get_quote with precision 3... ✅
Solving libcsv::csv_set_space_func with precision 3... ✅
Solving libcsv::csv_set_term_func with precision 3... ✅
Solving libcsv::csv_set_realloc_func with precision 3... ✅
Solving libcsv::csv_set_free_func with precision 3... ✅
Solving libcsv::csv_set_blk_size with precision 3... ✅
Solving libcsv::csv_get_buffer_size with precision 3... ✅
Solving libcsv::csv_increase_buffer with precision 3... ✅
Solving libcsv::csv_parse with precision 3... ✅
Solving libcsv::csv_write with precision 3... ✅
Solving libcsv::csv_fwrite with precision 3... ✅
Solving libcsv::csv_write2 with precision 3... ✅
Solving libcsv::csv_fwrite2 with precision 3... ✅
libcsv::csv_error: (& &) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (& &) -> _
libcsv::csv_set_opts: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_init: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_free: (& &) -> _
libcsv::csv_fini: (&uniq & ↓ &uniq &, _, _, &) -> _
libcsv::csv_set_delim: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_quote: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_delim: (& &) -> _
libcsv::csv_get_quote: (& &) -> _
libcsv::csv_set_space_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_term_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_realloc_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_free_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_blk_size: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_buffer_size: (& &) -> _
libcsv::csv_increase_buffer: (& &) -> _
libcsv::csv_parse: (&uniq & ↓ &uniq &, &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq & & & & & & ↓ &uniq & & & & & &, &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (& & & & & & &, &, _, _) -> _
Solving libcsv::csv_error with precision 3... ✅
Solving libcsv::csv_strerror with precision 3... ✅
Solving libcsv::csv_get_opts with precision 3... ✅
Solving libcsv::csv_set_opts with precision 3... ✅
Solving libcsv::csv_init with precision 3... ✅
Solving libcsv::csv_free with precision 3... ✅
Solving libcsv::csv_fini with precision 3... ✅
Solving libcsv::csv_set_delim with precision 3... ✅
Solving libcsv::csv_set_quote with precision 3... ✅
Solving libcsv::csv_get_delim with precision 3... ✅
Solving libcsv::csv_get_quote with precision 3... ✅
Solving libcsv::csv_set_space_func with precision 3... ✅
Solving libcsv::csv_set_term_func with precision 3... ✅
Solving libcsv::csv_set_realloc_func with precision 3... ✅
Solving libcsv::csv_set_free_func with precision 3... ✅
Solving libcsv::csv_set_blk_size with precision 3... ✅
Solving libcsv::csv_get_buffer_size with precision 3... ✅
Solving libcsv::csv_increase_buffer with precision 3... ✅
Solving libcsv::csv_parse with precision 3... ✅
Solving libcsv::csv_write with precision 3... ✅
Solving libcsv::csv_fwrite with precision 3... ✅
Solving libcsv::csv_write2 with precision 3... ✅
Solving libcsv::csv_fwrite2 with precision 3... ✅
libcsv::csv_error: (& &) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (& &) -> _
libcsv::csv_set_opts: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_init: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_free: (& &) -> _
libcsv::csv_fini: (&uniq & ↓ &uniq &, _, _, &) -> _
libcsv::csv_set_delim: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_quote: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_delim: (& &) -> _
libcsv::csv_get_quote: (& &) -> _
libcsv::csv_set_space_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_term_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_realloc_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_free_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_blk_size: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_buffer_size: (& &) -> _
libcsv::csv_increase_buffer: (& &) -> _
libcsv::csv_parse: (&uniq & ↓ &uniq &, &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq & & & & & & ↓ &uniq & & & & & &, &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (& & & & & & &, &, _, _) -> _
Solving libcsv::csv_error with precision 3... ✅
Solving libcsv::csv_strerror with precision 3... ✅
Solving libcsv::csv_get_opts with precision 3... ✅
Solving libcsv::csv_set_opts with precision 3... ✅
Solving libcsv::csv_init with precision 3... ✅
Solving libcsv::csv_free with precision 3... ✅
Solving libcsv::csv_fini with precision 3... ✅
Solving libcsv::csv_set_delim with precision 3... ✅
Solving libcsv::csv_set_quote with precision 3... ✅
Solving libcsv::csv_get_delim with precision 3... ✅
Solving libcsv::csv_get_quote with precision 3... ✅
Solving libcsv::csv_set_space_func with precision 3... ✅
Solving libcsv::csv_set_term_func with precision 3... ✅
Solving libcsv::csv_set_realloc_func with precision 3... ✅
Solving libcsv::csv_set_free_func with precision 3... ✅
Solving libcsv::csv_set_blk_size with precision 3... ✅
Solving libcsv::csv_get_buffer_size with precision 3... ✅
Solving libcsv::csv_increase_buffer with precision 3... ✅
Solving libcsv::csv_parse with precision 3... ✅
Solving libcsv::csv_write with precision 3... ✅
Solving libcsv::csv_fwrite with precision 3... ✅
Solving libcsv::csv_write2 with precision 3... ✅
Solving libcsv::csv_fwrite2 with precision 3... ✅
libcsv::csv_error: (& &) -> _
libcsv::csv_strerror: (_) -> &
libcsv::csv_get_opts: (& &) -> _
libcsv::csv_set_opts: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_init: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_free: (& &) -> _
libcsv::csv_fini: (&uniq & ↓ &uniq &, _, _, &) -> _
libcsv::csv_set_delim: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_quote: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_delim: (& &) -> _
libcsv::csv_get_quote: (& &) -> _
libcsv::csv_set_space_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_term_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_realloc_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_free_func: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_set_blk_size: (&uniq & ↓ &uniq &, _) -> _
libcsv::csv_get_buffer_size: (& &) -> _
libcsv::csv_increase_buffer: (& &) -> _
libcsv::csv_parse: (&uniq & ↓ &uniq &, &, _, _, _, &) -> _
libcsv::csv_write: (&uniq  ↓ &uniq , _, &, _) -> _
libcsv::csv_fwrite: (&uniq & & & & & & ↓ &uniq & & & & & &, &, _) -> _
libcsv::csv_write2: (&, _, &, _, _) -> _
libcsv::csv_fwrite2: (& & & & & & &, &, _, _) -> _
@DefId(0:18 ~ c2rust_lib[1043]::libcsv::csv_error)
bb0:
  _8 = _1
  using: _1@Entry
  _7 = std::ptr::const_ptr::<impl *const libcsv::csv_parser>::is_null(move _8) -> bb4
  using: _8@Mir(bb0[0])
bb1:
  _5 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _14 = const b"received null csv_parser\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb2[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb2[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb2[2])
  _10 = std::ptr::const_ptr::<impl *const i8>::is_null(move _11) -> bb5
  using: _11@Mir(bb2[3])
bb3:
  _4 = Not(move _5)
  using: _5@Phi(bb3)
  _3 = move _4 as i32 (IntToInt)
  using: _4@Mir(bb3[0])
  _2 = move _3 as i64 (IntToInt)
  using: _3@Mir(bb3[1])
  switchInt(move _2) -> [0: bb7, otherwise: bb6]
  using: _2@Mir(bb3[2])
bb4:
  _6 = Not(move _7)
  using: _7@Mir(bb0[1])
  switchInt(move _6) -> [0: bb1, otherwise: bb2]
  using: _6@Mir(bb4[0])
bb5:
  _9 = Not(move _10)
  using: _10@Mir(bb2[4])
  _5 = move _9
  using: _9@Mir(bb5[0])
  goto -> bb3
  using: 
bb6:
  _19 = const b"csv_error\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb6[0])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb6[1])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb6[2])
  _23 = const b"libcsv.c\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb6[4])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb6[5])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb6[6])
  _24 = const 82_i32
  using: 
  _28 = const b"p && \"received null csv_parser\"\x00"
  using: 
  _27 = &raw const (*_28)
  using: _28@Mir(bb6[9])
  _26 = move _27 as *const u8 (Pointer(ArrayToPointer))
  using: _27@Mir(bb6[10])
  _25 = move _26 as *const i8 (PtrToPtr)
  using: _26@Mir(bb6[11])
  _15 = libcsv::__assert_rtn(move _16, move _20, move _24, move _25)
  using: _16@Mir(bb6[3]), _20@Mir(bb6[7]), _24@Mir(bb6[8]), _25@Mir(bb6[12])
bb7:
  _0 = ((*_1).6: i32)
  using: _1@Entry
  return
  using: _0@Mir(bb7[0])
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call libcsv::__assert_rtn @ workspace/libcsv/rust/libcsv.rs:95:9: 99:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:19 ~ c2rust_lib[1043]::libcsv::csv_strerror)
bb0:
  _4 = _1
  using: _1@Entry
  _5 = const 4_i32
  using: 
  _3 = Ge(move _4, move _5)
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1])
  switchInt(move _3) -> [0: bb2, otherwise: bb1]
  using: _3@Mir(bb0[2])
bb1:
  _2 = const true
  using: 
  goto -> bb3
  using: 
bb2:
  _7 = _1
  using: _1@Entry
  _8 = const 0_i32
  using: 
  _6 = Lt(move _7, move _8)
  using: _7@Mir(bb2[0]), _8@Mir(bb2[1])
  _2 = move _6
  using: _6@Mir(bb2[2])
  goto -> bb3
  using: 
bb3:
  switchInt(move _2) -> [0: bb5, otherwise: bb4]
  using: _2@Phi(bb3)
bb4:
  _9 = const {alloc7: *mut [*const i8; 5]}
  using: 
  _10 = const 4_usize
  using: 
  _0 = (*_9)[_10]
  using: _9@Mir(bb4[0]), _10@Mir(bb4[1])
  goto -> bb7
  using: 
bb5:
  _11 = const {alloc7: *mut [*const i8; 5]}
  using: 
  _13 = _1
  using: _1@Phi(bb3)
  _12 = move _13 as usize (IntToInt)
  using: _13@Mir(bb5[1])
  _14 = const 5_usize
  using: 
  _15 = Lt(_12, _14)
  using: _12@Mir(bb5[2]), _14@Mir(bb5[3])
  assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _12) -> bb6
  using: _15@Entry, _14@Entry, _12@Entry
bb6:
  _0 = (*_11)[_12]
  using: _11@Mir(bb5[0]), _12@Mir(bb5[2])
  goto -> bb7
  using: 
bb7:
  return
  using: _0@Phi(bb7)
@DefId(0:20 ~ c2rust_lib[1043]::libcsv::csv_get_opts)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = std::ptr::const_ptr::<impl *const libcsv::csv_parser>::is_null(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  switchInt(move _2) -> [0: bb3, otherwise: bb2]
  using: _2@Mir(bb0[1])
bb2:
  _6 = _1
  using: _1@Entry
  _5 = move _6 as usize (PointerExposeAddress)
  using: _6@Mir(bb2[0])
  _4 = Eq(move _5, const 0_usize)
  using: _5@Mir(bb2[1])
  assume(move _4)
  using: _4@Mir(bb2[2])
  _0 = const -1_i32
  using: 
  goto -> bb4
  using: 
bb3:
  _7 = ((*_1).7: u8)
  using: _1@Entry
  _0 = move _7 as i32 (IntToInt)
  using: _7@Mir(bb3[0])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Phi(bb4)
@DefId(0:21 ~ c2rust_lib[1043]::libcsv::csv_set_opts)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _4) -> bb1
  using: _4@Mir(bb0[0])
bb1:
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb0[1])
bb2:
  _7 = _1
  using: _1@Entry
  _6 = move _7 as usize (PointerExposeAddress)
  using: _7@Mir(bb2[0])
  _5 = Eq(move _6, const 0_usize)
  using: _6@Mir(bb2[1])
  assume(move _5)
  using: _5@Mir(bb2[2])
  _0 = const -1_i32
  using: 
  goto -> bb4
  using: 
bb3:
  _8 = _2
  using: _2@Entry
  ((*_1).7: u8) = move _8
  using: _1@Entry, _8@Mir(bb3[0])
  _0 = const 0_i32
  using: 
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Phi(bb4)
@DefId(0:22 ~ c2rust_lib[1043]::libcsv::csv_init)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _4) -> bb1
  using: _4@Mir(bb0[0])
bb1:
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb0[1])
bb2:
  _7 = _1
  using: _1@Entry
  _6 = move _7 as usize (PointerExposeAddress)
  using: _7@Mir(bb2[0])
  _5 = Eq(move _6, const 0_usize)
  using: _6@Mir(bb2[1])
  assume(move _5)
  using: _5@Mir(bb2[2])
  _0 = const -1_i32
  using: 
  goto -> bb4
  using: 
bb3:
  ((*_1).3: *mut u8) = const 0_usize as *mut u8 (PointerFromExposedAddress)
  using: _1@Entry
  _8 = const 0_i32
  using: 
  ((*_1).0: i32) = move _8
  using: _1@Entry, _8@Mir(bb3[1])
  _9 = const 0_i32
  using: 
  ((*_1).1: i32) = move _9
  using: _1@Entry, _9@Mir(bb3[3])
  _10 = const 0_i32
  using: 
  ((*_1).2: u64) = move _10 as u64 (IntToInt)
  using: _1@Entry, _10@Mir(bb3[5])
  _11 = const 0_i32
  using: 
  ((*_1).4: u64) = move _11 as u64 (IntToInt)
  using: _1@Entry, _11@Mir(bb3[7])
  _12 = const 0_i32
  using: 
  ((*_1).5: u64) = move _12 as u64 (IntToInt)
  using: _1@Entry, _12@Mir(bb3[9])
  _13 = const 0_i32
  using: 
  ((*_1).6: i32) = move _13
  using: _1@Entry, _13@Mir(bb3[11])
  _14 = _2
  using: _2@Entry
  ((*_1).7: u8) = move _14
  using: _1@Entry, _14@Mir(bb3[13])
  _15 = const 34_i32
  using: 
  ((*_1).8: u8) = move _15 as u8 (IntToInt)
  using: _1@Entry, _15@Mir(bb3[15])
  _16 = const 44_i32
  using: 
  ((*_1).9: u8) = move _16 as u8 (IntToInt)
  using: _1@Entry, _16@Mir(bb3[17])
  Deinit(_17)
  using: 
  discriminant(_17) = 0
  using: 
  ((*_1).10: std::option::Option<unsafe extern "C" fn(u8) -> i32>) = move _17
  using: _1@Entry, _17@Mir(bb3[19])
  Deinit(_18)
  using: 
  discriminant(_18) = 0
  using: 
  ((*_1).11: std::option::Option<unsafe extern "C" fn(u8) -> i32>) = move _18
  using: _1@Entry, _18@Mir(bb3[22])
  _19 = const 128_i32
  using: 
  ((*_1).12: u64) = move _19 as u64 (IntToInt)
  using: _1@Entry, _19@Mir(bb3[25])
  Deinit(_20)
  using: 
  discriminant(_20) = 0
  using: 
  ((*_1).13: std::option::Option<unsafe extern "C" fn(u64) -> *mut std::ffi::c_void>) = move _20
  using: _1@Entry, _20@Mir(bb3[27])
  _22 = libcsv::realloc as unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void (Pointer(ReifyFnPointer))
  using: 
  Deinit(_21)
  using: 
  ((_21 as Some).0: unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void) = move _22
  using: _22@Mir(bb3[30])
  discriminant(_21) = 1
  using: 
  ((*_1).14: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>) = move _21
  using: _1@Entry, _21@Mir(bb3[31])
  _24 = libcsv::free as unsafe extern "C" fn(*mut std::ffi::c_void) (Pointer(ReifyFnPointer))
  using: 
  Deinit(_23)
  using: 
  ((_23 as Some).0: unsafe extern "C" fn(*mut std::ffi::c_void)) = move _24
  using: _24@Mir(bb3[35])
  discriminant(_23) = 1
  using: 
  ((*_1).15: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void)>) = move _23
  using: _1@Entry, _23@Mir(bb3[36])
  _0 = const 0_i32
  using: 
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Phi(bb4)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_17) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_17) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_18) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_18) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_20) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_20) = 0 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_21) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_21) = 1 is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m Deinit(_23) is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m discriminant(_23) = 1 is ignored
@DefId(0:23 ~ c2rust_lib[1043]::libcsv::csv_free)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  switchInt(move _2) -> [0: bb3, otherwise: bb2]
  using: _2@Mir(bb0[1])
bb2:
  _6 = _1
  using: _1@Entry
  _5 = move _6 as usize (PointerExposeAddress)
  using: _6@Mir(bb2[0])
  _4 = Eq(move _5, const 0_usize)
  using: _5@Mir(bb2[1])
  assume(move _4)
  using: _4@Mir(bb2[2])
  goto -> bb12
  using: 
bb3:
  _10 = ((*_1).3: *mut u8)
  using: _1@Entry
  _9 = std::ptr::mut_ptr::<impl *mut u8>::is_null(move _10) -> bb7
  using: _10@Mir(bb3[0])
bb4:
  _7 = const false
  using: 
  goto -> bb6
  using: 
bb5:
  _12 = &((*_1).15: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void)>)
  using: _1@Entry
  _11 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void)>::is_some(move _12) -> bb8
  using: _12@Mir(bb5[0])
bb6:
  switchInt(move _7) -> [0: bb11, otherwise: bb9]
  using: _7@Phi(bb6)
bb7:
  _8 = Not(move _9)
  using: _9@Mir(bb3[1])
  switchInt(move _8) -> [0: bb4, otherwise: bb5]
  using: _8@Mir(bb7[0])
bb8:
  _7 = move _11
  using: _11@Mir(bb5[1])
  goto -> bb6
  using: 
bb9:
  _15 = ((*_1).15: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void)>)
  using: _1@Phi(bb6)
  _17 = const "non-null function pointer"
  using: 
  _16 = _17
  using: _17@Mir(bb9[1])
  _14 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void)>::expect(move _15, move _16) -> bb10
  using: _15@Mir(bb9[0]), _16@Mir(bb9[2])
bb10:
  _19 = ((*_1).3: *mut u8)
  using: _1@Phi(bb6)
  _18 = move _19 as *mut std::ffi::c_void (PtrToPtr)
  using: _19@Mir(bb10[0])
  _13 = move _14(move _18) -> bb11
  using: _14@Entry, _18@Mir(bb10[1])
bb11:
  ((*_1).3: *mut u8) = const 0_usize as *mut u8 (PointerFromExposedAddress)
  using: _1@Phi(bb11)
  _20 = const 0_i32
  using: 
  ((*_1).5: u64) = move _20 as u64 (IntToInt)
  using: _1@Phi(bb11), _20@Mir(bb11[1])
  goto -> bb12
  using: 
bb12:
  return
  using: _0@Entry
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:159:52: 159:61 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:160:24: 160:59 (#0) by default
@DefId(0:24 ~ c2rust_lib[1043]::libcsv::csv_fini)
bb0:
  _6 = _1
  using: _1@Entry
  _5 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _6) -> bb1
  using: _6@Mir(bb0[0])
bb1:
  switchInt(move _5) -> [0: bb3, otherwise: bb2]
  using: _5@Mir(bb0[1])
bb2:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb2[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb2[1])
  assume(move _7)
  using: _7@Mir(bb2[2])
  _0 = const -1_i32
  using: 
  goto -> bb50
  using: 
bb3:
  _10 = ((*_1).1: i32)
  using: _1@Entry
  _11 = ((*_1).0: i32)
  using: _1@Entry
  _12 = ((*_1).2: u64)
  using: _1@Entry
  _13 = ((*_1).4: u64)
  using: _1@Entry
  _18 = _11
  using: _11@Mir(bb3[1])
  _19 = const 2_i32
  using: 
  _17 = Eq(move _18, move _19)
  using: _18@Mir(bb3[4]), _19@Mir(bb3[5])
  switchInt(move _17) -> [0: bb10, otherwise: bb11]
  using: _17@Mir(bb3[6])
bb4:
  _14 = const false
  using: 
  goto -> bb6
  using: 
bb5:
  _30 = ((*_1).7: u8)
  using: _1@Phi(bb9)
  _29 = move _30 as i32 (IntToInt)
  using: _30@Mir(bb5[0])
  _31 = const 4_i32
  using: 
  _28 = BitAnd(move _29, move _31)
  using: _29@Mir(bb5[1]), _31@Mir(bb5[2])
  _27 = Ne(move _28, const 0_i32)
  using: _28@Mir(bb5[3])
  _14 = move _27
  using: _27@Mir(bb5[4])
  goto -> bb6
  using: 
bb6:
  switchInt(move _14) -> [0: bb14, otherwise: bb13]
  using: _14@Phi(bb6)
bb7:
  _15 = const false
  using: 
  goto -> bb9
  using: 
bb8:
  _25 = ((*_1).7: u8)
  using: _1@Phi(bb12)
  _24 = move _25 as i32 (IntToInt)
  using: _25@Mir(bb8[0])
  _26 = const 1_i32
  using: 
  _23 = BitAnd(move _24, move _26)
  using: _24@Mir(bb8[1]), _26@Mir(bb8[2])
  _22 = Ne(move _23, const 0_i32)
  using: _23@Mir(bb8[3])
  _15 = move _22
  using: _22@Mir(bb8[4])
  goto -> bb9
  using: 
bb9:
  switchInt(move _15) -> [0: bb4, otherwise: bb5]
  using: _15@Phi(bb9)
bb10:
  _16 = const false
  using: 
  goto -> bb12
  using: 
bb11:
  _21 = ((*_1).1: i32)
  using: _1@Entry
  _20 = Ne(move _21, const 0_i32)
  using: _21@Mir(bb11[0])
  _16 = move _20
  using: _20@Mir(bb11[1])
  goto -> bb12
  using: 
bb12:
  switchInt(move _16) -> [0: bb7, otherwise: bb8]
  using: _16@Phi(bb12)
bb13:
  _32 = const 1_i32
  using: 
  ((*_1).6: i32) = move _32
  using: _1@Phi(bb6), _32@Mir(bb13[0])
  _0 = const -1_i32
  using: 
  goto -> bb50
  using: 
bb14:
  switchInt(_11) -> [3: bb15, 1: bb18, 2: bb18, 0: bb19, otherwise: bb19]
  using: _11@Mir(bb3[1])
bb15:
  _35 = ((*_1).4: u64)
  using: _1@Phi(bb6)
  _37 = ((*_1).2: u64)
  using: _1@Phi(bb6)
  _38 = const 1_u64
  using: 
  _36 = core::num::<impl u64>::wrapping_add(move _37, move _38) -> bb16
  using: _37@Mir(bb15[1]), _38@Mir(bb15[2])
bb16:
  _34 = core::num::<impl u64>::wrapping_sub(move _35, move _36) -> bb17
  using: _35@Mir(bb15[0]), _36@Mir(bb15[3])
bb17:
  ((*_1).4: u64) = move _34
  using: _1@Phi(bb6), _34@Mir(bb16[0])
  _39 = ((*_1).4: u64)
  using: _1@Phi(bb6)
  _13 = move _39
  using: _39@Mir(bb17[1])
  _33 = const 4830382299733546467_u64
  using: 
  goto -> bb20
  using: 
bb18:
  _33 = const 4830382299733546467_u64
  using: 
  goto -> bb20
  using: 
bb19:
  _33 = const 4761528863920922185_u64
  using: 
  goto -> bb20
  using: 
bb20:
  switchInt(_33) -> [4830382299733546467: bb21, otherwise: bb49]
  using: _33@Phi(bb20)
bb21:
  _40 = _10
  using: _10@Mir(bb3[0])
  switchInt(move _40) -> [0: bb22, otherwise: bb24]
  using: _40@Mir(bb21[0])
bb22:
  _42 = _13
  using: _13@Phi(bb20)
  _43 = _12
  using: _12@Mir(bb3[2])
  _41 = core::num::<impl u64>::wrapping_sub(move _42, move _43) -> bb23
  using: _42@Mir(bb22[0]), _43@Mir(bb22[1])
bb23:
  _13 = move _41
  using: _41@Mir(bb22[2])
  goto -> bb24
  using: 
bb24:
  _46 = ((*_1).7: u8)
  using: _1@Phi(bb20)
  _45 = move _46 as i32 (IntToInt)
  using: _46@Mir(bb24[0])
  _47 = const 8_i32
  using: 
  _44 = BitAnd(move _45, move _47)
  using: _45@Mir(bb24[1]), _47@Mir(bb24[2])
  switchInt(move _44) -> [0: bb27, otherwise: bb25]
  using: _44@Mir(bb24[3])
bb25:
  _48 = const 0_i32
  using: 
  _50 = ((*_1).3: *mut u8)
  using: _1@Phi(bb20)
  _52 = _13
  using: _13@Phi(bb24)
  _51 = move _52 as isize (IntToInt)
  using: _52@Mir(bb25[2])
  _49 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _50, move _51) -> bb26
  using: _50@Mir(bb25[1]), _51@Mir(bb25[3])
bb26:
  (*_49) = move _48 as u8 (IntToInt)
  using: _49@Mir(bb25[4]), _48@Mir(bb25[0])
  goto -> bb27
  using: 
bb27:
  _57 = &_2
  using: _2@Entry
  _56 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _57) -> bb37
  using: _57@Mir(bb27[0])
bb28:
  _53 = const false
  using: 
  goto -> bb30
  using: 
bb29:
  _66 = _13
  using: _13@Phi(bb27)
  _67 = const 0_u64
  using: 
  _65 = Eq(move _66, move _67)
  using: _66@Mir(bb29[0]), _67@Mir(bb29[1])
  _53 = move _65
  using: _65@Mir(bb29[2])
  goto -> bb30
  using: 
bb30:
  switchInt(move _53) -> [0: bb40, otherwise: bb38]
  using: _53@Phi(bb30)
bb31:
  _54 = const false
  using: 
  goto -> bb33
  using: 
bb32:
  _64 = _10
  using: _10@Mir(bb3[0])
  _63 = Eq(move _64, const 0_i32)
  using: _64@Mir(bb32[0])
  _54 = move _63
  using: _63@Mir(bb32[1])
  goto -> bb33
  using: 
bb33:
  switchInt(move _54) -> [0: bb28, otherwise: bb29]
  using: _54@Phi(bb33)
bb34:
  _55 = const false
  using: 
  goto -> bb36
  using: 
bb35:
  _61 = ((*_1).7: u8)
  using: _1@Phi(bb27)
  _60 = move _61 as i32 (IntToInt)
  using: _61@Mir(bb35[0])
  _62 = const 16_i32
  using: 
  _59 = BitAnd(move _60, move _62)
  using: _60@Mir(bb35[1]), _62@Mir(bb35[2])
  _58 = Ne(move _59, const 0_i32)
  using: _59@Mir(bb35[3])
  _55 = move _58
  using: _58@Mir(bb35[4])
  goto -> bb36
  using: 
bb36:
  switchInt(move _55) -> [0: bb31, otherwise: bb32]
  using: _55@Phi(bb36)
bb37:
  switchInt(move _56) -> [0: bb34, otherwise: bb35]
  using: _56@Mir(bb27[1])
bb38:
  _70 = _2
  using: _2@Entry
  _72 = const "non-null function pointer"
  using: 
  _71 = _72
  using: _72@Mir(bb38[1])
  _69 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _70, move _71) -> bb39
  using: _70@Mir(bb38[0]), _71@Mir(bb38[2])
bb39:
  _73 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _74 = _13
  using: _13@Phi(bb30)
  _75 = _4
  using: _4@Entry
  _68 = move _69(move _73, move _74, move _75) -> bb44
  using: _69@Entry, _73@Mir(bb39[0]), _74@Mir(bb39[1]), _75@Mir(bb39[2])
bb40:
  _77 = &_2
  using: _2@Entry
  _76 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _77) -> bb41
  using: _77@Mir(bb40[0])
bb41:
  switchInt(move _76) -> [0: bb44, otherwise: bb42]
  using: _76@Mir(bb40[1])
bb42:
  _80 = _2
  using: _2@Entry
  _82 = const "non-null function pointer"
  using: 
  _81 = _82
  using: _82@Mir(bb42[1])
  _79 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _80, move _81) -> bb43
  using: _80@Mir(bb42[0]), _81@Mir(bb42[2])
bb43:
  _84 = ((*_1).3: *mut u8)
  using: _1@Phi(bb36)
  _83 = move _84 as *mut std::ffi::c_void (PtrToPtr)
  using: _84@Mir(bb43[0])
  _85 = _13
  using: _13@Phi(bb30)
  _86 = _4
  using: _4@Entry
  _78 = move _79(move _83, move _85, move _86) -> bb44
  using: _79@Entry, _83@Mir(bb43[1]), _85@Mir(bb43[2]), _86@Mir(bb43[3])
bb44:
  _11 = const 1_i32
  using: 
  _12 = const 0_u64
  using: 
  _10 = const 0_i32
  using: 
  _13 = const 0_u64
  using: 
  _88 = &_3
  using: _3@Entry
  _87 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::is_some(move _88) -> bb45
  using: _88@Mir(bb44[4])
bb45:
  switchInt(move _87) -> [0: bb48, otherwise: bb46]
  using: _87@Mir(bb44[5])
bb46:
  _91 = _3
  using: _3@Entry
  _93 = const "non-null function pointer"
  using: 
  _92 = _93
  using: _93@Mir(bb46[1])
  _90 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::expect(move _91, move _92) -> bb47
  using: _91@Mir(bb46[0]), _92@Mir(bb46[2])
bb47:
  _94 = const -1_i32
  using: 
  _95 = _4
  using: _4@Phi(bb44)
  _89 = move _90(move _94, move _95) -> bb48
  using: _90@Entry, _94@Mir(bb47[0]), _95@Mir(bb47[1])
bb48:
  _11 = const 0_i32
  using: 
  _12 = const 0_u64
  using: 
  _10 = const 0_i32
  using: 
  _13 = const 0_u64
  using: 
  goto -> bb49
  using: 
bb49:
  _96 = const 0_i32
  using: 
  ((*_1).6: i32) = move _96
  using: _1@Phi(bb49), _96@Mir(bb49[0])
  _97 = ((*_1).6: i32)
  using: _1@Phi(bb49)
  ((*_1).4: u64) = move _97 as u64 (IntToInt)
  using: _1@Phi(bb49), _97@Mir(bb49[2])
  _98 = ((*_1).4: u64)
  using: _1@Phi(bb49)
  ((*_1).1: i32) = move _98 as i32 (IntToInt)
  using: _1@Phi(bb49), _98@Mir(bb49[4])
  _99 = ((*_1).1: i32)
  using: _1@Phi(bb49)
  ((*_1).2: u64) = move _99 as u64 (IntToInt)
  using: _1@Phi(bb49), _99@Mir(bb49[6])
  _100 = const 0_i32
  using: 
  ((*_1).0: i32) = move _100
  using: _1@Phi(bb49), _100@Mir(bb49[8])
  _0 = const 0_i32
  using: 
  goto -> bb50
  using: 
bb50:
  return
  using: _0@Phi(bb50)
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:202:70: 205:101 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:202:45: 205:102 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:223:58: 223:78 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:227:33: 227:59 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:230:20: 230:29 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:234:21: 234:56 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:237:27: 237:36 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:238:21: 238:56 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:246:20: 246:29 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:247:21: 247:56 (#0) by default
@DefId(0:25 ~ c2rust_lib[1043]::libcsv::csv_set_delim)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _6 = _2
  using: _2@Entry
  ((*_1).9: u8) = move _6
  using: _1@Entry, _6@Mir(bb2[0])
  goto -> bb4
  using: 
bb3:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb3[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb3[1])
  assume(move _7)
  using: _7@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Entry
@DefId(0:26 ~ c2rust_lib[1043]::libcsv::csv_set_quote)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _6 = _2
  using: _2@Entry
  ((*_1).8: u8) = move _6
  using: _1@Entry, _6@Mir(bb2[0])
  goto -> bb4
  using: 
bb3:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb3[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb3[1])
  assume(move _7)
  using: _7@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Entry
@DefId(0:27 ~ c2rust_lib[1043]::libcsv::csv_get_delim)
bb0:
  _8 = _1
  using: _1@Entry
  _7 = std::ptr::const_ptr::<impl *const libcsv::csv_parser>::is_null(move _8) -> bb4
  using: _8@Mir(bb0[0])
bb1:
  _5 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _14 = const b"received null csv_parser\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb2[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb2[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb2[2])
  _10 = std::ptr::const_ptr::<impl *const i8>::is_null(move _11) -> bb5
  using: _11@Mir(bb2[3])
bb3:
  _4 = Not(move _5)
  using: _5@Phi(bb3)
  _3 = move _4 as i32 (IntToInt)
  using: _4@Mir(bb3[0])
  _2 = move _3 as i64 (IntToInt)
  using: _3@Mir(bb3[1])
  switchInt(move _2) -> [0: bb7, otherwise: bb6]
  using: _2@Mir(bb3[2])
bb4:
  _6 = Not(move _7)
  using: _7@Mir(bb0[1])
  switchInt(move _6) -> [0: bb1, otherwise: bb2]
  using: _6@Mir(bb4[0])
bb5:
  _9 = Not(move _10)
  using: _10@Mir(bb2[4])
  _5 = move _9
  using: _9@Mir(bb5[0])
  goto -> bb3
  using: 
bb6:
  _19 = const b"csv_get_delim\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb6[0])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb6[1])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb6[2])
  _23 = const b"libcsv.c\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb6[4])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb6[5])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb6[6])
  _24 = const 222_i32
  using: 
  _28 = const b"p && \"received null csv_parser\"\x00"
  using: 
  _27 = &raw const (*_28)
  using: _28@Mir(bb6[9])
  _26 = move _27 as *const u8 (Pointer(ArrayToPointer))
  using: _27@Mir(bb6[10])
  _25 = move _26 as *const i8 (PtrToPtr)
  using: _26@Mir(bb6[11])
  _15 = libcsv::__assert_rtn(move _16, move _20, move _24, move _25)
  using: _16@Mir(bb6[3]), _20@Mir(bb6[7]), _24@Mir(bb6[8]), _25@Mir(bb6[12])
bb7:
  _0 = ((*_1).9: u8)
  using: _1@Entry
  return
  using: _0@Mir(bb7[0])
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call libcsv::__assert_rtn @ workspace/libcsv/rust/libcsv.rs:284:9: 288:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:28 ~ c2rust_lib[1043]::libcsv::csv_get_quote)
bb0:
  _8 = _1
  using: _1@Entry
  _7 = std::ptr::const_ptr::<impl *const libcsv::csv_parser>::is_null(move _8) -> bb4
  using: _8@Mir(bb0[0])
bb1:
  _5 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _14 = const b"received null csv_parser\x00"
  using: 
  _13 = &raw const (*_14)
  using: _14@Mir(bb2[0])
  _12 = move _13 as *const u8 (Pointer(ArrayToPointer))
  using: _13@Mir(bb2[1])
  _11 = move _12 as *const i8 (PtrToPtr)
  using: _12@Mir(bb2[2])
  _10 = std::ptr::const_ptr::<impl *const i8>::is_null(move _11) -> bb5
  using: _11@Mir(bb2[3])
bb3:
  _4 = Not(move _5)
  using: _5@Phi(bb3)
  _3 = move _4 as i32 (IntToInt)
  using: _4@Mir(bb3[0])
  _2 = move _3 as i64 (IntToInt)
  using: _3@Mir(bb3[1])
  switchInt(move _2) -> [0: bb7, otherwise: bb6]
  using: _2@Mir(bb3[2])
bb4:
  _6 = Not(move _7)
  using: _7@Mir(bb0[1])
  switchInt(move _6) -> [0: bb1, otherwise: bb2]
  using: _6@Mir(bb4[0])
bb5:
  _9 = Not(move _10)
  using: _10@Mir(bb2[4])
  _5 = move _9
  using: _9@Mir(bb5[0])
  goto -> bb3
  using: 
bb6:
  _19 = const b"csv_get_quote\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb6[0])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb6[1])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb6[2])
  _23 = const b"libcsv.c\x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb6[4])
  _21 = move _22 as *const u8 (Pointer(ArrayToPointer))
  using: _22@Mir(bb6[5])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb6[6])
  _24 = const 231_i32
  using: 
  _28 = const b"p && \"received null csv_parser\"\x00"
  using: 
  _27 = &raw const (*_28)
  using: _28@Mir(bb6[9])
  _26 = move _27 as *const u8 (Pointer(ArrayToPointer))
  using: _27@Mir(bb6[10])
  _25 = move _26 as *const i8 (PtrToPtr)
  using: _26@Mir(bb6[11])
  _15 = libcsv::__assert_rtn(move _16, move _20, move _24, move _25)
  using: _16@Mir(bb6[3]), _20@Mir(bb6[7]), _24@Mir(bb6[8]), _25@Mir(bb6[12])
bb7:
  _0 = ((*_1).8: u8)
  using: _1@Entry
  return
  using: _0@Mir(bb7[0])
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call libcsv::__assert_rtn @ workspace/libcsv/rust/libcsv.rs:300:9: 304:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
@DefId(0:29 ~ c2rust_lib[1043]::libcsv::csv_set_space_func)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _6 = _2
  using: _2@Entry
  ((*_1).10: std::option::Option<unsafe extern "C" fn(u8) -> i32>) = move _6
  using: _1@Entry, _6@Mir(bb2[0])
  goto -> bb4
  using: 
bb3:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb3[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb3[1])
  assume(move _7)
  using: _7@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Entry
@DefId(0:30 ~ c2rust_lib[1043]::libcsv::csv_set_term_func)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _6 = _2
  using: _2@Entry
  ((*_1).11: std::option::Option<unsafe extern "C" fn(u8) -> i32>) = move _6
  using: _1@Entry, _6@Mir(bb2[0])
  goto -> bb4
  using: 
bb3:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb3[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb3[1])
  assume(move _7)
  using: _7@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Entry
@DefId(0:31 ~ c2rust_lib[1043]::libcsv::csv_set_realloc_func)
bb0:
  _6 = _1
  using: _1@Entry
  _5 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _6) -> bb4
  using: _6@Mir(bb0[0])
bb1:
  _3 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _8 = &_2
  using: _2@Entry
  _7 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>::is_some(move _8) -> bb5
  using: _8@Mir(bb2[0])
bb3:
  switchInt(move _3) -> [0: bb7, otherwise: bb6]
  using: _3@Phi(bb3)
bb4:
  _4 = Not(move _5)
  using: _5@Mir(bb0[1])
  switchInt(move _4) -> [0: bb1, otherwise: bb2]
  using: _4@Mir(bb4[0])
bb5:
  _3 = move _7
  using: _7@Mir(bb2[1])
  goto -> bb3
  using: 
bb6:
  _9 = _2
  using: _2@Phi(bb3)
  ((*_1).14: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>) = move _9
  using: _1@Entry, _9@Mir(bb6[0])
  goto -> bb7
  using: 
bb7:
  return
  using: _0@Entry
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:337:26: 337:35 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
@DefId(0:32 ~ c2rust_lib[1043]::libcsv::csv_set_free_func)
bb0:
  _6 = _1
  using: _1@Entry
  _5 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _6) -> bb4
  using: _6@Mir(bb0[0])
bb1:
  _3 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _8 = &_2
  using: _2@Entry
  _7 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void)>::is_some(move _8) -> bb5
  using: _8@Mir(bb2[0])
bb3:
  switchInt(move _3) -> [0: bb7, otherwise: bb6]
  using: _3@Phi(bb3)
bb4:
  _4 = Not(move _5)
  using: _5@Mir(bb0[1])
  switchInt(move _4) -> [0: bb1, otherwise: bb2]
  using: _4@Mir(bb4[0])
bb5:
  _3 = move _7
  using: _7@Mir(bb2[1])
  goto -> bb3
  using: 
bb6:
  _9 = _2
  using: _2@Phi(bb3)
  ((*_1).15: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void)>) = move _9
  using: _1@Entry, _9@Mir(bb6[0])
  goto -> bb7
  using: 
bb7:
  return
  using: _0@Entry
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:346:26: 346:35 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
@DefId(0:33 ~ c2rust_lib[1043]::libcsv::csv_set_blk_size)
bb0:
  _5 = _1
  using: _1@Entry
  _4 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _5) -> bb1
  using: _5@Mir(bb0[0])
bb1:
  _3 = Not(move _4)
  using: _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb3, otherwise: bb2]
  using: _3@Mir(bb1[0])
bb2:
  _6 = _2
  using: _2@Entry
  ((*_1).12: u64) = move _6
  using: _1@Entry, _6@Mir(bb2[0])
  goto -> bb4
  using: 
bb3:
  _9 = _1
  using: _1@Entry
  _8 = move _9 as usize (PointerExposeAddress)
  using: _9@Mir(bb3[0])
  _7 = Eq(move _8, const 0_usize)
  using: _8@Mir(bb3[1])
  assume(move _7)
  using: _7@Mir(bb3[2])
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Entry
@DefId(0:34 ~ c2rust_lib[1043]::libcsv::csv_get_buffer_size)
bb0:
  _4 = _1
  using: _1@Entry
  _3 = std::ptr::const_ptr::<impl *const libcsv::csv_parser>::is_null(move _4) -> bb1
  using: _4@Mir(bb0[0])
bb1:
  _2 = Not(move _3)
  using: _3@Mir(bb0[1])
  switchInt(move _2) -> [0: bb3, otherwise: bb2]
  using: _2@Mir(bb1[0])
bb2:
  _0 = ((*_1).5: u64)
  using: _1@Entry
  goto -> bb4
  using: 
bb3:
  _7 = _1
  using: _1@Entry
  _6 = move _7 as usize (PointerExposeAddress)
  using: _7@Mir(bb3[0])
  _5 = Eq(move _6, const 0_usize)
  using: _6@Mir(bb3[1])
  assume(move _5)
  using: _5@Mir(bb3[2])
  _0 = const 0_u64
  using: 
  goto -> bb4
  using: 
bb4:
  return
  using: _0@Phi(bb4)
@DefId(0:35 ~ c2rust_lib[1043]::libcsv::csv_increase_buffer)
bb0:
  _3 = _1
  using: _1@Entry
  _2 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _3) -> bb1
  using: _3@Mir(bb0[0])
bb1:
  switchInt(move _2) -> [0: bb3, otherwise: bb2]
  using: _2@Mir(bb0[1])
bb2:
  _6 = _1
  using: _1@Entry
  _5 = move _6 as usize (PointerExposeAddress)
  using: _6@Mir(bb2[0])
  _4 = Eq(move _5, const 0_usize)
  using: _5@Mir(bb2[1])
  assume(move _4)
  using: _4@Mir(bb2[2])
  _0 = const 0_i32
  using: 
  goto -> bb22
  using: 
bb3:
  _8 = &((*_1).14: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>)
  using: _1@Entry
  _7 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>::is_none(move _8) -> bb4
  using: _8@Mir(bb3[0])
bb4:
  switchInt(move _7) -> [0: bb6, otherwise: bb5]
  using: _7@Mir(bb3[1])
bb5:
  _0 = const 0_i32
  using: 
  goto -> bb22
  using: 
bb6:
  _9 = ((*_1).12: u64)
  using: _1@Entry
  _10 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _12 = ((*_1).5: u64)
  using: _1@Entry
  _14 = const u64::MAX
  using: 
  _15 = _9
  using: _9@Mir(bb6[0])
  _13 = core::num::<impl u64>::wrapping_sub(move _14, move _15) -> bb7
  using: _14@Mir(bb6[3]), _15@Mir(bb6[4])
bb7:
  _11 = Ge(move _12, move _13)
  using: _12@Mir(bb6[2]), _13@Mir(bb6[5])
  switchInt(move _11) -> [0: bb10, otherwise: bb8]
  using: _11@Mir(bb7[0])
bb8:
  _17 = const u64::MAX
  using: 
  _18 = ((*_1).5: u64)
  using: _1@Entry
  _16 = core::num::<impl u64>::wrapping_sub(move _17, move _18) -> bb9
  using: _17@Mir(bb8[0]), _18@Mir(bb8[1])
bb9:
  _9 = move _16
  using: _16@Mir(bb8[2])
  goto -> bb10
  using: 
bb10:
  _19 = _9
  using: _9@Phi(bb10)
  switchInt(move _19) -> [0: bb11, otherwise: bb12]
  using: _19@Mir(bb10[0])
bb11:
  _20 = const 3_i32
  using: 
  ((*_1).6: i32) = move _20
  using: _1@Phi(bb10), _20@Mir(bb11[0])
  _0 = const -1_i32
  using: 
  goto -> bb22
  using: 
bb12:
  _23 = ((*_1).14: std::option::Option<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>)
  using: _1@Phi(bb12)
  _25 = const "non-null function pointer"
  using: 
  _24 = _25
  using: _25@Mir(bb12[1])
  _22 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64) -> *mut std::ffi::c_void>::expect(move _23, move _24) -> bb13
  using: _23@Mir(bb12[0]), _24@Mir(bb12[2])
bb13:
  _27 = ((*_1).3: *mut u8)
  using: _1@Phi(bb12)
  _26 = move _27 as *mut std::ffi::c_void (PtrToPtr)
  using: _27@Mir(bb13[0])
  _29 = ((*_1).5: u64)
  using: _1@Phi(bb12)
  _30 = _9
  using: _9@Phi(bb12)
  _28 = core::num::<impl u64>::wrapping_add(move _29, move _30) -> bb14
  using: _29@Mir(bb13[2]), _30@Mir(bb13[3])
bb14:
  _21 = move _22(move _26, move _28) -> bb15
  using: _22@Entry, _26@Mir(bb13[1]), _28@Mir(bb13[4])
bb15:
  _10 = move _21
  using: _21@Mir(bb14[0])
  _33 = _10
  using: _10@Mir(bb15[0])
  _32 = std::ptr::mut_ptr::<impl *mut std::ffi::c_void>::is_null(move _33) -> bb16
  using: _33@Mir(bb15[1])
bb16:
  _31 = Not(move _32)
  using: _32@Mir(bb15[2])
  switchInt(move _31) -> [0: bb18, otherwise: bb17]
  using: _31@Mir(bb16[0])
bb17:
  _42 = _10
  using: _10@Mir(bb15[0])
  ((*_1).3: *mut u8) = move _42 as *mut u8 (PtrToPtr)
  using: _1@Phi(bb12), _42@Mir(bb17[0])
  _44 = ((*_1).5: u64)
  using: _1@Phi(bb12)
  _45 = _9
  using: _9@Phi(bb12)
  _43 = core::num::<impl u64>::wrapping_add(move _44, move _45) -> bb21
  using: _44@Mir(bb17[2]), _45@Mir(bb17[3])
bb18:
  _36 = _10
  using: _10@Mir(bb15[0])
  _35 = move _36 as usize (PointerExposeAddress)
  using: _36@Mir(bb18[0])
  _34 = Eq(move _35, const 0_usize)
  using: _35@Mir(bb18[1])
  assume(move _34)
  using: _34@Mir(bb18[2])
  _38 = _9
  using: _9@Phi(bb12)
  _39 = const 2_u64
  using: 
  _37 = core::num::<impl u64>::wrapping_div(move _38, move _39) -> bb19
  using: _38@Mir(bb18[4]), _39@Mir(bb18[5])
bb19:
  _9 = move _37
  using: _37@Mir(bb18[6])
  _40 = _9
  using: _9@Mir(bb19[0])
  switchInt(move _40) -> [0: bb20, otherwise: bb12]
  using: _40@Mir(bb19[1])
bb20:
  _41 = const 2_i32
  using: 
  ((*_1).6: i32) = move _41
  using: _1@Phi(bb12), _41@Mir(bb20[0])
  _0 = const -1_i32
  using: 
  goto -> bb22
  using: 
bb21:
  ((*_1).5: u64) = move _43
  using: _1@Phi(bb12), _43@Mir(bb17[4])
  _0 = const 0_i32
  using: 
  goto -> bb22
  using: 
bb22:
  return
  using: _0@Phi(bb22)
rewrite call std::option::Option::<T>::is_none @ workspace/libcsv/rust/libcsv.rs:364:26: 364:35 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:373:60: 373:80 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:376:41: 376:70 (#0) by default
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:384:31: 384:66 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:387:83: 387:103 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:404:52: 404:72 (#0) by default
rewrite call core::num::<impl u64>::wrapping_div @ workspace/libcsv/rust/libcsv.rs:391:41: 392:72 (#0) by default
@DefId(0:36 ~ c2rust_lib[1043]::libcsv::csv_parse)
bb0:
  _13 = _1
  using: _1@Entry
  _12 = std::ptr::mut_ptr::<impl *mut libcsv::csv_parser>::is_null(move _13) -> bb4
  using: _13@Mir(bb0[0])
bb1:
  _10 = const false
  using: 
  goto -> bb3
  using: 
bb2:
  _19 = const b"received null csv_parser\x00"
  using: 
  _18 = &raw const (*_19)
  using: _19@Mir(bb2[0])
  _17 = move _18 as *const u8 (Pointer(ArrayToPointer))
  using: _18@Mir(bb2[1])
  _16 = move _17 as *const i8 (PtrToPtr)
  using: _17@Mir(bb2[2])
  _15 = std::ptr::const_ptr::<impl *const i8>::is_null(move _16) -> bb5
  using: _16@Mir(bb2[3])
bb3:
  _9 = Not(move _10)
  using: _10@Phi(bb3)
  _8 = move _9 as i32 (IntToInt)
  using: _9@Mir(bb3[0])
  _7 = move _8 as i64 (IntToInt)
  using: _8@Mir(bb3[1])
  switchInt(move _7) -> [0: bb7, otherwise: bb6]
  using: _7@Mir(bb3[2])
bb4:
  _11 = Not(move _12)
  using: _12@Mir(bb0[1])
  switchInt(move _11) -> [0: bb1, otherwise: bb2]
  using: _11@Mir(bb4[0])
bb5:
  _14 = Not(move _15)
  using: _15@Mir(bb2[4])
  _10 = move _14
  using: _14@Mir(bb5[0])
  goto -> bb3
  using: 
bb6:
  _24 = const b"csv_parse\x00"
  using: 
  _23 = &raw const (*_24)
  using: _24@Mir(bb6[0])
  _22 = move _23 as *const u8 (Pointer(ArrayToPointer))
  using: _23@Mir(bb6[1])
  _21 = move _22 as *const i8 (PtrToPtr)
  using: _22@Mir(bb6[2])
  _28 = const b"libcsv.c\x00"
  using: 
  _27 = &raw const (*_28)
  using: _28@Mir(bb6[4])
  _26 = move _27 as *const u8 (Pointer(ArrayToPointer))
  using: _27@Mir(bb6[5])
  _25 = move _26 as *const i8 (PtrToPtr)
  using: _26@Mir(bb6[6])
  _29 = const 321_i32
  using: 
  _33 = const b"p && \"received null csv_parser\"\x00"
  using: 
  _32 = &raw const (*_33)
  using: _33@Mir(bb6[9])
  _31 = move _32 as *const u8 (Pointer(ArrayToPointer))
  using: _32@Mir(bb6[10])
  _30 = move _31 as *const i8 (PtrToPtr)
  using: _31@Mir(bb6[11])
  _20 = libcsv::__assert_rtn(move _21, move _25, move _29, move _30)
  using: _21@Mir(bb6[3]), _25@Mir(bb6[7]), _29@Mir(bb6[8]), _30@Mir(bb6[12])
bb7:
  _35 = _2
  using: _2@Entry
  _34 = std::ptr::const_ptr::<impl *const std::ffi::c_void>::is_null(move _35) -> bb8
  using: _35@Mir(bb7[0])
bb8:
  switchInt(move _34) -> [0: bb10, otherwise: bb9]
  using: _34@Mir(bb7[1])
bb9:
  _38 = _2
  using: _2@Entry
  _37 = move _38 as usize (PointerExposeAddress)
  using: _38@Mir(bb9[0])
  _36 = Eq(move _37, const 0_usize)
  using: _37@Mir(bb9[1])
  assume(move _36)
  using: _36@Mir(bb9[2])
  _0 = const 0_u64
  using: 
  goto -> bb307
  using: 
bb10:
  _40 = _2
  using: _2@Entry
  _39 = move _40 as *const u8 (PtrToPtr)
  using: _40@Mir(bb10[0])
  _41 = const 0_u8
  using: 
  _42 = const 0_u64
  using: 
  _43 = ((*_1).9: u8)
  using: _1@Entry
  _44 = ((*_1).8: u8)
  using: _1@Entry
  _45 = ((*_1).10: std::option::Option<unsafe extern "C" fn(u8) -> i32>)
  using: _1@Entry
  _46 = ((*_1).11: std::option::Option<unsafe extern "C" fn(u8) -> i32>)
  using: _1@Entry
  _47 = ((*_1).1: i32)
  using: _1@Entry
  _48 = ((*_1).0: i32)
  using: _1@Entry
  _49 = ((*_1).2: u64)
  using: _1@Entry
  _50 = ((*_1).4: u64)
  using: _1@Entry
  _53 = ((*_1).3: *mut u8)
  using: _1@Entry
  _52 = std::ptr::mut_ptr::<impl *mut u8>::is_null(move _53) -> bb14
  using: _53@Mir(bb10[12])
bb11:
  _51 = const false
  using: 
  goto -> bb13
  using: 
bb12:
  _55 = _42
  using: _42@Mir(bb10[3])
  _56 = _3
  using: _3@Entry
  _54 = Lt(move _55, move _56)
  using: _55@Mir(bb12[0]), _56@Mir(bb12[1])
  _51 = move _54
  using: _54@Mir(bb12[2])
  goto -> bb13
  using: 
bb13:
  switchInt(move _51) -> [0: bb18, otherwise: bb15]
  using: _51@Phi(bb13)
bb14:
  switchInt(move _52) -> [0: bb11, otherwise: bb12]
  using: _52@Mir(bb10[13])
bb15:
  _59 = _1
  using: _1@Entry
  _58 = libcsv::csv_increase_buffer(move _59) -> bb16
  using: _59@Mir(bb15[0])
bb16:
  _60 = const 0_i32
  using: 
  _57 = Ne(move _58, move _60)
  using: _58@Mir(bb15[1]), _60@Mir(bb16[0])
  switchInt(move _57) -> [0: bb18, otherwise: bb17]
  using: _57@Mir(bb16[1])
bb17:
  _61 = _47
  using: _47@Mir(bb10[8])
  ((*_1).1: i32) = move _61
  using: _1@Entry, _61@Mir(bb17[0])
  _62 = _48
  using: _48@Mir(bb10[9])
  ((*_1).0: i32) = move _62
  using: _1@Entry, _62@Mir(bb17[2])
  _63 = _49
  using: _49@Mir(bb10[10])
  ((*_1).2: u64) = move _63
  using: _1@Entry, _63@Mir(bb17[4])
  _64 = _50
  using: _50@Mir(bb10[11])
  ((*_1).4: u64) = move _64
  using: _1@Entry, _64@Mir(bb17[6])
  _0 = _42
  using: _42@Phi(bb13)
  goto -> bb307
  using: 
bb18:
  _66 = _42
  using: _42@Phi(bb18)
  _67 = _3
  using: _3@Phi(bb13)
  _65 = Lt(move _66, move _67)
  using: _66@Mir(bb18[0]), _67@Mir(bb18[1])
  switchInt(move _65) -> [0: bb306, otherwise: bb19]
  using: _65@Mir(bb18[2])
bb19:
  _69 = _50
  using: _50@Phi(bb18)
  _73 = ((*_1).7: u8)
  using: _1@Phi(bb18)
  _72 = move _73 as i32 (IntToInt)
  using: _73@Mir(bb19[1])
  _74 = const 8_i32
  using: 
  _71 = BitAnd(move _72, move _74)
  using: _72@Mir(bb19[2]), _74@Mir(bb19[3])
  switchInt(move _71) -> [0: bb21, otherwise: bb20]
  using: _71@Mir(bb19[4])
bb20:
  _75 = ((*_1).5: u64)
  using: _1@Phi(bb18)
  _76 = const 1_u64
  using: 
  _70 = core::num::<impl u64>::wrapping_sub(move _75, move _76) -> bb22
  using: _75@Mir(bb20[0]), _76@Mir(bb20[1])
bb21:
  _70 = ((*_1).5: u64)
  using: _1@Phi(bb18)
  goto -> bb22
  using: 
bb22:
  _68 = Eq(move _69, move _70)
  using: _69@Mir(bb19[0]), _70@Phi(bb22)
  switchInt(move _68) -> [0: bb26, otherwise: bb23]
  using: _68@Mir(bb22[0])
bb23:
  _79 = _1
  using: _1@Phi(bb22)
  _78 = libcsv::csv_increase_buffer(move _79) -> bb24
  using: _79@Mir(bb23[0])
bb24:
  _80 = const 0_i32
  using: 
  _77 = Ne(move _78, move _80)
  using: _78@Mir(bb23[1]), _80@Mir(bb24[0])
  switchInt(move _77) -> [0: bb26, otherwise: bb25]
  using: _77@Mir(bb24[1])
bb25:
  _81 = _47
  using: _47@Phi(bb18)
  ((*_1).1: i32) = move _81
  using: _1@Phi(bb22), _81@Mir(bb25[0])
  _82 = _48
  using: _48@Phi(bb18)
  ((*_1).0: i32) = move _82
  using: _1@Phi(bb22), _82@Mir(bb25[2])
  _83 = _49
  using: _49@Phi(bb18)
  ((*_1).2: u64) = move _83
  using: _1@Phi(bb22), _83@Mir(bb25[4])
  _84 = _50
  using: _50@Phi(bb18)
  ((*_1).4: u64) = move _84
  using: _1@Phi(bb22), _84@Mir(bb25[6])
  _0 = _42
  using: _42@Phi(bb18)
  goto -> bb307
  using: 
bb26:
  _85 = _42
  using: _42@Phi(bb18)
  _87 = _42
  using: _42@Phi(bb18)
  _86 = core::num::<impl u64>::wrapping_add(move _87, const 1_u64) -> bb27
  using: _87@Mir(bb26[1])
bb27:
  _42 = move _86
  using: _86@Mir(bb26[2])
  _90 = _39
  using: _39@Phi(bb18)
  _92 = _85
  using: _85@Mir(bb26[0])
  _91 = move _92 as isize (IntToInt)
  using: _92@Mir(bb27[2])
  _89 = std::ptr::const_ptr::<impl *const u8>::offset(move _90, move _91) -> bb28
  using: _90@Mir(bb27[1]), _91@Mir(bb27[3])
bb28:
  _88 = (*_89)
  using: _89@Mir(bb27[4])
  _41 = move _88
  using: _88@Mir(bb28[0])
  switchInt(_48) -> [0: bb29, 1: bb29, 2: bb115, 3: bb214, otherwise: bb18]
  using: _48@Phi(bb18)
bb29:
  _96 = &_45
  using: _45@Phi(bb18)
  _95 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _96) -> bb33
  using: _96@Mir(bb29[0])
bb30:
  _93 = const false
  using: 
  goto -> bb32
  using: 
bb31:
  _113 = _41
  using: _41@Phi(bb40)
  _112 = move _113 as i32 (IntToInt)
  using: _113@Mir(bb31[0])
  _115 = _43
  using: _43@Phi(bb18)
  _114 = move _115 as i32 (IntToInt)
  using: _115@Mir(bb31[2])
  _111 = Ne(move _112, move _114)
  using: _112@Mir(bb31[1]), _114@Mir(bb31[3])
  _93 = move _111
  using: _111@Mir(bb31[4])
  goto -> bb32
  using: 
bb32:
  switchInt(move _93) -> [0: bb41, otherwise: bb18]
  using: _93@Phi(bb32)
bb33:
  switchInt(move _95) -> [0: bb36, otherwise: bb34]
  using: _95@Mir(bb29[1])
bb34:
  _98 = _45
  using: _45@Phi(bb18)
  _100 = const "non-null function pointer"
  using: 
  _99 = _100
  using: _100@Mir(bb34[1])
  _97 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _98, move _99) -> bb35
  using: _98@Mir(bb34[0]), _99@Mir(bb34[2])
bb35:
  _101 = _41
  using: _41@Mir(bb28[1])
  _94 = move _97(move _101) -> bb40
  using: _97@Entry, _101@Mir(bb35[0])
bb36:
  _105 = _41
  using: _41@Mir(bb28[1])
  _104 = move _105 as i32 (IntToInt)
  using: _105@Mir(bb36[0])
  _106 = const 32_i32
  using: 
  _103 = Eq(move _104, move _106)
  using: _104@Mir(bb36[1]), _106@Mir(bb36[2])
  switchInt(move _103) -> [0: bb38, otherwise: bb37]
  using: _103@Mir(bb36[3])
bb37:
  _102 = const true
  using: 
  goto -> bb39
  using: 
bb38:
  _109 = _41
  using: _41@Mir(bb28[1])
  _108 = move _109 as i32 (IntToInt)
  using: _109@Mir(bb38[0])
  _110 = const 9_i32
  using: 
  _107 = Eq(move _108, move _110)
  using: _108@Mir(bb38[1]), _110@Mir(bb38[2])
  _102 = move _107
  using: _107@Mir(bb38[3])
  goto -> bb39
  using: 
bb39:
  _94 = move _102 as i32 (IntToInt)
  using: _102@Phi(bb39)
  goto -> bb40
  using: 
bb40:
  switchInt(move _94) -> [0: bb30, otherwise: bb31]
  using: _94@Phi(bb40)
bb41:
  _118 = &_46
  using: _46@Phi(bb18)
  _117 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _118) -> bb42
  using: _118@Mir(bb41[0])
bb42:
  switchInt(move _117) -> [0: bb45, otherwise: bb43]
  using: _117@Mir(bb41[1])
bb43:
  _120 = _46
  using: _46@Phi(bb18)
  _122 = const "non-null function pointer"
  using: 
  _121 = _122
  using: _122@Mir(bb43[1])
  _119 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _120, move _121) -> bb44
  using: _120@Mir(bb43[0]), _121@Mir(bb43[2])
bb44:
  _123 = _41
  using: _41@Phi(bb32)
  _116 = move _119(move _123) -> bb49
  using: _119@Entry, _123@Mir(bb44[0])
bb45:
  _127 = _41
  using: _41@Phi(bb32)
  _126 = move _127 as i32 (IntToInt)
  using: _127@Mir(bb45[0])
  _128 = const 13_i32
  using: 
  _125 = Eq(move _126, move _128)
  using: _126@Mir(bb45[1]), _128@Mir(bb45[2])
  switchInt(move _125) -> [0: bb47, otherwise: bb46]
  using: _125@Mir(bb45[3])
bb46:
  _124 = const true
  using: 
  goto -> bb48
  using: 
bb47:
  _131 = _41
  using: _41@Phi(bb32)
  _130 = move _131 as i32 (IntToInt)
  using: _131@Mir(bb47[0])
  _132 = const 10_i32
  using: 
  _129 = Eq(move _130, move _132)
  using: _130@Mir(bb47[1]), _132@Mir(bb47[2])
  _124 = move _129
  using: _129@Mir(bb47[3])
  goto -> bb48
  using: 
bb48:
  _116 = move _124 as i32 (IntToInt)
  using: _124@Phi(bb48)
  goto -> bb49
  using: 
bb49:
  switchInt(move _116) -> [0: bb85, otherwise: bb50]
  using: _116@Phi(bb49)
bb50:
  _134 = _48
  using: _48@Phi(bb18)
  _135 = const 1_i32
  using: 
  _133 = Eq(move _134, move _135)
  using: _134@Mir(bb50[0]), _135@Mir(bb50[1])
  switchInt(move _133) -> [0: bb79, otherwise: bb51]
  using: _133@Mir(bb50[2])
bb51:
  _136 = _47
  using: _47@Phi(bb18)
  switchInt(move _136) -> [0: bb52, otherwise: bb54]
  using: _136@Mir(bb51[0])
bb52:
  _138 = _50
  using: _50@Phi(bb18)
  _139 = _49
  using: _49@Phi(bb18)
  _137 = core::num::<impl u64>::wrapping_sub(move _138, move _139) -> bb53
  using: _138@Mir(bb52[0]), _139@Mir(bb52[1])
bb53:
  _50 = move _137
  using: _137@Mir(bb52[2])
  goto -> bb54
  using: 
bb54:
  _142 = ((*_1).7: u8)
  using: _1@Phi(bb26)
  _141 = move _142 as i32 (IntToInt)
  using: _142@Mir(bb54[0])
  _143 = const 8_i32
  using: 
  _140 = BitAnd(move _141, move _143)
  using: _141@Mir(bb54[1]), _143@Mir(bb54[2])
  switchInt(move _140) -> [0: bb57, otherwise: bb55]
  using: _140@Mir(bb54[3])
bb55:
  _144 = const 0_i32
  using: 
  _146 = ((*_1).3: *mut u8)
  using: _1@Phi(bb26)
  _148 = _50
  using: _50@Phi(bb54)
  _147 = move _148 as isize (IntToInt)
  using: _148@Mir(bb55[2])
  _145 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _146, move _147) -> bb56
  using: _146@Mir(bb55[1]), _147@Mir(bb55[3])
bb56:
  (*_145) = move _144 as u8 (IntToInt)
  using: _145@Mir(bb55[4]), _144@Mir(bb55[0])
  goto -> bb57
  using: 
bb57:
  _153 = &_4
  using: _4@Phi(bb18)
  _152 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _153) -> bb67
  using: _153@Mir(bb57[0])
bb58:
  _149 = const false
  using: 
  goto -> bb60
  using: 
bb59:
  _162 = _50
  using: _50@Phi(bb57)
  _163 = const 0_u64
  using: 
  _161 = Eq(move _162, move _163)
  using: _162@Mir(bb59[0]), _163@Mir(bb59[1])
  _149 = move _161
  using: _161@Mir(bb59[2])
  goto -> bb60
  using: 
bb60:
  switchInt(move _149) -> [0: bb70, otherwise: bb68]
  using: _149@Phi(bb60)
bb61:
  _150 = const false
  using: 
  goto -> bb63
  using: 
bb62:
  _160 = _47
  using: _47@Phi(bb18)
  _159 = Eq(move _160, const 0_i32)
  using: _160@Mir(bb62[0])
  _150 = move _159
  using: _159@Mir(bb62[1])
  goto -> bb63
  using: 
bb63:
  switchInt(move _150) -> [0: bb58, otherwise: bb59]
  using: _150@Phi(bb63)
bb64:
  _151 = const false
  using: 
  goto -> bb66
  using: 
bb65:
  _157 = ((*_1).7: u8)
  using: _1@Phi(bb57)
  _156 = move _157 as i32 (IntToInt)
  using: _157@Mir(bb65[0])
  _158 = const 16_i32
  using: 
  _155 = BitAnd(move _156, move _158)
  using: _156@Mir(bb65[1]), _158@Mir(bb65[2])
  _154 = Ne(move _155, const 0_i32)
  using: _155@Mir(bb65[3])
  _151 = move _154
  using: _154@Mir(bb65[4])
  goto -> bb66
  using: 
bb66:
  switchInt(move _151) -> [0: bb61, otherwise: bb62]
  using: _151@Phi(bb66)
bb67:
  switchInt(move _152) -> [0: bb64, otherwise: bb65]
  using: _152@Mir(bb57[1])
bb68:
  _166 = _4
  using: _4@Phi(bb18)
  _168 = const "non-null function pointer"
  using: 
  _167 = _168
  using: _168@Mir(bb68[1])
  _165 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _166, move _167) -> bb69
  using: _166@Mir(bb68[0]), _167@Mir(bb68[2])
bb69:
  _169 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _170 = _50
  using: _50@Phi(bb60)
  _171 = _6
  using: _6@Phi(bb18)
  _164 = move _165(move _169, move _170, move _171) -> bb74
  using: _165@Entry, _169@Mir(bb69[0]), _170@Mir(bb69[1]), _171@Mir(bb69[2])
bb70:
  _173 = &_4
  using: _4@Phi(bb18)
  _172 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _173) -> bb71
  using: _173@Mir(bb70[0])
bb71:
  switchInt(move _172) -> [0: bb74, otherwise: bb72]
  using: _172@Mir(bb70[1])
bb72:
  _176 = _4
  using: _4@Phi(bb18)
  _178 = const "non-null function pointer"
  using: 
  _177 = _178
  using: _178@Mir(bb72[1])
  _175 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _176, move _177) -> bb73
  using: _176@Mir(bb72[0]), _177@Mir(bb72[2])
bb73:
  _180 = ((*_1).3: *mut u8)
  using: _1@Phi(bb66)
  _179 = move _180 as *mut std::ffi::c_void (PtrToPtr)
  using: _180@Mir(bb73[0])
  _181 = _50
  using: _50@Phi(bb60)
  _182 = _6
  using: _6@Phi(bb18)
  _174 = move _175(move _179, move _181, move _182) -> bb74
  using: _175@Entry, _179@Mir(bb73[1]), _181@Mir(bb73[2]), _182@Mir(bb73[3])
bb74:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  _184 = &_5
  using: _5@Phi(bb18)
  _183 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::is_some(move _184) -> bb75
  using: _184@Mir(bb74[4])
bb75:
  switchInt(move _183) -> [0: bb78, otherwise: bb76]
  using: _183@Mir(bb74[5])
bb76:
  _187 = _5
  using: _5@Phi(bb18)
  _189 = const "non-null function pointer"
  using: 
  _188 = _189
  using: _189@Mir(bb76[1])
  _186 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::expect(move _187, move _188) -> bb77
  using: _187@Mir(bb76[0]), _188@Mir(bb76[2])
bb77:
  _191 = _41
  using: _41@Phi(bb49)
  _190 = move _191 as i32 (IntToInt)
  using: _191@Mir(bb77[0])
  _192 = _6
  using: _6@Phi(bb74)
  _185 = move _186(move _190, move _192) -> bb78
  using: _186@Entry, _190@Mir(bb77[1]), _192@Mir(bb77[2])
bb78:
  _48 = const 0_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb79:
  _195 = ((*_1).7: u8)
  using: _1@Phi(bb74)
  _194 = move _195 as i32 (IntToInt)
  using: _195@Mir(bb79[0])
  _196 = const 2_i32
  using: 
  _193 = BitAnd(move _194, move _196)
  using: _194@Mir(bb79[1]), _196@Mir(bb79[2])
  switchInt(move _193) -> [0: bb18, otherwise: bb80]
  using: _193@Mir(bb79[3])
bb80:
  _198 = &_5
  using: _5@Phi(bb78)
  _197 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::is_some(move _198) -> bb81
  using: _198@Mir(bb80[0])
bb81:
  switchInt(move _197) -> [0: bb84, otherwise: bb82]
  using: _197@Mir(bb80[1])
bb82:
  _201 = _5
  using: _5@Phi(bb78)
  _203 = const "non-null function pointer"
  using: 
  _202 = _203
  using: _203@Mir(bb82[1])
  _200 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::expect(move _201, move _202) -> bb83
  using: _201@Mir(bb82[0]), _202@Mir(bb82[2])
bb83:
  _205 = _41
  using: _41@Phi(bb78)
  _204 = move _205 as i32 (IntToInt)
  using: _205@Mir(bb83[0])
  _206 = _6
  using: _6@Phi(bb78)
  _199 = move _200(move _204, move _206) -> bb84
  using: _200@Entry, _204@Mir(bb83[1]), _206@Mir(bb83[2])
bb84:
  _48 = const 0_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb85:
  _209 = _41
  using: _41@Phi(bb84)
  _208 = move _209 as i32 (IntToInt)
  using: _209@Mir(bb85[0])
  _211 = _43
  using: _43@Phi(bb32)
  _210 = move _211 as i32 (IntToInt)
  using: _211@Mir(bb85[2])
  _207 = Eq(move _208, move _210)
  using: _208@Mir(bb85[1]), _210@Mir(bb85[3])
  switchInt(move _207) -> [0: bb110, otherwise: bb86]
  using: _207@Mir(bb85[4])
bb86:
  _212 = _47
  using: _47@Phi(bb63)
  switchInt(move _212) -> [0: bb87, otherwise: bb89]
  using: _212@Mir(bb86[0])
bb87:
  _214 = _50
  using: _50@Phi(bb74)
  _215 = _49
  using: _49@Phi(bb54)
  _213 = core::num::<impl u64>::wrapping_sub(move _214, move _215) -> bb88
  using: _214@Mir(bb87[0]), _215@Mir(bb87[1])
bb88:
  _50 = move _213
  using: _213@Mir(bb87[2])
  goto -> bb89
  using: 
bb89:
  _218 = ((*_1).7: u8)
  using: _1@Phi(bb74)
  _217 = move _218 as i32 (IntToInt)
  using: _218@Mir(bb89[0])
  _219 = const 8_i32
  using: 
  _216 = BitAnd(move _217, move _219)
  using: _217@Mir(bb89[1]), _219@Mir(bb89[2])
  switchInt(move _216) -> [0: bb92, otherwise: bb90]
  using: _216@Mir(bb89[3])
bb90:
  _220 = const 0_i32
  using: 
  _222 = ((*_1).3: *mut u8)
  using: _1@Phi(bb74)
  _224 = _50
  using: _50@Phi(bb89)
  _223 = move _224 as isize (IntToInt)
  using: _224@Mir(bb90[2])
  _221 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _222, move _223) -> bb91
  using: _222@Mir(bb90[1]), _223@Mir(bb90[3])
bb91:
  (*_221) = move _220 as u8 (IntToInt)
  using: _221@Mir(bb90[4]), _220@Mir(bb90[0])
  goto -> bb92
  using: 
bb92:
  _229 = &_4
  using: _4@Phi(bb74)
  _228 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _229) -> bb102
  using: _229@Mir(bb92[0])
bb93:
  _225 = const false
  using: 
  goto -> bb95
  using: 
bb94:
  _238 = _50
  using: _50@Phi(bb92)
  _239 = const 0_u64
  using: 
  _237 = Eq(move _238, move _239)
  using: _238@Mir(bb94[0]), _239@Mir(bb94[1])
  _225 = move _237
  using: _237@Mir(bb94[2])
  goto -> bb95
  using: 
bb95:
  switchInt(move _225) -> [0: bb105, otherwise: bb103]
  using: _225@Phi(bb95)
bb96:
  _226 = const false
  using: 
  goto -> bb98
  using: 
bb97:
  _236 = _47
  using: _47@Phi(bb63)
  _235 = Eq(move _236, const 0_i32)
  using: _236@Mir(bb97[0])
  _226 = move _235
  using: _235@Mir(bb97[1])
  goto -> bb98
  using: 
bb98:
  switchInt(move _226) -> [0: bb93, otherwise: bb94]
  using: _226@Phi(bb98)
bb99:
  _227 = const false
  using: 
  goto -> bb101
  using: 
bb100:
  _233 = ((*_1).7: u8)
  using: _1@Phi(bb92)
  _232 = move _233 as i32 (IntToInt)
  using: _233@Mir(bb100[0])
  _234 = const 16_i32
  using: 
  _231 = BitAnd(move _232, move _234)
  using: _232@Mir(bb100[1]), _234@Mir(bb100[2])
  _230 = Ne(move _231, const 0_i32)
  using: _231@Mir(bb100[3])
  _227 = move _230
  using: _230@Mir(bb100[4])
  goto -> bb101
  using: 
bb101:
  switchInt(move _227) -> [0: bb96, otherwise: bb97]
  using: _227@Phi(bb101)
bb102:
  switchInt(move _228) -> [0: bb99, otherwise: bb100]
  using: _228@Mir(bb92[1])
bb103:
  _242 = _4
  using: _4@Phi(bb74)
  _244 = const "non-null function pointer"
  using: 
  _243 = _244
  using: _244@Mir(bb103[1])
  _241 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _242, move _243) -> bb104
  using: _242@Mir(bb103[0]), _243@Mir(bb103[2])
bb104:
  _245 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _246 = _50
  using: _50@Phi(bb95)
  _247 = _6
  using: _6@Phi(bb84)
  _240 = move _241(move _245, move _246, move _247) -> bb109
  using: _241@Entry, _245@Mir(bb104[0]), _246@Mir(bb104[1]), _247@Mir(bb104[2])
bb105:
  _249 = &_4
  using: _4@Phi(bb74)
  _248 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _249) -> bb106
  using: _249@Mir(bb105[0])
bb106:
  switchInt(move _248) -> [0: bb109, otherwise: bb107]
  using: _248@Mir(bb105[1])
bb107:
  _252 = _4
  using: _4@Phi(bb74)
  _254 = const "non-null function pointer"
  using: 
  _253 = _254
  using: _254@Mir(bb107[1])
  _251 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _252, move _253) -> bb108
  using: _252@Mir(bb107[0]), _253@Mir(bb107[2])
bb108:
  _256 = ((*_1).3: *mut u8)
  using: _1@Phi(bb101)
  _255 = move _256 as *mut std::ffi::c_void (PtrToPtr)
  using: _256@Mir(bb108[0])
  _257 = _50
  using: _50@Phi(bb95)
  _258 = _6
  using: _6@Phi(bb84)
  _250 = move _251(move _255, move _257, move _258) -> bb109
  using: _251@Entry, _255@Mir(bb108[1]), _257@Mir(bb108[2]), _258@Mir(bb108[3])
bb109:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb110:
  _261 = _41
  using: _41@Phi(bb84)
  _260 = move _261 as i32 (IntToInt)
  using: _261@Mir(bb110[0])
  _263 = _44
  using: _44@Phi(bb18)
  _262 = move _263 as i32 (IntToInt)
  using: _263@Mir(bb110[2])
  _259 = Eq(move _260, move _262)
  using: _260@Mir(bb110[1]), _262@Mir(bb110[3])
  switchInt(move _259) -> [0: bb112, otherwise: bb111]
  using: _259@Mir(bb110[4])
bb111:
  _48 = const 2_i32
  using: 
  _47 = const 1_i32
  using: 
  goto -> bb18
  using: 
bb112:
  _48 = const 2_i32
  using: 
  _47 = const 0_i32
  using: 
  _264 = _50
  using: _50@Phi(bb109)
  _266 = _50
  using: _50@Phi(bb109)
  _265 = core::num::<impl u64>::wrapping_add(move _266, const 1_u64) -> bb113
  using: _266@Mir(bb112[3])
bb113:
  _50 = move _265
  using: _265@Mir(bb112[4])
  _267 = _41
  using: _41@Phi(bb84)
  _269 = ((*_1).3: *mut u8)
  using: _1@Phi(bb109)
  _271 = _264
  using: _264@Mir(bb112[2])
  _270 = move _271 as isize (IntToInt)
  using: _271@Mir(bb113[3])
  _268 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _269, move _270) -> bb114
  using: _269@Mir(bb113[2]), _270@Mir(bb113[4])
bb114:
  (*_268) = move _267
  using: _268@Mir(bb113[5]), _267@Mir(bb113[1])
  goto -> bb18
  using: 
bb115:
  _274 = _41
  using: _41@Phi(bb84)
  _273 = move _274 as i32 (IntToInt)
  using: _274@Mir(bb115[0])
  _276 = _44
  using: _44@Phi(bb18)
  _275 = move _276 as i32 (IntToInt)
  using: _276@Mir(bb115[2])
  _272 = Eq(move _273, move _275)
  using: _273@Mir(bb115[1]), _275@Mir(bb115[3])
  switchInt(move _272) -> [0: bb125, otherwise: bb116]
  using: _272@Mir(bb115[4])
bb116:
  _277 = _47
  using: _47@Phi(bb98)
  switchInt(move _277) -> [0: bb120, otherwise: bb117]
  using: _277@Mir(bb116[0])
bb117:
  _278 = _50
  using: _50@Phi(bb109)
  _280 = _50
  using: _50@Phi(bb109)
  _279 = core::num::<impl u64>::wrapping_add(move _280, const 1_u64) -> bb118
  using: _280@Mir(bb117[1])
bb118:
  _50 = move _279
  using: _279@Mir(bb117[2])
  _281 = _41
  using: _41@Phi(bb84)
  _283 = ((*_1).3: *mut u8)
  using: _1@Phi(bb109)
  _285 = _278
  using: _278@Mir(bb117[0])
  _284 = move _285 as isize (IntToInt)
  using: _285@Mir(bb118[3])
  _282 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _283, move _284) -> bb119
  using: _283@Mir(bb118[2]), _284@Mir(bb118[4])
bb119:
  (*_282) = move _281
  using: _282@Mir(bb118[5]), _281@Mir(bb118[1])
  _48 = const 3_i32
  using: 
  goto -> bb18
  using: 
bb120:
  _288 = ((*_1).7: u8)
  using: _1@Phi(bb109)
  _287 = move _288 as i32 (IntToInt)
  using: _288@Mir(bb120[0])
  _289 = const 1_i32
  using: 
  _286 = BitAnd(move _287, move _289)
  using: _287@Mir(bb120[1]), _289@Mir(bb120[2])
  switchInt(move _286) -> [0: bb122, otherwise: bb121]
  using: _286@Mir(bb120[3])
bb121:
  _290 = const 1_i32
  using: 
  ((*_1).6: i32) = move _290
  using: _1@Phi(bb109), _290@Mir(bb121[0])
  _291 = _47
  using: _47@Phi(bb98)
  ((*_1).1: i32) = move _291
  using: _1@Phi(bb109), _291@Mir(bb121[2])
  _292 = _48
  using: _48@Phi(bb18)
  ((*_1).0: i32) = move _292
  using: _1@Phi(bb109), _292@Mir(bb121[4])
  _293 = _49
  using: _49@Phi(bb89)
  ((*_1).2: u64) = move _293
  using: _1@Phi(bb109), _293@Mir(bb121[6])
  _294 = _50
  using: _50@Phi(bb109)
  ((*_1).4: u64) = move _294
  using: _1@Phi(bb109), _294@Mir(bb121[8])
  _295 = _42
  using: _42@Mir(bb27[0])
  _296 = const 1_u64
  using: 
  _0 = core::num::<impl u64>::wrapping_sub(move _295, move _296) -> bb307
  using: _295@Mir(bb121[10]), _296@Mir(bb121[11])
bb122:
  _297 = _50
  using: _50@Phi(bb109)
  _299 = _50
  using: _50@Phi(bb109)
  _298 = core::num::<impl u64>::wrapping_add(move _299, const 1_u64) -> bb123
  using: _299@Mir(bb122[1])
bb123:
  _50 = move _298
  using: _298@Mir(bb122[2])
  _300 = _41
  using: _41@Phi(bb84)
  _302 = ((*_1).3: *mut u8)
  using: _1@Phi(bb109)
  _304 = _297
  using: _297@Mir(bb122[0])
  _303 = move _304 as isize (IntToInt)
  using: _304@Mir(bb123[3])
  _301 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _302, move _303) -> bb124
  using: _302@Mir(bb123[2]), _303@Mir(bb123[4])
bb124:
  (*_301) = move _300
  using: _301@Mir(bb123[5]), _300@Mir(bb123[1])
  _49 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb125:
  _307 = _41
  using: _41@Phi(bb84)
  _306 = move _307 as i32 (IntToInt)
  using: _307@Mir(bb125[0])
  _309 = _43
  using: _43@Phi(bb32)
  _308 = move _309 as i32 (IntToInt)
  using: _309@Mir(bb125[2])
  _305 = Eq(move _306, move _308)
  using: _306@Mir(bb125[1]), _308@Mir(bb125[3])
  switchInt(move _305) -> [0: bb154, otherwise: bb126]
  using: _305@Mir(bb125[4])
bb126:
  _310 = _47
  using: _47@Phi(bb98)
  switchInt(move _310) -> [0: bb130, otherwise: bb127]
  using: _310@Mir(bb126[0])
bb127:
  _311 = _50
  using: _50@Phi(bb109)
  _313 = _50
  using: _50@Phi(bb109)
  _312 = core::num::<impl u64>::wrapping_add(move _313, const 1_u64) -> bb128
  using: _313@Mir(bb127[1])
bb128:
  _50 = move _312
  using: _312@Mir(bb127[2])
  _314 = _41
  using: _41@Phi(bb84)
  _316 = ((*_1).3: *mut u8)
  using: _1@Phi(bb109)
  _318 = _311
  using: _311@Mir(bb127[0])
  _317 = move _318 as isize (IntToInt)
  using: _318@Mir(bb128[3])
  _315 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _316, move _317) -> bb129
  using: _316@Mir(bb128[2]), _317@Mir(bb128[4])
bb129:
  (*_315) = move _314
  using: _315@Mir(bb128[5]), _314@Mir(bb128[1])
  goto -> bb18
  using: 
bb130:
  _319 = _47
  using: _47@Phi(bb98)
  switchInt(move _319) -> [0: bb131, otherwise: bb133]
  using: _319@Mir(bb130[0])
bb131:
  _321 = _50
  using: _50@Phi(bb109)
  _322 = _49
  using: _49@Phi(bb89)
  _320 = core::num::<impl u64>::wrapping_sub(move _321, move _322) -> bb132
  using: _321@Mir(bb131[0]), _322@Mir(bb131[1])
bb132:
  _50 = move _320
  using: _320@Mir(bb131[2])
  goto -> bb133
  using: 
bb133:
  _325 = ((*_1).7: u8)
  using: _1@Phi(bb109)
  _324 = move _325 as i32 (IntToInt)
  using: _325@Mir(bb133[0])
  _326 = const 8_i32
  using: 
  _323 = BitAnd(move _324, move _326)
  using: _324@Mir(bb133[1]), _326@Mir(bb133[2])
  switchInt(move _323) -> [0: bb136, otherwise: bb134]
  using: _323@Mir(bb133[3])
bb134:
  _327 = const 0_i32
  using: 
  _329 = ((*_1).3: *mut u8)
  using: _1@Phi(bb109)
  _331 = _50
  using: _50@Phi(bb133)
  _330 = move _331 as isize (IntToInt)
  using: _331@Mir(bb134[2])
  _328 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _329, move _330) -> bb135
  using: _329@Mir(bb134[1]), _330@Mir(bb134[3])
bb135:
  (*_328) = move _327 as u8 (IntToInt)
  using: _328@Mir(bb134[4]), _327@Mir(bb134[0])
  goto -> bb136
  using: 
bb136:
  _336 = &_4
  using: _4@Phi(bb109)
  _335 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _336) -> bb146
  using: _336@Mir(bb136[0])
bb137:
  _332 = const false
  using: 
  goto -> bb139
  using: 
bb138:
  _345 = _50
  using: _50@Phi(bb136)
  _346 = const 0_u64
  using: 
  _344 = Eq(move _345, move _346)
  using: _345@Mir(bb138[0]), _346@Mir(bb138[1])
  _332 = move _344
  using: _344@Mir(bb138[2])
  goto -> bb139
  using: 
bb139:
  switchInt(move _332) -> [0: bb149, otherwise: bb147]
  using: _332@Phi(bb139)
bb140:
  _333 = const false
  using: 
  goto -> bb142
  using: 
bb141:
  _343 = _47
  using: _47@Phi(bb98)
  _342 = Eq(move _343, const 0_i32)
  using: _343@Mir(bb141[0])
  _333 = move _342
  using: _342@Mir(bb141[1])
  goto -> bb142
  using: 
bb142:
  switchInt(move _333) -> [0: bb137, otherwise: bb138]
  using: _333@Phi(bb142)
bb143:
  _334 = const false
  using: 
  goto -> bb145
  using: 
bb144:
  _340 = ((*_1).7: u8)
  using: _1@Phi(bb136)
  _339 = move _340 as i32 (IntToInt)
  using: _340@Mir(bb144[0])
  _341 = const 16_i32
  using: 
  _338 = BitAnd(move _339, move _341)
  using: _339@Mir(bb144[1]), _341@Mir(bb144[2])
  _337 = Ne(move _338, const 0_i32)
  using: _338@Mir(bb144[3])
  _334 = move _337
  using: _337@Mir(bb144[4])
  goto -> bb145
  using: 
bb145:
  switchInt(move _334) -> [0: bb140, otherwise: bb141]
  using: _334@Phi(bb145)
bb146:
  switchInt(move _335) -> [0: bb143, otherwise: bb144]
  using: _335@Mir(bb136[1])
bb147:
  _349 = _4
  using: _4@Phi(bb109)
  _351 = const "non-null function pointer"
  using: 
  _350 = _351
  using: _351@Mir(bb147[1])
  _348 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _349, move _350) -> bb148
  using: _349@Mir(bb147[0]), _350@Mir(bb147[2])
bb148:
  _352 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _353 = _50
  using: _50@Phi(bb139)
  _354 = _6
  using: _6@Phi(bb109)
  _347 = move _348(move _352, move _353, move _354) -> bb153
  using: _348@Entry, _352@Mir(bb148[0]), _353@Mir(bb148[1]), _354@Mir(bb148[2])
bb149:
  _356 = &_4
  using: _4@Phi(bb109)
  _355 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _356) -> bb150
  using: _356@Mir(bb149[0])
bb150:
  switchInt(move _355) -> [0: bb153, otherwise: bb151]
  using: _355@Mir(bb149[1])
bb151:
  _359 = _4
  using: _4@Phi(bb109)
  _361 = const "non-null function pointer"
  using: 
  _360 = _361
  using: _361@Mir(bb151[1])
  _358 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _359, move _360) -> bb152
  using: _359@Mir(bb151[0]), _360@Mir(bb151[2])
bb152:
  _363 = ((*_1).3: *mut u8)
  using: _1@Phi(bb145)
  _362 = move _363 as *mut std::ffi::c_void (PtrToPtr)
  using: _363@Mir(bb152[0])
  _364 = _50
  using: _50@Phi(bb139)
  _365 = _6
  using: _6@Phi(bb109)
  _357 = move _358(move _362, move _364, move _365) -> bb153
  using: _358@Entry, _362@Mir(bb152[1]), _364@Mir(bb152[2]), _365@Mir(bb152[3])
bb153:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb154:
  _368 = &_46
  using: _46@Phi(bb49)
  _367 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _368) -> bb155
  using: _368@Mir(bb154[0])
bb155:
  switchInt(move _367) -> [0: bb158, otherwise: bb156]
  using: _367@Mir(bb154[1])
bb156:
  _370 = _46
  using: _46@Phi(bb49)
  _372 = const "non-null function pointer"
  using: 
  _371 = _372
  using: _372@Mir(bb156[1])
  _369 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _370, move _371) -> bb157
  using: _370@Mir(bb156[0]), _371@Mir(bb156[2])
bb157:
  _373 = _41
  using: _41@Phi(bb84)
  _366 = move _369(move _373) -> bb162
  using: _369@Entry, _373@Mir(bb157[0])
bb158:
  _377 = _41
  using: _41@Phi(bb84)
  _376 = move _377 as i32 (IntToInt)
  using: _377@Mir(bb158[0])
  _378 = const 13_i32
  using: 
  _375 = Eq(move _376, move _378)
  using: _376@Mir(bb158[1]), _378@Mir(bb158[2])
  switchInt(move _375) -> [0: bb160, otherwise: bb159]
  using: _375@Mir(bb158[3])
bb159:
  _374 = const true
  using: 
  goto -> bb161
  using: 
bb160:
  _381 = _41
  using: _41@Phi(bb84)
  _380 = move _381 as i32 (IntToInt)
  using: _381@Mir(bb160[0])
  _382 = const 10_i32
  using: 
  _379 = Eq(move _380, move _382)
  using: _380@Mir(bb160[1]), _382@Mir(bb160[2])
  _374 = move _379
  using: _379@Mir(bb160[3])
  goto -> bb161
  using: 
bb161:
  _366 = move _374 as i32 (IntToInt)
  using: _374@Phi(bb161)
  goto -> bb162
  using: 
bb162:
  switchInt(move _366) -> [0: bb195, otherwise: bb163]
  using: _366@Phi(bb162)
bb163:
  _383 = _47
  using: _47@Phi(bb142)
  switchInt(move _383) -> [0: bb164, otherwise: bb192]
  using: _383@Mir(bb163[0])
bb164:
  _384 = _47
  using: _47@Phi(bb142)
  switchInt(move _384) -> [0: bb165, otherwise: bb167]
  using: _384@Mir(bb164[0])
bb165:
  _386 = _50
  using: _50@Phi(bb153)
  _387 = _49
  using: _49@Phi(bb133)
  _385 = core::num::<impl u64>::wrapping_sub(move _386, move _387) -> bb166
  using: _386@Mir(bb165[0]), _387@Mir(bb165[1])
bb166:
  _50 = move _385
  using: _385@Mir(bb165[2])
  goto -> bb167
  using: 
bb167:
  _390 = ((*_1).7: u8)
  using: _1@Phi(bb153)
  _389 = move _390 as i32 (IntToInt)
  using: _390@Mir(bb167[0])
  _391 = const 8_i32
  using: 
  _388 = BitAnd(move _389, move _391)
  using: _389@Mir(bb167[1]), _391@Mir(bb167[2])
  switchInt(move _388) -> [0: bb170, otherwise: bb168]
  using: _388@Mir(bb167[3])
bb168:
  _392 = const 0_i32
  using: 
  _394 = ((*_1).3: *mut u8)
  using: _1@Phi(bb153)
  _396 = _50
  using: _50@Phi(bb167)
  _395 = move _396 as isize (IntToInt)
  using: _396@Mir(bb168[2])
  _393 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _394, move _395) -> bb169
  using: _394@Mir(bb168[1]), _395@Mir(bb168[3])
bb169:
  (*_393) = move _392 as u8 (IntToInt)
  using: _393@Mir(bb168[4]), _392@Mir(bb168[0])
  goto -> bb170
  using: 
bb170:
  _401 = &_4
  using: _4@Phi(bb153)
  _400 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _401) -> bb180
  using: _401@Mir(bb170[0])
bb171:
  _397 = const false
  using: 
  goto -> bb173
  using: 
bb172:
  _410 = _50
  using: _50@Phi(bb170)
  _411 = const 0_u64
  using: 
  _409 = Eq(move _410, move _411)
  using: _410@Mir(bb172[0]), _411@Mir(bb172[1])
  _397 = move _409
  using: _409@Mir(bb172[2])
  goto -> bb173
  using: 
bb173:
  switchInt(move _397) -> [0: bb183, otherwise: bb181]
  using: _397@Phi(bb173)
bb174:
  _398 = const false
  using: 
  goto -> bb176
  using: 
bb175:
  _408 = _47
  using: _47@Phi(bb142)
  _407 = Eq(move _408, const 0_i32)
  using: _408@Mir(bb175[0])
  _398 = move _407
  using: _407@Mir(bb175[1])
  goto -> bb176
  using: 
bb176:
  switchInt(move _398) -> [0: bb171, otherwise: bb172]
  using: _398@Phi(bb176)
bb177:
  _399 = const false
  using: 
  goto -> bb179
  using: 
bb178:
  _405 = ((*_1).7: u8)
  using: _1@Phi(bb170)
  _404 = move _405 as i32 (IntToInt)
  using: _405@Mir(bb178[0])
  _406 = const 16_i32
  using: 
  _403 = BitAnd(move _404, move _406)
  using: _404@Mir(bb178[1]), _406@Mir(bb178[2])
  _402 = Ne(move _403, const 0_i32)
  using: _403@Mir(bb178[3])
  _399 = move _402
  using: _402@Mir(bb178[4])
  goto -> bb179
  using: 
bb179:
  switchInt(move _399) -> [0: bb174, otherwise: bb175]
  using: _399@Phi(bb179)
bb180:
  switchInt(move _400) -> [0: bb177, otherwise: bb178]
  using: _400@Mir(bb170[1])
bb181:
  _414 = _4
  using: _4@Phi(bb153)
  _416 = const "non-null function pointer"
  using: 
  _415 = _416
  using: _416@Mir(bb181[1])
  _413 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _414, move _415) -> bb182
  using: _414@Mir(bb181[0]), _415@Mir(bb181[2])
bb182:
  _417 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _418 = _50
  using: _50@Phi(bb173)
  _419 = _6
  using: _6@Phi(bb153)
  _412 = move _413(move _417, move _418, move _419) -> bb187
  using: _413@Entry, _417@Mir(bb182[0]), _418@Mir(bb182[1]), _419@Mir(bb182[2])
bb183:
  _421 = &_4
  using: _4@Phi(bb153)
  _420 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _421) -> bb184
  using: _421@Mir(bb183[0])
bb184:
  switchInt(move _420) -> [0: bb187, otherwise: bb185]
  using: _420@Mir(bb183[1])
bb185:
  _424 = _4
  using: _4@Phi(bb153)
  _426 = const "non-null function pointer"
  using: 
  _425 = _426
  using: _426@Mir(bb185[1])
  _423 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _424, move _425) -> bb186
  using: _424@Mir(bb185[0]), _425@Mir(bb185[2])
bb186:
  _428 = ((*_1).3: *mut u8)
  using: _1@Phi(bb179)
  _427 = move _428 as *mut std::ffi::c_void (PtrToPtr)
  using: _428@Mir(bb186[0])
  _429 = _50
  using: _50@Phi(bb173)
  _430 = _6
  using: _6@Phi(bb153)
  _422 = move _423(move _427, move _429, move _430) -> bb187
  using: _423@Entry, _427@Mir(bb186[1]), _429@Mir(bb186[2]), _430@Mir(bb186[3])
bb187:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  _432 = &_5
  using: _5@Phi(bb84)
  _431 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::is_some(move _432) -> bb188
  using: _432@Mir(bb187[4])
bb188:
  switchInt(move _431) -> [0: bb191, otherwise: bb189]
  using: _431@Mir(bb187[5])
bb189:
  _435 = _5
  using: _5@Phi(bb84)
  _437 = const "non-null function pointer"
  using: 
  _436 = _437
  using: _437@Mir(bb189[1])
  _434 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::expect(move _435, move _436) -> bb190
  using: _435@Mir(bb189[0]), _436@Mir(bb189[2])
bb190:
  _439 = _41
  using: _41@Phi(bb162)
  _438 = move _439 as i32 (IntToInt)
  using: _439@Mir(bb190[0])
  _440 = _6
  using: _6@Phi(bb187)
  _433 = move _434(move _438, move _440) -> bb191
  using: _434@Entry, _438@Mir(bb190[1]), _440@Mir(bb190[2])
bb191:
  _48 = const 0_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb192:
  _441 = _50
  using: _50@Phi(bb187)
  _443 = _50
  using: _50@Phi(bb187)
  _442 = core::num::<impl u64>::wrapping_add(move _443, const 1_u64) -> bb193
  using: _443@Mir(bb192[1])
bb193:
  _50 = move _442
  using: _442@Mir(bb192[2])
  _444 = _41
  using: _41@Phi(bb191)
  _446 = ((*_1).3: *mut u8)
  using: _1@Phi(bb187)
  _448 = _441
  using: _441@Mir(bb192[0])
  _447 = move _448 as isize (IntToInt)
  using: _448@Mir(bb193[3])
  _445 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _446, move _447) -> bb194
  using: _446@Mir(bb193[2]), _447@Mir(bb193[4])
bb194:
  (*_445) = move _444
  using: _445@Mir(bb193[5]), _444@Mir(bb193[1])
  goto -> bb18
  using: 
bb195:
  _450 = _47
  using: _47@Phi(bb176)
  switchInt(move _450) -> [0: bb197, otherwise: bb196]
  using: _450@Mir(bb195[0])
bb196:
  _449 = const false
  using: 
  goto -> bb198
  using: 
bb197:
  _454 = &_45
  using: _45@Phi(bb40)
  _453 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _454) -> bb199
  using: _454@Mir(bb197[0])
bb198:
  switchInt(move _449) -> [0: bb211, otherwise: bb207]
  using: _449@Phi(bb198)
bb199:
  switchInt(move _453) -> [0: bb202, otherwise: bb200]
  using: _453@Mir(bb197[1])
bb200:
  _456 = _45
  using: _45@Phi(bb40)
  _458 = const "non-null function pointer"
  using: 
  _457 = _458
  using: _458@Mir(bb200[1])
  _455 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _456, move _457) -> bb201
  using: _456@Mir(bb200[0]), _457@Mir(bb200[2])
bb201:
  _459 = _41
  using: _41@Phi(bb191)
  _452 = move _455(move _459) -> bb206
  using: _455@Entry, _459@Mir(bb201[0])
bb202:
  _463 = _41
  using: _41@Phi(bb191)
  _462 = move _463 as i32 (IntToInt)
  using: _463@Mir(bb202[0])
  _464 = const 32_i32
  using: 
  _461 = Eq(move _462, move _464)
  using: _462@Mir(bb202[1]), _464@Mir(bb202[2])
  switchInt(move _461) -> [0: bb204, otherwise: bb203]
  using: _461@Mir(bb202[3])
bb203:
  _460 = const true
  using: 
  goto -> bb205
  using: 
bb204:
  _467 = _41
  using: _41@Phi(bb191)
  _466 = move _467 as i32 (IntToInt)
  using: _467@Mir(bb204[0])
  _468 = const 9_i32
  using: 
  _465 = Eq(move _466, move _468)
  using: _466@Mir(bb204[1]), _468@Mir(bb204[2])
  _460 = move _465
  using: _465@Mir(bb204[3])
  goto -> bb205
  using: 
bb205:
  _452 = move _460 as i32 (IntToInt)
  using: _460@Phi(bb205)
  goto -> bb206
  using: 
bb206:
  _451 = Ne(move _452, const 0_i32)
  using: _452@Phi(bb206)
  _449 = move _451
  using: _451@Mir(bb206[0])
  goto -> bb198
  using: 
bb207:
  _469 = _50
  using: _50@Phi(bb187)
  _471 = _50
  using: _50@Phi(bb187)
  _470 = core::num::<impl u64>::wrapping_add(move _471, const 1_u64) -> bb208
  using: _471@Mir(bb207[1])
bb208:
  _50 = move _470
  using: _470@Mir(bb207[2])
  _472 = _41
  using: _41@Phi(bb198)
  _474 = ((*_1).3: *mut u8)
  using: _1@Phi(bb187)
  _476 = _469
  using: _469@Mir(bb207[0])
  _475 = move _476 as isize (IntToInt)
  using: _476@Mir(bb208[3])
  _473 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _474, move _475) -> bb209
  using: _474@Mir(bb208[2]), _475@Mir(bb208[4])
bb209:
  (*_473) = move _472
  using: _473@Mir(bb208[5]), _472@Mir(bb208[1])
  _478 = _49
  using: _49@Phi(bb167)
  _477 = core::num::<impl u64>::wrapping_add(move _478, const 1_u64) -> bb210
  using: _478@Mir(bb209[1])
bb210:
  _49 = move _477
  using: _477@Mir(bb209[2])
  goto -> bb18
  using: 
bb211:
  _479 = _50
  using: _50@Phi(bb187)
  _481 = _50
  using: _50@Phi(bb187)
  _480 = core::num::<impl u64>::wrapping_add(move _481, const 1_u64) -> bb212
  using: _481@Mir(bb211[1])
bb212:
  _50 = move _480
  using: _480@Mir(bb211[2])
  _482 = _41
  using: _41@Phi(bb198)
  _484 = ((*_1).3: *mut u8)
  using: _1@Phi(bb187)
  _486 = _479
  using: _479@Mir(bb211[0])
  _485 = move _486 as isize (IntToInt)
  using: _486@Mir(bb212[3])
  _483 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _484, move _485) -> bb213
  using: _484@Mir(bb212[2]), _485@Mir(bb212[4])
bb213:
  (*_483) = move _482
  using: _483@Mir(bb212[5]), _482@Mir(bb212[1])
  _49 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb214:
  _489 = _41
  using: _41@Phi(bb198)
  _488 = move _489 as i32 (IntToInt)
  using: _489@Mir(bb214[0])
  _491 = _43
  using: _43@Phi(bb32)
  _490 = move _491 as i32 (IntToInt)
  using: _491@Mir(bb214[2])
  _487 = Eq(move _488, move _490)
  using: _488@Mir(bb214[1]), _490@Mir(bb214[3])
  switchInt(move _487) -> [0: bb241, otherwise: bb215]
  using: _487@Mir(bb214[4])
bb215:
  _493 = _50
  using: _50@Phi(bb187)
  _495 = _49
  using: _49@Phi(bb167)
  _496 = const 1_u64
  using: 
  _494 = core::num::<impl u64>::wrapping_add(move _495, move _496) -> bb216
  using: _495@Mir(bb215[1]), _496@Mir(bb215[2])
bb216:
  _492 = core::num::<impl u64>::wrapping_sub(move _493, move _494) -> bb217
  using: _493@Mir(bb215[0]), _494@Mir(bb215[3])
bb217:
  _50 = move _492
  using: _492@Mir(bb216[0])
  _497 = _47
  using: _47@Phi(bb176)
  switchInt(move _497) -> [0: bb218, otherwise: bb220]
  using: _497@Mir(bb217[1])
bb218:
  _499 = _50
  using: _50@Mir(bb217[0])
  _500 = _49
  using: _49@Phi(bb167)
  _498 = core::num::<impl u64>::wrapping_sub(move _499, move _500) -> bb219
  using: _499@Mir(bb218[0]), _500@Mir(bb218[1])
bb219:
  _50 = move _498
  using: _498@Mir(bb218[2])
  goto -> bb220
  using: 
bb220:
  _503 = ((*_1).7: u8)
  using: _1@Phi(bb187)
  _502 = move _503 as i32 (IntToInt)
  using: _503@Mir(bb220[0])
  _504 = const 8_i32
  using: 
  _501 = BitAnd(move _502, move _504)
  using: _502@Mir(bb220[1]), _504@Mir(bb220[2])
  switchInt(move _501) -> [0: bb223, otherwise: bb221]
  using: _501@Mir(bb220[3])
bb221:
  _505 = const 0_i32
  using: 
  _507 = ((*_1).3: *mut u8)
  using: _1@Phi(bb187)
  _509 = _50
  using: _50@Phi(bb220)
  _508 = move _509 as isize (IntToInt)
  using: _509@Mir(bb221[2])
  _506 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _507, move _508) -> bb222
  using: _507@Mir(bb221[1]), _508@Mir(bb221[3])
bb222:
  (*_506) = move _505 as u8 (IntToInt)
  using: _506@Mir(bb221[4]), _505@Mir(bb221[0])
  goto -> bb223
  using: 
bb223:
  _514 = &_4
  using: _4@Phi(bb187)
  _513 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _514) -> bb233
  using: _514@Mir(bb223[0])
bb224:
  _510 = const false
  using: 
  goto -> bb226
  using: 
bb225:
  _523 = _50
  using: _50@Phi(bb223)
  _524 = const 0_u64
  using: 
  _522 = Eq(move _523, move _524)
  using: _523@Mir(bb225[0]), _524@Mir(bb225[1])
  _510 = move _522
  using: _522@Mir(bb225[2])
  goto -> bb226
  using: 
bb226:
  switchInt(move _510) -> [0: bb236, otherwise: bb234]
  using: _510@Phi(bb226)
bb227:
  _511 = const false
  using: 
  goto -> bb229
  using: 
bb228:
  _521 = _47
  using: _47@Phi(bb176)
  _520 = Eq(move _521, const 0_i32)
  using: _521@Mir(bb228[0])
  _511 = move _520
  using: _520@Mir(bb228[1])
  goto -> bb229
  using: 
bb229:
  switchInt(move _511) -> [0: bb224, otherwise: bb225]
  using: _511@Phi(bb229)
bb230:
  _512 = const false
  using: 
  goto -> bb232
  using: 
bb231:
  _518 = ((*_1).7: u8)
  using: _1@Phi(bb223)
  _517 = move _518 as i32 (IntToInt)
  using: _518@Mir(bb231[0])
  _519 = const 16_i32
  using: 
  _516 = BitAnd(move _517, move _519)
  using: _517@Mir(bb231[1]), _519@Mir(bb231[2])
  _515 = Ne(move _516, const 0_i32)
  using: _516@Mir(bb231[3])
  _512 = move _515
  using: _515@Mir(bb231[4])
  goto -> bb232
  using: 
bb232:
  switchInt(move _512) -> [0: bb227, otherwise: bb228]
  using: _512@Phi(bb232)
bb233:
  switchInt(move _513) -> [0: bb230, otherwise: bb231]
  using: _513@Mir(bb223[1])
bb234:
  _527 = _4
  using: _4@Phi(bb187)
  _529 = const "non-null function pointer"
  using: 
  _528 = _529
  using: _529@Mir(bb234[1])
  _526 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _527, move _528) -> bb235
  using: _527@Mir(bb234[0]), _528@Mir(bb234[2])
bb235:
  _530 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _531 = _50
  using: _50@Phi(bb226)
  _532 = _6
  using: _6@Phi(bb191)
  _525 = move _526(move _530, move _531, move _532) -> bb240
  using: _526@Entry, _530@Mir(bb235[0]), _531@Mir(bb235[1]), _532@Mir(bb235[2])
bb236:
  _534 = &_4
  using: _4@Phi(bb187)
  _533 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _534) -> bb237
  using: _534@Mir(bb236[0])
bb237:
  switchInt(move _533) -> [0: bb240, otherwise: bb238]
  using: _533@Mir(bb236[1])
bb238:
  _537 = _4
  using: _4@Phi(bb187)
  _539 = const "non-null function pointer"
  using: 
  _538 = _539
  using: _539@Mir(bb238[1])
  _536 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _537, move _538) -> bb239
  using: _537@Mir(bb238[0]), _538@Mir(bb238[2])
bb239:
  _541 = ((*_1).3: *mut u8)
  using: _1@Phi(bb232)
  _540 = move _541 as *mut std::ffi::c_void (PtrToPtr)
  using: _541@Mir(bb239[0])
  _542 = _50
  using: _50@Phi(bb226)
  _543 = _6
  using: _6@Phi(bb191)
  _535 = move _536(move _540, move _542, move _543) -> bb240
  using: _536@Entry, _540@Mir(bb239[1]), _542@Mir(bb239[2]), _543@Mir(bb239[3])
bb240:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb241:
  _546 = &_46
  using: _46@Phi(bb162)
  _545 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _546) -> bb242
  using: _546@Mir(bb241[0])
bb242:
  switchInt(move _545) -> [0: bb245, otherwise: bb243]
  using: _545@Mir(bb241[1])
bb243:
  _548 = _46
  using: _46@Phi(bb162)
  _550 = const "non-null function pointer"
  using: 
  _549 = _550
  using: _550@Mir(bb243[1])
  _547 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _548, move _549) -> bb244
  using: _548@Mir(bb243[0]), _549@Mir(bb243[2])
bb244:
  _551 = _41
  using: _41@Phi(bb198)
  _544 = move _547(move _551) -> bb249
  using: _547@Entry, _551@Mir(bb244[0])
bb245:
  _555 = _41
  using: _41@Phi(bb198)
  _554 = move _555 as i32 (IntToInt)
  using: _555@Mir(bb245[0])
  _556 = const 13_i32
  using: 
  _553 = Eq(move _554, move _556)
  using: _554@Mir(bb245[1]), _556@Mir(bb245[2])
  switchInt(move _553) -> [0: bb247, otherwise: bb246]
  using: _553@Mir(bb245[3])
bb246:
  _552 = const true
  using: 
  goto -> bb248
  using: 
bb247:
  _559 = _41
  using: _41@Phi(bb198)
  _558 = move _559 as i32 (IntToInt)
  using: _559@Mir(bb247[0])
  _560 = const 10_i32
  using: 
  _557 = Eq(move _558, move _560)
  using: _558@Mir(bb247[1]), _560@Mir(bb247[2])
  _552 = move _557
  using: _557@Mir(bb247[3])
  goto -> bb248
  using: 
bb248:
  _544 = move _552 as i32 (IntToInt)
  using: _552@Phi(bb248)
  goto -> bb249
  using: 
bb249:
  switchInt(move _544) -> [0: bb280, otherwise: bb250]
  using: _544@Phi(bb249)
bb250:
  _562 = _50
  using: _50@Phi(bb226)
  _564 = _49
  using: _49@Phi(bb220)
  _565 = const 1_u64
  using: 
  _563 = core::num::<impl u64>::wrapping_add(move _564, move _565) -> bb251
  using: _564@Mir(bb250[1]), _565@Mir(bb250[2])
bb251:
  _561 = core::num::<impl u64>::wrapping_sub(move _562, move _563) -> bb252
  using: _562@Mir(bb250[0]), _563@Mir(bb250[3])
bb252:
  _50 = move _561
  using: _561@Mir(bb251[0])
  _566 = _47
  using: _47@Phi(bb229)
  switchInt(move _566) -> [0: bb253, otherwise: bb255]
  using: _566@Mir(bb252[1])
bb253:
  _568 = _50
  using: _50@Mir(bb252[0])
  _569 = _49
  using: _49@Phi(bb220)
  _567 = core::num::<impl u64>::wrapping_sub(move _568, move _569) -> bb254
  using: _568@Mir(bb253[0]), _569@Mir(bb253[1])
bb254:
  _50 = move _567
  using: _567@Mir(bb253[2])
  goto -> bb255
  using: 
bb255:
  _572 = ((*_1).7: u8)
  using: _1@Phi(bb240)
  _571 = move _572 as i32 (IntToInt)
  using: _572@Mir(bb255[0])
  _573 = const 8_i32
  using: 
  _570 = BitAnd(move _571, move _573)
  using: _571@Mir(bb255[1]), _573@Mir(bb255[2])
  switchInt(move _570) -> [0: bb258, otherwise: bb256]
  using: _570@Mir(bb255[3])
bb256:
  _574 = const 0_i32
  using: 
  _576 = ((*_1).3: *mut u8)
  using: _1@Phi(bb240)
  _578 = _50
  using: _50@Phi(bb255)
  _577 = move _578 as isize (IntToInt)
  using: _578@Mir(bb256[2])
  _575 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _576, move _577) -> bb257
  using: _576@Mir(bb256[1]), _577@Mir(bb256[3])
bb257:
  (*_575) = move _574 as u8 (IntToInt)
  using: _575@Mir(bb256[4]), _574@Mir(bb256[0])
  goto -> bb258
  using: 
bb258:
  _583 = &_4
  using: _4@Phi(bb240)
  _582 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _583) -> bb268
  using: _583@Mir(bb258[0])
bb259:
  _579 = const false
  using: 
  goto -> bb261
  using: 
bb260:
  _592 = _50
  using: _50@Phi(bb258)
  _593 = const 0_u64
  using: 
  _591 = Eq(move _592, move _593)
  using: _592@Mir(bb260[0]), _593@Mir(bb260[1])
  _579 = move _591
  using: _591@Mir(bb260[2])
  goto -> bb261
  using: 
bb261:
  switchInt(move _579) -> [0: bb271, otherwise: bb269]
  using: _579@Phi(bb261)
bb262:
  _580 = const false
  using: 
  goto -> bb264
  using: 
bb263:
  _590 = _47
  using: _47@Phi(bb229)
  _589 = Eq(move _590, const 0_i32)
  using: _590@Mir(bb263[0])
  _580 = move _589
  using: _589@Mir(bb263[1])
  goto -> bb264
  using: 
bb264:
  switchInt(move _580) -> [0: bb259, otherwise: bb260]
  using: _580@Phi(bb264)
bb265:
  _581 = const false
  using: 
  goto -> bb267
  using: 
bb266:
  _587 = ((*_1).7: u8)
  using: _1@Phi(bb258)
  _586 = move _587 as i32 (IntToInt)
  using: _587@Mir(bb266[0])
  _588 = const 16_i32
  using: 
  _585 = BitAnd(move _586, move _588)
  using: _586@Mir(bb266[1]), _588@Mir(bb266[2])
  _584 = Ne(move _585, const 0_i32)
  using: _585@Mir(bb266[3])
  _581 = move _584
  using: _584@Mir(bb266[4])
  goto -> bb267
  using: 
bb267:
  switchInt(move _581) -> [0: bb262, otherwise: bb263]
  using: _581@Phi(bb267)
bb268:
  switchInt(move _582) -> [0: bb265, otherwise: bb266]
  using: _582@Mir(bb258[1])
bb269:
  _596 = _4
  using: _4@Phi(bb240)
  _598 = const "non-null function pointer"
  using: 
  _597 = _598
  using: _598@Mir(bb269[1])
  _595 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _596, move _597) -> bb270
  using: _596@Mir(bb269[0]), _597@Mir(bb269[2])
bb270:
  _599 = const {0x0 as *mut std::ffi::c_void}
  using: 
  _600 = _50
  using: _50@Phi(bb261)
  _601 = _6
  using: _6@Phi(bb240)
  _594 = move _595(move _599, move _600, move _601) -> bb275
  using: _595@Entry, _599@Mir(bb270[0]), _600@Mir(bb270[1]), _601@Mir(bb270[2])
bb271:
  _603 = &_4
  using: _4@Phi(bb240)
  _602 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::is_some(move _603) -> bb272
  using: _603@Mir(bb271[0])
bb272:
  switchInt(move _602) -> [0: bb275, otherwise: bb273]
  using: _602@Mir(bb271[1])
bb273:
  _606 = _4
  using: _4@Phi(bb240)
  _608 = const "non-null function pointer"
  using: 
  _607 = _608
  using: _608@Mir(bb273[1])
  _605 = std::option::Option::<unsafe extern "C" fn(*mut std::ffi::c_void, u64, *mut std::ffi::c_void)>::expect(move _606, move _607) -> bb274
  using: _606@Mir(bb273[0]), _607@Mir(bb273[2])
bb274:
  _610 = ((*_1).3: *mut u8)
  using: _1@Phi(bb267)
  _609 = move _610 as *mut std::ffi::c_void (PtrToPtr)
  using: _610@Mir(bb274[0])
  _611 = _50
  using: _50@Phi(bb261)
  _612 = _6
  using: _6@Phi(bb240)
  _604 = move _605(move _609, move _611, move _612) -> bb275
  using: _605@Entry, _609@Mir(bb274[1]), _611@Mir(bb274[2]), _612@Mir(bb274[3])
bb275:
  _48 = const 1_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  _614 = &_5
  using: _5@Phi(bb191)
  _613 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::is_some(move _614) -> bb276
  using: _614@Mir(bb275[4])
bb276:
  switchInt(move _613) -> [0: bb279, otherwise: bb277]
  using: _613@Mir(bb275[5])
bb277:
  _617 = _5
  using: _5@Phi(bb191)
  _619 = const "non-null function pointer"
  using: 
  _618 = _619
  using: _619@Mir(bb277[1])
  _616 = std::option::Option::<unsafe extern "C" fn(i32, *mut std::ffi::c_void)>::expect(move _617, move _618) -> bb278
  using: _617@Mir(bb277[0]), _618@Mir(bb277[2])
bb278:
  _621 = _41
  using: _41@Phi(bb249)
  _620 = move _621 as i32 (IntToInt)
  using: _621@Mir(bb278[0])
  _622 = _6
  using: _6@Phi(bb275)
  _615 = move _616(move _620, move _622) -> bb279
  using: _616@Entry, _620@Mir(bb278[1]), _622@Mir(bb278[2])
bb279:
  _48 = const 0_i32
  using: 
  _49 = const 0_u64
  using: 
  _47 = const 0_i32
  using: 
  _50 = const 0_u64
  using: 
  goto -> bb18
  using: 
bb280:
  _625 = &_45
  using: _45@Phi(bb198)
  _624 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::is_some(move _625) -> bb281
  using: _625@Mir(bb280[0])
bb281:
  switchInt(move _624) -> [0: bb284, otherwise: bb282]
  using: _624@Mir(bb280[1])
bb282:
  _627 = _45
  using: _45@Phi(bb198)
  _629 = const "non-null function pointer"
  using: 
  _628 = _629
  using: _629@Mir(bb282[1])
  _626 = std::option::Option::<unsafe extern "C" fn(u8) -> i32>::expect(move _627, move _628) -> bb283
  using: _627@Mir(bb282[0]), _628@Mir(bb282[2])
bb283:
  _630 = _41
  using: _41@Phi(bb279)
  _623 = move _626(move _630) -> bb288
  using: _626@Entry, _630@Mir(bb283[0])
bb284:
  _634 = _41
  using: _41@Phi(bb279)
  _633 = move _634 as i32 (IntToInt)
  using: _634@Mir(bb284[0])
  _635 = const 32_i32
  using: 
  _632 = Eq(move _633, move _635)
  using: _633@Mir(bb284[1]), _635@Mir(bb284[2])
  switchInt(move _632) -> [0: bb286, otherwise: bb285]
  using: _632@Mir(bb284[3])
bb285:
  _631 = const true
  using: 
  goto -> bb287
  using: 
bb286:
  _638 = _41
  using: _41@Phi(bb279)
  _637 = move _638 as i32 (IntToInt)
  using: _638@Mir(bb286[0])
  _639 = const 9_i32
  using: 
  _636 = Eq(move _637, move _639)
  using: _637@Mir(bb286[1]), _639@Mir(bb286[2])
  _631 = move _636
  using: _636@Mir(bb286[3])
  goto -> bb287
  using: 
bb287:
  _623 = move _631 as i32 (IntToInt)
  using: _631@Phi(bb287)
  goto -> bb288
  using: 
bb288:
  switchInt(move _623) -> [0: bb293, otherwise: bb289]
  using: _623@Phi(bb288)
bb289:
  _640 = _50
  using: _50@Phi(bb261)
  _642 = _50
  using: _50@Phi(bb261)
  _641 = core::num::<impl u64>::wrapping_add(move _642, const 1_u64) -> bb290
  using: _642@Mir(bb289[1])
bb290:
  _50 = move _641
  using: _641@Mir(bb289[2])
  _643 = _41
  using: _41@Phi(bb288)
  _645 = ((*_1).3: *mut u8)
  using: _1@Phi(bb275)
  _647 = _640
  using: _640@Mir(bb289[0])
  _646 = move _647 as isize (IntToInt)
  using: _647@Mir(bb290[3])
  _644 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _645, move _646) -> bb291
  using: _645@Mir(bb290[2]), _646@Mir(bb290[4])
bb291:
  (*_644) = move _643
  using: _644@Mir(bb290[5]), _643@Mir(bb290[1])
  _649 = _49
  using: _49@Phi(bb255)
  _648 = core::num::<impl u64>::wrapping_add(move _649, const 1_u64) -> bb292
  using: _649@Mir(bb291[1])
bb292:
  _49 = move _648
  using: _648@Mir(bb291[2])
  goto -> bb18
  using: 
bb293:
  _652 = _41
  using: _41@Phi(bb288)
  _651 = move _652 as i32 (IntToInt)
  using: _652@Mir(bb293[0])
  _654 = _44
  using: _44@Phi(bb18)
  _653 = move _654 as i32 (IntToInt)
  using: _654@Mir(bb293[2])
  _650 = Eq(move _651, move _653)
  using: _651@Mir(bb293[1]), _653@Mir(bb293[3])
  switchInt(move _650) -> [0: bb301, otherwise: bb294]
  using: _650@Mir(bb293[4])
bb294:
  _655 = _49
  using: _49@Phi(bb255)
  switchInt(move _655) -> [0: bb300, otherwise: bb295]
  using: _655@Mir(bb294[0])
bb295:
  _658 = ((*_1).7: u8)
  using: _1@Phi(bb275)
  _657 = move _658 as i32 (IntToInt)
  using: _658@Mir(bb295[0])
  _659 = const 1_i32
  using: 
  _656 = BitAnd(move _657, move _659)
  using: _657@Mir(bb295[1]), _659@Mir(bb295[2])
  switchInt(move _656) -> [0: bb297, otherwise: bb296]
  using: _656@Mir(bb295[3])
bb296:
  _660 = const 1_i32
  using: 
  ((*_1).6: i32) = move _660
  using: _1@Phi(bb275), _660@Mir(bb296[0])
  _661 = _47
  using: _47@Phi(bb264)
  ((*_1).1: i32) = move _661
  using: _1@Phi(bb275), _661@Mir(bb296[2])
  _662 = _48
  using: _48@Phi(bb18)
  ((*_1).0: i32) = move _662
  using: _1@Phi(bb275), _662@Mir(bb296[4])
  _663 = _49
  using: _49@Phi(bb255)
  ((*_1).2: u64) = move _663
  using: _1@Phi(bb275), _663@Mir(bb296[6])
  _664 = _50
  using: _50@Phi(bb261)
  ((*_1).4: u64) = move _664
  using: _1@Phi(bb275), _664@Mir(bb296[8])
  _665 = _42
  using: _42@Mir(bb27[0])
  _666 = const 1_u64
  using: 
  _0 = core::num::<impl u64>::wrapping_sub(move _665, move _666) -> bb307
  using: _665@Mir(bb296[10]), _666@Mir(bb296[11])
bb297:
  _49 = const 0_u64
  using: 
  _667 = _50
  using: _50@Phi(bb261)
  _669 = _50
  using: _50@Phi(bb261)
  _668 = core::num::<impl u64>::wrapping_add(move _669, const 1_u64) -> bb298
  using: _669@Mir(bb297[2])
bb298:
  _50 = move _668
  using: _668@Mir(bb297[3])
  _670 = _41
  using: _41@Phi(bb288)
  _672 = ((*_1).3: *mut u8)
  using: _1@Phi(bb275)
  _674 = _667
  using: _667@Mir(bb297[1])
  _673 = move _674 as isize (IntToInt)
  using: _674@Mir(bb298[3])
  _671 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _672, move _673) -> bb299
  using: _672@Mir(bb298[2]), _673@Mir(bb298[4])
bb299:
  (*_671) = move _670
  using: _671@Mir(bb298[5]), _670@Mir(bb298[1])
  goto -> bb18
  using: 
bb300:
  _48 = const 2_i32
  using: 
  goto -> bb18
  using: 
bb301:
  _677 = ((*_1).7: u8)
  using: _1@Phi(bb275)
  _676 = move _677 as i32 (IntToInt)
  using: _677@Mir(bb301[0])
  _678 = const 1_i32
  using: 
  _675 = BitAnd(move _676, move _678)
  using: _676@Mir(bb301[1]), _678@Mir(bb301[2])
  switchInt(move _675) -> [0: bb303, otherwise: bb302]
  using: _675@Mir(bb301[3])
bb302:
  _679 = const 1_i32
  using: 
  ((*_1).6: i32) = move _679
  using: _1@Phi(bb275), _679@Mir(bb302[0])
  _680 = _47
  using: _47@Phi(bb264)
  ((*_1).1: i32) = move _680
  using: _1@Phi(bb275), _680@Mir(bb302[2])
  _681 = _48
  using: _48@Phi(bb18)
  ((*_1).0: i32) = move _681
  using: _1@Phi(bb275), _681@Mir(bb302[4])
  _682 = _49
  using: _49@Phi(bb255)
  ((*_1).2: u64) = move _682
  using: _1@Phi(bb275), _682@Mir(bb302[6])
  _683 = _50
  using: _50@Phi(bb261)
  ((*_1).4: u64) = move _683
  using: _1@Phi(bb275), _683@Mir(bb302[8])
  _684 = _42
  using: _42@Mir(bb27[0])
  _685 = const 1_u64
  using: 
  _0 = core::num::<impl u64>::wrapping_sub(move _684, move _685) -> bb307
  using: _684@Mir(bb302[10]), _685@Mir(bb302[11])
bb303:
  _48 = const 2_i32
  using: 
  _49 = const 0_u64
  using: 
  _686 = _50
  using: _50@Phi(bb261)
  _688 = _50
  using: _50@Phi(bb261)
  _687 = core::num::<impl u64>::wrapping_add(move _688, const 1_u64) -> bb304
  using: _688@Mir(bb303[3])
bb304:
  _50 = move _687
  using: _687@Mir(bb303[4])
  _689 = _41
  using: _41@Phi(bb288)
  _691 = ((*_1).3: *mut u8)
  using: _1@Phi(bb275)
  _693 = _686
  using: _686@Mir(bb303[2])
  _692 = move _693 as isize (IntToInt)
  using: _693@Mir(bb304[3])
  _690 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _691, move _692) -> bb305
  using: _691@Mir(bb304[2]), _692@Mir(bb304[4])
bb305:
  (*_690) = move _689
  using: _690@Mir(bb304[5]), _689@Mir(bb304[1])
  goto -> bb18
  using: 
bb306:
  _694 = _47
  using: _47@Phi(bb264)
  ((*_1).1: i32) = move _694
  using: _1@Phi(bb275), _694@Mir(bb306[0])
  _695 = _48
  using: _48@Phi(bb18)
  ((*_1).0: i32) = move _695
  using: _1@Phi(bb275), _695@Mir(bb306[2])
  _696 = _49
  using: _49@Phi(bb255)
  ((*_1).2: u64) = move _696
  using: _1@Phi(bb275), _696@Mir(bb306[4])
  _697 = _50
  using: _50@Phi(bb261)
  ((*_1).4: u64) = move _697
  using: _1@Phi(bb275), _697@Mir(bb306[6])
  _0 = _42
  using: _42@Phi(bb18)
  goto -> bb307
  using: 
bb307:
  return
  using: _0@Phi(bb307)
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call libcsv::__assert_rtn @ workspace/libcsv/rust/libcsv.rs:431:9: 435:54 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const addr is ignored
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:469:37: 470:76 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:481:19: 481:34 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libcsv/rust/libcsv.rs:482:17: 482:40 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:485:33: 485:42 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:486:34: 486:69 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:494:31: 494:40 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:495:32: 495:67 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:506:61: 506:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:511:45: 511:71 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:514:32: 514:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:519:33: 519:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:523:39: 523:48 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:524:33: 524:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:534:32: 534:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:535:33: 535:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:545:32: 545:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:546:33: 546:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:560:66: 560:86 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:564:41: 564:67 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:567:28: 567:37 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:571:29: 571:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:575:35: 575:44 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:576:29: 576:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:594:43: 594:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:595:37: 595:60 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:603:47: 603:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:604:41: 604:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:615:40: 616:79 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:619:47: 619:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:620:41: 620:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:627:47: 627:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:628:41: 628:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:633:61: 633:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:638:45: 638:71 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:641:32: 641:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:646:33: 646:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:650:39: 650:48 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:651:33: 651:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:662:38: 662:47 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:663:39: 663:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:674:61: 674:81 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:679:45: 679:71 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:682:32: 682:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:687:33: 687:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:691:39: 691:48 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:692:33: 692:68 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:702:32: 702:41 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:703:33: 703:68 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:713:47: 713:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:714:41: 714:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:717:44: 717:53 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:718:45: 718:80 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:726:43: 726:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:727:37: 727:60 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:728:37: 728:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:731:43: 731:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:732:37: 732:60 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:742:73: 746:104 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:742:53: 746:105 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:751:66: 751:86 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:755:41: 755:67 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:758:28: 758:37 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:762:29: 762:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:766:35: 766:44 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:767:29: 767:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:777:38: 777:47 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:778:39: 778:74 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:787:73: 791:104 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:787:53: 791:105 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:796:66: 796:86 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:800:41: 800:67 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:803:28: 803:37 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:807:29: 807:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:811:35: 811:44 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:812:29: 812:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:822:28: 822:37 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:823:29: 823:64 (#0) by default
rewrite call std::option::Option::<T>::is_some @ workspace/libcsv/rust/libcsv.rs:831:39: 831:48 (#0) by default
[31mERROR[0m [2mrefactor::rewrite_fn[0m[2m:[0m const reference is ignored
rewrite call std::option::Option::<T>::expect @ workspace/libcsv/rust/libcsv.rs:832:40: 832:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:840:43: 840:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:841:37: 841:60 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:842:37: 842:52 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:854:40: 855:79 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:859:47: 859:62 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:860:41: 860:64 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:873:36: 874:75 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:879:43: 879:58 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:880:37: 880:61 (#0) by default
@DefId(0:37 ~ c2rust_lib[1043]::libcsv::csv_write)
bb0:
  _5 = _1
  using: _1@Entry
  _6 = _2
  using: _2@Entry
  _7 = _3
  using: _3@Entry
  _8 = _4
  using: _4@Entry
  _9 = const 34_u8
  using: 
  _0 = libcsv::csv_write2(move _5, move _6, move _7, move _8, move _9) -> bb1
  using: _5@Mir(bb0[0]), _6@Mir(bb0[1]), _7@Mir(bb0[2]), _8@Mir(bb0[3]), _9@Mir(bb0[4])
bb1:
  return
  using: _0@Mir(bb0[5])
@DefId(0:38 ~ c2rust_lib[1043]::libcsv::csv_fwrite)
bb0:
  _4 = _1
  using: _1@Entry
  _5 = _2
  using: _2@Entry
  _6 = _3
  using: _3@Entry
  _7 = const 34_u8
  using: 
  _0 = libcsv::csv_fwrite2(move _4, move _5, move _6, move _7) -> bb1
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1]), _6@Mir(bb0[2]), _7@Mir(bb0[3])
bb1:
  return
  using: _0@Mir(bb0[4])
@DefId(0:39 ~ c2rust_lib[1043]::libcsv::csv_write2)
bb0:
  _7 = _1
  using: _1@Entry
  _6 = move _7 as *mut u8 (PtrToPtr)
  using: _7@Mir(bb0[0])
  _9 = _3
  using: _3@Entry
  _8 = move _9 as *const u8 (PtrToPtr)
  using: _9@Mir(bb0[2])
  _10 = const 0_u64
  using: 
  _12 = _3
  using: _3@Entry
  _11 = std::ptr::const_ptr::<impl *const std::ffi::c_void>::is_null(move _12) -> bb1
  using: _12@Mir(bb0[5])
bb1:
  switchInt(move _11) -> [0: bb3, otherwise: bb2]
  using: _11@Mir(bb0[6])
bb2:
  _15 = _3
  using: _3@Entry
  _14 = move _15 as usize (PointerExposeAddress)
  using: _15@Mir(bb2[0])
  _13 = Eq(move _14, const 0_usize)
  using: _14@Mir(bb2[1])
  assume(move _13)
  using: _13@Mir(bb2[2])
  _0 = const 0_u64
  using: 
  goto -> bb34
  using: 
bb3:
  _17 = _1
  using: _1@Entry
  _16 = std::ptr::mut_ptr::<impl *mut std::ffi::c_void>::is_null(move _17) -> bb4
  using: _17@Mir(bb3[0])
bb4:
  switchInt(move _16) -> [0: bb6, otherwise: bb5]
  using: _16@Mir(bb3[1])
bb5:
  _20 = _1
  using: _1@Entry
  _19 = move _20 as usize (PointerExposeAddress)
  using: _20@Mir(bb5[0])
  _18 = Eq(move _19, const 0_usize)
  using: _19@Mir(bb5[1])
  assume(move _18)
  using: _18@Mir(bb5[2])
  _2 = const 0_u64
  using: 
  goto -> bb6
  using: 
bb6:
  _22 = _2
  using: _2@Phi(bb6)
  _23 = const 0_u64
  using: 
  _21 = Gt(move _22, move _23)
  using: _22@Mir(bb6[0]), _23@Mir(bb6[1])
  switchInt(move _21) -> [0: bb9, otherwise: bb7]
  using: _21@Mir(bb6[2])
bb7:
  _24 = _6
  using: _6@Mir(bb0[1])
  _26 = _6
  using: _6@Mir(bb0[1])
  _25 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _26, const 1_isize) -> bb8
  using: _26@Mir(bb7[1])
bb8:
  _6 = move _25
  using: _25@Mir(bb7[2])
  _27 = _5
  using: _5@Entry
  (*_24) = move _27
  using: _24@Mir(bb7[0]), _27@Mir(bb8[1])
  goto -> bb9
  using: 
bb9:
  _29 = _10
  using: _10@Mir(bb0[4])
  _28 = core::num::<impl u64>::wrapping_add(move _29, const 1_u64) -> bb10
  using: _29@Mir(bb9[0])
bb10:
  _10 = move _28
  using: _28@Mir(bb9[1])
  goto -> bb11
  using: 
bb11:
  _30 = _4
  using: _4@Phi(bb11)
  switchInt(move _30) -> [0: bb28, otherwise: bb12]
  using: _30@Mir(bb11[0])
bb12:
  _33 = (*_8)
  using: _8@Phi(bb11)
  _32 = move _33 as i32 (IntToInt)
  using: _33@Mir(bb12[0])
  _35 = _5
  using: _5@Phi(bb11)
  _34 = move _35 as i32 (IntToInt)
  using: _35@Mir(bb12[2])
  _31 = Eq(move _32, move _34)
  using: _32@Mir(bb12[1]), _34@Mir(bb12[3])
  switchInt(move _31) -> [0: bb19, otherwise: bb13]
  using: _31@Mir(bb12[4])
bb13:
  _37 = _2
  using: _2@Phi(bb11)
  _38 = _10
  using: _10@Phi(bb11)
  _36 = Gt(move _37, move _38)
  using: _37@Mir(bb13[0]), _38@Mir(bb13[1])
  switchInt(move _36) -> [0: bb16, otherwise: bb14]
  using: _36@Mir(bb13[2])
bb14:
  _39 = _6
  using: _6@Phi(bb11)
  _41 = _6
  using: _6@Phi(bb11)
  _40 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _41, const 1_isize) -> bb15
  using: _41@Mir(bb14[1])
bb15:
  _6 = move _40
  using: _40@Mir(bb14[2])
  _42 = _5
  using: _5@Phi(bb11)
  (*_39) = move _42
  using: _39@Mir(bb14[0]), _42@Mir(bb15[1])
  goto -> bb16
  using: 
bb16:
  _44 = _10
  using: _10@Phi(bb11)
  _45 = const u64::MAX
  using: 
  _43 = Lt(move _44, move _45)
  using: _44@Mir(bb16[0]), _45@Mir(bb16[1])
  switchInt(move _43) -> [0: bb19, otherwise: bb17]
  using: _43@Mir(bb16[2])
bb17:
  _47 = _10
  using: _10@Phi(bb11)
  _46 = core::num::<impl u64>::wrapping_add(move _47, const 1_u64) -> bb18
  using: _47@Mir(bb17[0])
bb18:
  _10 = move _46
  using: _46@Mir(bb17[1])
  goto -> bb19
  using: 
bb19:
  _49 = _2
  using: _2@Phi(bb19)
  _50 = _10
  using: _10@Phi(bb19)
  _48 = Gt(move _49, move _50)
  using: _49@Mir(bb19[0]), _50@Mir(bb19[1])
  switchInt(move _48) -> [0: bb22, otherwise: bb20]
  using: _48@Mir(bb19[2])
bb20:
  _51 = _6
  using: _6@Phi(bb19)
  _53 = _6
  using: _6@Phi(bb19)
  _52 = std::ptr::mut_ptr::<impl *mut u8>::offset(move _53, const 1_isize) -> bb21
  using: _53@Mir(bb20[1])
bb21:
  _6 = move _52
  using: _52@Mir(bb20[2])
  _54 = (*_8)
  using: _8@Phi(bb11)
  (*_51) = move _54
  using: _51@Mir(bb20[0]), _54@Mir(bb21[1])
  goto -> bb22
  using: 
bb22:
  _56 = _10
  using: _10@Phi(bb19)
  _57 = const u64::MAX
  using: 
  _55 = Lt(move _56, move _57)
  using: _56@Mir(bb22[0]), _57@Mir(bb22[1])
  switchInt(move _55) -> [0: bb25, otherwise: bb23]
  using: _55@Mir(bb22[2])
bb23:
  _59 = _10
  using: _10@Phi(bb19)
  _58 = core::num::<impl u64>::wrapping_add(move _59, const 1_u64) -> bb24
  using: _59@Mir(bb23[0])
bb24:
  _10 = move _58
  using: _58@Mir(bb23[1])
  goto -> bb25
  using: 
bb25:
  _61 = _4
  using: _4@Phi(bb11)
  _60 = core::num::<impl u64>::wrapping_sub(move _61, const 1_u64) -> bb26
  using: _61@Mir(bb25[0])
bb26:
  _4 = move _60
  using: _60@Mir(bb25[1])
  _63 = _8
  using: _8@Phi(bb22)
  _62 = std::ptr::const_ptr::<impl *const u8>::offset(move _63, const 1_isize) -> bb27
  using: _63@Mir(bb26[1])
bb27:
  _8 = move _62
  using: _62@Mir(bb26[2])
  goto -> bb11
  using: 
bb28:
  _65 = _2
  using: _2@Phi(bb19)
  _66 = _10
  using: _10@Phi(bb25)
  _64 = Gt(move _65, move _66)
  using: _65@Mir(bb28[0]), _66@Mir(bb28[1])
  switchInt(move _64) -> [0: bb30, otherwise: bb29]
  using: _64@Mir(bb28[2])
bb29:
  _67 = _5
  using: _5@Phi(bb19)
  (*_6) = move _67
  using: _6@Phi(bb22), _67@Mir(bb29[0])
  goto -> bb30
  using: 
bb30:
  _69 = _10
  using: _10@Phi(bb25)
  _70 = const u64::MAX
  using: 
  _68 = Lt(move _69, move _70)
  using: _69@Mir(bb30[0]), _70@Mir(bb30[1])
  switchInt(move _68) -> [0: bb33, otherwise: bb31]
  using: _68@Mir(bb30[2])
bb31:
  _72 = _10
  using: _10@Phi(bb25)
  _71 = core::num::<impl u64>::wrapping_add(move _72, const 1_u64) -> bb32
  using: _72@Mir(bb31[0])
bb32:
  _10 = move _71
  using: _71@Mir(bb31[1])
  goto -> bb33
  using: 
bb33:
  _0 = _10
  using: _10@Phi(bb33)
  goto -> bb34
  using: 
bb34:
  return
  using: _0@Phi(bb34)
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:920:23: 920:32 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:923:19: 923:34 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:928:31: 928:40 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:932:31: 932:46 (#0) by default
rewrite call std::ptr::mut_ptr::<impl *mut T>::offset @ workspace/libcsv/rust/libcsv.rs:937:27: 937:36 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:941:27: 941:42 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:943:29: 943:44 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libcsv/rust/libcsv.rs:944:21: 944:30 (#0) by default
rewrite call core::num::<impl u64>::wrapping_add @ workspace/libcsv/rust/libcsv.rs:948:23: 948:38 (#0) by default
@DefId(0:40 ~ c2rust_lib[1043]::libcsv::csv_fwrite2)
bb0:
  _6 = _2
  using: _2@Entry
  _5 = move _6 as *const u8 (PtrToPtr)
  using: _6@Mir(bb0[0])
  _9 = _1
  using: _1@Entry
  _8 = std::ptr::mut_ptr::<impl *mut libcsv::__sFILE>::is_null(move _9) -> bb4
  using: _9@Mir(bb0[2])
bb1:
  _7 = const true
  using: 
  goto -> bb3
  using: 
bb2:
  _11 = _2
  using: _2@Entry
  _10 = std::ptr::const_ptr::<impl *const std::ffi::c_void>::is_null(move _11) -> bb5
  using: _11@Mir(bb2[0])
bb3:
  switchInt(move _7) -> [0: bb7, otherwise: bb6]
  using: _7@Phi(bb3)
bb4:
  switchInt(move _8) -> [0: bb2, otherwise: bb1]
  using: _8@Mir(bb0[3])
bb5:
  _7 = move _10
  using: _10@Mir(bb2[1])
  goto -> bb3
  using: 
bb6:
  _0 = const 0_i32
  using: 
  goto -> bb25
  using: 
bb7:
  _15 = _4
  using: _4@Entry
  _14 = move _15 as i32 (IntToInt)
  using: _15@Mir(bb7[0])
  _16 = _1
  using: _1@Entry
  _13 = libcsv::fputc(move _14, move _16) -> bb8
  using: _14@Mir(bb7[1]), _16@Mir(bb7[2])
bb8:
  _17 = const -1_i32
  using: 
  _12 = Eq(move _13, move _17)
  using: _13@Mir(bb7[3]), _17@Mir(bb8[0])
  switchInt(move _12) -> [0: bb10, otherwise: bb9]
  using: _12@Mir(bb8[1])
bb9:
  _0 = const -1_i32
  using: 
  goto -> bb25
  using: 
bb10:
  _18 = _3
  using: _3@Phi(bb10)
  switchInt(move _18) -> [0: bb21, otherwise: bb11]
  using: _18@Mir(bb10[0])
bb11:
  _21 = (*_5)
  using: _5@Phi(bb10)
  _20 = move _21 as i32 (IntToInt)
  using: _21@Mir(bb11[0])
  _23 = _4
  using: _4@Phi(bb10)
  _22 = move _23 as i32 (IntToInt)
  using: _23@Mir(bb11[2])
  _19 = Eq(move _20, move _22)
  using: _20@Mir(bb11[1]), _22@Mir(bb11[3])
  switchInt(move _19) -> [0: bb15, otherwise: bb12]
  using: _19@Mir(bb11[4])
bb12:
  _27 = _4
  using: _4@Phi(bb10)
  _26 = move _27 as i32 (IntToInt)
  using: _27@Mir(bb12[0])
  _28 = _1
  using: _1@Phi(bb10)
  _25 = libcsv::fputc(move _26, move _28) -> bb13
  using: _26@Mir(bb12[1]), _28@Mir(bb12[2])
bb13:
  _29 = const -1_i32
  using: 
  _24 = Eq(move _25, move _29)
  using: _25@Mir(bb12[3]), _29@Mir(bb13[0])
  switchInt(move _24) -> [0: bb15, otherwise: bb14]
  using: _24@Mir(bb13[1])
bb14:
  _0 = const -1_i32
  using: 
  goto -> bb25
  using: 
bb15:
  _33 = (*_5)
  using: _5@Phi(bb10)
  _32 = move _33 as i32 (IntToInt)
  using: _33@Mir(bb15[0])
  _34 = _1
  using: _1@Phi(bb15)
  _31 = libcsv::fputc(move _32, move _34) -> bb16
  using: _32@Mir(bb15[1]), _34@Mir(bb15[2])
bb16:
  _35 = const -1_i32
  using: 
  _30 = Eq(move _31, move _35)
  using: _31@Mir(bb15[3]), _35@Mir(bb16[0])
  switchInt(move _30) -> [0: bb18, otherwise: bb17]
  using: _30@Mir(bb16[1])
bb17:
  _0 = const -1_i32
  using: 
  goto -> bb25
  using: 
bb18:
  _37 = _3
  using: _3@Phi(bb10)
  _36 = core::num::<impl u64>::wrapping_sub(move _37, const 1_u64) -> bb19
  using: _37@Mir(bb18[0])
bb19:
  _3 = move _36
  using: _36@Mir(bb18[1])
  _39 = _5
  using: _5@Phi(bb10)
  _38 = std::ptr::const_ptr::<impl *const u8>::offset(move _39, const 1_isize) -> bb20
  using: _39@Mir(bb19[1])
bb20:
  _5 = move _38
  using: _38@Mir(bb19[2])
  goto -> bb10
  using: 
bb21:
  _43 = _4
  using: _4@Phi(bb15)
  _42 = move _43 as i32 (IntToInt)
  using: _43@Mir(bb21[0])
  _44 = _1
  using: _1@Phi(bb15)
  _41 = libcsv::fputc(move _42, move _44) -> bb22
  using: _42@Mir(bb21[1]), _44@Mir(bb21[2])
bb22:
  _45 = const -1_i32
  using: 
  _40 = Eq(move _41, move _45)
  using: _41@Mir(bb21[3]), _45@Mir(bb22[0])
  switchInt(move _40) -> [0: bb24, otherwise: bb23]
  using: _40@Mir(bb22[1])
bb23:
  _0 = const -1_i32
  using: 
  goto -> bb25
  using: 
bb24:
  _0 = const 0_i32
  using: 
  goto -> bb25
  using: 
bb25:
  return
  using: _0@Phi(bb25)
rewrite call libcsv::fputc @ workspace/libcsv/rust/libcsv.rs:960:8: 960:47 (#0) by default
rewrite call libcsv::fputc @ workspace/libcsv/rust/libcsv.rs:965:16: 965:55 (#0) by default
rewrite call libcsv::fputc @ workspace/libcsv/rust/libcsv.rs:969:12: 969:51 (#0) by default
rewrite call core::num::<impl u64>::wrapping_sub @ workspace/libcsv/rust/libcsv.rs:972:29: 972:44 (#0) by default
rewrite call std::ptr::const_ptr::<impl *const T>::offset @ workspace/libcsv/rust/libcsv.rs:973:21: 973:30 (#0) by default
rewrite call libcsv::fputc @ workspace/libcsv/rust/libcsv.rs:975:8: 975:47 (#0) by default

extern "C" {
    pub type __sFILEX;
    #[no_mangle]
    fn __assert_rtn(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char,
                    _: std::os::raw::c_int, _: *const std::os::raw::c_char) -> !;
    #[no_mangle]
    fn free(_: *mut std::os::raw::c_void);
    #[no_mangle]
    fn realloc(_: *mut std::os::raw::c_void, _: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;
    #[no_mangle]
    fn fputc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;
}
pub type __int64_t = std::os::raw::c_longlong;
pub type __darwin_size_t = std::os::raw::c_ulong;
pub type __darwin_off_t = __int64_t;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __sbuf {
    pub _base: *const std::os::raw::c_uchar,
    pub _size: std::os::raw::c_int,
}
impl Default for __sbuf {fn default() -> Self {Self {
_base: std::ptr::null_mut(),
_size: Default::default(),
}}}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct __sFILE {
    pub _p: *const std::os::raw::c_uchar,
    pub _r: std::os::raw::c_int,
    pub _w: std::os::raw::c_int,
    pub _flags: std::os::raw::c_short,
    pub _file: std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: std::os::raw::c_int,
    pub _cookie: *const std::os::raw::c_void,
    pub _close: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void)
                           -> std::os::raw::c_int>,
    pub _read: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                           _: *mut std::os::raw::c_char,
                                           _: std::os::raw::c_int) -> std::os::raw::c_int>,
    pub _seek: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: fpos_t,
                                           _: std::os::raw::c_int) -> fpos_t>,
    pub _write: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                            _: *const std::os::raw::c_char,
                                            _: std::os::raw::c_int) -> std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _extra: *const __sFILEX,
    pub _ur: std::os::raw::c_int,
    pub _ubuf: [std::os::raw::c_uchar; 3],
    pub _nbuf: [std::os::raw::c_uchar; 1],
    pub _lb: __sbuf,
    pub _blksize: std::os::raw::c_int,
    pub _offset: fpos_t,
}
impl Default for __sFILE {fn default() -> Self {Self {
_p: std::ptr::null_mut(),
_r: Default::default(),
_w: Default::default(),
_flags: Default::default(),
_file: Default::default(),
_bf: Default::default(),
_lbfsize: Default::default(),
_cookie: std::ptr::null_mut(),
_close: Default::default(),
_read: Default::default(),
_seek: Default::default(),
_write: Default::default(),
_ub: Default::default(),
_extra: std::ptr::null_mut(),
_ur: Default::default(),
_ubuf: Default::default(),
_nbuf: Default::default(),
_lb: Default::default(),
_blksize: Default::default(),
_offset: Default::default(),
}}}

pub type FILE = __sFILE;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct csv_parser {
    pub pstate: std::os::raw::c_int,
    pub quoted: std::os::raw::c_int,
    pub spaces: size_t,
    pub entry_buf: *mut std::os::raw::c_uchar,
    pub entry_pos: size_t,
    pub entry_size: size_t,
    pub status: std::os::raw::c_int,
    pub options: std::os::raw::c_uchar,
    pub quote_char: std::os::raw::c_uchar,
    pub delim_char: std::os::raw::c_uchar,
    pub is_space: Option<unsafe extern "C" fn(_: std::os::raw::c_uchar)
                             -> std::os::raw::c_int>,
    pub is_term: Option<unsafe extern "C" fn(_: std::os::raw::c_uchar)
                            -> std::os::raw::c_int>,
    pub blk_size: size_t,
    pub malloc_func: Option<unsafe extern "C" fn(_: size_t)
                                -> *mut std::os::raw::c_void>,
    pub realloc_func: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void,
                                                  _: size_t)
                                 -> *mut std::os::raw::c_void>,
    pub free_func: Option<unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ()>,
}
impl Default for csv_parser {fn default() -> Self {Self {
pstate: Default::default(),
quoted: Default::default(),
spaces: Default::default(),
entry_buf: std::ptr::null_mut(),
entry_pos: Default::default(),
entry_size: Default::default(),
status: Default::default(),
options: Default::default(),
quote_char: Default::default(),
delim_char: Default::default(),
is_space: Default::default(),
is_term: Default::default(),
blk_size: Default::default(),
malloc_func: Default::default(),
realloc_func: Default::default(),
free_func: Default::default(),
}}}

static mut csv_errors: [*const std::os::raw::c_char; 5] =
    [b"success\x00" as *const u8 as *const std::os::raw::c_char,
     b"error parsing data while strict checking enabled\x00" as *const u8 as
         *const std::os::raw::c_char,
     b"memory exhausted while increasing buffer size\x00" as *const u8 as
         *const std::os::raw::c_char,
     b"data size too large\x00" as *const u8 as *const std::os::raw::c_char,
     b"invalid status code\x00" as *const u8 as *const std::os::raw::c_char];
#[no_mangle]
pub unsafe extern "C" fn csv_error(mut p: *const csv_parser) -> std::os::raw::c_int {
    if !(!p.is_null() &&
             !(b"received null csv_parser\x00" as *const u8 as
                   *const std::os::raw::c_char).is_null()) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn(b"csv_error\x00" as *const u8 as *const i8,
                     b"libcsv.c\x00" as *const u8 as *const std::os::raw::c_char,
                     82 as std::os::raw::c_int,
                     b"p && \"received null csv_parser\"\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    /* Return the current status of the parser */
    return (*p).status;
}
#[no_mangle]
pub unsafe extern "C" fn csv_strerror(mut status: std::os::raw::c_int)
 -> *const std::os::raw::c_char {
    /* Return a textual description of status */
    if status >= 4 as std::os::raw::c_int || status < 0 as std::os::raw::c_int {
        return csv_errors[4 as std::os::raw::c_int as usize]
    } else { return csv_errors[status as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn csv_get_opts(mut p: *const csv_parser)
 -> std::os::raw::c_int {
    /* Return the currently set options of parser */
    if p.is_null() {(); return -(1 as std::os::raw::c_int) }
    return (*p).options as std::os::raw::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_opts(mut p: Option<&mut csv_parser>,
                                      mut options: std::os::raw::c_uchar)
 -> std::os::raw::c_int {
    /* Set the options */
    if p.as_deref().is_none() {(); return -(1 as std::os::raw::c_int) }
    (*p.as_deref_mut().unwrap()).options= options;
    return 0 as std::os::raw::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn csv_init(mut p: Option<&mut csv_parser>,
                                  mut options: std::os::raw::c_uchar) -> std::os::raw::c_int {
    /* Initialize a csv_parser object returns 0 on success, -1 on error */
    if p.as_deref().is_none() {(); return -(1 as std::os::raw::c_int) }
    (*p.as_deref_mut().unwrap()).entry_buf= 0 as *mut std::os::raw::c_uchar;
    (*p.as_deref_mut().unwrap()).pstate= 0 as std::os::raw::c_int;
    (*p.as_deref_mut().unwrap()).quoted= 0 as std::os::raw::c_int;
    (*p.as_deref_mut().unwrap()).spaces= 0 as std::os::raw::c_int as size_t;
    (*p.as_deref_mut().unwrap()).entry_pos= 0 as std::os::raw::c_int as size_t;
    (*p.as_deref_mut().unwrap()).entry_size= 0 as std::os::raw::c_int as size_t;
    (*p.as_deref_mut().unwrap()).status= 0 as std::os::raw::c_int;
    (*p.as_deref_mut().unwrap()).options= options;
    (*p.as_deref_mut().unwrap()).quote_char= 0x22 as std::os::raw::c_int as std::os::raw::c_uchar;
    (*p.as_deref_mut().unwrap()).delim_char= 0x2c as std::os::raw::c_int as std::os::raw::c_uchar;
    (*p.as_deref_mut().unwrap()).is_space= None;
    (*p.as_deref_mut().unwrap()).is_term= None;
    (*p.as_deref_mut().unwrap()).blk_size= 128 as std::os::raw::c_int as size_t;
    (*p.as_deref_mut().unwrap()).malloc_func= None;
    (*p.as_deref_mut().unwrap()).realloc_func=
        Some(realloc as
                 unsafe extern "C" fn(_: *mut std::os::raw::c_void, _: std::os::raw::c_ulong)
                     -> *mut std::os::raw::c_void);
    (*p.as_deref_mut().unwrap()).free_func=
        Some(free as unsafe extern "C" fn(_: *mut std::os::raw::c_void) -> ());
    return 0 as std::os::raw::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn csv_free(mut p: *mut csv_parser) {
    /* Free the entry_buffer of csv_parser object */
    if p.is_null() {(); return }
    if !(*p).entry_buf.is_null() && (*p).free_func.is_some() {
        (*p).free_func.expect("non-null function pointer")((*p).entry_buf as
                                                               *mut std::os::raw::c_void);
    }
    (*p).entry_buf= 0 as *mut std::os::raw::c_uchar;
    (*p).entry_size= 0 as std::os::raw::c_int as size_t;
}
#[no_mangle]
pub unsafe extern "C" fn csv_fini(mut p: Option<&mut csv_parser>,
                                  mut cb1:
                                      Option<unsafe extern "C" fn(_:
                                                                      *mut std::os::raw::c_void,
                                                                  _: size_t,
                                                                  _:
                                                                      *mut std::os::raw::c_void)
                                                 -> ()>,
                                  mut cb2:
                                      Option<unsafe extern "C" fn(_:
                                                                      std::os::raw::c_int,
                                                                  _:
                                                                      *mut std::os::raw::c_void)
                                                 -> ()>,
                                  mut data: *mut std::os::raw::c_void)
 -> std::os::raw::c_int {
    if p.as_deref().is_none() {(); return -(1 as std::os::raw::c_int) }
    /* Finalize parsing.  Needed, for example, when file does not end in a newline */
    let mut quoted: std::os::raw::c_int = (*p.as_deref().unwrap()).quoted;
    let mut pstate: std::os::raw::c_int = (*p.as_deref().unwrap()).pstate;
    let mut spaces: size_t = (*p.as_deref().unwrap()).spaces;
    let mut entry_pos: size_t = (*p.as_deref().unwrap()).entry_pos;
    if pstate == 2 as std::os::raw::c_int && (*p.as_deref().unwrap()).quoted != 0 &&
           (*p.as_deref().unwrap()).options as std::os::raw::c_int & 1 as std::os::raw::c_int != 0 &&
           (*p.as_deref().unwrap()).options as std::os::raw::c_int & 4 as std::os::raw::c_int != 0 {
        /* Current field is quoted, no end-quote was seen, and CSV_STRICT_FINI is set */
        (*p.as_deref_mut().unwrap()).status=
            1 as std::os::raw::c_int; /* get rid of spaces and original quote */
        return -(1 as std::os::raw::c_int)
    }
    let mut current_block_26: u64;
    match pstate {
        3 => {
            (*p.as_deref_mut().unwrap()).entry_pos=
                ((*p.as_deref().unwrap()).entry_pos as
                     std::os::raw::c_ulong).wrapping_sub((*p.as_deref().unwrap()).spaces.wrapping_add(1 as
                                                                              std::os::raw::c_int
                                                                              as
                                                                              std::os::raw::c_ulong))
                    as size_t as size_t;
            entry_pos= (*p.as_deref().unwrap()).entry_pos;
            current_block_26= 4830382299733546467;
        }
        1 | 2 => { current_block_26= 4830382299733546467; }
        0 | _ => { current_block_26= 4761528863920922185; }
    }
    match current_block_26 {
        4830382299733546467 =>
        /*lint -fallthrough */
        /* Unnecessary:
      quoted = p->quoted, pstate = p->pstate;
      spaces = p->spaces, entry_pos = p->entry_pos;
      */
        {
            if quoted == 0 {
                entry_pos=
                    (entry_pos as std::os::raw::c_ulong).wrapping_sub(spaces) as
                        size_t as size_t
            }
            if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0 {
                *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                    '\u{0}' as i32 as std::os::raw::c_uchar
            }
            if cb1.is_some() &&
                   (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int != 0 &&
                   quoted == 0 &&
                   entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong {
                cb1.expect("non-null function pointer")(0 as
                                                            *mut std::os::raw::c_void,
                                                        entry_pos, data);
            } else if cb1.is_some() {
                cb1.expect("non-null function pointer")((*p).entry_buf as
                                                            *mut std::os::raw::c_void,
                                                        entry_pos, data);
            }
            pstate= 1 as std::os::raw::c_int;
            spaces= 0 as std::os::raw::c_int as size_t;
            quoted= spaces as std::os::raw::c_int;
            entry_pos= quoted as size_t;
            if cb2.is_some() {
                cb2.expect("non-null function pointer")(-(1 as std::os::raw::c_int),
                                                        data);
            }
            pstate= 0 as std::os::raw::c_int;
            spaces= 0 as std::os::raw::c_int as size_t;
            quoted= spaces as std::os::raw::c_int;
            entry_pos= quoted as size_t
        }
        _ => { }
    }
    /* Reset parser */
    (*p.as_deref_mut().unwrap()).status= 0 as std::os::raw::c_int;
    (*p.as_deref_mut().unwrap()).entry_pos= (*p.as_deref().unwrap()).status as size_t;
    (*p.as_deref_mut().unwrap()).quoted= (*p.as_deref().unwrap()).entry_pos as std::os::raw::c_int;
    (*p.as_deref_mut().unwrap()).spaces= (*p.as_deref().unwrap()).quoted as size_t;
    (*p.as_deref_mut().unwrap()).pstate= 0 as std::os::raw::c_int;
    return 0 as std::os::raw::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_delim(mut p: Option<&mut csv_parser>,
                                       mut c: std::os::raw::c_uchar) {
    /* Set the delimiter */
    if !p.as_deref().is_none() { (*p.as_deref_mut().unwrap()).delim_char= c }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_quote(mut p: Option<&mut csv_parser>,
                                       mut c: std::os::raw::c_uchar) {
    /* Set the quote character */
    if !p.as_deref().is_none() { (*p.as_deref_mut().unwrap()).quote_char= c }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn csv_get_delim(mut p: *const csv_parser)
 -> std::os::raw::c_uchar {
    if !(!p.is_null() &&
             !(b"received null csv_parser\x00" as *const u8 as
                   *const std::os::raw::c_char).is_null()) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn(b"csv_get_delim\x00" as *const u8 as *const i8,
                     b"libcsv.c\x00" as *const u8 as *const std::os::raw::c_char,
                     222 as std::os::raw::c_int,
                     b"p && \"received null csv_parser\"\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    /* Get the delimiter */
    return (*p).delim_char;
}
#[no_mangle]
pub unsafe extern "C" fn csv_get_quote(mut p: *const csv_parser)
 -> std::os::raw::c_uchar {
    if !(!p.is_null() &&
             !(b"received null csv_parser\x00" as *const u8 as
                   *const std::os::raw::c_char).is_null()) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn(b"csv_get_quote\x00" as *const u8 as *const i8,
                     b"libcsv.c\x00" as *const u8 as *const std::os::raw::c_char,
                     231 as std::os::raw::c_int,
                     b"p && \"received null csv_parser\"\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    /* Get the quote character */
    return (*p).quote_char;
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_space_func(mut p: Option<&mut csv_parser>,
                                            mut f:
                                                Option<unsafe extern "C" fn(_:
                                                                                std::os::raw::c_uchar)
                                                           -> std::os::raw::c_int>) {
    /* Set the space function */
    if !p.as_deref().is_none() { (*p.as_deref_mut().unwrap()).is_space= f }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_term_func(mut p: Option<&mut csv_parser>,
                                           mut f:
                                               Option<unsafe extern "C" fn(_:
                                                                               std::os::raw::c_uchar)
                                                          -> std::os::raw::c_int>) {
    /* Set the term function */
    if !p.as_deref().is_none() { (*p.as_deref_mut().unwrap()).is_term= f }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_realloc_func(mut p: Option<&mut csv_parser>,
                                              mut f:
                                                  Option<unsafe extern "C" fn(_:
                                                                                  *mut std::os::raw::c_void,
                                                                              _:
                                                                                  size_t)
                                                             ->
                                                                 *mut std::os::raw::c_void>) {
    /* Set the realloc function used to increase buffer size */
    if !p.as_deref().is_none() && f.is_some() { (*p.as_deref_mut().unwrap()).realloc_func= f };
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_free_func(mut p: Option<&mut csv_parser>,
                                           mut f:
                                               Option<unsafe extern "C" fn(_:
                                                                               *mut std::os::raw::c_void)
                                                          -> ()>) {
    /* Set the free function used to free the buffer */
    if !p.as_deref().is_none() && f.is_some() { (*p.as_deref_mut().unwrap()).free_func= f };
}
#[no_mangle]
pub unsafe extern "C" fn csv_set_blk_size(mut p: Option<&mut csv_parser>,
                                          mut size: size_t) {
    /* Set the block size used to increment buffer size */
    if !p.as_deref().is_none() { (*p.as_deref_mut().unwrap()).blk_size= size }else { (); };
}
#[no_mangle]
pub unsafe extern "C" fn csv_get_buffer_size(mut p: *const csv_parser)
 -> size_t {
    /* Get the size of the entry buffer */
    if !p.is_null() { return (*p).entry_size }else { (); }
    return 0 as std::os::raw::c_int as size_t;
}
unsafe extern "C" fn csv_increase_buffer(mut p: *mut csv_parser)
 -> std::os::raw::c_int {
    if p.is_null() {(); return 0 as std::os::raw::c_int }
    if (*p).realloc_func.is_none() { return 0 as std::os::raw::c_int }
    /* Increase the size of the entry buffer.  Attempt to increase size by 
   * p->blk_size, if this is larger than SIZE_MAX try to increase current
   * buffer size to SIZE_MAX.  If allocation fails, try to allocate halve 
   * the size and try again until successful or increment size is zero.
   */
    let mut to_add: size_t = (*p).blk_size;
    let mut vp: *mut std::os::raw::c_void = 0 as *mut std::os::raw::c_void;
    if (*p).entry_size >=
           (18446744073709551615 as std::os::raw::c_ulong).wrapping_sub(to_add) {
        to_add=
            (18446744073709551615 as
                 std::os::raw::c_ulong).wrapping_sub((*p).entry_size)
    }
    if to_add == 0 {
        (*p).status= 3 as std::os::raw::c_int;
        return -(1 as std::os::raw::c_int)
    }
    loop  {
        vp=
            (*p).realloc_func.expect("non-null function pointer")((*p).entry_buf
                                                                      as
                                                                      *mut std::os::raw::c_void,
                                                                  (*p).entry_size.wrapping_add(to_add));
        if !vp.is_null() { break ; }else { (); }
        to_add=
            (to_add as
                 std::os::raw::c_ulong).wrapping_div(2 as std::os::raw::c_int as
                                                 std::os::raw::c_ulong) as size_t as
                size_t;
        if to_add == 0 {
            (*p).status= 2 as std::os::raw::c_int;
            return -(1 as std::os::raw::c_int)
        }
    }
    /* Update entry buffer pointer and entry_size if successful */
    (*p).entry_buf=
        vp as
            *mut std::os::raw::c_uchar; /* Access input data as array of unsigned char */
    (*p).entry_size=
        ((*p).entry_size as std::os::raw::c_ulong).wrapping_add(to_add) as size_t as
            size_t; /* The character we are currently processing */
    return 0 as
               std::os::raw::c_int; /* The number of characters we have processed in this call */
}
#[no_mangle]
pub unsafe extern "C" fn csv_parse(mut p: Option<&mut csv_parser>,
                                   mut s: *const std::os::raw::c_void,
                                   mut len: size_t,
                                   mut cb1:
                                       Option<unsafe extern "C" fn(_:
                                                                       *mut std::os::raw::c_void,
                                                                   _: size_t,
                                                                   _:
                                                                       *mut std::os::raw::c_void)
                                                  -> ()>,
                                   mut cb2:
                                       Option<unsafe extern "C" fn(_:
                                                                       std::os::raw::c_int,
                                                                   _:
                                                                       *mut std::os::raw::c_void)
                                                  -> ()>,
                                   mut data: *mut std::os::raw::c_void) -> size_t {
    if !(!p.as_deref().is_none() &&
             !(b"received null csv_parser\x00" as *const u8 as
                   *const std::os::raw::c_char).is_null()) as std::os::raw::c_int as
           std::os::raw::c_long != 0 {
        __assert_rtn(b"csv_parse\x00" as *const u8 as *const i8,
                     b"libcsv.c\x00" as *const u8 as *const std::os::raw::c_char,
                     321 as std::os::raw::c_int,
                     b"p && \"received null csv_parser\"\x00" as *const u8 as
                         *const std::os::raw::c_char);
    } else { };
    if s.is_null() {(); return 0 as std::os::raw::c_int as size_t }
    let mut us: *const std::os::raw::c_uchar = s as *const std::os::raw::c_uchar;
    let mut c: std::os::raw::c_uchar = 0;
    let mut pos: size_t = 0 as std::os::raw::c_int as size_t;
    /* Store key fields into local variables for performance */
    let mut delim: std::os::raw::c_uchar = (*p.as_deref().unwrap()).delim_char;
    let mut quote: std::os::raw::c_uchar = (*p.as_deref().unwrap()).quote_char;
    let mut is_space:
            Option<unsafe extern "C" fn(_: std::os::raw::c_uchar) -> std::os::raw::c_int> =
        (*p.as_deref().unwrap()).is_space;
    let mut is_term:
            Option<unsafe extern "C" fn(_: std::os::raw::c_uchar) -> std::os::raw::c_int> =
        (*p.as_deref().unwrap()).is_term;
    let mut quoted: std::os::raw::c_int = (*p.as_deref().unwrap()).quoted;
    let mut pstate: std::os::raw::c_int = (*p.as_deref().unwrap()).pstate;
    let mut spaces: size_t = (*p.as_deref().unwrap()).spaces;
    let mut entry_pos: size_t = (*p.as_deref().unwrap()).entry_pos;
    if (*p.as_deref().unwrap()).entry_buf.is_null() && pos < len {
        /* Buffer hasn't been allocated yet and len > 0 */
        if csv_increase_buffer(core::mem::transmute::<_, *mut crate::libcsv::csv_parser>(p.as_deref_mut())) != 0 as std::os::raw::c_int {
            (*p.as_deref_mut().unwrap()).quoted= quoted;
            (*p.as_deref_mut().unwrap()).pstate= pstate;
            (*p.as_deref_mut().unwrap()).spaces= spaces;
            (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
            return pos
        }
    }
    /* Space or Tab */
    while pos < len {
        /* Check memory usage, increase buffer if necessary */
        if entry_pos ==
               (if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0 {
                    (*p.as_deref().unwrap()).entry_size.wrapping_sub(1 as std::os::raw::c_int as
                                                     std::os::raw::c_ulong)
                } else { (*p).entry_size }) {
            if csv_increase_buffer(core::mem::transmute::<_, *mut crate::libcsv::csv_parser>(p.as_deref_mut())) != 0 as std::os::raw::c_int {
                (*p.as_deref_mut().unwrap()).quoted= quoted;
                (*p.as_deref_mut().unwrap()).pstate= pstate;
                (*p.as_deref_mut().unwrap()).spaces= spaces;
                (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
                return pos
            }
        }
        let fresh0 = pos;
        pos= pos.wrapping_add(1);
        c= *us.offset(fresh0 as isize);
        match pstate {
            0 | 1 => {
                if (if is_space.is_some() {
                        is_space.expect("non-null function pointer")(c)
                    } else {
                        (c as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                             c as std::os::raw::c_int == 0x9 as std::os::raw::c_int) as
                            std::os::raw::c_int
                    }) != 0 && c as std::os::raw::c_int != delim as std::os::raw::c_int {
                    continue ;
                }
                if if is_term.is_some() {
                       is_term.expect("non-null function pointer")(c)
                   } else {
                       (c as std::os::raw::c_int == 0xd as std::os::raw::c_int ||
                            c as std::os::raw::c_int == 0xa as std::os::raw::c_int) as
                           std::os::raw::c_int
                   } != 0 {
                    /* Carriage Return or Line Feed */
                    if pstate == 1 as std::os::raw::c_int {
                        if quoted == 0 {
                            entry_pos=
                                (entry_pos as
                                     std::os::raw::c_ulong).wrapping_sub(spaces) as
                                    size_t as size_t
                        } /* ROW_NOT_BEGUN */
                        if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0
                           {
                            *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                                '\u{0}' as i32 as std::os::raw::c_uchar
                        }
                        if cb1.is_some() &&
                               (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int
                                   != 0 && quoted == 0 &&
                               entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong
                           {
                            cb1.expect("non-null function pointer")(0 as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        } else if cb1.is_some() {
                            cb1.expect("non-null function pointer")((*p).entry_buf
                                                                        as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        }
                        pstate= 1 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t;
                        if cb2.is_some() {
                            cb2.expect("non-null function pointer")(c as
                                                                        std::os::raw::c_int,
                                                                    data);
                        }
                        pstate= 0 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t
                    } else if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 2 as std::os::raw::c_int
                                  != 0 {
                        if cb2.is_some() {
                            cb2.expect("non-null function pointer")(c as
                                                                        std::os::raw::c_int,
                                                                    data);
                        }
                        pstate= 0 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t
                    }
                } else if c as std::os::raw::c_int == delim as std::os::raw::c_int {
                    /* Don't submit empty rows by default */
                    /* Comma */
                    if quoted == 0 {
                        entry_pos=
                            (entry_pos as std::os::raw::c_ulong).wrapping_sub(spaces)
                                as size_t as size_t
                    } /* Anything else */
                    if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0 {
                        *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                            '\u{0}' as i32 as std::os::raw::c_uchar
                    }
                    if cb1.is_some() &&
                           (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int !=
                               0 && quoted == 0 &&
                           entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong {
                        cb1.expect("non-null function pointer")(0 as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    } else if cb1.is_some() {
                        cb1.expect("non-null function pointer")((*p).entry_buf
                                                                    as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    }
                    pstate= 1 as std::os::raw::c_int;
                    spaces= 0 as std::os::raw::c_int as size_t;
                    quoted= spaces as std::os::raw::c_int;
                    entry_pos= quoted as size_t
                } else if c as std::os::raw::c_int == quote as std::os::raw::c_int {
                    /* Quote */
                    pstate= 2 as std::os::raw::c_int;
                    quoted= 1 as std::os::raw::c_int
                } else {
                    pstate= 2 as std::os::raw::c_int;
                    quoted= 0 as std::os::raw::c_int;
                    let fresh1 = entry_pos;
                    entry_pos= entry_pos.wrapping_add(1);
                    *(*p.as_deref().unwrap()).entry_buf.offset(fresh1 as isize) = c
                }
            }
            2 => {
                if c as std::os::raw::c_int == quote as std::os::raw::c_int {
                    /* Quote */
                    if quoted != 0 {
                        let fresh2 = entry_pos;
                        entry_pos= entry_pos.wrapping_add(1);
                        *(*p.as_deref().unwrap()).entry_buf.offset(fresh2 as isize) = c;
                        pstate= 3 as std::os::raw::c_int
                    } else {
                        /* STRICT ERROR - double quote inside non-quoted field */
                        if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 1 as std::os::raw::c_int != 0
                           {
                            (*p.as_deref_mut().unwrap()).status= 1 as std::os::raw::c_int;
                            (*p.as_deref_mut().unwrap()).quoted= quoted;
                            (*p.as_deref_mut().unwrap()).pstate= pstate;
                            (*p.as_deref_mut().unwrap()).spaces= spaces;
                            (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
                            return pos.wrapping_sub(1 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong)
                        }
                        let fresh3 = entry_pos;
                        entry_pos= entry_pos.wrapping_add(1);
                        *(*p.as_deref().unwrap()).entry_buf.offset(fresh3 as isize) = c;
                        spaces= 0 as std::os::raw::c_int as size_t
                    }
                } else if c as std::os::raw::c_int == delim as std::os::raw::c_int {
                    /* Comma */
                    if quoted != 0 {
                        let fresh4 = entry_pos;
                        entry_pos= entry_pos.wrapping_add(1);
                        *(*p.as_deref().unwrap()).entry_buf.offset(fresh4 as isize) = c
                    } else {
                        if quoted == 0 {
                            entry_pos=
                                (entry_pos as
                                     std::os::raw::c_ulong).wrapping_sub(spaces) as
                                    size_t as size_t
                        }
                        if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0
                           {
                            *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                                '\u{0}' as i32 as std::os::raw::c_uchar
                        }
                        if cb1.is_some() &&
                               (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int
                                   != 0 && quoted == 0 &&
                               entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong
                           {
                            cb1.expect("non-null function pointer")(0 as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        } else if cb1.is_some() {
                            cb1.expect("non-null function pointer")((*p).entry_buf
                                                                        as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        }
                        pstate= 1 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t
                    }
                } else if if is_term.is_some() {
                              is_term.expect("non-null function pointer")(c)
                          } else {
                              (c as std::os::raw::c_int == 0xd as std::os::raw::c_int ||
                                   c as std::os::raw::c_int == 0xa as std::os::raw::c_int) as
                                  std::os::raw::c_int
                          } != 0 {
                    /* Carriage Return or Line Feed */
                    if quoted == 0 {
                        if quoted == 0 {
                            entry_pos=
                                (entry_pos as
                                     std::os::raw::c_ulong).wrapping_sub(spaces) as
                                    size_t as size_t
                        } /* Anything else */
                        if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0
                           {
                            *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                                '\u{0}' as i32 as std::os::raw::c_uchar
                        }
                        if cb1.is_some() &&
                               (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int
                                   != 0 && quoted == 0 &&
                               entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong
                           {
                            cb1.expect("non-null function pointer")(0 as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        } else if cb1.is_some() {
                            cb1.expect("non-null function pointer")((*p).entry_buf
                                                                        as
                                                                        *mut std::os::raw::c_void,
                                                                    entry_pos,
                                                                    data);
                        }
                        pstate= 1 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t;
                        if cb2.is_some() {
                            cb2.expect("non-null function pointer")(c as
                                                                        std::os::raw::c_int,
                                                                    data);
                        }
                        pstate= 0 as std::os::raw::c_int;
                        spaces= 0 as std::os::raw::c_int as size_t;
                        quoted= spaces as std::os::raw::c_int;
                        entry_pos= quoted as size_t
                    } else {
                        let fresh5 = entry_pos;
                        entry_pos= entry_pos.wrapping_add(1);
                        *(*p.as_deref().unwrap()).entry_buf.offset(fresh5 as isize) = c
                    }
                } else if quoted == 0 &&
                              (if is_space.is_some() {
                                   is_space.expect("non-null function pointer")(c)
                               } else {
                                   (c as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                                        c as std::os::raw::c_int ==
                                            0x9 as std::os::raw::c_int) as std::os::raw::c_int
                               }) != 0 {
                    /* Tab or space for non-quoted field */
                    let fresh6 = entry_pos;
                    entry_pos= entry_pos.wrapping_add(1);
                    *(*p.as_deref().unwrap()).entry_buf.offset(fresh6 as isize) = c;
                    spaces= spaces.wrapping_add(1)
                } else {
                    let fresh7 = entry_pos;
                    entry_pos= entry_pos.wrapping_add(1);
                    *(*p.as_deref().unwrap()).entry_buf.offset(fresh7 as isize) = c;
                    spaces= 0 as std::os::raw::c_int as size_t
                }
            }
            3 => {
                /* This only happens when a quote character is encountered in a quoted field */
                if c as std::os::raw::c_int == delim as std::os::raw::c_int {
                    /* Comma */
                    entry_pos=
                        (entry_pos as
                             std::os::raw::c_ulong).wrapping_sub(spaces.wrapping_add(1
                                                                                 as
                                                                                 std::os::raw::c_int
                                                                                 as
                                                                                 std::os::raw::c_ulong))
                            as size_t as
                            size_t; /* get rid of spaces and original quote */
                    if quoted == 0 {
                        entry_pos=
                            (entry_pos as std::os::raw::c_ulong).wrapping_sub(spaces)
                                as size_t as size_t
                    }
                    if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0 {
                        *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                            '\u{0}' as i32 as std::os::raw::c_uchar
                    }
                    if cb1.is_some() &&
                           (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int !=
                               0 && quoted == 0 &&
                           entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong {
                        cb1.expect("non-null function pointer")(0 as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    } else if cb1.is_some() {
                        cb1.expect("non-null function pointer")((*p).entry_buf
                                                                    as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    }
                    pstate= 1 as std::os::raw::c_int;
                    spaces= 0 as std::os::raw::c_int as size_t;
                    quoted= spaces as std::os::raw::c_int;
                    entry_pos= quoted as size_t
                } else if if is_term.is_some() {
                              is_term.expect("non-null function pointer")(c)
                          } else {
                              (c as std::os::raw::c_int == 0xd as std::os::raw::c_int ||
                                   c as std::os::raw::c_int == 0xa as std::os::raw::c_int) as
                                  std::os::raw::c_int
                          } != 0 {
                    /* Carriage Return or Line Feed */
                    entry_pos=
                        (entry_pos as
                             std::os::raw::c_ulong).wrapping_sub(spaces.wrapping_add(1
                                                                                 as
                                                                                 std::os::raw::c_int
                                                                                 as
                                                                                 std::os::raw::c_ulong))
                            as size_t as
                            size_t; /* get rid of spaces and original quote */
                    if quoted == 0 {
                        entry_pos=
                            (entry_pos as std::os::raw::c_ulong).wrapping_sub(spaces)
                                as size_t as size_t
                    }
                    if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 8 as std::os::raw::c_int != 0 {
                        *(*p.as_deref().unwrap()).entry_buf.offset(entry_pos as isize) =
                            '\u{0}' as i32 as std::os::raw::c_uchar
                    }
                    if cb1.is_some() &&
                           (*p.as_deref().unwrap()).options as std::os::raw::c_int & 16 as std::os::raw::c_int !=
                               0 && quoted == 0 &&
                           entry_pos == 0 as std::os::raw::c_int as std::os::raw::c_ulong {
                        cb1.expect("non-null function pointer")(0 as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    } else if cb1.is_some() {
                        cb1.expect("non-null function pointer")((*p).entry_buf
                                                                    as
                                                                    *mut std::os::raw::c_void,
                                                                entry_pos,
                                                                data);
                    }
                    pstate= 1 as std::os::raw::c_int;
                    spaces= 0 as std::os::raw::c_int as size_t;
                    quoted= spaces as std::os::raw::c_int;
                    entry_pos= quoted as size_t;
                    if cb2.is_some() {
                        cb2.expect("non-null function pointer")(c as
                                                                    std::os::raw::c_int,
                                                                data);
                    }
                    pstate= 0 as std::os::raw::c_int;
                    spaces= 0 as std::os::raw::c_int as size_t;
                    quoted= spaces as std::os::raw::c_int;
                    entry_pos= quoted as size_t
                } else if if is_space.is_some() {
                              is_space.expect("non-null function pointer")(c)
                          } else {
                              (c as std::os::raw::c_int == 0x20 as std::os::raw::c_int ||
                                   c as std::os::raw::c_int == 0x9 as std::os::raw::c_int) as
                                  std::os::raw::c_int
                          } != 0 {
                    /* Space or Tab */
                    let fresh8 = entry_pos; /* Anything else */
                    entry_pos= entry_pos.wrapping_add(1);
                    *(*p.as_deref().unwrap()).entry_buf.offset(fresh8 as isize) = c;
                    spaces= spaces.wrapping_add(1)
                } else if c as std::os::raw::c_int == quote as std::os::raw::c_int {
                    /* Quote */
                    if spaces != 0 {
                        /* STRICT ERROR - unescaped double quote */
                        if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 1 as std::os::raw::c_int != 0
                           {
                            (*p.as_deref_mut().unwrap()).status= 1 as std::os::raw::c_int;
                            (*p.as_deref_mut().unwrap()).quoted= quoted;
                            (*p.as_deref_mut().unwrap()).pstate= pstate;
                            (*p.as_deref_mut().unwrap()).spaces= spaces;
                            (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
                            return pos.wrapping_sub(1 as std::os::raw::c_int as
                                                        std::os::raw::c_ulong)
                        }
                        spaces= 0 as std::os::raw::c_int as size_t;
                        let fresh9 = entry_pos;
                        entry_pos= entry_pos.wrapping_add(1);
                        *(*p.as_deref().unwrap()).entry_buf.offset(fresh9 as isize) = c
                    } else {
                        /* Two quotes in a row */
                        pstate= 2 as std::os::raw::c_int
                    }
                } else {
                    /* STRICT ERROR - unescaped double quote */
                    if (*p.as_deref().unwrap()).options as std::os::raw::c_int & 1 as std::os::raw::c_int != 0 {
                        (*p.as_deref_mut().unwrap()).status= 1 as std::os::raw::c_int;
                        (*p.as_deref_mut().unwrap()).quoted= quoted;
                        (*p.as_deref_mut().unwrap()).pstate= pstate;
                        (*p.as_deref_mut().unwrap()).spaces= spaces;
                        (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
                        return pos.wrapping_sub(1 as std::os::raw::c_int as
                                                    std::os::raw::c_ulong)
                    }
                    pstate= 2 as std::os::raw::c_int;
                    spaces= 0 as std::os::raw::c_int as size_t;
                    let fresh10 = entry_pos;
                    entry_pos= entry_pos.wrapping_add(1);
                    *(*p.as_deref().unwrap()).entry_buf.offset(fresh10 as isize) = c
                }
            }
            _ => { }
        }
    }
    (*p.as_deref_mut().unwrap()).quoted= quoted;
    (*p.as_deref_mut().unwrap()).pstate= pstate;
    (*p.as_deref_mut().unwrap()).spaces= spaces;
    (*p.as_deref_mut().unwrap()).entry_pos= entry_pos;
    return pos;
}
#[no_mangle]
pub unsafe extern "C" fn csv_write(mut dest: *mut /* owning */ std::os::raw::c_void,
                                   mut dest_size: size_t,
                                   mut src: *const std::os::raw::c_void,
                                   mut src_size: size_t) -> size_t {
    return csv_write2(dest, dest_size, src, src_size,
                      0x22 as std::os::raw::c_int as std::os::raw::c_uchar);
}
#[no_mangle]
pub unsafe extern "C" fn csv_fwrite(mut fp: Option<&mut FILE>,
                                    mut src: *const std::os::raw::c_void,
                                    mut src_size: size_t) -> std::os::raw::c_int {
    return csv_fwrite2(core::mem::transmute::<_, *mut crate::libcsv::__sFILE>(fp.as_deref_mut()), src, src_size,
                       0x22 as std::os::raw::c_int as std::os::raw::c_uchar);
}
#[no_mangle]
pub unsafe extern "C" fn csv_write2(mut dest: *mut std::os::raw::c_void,
                                    mut dest_size: size_t,
                                    mut src: *const std::os::raw::c_void,
                                    mut src_size: size_t,
                                    mut quote: std::os::raw::c_uchar) -> size_t {
    let mut cdest: *mut std::os::raw::c_uchar = dest as *mut std::os::raw::c_uchar;
    let mut csrc: *const std::os::raw::c_uchar = src as *const std::os::raw::c_uchar;
    let mut chars: size_t = 0 as std::os::raw::c_int as size_t;
    if src.is_null() {(); return 0 as std::os::raw::c_int as size_t }
    if dest.is_null() {(); dest_size= 0 as std::os::raw::c_int as size_t }
    if dest_size > 0 as std::os::raw::c_int as std::os::raw::c_ulong {
        let fresh11 = cdest;
        cdest= cdest.offset(1);
        *fresh11= quote
    }
    chars= chars.wrapping_add(1);
    while src_size != 0 {
        if (*csrc) as std::os::raw::c_int == quote as std::os::raw::c_int {
            if dest_size > chars {
                let fresh12 = cdest;
                cdest= cdest.offset(1);
                *fresh12= quote
            }
            if chars < 18446744073709551615 as std::os::raw::c_ulong {
                chars= chars.wrapping_add(1)
            }
        }
        if dest_size > chars {
            let fresh13 = cdest;
            cdest= cdest.offset(1);
            *fresh13= (*csrc)
        }
        if chars < 18446744073709551615 as std::os::raw::c_ulong {
            chars= chars.wrapping_add(1)
        }
        src_size= src_size.wrapping_sub(1);
        csrc= csrc.offset(1)
    }
    if dest_size > chars { *cdest= quote }
    if chars < 18446744073709551615 as std::os::raw::c_ulong {
        chars= chars.wrapping_add(1)
    }
    return chars;
}
#[no_mangle]
pub unsafe extern "C" fn csv_fwrite2(mut fp: *mut FILE,
                                     mut src: *const std::os::raw::c_void,
                                     mut src_size: size_t,
                                     mut quote: std::os::raw::c_uchar)
 -> std::os::raw::c_int {
    let mut csrc: *const std::os::raw::c_uchar = src as *const std::os::raw::c_uchar;
    if fp.is_null() || src.is_null() { return 0 as std::os::raw::c_int }
    if fputc(quote as std::os::raw::c_int, fp) == -(1 as std::os::raw::c_int) {
        return -(1 as std::os::raw::c_int)
    }
    while src_size != 0 {
        if (*csrc) as std::os::raw::c_int == quote as std::os::raw::c_int {
            if fputc(quote as std::os::raw::c_int, fp) == -(1 as std::os::raw::c_int) {
                return -(1 as std::os::raw::c_int)
            }
        }
        if fputc((*csrc) as std::os::raw::c_int, fp) == -(1 as std::os::raw::c_int) {
            return -(1 as std::os::raw::c_int)
        }
        src_size= src_size.wrapping_sub(1);
        csrc= csrc.offset(1)
    }
    if fputc(quote as std::os::raw::c_int, fp) == -(1 as std::os::raw::c_int) {
        return -(1 as std::os::raw::c_int)
    }
    return 0 as std::os::raw::c_int;
}

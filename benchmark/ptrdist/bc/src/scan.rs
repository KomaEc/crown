use ::libc;
extern "C" {
    #[no_mangle]
    static mut stdin: *mut _IO_FILE;
    #[no_mangle]
    static mut stdout: *mut _IO_FILE;
    #[no_mangle]
    static mut stderr: *mut _IO_FILE;
    #[no_mangle]
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    #[no_mangle]
    fn _IO_putc(__c: libc::c_int, __fp: *mut _IO_FILE) -> libc::c_int;
    #[no_mangle]
    fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    #[no_mangle]
    fn fwrite(
        _: *const libc::c_void,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut FILE,
    ) -> libc::c_ulong;
    #[no_mangle]
    fn fileno(__stream: *mut FILE) -> libc::c_int;
    /* A lexical scanner generated by flex */
    /* scanner skeleton version:
     * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
     */
    /* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
    /* ! __cplusplus */
    #[no_mangle]
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(_: *mut libc::c_void);
    #[no_mangle]
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    #[no_mangle]
    static mut yylval: YYSTYPE;
    /* Input Line numbers and other error information. */
    #[no_mangle]
    static mut line_no: libc::c_int;
    #[no_mangle]
    fn read(__fd: libc::c_int, __buf: *mut libc::c_void, __nbytes: size_t) -> ssize_t;
    #[no_mangle]
    fn exit(_: libc::c_int) -> !;
    #[no_mangle]
    fn strcopyof(str: *mut libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn open_new_file() -> libc::c_int;
    #[no_mangle]
    fn yyerror(str: *mut libc::c_char, _: ...);
    #[no_mangle]
    fn __errno_location() -> *mut libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __ssize_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub __pad1: *mut libc::c_void,
    pub __pad2: *mut libc::c_void,
    pub __pad3: *mut libc::c_void,
    pub __pad4: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: libc::c_int,
}
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
/* return all but the first 'n' matched characters back to the input stream */
/* undo effects of setting up yytext */
/* set up yytext again */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct yy_buffer_state {
    pub yy_input_file: *mut FILE,
    pub yy_ch_buf: *mut libc::c_char,
    pub yy_buf_pos: *mut libc::c_char,
    pub yy_buf_size: libc::c_int,
    pub yy_n_chars: libc::c_int,
    pub yy_eof_status: libc::c_int,
}
/* size of default input buffer */
pub type YY_BUFFER_STATE = *mut yy_buffer_state;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct arg_list {
    pub av_name: libc::c_int,
    pub next: *mut arg_list,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct YYSTYPE {
    pub s_value: *mut libc::c_char,
    pub c_value: libc::c_char,
    pub i_value: libc::c_int,
    pub a_value: *mut arg_list,
}
pub type yy_state_type = libc::c_int;
pub const EOF: libc::c_int = -(1 as libc::c_int);
/* __GNUC__ */
/* __STDC__ */
/* ! __cplusplus */
/* amount of stuff to slurp up with each read */
pub const YY_READ_BUF_SIZE: libc::c_int = 8192 as libc::c_int;
/* special action meaning "start processing a new file" */
/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
/* code executed at the end of each rule */
pub const YY_END_OF_BUFFER_CHAR: libc::c_int = 0 as libc::c_int;
pub const YY_BUF_SIZE: libc::c_int = YY_READ_BUF_SIZE * 2 as libc::c_int;
pub const EINTR: libc::c_int = 4 as libc::c_int;
pub const errno: libc::c_int = *__errno_location();
/* MINIX returns from read with < 0 if SIGINT is  encountered.
In flex, we can redefine YY_INPUT to the following.  In lex, this
does nothing! */
/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
pub const EOB_ACT_CONTINUE_SCAN: libc::c_int = 0 as libc::c_int;
pub const EOB_ACT_END_OF_FILE: libc::c_int = 1 as libc::c_int;
pub const EOB_ACT_LAST_MATCH: libc::c_int = 2 as libc::c_int;
/* whether we've seen an EOF on this buffer */
pub const EOF_NOT_SEEN: libc::c_int = 0 as libc::c_int;
/* "pending" happens when the EOF has been seen but there's still
 * some text process
 */
pub const EOF_PENDING: libc::c_int = 1 as libc::c_int;
pub const EOF_DONE: libc::c_int = 2 as libc::c_int;
static mut yy_current_buffer: YY_BUFFER_STATE = 0 as *const yy_buffer_state as *mut yy_buffer_state;
/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
/* yy_hold_char holds the character lost when yytext is formed */
static mut yy_hold_char: libc::c_char = 0;
static mut yy_n_chars: libc::c_int = 0;
/* number of characters read into yy_ch_buf */
#[no_mangle]
pub static mut yytext: *mut libc::c_char = 0 as *const libc::c_char as *mut libc::c_char;
#[no_mangle]
pub static mut yyleng: libc::c_int = 0;
#[no_mangle]
pub static mut yyin: *mut FILE = 0 as *const FILE as *mut FILE;
#[no_mangle]
pub static mut yyout: *mut FILE = 0 as *const FILE as *mut FILE;
pub const YY_END_OF_BUFFER: libc::c_int = 40 as libc::c_int;
static mut yy_accept: [libc::c_short; 144] = [
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    40 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    33 as libc::c_int as libc::c_short,
    31 as libc::c_int as libc::c_short,
    25 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    26 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    26 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    26 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    27 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    33 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    36 as libc::c_int as libc::c_short,
    27 as libc::c_int as libc::c_short,
    23 as libc::c_int as libc::c_short,
    30 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    34 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    28 as libc::c_int as libc::c_short,
    32 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    7 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    24 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    6 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    13 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    14 as libc::c_int as libc::c_short,
    16 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    3 as libc::c_int as libc::c_short,
    15 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    9 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    2 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    12 as libc::c_int as libc::c_short,
    20 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    10 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    8 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    4 as libc::c_int as libc::c_short,
    21 as libc::c_int as libc::c_short,
    5 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    18 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
];
static mut yy_ec: [libc::c_char; 256] = [
    0 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    3 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    4 as libc::c_int as libc::c_char,
    5 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    6 as libc::c_int as libc::c_char,
    7 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    8 as libc::c_int as libc::c_char,
    9 as libc::c_int as libc::c_char,
    10 as libc::c_int as libc::c_char,
    11 as libc::c_int as libc::c_char,
    12 as libc::c_int as libc::c_char,
    13 as libc::c_int as libc::c_char,
    14 as libc::c_int as libc::c_char,
    15 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    17 as libc::c_int as libc::c_char,
    18 as libc::c_int as libc::c_char,
    19 as libc::c_int as libc::c_char,
    20 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    22 as libc::c_int as libc::c_char,
    23 as libc::c_int as libc::c_char,
    24 as libc::c_int as libc::c_char,
    25 as libc::c_int as libc::c_char,
    26 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    27 as libc::c_int as libc::c_char,
    28 as libc::c_int as libc::c_char,
    29 as libc::c_int as libc::c_char,
    30 as libc::c_int as libc::c_char,
    31 as libc::c_int as libc::c_char,
    32 as libc::c_int as libc::c_char,
    33 as libc::c_int as libc::c_char,
    34 as libc::c_int as libc::c_char,
    35 as libc::c_int as libc::c_char,
    36 as libc::c_int as libc::c_char,
    37 as libc::c_int as libc::c_char,
    38 as libc::c_int as libc::c_char,
    39 as libc::c_int as libc::c_char,
    40 as libc::c_int as libc::c_char,
    41 as libc::c_int as libc::c_char,
    42 as libc::c_int as libc::c_char,
    43 as libc::c_int as libc::c_char,
    44 as libc::c_int as libc::c_char,
    45 as libc::c_int as libc::c_char,
    46 as libc::c_int as libc::c_char,
    47 as libc::c_int as libc::c_char,
    36 as libc::c_int as libc::c_char,
    48 as libc::c_int as libc::c_char,
    36 as libc::c_int as libc::c_char,
    49 as libc::c_int as libc::c_char,
    36 as libc::c_int as libc::c_char,
    50 as libc::c_int as libc::c_char,
    51 as libc::c_int as libc::c_char,
    52 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
];
static mut yy_meta: [libc::c_char; 53] = [
    0 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
];
static mut yy_base: [libc::c_short; 146] = [
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    193 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    190 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    172 as libc::c_int as libc::c_short,
    185 as libc::c_int as libc::c_short,
    170 as libc::c_int as libc::c_short,
    181 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    168 as libc::c_int as libc::c_short,
    42 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    46 as libc::c_int as libc::c_short,
    52 as libc::c_int as libc::c_short,
    167 as libc::c_int as libc::c_short,
    61 as libc::c_int as libc::c_short,
    166 as libc::c_int as libc::c_short,
    181 as libc::c_int as libc::c_short,
    164 as libc::c_int as libc::c_short,
    135 as libc::c_int as libc::c_short,
    137 as libc::c_int as libc::c_short,
    139 as libc::c_int as libc::c_short,
    148 as libc::c_int as libc::c_short,
    140 as libc::c_int as libc::c_short,
    136 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    149 as libc::c_int as libc::c_short,
    27 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    147 as libc::c_int as libc::c_short,
    130 as libc::c_int as libc::c_short,
    126 as libc::c_int as libc::c_short,
    141 as libc::c_int as libc::c_short,
    40 as libc::c_int as libc::c_short,
    36 as libc::c_int as libc::c_short,
    120 as libc::c_int as libc::c_short,
    168 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    164 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    66 as libc::c_int as libc::c_short,
    165 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    72 as libc::c_int as libc::c_short,
    76 as libc::c_int as libc::c_short,
    164 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    120 as libc::c_int as libc::c_short,
    134 as libc::c_int as libc::c_short,
    124 as libc::c_int as libc::c_short,
    131 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    122 as libc::c_int as libc::c_short,
    132 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    113 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    128 as libc::c_int as libc::c_short,
    119 as libc::c_int as libc::c_short,
    118 as libc::c_int as libc::c_short,
    52 as libc::c_int as libc::c_short,
    125 as libc::c_int as libc::c_short,
    107 as libc::c_int as libc::c_short,
    106 as libc::c_int as libc::c_short,
    114 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    84 as libc::c_int as libc::c_short,
    88 as libc::c_int as libc::c_short,
    144 as libc::c_int as libc::c_short,
    105 as libc::c_int as libc::c_short,
    118 as libc::c_int as libc::c_short,
    98 as libc::c_int as libc::c_short,
    108 as libc::c_int as libc::c_short,
    111 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    95 as libc::c_int as libc::c_short,
    95 as libc::c_int as libc::c_short,
    93 as libc::c_int as libc::c_short,
    105 as libc::c_int as libc::c_short,
    102 as libc::c_int as libc::c_short,
    91 as libc::c_int as libc::c_short,
    95 as libc::c_int as libc::c_short,
    88 as libc::c_int as libc::c_short,
    103 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    93 as libc::c_int as libc::c_short,
    84 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    91 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    93 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    76 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    74 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    75 as libc::c_int as libc::c_short,
    87 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    75 as libc::c_int as libc::c_short,
    83 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    76 as libc::c_int as libc::c_short,
    63 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    66 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    62 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    45 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    194 as libc::c_int as libc::c_short,
    111 as libc::c_int as libc::c_short,
    56 as libc::c_int as libc::c_short,
];
static mut yy_def: [libc::c_short; 146] = [
    0 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    144 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    144 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    0 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
];
static mut yy_nxt: [libc::c_short; 247] = [
    0 as libc::c_int as libc::c_short,
    4 as libc::c_int as libc::c_short,
    5 as libc::c_int as libc::c_short,
    6 as libc::c_int as libc::c_short,
    7 as libc::c_int as libc::c_short,
    8 as libc::c_int as libc::c_short,
    9 as libc::c_int as libc::c_short,
    10 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    12 as libc::c_int as libc::c_short,
    13 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    14 as libc::c_int as libc::c_short,
    15 as libc::c_int as libc::c_short,
    16 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    18 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    20 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    21 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    4 as libc::c_int as libc::c_short,
    23 as libc::c_int as libc::c_short,
    24 as libc::c_int as libc::c_short,
    25 as libc::c_int as libc::c_short,
    26 as libc::c_int as libc::c_short,
    27 as libc::c_int as libc::c_short,
    28 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    30 as libc::c_int as libc::c_short,
    31 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    32 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    33 as libc::c_int as libc::c_short,
    34 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    36 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    29 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    39 as libc::c_int as libc::c_short,
    11 as libc::c_int as libc::c_short,
    46 as libc::c_int as libc::c_short,
    46 as libc::c_int as libc::c_short,
    63 as libc::c_int as libc::c_short,
    49 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    55 as libc::c_int as libc::c_short,
    64 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    74 as libc::c_int as libc::c_short,
    48 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    72 as libc::c_int as libc::c_short,
    75 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    52 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    65 as libc::c_int as libc::c_short,
    142 as libc::c_int as libc::c_short,
    96 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    66 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    73 as libc::c_int as libc::c_short,
    141 as libc::c_int as libc::c_short,
    67 as libc::c_int as libc::c_short,
    53 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    78 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    140 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    139 as libc::c_int as libc::c_short,
    81 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    97 as libc::c_int as libc::c_short,
    52 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    138 as libc::c_int as libc::c_short,
    78 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    137 as libc::c_int as libc::c_short,
    48 as libc::c_int as libc::c_short,
    136 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    135 as libc::c_int as libc::c_short,
    81 as libc::c_int as libc::c_short,
    42 as libc::c_int as libc::c_short,
    42 as libc::c_int as libc::c_short,
    134 as libc::c_int as libc::c_short,
    133 as libc::c_int as libc::c_short,
    132 as libc::c_int as libc::c_short,
    131 as libc::c_int as libc::c_short,
    130 as libc::c_int as libc::c_short,
    129 as libc::c_int as libc::c_short,
    128 as libc::c_int as libc::c_short,
    127 as libc::c_int as libc::c_short,
    126 as libc::c_int as libc::c_short,
    125 as libc::c_int as libc::c_short,
    124 as libc::c_int as libc::c_short,
    123 as libc::c_int as libc::c_short,
    122 as libc::c_int as libc::c_short,
    121 as libc::c_int as libc::c_short,
    120 as libc::c_int as libc::c_short,
    119 as libc::c_int as libc::c_short,
    118 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    116 as libc::c_int as libc::c_short,
    115 as libc::c_int as libc::c_short,
    114 as libc::c_int as libc::c_short,
    113 as libc::c_int as libc::c_short,
    112 as libc::c_int as libc::c_short,
    111 as libc::c_int as libc::c_short,
    110 as libc::c_int as libc::c_short,
    109 as libc::c_int as libc::c_short,
    108 as libc::c_int as libc::c_short,
    107 as libc::c_int as libc::c_short,
    106 as libc::c_int as libc::c_short,
    105 as libc::c_int as libc::c_short,
    104 as libc::c_int as libc::c_short,
    103 as libc::c_int as libc::c_short,
    102 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    101 as libc::c_int as libc::c_short,
    100 as libc::c_int as libc::c_short,
    99 as libc::c_int as libc::c_short,
    98 as libc::c_int as libc::c_short,
    95 as libc::c_int as libc::c_short,
    94 as libc::c_int as libc::c_short,
    93 as libc::c_int as libc::c_short,
    92 as libc::c_int as libc::c_short,
    91 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    89 as libc::c_int as libc::c_short,
    88 as libc::c_int as libc::c_short,
    87 as libc::c_int as libc::c_short,
    86 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    84 as libc::c_int as libc::c_short,
    83 as libc::c_int as libc::c_short,
    82 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    79 as libc::c_int as libc::c_short,
    43 as libc::c_int as libc::c_short,
    40 as libc::c_int as libc::c_short,
    76 as libc::c_int as libc::c_short,
    71 as libc::c_int as libc::c_short,
    70 as libc::c_int as libc::c_short,
    69 as libc::c_int as libc::c_short,
    68 as libc::c_int as libc::c_short,
    62 as libc::c_int as libc::c_short,
    61 as libc::c_int as libc::c_short,
    60 as libc::c_int as libc::c_short,
    59 as libc::c_int as libc::c_short,
    58 as libc::c_int as libc::c_short,
    57 as libc::c_int as libc::c_short,
    56 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    54 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    45 as libc::c_int as libc::c_short,
    44 as libc::c_int as libc::c_short,
    43 as libc::c_int as libc::c_short,
    41 as libc::c_int as libc::c_short,
    40 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    3 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
];
static mut yy_chk: [libc::c_short; 247] = [
    0 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    1 as libc::c_int as libc::c_short,
    13 as libc::c_int as libc::c_short,
    14 as libc::c_int as libc::c_short,
    31 as libc::c_int as libc::c_short,
    16 as libc::c_int as libc::c_short,
    15 as libc::c_int as libc::c_short,
    145 as libc::c_int as libc::c_short,
    31 as libc::c_int as libc::c_short,
    14 as libc::c_int as libc::c_short,
    13 as libc::c_int as libc::c_short,
    15 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    15 as libc::c_int as libc::c_short,
    16 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    38 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    17 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    32 as libc::c_int as libc::c_short,
    140 as libc::c_int as libc::c_short,
    71 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    32 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    37 as libc::c_int as libc::c_short,
    139 as libc::c_int as libc::c_short,
    32 as libc::c_int as libc::c_short,
    19 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    47 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    138 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    133 as libc::c_int as libc::c_short,
    50 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    71 as libc::c_int as libc::c_short,
    51 as libc::c_int as libc::c_short,
    79 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    131 as libc::c_int as libc::c_short,
    77 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    79 as libc::c_int as libc::c_short,
    129 as libc::c_int as libc::c_short,
    79 as libc::c_int as libc::c_short,
    126 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    125 as libc::c_int as libc::c_short,
    80 as libc::c_int as libc::c_short,
    144 as libc::c_int as libc::c_short,
    144 as libc::c_int as libc::c_short,
    123 as libc::c_int as libc::c_short,
    122 as libc::c_int as libc::c_short,
    120 as libc::c_int as libc::c_short,
    119 as libc::c_int as libc::c_short,
    117 as libc::c_int as libc::c_short,
    116 as libc::c_int as libc::c_short,
    113 as libc::c_int as libc::c_short,
    112 as libc::c_int as libc::c_short,
    111 as libc::c_int as libc::c_short,
    110 as libc::c_int as libc::c_short,
    108 as libc::c_int as libc::c_short,
    105 as libc::c_int as libc::c_short,
    104 as libc::c_int as libc::c_short,
    103 as libc::c_int as libc::c_short,
    101 as libc::c_int as libc::c_short,
    100 as libc::c_int as libc::c_short,
    99 as libc::c_int as libc::c_short,
    98 as libc::c_int as libc::c_short,
    97 as libc::c_int as libc::c_short,
    96 as libc::c_int as libc::c_short,
    95 as libc::c_int as libc::c_short,
    94 as libc::c_int as libc::c_short,
    93 as libc::c_int as libc::c_short,
    92 as libc::c_int as libc::c_short,
    91 as libc::c_int as libc::c_short,
    90 as libc::c_int as libc::c_short,
    89 as libc::c_int as libc::c_short,
    88 as libc::c_int as libc::c_short,
    86 as libc::c_int as libc::c_short,
    85 as libc::c_int as libc::c_short,
    84 as libc::c_int as libc::c_short,
    83 as libc::c_int as libc::c_short,
    82 as libc::c_int as libc::c_short,
    81 as libc::c_int as libc::c_short,
    78 as libc::c_int as libc::c_short,
    75 as libc::c_int as libc::c_short,
    74 as libc::c_int as libc::c_short,
    73 as libc::c_int as libc::c_short,
    72 as libc::c_int as libc::c_short,
    70 as libc::c_int as libc::c_short,
    69 as libc::c_int as libc::c_short,
    68 as libc::c_int as libc::c_short,
    67 as libc::c_int as libc::c_short,
    66 as libc::c_int as libc::c_short,
    65 as libc::c_int as libc::c_short,
    63 as libc::c_int as libc::c_short,
    62 as libc::c_int as libc::c_short,
    61 as libc::c_int as libc::c_short,
    60 as libc::c_int as libc::c_short,
    59 as libc::c_int as libc::c_short,
    58 as libc::c_int as libc::c_short,
    57 as libc::c_int as libc::c_short,
    56 as libc::c_int as libc::c_short,
    52 as libc::c_int as libc::c_short,
    48 as libc::c_int as libc::c_short,
    42 as libc::c_int as libc::c_short,
    40 as libc::c_int as libc::c_short,
    39 as libc::c_int as libc::c_short,
    36 as libc::c_int as libc::c_short,
    35 as libc::c_int as libc::c_short,
    34 as libc::c_int as libc::c_short,
    33 as libc::c_int as libc::c_short,
    30 as libc::c_int as libc::c_short,
    28 as libc::c_int as libc::c_short,
    27 as libc::c_int as libc::c_short,
    26 as libc::c_int as libc::c_short,
    25 as libc::c_int as libc::c_short,
    24 as libc::c_int as libc::c_short,
    23 as libc::c_int as libc::c_short,
    22 as libc::c_int as libc::c_short,
    21 as libc::c_int as libc::c_short,
    20 as libc::c_int as libc::c_short,
    18 as libc::c_int as libc::c_short,
    12 as libc::c_int as libc::c_short,
    10 as libc::c_int as libc::c_short,
    9 as libc::c_int as libc::c_short,
    8 as libc::c_int as libc::c_short,
    7 as libc::c_int as libc::c_short,
    5 as libc::c_int as libc::c_short,
    3 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
    143 as libc::c_int as libc::c_short,
];
static mut yy_last_accepting_state: yy_state_type = 0;
static mut yy_last_accepting_cpos: *mut libc::c_char =
    0 as *const libc::c_char as *mut libc::c_char;
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
pub const YY_MORE_ADJ: libc::c_int = 0 as libc::c_int;
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static mut yy_c_buf_p: *mut libc::c_char = 0 as *const libc::c_char as *mut libc::c_char;
static mut yy_init: libc::c_int = 1 as libc::c_int;
/* whether we need to initialize */
static mut yy_start: libc::c_int = 0 as libc::c_int;
/* start state number */
/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static mut yy_did_buffer_switch_on_eof: libc::c_int = 0;
#[no_mangle]
pub unsafe extern "C" fn yylex() -> libc::c_int {
    let mut yy_current_state: yy_state_type = 0; /* first start state */
    let mut yy_cp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut yy_bp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut yy_act: libc::c_int = 0;
    if yy_init != 0 {
        if yy_start == 0 {
            yy_start = 1 as libc::c_int
        }
        if yyin.is_null() {
            yyin = stdin
        }
        if yyout.is_null() {
            yyout = stdout
        }
        if !yy_current_buffer.is_null() {
            yy_init_buffer(yy_current_buffer, yyin);
        } else {
            yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE)
        }
        yy_load_buffer_state();
        yy_init = 0 as libc::c_int
    }
    loop
    /* loops until end-of-file is reached */
    {
        yy_cp = yy_c_buf_p;
        /* support of yytext */
        *yy_cp = yy_hold_char;
        /* yy_bp points to the position in yy_ch_buf of the start of the
         * current run.
         */
        yy_bp = yy_cp;
        yy_current_state = yy_start;
        'c_3472: loop {
            loop {
                let mut yy_c: libc::c_char = yy_ec[*yy_cp as usize];
                if yy_accept[yy_current_state as usize] != 0 {
                    yy_last_accepting_state = yy_current_state;
                    yy_last_accepting_cpos = yy_cp
                }
                while yy_chk[(yy_base[yy_current_state as usize] as libc::c_int
                    + yy_c as libc::c_int) as usize] as libc::c_int
                    != yy_current_state
                {
                    yy_current_state = yy_def[yy_current_state as usize] as yy_state_type;
                    if yy_current_state >= 144 as libc::c_int {
                        yy_c = yy_meta[yy_c as usize]
                    }
                }
                yy_current_state = yy_nxt[(yy_base[yy_current_state as usize] as libc::c_int
                    + yy_c as libc::c_int) as usize]
                    as yy_state_type;
                yy_cp = yy_cp.offset(1);
                if !(yy_base[yy_current_state as usize] as libc::c_int != 194 as libc::c_int) {
                    break;
                }
            }
            'c_3473: loop {
                yy_act = yy_accept[yy_current_state as usize] as libc::c_int;
                yytext = yy_bp;
                yyleng = yy_cp.wrapping_offset_from(yy_bp) as libc::c_long as libc::c_int;
                yy_hold_char = *yy_cp;
                *yy_cp = '\u{0}' as i32 as libc::c_char;
                yy_c_buf_p = yy_cp;
                loop
                /* this label is used only to access EOF actions */
                {
                    match yy_act {
                        0 => {
                            /* must backtrack */
                            /* undo the effects of YY_DO_BEFORE_ACTION */
                            *yy_cp = yy_hold_char;
                            yy_cp = yy_last_accepting_cpos;
                            yy_current_state = yy_last_accepting_state;
                            break;
                        }
                        1 => return 268 as libc::c_int,
                        2 => return 269 as libc::c_int,
                        3 => return 270 as libc::c_int,
                        4 => return 271 as libc::c_int,
                        5 => return 272 as libc::c_int,
                        6 => return 273 as libc::c_int,
                        7 => return 274 as libc::c_int,
                        8 => return 275 as libc::c_int,
                        9 => return 276 as libc::c_int,
                        10 => return 278 as libc::c_int,
                        11 => return 279 as libc::c_int,
                        12 => return 280 as libc::c_int,
                        13 => return 281 as libc::c_int,
                        14 => return 277 as libc::c_int,
                        15 => return 282 as libc::c_int,
                        16 => return 284 as libc::c_int,
                        17 => return 285 as libc::c_int,
                        18 => return 283 as libc::c_int,
                        19 => return 286 as libc::c_int,
                        20 => return 287 as libc::c_int,
                        21 => return 288 as libc::c_int,
                        22 => {
                            yylval.c_value = *yytext.offset(0 as libc::c_int as isize);
                            return *yytext.offset(0 as libc::c_int as isize) as libc::c_int;
                        }
                        23 => return 258 as libc::c_int,
                        24 => return 259 as libc::c_int,
                        25 => return 260 as libc::c_int,
                        26 => {
                            yylval.c_value = *yytext.offset(0 as libc::c_int as isize);
                            return 264 as libc::c_int;
                        }
                        27 => {
                            yylval.c_value = *yytext.offset(0 as libc::c_int as isize);
                            return 265 as libc::c_int;
                        }
                        28 => {
                            yylval.c_value = '=' as i32 as libc::c_char;
                            *yy_cp = yy_hold_char;
                            yy_cp = yy_bp.offset(1 as libc::c_int as isize);
                            yy_c_buf_p = yy_cp;
                            yytext = yy_bp;
                            yyleng =
                                yy_cp.wrapping_offset_from(yy_bp) as libc::c_long as libc::c_int;
                            yy_hold_char = *yy_cp;
                            *yy_cp = '\u{0}' as i32 as libc::c_char;
                            yy_c_buf_p = yy_cp;
                            return 265 as libc::c_int;
                        }
                        29 => {
                            yylval.s_value = strcopyof(yytext);
                            return 266 as libc::c_int;
                        }
                        30 => {
                            yylval.c_value = *yytext.offset(0 as libc::c_int as isize);
                            return 267 as libc::c_int;
                        }
                        31 => {
                            line_no += 1;
                            return 257 as libc::c_int;
                        }
                        32 => {
                            line_no += 1;
                            break 'c_3472;
                            /* ignore a "quoted" newline */
                        }
                        33 => {
                            /* ignore spaces and tabs */
                            break 'c_3472;
                        }
                        34 => {
                            let mut c: libc::c_int = 0;
                            loop {
                                loop {
                                    c = input();
                                    if !(c != '*' as i32 && c != EOF) {
                                        break;
                                    }
                                    /* eat it */
                                    if c == '\n' as i32 {
                                        line_no += 1
                                    }
                                }
                                if c == '*' as i32 {
                                    loop
                                    /* eat it*/
                                    {
                                        c = input(); /* at end of comment */
                                        if !(c == '*' as i32) {
                                            break;
                                        }
                                    }
                                    if c == '/' as i32 {
                                        break;
                                    }
                                    if c == '\n' as i32 {
                                        line_no += 1
                                    }
                                }
                                if !(c == EOF) {
                                    continue;
                                }
                                fprintf(
                                    stderr,
                                    b"EOF encountered in a comment.\n\x00" as *const u8
                                        as *const libc::c_char,
                                );
                                break;
                            }
                            break 'c_3472;
                        }
                        35 => {
                            yylval.s_value = strcopyof(yytext);
                            return 262 as libc::c_int;
                        }
                        36 => {
                            /* unsigned */
                            let mut look: *mut libc::c_char = 0 as *mut libc::c_char;
                            let mut count: libc::c_int = 0 as libc::c_int;
                            yylval.s_value = strcopyof(yytext);
                            look = yytext;
                            while *look as libc::c_int != 0 as libc::c_int {
                                if *look as libc::c_int == '\n' as i32 {
                                    line_no += 1
                                }
                                if *look as libc::c_int == '\"' as i32 {
                                    count += 1
                                }
                                look = look.offset(1)
                            }
                            if count != 2 as libc::c_int {
                                yyerror(
                                    b"NUL character in string.\x00" as *const u8
                                        as *const libc::c_char
                                        as *mut libc::c_char,
                                );
                            }
                            return 261 as libc::c_int;
                        }
                        37 => {
                            /* unsigned */
                            let mut src: *mut libc::c_char = 0 as *mut libc::c_char;
                            let mut dst: *mut libc::c_char = 0 as *mut libc::c_char;
                            let mut len: libc::c_int = 0;
                            /* remove a trailing decimal point. */
                            len = strlen(yytext as *const libc::c_char) as libc::c_int;
                            if *yytext.offset((len - 1 as libc::c_int) as isize) as libc::c_int
                                == '.' as i32
                            {
                                *yytext.offset((len - 1 as libc::c_int) as isize) =
                                    0 as libc::c_int as libc::c_char
                            }
                            /* remove leading zeros. */
                            src = yytext;
                            dst = yytext;
                            while *src as libc::c_int == '0' as i32 {
                                src = src.offset(1)
                            }
                            if *src as libc::c_int == 0 as libc::c_int {
                                src = src.offset(-1)
                            }
                            /* Copy strings removing the newlines. */
                            while *src as libc::c_int != 0 as libc::c_int {
                                if *src as libc::c_int == '\\' as i32 {
                                    src = src.offset(1);
                                    src = src.offset(1);
                                    line_no += 1
                                } else {
                                    let fresh0 = src;
                                    src = src.offset(1);
                                    let fresh1 = dst;
                                    dst = dst.offset(1);
                                    *fresh1 = *fresh0
                                }
                            }
                            *dst = 0 as libc::c_int as libc::c_char;
                            yylval.s_value = strcopyof(yytext);
                            return 263 as libc::c_int;
                        }
                        38 => {
                            if (*yytext.offset(0 as libc::c_int as isize) as libc::c_int)
                                < ' ' as i32
                            {
                                yyerror(
                                    b"illegal character: ^%c\x00" as *const u8
                                        as *const libc::c_char
                                        as *mut libc::c_char,
                                    *yytext.offset(0 as libc::c_int as isize) as libc::c_int
                                        + '@' as i32,
                                );
                            } else if *yytext.offset(0 as libc::c_int as isize) as libc::c_int
                                > '~' as i32
                            {
                                yyerror(
                                    b"illegal character: \\%3d\x00" as *const u8
                                        as *const libc::c_char
                                        as *mut libc::c_char,
                                    *yytext.offset(0 as libc::c_int as isize) as libc::c_int,
                                );
                            } else {
                                yyerror(
                                    b"illegal character: %s\x00" as *const u8 as *const libc::c_char
                                        as *mut libc::c_char,
                                    yytext,
                                );
                            }
                            break 'c_3472;
                        }
                        39 => {
                            fwrite(
                                yytext as *const libc::c_void,
                                yyleng as libc::c_ulong,
                                1 as libc::c_int as libc::c_ulong,
                                yyout,
                            );
                            break 'c_3472;
                        }
                        41 => return 0 as libc::c_int,
                        YY_END_OF_BUFFER => {
                            /* amount of text matched not including the EOB char */
                            let mut yy_amount_of_matched_text: libc::c_int =
                                (yy_cp.wrapping_offset_from(yytext) as libc::c_long
                                    - 1 as libc::c_int as libc::c_long)
                                    as libc::c_int;
                            /* undo the effects of YY_DO_BEFORE_ACTION */
                            *yy_cp = yy_hold_char;
                            /* note that here we test for yy_c_buf_p "<=" to the position
                             * of the first EOB in the buffer, since yy_c_buf_p will
                             * already have been incremented past the NUL character
                             * (since all states make transitions on EOB to the end-
                             * of-buffer state).  Contrast this with the test in yyinput().
                             */
                            if yy_c_buf_p
                                <= &mut *(*yy_current_buffer).yy_ch_buf.offset(yy_n_chars as isize)
                                    as *mut libc::c_char
                            {
                                /* this was really a NUL */
                                let mut yy_next_state: yy_state_type = 0;
                                yy_c_buf_p = yytext.offset(yy_amount_of_matched_text as isize);
                                yy_current_state = yy_get_previous_state();
                                /* okay, we're now positioned to make the
                                 * NUL transition.  We couldn't have
                                 * yy_get_previous_state() go ahead and do it
                                 * for us because it doesn't know how to deal
                                 * with the possibility of jamming (and we
                                 * don't want to build jamming into it because
                                 * then it will run more slowly)
                                 */
                                yy_next_state = yy_try_NUL_trans(yy_current_state);
                                yy_bp = yytext.offset(YY_MORE_ADJ as isize);
                                if !(yy_next_state != 0) {
                                    break;
                                }
                                /* consume the NUL */
                                yy_c_buf_p = yy_c_buf_p.offset(1);
                                yy_cp = yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                break 'c_3473;
                            } else {
                                match yy_get_next_buffer() {
                                    EOB_ACT_END_OF_FILE => {
                                        yy_did_buffer_switch_on_eof = 0 as libc::c_int;
                                        if yywrap() != 0 {
                                            /* note: because we've taken care in
                                             * yy_get_next_buffer() to have set up yytext,
                                             * we can now set up yy_c_buf_p so that if some
                                             * total hoser (like flex itself) wants
                                             * to call the scanner after we return the
                                             * YY_NULL, it'll still work - another YY_NULL
                                             * will get returned.
                                             */
                                            yy_c_buf_p = yytext.offset(YY_MORE_ADJ as isize);
                                            yy_act = YY_END_OF_BUFFER
                                                + (yy_start - 1 as libc::c_int) / 2 as libc::c_int
                                                + 1 as libc::c_int
                                        } else {
                                            if yy_did_buffer_switch_on_eof == 0 {
                                                yy_init_buffer(yy_current_buffer, yyin);
                                                yy_load_buffer_state();
                                            }
                                            break 'c_3472;
                                        }
                                    }
                                    EOB_ACT_CONTINUE_SCAN => {
                                        yy_c_buf_p =
                                            yytext.offset(yy_amount_of_matched_text as isize);
                                        yy_current_state = yy_get_previous_state();
                                        yy_cp = yy_c_buf_p;
                                        yy_bp = yytext.offset(YY_MORE_ADJ as isize);
                                        break 'c_3473;
                                    }
                                    EOB_ACT_LAST_MATCH => {
                                        yy_c_buf_p = &mut *(*yy_current_buffer)
                                            .yy_ch_buf
                                            .offset(yy_n_chars as isize)
                                            as *mut libc::c_char;
                                        yy_current_state = yy_get_previous_state();
                                        yy_cp = yy_c_buf_p;
                                        yy_bp = yytext.offset(YY_MORE_ADJ as isize);
                                        break;
                                    }
                                    _ => {
                                        break 'c_3472;
                                    }
                                }
                            }
                        }
                        _ => {
                            fputs(
                                b"fatal flex scanner internal error--no action found\x00"
                                    as *const u8
                                    as *const libc::c_char,
                                stderr,
                            );
                            _IO_putc('\n' as i32, stderr);
                            exit(1 as libc::c_int);
                        }
                    }
                }
            }
        }
    }
}
/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH -
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
unsafe extern "C" fn yy_get_next_buffer() -> libc::c_int {
    let mut dest: *mut libc::c_char = (*yy_current_buffer).yy_ch_buf; /* copy prev. char, too */
    let mut source: *mut libc::c_char = yytext.offset(-(1 as libc::c_int as isize));
    let mut number_to_move: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut ret_val: libc::c_int = 0;
    if yy_c_buf_p
        > &mut *(*yy_current_buffer)
            .yy_ch_buf
            .offset((yy_n_chars + 1 as libc::c_int) as isize) as *mut libc::c_char
    {
        fputs(
            b"fatal flex scanner internal error--end of buffer missed\x00" as *const u8
                as *const libc::c_char,
            stderr,
        );
        _IO_putc('\n' as i32, stderr);
        exit(1 as libc::c_int);
    }
    /* try to read more data */
    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p.wrapping_offset_from(yytext) as libc::c_long as libc::c_int;
    i = 0 as libc::c_int;
    while i < number_to_move {
        let fresh2 = source;
        source = source.offset(1);
        let fresh3 = dest;
        dest = dest.offset(1);
        *fresh3 = *fresh2;
        i += 1
    }
    if (*yy_current_buffer).yy_eof_status != EOF_NOT_SEEN {
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0 as libc::c_int
    } else {
        let mut num_to_read: libc::c_int =
            (*yy_current_buffer).yy_buf_size - number_to_move - 1 as libc::c_int;
        if num_to_read > YY_READ_BUF_SIZE {
            num_to_read = YY_READ_BUF_SIZE
        } else if num_to_read <= 0 as libc::c_int {
            fputs(
                b"fatal error - scanner input buffer overflow\x00" as *const u8
                    as *const libc::c_char,
                stderr,
            );
            _IO_putc('\n' as i32, stderr);
            exit(1 as libc::c_int);
        }
        loop
        /* read in more data */
        {
            yy_n_chars = read(
                fileno(yyin),
                &mut *(*yy_current_buffer)
                    .yy_ch_buf
                    .offset(number_to_move as isize) as *mut libc::c_char
                    as *mut libc::c_void,
                num_to_read as size_t,
            ) as libc::c_int;
            if !(yy_n_chars < 0 as libc::c_int) {
                break;
            }
            if errno != EINTR {
                fputs(
                    b"read() in flex scanner failed\x00" as *const u8 as *const libc::c_char,
                    stderr,
                );
                _IO_putc('\n' as i32, stderr);
                exit(1 as libc::c_int);
            }
        }
    }
    if yy_n_chars == 0 as libc::c_int {
        if number_to_move == 1 as libc::c_int {
            ret_val = EOB_ACT_END_OF_FILE;
            (*yy_current_buffer).yy_eof_status = EOF_DONE
        } else {
            ret_val = EOB_ACT_LAST_MATCH;
            (*yy_current_buffer).yy_eof_status = EOF_PENDING
        }
    } else {
        ret_val = EOB_ACT_CONTINUE_SCAN
    }
    yy_n_chars += number_to_move;
    *(*yy_current_buffer).yy_ch_buf.offset(yy_n_chars as isize) =
        YY_END_OF_BUFFER_CHAR as libc::c_char;
    *(*yy_current_buffer)
        .yy_ch_buf
        .offset((yy_n_chars + 1 as libc::c_int) as isize) = YY_END_OF_BUFFER_CHAR as libc::c_char;
    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */
    yytext = &mut *(*yy_current_buffer)
        .yy_ch_buf
        .offset(1 as libc::c_int as isize) as *mut libc::c_char;
    return ret_val;
}
/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */
unsafe extern "C" fn yy_get_previous_state() -> yy_state_type {
    let mut yy_current_state: yy_state_type = 0;
    let mut yy_cp: *mut libc::c_char = 0 as *mut libc::c_char;
    yy_current_state = yy_start;
    yy_cp = yytext.offset(YY_MORE_ADJ as isize);
    while yy_cp < yy_c_buf_p {
        let mut yy_c: libc::c_char = if *yy_cp as libc::c_int != 0 {
            yy_ec[*yy_cp as usize] as libc::c_int
        } else {
            1 as libc::c_int
        } as libc::c_char;
        if yy_accept[yy_current_state as usize] != 0 {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp
        }
        while yy_chk
            [(yy_base[yy_current_state as usize] as libc::c_int + yy_c as libc::c_int) as usize]
            as libc::c_int
            != yy_current_state
        {
            yy_current_state = yy_def[yy_current_state as usize] as yy_state_type;
            if yy_current_state >= 144 as libc::c_int {
                yy_c = yy_meta[yy_c as usize]
            }
        }
        yy_current_state = yy_nxt
            [(yy_base[yy_current_state as usize] as libc::c_int + yy_c as libc::c_int) as usize]
            as yy_state_type;
        yy_cp = yy_cp.offset(1)
    }
    return yy_current_state;
}
/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */
unsafe extern "C" fn yy_try_NUL_trans(mut yy_current_state: yy_state_type) -> yy_state_type {
    let mut yy_is_jam: libc::c_int = 0;
    let mut yy_cp: *mut libc::c_char = yy_c_buf_p;
    let mut yy_c: libc::c_char = 1 as libc::c_int as libc::c_char;
    if yy_accept[yy_current_state as usize] != 0 {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp
    }
    while yy_chk[(yy_base[yy_current_state as usize] as libc::c_int + yy_c as libc::c_int) as usize]
        as libc::c_int
        != yy_current_state
    {
        yy_current_state = yy_def[yy_current_state as usize] as yy_state_type;
        if yy_current_state >= 144 as libc::c_int {
            yy_c = yy_meta[yy_c as usize]
        }
    }
    yy_current_state = yy_nxt
        [(yy_base[yy_current_state as usize] as libc::c_int + yy_c as libc::c_int) as usize]
        as yy_state_type;
    yy_is_jam =
        (yy_base[yy_current_state as usize] as libc::c_int == 194 as libc::c_int) as libc::c_int;
    return if yy_is_jam != 0 {
        0 as libc::c_int
    } else {
        yy_current_state
    };
}
unsafe extern "C" fn input() -> libc::c_int {
    let mut c: libc::c_int = 0;
    let mut yy_cp: *mut libc::c_char = yy_c_buf_p;
    *yy_cp = yy_hold_char;
    if *yy_c_buf_p as libc::c_int == YY_END_OF_BUFFER_CHAR {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if yy_c_buf_p
            < &mut *(*yy_current_buffer).yy_ch_buf.offset(yy_n_chars as isize) as *mut libc::c_char
        {
            /* this was really a NUL */
            *yy_c_buf_p = '\u{0}' as i32 as libc::c_char
        } else {
            /* need more input */
            yytext = yy_c_buf_p;
            yy_c_buf_p = yy_c_buf_p.offset(1);
            match yy_get_next_buffer() {
                EOB_ACT_END_OF_FILE => {
                    if yywrap() != 0 {
                        yy_c_buf_p = yytext.offset(YY_MORE_ADJ as isize);
                        return -(1 as libc::c_int);
                    }
                    yy_init_buffer(yy_current_buffer, yyin);
                    yy_load_buffer_state();
                    return input();
                }
                EOB_ACT_CONTINUE_SCAN => yy_c_buf_p = yytext.offset(YY_MORE_ADJ as isize),
                EOB_ACT_LAST_MATCH => {
                    fputs(
                        b"unexpected last match in input()\x00" as *const u8 as *const libc::c_char,
                        stderr,
                    );
                    _IO_putc('\n' as i32, stderr);
                    exit(1 as libc::c_int);
                }
                _ => {}
            }
        }
    }
    c = *yy_c_buf_p as libc::c_int;
    yy_c_buf_p = yy_c_buf_p.offset(1);
    yy_hold_char = *yy_c_buf_p;
    return c;
}
#[no_mangle]
pub unsafe extern "C" fn yyrestart(mut input_file: *mut FILE) {
    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}
#[no_mangle]
pub unsafe extern "C" fn yy_switch_to_buffer(mut new_buffer: YY_BUFFER_STATE) {
    if yy_current_buffer == new_buffer {
        return;
    }
    if !yy_current_buffer.is_null() {
        /* flush out information for old buffer */
        *yy_c_buf_p = yy_hold_char;
        (*yy_current_buffer).yy_buf_pos = yy_c_buf_p;
        (*yy_current_buffer).yy_n_chars = yy_n_chars
    }
    yy_current_buffer = new_buffer;
    yy_load_buffer_state();
    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn yy_load_buffer_state() {
    yy_n_chars = (*yy_current_buffer).yy_n_chars;
    yy_c_buf_p = (*yy_current_buffer).yy_buf_pos;
    yytext = yy_c_buf_p;
    yyin = (*yy_current_buffer).yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}
#[no_mangle]
pub unsafe extern "C" fn yy_create_buffer(
    mut file: *mut FILE,
    mut size: libc::c_int,
) -> YY_BUFFER_STATE {
    let mut b: YY_BUFFER_STATE = 0 as *mut yy_buffer_state;
    b = malloc(::std::mem::size_of::<yy_buffer_state>() as libc::c_ulong) as YY_BUFFER_STATE;
    if b.is_null() {
        fputs(
            b"out of dynamic memory in yy_create_buffer()\x00" as *const u8 as *const libc::c_char,
            stderr,
        );
        _IO_putc('\n' as i32, stderr);
        exit(1 as libc::c_int);
    }
    (*b).yy_buf_size = size;
    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    (*b).yy_ch_buf = malloc(((*b).yy_buf_size + 2 as libc::c_int) as libc::c_uint as libc::c_ulong)
        as *mut libc::c_char;
    if (*b).yy_ch_buf.is_null() {
        fputs(
            b"out of dynamic memory in yy_create_buffer()\x00" as *const u8 as *const libc::c_char,
            stderr,
        );
        _IO_putc('\n' as i32, stderr);
        exit(1 as libc::c_int);
    }
    yy_init_buffer(b, file);
    return b;
}
#[no_mangle]
pub unsafe extern "C" fn yy_delete_buffer(mut b: YY_BUFFER_STATE) {
    if b == yy_current_buffer {
        yy_current_buffer = 0 as YY_BUFFER_STATE
    }
    free((*b).yy_ch_buf as *mut libc::c_void);
    free(b as *mut libc::c_char as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn yy_init_buffer(mut b: YY_BUFFER_STATE, mut file: *mut FILE) {
    (*b).yy_input_file = file;
    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */
    *(*b).yy_ch_buf.offset(0 as libc::c_int as isize) = '\n' as i32 as libc::c_char;
    (*b).yy_n_chars = 1 as libc::c_int;
    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    *(*b).yy_ch_buf.offset(1 as libc::c_int as isize) = YY_END_OF_BUFFER_CHAR as libc::c_char;
    *(*b).yy_ch_buf.offset(2 as libc::c_int as isize) = YY_END_OF_BUFFER_CHAR as libc::c_char;
    (*b).yy_buf_pos = &mut *(*b).yy_ch_buf.offset(1 as libc::c_int as isize) as *mut libc::c_char;
    (*b).yy_eof_status = EOF_NOT_SEEN;
}
/* unsigned */
/* scan.l: the (f)lex description file for the scanner. */
/*  This file is part of bc written for MINIX.
    Copyright (C) 1991, 1992 Free Software Foundation, Inc.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License , or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; see the file COPYING.  If not, write to
    the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

    You may contact the author by:
       e-mail:  phil@cs.wwu.edu
      us-mail:  Philip A. Nelson
                Computer Science Department, 9062
                Western Washington University
                Bellingham, WA 98226-9062

*************************************************************************/
/* Using flex, we can ask for a smaller input buffer.  With lex, this
does nothing! */
/* We want to define our own yywrap. */
/* This is the way to get multiple files input into lex. */
#[no_mangle]
pub unsafe extern "C" fn yywrap() -> libc::c_int {
    if open_new_file() == 0 {
        return 1 as libc::c_int;
    } /* EOF on standard in. */
    return 0 as libc::c_int;
    /* We have more input. */
}

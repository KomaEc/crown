warning: unused imports: `DirectedGraph`, `GraphSuccessors`, `WithNumEdges`, `WithNumNodes`, `WithSuccessors`
 --> utils/graph/src/implementation/forward_star.rs:3:13
  |
3 | use crate::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};
  |             ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `graph` (lib) generated 1 warning
warning: unused import: `graph::*`
 --> refactorer/crustr_analysis/src/call_graph.rs:1:5
  |
1 | use graph::*;
  |     ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `rustc_data_structures::binary_search_util::binary_search_slice`
 --> refactorer/crustr_analysis/src/call_graph.rs:4:5
  |
4 | use rustc_data_structures::binary_search_util::binary_search_slice;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field is never read: `body`
  --> refactorer/crustr_analysis/src/ownership_analysis/constraint_generation.rs:12:5
   |
12 |     body: &'me Body<'tcx>,
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `new`
   --> refactorer/crustr_analysis/src/lib.rs:194:14
    |
194 |     crate fn new(body: &Body<'_>) -> Self {
    |              ^^^

warning: `crustr_analysis` (lib) generated 4 warnings
   Compiling crustr_rustc_interface v0.1.0 (/Users/pd21541/Research/crustr/refactorer/crustr_rustc_interface)
warning: unused import: `crustr_analysis::pointer_analysis::PointerAnalysis`
 --> refactorer/crustr_rustc_interface/src/toy_run.rs:1:5
  |
1 | use crustr_analysis::pointer_analysis::PointerAnalysis;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `mir::visit::Visitor`, `ty::WithOptConstParam`
 --> refactorer/crustr_rustc_interface/src/toy_run.rs:6:20
  |
6 | use rustc_middle::{mir::visit::Visitor, ty::WithOptConstParam};
  |                    ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crustr_analysis::toy_analysis::place_tracer::PlaceTracer`
 --> refactorer/crustr_rustc_interface/src/toy_run.rs:9:5
  |
9 | use crustr_analysis::toy_analysis::place_tracer::PlaceTracer;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crustr_analysis::toy_analysis::unused_ptr_decl::UnusedPointerDecl`
  --> refactorer/crustr_rustc_interface/src/toy_run.rs:10:5
   |
10 | use crustr_analysis::toy_analysis::unused_ptr_decl::UnusedPointerDecl;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `top_level_function_def_ids`
  --> refactorer/crustr_rustc_interface/src/toy_run.rs:34:21
   |
34 |                 let top_level_function_def_ids = hir_krate
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_top_level_function_def_ids`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `crustr_rustc_interface` (lib) generated 5 warnings
   Compiling crustr v0.1.0 (/Users/pd21541/Research/crustr/src/bin)
    Finished dev [unoptimized + debuginfo] target(s) in 7.02s
     Running `target/debug/crustr workspace/buffer`
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging mir bodies for top-level functions
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_new() -> *mut src::buffer::buffer_t {
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:59:42: 59:55
        let mut _1: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:60:33: 60:52
    
        bb0: {
            _1 = const 64_u64;               // scope 0 at workspace/buffer/src/buffer.rs:60:33: 60:52
            _0 = src::buffer::buffer_new_with_size(move _1) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:60:12: 60:53
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:60:12: 60:32
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:61:2: 61:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_new_with_size(_1: u64) -> *mut src::buffer::buffer_t {
        debug n => _1;                       // in scope 0 at workspace/buffer/src/buffer.rs:66:47: 66:52
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:66:65: 66:78
        let mut _2: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:67:9: 67:19
        let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:67:22: 67:70
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:67:29: 67:69
        let mut _5: usize;                   // in scope 0 at workspace/buffer/src/buffer.rs:67:29: 67:62
        let mut _6: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:68:8: 68:24
        let mut _7: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:68:8: 68:14
        let mut _8: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:71:21: 71:22
        let mut _9: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:72:23: 72:79
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:72:30: 72:61
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:72:30: 72:31
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:72:45: 72:60
        let mut _13: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:72:63: 72:78
        let mut _14: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:73:22: 73:37
        scope 1 {
            debug self_0 => _2;              // in scope 1 at workspace/buffer/src/buffer.rs:67:9: 67:19
        }
    
        bb0: {
            _5 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:67:29: 67:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:67:29: 67:60
                                             // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::buffer::buffer_t>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _4 = move _5 as u64 (Misc);      // scope 0 at workspace/buffer/src/buffer.rs:67:29: 67:69
            _3 = src::buffer::malloc(move _4) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:67:22: 67:70
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:67:22: 67:28
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::buffer::malloc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _2 = move _3 as *mut src::buffer::buffer_t (Misc); // scope 0 at workspace/buffer/src/buffer.rs:67:22: 67:87
            _7 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:68:8: 68:14
            _6 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _7) -> bb3; // scope 1 at workspace/buffer/src/buffer.rs:68:8: 68:24
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:68:15: 68:22
                                             // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/buffer/src/buffer.rs:68:8: 68:24
        }
    
        bb4: {
            _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer/src/buffer.rs:69:16: 69:34
                                             // ty::Const
                                             // + ty: *mut src::buffer::buffer_t
                                             // + val: Value(Scalar(0x0000000000000000))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:69:16: 69:34
                                             // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
            goto -> bb8;                     // scope 1 at no-location
        }
    
        bb5: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/buffer.rs:71:21: 71:22
            ((*_2).0: u64) = move _8;        // scope 1 at workspace/buffer/src/buffer.rs:71:5: 71:22
            _11 = _1;                        // scope 1 at workspace/buffer/src/buffer.rs:72:30: 72:31
            _12 = const 1_u64;               // scope 1 at workspace/buffer/src/buffer.rs:72:45: 72:60
            _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb6; // scope 1 at workspace/buffer/src/buffer.rs:72:30: 72:61
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:72:32: 72:44
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _13 = const 1_u64;               // scope 1 at workspace/buffer/src/buffer.rs:72:63: 72:78
            _9 = src::buffer::calloc(move _10, move _13) -> bb7; // scope 1 at workspace/buffer/src/buffer.rs:72:23: 72:79
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:72:23: 72:29
                                             // + literal: Const { ty: unsafe extern "C" fn(u64, u64) -> *mut libc::c_void {src::buffer::calloc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            ((*_2).1: *mut i8) = move _9 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/buffer.rs:72:5: 72:100
            _14 = ((*_2).1: *mut i8);        // scope 1 at workspace/buffer/src/buffer.rs:73:22: 73:37
            ((*_2).2: *mut i8) = move _14;   // scope 1 at workspace/buffer/src/buffer.rs:73:5: 73:37
            _0 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:74:12: 74:18
            goto -> bb8;                     // scope 1 at workspace/buffer/src/buffer.rs:74:5: 74:18
        }
    
        bb8: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:75:2: 75:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_new_with_string(_1: *mut i8) -> *mut src::buffer::buffer_t {
        debug str => _1;                     // in scope 0 at workspace/buffer/src/buffer.rs:80:49: 80:56
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:80:80: 80:93
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:81:42: 81:45
        let mut _3: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:81:47: 81:58
        let mut _4: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:81:54: 81:57
        let mut _5: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:81:54: 81:57
    
        bb0: {
            _2 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:81:42: 81:45
            _5 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:81:54: 81:57
            _4 = move _5 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:81:54: 81:57
            _3 = src::buffer::strlen(move _4) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:81:47: 81:58
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:81:47: 81:53
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _0 = src::buffer::buffer_new_with_string_length(move _2, move _3) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:81:12: 81:59
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:81:12: 81:41
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_string_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:82:2: 82:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_new_with_string_length(_1: *mut i8, _2: u64) -> *mut src::buffer::buffer_t {
        debug str => _1;                     // in scope 0 at workspace/buffer/src/buffer.rs:88:5: 88:12
        debug len => _2;                     // in scope 0 at workspace/buffer/src/buffer.rs:89:5: 89:12
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:90:6: 90:19
        let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:91:9: 91:19
        let mut _4: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:91:22: 91:70
        let mut _5: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:91:29: 91:69
        let mut _6: usize;                   // in scope 0 at workspace/buffer/src/buffer.rs:91:29: 91:62
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:92:8: 92:24
        let mut _8: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:92:8: 92:14
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:95:21: 95:24
        let mut _10: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:96:23: 96:26
        let mut _11: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:97:22: 97:37
        scope 1 {
            debug self_0 => _3;              // in scope 1 at workspace/buffer/src/buffer.rs:91:9: 91:19
        }
    
        bb0: {
            _6 = std::mem::size_of::<src::buffer::buffer_t>() -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:91:29: 91:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:91:29: 91:60
                                             // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::buffer::buffer_t>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _5 = move _6 as u64 (Misc);      // scope 0 at workspace/buffer/src/buffer.rs:91:29: 91:69
            _4 = src::buffer::malloc(move _5) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:91:22: 91:70
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:91:22: 91:28
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::buffer::malloc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _3 = move _4 as *mut src::buffer::buffer_t (Misc); // scope 0 at workspace/buffer/src/buffer.rs:91:22: 91:87
            _8 = _3;                         // scope 1 at workspace/buffer/src/buffer.rs:92:8: 92:14
            _7 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _8) -> bb3; // scope 1 at workspace/buffer/src/buffer.rs:92:8: 92:24
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:92:15: 92:22
                                             // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            switchInt(move _7) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/buffer/src/buffer.rs:92:8: 92:24
        }
    
        bb4: {
            _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer/src/buffer.rs:93:16: 93:34
                                             // ty::Const
                                             // + ty: *mut src::buffer::buffer_t
                                             // + val: Value(Scalar(0x0000000000000000))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:93:16: 93:34
                                             // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
            goto -> bb6;                     // scope 1 at no-location
        }
    
        bb5: {
            _9 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:95:21: 95:24
            ((*_3).0: u64) = move _9;        // scope 1 at workspace/buffer/src/buffer.rs:95:5: 95:24
            _10 = _1;                        // scope 1 at workspace/buffer/src/buffer.rs:96:23: 96:26
            ((*_3).1: *mut i8) = move _10;   // scope 1 at workspace/buffer/src/buffer.rs:96:5: 96:26
            _11 = ((*_3).1: *mut i8);        // scope 1 at workspace/buffer/src/buffer.rs:97:22: 97:37
            ((*_3).2: *mut i8) = move _11;   // scope 1 at workspace/buffer/src/buffer.rs:97:5: 97:37
            _0 = _3;                         // scope 1 at workspace/buffer/src/buffer.rs:98:12: 98:18
            goto -> bb6;                     // scope 1 at workspace/buffer/src/buffer.rs:98:5: 98:18
        }
    
        bb6: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:99:2: 99:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_new_with_copy(_1: *mut i8) -> *mut src::buffer::buffer_t {
        debug str => _1;                     // in scope 0 at workspace/buffer/src/buffer.rs:104:47: 104:54
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:104:78: 104:91
        let mut _2: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:105:9: 105:16
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:105:26: 105:29
        let mut _4: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:105:26: 105:29
        let mut _6: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:106:43: 106:46
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:107:8: 107:24
        let mut _8: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:107:8: 107:14
        let _9: *mut libc::c_void;           // in scope 0 at workspace/buffer/src/buffer.rs:110:5: 114:6
        let mut _10: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:111:9: 111:45
        let mut _11: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:111:9: 111:24
        let mut _12: *const libc::c_void;    // in scope 0 at workspace/buffer/src/buffer.rs:112:9: 112:35
        let mut _13: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:112:9: 112:12
        let mut _14: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:113:9: 113:12
        let mut _15: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:115:22: 115:37
        scope 1 {
            debug len => _2;                 // in scope 1 at workspace/buffer/src/buffer.rs:105:9: 105:16
            let mut _5: *mut src::buffer::buffer_t; // in scope 1 at workspace/buffer/src/buffer.rs:106:9: 106:19
            scope 2 {
                debug self_0 => _5;          // in scope 2 at workspace/buffer/src/buffer.rs:106:9: 106:19
            }
        }
    
        bb0: {
            _4 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:105:26: 105:29
            _3 = move _4 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:105:26: 105:29
            _2 = src::buffer::strlen(move _3) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:105:19: 105:30
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:105:19: 105:25
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _6 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:106:43: 106:46
            _5 = src::buffer::buffer_new_with_size(move _6) -> bb2; // scope 1 at workspace/buffer/src/buffer.rs:106:22: 106:47
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:106:22: 106:42
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _8 = _5;                         // scope 2 at workspace/buffer/src/buffer.rs:107:8: 107:14
            _7 = std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null(move _8) -> bb3; // scope 2 at workspace/buffer/src/buffer.rs:107:8: 107:24
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:107:15: 107:22
                                             // + literal: Const { ty: fn(*mut src::buffer::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::buffer::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            switchInt(move _7) -> [false: bb5, otherwise: bb4]; // scope 2 at workspace/buffer/src/buffer.rs:107:8: 107:24
        }
    
        bb4: {
            _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 2 at workspace/buffer/src/buffer.rs:108:16: 108:34
                                             // ty::Const
                                             // + ty: *mut src::buffer::buffer_t
                                             // + val: Value(Scalar(0x0000000000000000))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:108:16: 108:34
                                             // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
            goto -> bb7;                     // scope 2 at no-location
        }
    
        bb5: {
            _11 = ((*_5).1: *mut i8);        // scope 2 at workspace/buffer/src/buffer.rs:111:9: 111:24
            _10 = move _11 as *mut libc::c_void (Misc); // scope 2 at workspace/buffer/src/buffer.rs:111:9: 111:45
            _13 = _1;                        // scope 2 at workspace/buffer/src/buffer.rs:112:9: 112:12
            _12 = move _13 as *const libc::c_void (Misc); // scope 2 at workspace/buffer/src/buffer.rs:112:9: 112:35
            _14 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:113:9: 113:12
            _9 = src::buffer::memcpy(move _10, move _12, move _14) -> bb6; // scope 2 at workspace/buffer/src/buffer.rs:110:5: 114:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:110:5: 110:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _15 = ((*_5).1: *mut i8);        // scope 2 at workspace/buffer/src/buffer.rs:115:22: 115:37
            ((*_5).2: *mut i8) = move _15;   // scope 2 at workspace/buffer/src/buffer.rs:115:5: 115:37
            _0 = _5;                         // scope 2 at workspace/buffer/src/buffer.rs:116:12: 116:18
            goto -> bb7;                     // scope 2 at workspace/buffer/src/buffer.rs:116:5: 116:18
        }
    
        bb7: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:117:2: 117:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_compact(_1: *mut src::buffer::buffer_t) -> i64 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:123:41: 123:51
        let mut _0: i64;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:123:71: 123:78
        let mut _2: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:124:9: 124:16
        let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:124:33: 124:39
        let mut _5: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:125:19: 125:32
        let mut _6: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:125:46: 125:49
        let mut _8: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:126:19: 126:77
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:126:26: 126:59
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:126:26: 126:29
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:126:43: 126:58
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:126:61: 126:76
        let mut _13: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:127:8: 127:21
        let mut _14: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:127:8: 127:11
        let _15: *mut libc::c_void;          // in scope 0 at workspace/buffer/src/buffer.rs:130:5: 134:6
        let mut _16: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:131:9: 131:33
        let mut _17: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:131:9: 131:12
        let mut _18: *const libc::c_void;    // in scope 0 at workspace/buffer/src/buffer.rs:132:9: 132:46
        let mut _19: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:132:9: 132:23
        let mut _20: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:133:9: 133:12
        let _21: ();                         // in scope 0 at workspace/buffer/src/buffer.rs:135:5: 135:47
        let mut _22: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:135:10: 135:46
        let mut _23: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:135:10: 135:25
        let mut _24: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:136:21: 136:24
        let mut _25: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:137:23: 137:26
        let mut _26: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:138:22: 138:37
        let mut _27: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:139:12: 139:15
        scope 1 {
            debug len => _2;                 // in scope 1 at workspace/buffer/src/buffer.rs:124:9: 124:16
            let mut _4: u64;                 // in scope 1 at workspace/buffer/src/buffer.rs:125:9: 125:16
            scope 2 {
                debug rem => _4;             // in scope 2 at workspace/buffer/src/buffer.rs:125:9: 125:16
                let mut _7: *mut i8;         // in scope 2 at workspace/buffer/src/buffer.rs:126:9: 126:16
                scope 3 {
                    debug buf => _7;         // in scope 3 at workspace/buffer/src/buffer.rs:126:9: 126:16
                }
            }
        }
    
        bb0: {
            _3 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:124:33: 124:39
            _2 = src::buffer::buffer_length(move _3) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:124:19: 124:40
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:124:19: 124:32
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) -> u64 {src::buffer::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _5 = ((*_1).0: u64);             // scope 1 at workspace/buffer/src/buffer.rs:125:19: 125:32
            _6 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:125:46: 125:49
            _4 = core::num::<impl u64>::wrapping_sub(move _5, move _6) -> bb2; // scope 1 at workspace/buffer/src/buffer.rs:125:19: 125:50
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:125:33: 125:45
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _10 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:126:26: 126:29
            _11 = const 1_u64;               // scope 2 at workspace/buffer/src/buffer.rs:126:43: 126:58
            _9 = core::num::<impl u64>::wrapping_add(move _10, move _11) -> bb3; // scope 2 at workspace/buffer/src/buffer.rs:126:26: 126:59
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:126:30: 126:42
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _12 = const 1_u64;               // scope 2 at workspace/buffer/src/buffer.rs:126:61: 126:76
            _8 = src::buffer::calloc(move _9, move _12) -> bb4; // scope 2 at workspace/buffer/src/buffer.rs:126:19: 126:77
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:126:19: 126:25
                                             // + literal: Const { ty: unsafe extern "C" fn(u64, u64) -> *mut libc::c_void {src::buffer::calloc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _7 = move _8 as *mut i8 (Misc);  // scope 2 at workspace/buffer/src/buffer.rs:126:19: 126:98
            _14 = _7;                        // scope 3 at workspace/buffer/src/buffer.rs:127:8: 127:11
            _13 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _14) -> bb5; // scope 3 at workspace/buffer/src/buffer.rs:127:8: 127:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:127:12: 127:19
                                             // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            switchInt(move _13) -> [false: bb7, otherwise: bb6]; // scope 3 at workspace/buffer/src/buffer.rs:127:8: 127:21
        }
    
        bb6: {
            _0 = const -1_i64;               // scope 3 at workspace/buffer/src/buffer.rs:128:16: 128:38
            goto -> bb10;                    // scope 3 at no-location
        }
    
        bb7: {
            _17 = _7;                        // scope 3 at workspace/buffer/src/buffer.rs:131:9: 131:12
            _16 = move _17 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer/src/buffer.rs:131:9: 131:33
            _19 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:132:9: 132:23
            _18 = move _19 as *const libc::c_void (Misc); // scope 3 at workspace/buffer/src/buffer.rs:132:9: 132:46
            _20 = _2;                        // scope 3 at workspace/buffer/src/buffer.rs:133:9: 133:12
            _15 = src::buffer::memcpy(move _16, move _18, move _20) -> bb8; // scope 3 at workspace/buffer/src/buffer.rs:130:5: 134:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:130:5: 130:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _23 = ((*_1).1: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:135:10: 135:25
            _22 = move _23 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer/src/buffer.rs:135:10: 135:46
            _21 = src::buffer::free(move _22) -> bb9; // scope 3 at workspace/buffer/src/buffer.rs:135:5: 135:47
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:135:5: 135:9
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _24 = _2;                        // scope 3 at workspace/buffer/src/buffer.rs:136:21: 136:24
            ((*_1).0: u64) = move _24;       // scope 3 at workspace/buffer/src/buffer.rs:136:5: 136:24
            _25 = _7;                        // scope 3 at workspace/buffer/src/buffer.rs:137:23: 137:26
            ((*_1).1: *mut i8) = move _25;   // scope 3 at workspace/buffer/src/buffer.rs:137:5: 137:26
            _26 = ((*_1).1: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:138:22: 138:37
            ((*_1).2: *mut i8) = move _26;   // scope 3 at workspace/buffer/src/buffer.rs:138:5: 138:37
            _27 = _4;                        // scope 3 at workspace/buffer/src/buffer.rs:139:12: 139:15
            _0 = move _27 as i64 (Misc);     // scope 3 at workspace/buffer/src/buffer.rs:139:12: 139:26
            goto -> bb10;                    // scope 3 at workspace/buffer/src/buffer.rs:139:5: 139:26
        }
    
        bb10: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:140:2: 140:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_free(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:145:38: 145:48
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:145:65: 145:65
        let _2: ();                          // in scope 0 at workspace/buffer/src/buffer.rs:146:5: 146:47
        let mut _3: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:146:10: 146:46
        let mut _4: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:146:10: 146:25
        let _5: ();                          // in scope 0 at workspace/buffer/src/buffer.rs:147:5: 147:38
        let mut _6: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:147:10: 147:37
        let mut _7: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:147:10: 147:16
    
        bb0: {
            _4 = ((*_1).1: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:146:10: 146:25
            _3 = move _4 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer/src/buffer.rs:146:10: 146:46
            _2 = src::buffer::free(move _3) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:146:5: 146:47
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:146:5: 146:9
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _7 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:147:10: 147:16
            _6 = move _7 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer/src/buffer.rs:147:10: 147:37
            _5 = src::buffer::free(move _6) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:147:5: 147:38
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:147:5: 147:9
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void) {src::buffer::free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:148:2: 148:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_size(_1: *mut src::buffer::buffer_t) -> u64 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:153:38: 153:48
        let mut _0: u64;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:153:68: 153:74
    
        bb0: {
            _0 = ((*_1).0: u64);             // scope 0 at workspace/buffer/src/buffer.rs:154:12: 154:25
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:155:2: 155:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_length(_1: *mut src::buffer::buffer_t) -> u64 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:160:40: 160:50
        let mut _0: u64;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:160:70: 160:76
        let mut _2: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:161:19: 161:33
        let mut _3: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:161:19: 161:33
    
        bb0: {
            _3 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:161:19: 161:33
            _2 = move _3 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:161:19: 161:33
            _0 = src::buffer::strlen(move _2) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:161:12: 161:34
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:161:12: 161:18
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:162:2: 162:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_resize(_1: *mut src::buffer::buffer_t, _2: u64) -> i32 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:167:40: 167:50
        debug n => _2;                       // in scope 0 at workspace/buffer/src/buffer.rs:167:67: 167:72
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:167:85: 167:88
        let mut _3: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:168:9: 168:56
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:168:9: 168:10
        let mut _5: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:168:24: 168:55
        let mut _6: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:168:59: 168:91
        let mut _7: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:169:21: 169:22
        let mut _8: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:170:22: 173:6
        let mut _9: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:171:9: 171:45
        let mut _10: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:171:9: 171:24
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:172:9: 172:40
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:172:9: 172:10
        let mut _13: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:172:24: 172:39
        let mut _14: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:174:23: 174:37
        let mut _15: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:175:8: 175:33
        let mut _16: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:175:8: 175:23
        let mut _17: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:178:43: 178:57
        let mut _18: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:178:6: 178:40
        let mut _19: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:178:6: 178:21
        let mut _20: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:178:29: 178:39
        let mut _21: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:178:29: 178:30
    
        bb0: {
            _4 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:168:9: 168:10
            _5 = const 1023_u64;             // scope 0 at workspace/buffer/src/buffer.rs:168:24: 168:55
            _3 = core::num::<impl u64>::wrapping_add(move _4, move _5) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:168:9: 168:56
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:168:11: 168:23
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _6 = const 18446744073709550592_u64; // scope 0 at workspace/buffer/src/buffer.rs:168:59: 168:91
            _2 = BitAnd(move _3, move _6);   // scope 0 at workspace/buffer/src/buffer.rs:168:5: 168:91
            _7 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:169:21: 169:22
            ((*_1).0: u64) = move _7;        // scope 0 at workspace/buffer/src/buffer.rs:169:5: 169:22
            _10 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer/src/buffer.rs:171:9: 171:24
            _9 = move _10 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer/src/buffer.rs:171:9: 171:45
            _12 = _2;                        // scope 0 at workspace/buffer/src/buffer.rs:172:9: 172:10
            _13 = const 1_u64;               // scope 0 at workspace/buffer/src/buffer.rs:172:24: 172:39
            _11 = core::num::<impl u64>::wrapping_add(move _12, move _13) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:172:9: 172:40
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:172:11: 172:23
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _8 = src::buffer::realloc(move _9, move _11) -> bb3; // scope 0 at workspace/buffer/src/buffer.rs:170:22: 173:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:170:22: 170:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, u64) -> *mut libc::c_void {src::buffer::realloc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            ((*_1).2: *mut i8) = move _8 as *mut i8 (Misc); // scope 0 at workspace/buffer/src/buffer.rs:170:5: 173:27
            _14 = ((*_1).2: *mut i8);        // scope 0 at workspace/buffer/src/buffer.rs:174:23: 174:37
            ((*_1).1: *mut i8) = move _14;   // scope 0 at workspace/buffer/src/buffer.rs:174:5: 174:37
            _16 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer/src/buffer.rs:175:8: 175:23
            _15 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _16) -> bb4; // scope 0 at workspace/buffer/src/buffer.rs:175:8: 175:33
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:175:24: 175:31
                                             // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            switchInt(move _15) -> [false: bb6, otherwise: bb5]; // scope 0 at workspace/buffer/src/buffer.rs:175:8: 175:33
        }
    
        bb5: {
            _0 = const -1_i32;               // scope 0 at workspace/buffer/src/buffer.rs:176:16: 176:27
            goto -> bb8;                     // scope 0 at no-location
        }
    
        bb6: {
            _17 = const 0_i32;               // scope 0 at workspace/buffer/src/buffer.rs:178:43: 178:57
            _19 = ((*_1).1: *mut i8);        // scope 0 at workspace/buffer/src/buffer.rs:178:6: 178:21
            _21 = _2;                        // scope 0 at workspace/buffer/src/buffer.rs:178:29: 178:30
            _20 = move _21 as isize (Misc);  // scope 0 at workspace/buffer/src/buffer.rs:178:29: 178:39
            _18 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _19, move _20) -> bb7; // scope 0 at workspace/buffer/src/buffer.rs:178:6: 178:40
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:178:22: 178:28
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            (*_18) = move _17 as i8 (Misc);  // scope 0 at workspace/buffer/src/buffer.rs:178:5: 178:73
            _0 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:179:12: 179:13
            goto -> bb8;                     // scope 0 at workspace/buffer/src/buffer.rs:179:5: 179:20
        }
    
        bb8: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:180:2: 180:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_append(_1: *mut src::buffer::buffer_t, _2: *const i8) -> i32 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:224:5: 224:15
        debug str => _2;                     // in scope 0 at workspace/buffer/src/buffer.rs:225:5: 225:12
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:226:6: 226:9
        let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:227:28: 227:34
        let mut _4: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:227:36: 227:39
        let mut _5: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:227:41: 227:52
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:227:48: 227:51
    
        bb0: {
            _3 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:227:28: 227:34
            _4 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:227:36: 227:39
            _6 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:227:48: 227:51
            _5 = src::buffer::strlen(move _6) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:227:41: 227:52
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:227:41: 227:47
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _0 = src::buffer::buffer_append_n(move _3, move _4, move _5) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:227:12: 227:53
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:227:12: 227:27
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, *const i8, u64) -> i32 {src::buffer::buffer_append_n}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:228:2: 228:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_append_n(_1: *mut src::buffer::buffer_t, _2: *const i8, _3: u64) -> i32 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:235:5: 235:15
        debug str => _2;                     // in scope 0 at workspace/buffer/src/buffer.rs:236:5: 236:12
        debug len => _3;                     // in scope 0 at workspace/buffer/src/buffer.rs:237:5: 237:12
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:238:6: 238:9
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:239:9: 239:17
        let mut _5: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:239:27: 239:41
        let mut _6: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:239:27: 239:41
        let mut _8: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:240:22: 240:25
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:240:39: 240:43
        let mut _10: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:242:8: 242:30
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:242:8: 242:21
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:242:24: 242:30
        let _13: *mut i8;                    // in scope 0 at workspace/buffer/src/buffer.rs:243:9: 243:42
        let mut _14: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:243:17: 243:31
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:243:33: 243:36
        let mut _16: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:243:38: 243:41
        let mut _18: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:247:33: 247:39
        let mut _19: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:247:41: 247:47
        let mut _20: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:248:8: 248:26
        let mut _21: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:248:8: 248:19
        let mut _22: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:248:23: 248:26
        let _23: *mut i8;                    // in scope 0 at workspace/buffer/src/buffer.rs:251:5: 251:38
        let mut _24: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:251:13: 251:27
        let mut _25: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:251:29: 251:32
        let mut _26: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:251:34: 251:37
        scope 1 {
            debug prev => _4;                // in scope 1 at workspace/buffer/src/buffer.rs:239:9: 239:17
            let mut _7: u64;                 // in scope 1 at workspace/buffer/src/buffer.rs:240:9: 240:19
            scope 2 {
                debug needed => _7;          // in scope 2 at workspace/buffer/src/buffer.rs:240:9: 240:19
                let mut _17: i32;            // in scope 2 at workspace/buffer/src/buffer.rs:247:9: 247:16
                scope 3 {
                    debug ret => _17;        // in scope 3 at workspace/buffer/src/buffer.rs:247:9: 247:16
                }
            }
        }
    
        bb0: {
            _6 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:239:27: 239:41
            _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:239:27: 239:41
            _4 = src::buffer::strlen(move _5) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:239:20: 239:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:239:20: 239:26
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _3;                         // scope 1 at workspace/buffer/src/buffer.rs:240:22: 240:25
            _9 = _4;                         // scope 1 at workspace/buffer/src/buffer.rs:240:39: 240:43
            _7 = core::num::<impl u64>::wrapping_add(move _8, move _9) -> bb2; // scope 1 at workspace/buffer/src/buffer.rs:240:22: 240:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:240:26: 240:38
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _11 = ((*_1).0: u64);            // scope 2 at workspace/buffer/src/buffer.rs:242:8: 242:21
            _12 = _7;                        // scope 2 at workspace/buffer/src/buffer.rs:242:24: 242:30
            _10 = Gt(move _11, move _12);    // scope 2 at workspace/buffer/src/buffer.rs:242:8: 242:30
            switchInt(move _10) -> [false: bb5, otherwise: bb3]; // scope 2 at workspace/buffer/src/buffer.rs:242:8: 242:30
        }
    
        bb3: {
            _14 = ((*_1).2: *mut i8);        // scope 2 at workspace/buffer/src/buffer.rs:243:17: 243:31
            _15 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:243:33: 243:36
            _16 = _3;                        // scope 2 at workspace/buffer/src/buffer.rs:243:38: 243:41
            _13 = src::buffer::strncat(move _14, move _15, move _16) -> bb4; // scope 2 at workspace/buffer/src/buffer.rs:243:9: 243:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:243:9: 243:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *const i8, u64) -> *mut i8 {src::buffer::strncat}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _0 = const 0_i32;                // scope 2 at workspace/buffer/src/buffer.rs:244:16: 244:17
            goto -> bb10;                    // scope 2 at no-location
        }
    
        bb5: {
            _18 = _1;                        // scope 2 at workspace/buffer/src/buffer.rs:247:33: 247:39
            _19 = _7;                        // scope 2 at workspace/buffer/src/buffer.rs:247:41: 247:47
            _17 = src::buffer::buffer_resize(move _18, move _19) -> bb6; // scope 2 at workspace/buffer/src/buffer.rs:247:19: 247:48
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:247:19: 247:32
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, u64) -> i32 {src::buffer::buffer_resize}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _21 = const -1_i32;              // scope 3 at workspace/buffer/src/buffer.rs:248:8: 248:19
            _22 = _17;                       // scope 3 at workspace/buffer/src/buffer.rs:248:23: 248:26
            _20 = Eq(move _21, move _22);    // scope 3 at workspace/buffer/src/buffer.rs:248:8: 248:26
            switchInt(move _20) -> [false: bb8, otherwise: bb7]; // scope 3 at workspace/buffer/src/buffer.rs:248:8: 248:26
        }
    
        bb7: {
            _0 = const -1_i32;               // scope 3 at workspace/buffer/src/buffer.rs:249:16: 249:27
            goto -> bb10;                    // scope 3 at no-location
        }
    
        bb8: {
            _24 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:251:13: 251:27
            _25 = _2;                        // scope 3 at workspace/buffer/src/buffer.rs:251:29: 251:32
            _26 = _3;                        // scope 3 at workspace/buffer/src/buffer.rs:251:34: 251:37
            _23 = src::buffer::strncat(move _24, move _25, move _26) -> bb9; // scope 3 at workspace/buffer/src/buffer.rs:251:5: 251:38
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:251:5: 251:12
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *const i8, u64) -> *mut i8 {src::buffer::strncat}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _0 = const 0_i32;                // scope 3 at workspace/buffer/src/buffer.rs:252:12: 252:13
            goto -> bb10;                    // scope 3 at workspace/buffer/src/buffer.rs:252:5: 252:20
        }
    
        bb10: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:253:2: 253:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_prepend(_1: *mut src::buffer::buffer_t, _2: *mut i8) -> i32 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:259:5: 259:15
        debug str => _2;                     // in scope 0 at workspace/buffer/src/buffer.rs:260:5: 260:12
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:261:6: 261:9
        let mut _3: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:262:9: 262:16
        let mut _5: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:263:26: 263:29
        let mut _6: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:263:26: 263:29
        let mut _8: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:264:27: 264:41
        let mut _9: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:264:27: 264:41
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:265:22: 265:25
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:265:39: 265:43
        let mut _13: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:267:8: 267:33
        let mut _14: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:267:9: 267:33
        let mut _15: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:267:10: 267:23
        let mut _16: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:267:26: 267:32
        let mut _17: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:269:15: 269:44
        let mut _18: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:269:29: 269:35
        let mut _19: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:269:37: 269:43
        let mut _20: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:270:12: 270:30
        let mut _21: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:270:12: 270:23
        let mut _22: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:270:27: 270:30
        let _23: *mut libc::c_void;          // in scope 0 at workspace/buffer/src/buffer.rs:275:5: 279:6
        let mut _24: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:276:9: 276:65
        let mut _25: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:276:9: 276:44
        let mut _26: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:276:9: 276:23
        let mut _27: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:276:31: 276:43
        let mut _28: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:276:31: 276:34
        let mut _29: *const libc::c_void;    // in scope 0 at workspace/buffer/src/buffer.rs:277:9: 277:46
        let mut _30: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:277:9: 277:23
        let mut _31: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:278:9: 278:42
        let mut _32: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:278:9: 278:12
        let mut _33: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:278:26: 278:41
        let _34: *mut libc::c_void;          // in scope 0 at workspace/buffer/src/buffer.rs:280:5: 284:6
        let mut _35: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:281:9: 281:44
        let mut _36: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:281:9: 281:23
        let mut _37: *const libc::c_void;    // in scope 0 at workspace/buffer/src/buffer.rs:282:9: 282:35
        let mut _38: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:282:9: 282:12
        let mut _39: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:283:9: 283:12
        scope 1 {
            debug ret => _3;                 // in scope 1 at workspace/buffer/src/buffer.rs:262:9: 262:16
            let mut _4: u64;                 // in scope 1 at workspace/buffer/src/buffer.rs:263:9: 263:16
            scope 2 {
                debug len => _4;             // in scope 2 at workspace/buffer/src/buffer.rs:263:9: 263:16
                let mut _7: u64;             // in scope 2 at workspace/buffer/src/buffer.rs:264:9: 264:17
                scope 3 {
                    debug prev => _7;        // in scope 3 at workspace/buffer/src/buffer.rs:264:9: 264:17
                    let mut _10: u64;        // in scope 3 at workspace/buffer/src/buffer.rs:265:9: 265:19
                    scope 4 {
                        debug needed => _10; // in scope 4 at workspace/buffer/src/buffer.rs:265:9: 265:19
                    }
                }
            }
        }
    
        bb0: {
            _3 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:262:24: 262:25
            _6 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:263:26: 263:29
            _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 1 at workspace/buffer/src/buffer.rs:263:26: 263:29
            _4 = src::buffer::strlen(move _5) -> bb1; // scope 1 at workspace/buffer/src/buffer.rs:263:19: 263:30
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:263:19: 263:25
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _9 = ((*_1).2: *mut i8);         // scope 2 at workspace/buffer/src/buffer.rs:264:27: 264:41
            _8 = move _9 as *const i8 (Pointer(MutToConstPointer)); // scope 2 at workspace/buffer/src/buffer.rs:264:27: 264:41
            _7 = src::buffer::strlen(move _8) -> bb2; // scope 2 at workspace/buffer/src/buffer.rs:264:20: 264:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:264:20: 264:26
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _11 = _4;                        // scope 3 at workspace/buffer/src/buffer.rs:265:22: 265:25
            _12 = _7;                        // scope 3 at workspace/buffer/src/buffer.rs:265:39: 265:43
            _10 = core::num::<impl u64>::wrapping_add(move _11, move _12) -> bb3; // scope 3 at workspace/buffer/src/buffer.rs:265:22: 265:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:265:26: 265:38
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _15 = ((*_1).0: u64);            // scope 4 at workspace/buffer/src/buffer.rs:267:10: 267:23
            _16 = _10;                       // scope 4 at workspace/buffer/src/buffer.rs:267:26: 267:32
            _14 = Gt(move _15, move _16);    // scope 4 at workspace/buffer/src/buffer.rs:267:9: 267:33
            _13 = Not(move _14);             // scope 4 at workspace/buffer/src/buffer.rs:267:8: 267:33
            switchInt(move _13) -> [false: bb7, otherwise: bb4]; // scope 4 at workspace/buffer/src/buffer.rs:267:8: 267:33
        }
    
        bb4: {
            _18 = _1;                        // scope 4 at workspace/buffer/src/buffer.rs:269:29: 269:35
            _19 = _10;                       // scope 4 at workspace/buffer/src/buffer.rs:269:37: 269:43
            _17 = src::buffer::buffer_resize(move _18, move _19) -> bb5; // scope 4 at workspace/buffer/src/buffer.rs:269:15: 269:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:269:15: 269:28
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, u64) -> i32 {src::buffer::buffer_resize}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _3 = move _17;                   // scope 4 at workspace/buffer/src/buffer.rs:269:9: 269:44
            _21 = const -1_i32;              // scope 4 at workspace/buffer/src/buffer.rs:270:12: 270:23
            _22 = _3;                        // scope 4 at workspace/buffer/src/buffer.rs:270:27: 270:30
            _20 = Eq(move _21, move _22);    // scope 4 at workspace/buffer/src/buffer.rs:270:12: 270:30
            switchInt(move _20) -> [false: bb7, otherwise: bb6]; // scope 4 at workspace/buffer/src/buffer.rs:270:12: 270:30
        }
    
        bb6: {
            _0 = const -1_i32;               // scope 4 at workspace/buffer/src/buffer.rs:271:20: 271:31
            goto -> bb12;                    // scope 4 at no-location
        }
    
        bb7: {
            _26 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer/src/buffer.rs:276:9: 276:23
            _28 = _4;                        // scope 4 at workspace/buffer/src/buffer.rs:276:31: 276:34
            _27 = move _28 as isize (Misc);  // scope 4 at workspace/buffer/src/buffer.rs:276:31: 276:43
            _25 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _26, move _27) -> bb8; // scope 4 at workspace/buffer/src/buffer.rs:276:9: 276:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:276:24: 276:30
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _24 = move _25 as *mut libc::c_void (Misc); // scope 4 at workspace/buffer/src/buffer.rs:276:9: 276:65
            _30 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer/src/buffer.rs:277:9: 277:23
            _29 = move _30 as *const libc::c_void (Misc); // scope 4 at workspace/buffer/src/buffer.rs:277:9: 277:46
            _32 = _4;                        // scope 4 at workspace/buffer/src/buffer.rs:278:9: 278:12
            _33 = const 1_u64;               // scope 4 at workspace/buffer/src/buffer.rs:278:26: 278:41
            _31 = core::num::<impl u64>::wrapping_add(move _32, move _33) -> bb9; // scope 4 at workspace/buffer/src/buffer.rs:278:9: 278:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:278:13: 278:25
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_add}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _23 = src::buffer::memmove(move _24, move _29, move _31) -> bb10; // scope 4 at workspace/buffer/src/buffer.rs:275:5: 279:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:275:5: 275:12
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memmove}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _36 = ((*_1).2: *mut i8);        // scope 4 at workspace/buffer/src/buffer.rs:281:9: 281:23
            _35 = move _36 as *mut libc::c_void (Misc); // scope 4 at workspace/buffer/src/buffer.rs:281:9: 281:44
            _38 = _2;                        // scope 4 at workspace/buffer/src/buffer.rs:282:9: 282:12
            _37 = move _38 as *const libc::c_void (Misc); // scope 4 at workspace/buffer/src/buffer.rs:282:9: 282:35
            _39 = _4;                        // scope 4 at workspace/buffer/src/buffer.rs:283:9: 283:12
            _34 = src::buffer::memcpy(move _35, move _37, move _39) -> bb11; // scope 4 at workspace/buffer/src/buffer.rs:280:5: 284:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:280:5: 280:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _0 = const 0_i32;                // scope 4 at workspace/buffer/src/buffer.rs:285:12: 285:13
            goto -> bb12;                    // scope 4 at workspace/buffer/src/buffer.rs:285:5: 285:20
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:286:2: 286:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_slice(_1: *mut src::buffer::buffer_t, _2: u64, _3: i64) -> *mut src::buffer::buffer_t {
        debug buf => _1;                     // in scope 0 at workspace/buffer/src/buffer.rs:293:5: 293:12
        debug from => _2;                    // in scope 0 at workspace/buffer/src/buffer.rs:294:5: 294:13
        debug to => _3;                      // in scope 0 at workspace/buffer/src/buffer.rs:295:5: 295:11
        let mut _0: *mut src::buffer::buffer_t; // return place in scope 0 at workspace/buffer/src/buffer.rs:296:6: 296:19
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:297:9: 297:16
        let mut _5: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:297:26: 297:37
        let mut _6: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:297:26: 297:37
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:299:8: 299:26
        let mut _8: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:299:8: 299:19
        let mut _9: i64;                     // in scope 0 at workspace/buffer/src/buffer.rs:299:9: 299:11
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:299:22: 299:26
        let mut _11: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:303:8: 303:37
        let mut _12: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:303:8: 303:10
        let mut _13: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:303:13: 303:37
        let mut _14: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:304:14: 304:42
        let mut _15: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:304:14: 304:17
        let mut _16: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:304:31: 304:41
        let mut _17: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:304:31: 304:34
        let mut _18: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:304:32: 304:34
        let mut _19: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:307:8: 307:23
        let mut _20: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:307:8: 307:17
        let mut _21: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:307:8: 307:10
        let mut _22: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:307:20: 307:23
        let mut _23: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:308:14: 308:17
        let mut _25: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:310:17: 310:28
        let mut _26: i64;                    // in scope 0 at workspace/buffer/src/buffer.rs:310:18: 310:20
        let mut _27: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:310:42: 310:46
        let mut _29: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:311:43: 311:44
        let _30: *mut libc::c_void;          // in scope 0 at workspace/buffer/src/buffer.rs:312:5: 316:6
        let mut _31: *mut libc::c_void;      // in scope 0 at workspace/buffer/src/buffer.rs:313:9: 313:44
        let mut _32: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:313:9: 313:23
        let mut _33: *const libc::c_void;    // in scope 0 at workspace/buffer/src/buffer.rs:314:9: 314:65
        let mut _34: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:314:9: 314:42
        let mut _35: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:314:9: 314:20
        let mut _36: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:314:28: 314:41
        let mut _37: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:314:28: 314:32
        let mut _38: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:315:9: 315:10
        scope 1 {
            debug len => _4;                 // in scope 1 at workspace/buffer/src/buffer.rs:297:9: 297:16
            let mut _24: u64;                // in scope 1 at workspace/buffer/src/buffer.rs:310:9: 310:14
            scope 2 {
                debug n => _24;              // in scope 2 at workspace/buffer/src/buffer.rs:310:9: 310:14
                let mut _28: *mut src::buffer::buffer_t; // in scope 2 at workspace/buffer/src/buffer.rs:311:9: 311:19
                scope 3 {
                    debug self_0 => _28;     // in scope 3 at workspace/buffer/src/buffer.rs:311:9: 311:19
                }
            }
        }
    
        bb0: {
            _6 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:297:26: 297:37
            _5 = move _6 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:297:26: 297:37
            _4 = src::buffer::strlen(move _5) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:297:19: 297:38
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:297:19: 297:25
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::buffer::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _9 = _3;                         // scope 1 at workspace/buffer/src/buffer.rs:299:9: 299:11
            _8 = move _9 as u64 (Misc);      // scope 1 at workspace/buffer/src/buffer.rs:299:8: 299:19
            _10 = _2;                        // scope 1 at workspace/buffer/src/buffer.rs:299:22: 299:26
            _7 = Lt(move _8, move _10);      // scope 1 at workspace/buffer/src/buffer.rs:299:8: 299:26
            switchInt(move _7) -> [false: bb3, otherwise: bb2]; // scope 1 at workspace/buffer/src/buffer.rs:299:8: 299:26
        }
    
        bb2: {
            _0 = const {0x0 as *mut src::buffer::buffer_t}; // scope 1 at workspace/buffer/src/buffer.rs:300:16: 300:34
                                             // ty::Const
                                             // + ty: *mut src::buffer::buffer_t
                                             // + val: Value(Scalar(0x0000000000000000))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:300:16: 300:34
                                             // + literal: Const { ty: *mut src::buffer::buffer_t, val: Value(Scalar(0x0000000000000000)) }
            goto -> bb13;                    // scope 1 at no-location
        }
    
        bb3: {
            _12 = _3;                        // scope 1 at workspace/buffer/src/buffer.rs:303:8: 303:10
            _13 = const 0_i64;               // scope 1 at workspace/buffer/src/buffer.rs:303:13: 303:37
            _11 = Lt(move _12, move _13);    // scope 1 at workspace/buffer/src/buffer.rs:303:8: 303:37
            switchInt(move _11) -> [false: bb6, otherwise: bb4]; // scope 1 at workspace/buffer/src/buffer.rs:303:8: 303:37
        }
    
        bb4: {
            _15 = _4;                        // scope 1 at workspace/buffer/src/buffer.rs:304:14: 304:17
            _18 = _3;                        // scope 1 at workspace/buffer/src/buffer.rs:304:32: 304:34
            _17 = Not(move _18);             // scope 1 at workspace/buffer/src/buffer.rs:304:31: 304:34
            _16 = move _17 as u64 (Misc);    // scope 1 at workspace/buffer/src/buffer.rs:304:31: 304:41
            _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> bb5; // scope 1 at workspace/buffer/src/buffer.rs:304:14: 304:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:304:18: 304:30
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _3 = move _14 as i64 (Misc);     // scope 1 at workspace/buffer/src/buffer.rs:304:9: 304:53
            goto -> bb6;                     // scope 1 at workspace/buffer/src/buffer.rs:303:5: 305:6
        }
    
        bb6: {
            _21 = _3;                        // scope 1 at workspace/buffer/src/buffer.rs:307:8: 307:10
            _20 = move _21 as u64 (Misc);    // scope 1 at workspace/buffer/src/buffer.rs:307:8: 307:17
            _22 = _4;                        // scope 1 at workspace/buffer/src/buffer.rs:307:20: 307:23
            _19 = Gt(move _20, move _22);    // scope 1 at workspace/buffer/src/buffer.rs:307:8: 307:23
            switchInt(move _19) -> [false: bb8, otherwise: bb7]; // scope 1 at workspace/buffer/src/buffer.rs:307:8: 307:23
        }
    
        bb7: {
            _23 = _4;                        // scope 1 at workspace/buffer/src/buffer.rs:308:14: 308:17
            _3 = move _23 as i64 (Misc);     // scope 1 at workspace/buffer/src/buffer.rs:308:9: 308:28
            goto -> bb8;                     // scope 1 at workspace/buffer/src/buffer.rs:307:5: 309:6
        }
    
        bb8: {
            _26 = _3;                        // scope 1 at workspace/buffer/src/buffer.rs:310:18: 310:20
            _25 = move _26 as u64 (Misc);    // scope 1 at workspace/buffer/src/buffer.rs:310:17: 310:28
            _27 = _2;                        // scope 1 at workspace/buffer/src/buffer.rs:310:42: 310:46
            _24 = core::num::<impl u64>::wrapping_sub(move _25, move _27) -> bb9; // scope 1 at workspace/buffer/src/buffer.rs:310:17: 310:47
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:310:29: 310:41
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _29 = _24;                       // scope 2 at workspace/buffer/src/buffer.rs:311:43: 311:44
            _28 = src::buffer::buffer_new_with_size(move _29) -> bb10; // scope 2 at workspace/buffer/src/buffer.rs:311:22: 311:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:311:22: 311:42
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::buffer::buffer_t {src::buffer::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _32 = ((*_28).2: *mut i8);       // scope 3 at workspace/buffer/src/buffer.rs:313:9: 313:23
            _31 = move _32 as *mut libc::c_void (Misc); // scope 3 at workspace/buffer/src/buffer.rs:313:9: 313:44
            _35 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:314:9: 314:20
            _37 = _2;                        // scope 3 at workspace/buffer/src/buffer.rs:314:28: 314:32
            _36 = move _37 as isize (Misc);  // scope 3 at workspace/buffer/src/buffer.rs:314:28: 314:41
            _34 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _35, move _36) -> bb11; // scope 3 at workspace/buffer/src/buffer.rs:314:9: 314:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:314:21: 314:27
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _33 = move _34 as *const libc::c_void (Misc); // scope 3 at workspace/buffer/src/buffer.rs:314:9: 314:65
            _38 = _24;                       // scope 3 at workspace/buffer/src/buffer.rs:315:9: 315:10
            _30 = src::buffer::memcpy(move _31, move _33, move _38) -> bb12; // scope 3 at workspace/buffer/src/buffer.rs:312:5: 316:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:312:5: 312:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, *const libc::c_void, u64) -> *mut libc::c_void {src::buffer::memcpy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _0 = _28;                        // scope 3 at workspace/buffer/src/buffer.rs:317:12: 317:18
            goto -> bb13;                    // scope 1 at no-location
        }
    
        bb13: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:318:2: 318:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_equals(_1: *mut src::buffer::buffer_t, _2: *mut src::buffer::buffer_t) -> i32 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:323:40: 323:50
        debug other => _2;                   // in scope 0 at workspace/buffer/src/buffer.rs:323:67: 323:76
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:323:96: 323:99
        let mut _3: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:324:12: 324:63
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:324:13: 324:21
        let mut _5: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:324:25: 324:62
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:324:32: 324:46
        let mut _7: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:324:32: 324:46
        let mut _8: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:324:48: 324:61
        let mut _9: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:324:48: 324:61
    
        bb0: {
            _4 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:324:13: 324:14
            _7 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:324:32: 324:46
            _6 = move _7 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:324:32: 324:46
            _9 = ((*_2).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:324:48: 324:61
            _8 = move _9 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:324:48: 324:61
            _5 = src::buffer::strcmp(move _6, move _8) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:324:25: 324:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:324:25: 324:31
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8) -> i32 {src::buffer::strcmp}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = Eq(move _4, move _5);       // scope 0 at workspace/buffer/src/buffer.rs:324:12: 324:63
            _0 = move _3 as i32 (Misc);      // scope 0 at workspace/buffer/src/buffer.rs:324:12: 324:70
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:325:2: 325:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_indexof(_1: *mut src::buffer::buffer_t, _2: *mut i8) -> i64 {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:331:5: 331:15
        debug str => _2;                     // in scope 0 at workspace/buffer/src/buffer.rs:332:5: 332:12
        let mut _0: i64;                     // return place in scope 0 at workspace/buffer/src/buffer.rs:333:6: 333:13
        let mut _3: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:334:9: 334:16
        let mut _4: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:334:26: 334:40
        let mut _5: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:334:26: 334:40
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:334:42: 334:45
        let mut _7: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:334:42: 334:45
        let mut _8: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:335:8: 335:21
        let mut _9: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:335:8: 335:11
        let mut _10: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:338:12: 338:43
        let mut _11: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:338:12: 338:15
        let mut _12: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:338:28: 338:42
        let mut _13: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:338:28: 338:42
        scope 1 {
            debug sub => _3;                 // in scope 1 at workspace/buffer/src/buffer.rs:334:9: 334:16
        }
    
        bb0: {
            _5 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:334:26: 334:40
            _4 = move _5 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:334:26: 334:40
            _7 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:334:42: 334:45
            _6 = move _7 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/buffer.rs:334:42: 334:45
            _3 = src::buffer::strstr(move _4, move _6) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:334:19: 334:46
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:334:19: 334:25
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8) -> *mut i8 {src::buffer::strstr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _9 = _3;                         // scope 1 at workspace/buffer/src/buffer.rs:335:8: 335:11
            _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> bb2; // scope 1 at workspace/buffer/src/buffer.rs:335:8: 335:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:335:12: 335:19
                                             // + literal: Const { ty: fn(*mut i8) -> bool {std::ptr::mut_ptr::<impl *mut i8>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            switchInt(move _8) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/buffer.rs:335:8: 335:21
        }
    
        bb3: {
            _0 = const -1_i64;               // scope 1 at workspace/buffer/src/buffer.rs:336:16: 336:38
            goto -> bb6;                     // scope 1 at no-location
        }
    
        bb4: {
            _11 = _3;                        // scope 1 at workspace/buffer/src/buffer.rs:338:12: 338:15
            _13 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/buffer.rs:338:28: 338:42
            _12 = move _13 as *const i8 (Pointer(MutToConstPointer)); // scope 1 at workspace/buffer/src/buffer.rs:338:28: 338:42
            _10 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _11, move _12) -> bb5; // scope 1 at workspace/buffer/src/buffer.rs:338:12: 338:43
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:338:16: 338:27
                                             // + literal: Const { ty: unsafe fn(*mut i8, *const i8) -> isize {std::ptr::mut_ptr::<impl *mut i8>::offset_from}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _0 = move _10 as i64 (Misc);     // scope 1 at workspace/buffer/src/buffer.rs:338:12: 338:59
            goto -> bb6;                     // scope 1 at workspace/buffer/src/buffer.rs:338:5: 338:59
        }
    
        bb6: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:339:2: 339:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_trim_left(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:344:43: 344:53
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:344:70: 344:70
        let mut _2: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:345:9: 345:14
        let mut _3: i8;                      // in scope 0 at workspace/buffer/src/buffer.rs:347:13: 347:28
        let mut _4: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:348:12: 351:22
        let mut _5: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:348:13: 351:22
        let mut _6: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:348:14: 348:15
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:349:16: 351:21
        let mut _8: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:349:16: 350:59
        let mut _9: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:349:16: 349:61
        let mut _10: u16;                    // in scope 0 at workspace/buffer/src/buffer.rs:349:16: 349:54
        let mut _11: *const u16;             // in scope 0 at workspace/buffer/src/buffer.rs:349:17: 349:54
        let mut _12: *const u16;             // in scope 0 at workspace/buffer/src/buffer.rs:349:17: 349:35
        let mut _13: *mut *const u16;        // in scope 0 at workspace/buffer/src/buffer.rs:349:19: 349:34
        let mut _14: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:349:43: 349:53
        let mut _15: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:349:43: 349:44
        let mut _16: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:350:19: 350:59
        let mut _17: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:355:26: 355:50
        let mut _18: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:355:26: 355:40
        scope 1 {
            debug c => _2;                   // in scope 1 at workspace/buffer/src/buffer.rs:345:9: 345:14
        }
    
        bb0: {
            _2 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:345:22: 345:23
            goto -> bb1;                     // scope 1 at workspace/buffer/src/buffer.rs:346:5: 356:6
        }
    
        bb1: {
            _3 = (*((*_1).2: *mut i8));      // scope 1 at workspace/buffer/src/buffer.rs:347:13: 347:28
            _2 = move _3 as i32 (Misc);      // scope 1 at workspace/buffer/src/buffer.rs:347:9: 347:35
            _6 = _2;                         // scope 1 at workspace/buffer/src/buffer.rs:348:14: 348:15
            switchInt(move _6) -> [0_i32: bb2, otherwise: bb3]; // scope 1 at workspace/buffer/src/buffer.rs:348:13: 351:22
        }
    
        bb2: {
            _5 = const false;                // scope 1 at workspace/buffer/src/buffer.rs:348:13: 351:22
            goto -> bb4;                     // scope 1 at workspace/buffer/src/buffer.rs:348:13: 351:22
        }
    
        bb3: {
            _13 = src::buffer::__ctype_b_loc() -> bb5; // scope 1 at workspace/buffer/src/buffer.rs:349:19: 349:34
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:349:19: 349:32
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut *const u16 {src::buffer::__ctype_b_loc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _4 = Not(move _5);               // scope 1 at workspace/buffer/src/buffer.rs:348:12: 351:22
            switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 1 at workspace/buffer/src/buffer.rs:348:12: 351:22
        }
    
        bb5: {
            _12 = (*_13);                    // scope 1 at workspace/buffer/src/buffer.rs:349:17: 349:35
            _15 = _2;                        // scope 1 at workspace/buffer/src/buffer.rs:349:43: 349:44
            _14 = move _15 as isize (Misc);  // scope 1 at workspace/buffer/src/buffer.rs:349:43: 349:53
            _11 = std::ptr::const_ptr::<impl *const u16>::offset(move _12, move _14) -> bb6; // scope 1 at workspace/buffer/src/buffer.rs:349:17: 349:54
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:349:36: 349:42
                                             // + literal: Const { ty: unsafe fn(*const u16, isize) -> *const u16 {std::ptr::const_ptr::<impl *const u16>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _10 = (*_11);                    // scope 1 at workspace/buffer/src/buffer.rs:349:16: 349:54
            _9 = move _10 as i32 (Misc);     // scope 1 at workspace/buffer/src/buffer.rs:349:16: 349:61
            _16 = const 8192_i32;            // scope 1 at workspace/buffer/src/buffer.rs:350:19: 350:59
            _8 = BitAnd(move _9, move _16);  // scope 1 at workspace/buffer/src/buffer.rs:349:16: 350:59
            _7 = Ne(move _8, const 0_i32);   // scope 1 at workspace/buffer/src/buffer.rs:349:16: 351:21
            _5 = move _7;                    // scope 1 at workspace/buffer/src/buffer.rs:348:13: 351:22
            goto -> bb4;                     // scope 1 at workspace/buffer/src/buffer.rs:348:13: 351:22
        }
    
        bb7: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:357:2: 357:2
        }
    
        bb8: {
            _18 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/buffer.rs:355:26: 355:40
            _17 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _18, const 1_isize) -> bb9; // scope 1 at workspace/buffer/src/buffer.rs:355:26: 355:50
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:355:41: 355:47
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            ((*_1).2: *mut i8) = move _17;   // scope 1 at workspace/buffer/src/buffer.rs:355:9: 355:50
            goto -> bb1;                     // scope 1 at workspace/buffer/src/buffer.rs:346:5: 356:6
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_trim_right(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:362:44: 362:54
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:362:71: 362:71
        let mut _2: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:363:9: 363:14
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:364:17: 364:38
        let mut _5: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:364:31: 364:37
        let mut _6: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:364:52: 364:67
        let mut _7: i8;                      // in scope 0 at workspace/buffer/src/buffer.rs:366:13: 366:47
        let mut _8: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:366:14: 366:47
        let mut _9: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:366:14: 366:28
        let mut _10: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:366:36: 366:46
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:366:36: 366:37
        let mut _12: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:367:12: 370:22
        let mut _13: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:367:13: 370:22
        let mut _14: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:367:14: 367:15
        let mut _15: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:368:16: 370:21
        let mut _16: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:368:16: 369:59
        let mut _17: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:368:16: 368:61
        let mut _18: u16;                    // in scope 0 at workspace/buffer/src/buffer.rs:368:16: 368:54
        let mut _19: *const u16;             // in scope 0 at workspace/buffer/src/buffer.rs:368:17: 368:54
        let mut _20: *const u16;             // in scope 0 at workspace/buffer/src/buffer.rs:368:17: 368:35
        let mut _21: *mut *const u16;        // in scope 0 at workspace/buffer/src/buffer.rs:368:19: 368:34
        let mut _22: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:368:43: 368:53
        let mut _23: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:368:43: 368:44
        let mut _24: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:369:19: 369:59
        let mut _26: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:375:13: 375:30
        let mut _27: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:375:13: 375:14
        let mut _28: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:376:51: 376:59
        let mut _29: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:376:10: 376:48
        let mut _30: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:376:10: 376:24
        let mut _31: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:376:32: 376:47
        let mut _32: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:376:32: 376:38
        scope 1 {
            debug c => _2;                   // in scope 1 at workspace/buffer/src/buffer.rs:363:9: 363:14
            let mut _3: u64;                 // in scope 1 at workspace/buffer/src/buffer.rs:364:9: 364:14
            scope 2 {
                debug i => _3;               // in scope 2 at workspace/buffer/src/buffer.rs:364:9: 364:14
                let _25: u64;                // in scope 2 at workspace/buffer/src/buffer.rs:374:13: 374:19
                scope 3 {
                    debug fresh0 => _25;     // in scope 3 at workspace/buffer/src/buffer.rs:374:13: 374:19
                }
            }
        }
    
        bb0: {
            _2 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:363:22: 363:23
            _5 = _1;                         // scope 1 at workspace/buffer/src/buffer.rs:364:31: 364:37
            _4 = src::buffer::buffer_length(move _5) -> bb1; // scope 1 at workspace/buffer/src/buffer.rs:364:17: 364:38
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:364:17: 364:30
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) -> u64 {src::buffer::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _6 = const 1_u64;                // scope 1 at workspace/buffer/src/buffer.rs:364:52: 364:67
            _3 = core::num::<impl u64>::wrapping_sub(move _4, move _6) -> bb2; // scope 1 at workspace/buffer/src/buffer.rs:364:17: 364:68
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:364:39: 364:51
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _9 = ((*_1).2: *mut i8);         // scope 2 at workspace/buffer/src/buffer.rs:366:14: 366:28
            _11 = _3;                        // scope 2 at workspace/buffer/src/buffer.rs:366:36: 366:37
            _10 = move _11 as isize (Misc);  // scope 2 at workspace/buffer/src/buffer.rs:366:36: 366:46
            _8 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _9, move _10) -> bb3; // scope 2 at workspace/buffer/src/buffer.rs:366:14: 366:47
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:366:29: 366:35
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _7 = (*_8);                      // scope 2 at workspace/buffer/src/buffer.rs:366:13: 366:47
            _2 = move _7 as i32 (Misc);      // scope 2 at workspace/buffer/src/buffer.rs:366:9: 366:54
            _14 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:367:14: 367:15
            switchInt(move _14) -> [0_i32: bb4, otherwise: bb5]; // scope 2 at workspace/buffer/src/buffer.rs:367:13: 370:22
        }
    
        bb4: {
            _13 = const false;               // scope 2 at workspace/buffer/src/buffer.rs:367:13: 370:22
            goto -> bb6;                     // scope 2 at workspace/buffer/src/buffer.rs:367:13: 370:22
        }
    
        bb5: {
            _21 = src::buffer::__ctype_b_loc() -> bb7; // scope 2 at workspace/buffer/src/buffer.rs:368:19: 368:34
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:368:19: 368:32
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut *const u16 {src::buffer::__ctype_b_loc}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _12 = Not(move _13);             // scope 2 at workspace/buffer/src/buffer.rs:367:12: 370:22
            switchInt(move _12) -> [false: bb10, otherwise: bb9]; // scope 2 at workspace/buffer/src/buffer.rs:367:12: 370:22
        }
    
        bb7: {
            _20 = (*_21);                    // scope 2 at workspace/buffer/src/buffer.rs:368:17: 368:35
            _23 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:368:43: 368:44
            _22 = move _23 as isize (Misc);  // scope 2 at workspace/buffer/src/buffer.rs:368:43: 368:53
            _19 = std::ptr::const_ptr::<impl *const u16>::offset(move _20, move _22) -> bb8; // scope 2 at workspace/buffer/src/buffer.rs:368:17: 368:54
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:368:36: 368:42
                                             // + literal: Const { ty: unsafe fn(*const u16, isize) -> *const u16 {std::ptr::const_ptr::<impl *const u16>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _18 = (*_19);                    // scope 2 at workspace/buffer/src/buffer.rs:368:16: 368:54
            _17 = move _18 as i32 (Misc);    // scope 2 at workspace/buffer/src/buffer.rs:368:16: 368:61
            _24 = const 8192_i32;            // scope 2 at workspace/buffer/src/buffer.rs:369:19: 369:59
            _16 = BitAnd(move _17, move _24); // scope 2 at workspace/buffer/src/buffer.rs:368:16: 369:59
            _15 = Ne(move _16, const 0_i32); // scope 2 at workspace/buffer/src/buffer.rs:368:16: 370:21
            _13 = move _15;                  // scope 2 at workspace/buffer/src/buffer.rs:367:13: 370:22
            goto -> bb6;                     // scope 2 at workspace/buffer/src/buffer.rs:367:13: 370:22
        }
    
        bb9: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:378:2: 378:2
        }
    
        bb10: {
            _25 = _3;                        // scope 2 at workspace/buffer/src/buffer.rs:374:22: 374:23
            _27 = _3;                        // scope 3 at workspace/buffer/src/buffer.rs:375:13: 375:14
            _26 = core::num::<impl u64>::wrapping_sub(move _27, const 1_u64) -> bb11; // scope 3 at workspace/buffer/src/buffer.rs:375:13: 375:30
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:375:15: 375:27
                                             // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::wrapping_sub}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _3 = move _26;                   // scope 3 at workspace/buffer/src/buffer.rs:375:9: 375:30
            _28 = const 0_i32;               // scope 3 at workspace/buffer/src/buffer.rs:376:51: 376:52
            _30 = ((*_1).2: *mut i8);        // scope 3 at workspace/buffer/src/buffer.rs:376:10: 376:24
            _32 = _25;                       // scope 3 at workspace/buffer/src/buffer.rs:376:32: 376:38
            _31 = move _32 as isize (Misc);  // scope 3 at workspace/buffer/src/buffer.rs:376:32: 376:47
            _29 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _30, move _31) -> bb12; // scope 3 at workspace/buffer/src/buffer.rs:376:10: 376:48
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:376:25: 376:31
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            (*_29) = move _28 as i8 (Misc);  // scope 3 at workspace/buffer/src/buffer.rs:376:9: 376:75
            goto -> bb2;                     // scope 2 at workspace/buffer/src/buffer.rs:365:5: 377:6
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_trim(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:383:38: 383:48
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:383:65: 383:65
        let _2: ();                          // in scope 0 at workspace/buffer/src/buffer.rs:384:5: 384:29
        let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:384:22: 384:28
        let _4: ();                          // in scope 0 at workspace/buffer/src/buffer.rs:385:5: 385:30
        let mut _5: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:385:23: 385:29
    
        bb0: {
            _3 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:384:22: 384:28
            _2 = src::buffer::buffer_trim_left(move _3) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:384:5: 384:29
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:384:5: 384:21
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) {src::buffer::buffer_trim_left}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _5 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:385:23: 385:29
            _4 = src::buffer::buffer_trim_right(move _5) -> bb2; // scope 0 at workspace/buffer/src/buffer.rs:385:5: 385:30
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:385:5: 385:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t) {src::buffer::buffer_trim_right}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:386:2: 386:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_fill(_1: *mut src::buffer::buffer_t, _2: i32) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:391:38: 391:48
        debug c => _2;                       // in scope 0 at workspace/buffer/src/buffer.rs:391:65: 391:70
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:391:77: 391:77
        let _3: *mut libc::c_void;           // in scope 0 at workspace/buffer/src/buffer.rs:392:5: 392:66
        let mut _4: *mut libc::c_void;       // in scope 0 at workspace/buffer/src/buffer.rs:392:12: 392:47
        let mut _5: *mut i8;                 // in scope 0 at workspace/buffer/src/buffer.rs:392:12: 392:26
        let mut _6: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:392:49: 392:50
        let mut _7: u64;                     // in scope 0 at workspace/buffer/src/buffer.rs:392:52: 392:65
    
        bb0: {
            _5 = ((*_1).2: *mut i8);         // scope 0 at workspace/buffer/src/buffer.rs:392:12: 392:26
            _4 = move _5 as *mut libc::c_void (Misc); // scope 0 at workspace/buffer/src/buffer.rs:392:12: 392:47
            _6 = _2;                         // scope 0 at workspace/buffer/src/buffer.rs:392:49: 392:50
            _7 = ((*_1).0: u64);             // scope 0 at workspace/buffer/src/buffer.rs:392:52: 392:65
            _3 = src::buffer::memset(move _4, move _6, move _7) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:392:5: 392:66
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:392:5: 392:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut libc::c_void, i32, u64) -> *mut libc::c_void {src::buffer::memset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:393:2: 393:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_clear(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:398:39: 398:49
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:398:66: 398:66
        let _2: ();                          // in scope 0 at workspace/buffer/src/buffer.rs:399:5: 399:34
        let mut _3: *mut src::buffer::buffer_t; // in scope 0 at workspace/buffer/src/buffer.rs:399:17: 399:23
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:399:25: 399:33
    
        bb0: {
            _3 = _1;                         // scope 0 at workspace/buffer/src/buffer.rs:399:17: 399:23
            _4 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:399:25: 399:26
            _2 = src::buffer::buffer_fill(move _3, move _4) -> bb1; // scope 0 at workspace/buffer/src/buffer.rs:399:5: 399:34
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:399:5: 399:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::buffer::buffer_t, i32) {src::buffer::buffer_fill}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:400:2: 400:2
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::buffer::buffer_print(_1: *mut src::buffer::buffer_t) -> () {
        debug self_0 => _1;                  // in scope 0 at workspace/buffer/src/buffer.rs:405:39: 405:49
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/buffer.rs:405:66: 405:66
        let mut _2: i32;                     // in scope 0 at workspace/buffer/src/buffer.rs:406:9: 406:14
        let _4: i32;                         // in scope 0 at workspace/buffer/src/buffer.rs:408:5: 408:59
        let mut _5: *const i8;               // in scope 0 at workspace/buffer/src/buffer.rs:408:12: 408:58
        let mut _6: *const u8;               // in scope 0 at workspace/buffer/src/buffer.rs:408:12: 408:35
        let mut _7: *const [u8; 3];          // in scope 0 at workspace/buffer/src/buffer.rs:408:12: 408:22
        let _8: &[u8; 3];                    // in scope 0 at workspace/buffer/src/buffer.rs:408:12: 408:22
        let mut _9: bool;                    // in scope 0 at workspace/buffer/src/buffer.rs:411:11: 411:27
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:411:11: 411:21
        let mut _11: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:411:12: 411:13
        let mut _12: u64;                    // in scope 0 at workspace/buffer/src/buffer.rs:411:24: 411:27
        let _13: i32;                        // in scope 0 at workspace/buffer/src/buffer.rs:412:9: 415:10
        let mut _14: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:413:13: 413:61
        let mut _15: *const u8;              // in scope 0 at workspace/buffer/src/buffer.rs:413:13: 413:38
        let mut _16: *const [u8; 6];         // in scope 0 at workspace/buffer/src/buffer.rs:413:13: 413:25
        let _17: &[u8; 6];                   // in scope 0 at workspace/buffer/src/buffer.rs:413:13: 413:25
        let mut _18: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:414:13: 414:55
        let mut _19: i8;                     // in scope 0 at workspace/buffer/src/buffer.rs:414:13: 414:48
        let mut _20: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:414:14: 414:48
        let mut _21: *mut i8;                // in scope 0 at workspace/buffer/src/buffer.rs:414:14: 414:29
        let mut _22: isize;                  // in scope 0 at workspace/buffer/src/buffer.rs:414:37: 414:47
        let mut _23: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:414:37: 414:38
        let mut _24: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:49
        let mut _25: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:37
        let mut _26: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:26
        let mut _27: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:13: 416:14
        let mut _28: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:17: 416:25
        let mut _29: (i32, bool);            // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:26
        let mut _30: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:29: 416:37
        let mut _31: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:37
        let mut _32: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:37
        let mut _33: bool;                   // in scope 0 at workspace/buffer/src/buffer.rs:416:12: 416:37
        let mut _34: i32;                    // in scope 0 at workspace/buffer/src/buffer.rs:416:41: 416:49
        let _35: i32;                        // in scope 0 at workspace/buffer/src/buffer.rs:417:13: 417:67
        let mut _36: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:417:20: 417:66
        let mut _37: *const u8;              // in scope 0 at workspace/buffer/src/buffer.rs:417:20: 417:43
        let mut _38: *const [u8; 3];         // in scope 0 at workspace/buffer/src/buffer.rs:417:20: 417:30
        let _39: &[u8; 3];                   // in scope 0 at workspace/buffer/src/buffer.rs:417:20: 417:30
        let mut _40: (i32, bool);            // in scope 0 at workspace/buffer/src/buffer.rs:419:9: 419:15
        let _41: i32;                        // in scope 0 at workspace/buffer/src/buffer.rs:421:5: 421:58
        let mut _42: *const i8;              // in scope 0 at workspace/buffer/src/buffer.rs:421:12: 421:57
        let mut _43: *const u8;              // in scope 0 at workspace/buffer/src/buffer.rs:421:12: 421:34
        let mut _44: *const [u8; 2];         // in scope 0 at workspace/buffer/src/buffer.rs:421:12: 421:21
        let _45: &[u8; 2];                   // in scope 0 at workspace/buffer/src/buffer.rs:421:12: 421:21
        scope 1 {
            debug i => _2;                   // in scope 1 at workspace/buffer/src/buffer.rs:406:9: 406:14
            let mut _3: u64;                 // in scope 1 at workspace/buffer/src/buffer.rs:407:9: 407:16
            scope 2 {
                debug len => _3;             // in scope 2 at workspace/buffer/src/buffer.rs:407:9: 407:16
            }
        }
    
        bb0: {
            _2 = const 0_i32;                // scope 0 at workspace/buffer/src/buffer.rs:406:22: 406:23
            _3 = ((*_1).0: u64);             // scope 1 at workspace/buffer/src/buffer.rs:407:19: 407:32
            _8 = const b"\n \x00";           // scope 2 at workspace/buffer/src/buffer.rs:408:12: 408:22
                                             // ty::Const
                                             // + ty: &[u8; 3]
                                             // + val: Value(Scalar(alloc21))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:408:12: 408:22
                                             // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc21)) }
            _7 = &raw const (*_8);           // scope 2 at workspace/buffer/src/buffer.rs:408:12: 408:22
            _6 = move _7 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/buffer.rs:408:12: 408:35
            _5 = move _6 as *const i8 (Misc); // scope 2 at workspace/buffer/src/buffer.rs:408:12: 408:58
            _4 = src::buffer::printf(move _5) -> bb1; // scope 2 at workspace/buffer/src/buffer.rs:408:5: 408:59
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:408:5: 408:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _2 = const 0_i32;                // scope 2 at workspace/buffer/src/buffer.rs:410:5: 410:17
            goto -> bb2;                     // scope 2 at workspace/buffer/src/buffer.rs:411:5: 420:6
        }
    
        bb2: {
            _11 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:411:12: 411:13
            _10 = move _11 as u64 (Misc);    // scope 2 at workspace/buffer/src/buffer.rs:411:11: 411:21
            _12 = _3;                        // scope 2 at workspace/buffer/src/buffer.rs:411:24: 411:27
            _9 = Lt(move _10, move _12);     // scope 2 at workspace/buffer/src/buffer.rs:411:11: 411:27
            switchInt(move _9) -> [false: bb11, otherwise: bb3]; // scope 2 at workspace/buffer/src/buffer.rs:411:11: 411:27
        }
    
        bb3: {
            _17 = const b" %02x\x00";        // scope 2 at workspace/buffer/src/buffer.rs:413:13: 413:25
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc22))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:413:13: 413:25
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc22)) }
            _16 = &raw const (*_17);         // scope 2 at workspace/buffer/src/buffer.rs:413:13: 413:25
            _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/buffer.rs:413:13: 413:38
            _14 = move _15 as *const i8 (Misc); // scope 2 at workspace/buffer/src/buffer.rs:413:13: 413:61
            _21 = ((*_1).1: *mut i8);        // scope 2 at workspace/buffer/src/buffer.rs:414:14: 414:29
            _23 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:414:37: 414:38
            _22 = move _23 as isize (Misc);  // scope 2 at workspace/buffer/src/buffer.rs:414:37: 414:47
            _20 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _21, move _22) -> bb4; // scope 2 at workspace/buffer/src/buffer.rs:414:14: 414:48
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:414:30: 414:36
                                             // + literal: Const { ty: unsafe fn(*mut i8, isize) -> *mut i8 {std::ptr::mut_ptr::<impl *mut i8>::offset}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _19 = (*_20);                    // scope 2 at workspace/buffer/src/buffer.rs:414:13: 414:48
            _18 = move _19 as i32 (Misc);    // scope 2 at workspace/buffer/src/buffer.rs:414:13: 414:55
            _13 = src::buffer::printf(move _14, move _18) -> bb5; // scope 2 at workspace/buffer/src/buffer.rs:412:9: 415:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:412:9: 412:15
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _27 = _2;                        // scope 2 at workspace/buffer/src/buffer.rs:416:13: 416:14
            _28 = const 1_i32;               // scope 2 at workspace/buffer/src/buffer.rs:416:17: 416:18
            _29 = CheckedAdd(_27, _28);      // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:26
            assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _28) -> bb6; // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:26
        }
    
        bb6: {
            _26 = move (_29.0: i32);         // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:26
            _30 = const 8_i32;               // scope 2 at workspace/buffer/src/buffer.rs:416:29: 416:30
            _31 = const false;               // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:37
            _32 = Eq(_26, const i32::MIN);   // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:37
            _33 = BitAnd(move _31, move _32); // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:37
            assert(!move _33, "attempt to compute the remainder of `{} % {}`, which would overflow", _26, _30) -> bb7; // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:37
        }
    
        bb7: {
            _25 = Rem(move _26, move _30);   // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:37
            _34 = const 0_i32;               // scope 2 at workspace/buffer/src/buffer.rs:416:41: 416:42
            _24 = Eq(move _25, move _34);    // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:49
            switchInt(move _24) -> [false: bb9, otherwise: bb8]; // scope 2 at workspace/buffer/src/buffer.rs:416:12: 416:49
        }
    
        bb8: {
            _39 = const b"\n \x00";          // scope 2 at workspace/buffer/src/buffer.rs:417:20: 417:30
                                             // ty::Const
                                             // + ty: &[u8; 3]
                                             // + val: Value(Scalar(alloc21))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:417:20: 417:30
                                             // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc21)) }
            _38 = &raw const (*_39);         // scope 2 at workspace/buffer/src/buffer.rs:417:20: 417:30
            _37 = move _38 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/buffer.rs:417:20: 417:43
            _36 = move _37 as *const i8 (Misc); // scope 2 at workspace/buffer/src/buffer.rs:417:20: 417:66
            _35 = src::buffer::printf(move _36) -> bb9; // scope 2 at workspace/buffer/src/buffer.rs:417:13: 417:67
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:417:13: 417:19
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _40 = CheckedAdd(_2, const 1_i32); // scope 2 at workspace/buffer/src/buffer.rs:419:9: 419:15
            assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb10; // scope 2 at workspace/buffer/src/buffer.rs:419:9: 419:15
        }
    
        bb10: {
            _2 = move (_40.0: i32);          // scope 2 at workspace/buffer/src/buffer.rs:419:9: 419:15
            goto -> bb2;                     // scope 2 at workspace/buffer/src/buffer.rs:411:5: 420:6
        }
    
        bb11: {
            _45 = const b"\n\x00";           // scope 2 at workspace/buffer/src/buffer.rs:421:12: 421:21
                                             // ty::Const
                                             // + ty: &[u8; 2]
                                             // + val: Value(Scalar(alloc23))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:421:12: 421:21
                                             // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc23)) }
            _44 = &raw const (*_45);         // scope 2 at workspace/buffer/src/buffer.rs:421:12: 421:21
            _43 = move _44 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/buffer.rs:421:12: 421:34
            _42 = move _43 as *const i8 (Misc); // scope 2 at workspace/buffer/src/buffer.rs:421:12: 421:57
            _41 = src::buffer::printf(move _42) -> bb12; // scope 2 at workspace/buffer/src/buffer.rs:421:5: 421:58
                                             // mir::Constant
                                             // + span: workspace/buffer/src/buffer.rs:421:5: 421:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::buffer::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/buffer.rs:422:2: 422:2
        }
    }
    
    alloc23 (size: 2, align: 1) {
        0a 00                                           │ ..
    }
    
    alloc22 (size: 6, align: 1) {
        20 25 30 32 78 00                               │  %02x.
    }
    
    alloc21 (size: 3, align: 1) {
        0a 20 00                                        │ . .
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::equal(_1: *mut i8, _2: *mut i8) -> () {
        debug a => _1;                       // in scope 0 at workspace/buffer/src/test.rs:73:32: 73:37
        debug b => _2;                       // in scope 0 at workspace/buffer/src/test.rs:73:58: 73:63
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:73:84: 73:84
        let mut _3: i32;                     // in scope 0 at workspace/buffer/src/test.rs:74:8: 74:20
        let mut _4: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:74:15: 74:16
        let mut _5: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:74:15: 74:16
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:74:18: 74:19
        let mut _7: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:74:18: 74:19
        let _8: i32;                         // in scope 0 at workspace/buffer/src/test.rs:75:9: 75:62
        let mut _9: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:75:16: 75:61
        let mut _10: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:75:16: 75:38
        let mut _11: *const [u8; 2];         // in scope 0 at workspace/buffer/src/test.rs:75:16: 75:25
        let _12: &[u8; 2];                   // in scope 0 at workspace/buffer/src/test.rs:75:16: 75:25
        let _13: i32;                        // in scope 0 at workspace/buffer/src/test.rs:76:9: 79:10
        let mut _14: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:77:13: 77:76
        let mut _15: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:77:13: 77:53
        let mut _16: *const [u8; 18];        // in scope 0 at workspace/buffer/src/test.rs:77:13: 77:40
        let _17: &[u8; 18];                  // in scope 0 at workspace/buffer/src/test.rs:77:13: 77:40
        let mut _18: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:78:13: 78:14
        let _19: i32;                        // in scope 0 at workspace/buffer/src/test.rs:80:9: 83:10
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:81:13: 81:76
        let mut _21: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:81:13: 81:53
        let mut _22: *const [u8; 18];        // in scope 0 at workspace/buffer/src/test.rs:81:13: 81:40
        let _23: &[u8; 18];                  // in scope 0 at workspace/buffer/src/test.rs:81:13: 81:40
        let mut _24: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:82:13: 82:14
        let _25: i32;                        // in scope 0 at workspace/buffer/src/test.rs:84:9: 84:62
        let mut _26: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:84:16: 84:61
        let mut _27: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:84:16: 84:38
        let mut _28: *const [u8; 2];         // in scope 0 at workspace/buffer/src/test.rs:84:16: 84:25
        let _29: &[u8; 2];                   // in scope 0 at workspace/buffer/src/test.rs:84:16: 84:25
        let mut _30: i32;                    // in scope 0 at workspace/buffer/src/test.rs:85:14: 85:22
    
        bb0: {
            _5 = _1;                         // scope 0 at workspace/buffer/src/test.rs:74:15: 74:16
            _4 = move _5 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/test.rs:74:15: 74:16
            _7 = _2;                         // scope 0 at workspace/buffer/src/test.rs:74:18: 74:19
            _6 = move _7 as *const i8 (Pointer(MutToConstPointer)); // scope 0 at workspace/buffer/src/test.rs:74:18: 74:19
            _3 = src::test::strcmp(move _4, move _6) -> bb1; // scope 0 at workspace/buffer/src/test.rs:74:8: 74:20
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:74:8: 74:14
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8) -> i32 {src::test::strcmp}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            switchInt(move _3) -> [0_i32: bb7, otherwise: bb2]; // scope 0 at workspace/buffer/src/test.rs:74:8: 74:25
        }
    
        bb2: {
            _12 = const b"\n\x00";           // scope 0 at workspace/buffer/src/test.rs:75:16: 75:25
                                             // ty::Const
                                             // + ty: &[u8; 2]
                                             // + val: Value(Scalar(alloc23))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:75:16: 75:25
                                             // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc23)) }
            _11 = &raw const (*_12);         // scope 0 at workspace/buffer/src/test.rs:75:16: 75:25
            _10 = move _11 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:75:16: 75:38
            _9 = move _10 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:75:16: 75:61
            _8 = src::test::printf(move _9) -> bb3; // scope 0 at workspace/buffer/src/test.rs:75:9: 75:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:75:9: 75:15
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::test::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _17 = const b"  expected: \'%s\'\n\x00"; // scope 0 at workspace/buffer/src/test.rs:77:13: 77:40
                                             // ty::Const
                                             // + ty: &[u8; 18]
                                             // + val: Value(Scalar(alloc24))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:77:13: 77:40
                                             // + literal: Const { ty: &[u8; 18], val: Value(Scalar(alloc24)) }
            _16 = &raw const (*_17);         // scope 0 at workspace/buffer/src/test.rs:77:13: 77:40
            _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:77:13: 77:53
            _14 = move _15 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:77:13: 77:76
            _18 = _1;                        // scope 0 at workspace/buffer/src/test.rs:78:13: 78:14
            _13 = src::test::printf(move _14, move _18) -> bb4; // scope 0 at workspace/buffer/src/test.rs:76:9: 79:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:76:9: 76:15
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::test::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _23 = const b"    actual: \'%s\'\n\x00"; // scope 0 at workspace/buffer/src/test.rs:81:13: 81:40
                                             // ty::Const
                                             // + ty: &[u8; 18]
                                             // + val: Value(Scalar(alloc25))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:81:13: 81:40
                                             // + literal: Const { ty: &[u8; 18], val: Value(Scalar(alloc25)) }
            _22 = &raw const (*_23);         // scope 0 at workspace/buffer/src/test.rs:81:13: 81:40
            _21 = move _22 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:81:13: 81:53
            _20 = move _21 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:81:13: 81:76
            _24 = _2;                        // scope 0 at workspace/buffer/src/test.rs:82:13: 82:14
            _19 = src::test::printf(move _20, move _24) -> bb5; // scope 0 at workspace/buffer/src/test.rs:80:9: 83:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:80:9: 80:15
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::test::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _29 = const b"\n\x00";           // scope 0 at workspace/buffer/src/test.rs:84:16: 84:25
                                             // ty::Const
                                             // + ty: &[u8; 2]
                                             // + val: Value(Scalar(alloc23))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:84:16: 84:25
                                             // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc23)) }
            _28 = &raw const (*_29);         // scope 0 at workspace/buffer/src/test.rs:84:16: 84:25
            _27 = move _28 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:84:16: 84:38
            _26 = move _27 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:84:16: 84:61
            _25 = src::test::printf(move _26) -> bb6; // scope 0 at workspace/buffer/src/test.rs:84:9: 84:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:84:9: 84:15
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::test::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _30 = const 1_i32;               // scope 0 at workspace/buffer/src/test.rs:85:14: 85:15
            src::test::exit(move _30);       // scope 0 at workspace/buffer/src/test.rs:85:9: 85:23
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:85:9: 85:13
                                             // + literal: Const { ty: unsafe extern "C" fn(i32) -> ! {src::test::exit}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:87:2: 87:2
        }
    }
    
    alloc25 (size: 18, align: 1) {
        0x00 │ 20 20 20 20 61 63 74 75 61 6c 3a 20 27 25 73 27 │     actual: '%s'
        0x10 │ 0a 00                                           │ ..
    }
    
    alloc24 (size: 18, align: 1) {
        0x00 │ 20 20 65 78 70 65 63 74 65 64 3a 20 27 25 73 27 │   expected: '%s'
        0x10 │ 0a 00                                           │ ..
    }
    
    alloc23 (size: 2, align: 1) {
        0a 00                                           │ ..
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_new() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:89:44: 89:44
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:90:9: 90:16
        let mut _2: bool;                    // in scope 0 at workspace/buffer/src/test.rs:91:8: 91:44
        let mut _3: u64;                     // in scope 0 at workspace/buffer/src/test.rs:91:8: 91:24
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/test.rs:91:28: 91:44
        let mut _5: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:91:40: 91:43
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:94:13: 94:95
        let mut _7: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:94:13: 94:72
        let mut _8: *const [u8; 40];         // in scope 0 at workspace/buffer/src/test.rs:94:13: 94:59
        let _9: &[u8; 40];                   // in scope 0 at workspace/buffer/src/test.rs:94:13: 94:59
        let mut _10: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:95:13: 95:62
        let mut _11: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:95:13: 95:39
        let mut _12: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:95:13: 95:26
        let _13: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:95:13: 95:26
        let mut _14: u32;                    // in scope 0 at workspace/buffer/src/test.rs:96:13: 96:38
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:97:13: 100:22
        let mut _16: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:97:13: 100:22
        let mut _17: &[i8; 23];              // in scope 0 at workspace/buffer/src/test.rs:97:13: 100:22
        let _18: &[i8; 23];                  // in scope 0 at workspace/buffer/src/test.rs:97:15: 99:14
        let mut _19: &[u8; 23];              // in scope 0 at workspace/buffer/src/test.rs:98:17: 98:46
        let _20: &[u8; 23];                  // in scope 0 at workspace/buffer/src/test.rs:98:17: 98:46
        let mut _21: bool;                   // in scope 0 at workspace/buffer/src/test.rs:103:8: 103:45
        let mut _22: u64;                    // in scope 0 at workspace/buffer/src/test.rs:103:8: 103:23
        let mut _23: u64;                    // in scope 0 at workspace/buffer/src/test.rs:103:27: 103:45
        let mut _24: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:103:41: 103:44
        let mut _25: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:106:13: 106:79
        let mut _26: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:106:13: 106:56
        let mut _27: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:106:13: 106:43
        let _28: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:106:13: 106:43
        let mut _29: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:107:13: 107:62
        let mut _30: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:107:13: 107:39
        let mut _31: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:107:13: 107:26
        let _32: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:107:13: 107:26
        let mut _33: u32;                    // in scope 0 at workspace/buffer/src/test.rs:108:13: 108:38
        let mut _34: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:109:13: 112:22
        let mut _35: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:109:13: 112:22
        let mut _36: &[i8; 23];              // in scope 0 at workspace/buffer/src/test.rs:109:13: 112:22
        let _37: &[i8; 23];                  // in scope 0 at workspace/buffer/src/test.rs:109:15: 111:14
        let mut _38: &[u8; 23];              // in scope 0 at workspace/buffer/src/test.rs:110:17: 110:46
        let _39: &[u8; 23];                  // in scope 0 at workspace/buffer/src/test.rs:110:17: 110:46
        let _40: ();                         // in scope 0 at workspace/buffer/src/test.rs:115:5: 115:21
        let mut _41: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:115:17: 115:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:90:9: 90:16
        }
    
        bb0: {
            _1 = src::test::buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:90:19: 90:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:90:19: 90:29
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut src::test::buffer_t {src::test::buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = const 64_u64;               // scope 1 at workspace/buffer/src/test.rs:91:8: 91:24
            _5 = _1;                         // scope 1 at workspace/buffer/src/test.rs:91:40: 91:43
            _4 = src::test::buffer_size(move _5) -> bb2; // scope 1 at workspace/buffer/src/test.rs:91:28: 91:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:91:28: 91:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _2 = Eq(move _3, move _4);       // scope 1 at workspace/buffer/src/test.rs:91:8: 91:44
            switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:91:8: 91:44
        }
    
        bb3: {
            _22 = const 0_u64;               // scope 1 at workspace/buffer/src/test.rs:103:8: 103:23
            _24 = _1;                        // scope 1 at workspace/buffer/src/test.rs:103:41: 103:44
            _23 = src::test::buffer_length(move _24) -> bb7; // scope 1 at workspace/buffer/src/test.rs:103:27: 103:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:103:27: 103:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _9 = const b"BUFFER_DEFAULT_SIZE == buffer_size(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:94:13: 94:59
                                             // ty::Const
                                             // + ty: &[u8; 40]
                                             // + val: Value(Scalar(alloc26))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:94:13: 94:59
                                             // + literal: Const { ty: &[u8; 40], val: Value(Scalar(alloc26)) }
            _8 = &raw const (*_9);           // scope 1 at workspace/buffer/src/test.rs:94:13: 94:59
            _7 = move _8 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:94:13: 94:72
            _6 = move _7 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:94:13: 94:95
            _13 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:95:13: 95:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:95:13: 95:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _12 = &raw const (*_13);         // scope 1 at workspace/buffer/src/test.rs:95:13: 95:26
            _11 = move _12 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:95:13: 95:39
            _10 = move _11 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:95:13: 95:62
            _14 = const 28_u32;              // scope 1 at workspace/buffer/src/test.rs:96:13: 96:38
            _20 = const b"void test_buffer_new()\x00"; // scope 1 at workspace/buffer/src/test.rs:98:17: 98:46
                                             // ty::Const
                                             // + ty: &[u8; 23]
                                             // + val: Value(Scalar(alloc28))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:98:17: 98:46
                                             // + literal: Const { ty: &[u8; 23], val: Value(Scalar(alloc28)) }
            _19 = _20;                       // scope 1 at workspace/buffer/src/test.rs:98:17: 98:46
            _18 = std::intrinsics::transmute::<&[u8; 23], &[i8; 23]>(move _19) -> bb5; // scope 1 at workspace/buffer/src/test.rs:97:15: 99:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:97:15: 97:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 23]) -> &[i8; 23] {std::intrinsics::transmute::<&[u8; 23], &[i8; 23]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _17 = _18;                       // scope 1 at workspace/buffer/src/test.rs:97:13: 100:22
            _16 = move _17 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:97:13: 100:22
            _15 = core::slice::<impl [i8]>::as_ptr(move _16) -> bb6; // scope 1 at workspace/buffer/src/test.rs:97:13: 100:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:100:14: 100:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _6, move _10, move _14, move _15); // scope 1 at workspace/buffer/src/test.rs:93:9: 101:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:93:9: 93:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _21 = Eq(move _22, move _23);    // scope 1 at workspace/buffer/src/test.rs:103:8: 103:45
            switchInt(move _21) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:103:8: 103:45
        }
    
        bb8: {
            _41 = _1;                        // scope 1 at workspace/buffer/src/test.rs:115:17: 115:20
            _40 = src::test::buffer_free(move _41) -> bb12; // scope 1 at workspace/buffer/src/test.rs:115:5: 115:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:115:5: 115:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _28 = const b"0 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:106:13: 106:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc29))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:106:13: 106:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc29)) }
            _27 = &raw const (*_28);         // scope 1 at workspace/buffer/src/test.rs:106:13: 106:43
            _26 = move _27 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:106:13: 106:56
            _25 = move _26 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:106:13: 106:79
            _32 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:107:13: 107:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:107:13: 107:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _31 = &raw const (*_32);         // scope 1 at workspace/buffer/src/test.rs:107:13: 107:26
            _30 = move _31 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:107:13: 107:39
            _29 = move _30 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:107:13: 107:62
            _33 = const 29_u32;              // scope 1 at workspace/buffer/src/test.rs:108:13: 108:38
            _39 = const b"void test_buffer_new()\x00"; // scope 1 at workspace/buffer/src/test.rs:110:17: 110:46
                                             // ty::Const
                                             // + ty: &[u8; 23]
                                             // + val: Value(Scalar(alloc28))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:110:17: 110:46
                                             // + literal: Const { ty: &[u8; 23], val: Value(Scalar(alloc28)) }
            _38 = _39;                       // scope 1 at workspace/buffer/src/test.rs:110:17: 110:46
            _37 = std::intrinsics::transmute::<&[u8; 23], &[i8; 23]>(move _38) -> bb10; // scope 1 at workspace/buffer/src/test.rs:109:15: 111:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:109:15: 109:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 23]) -> &[i8; 23] {std::intrinsics::transmute::<&[u8; 23], &[i8; 23]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _36 = _37;                       // scope 1 at workspace/buffer/src/test.rs:109:13: 112:22
            _35 = move _36 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:109:13: 112:22
            _34 = core::slice::<impl [i8]>::as_ptr(move _35) -> bb11; // scope 1 at workspace/buffer/src/test.rs:109:13: 112:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:112:14: 112:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _25, move _29, move _33, move _34); // scope 1 at workspace/buffer/src/test.rs:105:9: 113:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:105:9: 105:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:116:2: 116:2
        }
    }
    
    alloc29 (size: 24, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 0 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc28 (size: 23, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 6e 65 77 28 29 00                            │ _new().
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
    alloc26 (size: 40, align: 1) {
        0x00 │ 42 55 46 46 45 52 5f 44 45 46 41 55 4c 54 5f 53 │ BUFFER_DEFAULT_S
        0x10 │ 49 5a 45 20 3d 3d 20 62 75 66 66 65 72 5f 73 69 │ IZE == buffer_si
        0x20 │ 7a 65 28 62 75 66 29 00                         │ ze(buf).
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_new_with_size() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:118:54: 118:54
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:119:9: 119:16
        let mut _2: u64;                     // in scope 0 at workspace/buffer/src/test.rs:119:40: 119:61
        let mut _3: bool;                    // in scope 0 at workspace/buffer/src/test.rs:120:8: 120:46
        let mut _4: u64;                     // in scope 0 at workspace/buffer/src/test.rs:120:8: 120:26
        let mut _5: u64;                     // in scope 0 at workspace/buffer/src/test.rs:120:30: 120:46
        let mut _6: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:120:42: 120:45
        let mut _7: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:123:13: 123:80
        let mut _8: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:123:13: 123:57
        let mut _9: *const [u8; 25];         // in scope 0 at workspace/buffer/src/test.rs:123:13: 123:44
        let _10: &[u8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:123:13: 123:44
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:124:13: 124:62
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:124:13: 124:39
        let mut _13: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:124:13: 124:26
        let _14: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:124:13: 124:26
        let mut _15: u32;                    // in scope 0 at workspace/buffer/src/test.rs:125:13: 125:38
        let mut _16: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:126:13: 129:22
        let mut _17: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:126:13: 129:22
        let mut _18: &[i8; 33];              // in scope 0 at workspace/buffer/src/test.rs:126:13: 129:22
        let _19: &[i8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:126:15: 128:14
        let mut _20: &[u8; 33];              // in scope 0 at workspace/buffer/src/test.rs:127:17: 127:56
        let _21: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:127:17: 127:56
        let mut _22: bool;                   // in scope 0 at workspace/buffer/src/test.rs:132:8: 132:45
        let mut _23: u64;                    // in scope 0 at workspace/buffer/src/test.rs:132:8: 132:23
        let mut _24: u64;                    // in scope 0 at workspace/buffer/src/test.rs:132:27: 132:45
        let mut _25: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:132:41: 132:44
        let mut _26: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:135:13: 135:79
        let mut _27: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:135:13: 135:56
        let mut _28: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:135:13: 135:43
        let _29: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:135:13: 135:43
        let mut _30: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:136:13: 136:62
        let mut _31: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:136:13: 136:39
        let mut _32: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:136:13: 136:26
        let _33: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:136:13: 136:26
        let mut _34: u32;                    // in scope 0 at workspace/buffer/src/test.rs:137:13: 137:38
        let mut _35: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:138:13: 141:22
        let mut _36: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:138:13: 141:22
        let mut _37: &[i8; 33];              // in scope 0 at workspace/buffer/src/test.rs:138:13: 141:22
        let _38: &[i8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:138:15: 140:14
        let mut _39: &[u8; 33];              // in scope 0 at workspace/buffer/src/test.rs:139:17: 139:56
        let _40: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:139:17: 139:56
        let _41: ();                         // in scope 0 at workspace/buffer/src/test.rs:144:5: 144:21
        let mut _42: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:144:17: 144:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:119:9: 119:16
        }
    
        bb0: {
            _2 = const 1024_u64;             // scope 0 at workspace/buffer/src/test.rs:119:40: 119:61
            _1 = src::test::buffer_new_with_size(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:119:19: 119:62
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:119:19: 119:39
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::test::buffer_t {src::test::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _4 = const 1024_u64;             // scope 1 at workspace/buffer/src/test.rs:120:8: 120:26
            _6 = _1;                         // scope 1 at workspace/buffer/src/test.rs:120:42: 120:45
            _5 = src::test::buffer_size(move _6) -> bb2; // scope 1 at workspace/buffer/src/test.rs:120:30: 120:46
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:120:30: 120:41
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _3 = Eq(move _4, move _5);       // scope 1 at workspace/buffer/src/test.rs:120:8: 120:46
            switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:120:8: 120:46
        }
    
        bb3: {
            _23 = const 0_u64;               // scope 1 at workspace/buffer/src/test.rs:132:8: 132:23
            _25 = _1;                        // scope 1 at workspace/buffer/src/test.rs:132:41: 132:44
            _24 = src::test::buffer_length(move _25) -> bb7; // scope 1 at workspace/buffer/src/test.rs:132:27: 132:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:132:27: 132:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _10 = const b"1024 == buffer_size(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:123:13: 123:44
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc30))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:123:13: 123:44
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc30)) }
            _9 = &raw const (*_10);          // scope 1 at workspace/buffer/src/test.rs:123:13: 123:44
            _8 = move _9 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:123:13: 123:57
            _7 = move _8 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:123:13: 123:80
            _14 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:124:13: 124:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:124:13: 124:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:124:13: 124:26
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:124:13: 124:39
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:124:13: 124:62
            _15 = const 36_u32;              // scope 1 at workspace/buffer/src/test.rs:125:13: 125:38
            _21 = const b"void test_buffer_new_with_size()\x00"; // scope 1 at workspace/buffer/src/test.rs:127:17: 127:56
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc31))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:127:17: 127:56
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc31)) }
            _20 = _21;                       // scope 1 at workspace/buffer/src/test.rs:127:17: 127:56
            _19 = std::intrinsics::transmute::<&[u8; 33], &[i8; 33]>(move _20) -> bb5; // scope 1 at workspace/buffer/src/test.rs:126:15: 128:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:126:15: 126:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 33]) -> &[i8; 33] {std::intrinsics::transmute::<&[u8; 33], &[i8; 33]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _18 = _19;                       // scope 1 at workspace/buffer/src/test.rs:126:13: 129:22
            _17 = move _18 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:126:13: 129:22
            _16 = core::slice::<impl [i8]>::as_ptr(move _17) -> bb6; // scope 1 at workspace/buffer/src/test.rs:126:13: 129:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:129:14: 129:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _7, move _11, move _15, move _16); // scope 1 at workspace/buffer/src/test.rs:122:9: 130:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:122:9: 122:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _22 = Eq(move _23, move _24);    // scope 1 at workspace/buffer/src/test.rs:132:8: 132:45
            switchInt(move _22) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:132:8: 132:45
        }
    
        bb8: {
            _42 = _1;                        // scope 1 at workspace/buffer/src/test.rs:144:17: 144:20
            _41 = src::test::buffer_free(move _42) -> bb12; // scope 1 at workspace/buffer/src/test.rs:144:5: 144:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:144:5: 144:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _29 = const b"0 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:135:13: 135:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc29))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:135:13: 135:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc29)) }
            _28 = &raw const (*_29);         // scope 1 at workspace/buffer/src/test.rs:135:13: 135:43
            _27 = move _28 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:135:13: 135:56
            _26 = move _27 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:135:13: 135:79
            _33 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:136:13: 136:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:136:13: 136:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _32 = &raw const (*_33);         // scope 1 at workspace/buffer/src/test.rs:136:13: 136:26
            _31 = move _32 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:136:13: 136:39
            _30 = move _31 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:136:13: 136:62
            _34 = const 37_u32;              // scope 1 at workspace/buffer/src/test.rs:137:13: 137:38
            _40 = const b"void test_buffer_new_with_size()\x00"; // scope 1 at workspace/buffer/src/test.rs:139:17: 139:56
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc31))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:139:17: 139:56
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc31)) }
            _39 = _40;                       // scope 1 at workspace/buffer/src/test.rs:139:17: 139:56
            _38 = std::intrinsics::transmute::<&[u8; 33], &[i8; 33]>(move _39) -> bb10; // scope 1 at workspace/buffer/src/test.rs:138:15: 140:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:138:15: 138:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 33]) -> &[i8; 33] {std::intrinsics::transmute::<&[u8; 33], &[i8; 33]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _37 = _38;                       // scope 1 at workspace/buffer/src/test.rs:138:13: 141:22
            _36 = move _37 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:138:13: 141:22
            _35 = core::slice::<impl [i8]>::as_ptr(move _36) -> bb11; // scope 1 at workspace/buffer/src/test.rs:138:13: 141:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:141:14: 141:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _26, move _30, move _34, move _35); // scope 1 at workspace/buffer/src/test.rs:134:9: 142:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:134:9: 134:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:145:2: 145:2
        }
    }
    
    alloc31 (size: 33, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 6e 65 77 5f 77 69 74 68 5f 73 69 7a 65 28 29 │ _new_with_size()
        0x20 │ 00                                              │ .
    }
    
    alloc30 (size: 25, align: 1) {
        0x00 │ 31 30 32 34 20 3d 3d 20 62 75 66 66 65 72 5f 73 │ 1024 == buffer_s
        0x10 │ 69 7a 65 28 62 75 66 29 00                      │ ize(buf).
    }
    
    alloc29 (size: 24, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 0 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_append() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:147:47: 147:47
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:148:9: 148:16
        let mut _2: bool;                    // in scope 0 at workspace/buffer/src/test.rs:149:8: 149:88
        let mut _3: i32;                     // in scope 0 at workspace/buffer/src/test.rs:149:8: 149:16
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/test.rs:149:20: 149:88
        let mut _5: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:149:34: 149:37
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:149:39: 149:87
        let mut _7: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:149:39: 149:64
        let mut _8: *const [u8; 6];          // in scope 0 at workspace/buffer/src/test.rs:149:39: 149:51
        let _9: &[u8; 6];                    // in scope 0 at workspace/buffer/src/test.rs:149:39: 149:51
        let mut _10: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:152:13: 152:90
        let mut _11: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:152:13: 152:67
        let mut _12: *const [u8; 33];        // in scope 0 at workspace/buffer/src/test.rs:152:13: 152:54
        let _13: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:152:13: 152:54
        let mut _14: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:153:13: 153:62
        let mut _15: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:153:13: 153:39
        let mut _16: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:153:13: 153:26
        let _17: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:153:13: 153:26
        let mut _18: u32;                    // in scope 0 at workspace/buffer/src/test.rs:154:13: 154:38
        let mut _19: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:155:13: 158:22
        let mut _20: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:155:13: 158:22
        let mut _21: &[i8; 26];              // in scope 0 at workspace/buffer/src/test.rs:155:13: 158:22
        let _22: &[i8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:155:15: 157:14
        let mut _23: &[u8; 26];              // in scope 0 at workspace/buffer/src/test.rs:156:17: 156:49
        let _24: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:156:17: 156:49
        let mut _25: bool;                   // in scope 0 at workspace/buffer/src/test.rs:161:8: 161:89
        let mut _26: i32;                    // in scope 0 at workspace/buffer/src/test.rs:161:8: 161:16
        let mut _27: i32;                    // in scope 0 at workspace/buffer/src/test.rs:161:20: 161:89
        let mut _28: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:161:34: 161:37
        let mut _29: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:161:39: 161:88
        let mut _30: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:161:39: 161:65
        let mut _31: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:161:39: 161:52
        let _32: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:161:39: 161:52
        let mut _33: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:164:13: 164:91
        let mut _34: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:164:13: 164:68
        let mut _35: *const [u8; 34];        // in scope 0 at workspace/buffer/src/test.rs:164:13: 164:55
        let _36: &[u8; 34];                  // in scope 0 at workspace/buffer/src/test.rs:164:13: 164:55
        let mut _37: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:165:13: 165:62
        let mut _38: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:165:13: 165:39
        let mut _39: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:165:13: 165:26
        let _40: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:165:13: 165:26
        let mut _41: u32;                    // in scope 0 at workspace/buffer/src/test.rs:166:13: 166:38
        let mut _42: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:167:13: 170:22
        let mut _43: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:167:13: 170:22
        let mut _44: &[i8; 26];              // in scope 0 at workspace/buffer/src/test.rs:167:13: 170:22
        let _45: &[i8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:167:15: 169:14
        let mut _46: &[u8; 26];              // in scope 0 at workspace/buffer/src/test.rs:168:17: 168:49
        let _47: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:168:17: 168:49
        let mut _48: bool;                   // in scope 0 at workspace/buffer/src/test.rs:173:8: 173:92
        let mut _49: u64;                    // in scope 0 at workspace/buffer/src/test.rs:173:8: 173:70
        let mut _50: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:173:15: 173:69
        let mut _51: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:173:15: 173:46
        let mut _52: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:173:15: 173:33
        let _53: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:173:15: 173:33
        let mut _54: u64;                    // in scope 0 at workspace/buffer/src/test.rs:173:74: 173:92
        let mut _55: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:173:88: 173:91
        let mut _56: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:176:13: 177:39
        let mut _57: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:176:13: 176:78
        let mut _58: *const [u8; 44];        // in scope 0 at workspace/buffer/src/test.rs:176:13: 176:65
        let _59: &[u8; 44];                  // in scope 0 at workspace/buffer/src/test.rs:176:13: 176:65
        let mut _60: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:178:13: 178:62
        let mut _61: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:178:13: 178:39
        let mut _62: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:178:13: 178:26
        let _63: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:178:13: 178:26
        let mut _64: u32;                    // in scope 0 at workspace/buffer/src/test.rs:179:13: 179:38
        let mut _65: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:180:13: 183:22
        let mut _66: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:180:13: 183:22
        let mut _67: &[i8; 26];              // in scope 0 at workspace/buffer/src/test.rs:180:13: 183:22
        let _68: &[i8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:180:15: 182:14
        let mut _69: &[u8; 26];              // in scope 0 at workspace/buffer/src/test.rs:181:17: 181:49
        let _70: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:181:17: 181:49
        let _71: ();                         // in scope 0 at workspace/buffer/src/test.rs:186:5: 189:6
        let mut _72: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:187:9: 187:84
        let mut _73: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:187:9: 187:63
        let mut _74: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:187:9: 187:40
        let mut _75: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:187:9: 187:27
        let _76: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:187:9: 187:27
        let mut _77: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:188:9: 188:20
        let _78: ();                         // in scope 0 at workspace/buffer/src/test.rs:190:5: 190:21
        let mut _79: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:190:17: 190:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:148:9: 148:16
        }
    
        bb0: {
            _1 = src::test::buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:148:19: 148:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:148:19: 148:29
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut src::test::buffer_t {src::test::buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = const 0_i32;                // scope 1 at workspace/buffer/src/test.rs:149:8: 149:9
            _5 = _1;                         // scope 1 at workspace/buffer/src/test.rs:149:34: 149:37
            _9 = const b"Hello\x00";         // scope 1 at workspace/buffer/src/test.rs:149:39: 149:51
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:149:39: 149:51
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _8 = &raw const (*_9);           // scope 1 at workspace/buffer/src/test.rs:149:39: 149:51
            _7 = move _8 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:149:39: 149:64
            _6 = move _7 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:149:39: 149:87
            _4 = src::test::buffer_append(move _5, move _6) -> bb2; // scope 1 at workspace/buffer/src/test.rs:149:20: 149:88
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:149:20: 149:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _2 = Eq(move _3, move _4);       // scope 1 at workspace/buffer/src/test.rs:149:8: 149:88
            switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:149:8: 149:88
        }
    
        bb3: {
            _26 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:161:8: 161:9
            _28 = _1;                        // scope 1 at workspace/buffer/src/test.rs:161:34: 161:37
            _32 = const b" World\x00";       // scope 1 at workspace/buffer/src/test.rs:161:39: 161:52
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc35))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:161:39: 161:52
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc35)) }
            _31 = &raw const (*_32);         // scope 1 at workspace/buffer/src/test.rs:161:39: 161:52
            _30 = move _31 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:161:39: 161:65
            _29 = move _30 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:161:39: 161:88
            _27 = src::test::buffer_append(move _28, move _29) -> bb7; // scope 1 at workspace/buffer/src/test.rs:161:20: 161:89
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:161:20: 161:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _13 = const b"0 == buffer_append(buf, \"Hello\")\x00"; // scope 1 at workspace/buffer/src/test.rs:152:13: 152:54
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc33))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:152:13: 152:54
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc33)) }
            _12 = &raw const (*_13);         // scope 1 at workspace/buffer/src/test.rs:152:13: 152:54
            _11 = move _12 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:152:13: 152:67
            _10 = move _11 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:152:13: 152:90
            _17 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:153:13: 153:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:153:13: 153:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _16 = &raw const (*_17);         // scope 1 at workspace/buffer/src/test.rs:153:13: 153:26
            _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:153:13: 153:39
            _14 = move _15 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:153:13: 153:62
            _18 = const 44_u32;              // scope 1 at workspace/buffer/src/test.rs:154:13: 154:38
            _24 = const b"void test_buffer_append()\x00"; // scope 1 at workspace/buffer/src/test.rs:156:17: 156:49
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc34))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:156:17: 156:49
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc34)) }
            _23 = _24;                       // scope 1 at workspace/buffer/src/test.rs:156:17: 156:49
            _22 = std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>(move _23) -> bb5; // scope 1 at workspace/buffer/src/test.rs:155:15: 157:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:155:15: 155:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 26]) -> &[i8; 26] {std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _21 = _22;                       // scope 1 at workspace/buffer/src/test.rs:155:13: 158:22
            _20 = move _21 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:155:13: 158:22
            _19 = core::slice::<impl [i8]>::as_ptr(move _20) -> bb6; // scope 1 at workspace/buffer/src/test.rs:155:13: 158:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:158:14: 158:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _10, move _14, move _18, move _19); // scope 1 at workspace/buffer/src/test.rs:151:9: 159:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:151:9: 151:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _25 = Eq(move _26, move _27);    // scope 1 at workspace/buffer/src/test.rs:161:8: 161:89
            switchInt(move _25) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:161:8: 161:89
        }
    
        bb8: {
            _53 = const b"Hello World\x00";  // scope 1 at workspace/buffer/src/test.rs:173:15: 173:33
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc37))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:173:15: 173:33
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc37)) }
            _52 = &raw const (*_53);         // scope 1 at workspace/buffer/src/test.rs:173:15: 173:33
            _51 = move _52 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:173:15: 173:46
            _50 = move _51 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:173:15: 173:69
            _49 = src::test::strlen(move _50) -> bb12; // scope 1 at workspace/buffer/src/test.rs:173:8: 173:70
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:173:8: 173:14
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::test::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _36 = const b"0 == buffer_append(buf, \" World\")\x00"; // scope 1 at workspace/buffer/src/test.rs:164:13: 164:55
                                             // ty::Const
                                             // + ty: &[u8; 34]
                                             // + val: Value(Scalar(alloc36))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:164:13: 164:55
                                             // + literal: Const { ty: &[u8; 34], val: Value(Scalar(alloc36)) }
            _35 = &raw const (*_36);         // scope 1 at workspace/buffer/src/test.rs:164:13: 164:55
            _34 = move _35 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:164:13: 164:68
            _33 = move _34 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:164:13: 164:91
            _40 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:165:13: 165:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:165:13: 165:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _39 = &raw const (*_40);         // scope 1 at workspace/buffer/src/test.rs:165:13: 165:26
            _38 = move _39 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:165:13: 165:39
            _37 = move _38 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:165:13: 165:62
            _41 = const 45_u32;              // scope 1 at workspace/buffer/src/test.rs:166:13: 166:38
            _47 = const b"void test_buffer_append()\x00"; // scope 1 at workspace/buffer/src/test.rs:168:17: 168:49
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc34))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:168:17: 168:49
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc34)) }
            _46 = _47;                       // scope 1 at workspace/buffer/src/test.rs:168:17: 168:49
            _45 = std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>(move _46) -> bb10; // scope 1 at workspace/buffer/src/test.rs:167:15: 169:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:167:15: 167:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 26]) -> &[i8; 26] {std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _44 = _45;                       // scope 1 at workspace/buffer/src/test.rs:167:13: 170:22
            _43 = move _44 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:167:13: 170:22
            _42 = core::slice::<impl [i8]>::as_ptr(move _43) -> bb11; // scope 1 at workspace/buffer/src/test.rs:167:13: 170:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:170:14: 170:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _33, move _37, move _41, move _42); // scope 1 at workspace/buffer/src/test.rs:163:9: 171:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:163:9: 163:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _55 = _1;                        // scope 1 at workspace/buffer/src/test.rs:173:88: 173:91
            _54 = src::test::buffer_length(move _55) -> bb13; // scope 1 at workspace/buffer/src/test.rs:173:74: 173:92
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:173:74: 173:87
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            _48 = Eq(move _49, move _54);    // scope 1 at workspace/buffer/src/test.rs:173:8: 173:92
            switchInt(move _48) -> [false: bb15, otherwise: bb14]; // scope 1 at workspace/buffer/src/test.rs:173:8: 173:92
        }
    
        bb14: {
            _76 = const b"Hello World\x00";  // scope 1 at workspace/buffer/src/test.rs:187:9: 187:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc37))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:187:9: 187:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc37)) }
            _75 = &raw const (*_76);         // scope 1 at workspace/buffer/src/test.rs:187:9: 187:27
            _74 = move _75 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:187:9: 187:40
            _73 = move _74 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:187:9: 187:63
            _72 = move _73 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:187:9: 187:84
            _77 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:188:9: 188:20
            _71 = src::test::equal(move _72, move _77) -> bb18; // scope 1 at workspace/buffer/src/test.rs:186:5: 189:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:186:5: 186:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _59 = const b"strlen(\"Hello World\") == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:176:13: 176:65
                                             // ty::Const
                                             // + ty: &[u8; 44]
                                             // + val: Value(Scalar(alloc38))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:176:13: 176:65
                                             // + literal: Const { ty: &[u8; 44], val: Value(Scalar(alloc38)) }
            _58 = &raw const (*_59);         // scope 1 at workspace/buffer/src/test.rs:176:13: 176:65
            _57 = move _58 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:176:13: 176:78
            _56 = move _57 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:176:13: 177:39
            _63 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:178:13: 178:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:178:13: 178:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _62 = &raw const (*_63);         // scope 1 at workspace/buffer/src/test.rs:178:13: 178:26
            _61 = move _62 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:178:13: 178:39
            _60 = move _61 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:178:13: 178:62
            _64 = const 46_u32;              // scope 1 at workspace/buffer/src/test.rs:179:13: 179:38
            _70 = const b"void test_buffer_append()\x00"; // scope 1 at workspace/buffer/src/test.rs:181:17: 181:49
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc34))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:181:17: 181:49
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc34)) }
            _69 = _70;                       // scope 1 at workspace/buffer/src/test.rs:181:17: 181:49
            _68 = std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>(move _69) -> bb16; // scope 1 at workspace/buffer/src/test.rs:180:15: 182:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:180:15: 180:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 26]) -> &[i8; 26] {std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            _67 = _68;                       // scope 1 at workspace/buffer/src/test.rs:180:13: 183:22
            _66 = move _67 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:180:13: 183:22
            _65 = core::slice::<impl [i8]>::as_ptr(move _66) -> bb17; // scope 1 at workspace/buffer/src/test.rs:180:13: 183:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:183:14: 183:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            src::test::__assert_fail(move _56, move _60, move _64, move _65); // scope 1 at workspace/buffer/src/test.rs:175:9: 184:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:175:9: 175:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb18: {
            _79 = _1;                        // scope 1 at workspace/buffer/src/test.rs:190:17: 190:20
            _78 = src::test::buffer_free(move _79) -> bb19; // scope 1 at workspace/buffer/src/test.rs:190:5: 190:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:190:5: 190:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb19: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:191:2: 191:2
        }
    }
    
    alloc38 (size: 44, align: 1) {
        0x00 │ 73 74 72 6c 65 6e 28 22 48 65 6c 6c 6f 20 57 6f │ strlen("Hello Wo
        0x10 │ 72 6c 64 22 29 20 3d 3d 20 62 75 66 66 65 72 5f │ rld") == buffer_
        0x20 │ 6c 65 6e 67 74 68 28 62 75 66 29 00             │ length(buf).
    }
    
    alloc37 (size: 12, align: 1) {
        48 65 6c 6c 6f 20 57 6f 72 6c 64 00             │ Hello World.
    }
    
    alloc36 (size: 34, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 20 57 6f 72 6c 64 22 │ nd(buf, " World"
        0x20 │ 29 00                                           │ ).
    }
    
    alloc35 (size: 7, align: 1) {
        20 57 6f 72 6c 64 00                            │  World.
    }
    
    alloc34 (size: 26, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 61 70 70 65 6e 64 28 29 00                   │ _append().
    }
    
    alloc33 (size: 33, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 48 65 6c 6c 6f 22 29 │ nd(buf, "Hello")
        0x20 │ 00                                              │ .
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_append_n() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:193:49: 193:49
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:194:9: 194:16
        let mut _2: bool;                    // in scope 0 at workspace/buffer/src/test.rs:195:8: 200:10
        let mut _3: i32;                     // in scope 0 at workspace/buffer/src/test.rs:195:8: 195:16
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/test.rs:196:12: 200:10
        let mut _5: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:197:13: 197:16
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:198:13: 198:62
        let mut _7: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:198:13: 198:39
        let mut _8: *const [u8; 7];          // in scope 0 at workspace/buffer/src/test.rs:198:13: 198:26
        let _9: &[u8; 7];                    // in scope 0 at workspace/buffer/src/test.rs:198:13: 198:26
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/test.rs:199:13: 199:31
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:204:13: 204:96
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:204:13: 204:73
        let mut _13: *const [u8; 39];        // in scope 0 at workspace/buffer/src/test.rs:204:13: 204:60
        let _14: &[u8; 39];                  // in scope 0 at workspace/buffer/src/test.rs:204:13: 204:60
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:205:13: 205:62
        let mut _16: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:205:13: 205:39
        let mut _17: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:205:13: 205:26
        let _18: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:205:13: 205:26
        let mut _19: u32;                    // in scope 0 at workspace/buffer/src/test.rs:206:13: 206:38
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:207:13: 210:22
        let mut _21: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:207:13: 210:22
        let mut _22: &[i8; 28];              // in scope 0 at workspace/buffer/src/test.rs:207:13: 210:22
        let _23: &[i8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:207:15: 209:14
        let mut _24: &[u8; 28];              // in scope 0 at workspace/buffer/src/test.rs:208:17: 208:51
        let _25: &[u8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:208:17: 208:51
        let mut _26: bool;                   // in scope 0 at workspace/buffer/src/test.rs:213:8: 218:10
        let mut _27: i32;                    // in scope 0 at workspace/buffer/src/test.rs:213:8: 213:16
        let mut _28: i32;                    // in scope 0 at workspace/buffer/src/test.rs:214:12: 218:10
        let mut _29: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:215:13: 215:16
        let mut _30: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:216:13: 216:63
        let mut _31: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:216:13: 216:40
        let mut _32: *const [u8; 8];         // in scope 0 at workspace/buffer/src/test.rs:216:13: 216:27
        let _33: &[u8; 8];                   // in scope 0 at workspace/buffer/src/test.rs:216:13: 216:27
        let mut _34: u64;                    // in scope 0 at workspace/buffer/src/test.rs:217:13: 217:31
        let mut _35: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:222:13: 222:97
        let mut _36: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:222:13: 222:74
        let mut _37: *const [u8; 40];        // in scope 0 at workspace/buffer/src/test.rs:222:13: 222:61
        let _38: &[u8; 40];                  // in scope 0 at workspace/buffer/src/test.rs:222:13: 222:61
        let mut _39: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:223:13: 223:62
        let mut _40: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:223:13: 223:39
        let mut _41: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:223:13: 223:26
        let _42: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:223:13: 223:26
        let mut _43: u32;                    // in scope 0 at workspace/buffer/src/test.rs:224:13: 224:38
        let mut _44: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:225:13: 228:22
        let mut _45: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:225:13: 228:22
        let mut _46: &[i8; 28];              // in scope 0 at workspace/buffer/src/test.rs:225:13: 228:22
        let _47: &[i8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:225:15: 227:14
        let mut _48: &[u8; 28];              // in scope 0 at workspace/buffer/src/test.rs:226:17: 226:51
        let _49: &[u8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:226:17: 226:51
        let mut _50: bool;                   // in scope 0 at workspace/buffer/src/test.rs:231:8: 231:90
        let mut _51: u64;                    // in scope 0 at workspace/buffer/src/test.rs:231:8: 231:68
        let mut _52: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:231:15: 231:67
        let mut _53: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:231:15: 231:44
        let mut _54: *const [u8; 10];        // in scope 0 at workspace/buffer/src/test.rs:231:15: 231:31
        let _55: &[u8; 10];                  // in scope 0 at workspace/buffer/src/test.rs:231:15: 231:31
        let mut _56: u64;                    // in scope 0 at workspace/buffer/src/test.rs:231:72: 231:90
        let mut _57: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:231:86: 231:89
        let mut _58: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:234:13: 234:99
        let mut _59: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:234:13: 234:76
        let mut _60: *const [u8; 42];        // in scope 0 at workspace/buffer/src/test.rs:234:13: 234:63
        let _61: &[u8; 42];                  // in scope 0 at workspace/buffer/src/test.rs:234:13: 234:63
        let mut _62: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:235:13: 235:62
        let mut _63: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:235:13: 235:39
        let mut _64: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:235:13: 235:26
        let _65: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:235:13: 235:26
        let mut _66: u32;                    // in scope 0 at workspace/buffer/src/test.rs:236:13: 236:38
        let mut _67: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:237:13: 240:22
        let mut _68: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:237:13: 240:22
        let mut _69: &[i8; 28];              // in scope 0 at workspace/buffer/src/test.rs:237:13: 240:22
        let _70: &[i8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:237:15: 239:14
        let mut _71: &[u8; 28];              // in scope 0 at workspace/buffer/src/test.rs:238:17: 238:51
        let _72: &[u8; 28];                  // in scope 0 at workspace/buffer/src/test.rs:238:17: 238:51
        let _73: ();                         // in scope 0 at workspace/buffer/src/test.rs:243:5: 246:6
        let mut _74: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:244:9: 244:82
        let mut _75: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:244:9: 244:61
        let mut _76: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:244:9: 244:38
        let mut _77: *const [u8; 10];        // in scope 0 at workspace/buffer/src/test.rs:244:9: 244:25
        let _78: &[u8; 10];                  // in scope 0 at workspace/buffer/src/test.rs:244:9: 244:25
        let mut _79: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:245:9: 245:20
        let _80: ();                         // in scope 0 at workspace/buffer/src/test.rs:247:5: 247:21
        let mut _81: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:247:17: 247:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:194:9: 194:16
        }
    
        bb0: {
            _1 = src::test::buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:194:19: 194:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:194:19: 194:29
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut src::test::buffer_t {src::test::buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = const 0_i32;                // scope 1 at workspace/buffer/src/test.rs:195:8: 195:9
            _5 = _1;                         // scope 1 at workspace/buffer/src/test.rs:197:13: 197:16
            _9 = const b"subway\x00";        // scope 1 at workspace/buffer/src/test.rs:198:13: 198:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc39))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:198:13: 198:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc39)) }
            _8 = &raw const (*_9);           // scope 1 at workspace/buffer/src/test.rs:198:13: 198:26
            _7 = move _8 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:198:13: 198:39
            _6 = move _7 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:198:13: 198:62
            _10 = const 3_u64;               // scope 1 at workspace/buffer/src/test.rs:199:13: 199:31
            _4 = src::test::buffer_append_n(move _5, move _6, move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:196:12: 200:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:196:12: 196:27
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8, u64) -> i32 {src::test::buffer_append_n}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _2 = Eq(move _3, move _4);       // scope 1 at workspace/buffer/src/test.rs:195:8: 200:10
            switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:195:8: 200:10
        }
    
        bb3: {
            _27 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:213:8: 213:9
            _29 = _1;                        // scope 1 at workspace/buffer/src/test.rs:215:13: 215:16
            _33 = const b"marines\x00";      // scope 1 at workspace/buffer/src/test.rs:216:13: 216:27
                                             // ty::Const
                                             // + ty: &[u8; 8]
                                             // + val: Value(Scalar(alloc42))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:216:13: 216:27
                                             // + literal: Const { ty: &[u8; 8], val: Value(Scalar(alloc42)) }
            _32 = &raw const (*_33);         // scope 1 at workspace/buffer/src/test.rs:216:13: 216:27
            _31 = move _32 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:216:13: 216:40
            _30 = move _31 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:216:13: 216:63
            _34 = const 6_u64;               // scope 1 at workspace/buffer/src/test.rs:217:13: 217:31
            _28 = src::test::buffer_append_n(move _29, move _30, move _34) -> bb7; // scope 1 at workspace/buffer/src/test.rs:214:12: 218:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:214:12: 214:27
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8, u64) -> i32 {src::test::buffer_append_n}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _14 = const b"0 == buffer_append_n(buf, \"subway\", 3)\x00"; // scope 1 at workspace/buffer/src/test.rs:204:13: 204:60
                                             // ty::Const
                                             // + ty: &[u8; 39]
                                             // + val: Value(Scalar(alloc40))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:204:13: 204:60
                                             // + literal: Const { ty: &[u8; 39], val: Value(Scalar(alloc40)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:204:13: 204:60
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:204:13: 204:73
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:204:13: 204:96
            _18 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:205:13: 205:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:205:13: 205:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _17 = &raw const (*_18);         // scope 1 at workspace/buffer/src/test.rs:205:13: 205:26
            _16 = move _17 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:205:13: 205:39
            _15 = move _16 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:205:13: 205:62
            _19 = const 54_u32;              // scope 1 at workspace/buffer/src/test.rs:206:13: 206:38
            _25 = const b"void test_buffer_append_n()\x00"; // scope 1 at workspace/buffer/src/test.rs:208:17: 208:51
                                             // ty::Const
                                             // + ty: &[u8; 28]
                                             // + val: Value(Scalar(alloc41))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:208:17: 208:51
                                             // + literal: Const { ty: &[u8; 28], val: Value(Scalar(alloc41)) }
            _24 = _25;                       // scope 1 at workspace/buffer/src/test.rs:208:17: 208:51
            _23 = std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>(move _24) -> bb5; // scope 1 at workspace/buffer/src/test.rs:207:15: 209:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:207:15: 207:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 28]) -> &[i8; 28] {std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _22 = _23;                       // scope 1 at workspace/buffer/src/test.rs:207:13: 210:22
            _21 = move _22 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:207:13: 210:22
            _20 = core::slice::<impl [i8]>::as_ptr(move _21) -> bb6; // scope 1 at workspace/buffer/src/test.rs:207:13: 210:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:210:14: 210:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _11, move _15, move _19, move _20); // scope 1 at workspace/buffer/src/test.rs:203:9: 211:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:203:9: 203:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _26 = Eq(move _27, move _28);    // scope 1 at workspace/buffer/src/test.rs:213:8: 218:10
            switchInt(move _26) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:213:8: 218:10
        }
    
        bb8: {
            _55 = const b"submarine\x00";    // scope 1 at workspace/buffer/src/test.rs:231:15: 231:31
                                             // ty::Const
                                             // + ty: &[u8; 10]
                                             // + val: Value(Scalar(alloc44))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:231:15: 231:31
                                             // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc44)) }
            _54 = &raw const (*_55);         // scope 1 at workspace/buffer/src/test.rs:231:15: 231:31
            _53 = move _54 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:231:15: 231:44
            _52 = move _53 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:231:15: 231:67
            _51 = src::test::strlen(move _52) -> bb12; // scope 1 at workspace/buffer/src/test.rs:231:8: 231:68
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:231:8: 231:14
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::test::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _38 = const b"0 == buffer_append_n(buf, \"marines\", 6)\x00"; // scope 1 at workspace/buffer/src/test.rs:222:13: 222:61
                                             // ty::Const
                                             // + ty: &[u8; 40]
                                             // + val: Value(Scalar(alloc43))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:222:13: 222:61
                                             // + literal: Const { ty: &[u8; 40], val: Value(Scalar(alloc43)) }
            _37 = &raw const (*_38);         // scope 1 at workspace/buffer/src/test.rs:222:13: 222:61
            _36 = move _37 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:222:13: 222:74
            _35 = move _36 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:222:13: 222:97
            _42 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:223:13: 223:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:223:13: 223:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _41 = &raw const (*_42);         // scope 1 at workspace/buffer/src/test.rs:223:13: 223:26
            _40 = move _41 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:223:13: 223:39
            _39 = move _40 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:223:13: 223:62
            _43 = const 55_u32;              // scope 1 at workspace/buffer/src/test.rs:224:13: 224:38
            _49 = const b"void test_buffer_append_n()\x00"; // scope 1 at workspace/buffer/src/test.rs:226:17: 226:51
                                             // ty::Const
                                             // + ty: &[u8; 28]
                                             // + val: Value(Scalar(alloc41))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:226:17: 226:51
                                             // + literal: Const { ty: &[u8; 28], val: Value(Scalar(alloc41)) }
            _48 = _49;                       // scope 1 at workspace/buffer/src/test.rs:226:17: 226:51
            _47 = std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>(move _48) -> bb10; // scope 1 at workspace/buffer/src/test.rs:225:15: 227:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:225:15: 225:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 28]) -> &[i8; 28] {std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _46 = _47;                       // scope 1 at workspace/buffer/src/test.rs:225:13: 228:22
            _45 = move _46 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:225:13: 228:22
            _44 = core::slice::<impl [i8]>::as_ptr(move _45) -> bb11; // scope 1 at workspace/buffer/src/test.rs:225:13: 228:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:228:14: 228:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _35, move _39, move _43, move _44); // scope 1 at workspace/buffer/src/test.rs:221:9: 229:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:221:9: 221:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _57 = _1;                        // scope 1 at workspace/buffer/src/test.rs:231:86: 231:89
            _56 = src::test::buffer_length(move _57) -> bb13; // scope 1 at workspace/buffer/src/test.rs:231:72: 231:90
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:231:72: 231:85
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            _50 = Eq(move _51, move _56);    // scope 1 at workspace/buffer/src/test.rs:231:8: 231:90
            switchInt(move _50) -> [false: bb15, otherwise: bb14]; // scope 1 at workspace/buffer/src/test.rs:231:8: 231:90
        }
    
        bb14: {
            _78 = const b"submarine\x00";    // scope 1 at workspace/buffer/src/test.rs:244:9: 244:25
                                             // ty::Const
                                             // + ty: &[u8; 10]
                                             // + val: Value(Scalar(alloc44))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:244:9: 244:25
                                             // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc44)) }
            _77 = &raw const (*_78);         // scope 1 at workspace/buffer/src/test.rs:244:9: 244:25
            _76 = move _77 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:244:9: 244:38
            _75 = move _76 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:244:9: 244:61
            _74 = move _75 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:244:9: 244:82
            _79 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:245:9: 245:20
            _73 = src::test::equal(move _74, move _79) -> bb18; // scope 1 at workspace/buffer/src/test.rs:243:5: 246:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:243:5: 243:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _61 = const b"strlen(\"submarine\") == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:234:13: 234:63
                                             // ty::Const
                                             // + ty: &[u8; 42]
                                             // + val: Value(Scalar(alloc45))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:234:13: 234:63
                                             // + literal: Const { ty: &[u8; 42], val: Value(Scalar(alloc45)) }
            _60 = &raw const (*_61);         // scope 1 at workspace/buffer/src/test.rs:234:13: 234:63
            _59 = move _60 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:234:13: 234:76
            _58 = move _59 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:234:13: 234:99
            _65 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:235:13: 235:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:235:13: 235:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _64 = &raw const (*_65);         // scope 1 at workspace/buffer/src/test.rs:235:13: 235:26
            _63 = move _64 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:235:13: 235:39
            _62 = move _63 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:235:13: 235:62
            _66 = const 56_u32;              // scope 1 at workspace/buffer/src/test.rs:236:13: 236:38
            _72 = const b"void test_buffer_append_n()\x00"; // scope 1 at workspace/buffer/src/test.rs:238:17: 238:51
                                             // ty::Const
                                             // + ty: &[u8; 28]
                                             // + val: Value(Scalar(alloc41))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:238:17: 238:51
                                             // + literal: Const { ty: &[u8; 28], val: Value(Scalar(alloc41)) }
            _71 = _72;                       // scope 1 at workspace/buffer/src/test.rs:238:17: 238:51
            _70 = std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>(move _71) -> bb16; // scope 1 at workspace/buffer/src/test.rs:237:15: 239:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:237:15: 237:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 28]) -> &[i8; 28] {std::intrinsics::transmute::<&[u8; 28], &[i8; 28]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            _69 = _70;                       // scope 1 at workspace/buffer/src/test.rs:237:13: 240:22
            _68 = move _69 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:237:13: 240:22
            _67 = core::slice::<impl [i8]>::as_ptr(move _68) -> bb17; // scope 1 at workspace/buffer/src/test.rs:237:13: 240:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:240:14: 240:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            src::test::__assert_fail(move _58, move _62, move _66, move _67); // scope 1 at workspace/buffer/src/test.rs:233:9: 241:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:233:9: 233:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb18: {
            _81 = _1;                        // scope 1 at workspace/buffer/src/test.rs:247:17: 247:20
            _80 = src::test::buffer_free(move _81) -> bb19; // scope 1 at workspace/buffer/src/test.rs:247:5: 247:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:247:5: 247:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb19: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:248:2: 248:2
        }
    }
    
    alloc45 (size: 42, align: 1) {
        0x00 │ 73 74 72 6c 65 6e 28 22 73 75 62 6d 61 72 69 6e │ strlen("submarin
        0x10 │ 65 22 29 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 │ e") == buffer_le
        0x20 │ 6e 67 74 68 28 62 75 66 29 00                   │ ngth(buf).
    }
    
    alloc44 (size: 10, align: 1) {
        73 75 62 6d 61 72 69 6e 65 00                   │ submarine.
    }
    
    alloc43 (size: 40, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 5f 6e 28 62 75 66 2c 20 22 6d 61 72 69 6e │ nd_n(buf, "marin
        0x20 │ 65 73 22 2c 20 36 29 00                         │ es", 6).
    }
    
    alloc42 (size: 8, align: 1) {
        6d 61 72 69 6e 65 73 00                         │ marines.
    }
    
    alloc41 (size: 28, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 61 70 70 65 6e 64 5f 6e 28 29 00             │ _append_n().
    }
    
    alloc40 (size: 39, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 5f 6e 28 62 75 66 2c 20 22 73 75 62 77 61 │ nd_n(buf, "subwa
        0x20 │ 79 22 2c 20 33 29 00                            │ y", 3).
    }
    
    alloc39 (size: 7, align: 1) {
        73 75 62 77 61 79 00                            │ subway.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_append__grow() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:250:53: 250:53
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:251:9: 251:16
        let mut _2: u64;                     // in scope 0 at workspace/buffer/src/test.rs:251:40: 251:59
        let mut _3: bool;                    // in scope 0 at workspace/buffer/src/test.rs:252:8: 252:88
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/test.rs:252:8: 252:16
        let mut _5: i32;                     // in scope 0 at workspace/buffer/src/test.rs:252:20: 252:88
        let mut _6: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:252:34: 252:37
        let mut _7: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:252:39: 252:87
        let mut _8: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:252:39: 252:64
        let mut _9: *const [u8; 6];          // in scope 0 at workspace/buffer/src/test.rs:252:39: 252:51
        let _10: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:252:39: 252:51
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:255:13: 255:90
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:255:13: 255:67
        let mut _13: *const [u8; 33];        // in scope 0 at workspace/buffer/src/test.rs:255:13: 255:54
        let _14: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:255:13: 255:54
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:256:13: 256:62
        let mut _16: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:256:13: 256:39
        let mut _17: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:256:13: 256:26
        let _18: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:256:13: 256:26
        let mut _19: u32;                    // in scope 0 at workspace/buffer/src/test.rs:257:13: 257:38
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:258:13: 261:22
        let mut _21: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:258:13: 261:22
        let mut _22: &[i8; 32];              // in scope 0 at workspace/buffer/src/test.rs:258:13: 261:22
        let _23: &[i8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:258:15: 260:14
        let mut _24: &[u8; 32];              // in scope 0 at workspace/buffer/src/test.rs:259:17: 259:55
        let _25: &[u8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:259:17: 259:55
        let mut _26: bool;                   // in scope 0 at workspace/buffer/src/test.rs:264:8: 264:88
        let mut _27: i32;                    // in scope 0 at workspace/buffer/src/test.rs:264:8: 264:16
        let mut _28: i32;                    // in scope 0 at workspace/buffer/src/test.rs:264:20: 264:88
        let mut _29: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:264:34: 264:37
        let mut _30: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:264:39: 264:87
        let mut _31: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:264:39: 264:64
        let mut _32: *const [u8; 6];         // in scope 0 at workspace/buffer/src/test.rs:264:39: 264:51
        let _33: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:264:39: 264:51
        let mut _34: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:267:13: 267:90
        let mut _35: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:267:13: 267:67
        let mut _36: *const [u8; 33];        // in scope 0 at workspace/buffer/src/test.rs:267:13: 267:54
        let _37: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:267:13: 267:54
        let mut _38: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:268:13: 268:62
        let mut _39: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:268:13: 268:39
        let mut _40: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:268:13: 268:26
        let _41: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:268:13: 268:26
        let mut _42: u32;                    // in scope 0 at workspace/buffer/src/test.rs:269:13: 269:38
        let mut _43: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:270:13: 273:22
        let mut _44: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:270:13: 273:22
        let mut _45: &[i8; 32];              // in scope 0 at workspace/buffer/src/test.rs:270:13: 273:22
        let _46: &[i8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:270:15: 272:14
        let mut _47: &[u8; 32];              // in scope 0 at workspace/buffer/src/test.rs:271:17: 271:55
        let _48: &[u8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:271:17: 271:55
        let mut _49: bool;                   // in scope 0 at workspace/buffer/src/test.rs:276:8: 276:87
        let mut _50: i32;                    // in scope 0 at workspace/buffer/src/test.rs:276:8: 276:16
        let mut _51: i32;                    // in scope 0 at workspace/buffer/src/test.rs:276:20: 276:87
        let mut _52: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:276:34: 276:37
        let mut _53: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:276:39: 276:86
        let mut _54: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:276:39: 276:63
        let mut _55: *const [u8; 5];         // in scope 0 at workspace/buffer/src/test.rs:276:39: 276:50
        let _56: &[u8; 5];                   // in scope 0 at workspace/buffer/src/test.rs:276:39: 276:50
        let mut _57: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:279:13: 279:89
        let mut _58: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:279:13: 279:66
        let mut _59: *const [u8; 32];        // in scope 0 at workspace/buffer/src/test.rs:279:13: 279:53
        let _60: &[u8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:279:13: 279:53
        let mut _61: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:280:13: 280:62
        let mut _62: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:280:13: 280:39
        let mut _63: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:280:13: 280:26
        let _64: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:280:13: 280:26
        let mut _65: u32;                    // in scope 0 at workspace/buffer/src/test.rs:281:13: 281:38
        let mut _66: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:282:13: 285:22
        let mut _67: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:282:13: 285:22
        let mut _68: &[i8; 32];              // in scope 0 at workspace/buffer/src/test.rs:282:13: 285:22
        let _69: &[i8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:282:15: 284:14
        let mut _70: &[u8; 32];              // in scope 0 at workspace/buffer/src/test.rs:283:17: 283:55
        let _71: &[u8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:283:17: 283:55
        let mut _72: bool;                   // in scope 0 at workspace/buffer/src/test.rs:288:8: 288:88
        let mut _73: i32;                    // in scope 0 at workspace/buffer/src/test.rs:288:8: 288:16
        let mut _74: i32;                    // in scope 0 at workspace/buffer/src/test.rs:288:20: 288:88
        let mut _75: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:288:34: 288:37
        let mut _76: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:288:39: 288:87
        let mut _77: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:288:39: 288:64
        let mut _78: *const [u8; 6];         // in scope 0 at workspace/buffer/src/test.rs:288:39: 288:51
        let _79: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:288:39: 288:51
        let mut _80: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:291:13: 291:90
        let mut _81: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:291:13: 291:67
        let mut _82: *const [u8; 33];        // in scope 0 at workspace/buffer/src/test.rs:291:13: 291:54
        let _83: &[u8; 33];                  // in scope 0 at workspace/buffer/src/test.rs:291:13: 291:54
        let mut _84: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:292:13: 292:62
        let mut _85: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:292:13: 292:39
        let mut _86: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:292:13: 292:26
        let _87: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:292:13: 292:26
        let mut _88: u32;                    // in scope 0 at workspace/buffer/src/test.rs:293:13: 293:38
        let mut _89: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:294:13: 297:22
        let mut _90: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:294:13: 297:22
        let mut _91: &[i8; 32];              // in scope 0 at workspace/buffer/src/test.rs:294:13: 297:22
        let _92: &[i8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:294:15: 296:14
        let mut _93: &[u8; 32];              // in scope 0 at workspace/buffer/src/test.rs:295:17: 295:55
        let _94: &[u8; 32];                  // in scope 0 at workspace/buffer/src/test.rs:295:17: 295:55
        let mut _96: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:301:9: 301:71
        let mut _97: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:301:9: 301:48
        let mut _98: *const [u8; 20];        // in scope 0 at workspace/buffer/src/test.rs:301:9: 301:35
        let _99: &[u8; 20];                  // in scope 0 at workspace/buffer/src/test.rs:301:9: 301:35
        let _100: ();                        // in scope 0 at workspace/buffer/src/test.rs:302:5: 302:28
        let mut _101: *mut i8;               // in scope 0 at workspace/buffer/src/test.rs:302:11: 302:14
        let mut _102: *mut i8;               // in scope 0 at workspace/buffer/src/test.rs:302:16: 302:27
        let mut _103: bool;                  // in scope 0 at workspace/buffer/src/test.rs:303:8: 303:46
        let mut _104: u64;                   // in scope 0 at workspace/buffer/src/test.rs:303:8: 303:26
        let mut _105: u64;                   // in scope 0 at workspace/buffer/src/test.rs:303:30: 303:46
        let mut _106: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:303:42: 303:45
        let mut _107: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:306:13: 306:80
        let mut _108: *const u8;             // in scope 0 at workspace/buffer/src/test.rs:306:13: 306:57
        let mut _109: *const [u8; 25];       // in scope 0 at workspace/buffer/src/test.rs:306:13: 306:44
        let _110: &[u8; 25];                 // in scope 0 at workspace/buffer/src/test.rs:306:13: 306:44
        let mut _111: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:307:13: 307:62
        let mut _112: *const u8;             // in scope 0 at workspace/buffer/src/test.rs:307:13: 307:39
        let mut _113: *const [u8; 7];        // in scope 0 at workspace/buffer/src/test.rs:307:13: 307:26
        let _114: &[u8; 7];                  // in scope 0 at workspace/buffer/src/test.rs:307:13: 307:26
        let mut _115: u32;                   // in scope 0 at workspace/buffer/src/test.rs:308:13: 308:38
        let mut _116: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:309:13: 312:22
        let mut _117: &[i8];                 // in scope 0 at workspace/buffer/src/test.rs:309:13: 312:22
        let mut _118: &[i8; 32];             // in scope 0 at workspace/buffer/src/test.rs:309:13: 312:22
        let _119: &[i8; 32];                 // in scope 0 at workspace/buffer/src/test.rs:309:15: 311:14
        let mut _120: &[u8; 32];             // in scope 0 at workspace/buffer/src/test.rs:310:17: 310:55
        let _121: &[u8; 32];                 // in scope 0 at workspace/buffer/src/test.rs:310:17: 310:55
        let mut _122: bool;                  // in scope 0 at workspace/buffer/src/test.rs:315:8: 315:41
        let mut _123: u64;                   // in scope 0 at workspace/buffer/src/test.rs:315:8: 315:19
        let mut _124: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:315:15: 315:18
        let mut _125: *mut i8;               // in scope 0 at workspace/buffer/src/test.rs:315:15: 315:18
        let mut _126: u64;                   // in scope 0 at workspace/buffer/src/test.rs:315:23: 315:41
        let mut _127: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:315:37: 315:40
        let mut _128: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:318:13: 318:89
        let mut _129: *const u8;             // in scope 0 at workspace/buffer/src/test.rs:318:13: 318:66
        let mut _130: *const [u8; 34];       // in scope 0 at workspace/buffer/src/test.rs:318:13: 318:53
        let _131: &[u8; 34];                 // in scope 0 at workspace/buffer/src/test.rs:318:13: 318:53
        let mut _132: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:319:13: 319:62
        let mut _133: *const u8;             // in scope 0 at workspace/buffer/src/test.rs:319:13: 319:39
        let mut _134: *const [u8; 7];        // in scope 0 at workspace/buffer/src/test.rs:319:13: 319:26
        let _135: &[u8; 7];                  // in scope 0 at workspace/buffer/src/test.rs:319:13: 319:26
        let mut _136: u32;                   // in scope 0 at workspace/buffer/src/test.rs:320:13: 320:38
        let mut _137: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:321:13: 324:22
        let mut _138: &[i8];                 // in scope 0 at workspace/buffer/src/test.rs:321:13: 324:22
        let mut _139: &[i8; 32];             // in scope 0 at workspace/buffer/src/test.rs:321:13: 324:22
        let _140: &[i8; 32];                 // in scope 0 at workspace/buffer/src/test.rs:321:15: 323:14
        let mut _141: &[u8; 32];             // in scope 0 at workspace/buffer/src/test.rs:322:17: 322:55
        let _142: &[u8; 32];                 // in scope 0 at workspace/buffer/src/test.rs:322:17: 322:55
        let _143: ();                        // in scope 0 at workspace/buffer/src/test.rs:327:5: 327:21
        let mut _144: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:327:17: 327:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:251:9: 251:16
            let mut _95: *mut i8;            // in scope 1 at workspace/buffer/src/test.rs:300:9: 300:16
            scope 2 {
                debug str => _95;            // in scope 2 at workspace/buffer/src/test.rs:300:9: 300:16
            }
        }
    
        bb0: {
            _2 = const 10_u64;               // scope 0 at workspace/buffer/src/test.rs:251:40: 251:59
            _1 = src::test::buffer_new_with_size(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:251:19: 251:60
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:251:19: 251:39
                                             // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut src::test::buffer_t {src::test::buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _4 = const 0_i32;                // scope 1 at workspace/buffer/src/test.rs:252:8: 252:9
            _6 = _1;                         // scope 1 at workspace/buffer/src/test.rs:252:34: 252:37
            _10 = const b"Hello\x00";        // scope 1 at workspace/buffer/src/test.rs:252:39: 252:51
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:252:39: 252:51
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _9 = &raw const (*_10);          // scope 1 at workspace/buffer/src/test.rs:252:39: 252:51
            _8 = move _9 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:252:39: 252:64
            _7 = move _8 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:252:39: 252:87
            _5 = src::test::buffer_append(move _6, move _7) -> bb2; // scope 1 at workspace/buffer/src/test.rs:252:20: 252:88
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:252:20: 252:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _3 = Eq(move _4, move _5);       // scope 1 at workspace/buffer/src/test.rs:252:8: 252:88
            switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:252:8: 252:88
        }
    
        bb3: {
            _27 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:264:8: 264:9
            _29 = _1;                        // scope 1 at workspace/buffer/src/test.rs:264:34: 264:37
            _33 = const b" tobi\x00";        // scope 1 at workspace/buffer/src/test.rs:264:39: 264:51
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc47))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:264:39: 264:51
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc47)) }
            _32 = &raw const (*_33);         // scope 1 at workspace/buffer/src/test.rs:264:39: 264:51
            _31 = move _32 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:264:39: 264:64
            _30 = move _31 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:264:39: 264:87
            _28 = src::test::buffer_append(move _29, move _30) -> bb7; // scope 1 at workspace/buffer/src/test.rs:264:20: 264:88
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:264:20: 264:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _14 = const b"0 == buffer_append(buf, \"Hello\")\x00"; // scope 1 at workspace/buffer/src/test.rs:255:13: 255:54
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc33))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:255:13: 255:54
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc33)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:255:13: 255:54
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:255:13: 255:67
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:255:13: 255:90
            _18 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:256:13: 256:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:256:13: 256:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _17 = &raw const (*_18);         // scope 1 at workspace/buffer/src/test.rs:256:13: 256:26
            _16 = move _17 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:256:13: 256:39
            _15 = move _16 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:256:13: 256:62
            _19 = const 64_u32;              // scope 1 at workspace/buffer/src/test.rs:257:13: 257:38
            _25 = const b"void test_buffer_append__grow()\x00"; // scope 1 at workspace/buffer/src/test.rs:259:17: 259:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:259:17: 259:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _24 = _25;                       // scope 1 at workspace/buffer/src/test.rs:259:17: 259:55
            _23 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _24) -> bb5; // scope 1 at workspace/buffer/src/test.rs:258:15: 260:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:258:15: 258:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _22 = _23;                       // scope 1 at workspace/buffer/src/test.rs:258:13: 261:22
            _21 = move _22 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:258:13: 261:22
            _20 = core::slice::<impl [i8]>::as_ptr(move _21) -> bb6; // scope 1 at workspace/buffer/src/test.rs:258:13: 261:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:261:14: 261:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _11, move _15, move _19, move _20); // scope 1 at workspace/buffer/src/test.rs:254:9: 262:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:254:9: 254:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _26 = Eq(move _27, move _28);    // scope 1 at workspace/buffer/src/test.rs:264:8: 264:88
            switchInt(move _26) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:264:8: 264:88
        }
    
        bb8: {
            _50 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:276:8: 276:9
            _52 = _1;                        // scope 1 at workspace/buffer/src/test.rs:276:34: 276:37
            _56 = const b" was\x00";         // scope 1 at workspace/buffer/src/test.rs:276:39: 276:50
                                             // ty::Const
                                             // + ty: &[u8; 5]
                                             // + val: Value(Scalar(alloc49))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:276:39: 276:50
                                             // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc49)) }
            _55 = &raw const (*_56);         // scope 1 at workspace/buffer/src/test.rs:276:39: 276:50
            _54 = move _55 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:276:39: 276:63
            _53 = move _54 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:276:39: 276:86
            _51 = src::test::buffer_append(move _52, move _53) -> bb12; // scope 1 at workspace/buffer/src/test.rs:276:20: 276:87
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:276:20: 276:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _37 = const b"0 == buffer_append(buf, \" tobi\")\x00"; // scope 1 at workspace/buffer/src/test.rs:267:13: 267:54
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc48))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:267:13: 267:54
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc48)) }
            _36 = &raw const (*_37);         // scope 1 at workspace/buffer/src/test.rs:267:13: 267:54
            _35 = move _36 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:267:13: 267:67
            _34 = move _35 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:267:13: 267:90
            _41 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:268:13: 268:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:268:13: 268:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _40 = &raw const (*_41);         // scope 1 at workspace/buffer/src/test.rs:268:13: 268:26
            _39 = move _40 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:268:13: 268:39
            _38 = move _39 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:268:13: 268:62
            _42 = const 65_u32;              // scope 1 at workspace/buffer/src/test.rs:269:13: 269:38
            _48 = const b"void test_buffer_append__grow()\x00"; // scope 1 at workspace/buffer/src/test.rs:271:17: 271:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:271:17: 271:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _47 = _48;                       // scope 1 at workspace/buffer/src/test.rs:271:17: 271:55
            _46 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _47) -> bb10; // scope 1 at workspace/buffer/src/test.rs:270:15: 272:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:270:15: 270:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _45 = _46;                       // scope 1 at workspace/buffer/src/test.rs:270:13: 273:22
            _44 = move _45 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:270:13: 273:22
            _43 = core::slice::<impl [i8]>::as_ptr(move _44) -> bb11; // scope 1 at workspace/buffer/src/test.rs:270:13: 273:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:273:14: 273:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _34, move _38, move _42, move _43); // scope 1 at workspace/buffer/src/test.rs:266:9: 274:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:266:9: 266:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _49 = Eq(move _50, move _51);    // scope 1 at workspace/buffer/src/test.rs:276:8: 276:87
            switchInt(move _49) -> [false: bb14, otherwise: bb13]; // scope 1 at workspace/buffer/src/test.rs:276:8: 276:87
        }
    
        bb13: {
            _73 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:288:8: 288:9
            _75 = _1;                        // scope 1 at workspace/buffer/src/test.rs:288:34: 288:37
            _79 = const b" here\x00";        // scope 1 at workspace/buffer/src/test.rs:288:39: 288:51
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc51))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:288:39: 288:51
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc51)) }
            _78 = &raw const (*_79);         // scope 1 at workspace/buffer/src/test.rs:288:39: 288:51
            _77 = move _78 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:288:39: 288:64
            _76 = move _77 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:288:39: 288:87
            _74 = src::test::buffer_append(move _75, move _76) -> bb17; // scope 1 at workspace/buffer/src/test.rs:288:20: 288:88
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:288:20: 288:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb14: {
            _60 = const b"0 == buffer_append(buf, \" was\")\x00"; // scope 1 at workspace/buffer/src/test.rs:279:13: 279:53
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc50))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:279:13: 279:53
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc50)) }
            _59 = &raw const (*_60);         // scope 1 at workspace/buffer/src/test.rs:279:13: 279:53
            _58 = move _59 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:279:13: 279:66
            _57 = move _58 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:279:13: 279:89
            _64 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:280:13: 280:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:280:13: 280:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _63 = &raw const (*_64);         // scope 1 at workspace/buffer/src/test.rs:280:13: 280:26
            _62 = move _63 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:280:13: 280:39
            _61 = move _62 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:280:13: 280:62
            _65 = const 66_u32;              // scope 1 at workspace/buffer/src/test.rs:281:13: 281:38
            _71 = const b"void test_buffer_append__grow()\x00"; // scope 1 at workspace/buffer/src/test.rs:283:17: 283:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:283:17: 283:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _70 = _71;                       // scope 1 at workspace/buffer/src/test.rs:283:17: 283:55
            _69 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _70) -> bb15; // scope 1 at workspace/buffer/src/test.rs:282:15: 284:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:282:15: 282:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _68 = _69;                       // scope 1 at workspace/buffer/src/test.rs:282:13: 285:22
            _67 = move _68 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:282:13: 285:22
            _66 = core::slice::<impl [i8]>::as_ptr(move _67) -> bb16; // scope 1 at workspace/buffer/src/test.rs:282:13: 285:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:285:14: 285:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            src::test::__assert_fail(move _57, move _61, move _65, move _66); // scope 1 at workspace/buffer/src/test.rs:278:9: 286:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:278:9: 278:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            _72 = Eq(move _73, move _74);    // scope 1 at workspace/buffer/src/test.rs:288:8: 288:88
            switchInt(move _72) -> [false: bb19, otherwise: bb18]; // scope 1 at workspace/buffer/src/test.rs:288:8: 288:88
        }
    
        bb18: {
            _99 = const b"Hello tobi was here\x00"; // scope 1 at workspace/buffer/src/test.rs:301:9: 301:35
                                             // ty::Const
                                             // + ty: &[u8; 20]
                                             // + val: Value(Scalar(alloc53))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:301:9: 301:35
                                             // + literal: Const { ty: &[u8; 20], val: Value(Scalar(alloc53)) }
            _98 = &raw const (*_99);         // scope 1 at workspace/buffer/src/test.rs:301:9: 301:35
            _97 = move _98 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:301:9: 301:48
            _96 = move _97 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:301:9: 301:71
            _95 = move _96 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:301:9: 301:92
            _101 = _95;                      // scope 2 at workspace/buffer/src/test.rs:302:11: 302:14
            _102 = ((*_1).2: *mut i8);       // scope 2 at workspace/buffer/src/test.rs:302:16: 302:27
            _100 = src::test::equal(move _101, move _102) -> bb22; // scope 2 at workspace/buffer/src/test.rs:302:5: 302:28
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:302:5: 302:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb19: {
            _83 = const b"0 == buffer_append(buf, \" here\")\x00"; // scope 1 at workspace/buffer/src/test.rs:291:13: 291:54
                                             // ty::Const
                                             // + ty: &[u8; 33]
                                             // + val: Value(Scalar(alloc52))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:291:13: 291:54
                                             // + literal: Const { ty: &[u8; 33], val: Value(Scalar(alloc52)) }
            _82 = &raw const (*_83);         // scope 1 at workspace/buffer/src/test.rs:291:13: 291:54
            _81 = move _82 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:291:13: 291:67
            _80 = move _81 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:291:13: 291:90
            _87 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:292:13: 292:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:292:13: 292:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _86 = &raw const (*_87);         // scope 1 at workspace/buffer/src/test.rs:292:13: 292:26
            _85 = move _86 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:292:13: 292:39
            _84 = move _85 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:292:13: 292:62
            _88 = const 67_u32;              // scope 1 at workspace/buffer/src/test.rs:293:13: 293:38
            _94 = const b"void test_buffer_append__grow()\x00"; // scope 1 at workspace/buffer/src/test.rs:295:17: 295:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:295:17: 295:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _93 = _94;                       // scope 1 at workspace/buffer/src/test.rs:295:17: 295:55
            _92 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _93) -> bb20; // scope 1 at workspace/buffer/src/test.rs:294:15: 296:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:294:15: 294:70
                                             // + user_ty: UserType(3)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb20: {
            _91 = _92;                       // scope 1 at workspace/buffer/src/test.rs:294:13: 297:22
            _90 = move _91 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:294:13: 297:22
            _89 = core::slice::<impl [i8]>::as_ptr(move _90) -> bb21; // scope 1 at workspace/buffer/src/test.rs:294:13: 297:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:297:14: 297:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb21: {
            src::test::__assert_fail(move _80, move _84, move _88, move _89); // scope 1 at workspace/buffer/src/test.rs:290:9: 298:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:290:9: 290:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb22: {
            _104 = const 1024_u64;           // scope 2 at workspace/buffer/src/test.rs:303:8: 303:26
            _106 = _1;                       // scope 2 at workspace/buffer/src/test.rs:303:42: 303:45
            _105 = src::test::buffer_size(move _106) -> bb23; // scope 2 at workspace/buffer/src/test.rs:303:30: 303:46
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:303:30: 303:41
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb23: {
            _103 = Eq(move _104, move _105); // scope 2 at workspace/buffer/src/test.rs:303:8: 303:46
            switchInt(move _103) -> [false: bb25, otherwise: bb24]; // scope 2 at workspace/buffer/src/test.rs:303:8: 303:46
        }
    
        bb24: {
            _125 = _95;                      // scope 2 at workspace/buffer/src/test.rs:315:15: 315:18
            _124 = move _125 as *const i8 (Pointer(MutToConstPointer)); // scope 2 at workspace/buffer/src/test.rs:315:15: 315:18
            _123 = src::test::strlen(move _124) -> bb28; // scope 2 at workspace/buffer/src/test.rs:315:8: 315:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:315:8: 315:14
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::test::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb25: {
            _110 = const b"1024 == buffer_size(buf)\x00"; // scope 2 at workspace/buffer/src/test.rs:306:13: 306:44
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc30))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:306:13: 306:44
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc30)) }
            _109 = &raw const (*_110);       // scope 2 at workspace/buffer/src/test.rs:306:13: 306:44
            _108 = move _109 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:306:13: 306:57
            _107 = move _108 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:306:13: 306:80
            _114 = const b"test.c\x00";      // scope 2 at workspace/buffer/src/test.rs:307:13: 307:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:307:13: 307:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _113 = &raw const (*_114);       // scope 2 at workspace/buffer/src/test.rs:307:13: 307:26
            _112 = move _113 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:307:13: 307:39
            _111 = move _112 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:307:13: 307:62
            _115 = const 71_u32;             // scope 2 at workspace/buffer/src/test.rs:308:13: 308:38
            _121 = const b"void test_buffer_append__grow()\x00"; // scope 2 at workspace/buffer/src/test.rs:310:17: 310:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:310:17: 310:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _120 = _121;                     // scope 2 at workspace/buffer/src/test.rs:310:17: 310:55
            _119 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _120) -> bb26; // scope 2 at workspace/buffer/src/test.rs:309:15: 311:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:309:15: 309:70
                                             // + user_ty: UserType(4)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb26: {
            _118 = _119;                     // scope 2 at workspace/buffer/src/test.rs:309:13: 312:22
            _117 = move _118 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:309:13: 312:22
            _116 = core::slice::<impl [i8]>::as_ptr(move _117) -> bb27; // scope 2 at workspace/buffer/src/test.rs:309:13: 312:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:312:14: 312:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb27: {
            src::test::__assert_fail(move _107, move _111, move _115, move _116); // scope 2 at workspace/buffer/src/test.rs:305:9: 313:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:305:9: 305:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb28: {
            _127 = _1;                       // scope 2 at workspace/buffer/src/test.rs:315:37: 315:40
            _126 = src::test::buffer_length(move _127) -> bb29; // scope 2 at workspace/buffer/src/test.rs:315:23: 315:41
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:315:23: 315:36
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb29: {
            _122 = Eq(move _123, move _126); // scope 2 at workspace/buffer/src/test.rs:315:8: 315:41
            switchInt(move _122) -> [false: bb31, otherwise: bb30]; // scope 2 at workspace/buffer/src/test.rs:315:8: 315:41
        }
    
        bb30: {
            _144 = _1;                       // scope 2 at workspace/buffer/src/test.rs:327:17: 327:20
            _143 = src::test::buffer_free(move _144) -> bb34; // scope 2 at workspace/buffer/src/test.rs:327:5: 327:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:327:5: 327:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb31: {
            _131 = const b"strlen(str) == buffer_length(buf)\x00"; // scope 2 at workspace/buffer/src/test.rs:318:13: 318:53
                                             // ty::Const
                                             // + ty: &[u8; 34]
                                             // + val: Value(Scalar(alloc54))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:318:13: 318:53
                                             // + literal: Const { ty: &[u8; 34], val: Value(Scalar(alloc54)) }
            _130 = &raw const (*_131);       // scope 2 at workspace/buffer/src/test.rs:318:13: 318:53
            _129 = move _130 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:318:13: 318:66
            _128 = move _129 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:318:13: 318:89
            _135 = const b"test.c\x00";      // scope 2 at workspace/buffer/src/test.rs:319:13: 319:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:319:13: 319:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _134 = &raw const (*_135);       // scope 2 at workspace/buffer/src/test.rs:319:13: 319:26
            _133 = move _134 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:319:13: 319:39
            _132 = move _133 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:319:13: 319:62
            _136 = const 72_u32;             // scope 2 at workspace/buffer/src/test.rs:320:13: 320:38
            _142 = const b"void test_buffer_append__grow()\x00"; // scope 2 at workspace/buffer/src/test.rs:322:17: 322:55
                                             // ty::Const
                                             // + ty: &[u8; 32]
                                             // + val: Value(Scalar(alloc46))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:322:17: 322:55
                                             // + literal: Const { ty: &[u8; 32], val: Value(Scalar(alloc46)) }
            _141 = _142;                     // scope 2 at workspace/buffer/src/test.rs:322:17: 322:55
            _140 = std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>(move _141) -> bb32; // scope 2 at workspace/buffer/src/test.rs:321:15: 323:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:321:15: 321:70
                                             // + user_ty: UserType(5)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 32]) -> &[i8; 32] {std::intrinsics::transmute::<&[u8; 32], &[i8; 32]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb32: {
            _139 = _140;                     // scope 2 at workspace/buffer/src/test.rs:321:13: 324:22
            _138 = move _139 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:321:13: 324:22
            _137 = core::slice::<impl [i8]>::as_ptr(move _138) -> bb33; // scope 2 at workspace/buffer/src/test.rs:321:13: 324:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:324:14: 324:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb33: {
            src::test::__assert_fail(move _128, move _132, move _136, move _137); // scope 2 at workspace/buffer/src/test.rs:317:9: 325:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:317:9: 317:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb34: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:328:2: 328:2
        }
    }
    
    alloc54 (size: 34, align: 1) {
        0x00 │ 73 74 72 6c 65 6e 28 73 74 72 29 20 3d 3d 20 62 │ strlen(str) == b
        0x10 │ 75 66 66 65 72 5f 6c 65 6e 67 74 68 28 62 75 66 │ uffer_length(buf
        0x20 │ 29 00                                           │ ).
    }
    
    alloc53 (size: 20, align: 1) {
        0x00 │ 48 65 6c 6c 6f 20 74 6f 62 69 20 77 61 73 20 68 │ Hello tobi was h
        0x10 │ 65 72 65 00                                     │ ere.
    }
    
    alloc52 (size: 33, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 20 68 65 72 65 22 29 │ nd(buf, " here")
        0x20 │ 00                                              │ .
    }
    
    alloc51 (size: 6, align: 1) {
        20 68 65 72 65 00                               │  here.
    }
    
    alloc50 (size: 32, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 20 77 61 73 22 29 00 │ nd(buf, " was").
    }
    
    alloc49 (size: 5, align: 1) {
        20 77 61 73 00                                  │  was.
    }
    
    alloc48 (size: 33, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 20 74 6f 62 69 22 29 │ nd(buf, " tobi")
        0x20 │ 00                                              │ .
    }
    
    alloc47 (size: 6, align: 1) {
        20 74 6f 62 69 00                               │  tobi.
    }
    
    alloc46 (size: 32, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 61 70 70 65 6e 64 5f 5f 67 72 6f 77 28 29 00 │ _append__grow().
    }
    
    alloc33 (size: 33, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 48 65 6c 6c 6f 22 29 │ nd(buf, "Hello")
        0x20 │ 00                                              │ .
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc30 (size: 25, align: 1) {
        0x00 │ 31 30 32 34 20 3d 3d 20 62 75 66 66 65 72 5f 73 │ 1024 == buffer_s
        0x10 │ 69 7a 65 28 62 75 66 29 00                      │ ize(buf).
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_prepend() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:330:48: 330:48
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:331:9: 331:16
        let mut _2: bool;                    // in scope 0 at workspace/buffer/src/test.rs:332:8: 332:89
        let mut _3: i32;                     // in scope 0 at workspace/buffer/src/test.rs:332:8: 332:16
        let mut _4: i32;                     // in scope 0 at workspace/buffer/src/test.rs:332:20: 332:89
        let mut _5: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:332:34: 332:37
        let mut _6: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:332:39: 332:88
        let mut _7: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:332:39: 332:65
        let mut _8: *const [u8; 7];          // in scope 0 at workspace/buffer/src/test.rs:332:39: 332:52
        let _9: &[u8; 7];                    // in scope 0 at workspace/buffer/src/test.rs:332:39: 332:52
        let mut _10: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:335:13: 335:91
        let mut _11: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:335:13: 335:68
        let mut _12: *const [u8; 34];        // in scope 0 at workspace/buffer/src/test.rs:335:13: 335:55
        let _13: &[u8; 34];                  // in scope 0 at workspace/buffer/src/test.rs:335:13: 335:55
        let mut _14: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:336:13: 336:62
        let mut _15: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:336:13: 336:39
        let mut _16: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:336:13: 336:26
        let _17: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:336:13: 336:26
        let mut _18: u32;                    // in scope 0 at workspace/buffer/src/test.rs:337:13: 337:38
        let mut _19: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:338:13: 341:22
        let mut _20: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:338:13: 341:22
        let mut _21: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:338:13: 341:22
        let _22: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:338:15: 340:14
        let mut _23: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:339:17: 339:50
        let _24: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:339:17: 339:50
        let mut _25: bool;                   // in scope 0 at workspace/buffer/src/test.rs:344:8: 348:10
        let mut _26: i32;                    // in scope 0 at workspace/buffer/src/test.rs:344:8: 344:16
        let mut _27: i32;                    // in scope 0 at workspace/buffer/src/test.rs:345:12: 348:10
        let mut _28: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:346:13: 346:16
        let mut _29: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:347:13: 347:82
        let mut _30: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:347:13: 347:61
        let mut _31: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:347:13: 347:38
        let mut _32: *const [u8; 6];         // in scope 0 at workspace/buffer/src/test.rs:347:13: 347:25
        let _33: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:347:13: 347:25
        let mut _34: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:352:13: 352:91
        let mut _35: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:352:13: 352:68
        let mut _36: *const [u8; 34];        // in scope 0 at workspace/buffer/src/test.rs:352:13: 352:55
        let _37: &[u8; 34];                  // in scope 0 at workspace/buffer/src/test.rs:352:13: 352:55
        let mut _38: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:353:13: 353:62
        let mut _39: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:353:13: 353:39
        let mut _40: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:353:13: 353:26
        let _41: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:353:13: 353:26
        let mut _42: u32;                    // in scope 0 at workspace/buffer/src/test.rs:354:13: 354:38
        let mut _43: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:355:13: 358:22
        let mut _44: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:355:13: 358:22
        let mut _45: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:355:13: 358:22
        let _46: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:355:15: 357:14
        let mut _47: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:356:17: 356:50
        let _48: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:356:17: 356:50
        let mut _49: bool;                   // in scope 0 at workspace/buffer/src/test.rs:361:8: 361:92
        let mut _50: u64;                    // in scope 0 at workspace/buffer/src/test.rs:361:8: 361:70
        let mut _51: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:361:15: 361:69
        let mut _52: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:361:15: 361:46
        let mut _53: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:361:15: 361:33
        let _54: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:361:15: 361:33
        let mut _55: u64;                    // in scope 0 at workspace/buffer/src/test.rs:361:74: 361:92
        let mut _56: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:361:88: 361:91
        let mut _57: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:364:13: 365:39
        let mut _58: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:364:13: 364:78
        let mut _59: *const [u8; 44];        // in scope 0 at workspace/buffer/src/test.rs:364:13: 364:65
        let _60: &[u8; 44];                  // in scope 0 at workspace/buffer/src/test.rs:364:13: 364:65
        let mut _61: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:366:13: 366:62
        let mut _62: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:366:13: 366:39
        let mut _63: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:366:13: 366:26
        let _64: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:366:13: 366:26
        let mut _65: u32;                    // in scope 0 at workspace/buffer/src/test.rs:367:13: 367:38
        let mut _66: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:368:13: 371:22
        let mut _67: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:368:13: 371:22
        let mut _68: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:368:13: 371:22
        let _69: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:368:15: 370:14
        let mut _70: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:369:17: 369:50
        let _71: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:369:17: 369:50
        let _72: ();                         // in scope 0 at workspace/buffer/src/test.rs:374:5: 377:6
        let mut _73: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:375:9: 375:84
        let mut _74: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:375:9: 375:63
        let mut _75: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:375:9: 375:40
        let mut _76: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:375:9: 375:27
        let _77: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:375:9: 375:27
        let mut _78: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:376:9: 376:20
        let _79: ();                         // in scope 0 at workspace/buffer/src/test.rs:378:5: 378:21
        let mut _80: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:378:17: 378:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:331:9: 331:16
        }
    
        bb0: {
            _1 = src::test::buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:331:19: 331:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:331:19: 331:29
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut src::test::buffer_t {src::test::buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = const 0_i32;                // scope 1 at workspace/buffer/src/test.rs:332:8: 332:9
            _5 = _1;                         // scope 1 at workspace/buffer/src/test.rs:332:34: 332:37
            _9 = const b" World\x00";        // scope 1 at workspace/buffer/src/test.rs:332:39: 332:52
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc35))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:332:39: 332:52
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc35)) }
            _8 = &raw const (*_9);           // scope 1 at workspace/buffer/src/test.rs:332:39: 332:52
            _7 = move _8 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:332:39: 332:65
            _6 = move _7 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:332:39: 332:88
            _4 = src::test::buffer_append(move _5, move _6) -> bb2; // scope 1 at workspace/buffer/src/test.rs:332:20: 332:89
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:332:20: 332:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _2 = Eq(move _3, move _4);       // scope 1 at workspace/buffer/src/test.rs:332:8: 332:89
            switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:332:8: 332:89
        }
    
        bb3: {
            _26 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:344:8: 344:9
            _28 = _1;                        // scope 1 at workspace/buffer/src/test.rs:346:13: 346:16
            _33 = const b"Hello\x00";        // scope 1 at workspace/buffer/src/test.rs:347:13: 347:25
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:347:13: 347:25
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _32 = &raw const (*_33);         // scope 1 at workspace/buffer/src/test.rs:347:13: 347:25
            _31 = move _32 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:347:13: 347:38
            _30 = move _31 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:347:13: 347:61
            _29 = move _30 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:347:13: 347:82
            _27 = src::test::buffer_prepend(move _28, move _29) -> bb7; // scope 1 at workspace/buffer/src/test.rs:345:12: 348:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:345:12: 345:26
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut i8) -> i32 {src::test::buffer_prepend}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _13 = const b"0 == buffer_append(buf, \" World\")\x00"; // scope 1 at workspace/buffer/src/test.rs:335:13: 335:55
                                             // ty::Const
                                             // + ty: &[u8; 34]
                                             // + val: Value(Scalar(alloc36))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:335:13: 335:55
                                             // + literal: Const { ty: &[u8; 34], val: Value(Scalar(alloc36)) }
            _12 = &raw const (*_13);         // scope 1 at workspace/buffer/src/test.rs:335:13: 335:55
            _11 = move _12 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:335:13: 335:68
            _10 = move _11 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:335:13: 335:91
            _17 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:336:13: 336:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:336:13: 336:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _16 = &raw const (*_17);         // scope 1 at workspace/buffer/src/test.rs:336:13: 336:26
            _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:336:13: 336:39
            _14 = move _15 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:336:13: 336:62
            _18 = const 79_u32;              // scope 1 at workspace/buffer/src/test.rs:337:13: 337:38
            _24 = const b"void test_buffer_prepend()\x00"; // scope 1 at workspace/buffer/src/test.rs:339:17: 339:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc55))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:339:17: 339:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc55)) }
            _23 = _24;                       // scope 1 at workspace/buffer/src/test.rs:339:17: 339:50
            _22 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _23) -> bb5; // scope 1 at workspace/buffer/src/test.rs:338:15: 340:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:338:15: 338:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _21 = _22;                       // scope 1 at workspace/buffer/src/test.rs:338:13: 341:22
            _20 = move _21 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:338:13: 341:22
            _19 = core::slice::<impl [i8]>::as_ptr(move _20) -> bb6; // scope 1 at workspace/buffer/src/test.rs:338:13: 341:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:341:14: 341:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _10, move _14, move _18, move _19); // scope 1 at workspace/buffer/src/test.rs:334:9: 342:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:334:9: 334:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _25 = Eq(move _26, move _27);    // scope 1 at workspace/buffer/src/test.rs:344:8: 348:10
            switchInt(move _25) -> [false: bb9, otherwise: bb8]; // scope 1 at workspace/buffer/src/test.rs:344:8: 348:10
        }
    
        bb8: {
            _54 = const b"Hello World\x00";  // scope 1 at workspace/buffer/src/test.rs:361:15: 361:33
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc37))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:361:15: 361:33
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc37)) }
            _53 = &raw const (*_54);         // scope 1 at workspace/buffer/src/test.rs:361:15: 361:33
            _52 = move _53 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:361:15: 361:46
            _51 = move _52 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:361:15: 361:69
            _50 = src::test::strlen(move _51) -> bb12; // scope 1 at workspace/buffer/src/test.rs:361:8: 361:70
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:361:8: 361:14
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8) -> u64 {src::test::strlen}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _37 = const b"0 == buffer_prepend(buf, \"Hello\")\x00"; // scope 1 at workspace/buffer/src/test.rs:352:13: 352:55
                                             // ty::Const
                                             // + ty: &[u8; 34]
                                             // + val: Value(Scalar(alloc56))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:352:13: 352:55
                                             // + literal: Const { ty: &[u8; 34], val: Value(Scalar(alloc56)) }
            _36 = &raw const (*_37);         // scope 1 at workspace/buffer/src/test.rs:352:13: 352:55
            _35 = move _36 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:352:13: 352:68
            _34 = move _35 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:352:13: 352:91
            _41 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:353:13: 353:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:353:13: 353:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _40 = &raw const (*_41);         // scope 1 at workspace/buffer/src/test.rs:353:13: 353:26
            _39 = move _40 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:353:13: 353:39
            _38 = move _39 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:353:13: 353:62
            _42 = const 80_u32;              // scope 1 at workspace/buffer/src/test.rs:354:13: 354:38
            _48 = const b"void test_buffer_prepend()\x00"; // scope 1 at workspace/buffer/src/test.rs:356:17: 356:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc55))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:356:17: 356:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc55)) }
            _47 = _48;                       // scope 1 at workspace/buffer/src/test.rs:356:17: 356:50
            _46 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _47) -> bb10; // scope 1 at workspace/buffer/src/test.rs:355:15: 357:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:355:15: 355:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _45 = _46;                       // scope 1 at workspace/buffer/src/test.rs:355:13: 358:22
            _44 = move _45 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:355:13: 358:22
            _43 = core::slice::<impl [i8]>::as_ptr(move _44) -> bb11; // scope 1 at workspace/buffer/src/test.rs:355:13: 358:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:358:14: 358:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _34, move _38, move _42, move _43); // scope 1 at workspace/buffer/src/test.rs:351:9: 359:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:351:9: 351:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _56 = _1;                        // scope 1 at workspace/buffer/src/test.rs:361:88: 361:91
            _55 = src::test::buffer_length(move _56) -> bb13; // scope 1 at workspace/buffer/src/test.rs:361:74: 361:92
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:361:74: 361:87
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            _49 = Eq(move _50, move _55);    // scope 1 at workspace/buffer/src/test.rs:361:8: 361:92
            switchInt(move _49) -> [false: bb15, otherwise: bb14]; // scope 1 at workspace/buffer/src/test.rs:361:8: 361:92
        }
    
        bb14: {
            _77 = const b"Hello World\x00";  // scope 1 at workspace/buffer/src/test.rs:375:9: 375:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc37))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:375:9: 375:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc37)) }
            _76 = &raw const (*_77);         // scope 1 at workspace/buffer/src/test.rs:375:9: 375:27
            _75 = move _76 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:375:9: 375:40
            _74 = move _75 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:375:9: 375:63
            _73 = move _74 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:375:9: 375:84
            _78 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:376:9: 376:20
            _72 = src::test::equal(move _73, move _78) -> bb18; // scope 1 at workspace/buffer/src/test.rs:374:5: 377:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:374:5: 374:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _60 = const b"strlen(\"Hello World\") == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:364:13: 364:65
                                             // ty::Const
                                             // + ty: &[u8; 44]
                                             // + val: Value(Scalar(alloc38))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:364:13: 364:65
                                             // + literal: Const { ty: &[u8; 44], val: Value(Scalar(alloc38)) }
            _59 = &raw const (*_60);         // scope 1 at workspace/buffer/src/test.rs:364:13: 364:65
            _58 = move _59 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:364:13: 364:78
            _57 = move _58 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:364:13: 365:39
            _64 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:366:13: 366:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:366:13: 366:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _63 = &raw const (*_64);         // scope 1 at workspace/buffer/src/test.rs:366:13: 366:26
            _62 = move _63 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:366:13: 366:39
            _61 = move _62 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:366:13: 366:62
            _65 = const 81_u32;              // scope 1 at workspace/buffer/src/test.rs:367:13: 367:38
            _71 = const b"void test_buffer_prepend()\x00"; // scope 1 at workspace/buffer/src/test.rs:369:17: 369:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc55))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:369:17: 369:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc55)) }
            _70 = _71;                       // scope 1 at workspace/buffer/src/test.rs:369:17: 369:50
            _69 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _70) -> bb16; // scope 1 at workspace/buffer/src/test.rs:368:15: 370:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:368:15: 368:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            _68 = _69;                       // scope 1 at workspace/buffer/src/test.rs:368:13: 371:22
            _67 = move _68 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:368:13: 371:22
            _66 = core::slice::<impl [i8]>::as_ptr(move _67) -> bb17; // scope 1 at workspace/buffer/src/test.rs:368:13: 371:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:371:14: 371:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            src::test::__assert_fail(move _57, move _61, move _65, move _66); // scope 1 at workspace/buffer/src/test.rs:363:9: 372:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:363:9: 363:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb18: {
            _80 = _1;                        // scope 1 at workspace/buffer/src/test.rs:378:17: 378:20
            _79 = src::test::buffer_free(move _80) -> bb19; // scope 1 at workspace/buffer/src/test.rs:378:5: 378:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:378:5: 378:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb19: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:379:2: 379:2
        }
    }
    
    alloc56 (size: 34, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 70 72 65 70 │ 0 == buffer_prep
        0x10 │ 65 6e 64 28 62 75 66 2c 20 22 48 65 6c 6c 6f 22 │ end(buf, "Hello"
        0x20 │ 29 00                                           │ ).
    }
    
    alloc55 (size: 27, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 70 72 65 70 65 6e 64 28 29 00                │ _prepend().
    }
    
    alloc38 (size: 44, align: 1) {
        0x00 │ 73 74 72 6c 65 6e 28 22 48 65 6c 6c 6f 20 57 6f │ strlen("Hello Wo
        0x10 │ 72 6c 64 22 29 20 3d 3d 20 62 75 66 66 65 72 5f │ rld") == buffer_
        0x20 │ 6c 65 6e 67 74 68 28 62 75 66 29 00             │ length(buf).
    }
    
    alloc37 (size: 12, align: 1) {
        48 65 6c 6c 6f 20 57 6f 72 6c 64 00             │ Hello World.
    }
    
    alloc36 (size: 34, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 61 70 70 65 │ 0 == buffer_appe
        0x10 │ 6e 64 28 62 75 66 2c 20 22 20 57 6f 72 6c 64 22 │ nd(buf, " World"
        0x20 │ 29 00                                           │ ).
    }
    
    alloc35 (size: 7, align: 1) {
        20 57 6f 72 6c 64 00                            │  World.
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_slice() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:381:46: 381:46
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:382:9: 382:16
        let _2: i32;                         // in scope 0 at workspace/buffer/src/test.rs:383:5: 383:79
        let mut _3: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:383:19: 383:22
        let mut _4: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:383:24: 383:78
        let mut _5: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:383:24: 383:55
        let mut _6: *const [u8; 12];         // in scope 0 at workspace/buffer/src/test.rs:383:24: 383:42
        let _7: &[u8; 12];                   // in scope 0 at workspace/buffer/src/test.rs:383:24: 383:42
        let mut _9: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:384:30: 384:33
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/test.rs:384:35: 384:53
        let mut _11: i64;                    // in scope 0 at workspace/buffer/src/test.rs:384:55: 384:74
        let _12: ();                         // in scope 0 at workspace/buffer/src/test.rs:385:5: 388:6
        let mut _13: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:386:9: 386:84
        let mut _14: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:386:9: 386:63
        let mut _15: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:386:9: 386:40
        let mut _16: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:386:9: 386:27
        let _17: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:386:9: 386:27
        let mut _18: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:387:9: 387:20
        let _19: ();                         // in scope 0 at workspace/buffer/src/test.rs:389:5: 392:6
        let mut _20: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:390:9: 390:79
        let mut _21: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:390:9: 390:58
        let mut _22: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:390:9: 390:35
        let mut _23: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:390:9: 390:22
        let _24: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:390:9: 390:22
        let mut _25: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:391:9: 391:18
        let _26: ();                         // in scope 0 at workspace/buffer/src/test.rs:393:5: 393:21
        let mut _27: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:393:17: 393:20
        let _28: ();                         // in scope 0 at workspace/buffer/src/test.rs:394:5: 394:19
        let mut _29: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:394:17: 394:18
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:382:9: 382:16
            let mut _8: *mut src::test::buffer_t; // in scope 1 at workspace/buffer/src/test.rs:384:9: 384:14
            scope 2 {
                debug a => _8;               // in scope 2 at workspace/buffer/src/test.rs:384:9: 384:14
            }
        }
    
        bb0: {
            _1 = src::test::buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:382:19: 382:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:382:19: 382:29
                                             // + literal: Const { ty: unsafe extern "C" fn() -> *mut src::test::buffer_t {src::test::buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _3 = _1;                         // scope 1 at workspace/buffer/src/test.rs:383:19: 383:22
            _7 = const b"Tobi Ferret\x00";   // scope 1 at workspace/buffer/src/test.rs:383:24: 383:42
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:383:24: 383:42
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _6 = &raw const (*_7);           // scope 1 at workspace/buffer/src/test.rs:383:24: 383:42
            _5 = move _6 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:383:24: 383:55
            _4 = move _5 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:383:24: 383:78
            _2 = src::test::buffer_append(move _3, move _4) -> bb2; // scope 1 at workspace/buffer/src/test.rs:383:5: 383:79
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:383:5: 383:18
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _9 = _1;                         // scope 1 at workspace/buffer/src/test.rs:384:30: 384:33
            _10 = const 2_u64;               // scope 1 at workspace/buffer/src/test.rs:384:35: 384:53
            _11 = const 8_i64;               // scope 1 at workspace/buffer/src/test.rs:384:55: 384:74
            _8 = src::test::buffer_slice(move _9, move _10, move _11) -> bb3; // scope 1 at workspace/buffer/src/test.rs:384:17: 384:75
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:384:17: 384:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _17 = const b"Tobi Ferret\x00";  // scope 2 at workspace/buffer/src/test.rs:386:9: 386:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:386:9: 386:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _16 = &raw const (*_17);         // scope 2 at workspace/buffer/src/test.rs:386:9: 386:27
            _15 = move _16 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:386:9: 386:40
            _14 = move _15 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:386:9: 386:63
            _13 = move _14 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:386:9: 386:84
            _18 = ((*_1).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:387:9: 387:20
            _12 = src::test::equal(move _13, move _18) -> bb4; // scope 2 at workspace/buffer/src/test.rs:385:5: 388:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:385:5: 385:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _24 = const b"bi Fer\x00";       // scope 2 at workspace/buffer/src/test.rs:390:9: 390:22
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc58))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:390:9: 390:22
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc58)) }
            _23 = &raw const (*_24);         // scope 2 at workspace/buffer/src/test.rs:390:9: 390:22
            _22 = move _23 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:390:9: 390:35
            _21 = move _22 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:390:9: 390:58
            _20 = move _21 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:390:9: 390:79
            _25 = ((*_8).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:391:9: 391:18
            _19 = src::test::equal(move _20, move _25) -> bb5; // scope 2 at workspace/buffer/src/test.rs:389:5: 392:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:389:5: 389:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _27 = _1;                        // scope 2 at workspace/buffer/src/test.rs:393:17: 393:20
            _26 = src::test::buffer_free(move _27) -> bb6; // scope 2 at workspace/buffer/src/test.rs:393:5: 393:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:393:5: 393:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _29 = _8;                        // scope 2 at workspace/buffer/src/test.rs:394:17: 394:18
            _28 = src::test::buffer_free(move _29) -> bb7; // scope 2 at workspace/buffer/src/test.rs:394:5: 394:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:394:5: 394:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:395:2: 395:2
        }
    }
    
    alloc58 (size: 7, align: 1) {
        62 69 20 46 65 72 00                            │ bi Fer.
    }
    
    alloc57 (size: 12, align: 1) {
        54 6f 62 69 20 46 65 72 72 65 74 00             │ Tobi Ferret.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_slice__range_error() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:397:59: 397:59
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:398:9: 398:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:399:9: 399:84
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:399:9: 399:63
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:399:9: 399:40
        let mut _5: *const [u8; 12];         // in scope 0 at workspace/buffer/src/test.rs:399:9: 399:27
        let _6: &[u8; 12];                   // in scope 0 at workspace/buffer/src/test.rs:399:9: 399:27
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:401:30: 401:33
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/test.rs:401:35: 401:54
        let mut _10: i64;                    // in scope 0 at workspace/buffer/src/test.rs:401:56: 401:75
        let mut _11: bool;                   // in scope 0 at workspace/buffer/src/test.rs:402:8: 402:19
        let mut _12: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:402:8: 402:9
        let mut _13: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:405:13: 405:65
        let mut _14: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:405:13: 405:42
        let mut _15: *const [u8; 10];        // in scope 0 at workspace/buffer/src/test.rs:405:13: 405:29
        let _16: &[u8; 10];                  // in scope 0 at workspace/buffer/src/test.rs:405:13: 405:29
        let mut _17: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:406:13: 406:62
        let mut _18: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:406:13: 406:39
        let mut _19: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:406:13: 406:26
        let _20: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:406:13: 406:26
        let mut _21: u32;                    // in scope 0 at workspace/buffer/src/test.rs:407:13: 407:39
        let mut _22: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:408:13: 411:22
        let mut _23: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:408:13: 411:22
        let mut _24: &[i8; 38];              // in scope 0 at workspace/buffer/src/test.rs:408:13: 411:22
        let _25: &[i8; 38];                  // in scope 0 at workspace/buffer/src/test.rs:408:15: 410:14
        let mut _26: &[u8; 38];              // in scope 0 at workspace/buffer/src/test.rs:409:17: 409:61
        let _27: &[u8; 38];                  // in scope 0 at workspace/buffer/src/test.rs:409:17: 409:61
        let _28: ();                         // in scope 0 at workspace/buffer/src/test.rs:414:5: 414:21
        let mut _29: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:414:17: 414:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:398:9: 398:16
            let mut _7: *mut src::test::buffer_t; // in scope 1 at workspace/buffer/src/test.rs:401:9: 401:14
            scope 2 {
                debug a => _7;               // in scope 2 at workspace/buffer/src/test.rs:401:9: 401:14
            }
        }
    
        bb0: {
            _6 = const b"Tobi Ferret\x00";   // scope 0 at workspace/buffer/src/test.rs:399:9: 399:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:399:9: 399:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:399:9: 399:27
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:399:9: 399:40
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:399:9: 399:63
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:399:9: 399:84
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:398:19: 400:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:398:19: 398:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:401:30: 401:33
            _9 = const 10_u64;               // scope 1 at workspace/buffer/src/test.rs:401:35: 401:54
            _10 = const 2_i64;               // scope 1 at workspace/buffer/src/test.rs:401:56: 401:75
            _7 = src::test::buffer_slice(move _8, move _9, move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:401:17: 401:76
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:401:17: 401:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _12 = _7;                        // scope 2 at workspace/buffer/src/test.rs:402:8: 402:9
            _11 = std::ptr::mut_ptr::<impl *mut src::test::buffer_t>::is_null(move _12) -> bb3; // scope 2 at workspace/buffer/src/test.rs:402:8: 402:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:402:10: 402:17
                                             // + literal: Const { ty: fn(*mut src::test::buffer_t) -> bool {std::ptr::mut_ptr::<impl *mut src::test::buffer_t>::is_null}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            switchInt(move _11) -> [false: bb5, otherwise: bb4]; // scope 2 at workspace/buffer/src/test.rs:402:8: 402:19
        }
    
        bb4: {
            _29 = _1;                        // scope 2 at workspace/buffer/src/test.rs:414:17: 414:20
            _28 = src::test::buffer_free(move _29) -> bb8; // scope 2 at workspace/buffer/src/test.rs:414:5: 414:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:414:5: 414:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _16 = const b"NULL == a\x00";    // scope 2 at workspace/buffer/src/test.rs:405:13: 405:29
                                             // ty::Const
                                             // + ty: &[u8; 10]
                                             // + val: Value(Scalar(alloc59))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:405:13: 405:29
                                             // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc59)) }
            _15 = &raw const (*_16);         // scope 2 at workspace/buffer/src/test.rs:405:13: 405:29
            _14 = move _15 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:405:13: 405:42
            _13 = move _14 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:405:13: 405:65
            _20 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:406:13: 406:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:406:13: 406:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _19 = &raw const (*_20);         // scope 2 at workspace/buffer/src/test.rs:406:13: 406:26
            _18 = move _19 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:406:13: 406:39
            _17 = move _18 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:406:13: 406:62
            _21 = const 103_u32;             // scope 2 at workspace/buffer/src/test.rs:407:13: 407:39
            _27 = const b"void test_buffer_slice__range_error()\x00"; // scope 2 at workspace/buffer/src/test.rs:409:17: 409:61
                                             // ty::Const
                                             // + ty: &[u8; 38]
                                             // + val: Value(Scalar(alloc60))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:409:17: 409:61
                                             // + literal: Const { ty: &[u8; 38], val: Value(Scalar(alloc60)) }
            _26 = _27;                       // scope 2 at workspace/buffer/src/test.rs:409:17: 409:61
            _25 = std::intrinsics::transmute::<&[u8; 38], &[i8; 38]>(move _26) -> bb6; // scope 2 at workspace/buffer/src/test.rs:408:15: 410:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:408:15: 408:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 38]) -> &[i8; 38] {std::intrinsics::transmute::<&[u8; 38], &[i8; 38]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _24 = _25;                       // scope 2 at workspace/buffer/src/test.rs:408:13: 411:22
            _23 = move _24 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:408:13: 411:22
            _22 = core::slice::<impl [i8]>::as_ptr(move _23) -> bb7; // scope 2 at workspace/buffer/src/test.rs:408:13: 411:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:411:14: 411:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            src::test::__assert_fail(move _13, move _17, move _21, move _22); // scope 2 at workspace/buffer/src/test.rs:404:9: 412:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:404:9: 404:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:415:2: 415:2
        }
    }
    
    alloc60 (size: 38, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 73 6c 69 63 65 5f 5f 72 61 6e 67 65 5f 65 72 │ _slice__range_er
        0x20 │ 72 6f 72 28 29 00                               │ ror().
    }
    
    alloc59 (size: 10, align: 1) {
        4e 55 4c 4c 20 3d 3d 20 61 00                   │ NULL == a.
    }
    
    alloc57 (size: 12, align: 1) {
        54 6f 62 69 20 46 65 72 72 65 74 00             │ Tobi Ferret.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_slice__end() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:417:51: 417:51
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:418:9: 418:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:419:9: 419:84
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:419:9: 419:63
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:419:9: 419:40
        let mut _5: *const [u8; 12];         // in scope 0 at workspace/buffer/src/test.rs:419:9: 419:27
        let _6: &[u8; 12];                   // in scope 0 at workspace/buffer/src/test.rs:419:9: 419:27
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:421:30: 421:33
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/test.rs:421:35: 421:53
        let mut _10: i64;                    // in scope 0 at workspace/buffer/src/test.rs:421:55: 421:77
        let _11: ();                         // in scope 0 at workspace/buffer/src/test.rs:422:5: 425:6
        let mut _12: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:423:9: 423:84
        let mut _13: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:423:9: 423:63
        let mut _14: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:423:9: 423:40
        let mut _15: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:423:9: 423:27
        let _16: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:423:9: 423:27
        let mut _17: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:424:9: 424:20
        let _18: ();                         // in scope 0 at workspace/buffer/src/test.rs:426:5: 429:6
        let mut _19: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:427:9: 427:79
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:427:9: 427:58
        let mut _21: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:427:9: 427:35
        let mut _22: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:427:9: 427:22
        let _23: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:427:9: 427:22
        let mut _24: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:428:9: 428:18
        let mut _26: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:430:30: 430:33
        let mut _27: u64;                    // in scope 0 at workspace/buffer/src/test.rs:430:35: 430:53
        let mut _28: i64;                    // in scope 0 at workspace/buffer/src/test.rs:430:55: 430:77
        let _29: ();                         // in scope 0 at workspace/buffer/src/test.rs:431:5: 434:6
        let mut _30: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:432:9: 432:77
        let mut _31: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:432:9: 432:56
        let mut _32: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:432:9: 432:33
        let mut _33: *const [u8; 5];         // in scope 0 at workspace/buffer/src/test.rs:432:9: 432:20
        let _34: &[u8; 5];                   // in scope 0 at workspace/buffer/src/test.rs:432:9: 432:20
        let mut _35: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:433:9: 433:18
        let mut _37: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:435:30: 435:33
        let mut _38: u64;                    // in scope 0 at workspace/buffer/src/test.rs:435:35: 435:53
        let mut _39: i64;                    // in scope 0 at workspace/buffer/src/test.rs:435:55: 435:77
        let _40: ();                         // in scope 0 at workspace/buffer/src/test.rs:436:5: 439:6
        let mut _41: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:437:9: 437:76
        let mut _42: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:437:9: 437:55
        let mut _43: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:437:9: 437:32
        let mut _44: *const [u8; 4];         // in scope 0 at workspace/buffer/src/test.rs:437:9: 437:19
        let _45: &[u8; 4];                   // in scope 0 at workspace/buffer/src/test.rs:437:9: 437:19
        let mut _46: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:438:9: 438:18
        let _47: ();                         // in scope 0 at workspace/buffer/src/test.rs:440:5: 440:21
        let mut _48: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:440:17: 440:20
        let _49: ();                         // in scope 0 at workspace/buffer/src/test.rs:441:5: 441:19
        let mut _50: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:441:17: 441:18
        let _51: ();                         // in scope 0 at workspace/buffer/src/test.rs:442:5: 442:19
        let mut _52: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:442:17: 442:18
        let _53: ();                         // in scope 0 at workspace/buffer/src/test.rs:443:5: 443:19
        let mut _54: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:443:17: 443:18
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:418:9: 418:16
            let mut _7: *mut src::test::buffer_t; // in scope 1 at workspace/buffer/src/test.rs:421:9: 421:14
            scope 2 {
                debug a => _7;               // in scope 2 at workspace/buffer/src/test.rs:421:9: 421:14
                let mut _25: *mut src::test::buffer_t; // in scope 2 at workspace/buffer/src/test.rs:430:9: 430:14
                scope 3 {
                    debug b => _25;          // in scope 3 at workspace/buffer/src/test.rs:430:9: 430:14
                    let mut _36: *mut src::test::buffer_t; // in scope 3 at workspace/buffer/src/test.rs:435:9: 435:14
                    scope 4 {
                        debug c => _36;      // in scope 4 at workspace/buffer/src/test.rs:435:9: 435:14
                    }
                }
            }
        }
    
        bb0: {
            _6 = const b"Tobi Ferret\x00";   // scope 0 at workspace/buffer/src/test.rs:419:9: 419:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:419:9: 419:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:419:9: 419:27
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:419:9: 419:40
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:419:9: 419:63
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:419:9: 419:84
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:418:19: 420:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:418:19: 418:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:421:30: 421:33
            _9 = const 5_u64;                // scope 1 at workspace/buffer/src/test.rs:421:35: 421:53
            _10 = const -1_i64;              // scope 1 at workspace/buffer/src/test.rs:421:55: 421:77
            _7 = src::test::buffer_slice(move _8, move _9, move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:421:17: 421:78
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:421:17: 421:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _16 = const b"Tobi Ferret\x00";  // scope 2 at workspace/buffer/src/test.rs:423:9: 423:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:423:9: 423:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _15 = &raw const (*_16);         // scope 2 at workspace/buffer/src/test.rs:423:9: 423:27
            _14 = move _15 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:423:9: 423:40
            _13 = move _14 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:423:9: 423:63
            _12 = move _13 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:423:9: 423:84
            _17 = ((*_1).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:424:9: 424:20
            _11 = src::test::equal(move _12, move _17) -> bb3; // scope 2 at workspace/buffer/src/test.rs:422:5: 425:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:422:5: 422:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _23 = const b"Ferret\x00";       // scope 2 at workspace/buffer/src/test.rs:427:9: 427:22
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc61))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:427:9: 427:22
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc61)) }
            _22 = &raw const (*_23);         // scope 2 at workspace/buffer/src/test.rs:427:9: 427:22
            _21 = move _22 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:427:9: 427:35
            _20 = move _21 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:427:9: 427:58
            _19 = move _20 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:427:9: 427:79
            _24 = ((*_7).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:428:9: 428:18
            _18 = src::test::equal(move _19, move _24) -> bb4; // scope 2 at workspace/buffer/src/test.rs:426:5: 429:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:426:5: 426:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _26 = _1;                        // scope 2 at workspace/buffer/src/test.rs:430:30: 430:33
            _27 = const 5_u64;               // scope 2 at workspace/buffer/src/test.rs:430:35: 430:53
            _28 = const -3_i64;              // scope 2 at workspace/buffer/src/test.rs:430:55: 430:77
            _25 = src::test::buffer_slice(move _26, move _27, move _28) -> bb5; // scope 2 at workspace/buffer/src/test.rs:430:17: 430:78
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:430:17: 430:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _34 = const b"Ferr\x00";         // scope 3 at workspace/buffer/src/test.rs:432:9: 432:20
                                             // ty::Const
                                             // + ty: &[u8; 5]
                                             // + val: Value(Scalar(alloc62))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:432:9: 432:20
                                             // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc62)) }
            _33 = &raw const (*_34);         // scope 3 at workspace/buffer/src/test.rs:432:9: 432:20
            _32 = move _33 as *const u8 (Pointer(ArrayToPointer)); // scope 3 at workspace/buffer/src/test.rs:432:9: 432:33
            _31 = move _32 as *const i8 (Misc); // scope 3 at workspace/buffer/src/test.rs:432:9: 432:56
            _30 = move _31 as *mut i8 (Misc); // scope 3 at workspace/buffer/src/test.rs:432:9: 432:77
            _35 = ((*_25).2: *mut i8);       // scope 3 at workspace/buffer/src/test.rs:433:9: 433:18
            _29 = src::test::equal(move _30, move _35) -> bb6; // scope 3 at workspace/buffer/src/test.rs:431:5: 434:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:431:5: 431:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _37 = _1;                        // scope 3 at workspace/buffer/src/test.rs:435:30: 435:33
            _38 = const 8_u64;               // scope 3 at workspace/buffer/src/test.rs:435:35: 435:53
            _39 = const -1_i64;              // scope 3 at workspace/buffer/src/test.rs:435:55: 435:77
            _36 = src::test::buffer_slice(move _37, move _38, move _39) -> bb7; // scope 3 at workspace/buffer/src/test.rs:435:17: 435:78
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:435:17: 435:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _45 = const b"ret\x00";          // scope 4 at workspace/buffer/src/test.rs:437:9: 437:19
                                             // ty::Const
                                             // + ty: &[u8; 4]
                                             // + val: Value(Scalar(alloc63))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:437:9: 437:19
                                             // + literal: Const { ty: &[u8; 4], val: Value(Scalar(alloc63)) }
            _44 = &raw const (*_45);         // scope 4 at workspace/buffer/src/test.rs:437:9: 437:19
            _43 = move _44 as *const u8 (Pointer(ArrayToPointer)); // scope 4 at workspace/buffer/src/test.rs:437:9: 437:32
            _42 = move _43 as *const i8 (Misc); // scope 4 at workspace/buffer/src/test.rs:437:9: 437:55
            _41 = move _42 as *mut i8 (Misc); // scope 4 at workspace/buffer/src/test.rs:437:9: 437:76
            _46 = ((*_36).2: *mut i8);       // scope 4 at workspace/buffer/src/test.rs:438:9: 438:18
            _40 = src::test::equal(move _41, move _46) -> bb8; // scope 4 at workspace/buffer/src/test.rs:436:5: 439:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:436:5: 436:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _48 = _1;                        // scope 4 at workspace/buffer/src/test.rs:440:17: 440:20
            _47 = src::test::buffer_free(move _48) -> bb9; // scope 4 at workspace/buffer/src/test.rs:440:5: 440:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:440:5: 440:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _50 = _7;                        // scope 4 at workspace/buffer/src/test.rs:441:17: 441:18
            _49 = src::test::buffer_free(move _50) -> bb10; // scope 4 at workspace/buffer/src/test.rs:441:5: 441:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:441:5: 441:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _52 = _25;                       // scope 4 at workspace/buffer/src/test.rs:442:17: 442:18
            _51 = src::test::buffer_free(move _52) -> bb11; // scope 4 at workspace/buffer/src/test.rs:442:5: 442:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:442:5: 442:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _54 = _36;                       // scope 4 at workspace/buffer/src/test.rs:443:17: 443:18
            _53 = src::test::buffer_free(move _54) -> bb12; // scope 4 at workspace/buffer/src/test.rs:443:5: 443:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:443:5: 443:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:444:2: 444:2
        }
    }
    
    alloc63 (size: 4, align: 1) {
        72 65 74 00                                     │ ret.
    }
    
    alloc62 (size: 5, align: 1) {
        46 65 72 72 00                                  │ Ferr.
    }
    
    alloc61 (size: 7, align: 1) {
        46 65 72 72 65 74 00                            │ Ferret.
    }
    
    alloc57 (size: 12, align: 1) {
        54 6f 62 69 20 46 65 72 72 65 74 00             │ Tobi Ferret.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_slice__end_overflow() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:446:60: 446:60
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:447:9: 447:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:448:9: 448:84
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:448:9: 448:63
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:448:9: 448:40
        let mut _5: *const [u8; 12];         // in scope 0 at workspace/buffer/src/test.rs:448:9: 448:27
        let _6: &[u8; 12];                   // in scope 0 at workspace/buffer/src/test.rs:448:9: 448:27
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:450:30: 450:33
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/test.rs:450:35: 450:53
        let mut _10: i64;                    // in scope 0 at workspace/buffer/src/test.rs:450:55: 450:77
        let _11: ();                         // in scope 0 at workspace/buffer/src/test.rs:451:5: 454:6
        let mut _12: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:452:9: 452:84
        let mut _13: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:452:9: 452:63
        let mut _14: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:452:9: 452:40
        let mut _15: *const [u8; 12];        // in scope 0 at workspace/buffer/src/test.rs:452:9: 452:27
        let _16: &[u8; 12];                  // in scope 0 at workspace/buffer/src/test.rs:452:9: 452:27
        let mut _17: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:453:9: 453:20
        let _18: ();                         // in scope 0 at workspace/buffer/src/test.rs:455:5: 458:6
        let mut _19: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:456:9: 456:79
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:456:9: 456:58
        let mut _21: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:456:9: 456:35
        let mut _22: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:456:9: 456:22
        let _23: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:456:9: 456:22
        let mut _24: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:457:9: 457:18
        let _25: ();                         // in scope 0 at workspace/buffer/src/test.rs:459:5: 459:19
        let mut _26: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:459:17: 459:18
        let _27: ();                         // in scope 0 at workspace/buffer/src/test.rs:460:5: 460:21
        let mut _28: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:460:17: 460:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:447:9: 447:16
            let mut _7: *mut src::test::buffer_t; // in scope 1 at workspace/buffer/src/test.rs:450:9: 450:14
            scope 2 {
                debug a => _7;               // in scope 2 at workspace/buffer/src/test.rs:450:9: 450:14
            }
        }
    
        bb0: {
            _6 = const b"Tobi Ferret\x00";   // scope 0 at workspace/buffer/src/test.rs:448:9: 448:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:448:9: 448:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:448:9: 448:27
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:448:9: 448:40
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:448:9: 448:63
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:448:9: 448:84
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:447:19: 449:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:447:19: 447:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:450:30: 450:33
            _9 = const 5_u64;                // scope 1 at workspace/buffer/src/test.rs:450:35: 450:53
            _10 = const 1000_i64;            // scope 1 at workspace/buffer/src/test.rs:450:55: 450:77
            _7 = src::test::buffer_slice(move _8, move _9, move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:450:17: 450:78
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:450:17: 450:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, u64, i64) -> *mut src::test::buffer_t {src::test::buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _16 = const b"Tobi Ferret\x00";  // scope 2 at workspace/buffer/src/test.rs:452:9: 452:27
                                             // ty::Const
                                             // + ty: &[u8; 12]
                                             // + val: Value(Scalar(alloc57))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:452:9: 452:27
                                             // + literal: Const { ty: &[u8; 12], val: Value(Scalar(alloc57)) }
            _15 = &raw const (*_16);         // scope 2 at workspace/buffer/src/test.rs:452:9: 452:27
            _14 = move _15 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:452:9: 452:40
            _13 = move _14 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:452:9: 452:63
            _12 = move _13 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:452:9: 452:84
            _17 = ((*_1).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:453:9: 453:20
            _11 = src::test::equal(move _12, move _17) -> bb3; // scope 2 at workspace/buffer/src/test.rs:451:5: 454:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:451:5: 451:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _23 = const b"Ferret\x00";       // scope 2 at workspace/buffer/src/test.rs:456:9: 456:22
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc61))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:456:9: 456:22
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc61)) }
            _22 = &raw const (*_23);         // scope 2 at workspace/buffer/src/test.rs:456:9: 456:22
            _21 = move _22 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:456:9: 456:35
            _20 = move _21 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:456:9: 456:58
            _19 = move _20 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:456:9: 456:79
            _24 = ((*_7).2: *mut i8);        // scope 2 at workspace/buffer/src/test.rs:457:9: 457:18
            _18 = src::test::equal(move _19, move _24) -> bb4; // scope 2 at workspace/buffer/src/test.rs:455:5: 458:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:455:5: 455:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _26 = _7;                        // scope 2 at workspace/buffer/src/test.rs:459:17: 459:18
            _25 = src::test::buffer_free(move _26) -> bb5; // scope 2 at workspace/buffer/src/test.rs:459:5: 459:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:459:5: 459:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _28 = _1;                        // scope 2 at workspace/buffer/src/test.rs:460:17: 460:20
            _27 = src::test::buffer_free(move _28) -> bb6; // scope 2 at workspace/buffer/src/test.rs:460:5: 460:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:460:5: 460:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:461:2: 461:2
        }
    }
    
    alloc61 (size: 7, align: 1) {
        46 65 72 72 65 74 00                            │ Ferret.
    }
    
    alloc57 (size: 12, align: 1) {
        54 6f 62 69 20 46 65 72 72 65 74 00             │ Tobi Ferret.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_equals() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:463:47: 463:47
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:464:9: 464:14
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:465:30: 465:99
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:465:30: 465:78
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:465:30: 465:55
        let mut _5: *const [u8; 6];          // in scope 0 at workspace/buffer/src/test.rs:465:30: 465:42
        let _6: &[u8; 6];                    // in scope 0 at workspace/buffer/src/test.rs:465:30: 465:42
        let mut _8: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:467:30: 467:99
        let mut _9: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:467:30: 467:78
        let mut _10: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:467:30: 467:55
        let mut _11: *const [u8; 6];         // in scope 0 at workspace/buffer/src/test.rs:467:30: 467:42
        let _12: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:467:30: 467:42
        let mut _13: bool;                   // in scope 0 at workspace/buffer/src/test.rs:468:8: 468:39
        let mut _14: i32;                    // in scope 0 at workspace/buffer/src/test.rs:468:8: 468:16
        let mut _15: i32;                    // in scope 0 at workspace/buffer/src/test.rs:468:20: 468:39
        let mut _16: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:468:34: 468:35
        let mut _17: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:468:37: 468:38
        let mut _18: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:471:13: 471:80
        let mut _19: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:471:13: 471:57
        let mut _20: *const [u8; 25];        // in scope 0 at workspace/buffer/src/test.rs:471:13: 471:44
        let _21: &[u8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:471:13: 471:44
        let mut _22: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:472:13: 472:62
        let mut _23: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:472:13: 472:39
        let mut _24: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:472:13: 472:26
        let _25: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:472:13: 472:26
        let mut _26: u32;                    // in scope 0 at workspace/buffer/src/test.rs:473:13: 473:39
        let mut _27: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:474:13: 477:22
        let mut _28: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:474:13: 477:22
        let mut _29: &[i8; 26];              // in scope 0 at workspace/buffer/src/test.rs:474:13: 477:22
        let _30: &[i8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:474:15: 476:14
        let mut _31: &[u8; 26];              // in scope 0 at workspace/buffer/src/test.rs:475:17: 475:49
        let _32: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:475:17: 475:49
        let _33: i32;                        // in scope 0 at workspace/buffer/src/test.rs:480:5: 480:72
        let mut _34: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:480:19: 480:20
        let mut _35: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:480:22: 480:71
        let mut _36: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:480:22: 480:48
        let mut _37: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:480:22: 480:35
        let _38: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:480:22: 480:35
        let mut _39: bool;                   // in scope 0 at workspace/buffer/src/test.rs:481:8: 481:39
        let mut _40: i32;                    // in scope 0 at workspace/buffer/src/test.rs:481:8: 481:16
        let mut _41: i32;                    // in scope 0 at workspace/buffer/src/test.rs:481:20: 481:39
        let mut _42: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:481:34: 481:35
        let mut _43: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:481:37: 481:38
        let mut _44: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:484:13: 484:80
        let mut _45: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:484:13: 484:57
        let mut _46: *const [u8; 25];        // in scope 0 at workspace/buffer/src/test.rs:484:13: 484:44
        let _47: &[u8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:484:13: 484:44
        let mut _48: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:485:13: 485:62
        let mut _49: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:485:13: 485:39
        let mut _50: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:485:13: 485:26
        let _51: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:485:13: 485:26
        let mut _52: u32;                    // in scope 0 at workspace/buffer/src/test.rs:486:13: 486:39
        let mut _53: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:487:13: 490:22
        let mut _54: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:487:13: 490:22
        let mut _55: &[i8; 26];              // in scope 0 at workspace/buffer/src/test.rs:487:13: 490:22
        let _56: &[i8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:487:15: 489:14
        let mut _57: &[u8; 26];              // in scope 0 at workspace/buffer/src/test.rs:488:17: 488:49
        let _58: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:488:17: 488:49
        let _59: ();                         // in scope 0 at workspace/buffer/src/test.rs:493:5: 493:19
        let mut _60: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:493:17: 493:18
        let _61: ();                         // in scope 0 at workspace/buffer/src/test.rs:494:5: 494:19
        let mut _62: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:494:17: 494:18
        scope 1 {
            debug a => _1;                   // in scope 1 at workspace/buffer/src/test.rs:464:9: 464:14
            let mut _7: *mut src::test::buffer_t; // in scope 1 at workspace/buffer/src/test.rs:466:9: 466:14
            scope 2 {
                debug b => _7;               // in scope 2 at workspace/buffer/src/test.rs:466:9: 466:14
            }
        }
    
        bb0: {
            _6 = const b"Hello\x00";         // scope 0 at workspace/buffer/src/test.rs:465:30: 465:42
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:465:30: 465:42
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:465:30: 465:42
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:465:30: 465:55
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:465:30: 465:78
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:465:30: 465:99
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:465:9: 465:100
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:465:9: 465:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _12 = const b"Hello\x00";        // scope 1 at workspace/buffer/src/test.rs:467:30: 467:42
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:467:30: 467:42
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _11 = &raw const (*_12);         // scope 1 at workspace/buffer/src/test.rs:467:30: 467:42
            _10 = move _11 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:467:30: 467:55
            _9 = move _10 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:467:30: 467:78
            _8 = move _9 as *mut i8 (Misc);  // scope 1 at workspace/buffer/src/test.rs:467:30: 467:99
            _7 = src::test::buffer_new_with_copy(move _8) -> bb2; // scope 1 at workspace/buffer/src/test.rs:467:9: 467:100
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:467:9: 467:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _14 = const 1_i32;               // scope 2 at workspace/buffer/src/test.rs:468:8: 468:9
            _16 = _1;                        // scope 2 at workspace/buffer/src/test.rs:468:34: 468:35
            _17 = _7;                        // scope 2 at workspace/buffer/src/test.rs:468:37: 468:38
            _15 = src::test::buffer_equals(move _16, move _17) -> bb3; // scope 2 at workspace/buffer/src/test.rs:468:20: 468:39
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:468:20: 468:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut src::test::buffer_t) -> i32 {src::test::buffer_equals}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _13 = Eq(move _14, move _15);    // scope 2 at workspace/buffer/src/test.rs:468:8: 468:39
            switchInt(move _13) -> [false: bb5, otherwise: bb4]; // scope 2 at workspace/buffer/src/test.rs:468:8: 468:39
        }
    
        bb4: {
            _34 = _7;                        // scope 2 at workspace/buffer/src/test.rs:480:19: 480:20
            _38 = const b" World\x00";       // scope 2 at workspace/buffer/src/test.rs:480:22: 480:35
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc35))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:480:22: 480:35
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc35)) }
            _37 = &raw const (*_38);         // scope 2 at workspace/buffer/src/test.rs:480:22: 480:35
            _36 = move _37 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:480:22: 480:48
            _35 = move _36 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:480:22: 480:71
            _33 = src::test::buffer_append(move _34, move _35) -> bb8; // scope 2 at workspace/buffer/src/test.rs:480:5: 480:72
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:480:5: 480:18
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *const i8) -> i32 {src::test::buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _21 = const b"1 == buffer_equals(a, b)\x00"; // scope 2 at workspace/buffer/src/test.rs:471:13: 471:44
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc64))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:471:13: 471:44
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc64)) }
            _20 = &raw const (*_21);         // scope 2 at workspace/buffer/src/test.rs:471:13: 471:44
            _19 = move _20 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:471:13: 471:57
            _18 = move _19 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:471:13: 471:80
            _25 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:472:13: 472:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:472:13: 472:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _24 = &raw const (*_25);         // scope 2 at workspace/buffer/src/test.rs:472:13: 472:26
            _23 = move _24 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:472:13: 472:39
            _22 = move _23 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:472:13: 472:62
            _26 = const 142_u32;             // scope 2 at workspace/buffer/src/test.rs:473:13: 473:39
            _32 = const b"void test_buffer_equals()\x00"; // scope 2 at workspace/buffer/src/test.rs:475:17: 475:49
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc65))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:475:17: 475:49
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc65)) }
            _31 = _32;                       // scope 2 at workspace/buffer/src/test.rs:475:17: 475:49
            _30 = std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>(move _31) -> bb6; // scope 2 at workspace/buffer/src/test.rs:474:15: 476:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:474:15: 474:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 26]) -> &[i8; 26] {std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _29 = _30;                       // scope 2 at workspace/buffer/src/test.rs:474:13: 477:22
            _28 = move _29 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:474:13: 477:22
            _27 = core::slice::<impl [i8]>::as_ptr(move _28) -> bb7; // scope 2 at workspace/buffer/src/test.rs:474:13: 477:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:477:14: 477:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            src::test::__assert_fail(move _18, move _22, move _26, move _27); // scope 2 at workspace/buffer/src/test.rs:470:9: 478:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:470:9: 470:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _40 = const 0_i32;               // scope 2 at workspace/buffer/src/test.rs:481:8: 481:9
            _42 = _1;                        // scope 2 at workspace/buffer/src/test.rs:481:34: 481:35
            _43 = _7;                        // scope 2 at workspace/buffer/src/test.rs:481:37: 481:38
            _41 = src::test::buffer_equals(move _42, move _43) -> bb9; // scope 2 at workspace/buffer/src/test.rs:481:20: 481:39
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:481:20: 481:33
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut src::test::buffer_t) -> i32 {src::test::buffer_equals}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _39 = Eq(move _40, move _41);    // scope 2 at workspace/buffer/src/test.rs:481:8: 481:39
            switchInt(move _39) -> [false: bb11, otherwise: bb10]; // scope 2 at workspace/buffer/src/test.rs:481:8: 481:39
        }
    
        bb10: {
            _60 = _1;                        // scope 2 at workspace/buffer/src/test.rs:493:17: 493:18
            _59 = src::test::buffer_free(move _60) -> bb14; // scope 2 at workspace/buffer/src/test.rs:493:5: 493:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:493:5: 493:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _47 = const b"0 == buffer_equals(a, b)\x00"; // scope 2 at workspace/buffer/src/test.rs:484:13: 484:44
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc66))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:484:13: 484:44
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc66)) }
            _46 = &raw const (*_47);         // scope 2 at workspace/buffer/src/test.rs:484:13: 484:44
            _45 = move _46 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:484:13: 484:57
            _44 = move _45 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:484:13: 484:80
            _51 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:485:13: 485:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:485:13: 485:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _50 = &raw const (*_51);         // scope 2 at workspace/buffer/src/test.rs:485:13: 485:26
            _49 = move _50 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:485:13: 485:39
            _48 = move _49 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:485:13: 485:62
            _52 = const 145_u32;             // scope 2 at workspace/buffer/src/test.rs:486:13: 486:39
            _58 = const b"void test_buffer_equals()\x00"; // scope 2 at workspace/buffer/src/test.rs:488:17: 488:49
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc65))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:488:17: 488:49
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc65)) }
            _57 = _58;                       // scope 2 at workspace/buffer/src/test.rs:488:17: 488:49
            _56 = std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>(move _57) -> bb12; // scope 2 at workspace/buffer/src/test.rs:487:15: 489:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:487:15: 487:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 26]) -> &[i8; 26] {std::intrinsics::transmute::<&[u8; 26], &[i8; 26]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _55 = _56;                       // scope 2 at workspace/buffer/src/test.rs:487:13: 490:22
            _54 = move _55 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:487:13: 490:22
            _53 = core::slice::<impl [i8]>::as_ptr(move _54) -> bb13; // scope 2 at workspace/buffer/src/test.rs:487:13: 490:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:490:14: 490:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            src::test::__assert_fail(move _44, move _48, move _52, move _53); // scope 2 at workspace/buffer/src/test.rs:483:9: 491:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:483:9: 483:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb14: {
            _62 = _7;                        // scope 2 at workspace/buffer/src/test.rs:494:17: 494:18
            _61 = src::test::buffer_free(move _62) -> bb15; // scope 2 at workspace/buffer/src/test.rs:494:5: 494:19
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:494:5: 494:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:495:2: 495:2
        }
    }
    
    alloc66 (size: 25, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 65 71 75 61 │ 0 == buffer_equa
        0x10 │ 6c 73 28 61 2c 20 62 29 00                      │ ls(a, b).
    }
    
    alloc65 (size: 26, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 65 71 75 61 6c 73 28 29 00                   │ _equals().
    }
    
    alloc64 (size: 25, align: 1) {
        0x00 │ 31 20 3d 3d 20 62 75 66 66 65 72 5f 65 71 75 61 │ 1 == buffer_equa
        0x10 │ 6c 73 28 61 2c 20 62 29 00                      │ ls(a, b).
    }
    
    alloc35 (size: 7, align: 1) {
        20 57 6f 72 6c 64 00                            │  World.
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_indexof() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:509:48: 509:48
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:510:9: 510:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:511:9: 511:89
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:511:9: 511:68
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:511:9: 511:45
        let mut _5: *const [u8; 17];         // in scope 0 at workspace/buffer/src/test.rs:511:9: 511:32
        let _6: &[u8; 17];                   // in scope 0 at workspace/buffer/src/test.rs:511:9: 511:32
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:514:9: 514:12
        let mut _9: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:515:9: 515:75
        let mut _10: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:515:9: 515:54
        let mut _11: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:515:9: 515:31
        let mut _12: *const [u8; 3];         // in scope 0 at workspace/buffer/src/test.rs:515:9: 515:18
        let _13: &[u8; 3];                   // in scope 0 at workspace/buffer/src/test.rs:515:9: 515:18
        let mut _14: bool;                   // in scope 0 at workspace/buffer/src/test.rs:517:8: 517:37
        let mut _15: i64;                    // in scope 0 at workspace/buffer/src/test.rs:517:8: 517:32
        let mut _16: i64;                    // in scope 0 at workspace/buffer/src/test.rs:517:36: 517:37
        let mut _17: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:520:13: 520:62
        let mut _18: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:520:13: 520:39
        let mut _19: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:520:13: 520:26
        let _20: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:520:13: 520:26
        let mut _21: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:521:13: 521:62
        let mut _22: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:521:13: 521:39
        let mut _23: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:521:13: 521:26
        let _24: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:521:13: 521:26
        let mut _25: u32;                    // in scope 0 at workspace/buffer/src/test.rs:522:13: 522:39
        let mut _26: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:523:13: 526:22
        let mut _27: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:523:13: 526:22
        let mut _28: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:523:13: 526:22
        let _29: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:523:15: 525:14
        let mut _30: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:524:17: 524:50
        let _31: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:524:17: 524:50
        let mut _32: i64;                    // in scope 0 at workspace/buffer/src/test.rs:529:9: 532:6
        let mut _33: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:530:9: 530:12
        let mut _34: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:531:9: 531:74
        let mut _35: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:531:9: 531:53
        let mut _36: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:531:9: 531:30
        let mut _37: *const [u8; 2];         // in scope 0 at workspace/buffer/src/test.rs:531:9: 531:17
        let _38: &[u8; 2];                   // in scope 0 at workspace/buffer/src/test.rs:531:9: 531:17
        let mut _39: bool;                   // in scope 0 at workspace/buffer/src/test.rs:533:8: 533:37
        let mut _40: i64;                    // in scope 0 at workspace/buffer/src/test.rs:533:8: 533:32
        let mut _41: i64;                    // in scope 0 at workspace/buffer/src/test.rs:533:36: 533:37
        let mut _42: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:536:13: 536:62
        let mut _43: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:536:13: 536:39
        let mut _44: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:536:13: 536:26
        let _45: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:536:13: 536:26
        let mut _46: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:537:13: 537:62
        let mut _47: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:537:13: 537:39
        let mut _48: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:537:13: 537:26
        let _49: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:537:13: 537:26
        let mut _50: u32;                    // in scope 0 at workspace/buffer/src/test.rs:538:13: 538:39
        let mut _51: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:539:13: 542:22
        let mut _52: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:539:13: 542:22
        let mut _53: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:539:13: 542:22
        let _54: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:539:15: 541:14
        let mut _55: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:540:17: 540:50
        let _56: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:540:17: 540:50
        let mut _57: i64;                    // in scope 0 at workspace/buffer/src/test.rs:545:9: 548:6
        let mut _58: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:546:9: 546:12
        let mut _59: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:547:9: 547:82
        let mut _60: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:547:9: 547:61
        let mut _61: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:547:9: 547:38
        let mut _62: *const [u8; 10];        // in scope 0 at workspace/buffer/src/test.rs:547:9: 547:25
        let _63: &[u8; 10];                  // in scope 0 at workspace/buffer/src/test.rs:547:9: 547:25
        let mut _64: bool;                   // in scope 0 at workspace/buffer/src/test.rs:549:8: 549:40
        let mut _65: i64;                    // in scope 0 at workspace/buffer/src/test.rs:549:8: 549:35
        let mut _66: i64;                    // in scope 0 at workspace/buffer/src/test.rs:549:39: 549:40
        let mut _67: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:552:13: 552:63
        let mut _68: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:552:13: 552:40
        let mut _69: *const [u8; 8];         // in scope 0 at workspace/buffer/src/test.rs:552:13: 552:27
        let _70: &[u8; 8];                   // in scope 0 at workspace/buffer/src/test.rs:552:13: 552:27
        let mut _71: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:553:13: 553:62
        let mut _72: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:553:13: 553:39
        let mut _73: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:553:13: 553:26
        let _74: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:553:13: 553:26
        let mut _75: u32;                    // in scope 0 at workspace/buffer/src/test.rs:554:13: 554:39
        let mut _76: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:555:13: 558:22
        let mut _77: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:555:13: 558:22
        let mut _78: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:555:13: 558:22
        let _79: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:555:15: 557:14
        let mut _80: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:556:17: 556:50
        let _81: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:556:17: 556:50
        let _82: ();                         // in scope 0 at workspace/buffer/src/test.rs:561:5: 561:21
        let mut _83: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:561:17: 561:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:510:9: 510:16
            let mut _7: i64;                 // in scope 1 at workspace/buffer/src/test.rs:513:9: 513:14
            scope 2 {
                debug i => _7;               // in scope 2 at workspace/buffer/src/test.rs:513:9: 513:14
            }
        }
    
        bb0: {
            _6 = const b"Tobi is a ferret\x00"; // scope 0 at workspace/buffer/src/test.rs:511:9: 511:32
                                             // ty::Const
                                             // + ty: &[u8; 17]
                                             // + val: Value(Scalar(alloc67))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:511:9: 511:32
                                             // + literal: Const { ty: &[u8; 17], val: Value(Scalar(alloc67)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:511:9: 511:32
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:511:9: 511:45
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:511:9: 511:68
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:511:9: 511:89
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:510:19: 512:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:510:19: 510:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:514:9: 514:12
            _13 = const b"is\x00";           // scope 1 at workspace/buffer/src/test.rs:515:9: 515:18
                                             // ty::Const
                                             // + ty: &[u8; 3]
                                             // + val: Value(Scalar(alloc68))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:515:9: 515:18
                                             // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc68)) }
            _12 = &raw const (*_13);         // scope 1 at workspace/buffer/src/test.rs:515:9: 515:18
            _11 = move _12 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:515:9: 515:31
            _10 = move _11 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:515:9: 515:54
            _9 = move _10 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:515:9: 515:75
            _7 = src::test::buffer_indexof(move _8, move _9) -> bb2; // scope 1 at workspace/buffer/src/test.rs:513:17: 516:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:513:17: 513:31
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut i8) -> i64 {src::test::buffer_indexof}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _15 = const 5_i64;               // scope 2 at workspace/buffer/src/test.rs:517:8: 517:32
            _16 = _7;                        // scope 2 at workspace/buffer/src/test.rs:517:36: 517:37
            _14 = Eq(move _15, move _16);    // scope 2 at workspace/buffer/src/test.rs:517:8: 517:37
            switchInt(move _14) -> [false: bb4, otherwise: bb3]; // scope 2 at workspace/buffer/src/test.rs:517:8: 517:37
        }
    
        bb3: {
            _33 = _1;                        // scope 2 at workspace/buffer/src/test.rs:530:9: 530:12
            _38 = const b"a\x00";            // scope 2 at workspace/buffer/src/test.rs:531:9: 531:17
                                             // ty::Const
                                             // + ty: &[u8; 2]
                                             // + val: Value(Scalar(alloc71))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:531:9: 531:17
                                             // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc71)) }
            _37 = &raw const (*_38);         // scope 2 at workspace/buffer/src/test.rs:531:9: 531:17
            _36 = move _37 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:531:9: 531:30
            _35 = move _36 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:531:9: 531:53
            _34 = move _35 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:531:9: 531:74
            _32 = src::test::buffer_indexof(move _33, move _34) -> bb7; // scope 2 at workspace/buffer/src/test.rs:529:9: 532:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:529:9: 529:23
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut i8) -> i64 {src::test::buffer_indexof}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _20 = const b"5 == i\x00";       // scope 2 at workspace/buffer/src/test.rs:520:13: 520:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc69))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:520:13: 520:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc69)) }
            _19 = &raw const (*_20);         // scope 2 at workspace/buffer/src/test.rs:520:13: 520:26
            _18 = move _19 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:520:13: 520:39
            _17 = move _18 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:520:13: 520:62
            _24 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:521:13: 521:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:521:13: 521:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _23 = &raw const (*_24);         // scope 2 at workspace/buffer/src/test.rs:521:13: 521:26
            _22 = move _23 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:521:13: 521:39
            _21 = move _22 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:521:13: 521:62
            _25 = const 169_u32;             // scope 2 at workspace/buffer/src/test.rs:522:13: 522:39
            _31 = const b"void test_buffer_indexof()\x00"; // scope 2 at workspace/buffer/src/test.rs:524:17: 524:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc70))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:524:17: 524:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc70)) }
            _30 = _31;                       // scope 2 at workspace/buffer/src/test.rs:524:17: 524:50
            _29 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _30) -> bb5; // scope 2 at workspace/buffer/src/test.rs:523:15: 525:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:523:15: 523:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _28 = _29;                       // scope 2 at workspace/buffer/src/test.rs:523:13: 526:22
            _27 = move _28 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:523:13: 526:22
            _26 = core::slice::<impl [i8]>::as_ptr(move _27) -> bb6; // scope 2 at workspace/buffer/src/test.rs:523:13: 526:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:526:14: 526:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _17, move _21, move _25, move _26); // scope 2 at workspace/buffer/src/test.rs:519:9: 527:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:519:9: 519:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _7 = move _32;                   // scope 2 at workspace/buffer/src/test.rs:529:5: 532:6
            _40 = const 8_i64;               // scope 2 at workspace/buffer/src/test.rs:533:8: 533:32
            _41 = _7;                        // scope 2 at workspace/buffer/src/test.rs:533:36: 533:37
            _39 = Eq(move _40, move _41);    // scope 2 at workspace/buffer/src/test.rs:533:8: 533:37
            switchInt(move _39) -> [false: bb9, otherwise: bb8]; // scope 2 at workspace/buffer/src/test.rs:533:8: 533:37
        }
    
        bb8: {
            _58 = _1;                        // scope 2 at workspace/buffer/src/test.rs:546:9: 546:12
            _63 = const b"something\x00";    // scope 2 at workspace/buffer/src/test.rs:547:9: 547:25
                                             // ty::Const
                                             // + ty: &[u8; 10]
                                             // + val: Value(Scalar(alloc73))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:547:9: 547:25
                                             // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc73)) }
            _62 = &raw const (*_63);         // scope 2 at workspace/buffer/src/test.rs:547:9: 547:25
            _61 = move _62 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:547:9: 547:38
            _60 = move _61 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:547:9: 547:61
            _59 = move _60 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:547:9: 547:82
            _57 = src::test::buffer_indexof(move _58, move _59) -> bb12; // scope 2 at workspace/buffer/src/test.rs:545:9: 548:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:545:9: 545:23
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, *mut i8) -> i64 {src::test::buffer_indexof}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _45 = const b"8 == i\x00";       // scope 2 at workspace/buffer/src/test.rs:536:13: 536:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc72))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:536:13: 536:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc72)) }
            _44 = &raw const (*_45);         // scope 2 at workspace/buffer/src/test.rs:536:13: 536:26
            _43 = move _44 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:536:13: 536:39
            _42 = move _43 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:536:13: 536:62
            _49 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:537:13: 537:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:537:13: 537:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _48 = &raw const (*_49);         // scope 2 at workspace/buffer/src/test.rs:537:13: 537:26
            _47 = move _48 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:537:13: 537:39
            _46 = move _47 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:537:13: 537:62
            _50 = const 172_u32;             // scope 2 at workspace/buffer/src/test.rs:538:13: 538:39
            _56 = const b"void test_buffer_indexof()\x00"; // scope 2 at workspace/buffer/src/test.rs:540:17: 540:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc70))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:540:17: 540:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc70)) }
            _55 = _56;                       // scope 2 at workspace/buffer/src/test.rs:540:17: 540:50
            _54 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _55) -> bb10; // scope 2 at workspace/buffer/src/test.rs:539:15: 541:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:539:15: 539:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _53 = _54;                       // scope 2 at workspace/buffer/src/test.rs:539:13: 542:22
            _52 = move _53 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:539:13: 542:22
            _51 = core::slice::<impl [i8]>::as_ptr(move _52) -> bb11; // scope 2 at workspace/buffer/src/test.rs:539:13: 542:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:542:14: 542:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            src::test::__assert_fail(move _42, move _46, move _50, move _51); // scope 2 at workspace/buffer/src/test.rs:535:9: 543:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:535:9: 535:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _7 = move _57;                   // scope 2 at workspace/buffer/src/test.rs:545:5: 548:6
            _65 = const -1_i64;              // scope 2 at workspace/buffer/src/test.rs:549:8: 549:35
            _66 = _7;                        // scope 2 at workspace/buffer/src/test.rs:549:39: 549:40
            _64 = Eq(move _65, move _66);    // scope 2 at workspace/buffer/src/test.rs:549:8: 549:40
            switchInt(move _64) -> [false: bb14, otherwise: bb13]; // scope 2 at workspace/buffer/src/test.rs:549:8: 549:40
        }
    
        bb13: {
            _83 = _1;                        // scope 2 at workspace/buffer/src/test.rs:561:17: 561:20
            _82 = src::test::buffer_free(move _83) -> bb17; // scope 2 at workspace/buffer/src/test.rs:561:5: 561:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:561:5: 561:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb14: {
            _70 = const b"-1 == i\x00";      // scope 2 at workspace/buffer/src/test.rs:552:13: 552:27
                                             // ty::Const
                                             // + ty: &[u8; 8]
                                             // + val: Value(Scalar(alloc74))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:552:13: 552:27
                                             // + literal: Const { ty: &[u8; 8], val: Value(Scalar(alloc74)) }
            _69 = &raw const (*_70);         // scope 2 at workspace/buffer/src/test.rs:552:13: 552:27
            _68 = move _69 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:552:13: 552:40
            _67 = move _68 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:552:13: 552:63
            _74 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:553:13: 553:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:553:13: 553:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _73 = &raw const (*_74);         // scope 2 at workspace/buffer/src/test.rs:553:13: 553:26
            _72 = move _73 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:553:13: 553:39
            _71 = move _72 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:553:13: 553:62
            _75 = const 175_u32;             // scope 2 at workspace/buffer/src/test.rs:554:13: 554:39
            _81 = const b"void test_buffer_indexof()\x00"; // scope 2 at workspace/buffer/src/test.rs:556:17: 556:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc70))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:556:17: 556:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc70)) }
            _80 = _81;                       // scope 2 at workspace/buffer/src/test.rs:556:17: 556:50
            _79 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _80) -> bb15; // scope 2 at workspace/buffer/src/test.rs:555:15: 557:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:555:15: 555:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _78 = _79;                       // scope 2 at workspace/buffer/src/test.rs:555:13: 558:22
            _77 = move _78 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:555:13: 558:22
            _76 = core::slice::<impl [i8]>::as_ptr(move _77) -> bb16; // scope 2 at workspace/buffer/src/test.rs:555:13: 558:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:558:14: 558:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            src::test::__assert_fail(move _67, move _71, move _75, move _76); // scope 2 at workspace/buffer/src/test.rs:551:9: 559:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:551:9: 551:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:562:2: 562:2
        }
    }
    
    alloc74 (size: 8, align: 1) {
        2d 31 20 3d 3d 20 69 00                         │ -1 == i.
    }
    
    alloc73 (size: 10, align: 1) {
        73 6f 6d 65 74 68 69 6e 67 00                   │ something.
    }
    
    alloc72 (size: 7, align: 1) {
        38 20 3d 3d 20 69 00                            │ 8 == i.
    }
    
    alloc71 (size: 2, align: 1) {
        61 00                                           │ a.
    }
    
    alloc70 (size: 27, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 69 6e 64 65 78 6f 66 28 29 00                │ _indexof().
    }
    
    alloc69 (size: 7, align: 1) {
        35 20 3d 3d 20 69 00                            │ 5 == i.
    }
    
    alloc68 (size: 3, align: 1) {
        69 73 00                                        │ is.
    }
    
    alloc67 (size: 17, align: 1) {
        0x00 │ 54 6f 62 69 20 69 73 20 61 20 66 65 72 72 65 74 │ Tobi is a ferret
        0x10 │ 00                                              │ .
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_fill() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:564:45: 564:45
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:565:9: 565:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:566:30: 566:99
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:566:30: 566:78
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:566:30: 566:55
        let mut _5: *const [u8; 6];          // in scope 0 at workspace/buffer/src/test.rs:566:30: 566:42
        let _6: &[u8; 6];                    // in scope 0 at workspace/buffer/src/test.rs:566:30: 566:42
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/test.rs:567:8: 567:45
        let mut _8: u64;                     // in scope 0 at workspace/buffer/src/test.rs:567:8: 567:23
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/test.rs:567:27: 567:45
        let mut _10: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:567:41: 567:44
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:570:13: 570:79
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:570:13: 570:56
        let mut _13: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:570:13: 570:43
        let _14: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:570:13: 570:43
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:571:13: 571:62
        let mut _16: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:571:13: 571:39
        let mut _17: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:571:13: 571:26
        let _18: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:571:13: 571:26
        let mut _19: u32;                    // in scope 0 at workspace/buffer/src/test.rs:572:13: 572:39
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:573:13: 576:22
        let mut _21: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:573:13: 576:22
        let mut _22: &[i8; 24];              // in scope 0 at workspace/buffer/src/test.rs:573:13: 576:22
        let _23: &[i8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:573:15: 575:14
        let mut _24: &[u8; 24];              // in scope 0 at workspace/buffer/src/test.rs:574:17: 574:47
        let _25: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:574:17: 574:47
        let _26: ();                         // in scope 0 at workspace/buffer/src/test.rs:579:5: 579:31
        let mut _27: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:579:17: 579:20
        let mut _28: i32;                    // in scope 0 at workspace/buffer/src/test.rs:579:22: 579:30
        let mut _29: bool;                   // in scope 0 at workspace/buffer/src/test.rs:580:8: 580:45
        let mut _30: u64;                    // in scope 0 at workspace/buffer/src/test.rs:580:8: 580:23
        let mut _31: u64;                    // in scope 0 at workspace/buffer/src/test.rs:580:27: 580:45
        let mut _32: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:580:41: 580:44
        let mut _33: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:583:13: 583:79
        let mut _34: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:583:13: 583:56
        let mut _35: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:583:13: 583:43
        let _36: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:583:13: 583:43
        let mut _37: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:584:13: 584:62
        let mut _38: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:584:13: 584:39
        let mut _39: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:584:13: 584:26
        let _40: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:584:13: 584:26
        let mut _41: u32;                    // in scope 0 at workspace/buffer/src/test.rs:585:13: 585:39
        let mut _42: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:586:13: 589:22
        let mut _43: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:586:13: 589:22
        let mut _44: &[i8; 24];              // in scope 0 at workspace/buffer/src/test.rs:586:13: 589:22
        let _45: &[i8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:586:15: 588:14
        let mut _46: &[u8; 24];              // in scope 0 at workspace/buffer/src/test.rs:587:17: 587:47
        let _47: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:587:17: 587:47
        let _48: ();                         // in scope 0 at workspace/buffer/src/test.rs:592:5: 592:21
        let mut _49: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:592:17: 592:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:565:9: 565:16
        }
    
        bb0: {
            _6 = const b"Hello\x00";         // scope 0 at workspace/buffer/src/test.rs:566:30: 566:42
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:566:30: 566:42
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:566:30: 566:42
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:566:30: 566:55
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:566:30: 566:78
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:566:30: 566:99
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:566:9: 566:100
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:566:9: 566:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = const 5_u64;                // scope 1 at workspace/buffer/src/test.rs:567:8: 567:23
            _10 = _1;                        // scope 1 at workspace/buffer/src/test.rs:567:41: 567:44
            _9 = src::test::buffer_length(move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:567:27: 567:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:567:27: 567:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _7 = Eq(move _8, move _9);       // scope 1 at workspace/buffer/src/test.rs:567:8: 567:45
            switchInt(move _7) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:567:8: 567:45
        }
    
        bb3: {
            _27 = _1;                        // scope 1 at workspace/buffer/src/test.rs:579:17: 579:20
            _28 = const 0_i32;               // scope 1 at workspace/buffer/src/test.rs:579:22: 579:23
            _26 = src::test::buffer_fill(move _27, move _28) -> bb7; // scope 1 at workspace/buffer/src/test.rs:579:5: 579:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:579:5: 579:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t, i32) {src::test::buffer_fill}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _14 = const b"5 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:570:13: 570:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc75))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:570:13: 570:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc75)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:570:13: 570:43
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:570:13: 570:56
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:570:13: 570:79
            _18 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:571:13: 571:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:571:13: 571:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _17 = &raw const (*_18);         // scope 1 at workspace/buffer/src/test.rs:571:13: 571:26
            _16 = move _17 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:571:13: 571:39
            _15 = move _16 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:571:13: 571:62
            _19 = const 183_u32;             // scope 1 at workspace/buffer/src/test.rs:572:13: 572:39
            _25 = const b"void test_buffer_fill()\x00"; // scope 1 at workspace/buffer/src/test.rs:574:17: 574:47
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc76))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:574:17: 574:47
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc76)) }
            _24 = _25;                       // scope 1 at workspace/buffer/src/test.rs:574:17: 574:47
            _23 = std::intrinsics::transmute::<&[u8; 24], &[i8; 24]>(move _24) -> bb5; // scope 1 at workspace/buffer/src/test.rs:573:15: 575:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:573:15: 573:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 24]) -> &[i8; 24] {std::intrinsics::transmute::<&[u8; 24], &[i8; 24]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _22 = _23;                       // scope 1 at workspace/buffer/src/test.rs:573:13: 576:22
            _21 = move _22 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:573:13: 576:22
            _20 = core::slice::<impl [i8]>::as_ptr(move _21) -> bb6; // scope 1 at workspace/buffer/src/test.rs:573:13: 576:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:576:14: 576:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _11, move _15, move _19, move _20); // scope 1 at workspace/buffer/src/test.rs:569:9: 577:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:569:9: 569:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _30 = const 0_u64;               // scope 1 at workspace/buffer/src/test.rs:580:8: 580:23
            _32 = _1;                        // scope 1 at workspace/buffer/src/test.rs:580:41: 580:44
            _31 = src::test::buffer_length(move _32) -> bb8; // scope 1 at workspace/buffer/src/test.rs:580:27: 580:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:580:27: 580:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _29 = Eq(move _30, move _31);    // scope 1 at workspace/buffer/src/test.rs:580:8: 580:45
            switchInt(move _29) -> [false: bb10, otherwise: bb9]; // scope 1 at workspace/buffer/src/test.rs:580:8: 580:45
        }
    
        bb9: {
            _49 = _1;                        // scope 1 at workspace/buffer/src/test.rs:592:17: 592:20
            _48 = src::test::buffer_free(move _49) -> bb13; // scope 1 at workspace/buffer/src/test.rs:592:5: 592:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:592:5: 592:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _36 = const b"0 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:583:13: 583:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc29))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:583:13: 583:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc29)) }
            _35 = &raw const (*_36);         // scope 1 at workspace/buffer/src/test.rs:583:13: 583:43
            _34 = move _35 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:583:13: 583:56
            _33 = move _34 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:583:13: 583:79
            _40 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:584:13: 584:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:584:13: 584:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _39 = &raw const (*_40);         // scope 1 at workspace/buffer/src/test.rs:584:13: 584:26
            _38 = move _39 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:584:13: 584:39
            _37 = move _38 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:584:13: 584:62
            _41 = const 186_u32;             // scope 1 at workspace/buffer/src/test.rs:585:13: 585:39
            _47 = const b"void test_buffer_fill()\x00"; // scope 1 at workspace/buffer/src/test.rs:587:17: 587:47
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc76))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:587:17: 587:47
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc76)) }
            _46 = _47;                       // scope 1 at workspace/buffer/src/test.rs:587:17: 587:47
            _45 = std::intrinsics::transmute::<&[u8; 24], &[i8; 24]>(move _46) -> bb11; // scope 1 at workspace/buffer/src/test.rs:586:15: 588:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:586:15: 586:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 24]) -> &[i8; 24] {std::intrinsics::transmute::<&[u8; 24], &[i8; 24]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _44 = _45;                       // scope 1 at workspace/buffer/src/test.rs:586:13: 589:22
            _43 = move _44 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:586:13: 589:22
            _42 = core::slice::<impl [i8]>::as_ptr(move _43) -> bb12; // scope 1 at workspace/buffer/src/test.rs:586:13: 589:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:589:14: 589:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            src::test::__assert_fail(move _33, move _37, move _41, move _42); // scope 1 at workspace/buffer/src/test.rs:582:9: 590:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:582:9: 582:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:593:2: 593:2
        }
    }
    
    alloc76 (size: 24, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 66 69 6c 6c 28 29 00                         │ _fill().
    }
    
    alloc75 (size: 24, align: 1) {
        0x00 │ 35 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 5 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc29 (size: 24, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 0 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_clear() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:595:46: 595:46
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:596:9: 596:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:597:30: 597:99
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:597:30: 597:78
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:597:30: 597:55
        let mut _5: *const [u8; 6];          // in scope 0 at workspace/buffer/src/test.rs:597:30: 597:42
        let _6: &[u8; 6];                    // in scope 0 at workspace/buffer/src/test.rs:597:30: 597:42
        let mut _7: bool;                    // in scope 0 at workspace/buffer/src/test.rs:598:8: 598:45
        let mut _8: u64;                     // in scope 0 at workspace/buffer/src/test.rs:598:8: 598:23
        let mut _9: u64;                     // in scope 0 at workspace/buffer/src/test.rs:598:27: 598:45
        let mut _10: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:598:41: 598:44
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:601:13: 601:79
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:601:13: 601:56
        let mut _13: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:601:13: 601:43
        let _14: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:601:13: 601:43
        let mut _15: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:602:13: 602:62
        let mut _16: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:602:13: 602:39
        let mut _17: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:602:13: 602:26
        let _18: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:602:13: 602:26
        let mut _19: u32;                    // in scope 0 at workspace/buffer/src/test.rs:603:13: 603:39
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:604:13: 607:22
        let mut _21: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:604:13: 607:22
        let mut _22: &[i8; 25];              // in scope 0 at workspace/buffer/src/test.rs:604:13: 607:22
        let _23: &[i8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:604:15: 606:14
        let mut _24: &[u8; 25];              // in scope 0 at workspace/buffer/src/test.rs:605:17: 605:48
        let _25: &[u8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:605:17: 605:48
        let _26: ();                         // in scope 0 at workspace/buffer/src/test.rs:610:5: 610:22
        let mut _27: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:610:18: 610:21
        let mut _28: bool;                   // in scope 0 at workspace/buffer/src/test.rs:611:8: 611:45
        let mut _29: u64;                    // in scope 0 at workspace/buffer/src/test.rs:611:8: 611:23
        let mut _30: u64;                    // in scope 0 at workspace/buffer/src/test.rs:611:27: 611:45
        let mut _31: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:611:41: 611:44
        let mut _32: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:614:13: 614:79
        let mut _33: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:614:13: 614:56
        let mut _34: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:614:13: 614:43
        let _35: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:614:13: 614:43
        let mut _36: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:615:13: 615:62
        let mut _37: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:615:13: 615:39
        let mut _38: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:615:13: 615:26
        let _39: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:615:13: 615:26
        let mut _40: u32;                    // in scope 0 at workspace/buffer/src/test.rs:616:13: 616:39
        let mut _41: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:617:13: 620:22
        let mut _42: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:617:13: 620:22
        let mut _43: &[i8; 25];              // in scope 0 at workspace/buffer/src/test.rs:617:13: 620:22
        let _44: &[i8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:617:15: 619:14
        let mut _45: &[u8; 25];              // in scope 0 at workspace/buffer/src/test.rs:618:17: 618:48
        let _46: &[u8; 25];                  // in scope 0 at workspace/buffer/src/test.rs:618:17: 618:48
        let _47: ();                         // in scope 0 at workspace/buffer/src/test.rs:623:5: 623:21
        let mut _48: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:623:17: 623:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:596:9: 596:16
        }
    
        bb0: {
            _6 = const b"Hello\x00";         // scope 0 at workspace/buffer/src/test.rs:597:30: 597:42
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:597:30: 597:42
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:597:30: 597:42
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:597:30: 597:55
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:597:30: 597:78
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:597:30: 597:99
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:597:9: 597:100
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:597:9: 597:29
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = const 5_u64;                // scope 1 at workspace/buffer/src/test.rs:598:8: 598:23
            _10 = _1;                        // scope 1 at workspace/buffer/src/test.rs:598:41: 598:44
            _9 = src::test::buffer_length(move _10) -> bb2; // scope 1 at workspace/buffer/src/test.rs:598:27: 598:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:598:27: 598:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _7 = Eq(move _8, move _9);       // scope 1 at workspace/buffer/src/test.rs:598:8: 598:45
            switchInt(move _7) -> [false: bb4, otherwise: bb3]; // scope 1 at workspace/buffer/src/test.rs:598:8: 598:45
        }
    
        bb3: {
            _27 = _1;                        // scope 1 at workspace/buffer/src/test.rs:610:18: 610:21
            _26 = src::test::buffer_clear(move _27) -> bb7; // scope 1 at workspace/buffer/src/test.rs:610:5: 610:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:610:5: 610:17
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_clear}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _14 = const b"5 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:601:13: 601:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc75))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:601:13: 601:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc75)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:601:13: 601:43
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:601:13: 601:56
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:601:13: 601:79
            _18 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:602:13: 602:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:602:13: 602:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _17 = &raw const (*_18);         // scope 1 at workspace/buffer/src/test.rs:602:13: 602:26
            _16 = move _17 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:602:13: 602:39
            _15 = move _16 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:602:13: 602:62
            _19 = const 193_u32;             // scope 1 at workspace/buffer/src/test.rs:603:13: 603:39
            _25 = const b"void test_buffer_clear()\x00"; // scope 1 at workspace/buffer/src/test.rs:605:17: 605:48
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc77))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:605:17: 605:48
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc77)) }
            _24 = _25;                       // scope 1 at workspace/buffer/src/test.rs:605:17: 605:48
            _23 = std::intrinsics::transmute::<&[u8; 25], &[i8; 25]>(move _24) -> bb5; // scope 1 at workspace/buffer/src/test.rs:604:15: 606:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:604:15: 604:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 25]) -> &[i8; 25] {std::intrinsics::transmute::<&[u8; 25], &[i8; 25]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _22 = _23;                       // scope 1 at workspace/buffer/src/test.rs:604:13: 607:22
            _21 = move _22 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:604:13: 607:22
            _20 = core::slice::<impl [i8]>::as_ptr(move _21) -> bb6; // scope 1 at workspace/buffer/src/test.rs:604:13: 607:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:607:14: 607:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            src::test::__assert_fail(move _11, move _15, move _19, move _20); // scope 1 at workspace/buffer/src/test.rs:600:9: 608:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:600:9: 600:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _29 = const 0_u64;               // scope 1 at workspace/buffer/src/test.rs:611:8: 611:23
            _31 = _1;                        // scope 1 at workspace/buffer/src/test.rs:611:41: 611:44
            _30 = src::test::buffer_length(move _31) -> bb8; // scope 1 at workspace/buffer/src/test.rs:611:27: 611:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:611:27: 611:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _28 = Eq(move _29, move _30);    // scope 1 at workspace/buffer/src/test.rs:611:8: 611:45
            switchInt(move _28) -> [false: bb10, otherwise: bb9]; // scope 1 at workspace/buffer/src/test.rs:611:8: 611:45
        }
    
        bb9: {
            _48 = _1;                        // scope 1 at workspace/buffer/src/test.rs:623:17: 623:20
            _47 = src::test::buffer_free(move _48) -> bb13; // scope 1 at workspace/buffer/src/test.rs:623:5: 623:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:623:5: 623:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _35 = const b"0 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:614:13: 614:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc29))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:614:13: 614:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc29)) }
            _34 = &raw const (*_35);         // scope 1 at workspace/buffer/src/test.rs:614:13: 614:43
            _33 = move _34 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:614:13: 614:56
            _32 = move _33 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:614:13: 614:79
            _39 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:615:13: 615:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:615:13: 615:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _38 = &raw const (*_39);         // scope 1 at workspace/buffer/src/test.rs:615:13: 615:26
            _37 = move _38 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:615:13: 615:39
            _36 = move _37 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:615:13: 615:62
            _40 = const 196_u32;             // scope 1 at workspace/buffer/src/test.rs:616:13: 616:39
            _46 = const b"void test_buffer_clear()\x00"; // scope 1 at workspace/buffer/src/test.rs:618:17: 618:48
                                             // ty::Const
                                             // + ty: &[u8; 25]
                                             // + val: Value(Scalar(alloc77))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:618:17: 618:48
                                             // + literal: Const { ty: &[u8; 25], val: Value(Scalar(alloc77)) }
            _45 = _46;                       // scope 1 at workspace/buffer/src/test.rs:618:17: 618:48
            _44 = std::intrinsics::transmute::<&[u8; 25], &[i8; 25]>(move _45) -> bb11; // scope 1 at workspace/buffer/src/test.rs:617:15: 619:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:617:15: 617:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 25]) -> &[i8; 25] {std::intrinsics::transmute::<&[u8; 25], &[i8; 25]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _43 = _44;                       // scope 1 at workspace/buffer/src/test.rs:617:13: 620:22
            _42 = move _43 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:617:13: 620:22
            _41 = core::slice::<impl [i8]>::as_ptr(move _42) -> bb12; // scope 1 at workspace/buffer/src/test.rs:617:13: 620:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:620:14: 620:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            src::test::__assert_fail(move _32, move _36, move _40, move _41); // scope 1 at workspace/buffer/src/test.rs:613:9: 621:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:613:9: 613:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:624:2: 624:2
        }
    }
    
    alloc77 (size: 25, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 63 6c 65 61 72 28 29 00                      │ _clear().
    }
    
    alloc75 (size: 24, align: 1) {
        0x00 │ 35 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 5 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc29 (size: 24, align: 1) {
        0x00 │ 30 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 0 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_trim() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:626:45: 626:45
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:627:9: 627:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:628:9: 628:85
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:628:9: 628:64
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:628:9: 628:41
        let mut _5: *const [u8; 11];         // in scope 0 at workspace/buffer/src/test.rs:628:9: 628:28
        let _6: &[u8; 11];                   // in scope 0 at workspace/buffer/src/test.rs:628:9: 628:28
        let _7: ();                          // in scope 0 at workspace/buffer/src/test.rs:630:5: 630:21
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:630:17: 630:20
        let _9: ();                          // in scope 0 at workspace/buffer/src/test.rs:631:5: 634:6
        let mut _10: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:632:9: 632:78
        let mut _11: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:632:9: 632:57
        let mut _12: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:632:9: 632:34
        let mut _13: *const [u8; 6];         // in scope 0 at workspace/buffer/src/test.rs:632:9: 632:21
        let _14: &[u8; 6];                   // in scope 0 at workspace/buffer/src/test.rs:632:9: 632:21
        let mut _15: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:633:9: 633:20
        let _16: ();                         // in scope 0 at workspace/buffer/src/test.rs:635:5: 635:21
        let mut _17: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:635:17: 635:20
        let mut _18: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:636:11: 638:6
        let mut _19: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:637:9: 637:85
        let mut _20: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:637:9: 637:64
        let mut _21: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:637:9: 637:41
        let mut _22: *const [u8; 11];        // in scope 0 at workspace/buffer/src/test.rs:637:9: 637:28
        let _23: &[u8; 11];                  // in scope 0 at workspace/buffer/src/test.rs:637:9: 637:28
        let _24: ();                         // in scope 0 at workspace/buffer/src/test.rs:639:5: 639:26
        let mut _25: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:639:22: 639:25
        let _26: ();                         // in scope 0 at workspace/buffer/src/test.rs:640:5: 643:6
        let mut _27: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:641:9: 641:83
        let mut _28: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:641:9: 641:62
        let mut _29: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:641:9: 641:39
        let mut _30: *const [u8; 9];         // in scope 0 at workspace/buffer/src/test.rs:641:9: 641:26
        let _31: &[u8; 9];                   // in scope 0 at workspace/buffer/src/test.rs:641:9: 641:26
        let mut _32: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:642:9: 642:20
        let _33: ();                         // in scope 0 at workspace/buffer/src/test.rs:644:5: 644:21
        let mut _34: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:644:17: 644:20
        let mut _35: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:645:11: 647:6
        let mut _36: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:646:9: 646:85
        let mut _37: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:646:9: 646:64
        let mut _38: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:646:9: 646:41
        let mut _39: *const [u8; 11];        // in scope 0 at workspace/buffer/src/test.rs:646:9: 646:28
        let _40: &[u8; 11];                  // in scope 0 at workspace/buffer/src/test.rs:646:9: 646:28
        let _41: ();                         // in scope 0 at workspace/buffer/src/test.rs:648:5: 648:27
        let mut _42: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:648:23: 648:26
        let _43: ();                         // in scope 0 at workspace/buffer/src/test.rs:649:5: 652:6
        let mut _44: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:650:9: 650:80
        let mut _45: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:650:9: 650:59
        let mut _46: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:650:9: 650:36
        let mut _47: *const [u8; 8];         // in scope 0 at workspace/buffer/src/test.rs:650:9: 650:23
        let _48: &[u8; 8];                   // in scope 0 at workspace/buffer/src/test.rs:650:9: 650:23
        let mut _49: *mut i8;                // in scope 0 at workspace/buffer/src/test.rs:651:9: 651:20
        let _50: ();                         // in scope 0 at workspace/buffer/src/test.rs:653:5: 653:21
        let mut _51: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:653:17: 653:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:627:9: 627:16
        }
    
        bb0: {
            _6 = const b"  Hello\n\n \x00";  // scope 0 at workspace/buffer/src/test.rs:628:9: 628:28
                                             // ty::Const
                                             // + ty: &[u8; 11]
                                             // + val: Value(Scalar(alloc78))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:628:9: 628:28
                                             // + literal: Const { ty: &[u8; 11], val: Value(Scalar(alloc78)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:628:9: 628:28
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:628:9: 628:41
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:628:9: 628:64
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:628:9: 628:85
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:627:19: 629:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:627:19: 627:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:630:17: 630:20
            _7 = src::test::buffer_trim(move _8) -> bb2; // scope 1 at workspace/buffer/src/test.rs:630:5: 630:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:630:5: 630:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_trim}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _14 = const b"Hello\x00";        // scope 1 at workspace/buffer/src/test.rs:632:9: 632:21
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:632:9: 632:21
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _13 = &raw const (*_14);         // scope 1 at workspace/buffer/src/test.rs:632:9: 632:21
            _12 = move _13 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:632:9: 632:34
            _11 = move _12 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:632:9: 632:57
            _10 = move _11 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:632:9: 632:78
            _15 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:633:9: 633:20
            _9 = src::test::equal(move _10, move _15) -> bb3; // scope 1 at workspace/buffer/src/test.rs:631:5: 634:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:631:5: 631:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _17 = _1;                        // scope 1 at workspace/buffer/src/test.rs:635:17: 635:20
            _16 = src::test::buffer_free(move _17) -> bb4; // scope 1 at workspace/buffer/src/test.rs:635:5: 635:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:635:5: 635:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _23 = const b"  Hello\n\n \x00"; // scope 1 at workspace/buffer/src/test.rs:637:9: 637:28
                                             // ty::Const
                                             // + ty: &[u8; 11]
                                             // + val: Value(Scalar(alloc78))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:637:9: 637:28
                                             // + literal: Const { ty: &[u8; 11], val: Value(Scalar(alloc78)) }
            _22 = &raw const (*_23);         // scope 1 at workspace/buffer/src/test.rs:637:9: 637:28
            _21 = move _22 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:637:9: 637:41
            _20 = move _21 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:637:9: 637:64
            _19 = move _20 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:637:9: 637:85
            _18 = src::test::buffer_new_with_copy(move _19) -> bb5; // scope 1 at workspace/buffer/src/test.rs:636:11: 638:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:636:11: 636:31
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _1 = move _18;                   // scope 1 at workspace/buffer/src/test.rs:636:5: 638:6
            _25 = _1;                        // scope 1 at workspace/buffer/src/test.rs:639:22: 639:25
            _24 = src::test::buffer_trim_left(move _25) -> bb6; // scope 1 at workspace/buffer/src/test.rs:639:5: 639:26
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:639:5: 639:21
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_trim_left}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _31 = const b"Hello\n\n \x00";   // scope 1 at workspace/buffer/src/test.rs:641:9: 641:26
                                             // ty::Const
                                             // + ty: &[u8; 9]
                                             // + val: Value(Scalar(alloc79))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:641:9: 641:26
                                             // + literal: Const { ty: &[u8; 9], val: Value(Scalar(alloc79)) }
            _30 = &raw const (*_31);         // scope 1 at workspace/buffer/src/test.rs:641:9: 641:26
            _29 = move _30 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:641:9: 641:39
            _28 = move _29 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:641:9: 641:62
            _27 = move _28 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:641:9: 641:83
            _32 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:642:9: 642:20
            _26 = src::test::equal(move _27, move _32) -> bb7; // scope 1 at workspace/buffer/src/test.rs:640:5: 643:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:640:5: 640:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _34 = _1;                        // scope 1 at workspace/buffer/src/test.rs:644:17: 644:20
            _33 = src::test::buffer_free(move _34) -> bb8; // scope 1 at workspace/buffer/src/test.rs:644:5: 644:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:644:5: 644:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _40 = const b"  Hello\n\n \x00"; // scope 1 at workspace/buffer/src/test.rs:646:9: 646:28
                                             // ty::Const
                                             // + ty: &[u8; 11]
                                             // + val: Value(Scalar(alloc78))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:646:9: 646:28
                                             // + literal: Const { ty: &[u8; 11], val: Value(Scalar(alloc78)) }
            _39 = &raw const (*_40);         // scope 1 at workspace/buffer/src/test.rs:646:9: 646:28
            _38 = move _39 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:646:9: 646:41
            _37 = move _38 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:646:9: 646:64
            _36 = move _37 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:646:9: 646:85
            _35 = src::test::buffer_new_with_copy(move _36) -> bb9; // scope 1 at workspace/buffer/src/test.rs:645:11: 647:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:645:11: 645:31
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _1 = move _35;                   // scope 1 at workspace/buffer/src/test.rs:645:5: 647:6
            _42 = _1;                        // scope 1 at workspace/buffer/src/test.rs:648:23: 648:26
            _41 = src::test::buffer_trim_right(move _42) -> bb10; // scope 1 at workspace/buffer/src/test.rs:648:5: 648:27
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:648:5: 648:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_trim_right}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _48 = const b"  Hello\x00";      // scope 1 at workspace/buffer/src/test.rs:650:9: 650:23
                                             // ty::Const
                                             // + ty: &[u8; 8]
                                             // + val: Value(Scalar(alloc80))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:650:9: 650:23
                                             // + literal: Const { ty: &[u8; 8], val: Value(Scalar(alloc80)) }
            _47 = &raw const (*_48);         // scope 1 at workspace/buffer/src/test.rs:650:9: 650:23
            _46 = move _47 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:650:9: 650:36
            _45 = move _46 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:650:9: 650:59
            _44 = move _45 as *mut i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:650:9: 650:80
            _49 = ((*_1).2: *mut i8);        // scope 1 at workspace/buffer/src/test.rs:651:9: 651:20
            _43 = src::test::equal(move _44, move _49) -> bb11; // scope 1 at workspace/buffer/src/test.rs:649:5: 652:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:649:5: 649:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _51 = _1;                        // scope 1 at workspace/buffer/src/test.rs:653:17: 653:20
            _50 = src::test::buffer_free(move _51) -> bb12; // scope 1 at workspace/buffer/src/test.rs:653:5: 653:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:653:5: 653:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:654:2: 654:2
        }
    }
    
    alloc80 (size: 8, align: 1) {
        20 20 48 65 6c 6c 6f 00                         │   Hello.
    }
    
    alloc79 (size: 9, align: 1) {
        48 65 6c 6c 6f 0a 0a 20 00                      │ Hello.. .
    }
    
    alloc78 (size: 11, align: 1) {
        20 20 48 65 6c 6c 6f 0a 0a 20 00                │   Hello.. .
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::test_buffer_compact() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:656:48: 656:48
        let mut _1: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:657:9: 657:16
        let mut _2: *mut i8;                 // in scope 0 at workspace/buffer/src/test.rs:658:9: 658:85
        let mut _3: *const i8;               // in scope 0 at workspace/buffer/src/test.rs:658:9: 658:64
        let mut _4: *const u8;               // in scope 0 at workspace/buffer/src/test.rs:658:9: 658:41
        let mut _5: *const [u8; 11];         // in scope 0 at workspace/buffer/src/test.rs:658:9: 658:28
        let _6: &[u8; 11];                   // in scope 0 at workspace/buffer/src/test.rs:658:9: 658:28
        let _7: ();                          // in scope 0 at workspace/buffer/src/test.rs:660:5: 660:21
        let mut _8: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:660:17: 660:20
        let mut _9: bool;                    // in scope 0 at workspace/buffer/src/test.rs:661:8: 661:45
        let mut _10: u64;                    // in scope 0 at workspace/buffer/src/test.rs:661:8: 661:23
        let mut _11: u64;                    // in scope 0 at workspace/buffer/src/test.rs:661:27: 661:45
        let mut _12: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:661:41: 661:44
        let mut _13: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:664:13: 664:79
        let mut _14: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:664:13: 664:56
        let mut _15: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:664:13: 664:43
        let _16: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:664:13: 664:43
        let mut _17: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:665:13: 665:62
        let mut _18: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:665:13: 665:39
        let mut _19: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:665:13: 665:26
        let _20: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:665:13: 665:26
        let mut _21: u32;                    // in scope 0 at workspace/buffer/src/test.rs:666:13: 666:39
        let mut _22: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:667:13: 670:22
        let mut _23: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:667:13: 670:22
        let mut _24: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:667:13: 670:22
        let _25: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:667:15: 669:14
        let mut _26: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:668:17: 668:50
        let _27: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:668:17: 668:50
        let mut _28: bool;                   // in scope 0 at workspace/buffer/src/test.rs:673:8: 673:44
        let mut _29: u64;                    // in scope 0 at workspace/buffer/src/test.rs:673:8: 673:24
        let mut _30: u64;                    // in scope 0 at workspace/buffer/src/test.rs:673:28: 673:44
        let mut _31: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:673:40: 673:43
        let mut _32: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:676:13: 676:78
        let mut _33: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:676:13: 676:55
        let mut _34: *const [u8; 23];        // in scope 0 at workspace/buffer/src/test.rs:676:13: 676:42
        let _35: &[u8; 23];                  // in scope 0 at workspace/buffer/src/test.rs:676:13: 676:42
        let mut _36: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:677:13: 677:62
        let mut _37: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:677:13: 677:39
        let mut _38: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:677:13: 677:26
        let _39: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:677:13: 677:26
        let mut _40: u32;                    // in scope 0 at workspace/buffer/src/test.rs:678:13: 678:39
        let mut _41: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:679:13: 682:22
        let mut _42: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:679:13: 682:22
        let mut _43: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:679:13: 682:22
        let _44: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:679:15: 681:14
        let mut _45: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:680:17: 680:50
        let _46: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:680:17: 680:50
        let mut _48: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:685:38: 685:41
        let mut _49: bool;                   // in scope 0 at workspace/buffer/src/test.rs:686:8: 686:43
        let mut _50: i64;                    // in scope 0 at workspace/buffer/src/test.rs:686:8: 686:32
        let mut _51: i64;                    // in scope 0 at workspace/buffer/src/test.rs:686:36: 686:43
        let mut _52: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:689:13: 689:68
        let mut _53: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:689:13: 689:45
        let mut _54: *const [u8; 13];        // in scope 0 at workspace/buffer/src/test.rs:689:13: 689:32
        let _55: &[u8; 13];                  // in scope 0 at workspace/buffer/src/test.rs:689:13: 689:32
        let mut _56: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:690:13: 690:62
        let mut _57: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:690:13: 690:39
        let mut _58: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:690:13: 690:26
        let _59: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:690:13: 690:26
        let mut _60: u32;                    // in scope 0 at workspace/buffer/src/test.rs:691:13: 691:39
        let mut _61: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:692:13: 695:22
        let mut _62: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:692:13: 695:22
        let mut _63: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:692:13: 695:22
        let _64: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:692:15: 694:14
        let mut _65: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:693:17: 693:50
        let _66: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:693:17: 693:50
        let mut _67: bool;                   // in scope 0 at workspace/buffer/src/test.rs:698:8: 698:45
        let mut _68: u64;                    // in scope 0 at workspace/buffer/src/test.rs:698:8: 698:23
        let mut _69: u64;                    // in scope 0 at workspace/buffer/src/test.rs:698:27: 698:45
        let mut _70: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:698:41: 698:44
        let mut _71: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:701:13: 701:79
        let mut _72: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:701:13: 701:56
        let mut _73: *const [u8; 24];        // in scope 0 at workspace/buffer/src/test.rs:701:13: 701:43
        let _74: &[u8; 24];                  // in scope 0 at workspace/buffer/src/test.rs:701:13: 701:43
        let mut _75: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:702:13: 702:62
        let mut _76: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:702:13: 702:39
        let mut _77: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:702:13: 702:26
        let _78: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:702:13: 702:26
        let mut _79: u32;                    // in scope 0 at workspace/buffer/src/test.rs:703:13: 703:39
        let mut _80: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:704:13: 707:22
        let mut _81: &[i8];                  // in scope 0 at workspace/buffer/src/test.rs:704:13: 707:22
        let mut _82: &[i8; 27];              // in scope 0 at workspace/buffer/src/test.rs:704:13: 707:22
        let _83: &[i8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:704:15: 706:14
        let mut _84: &[u8; 27];              // in scope 0 at workspace/buffer/src/test.rs:705:17: 705:50
        let _85: &[u8; 27];                  // in scope 0 at workspace/buffer/src/test.rs:705:17: 705:50
        let mut _86: bool;                   // in scope 0 at workspace/buffer/src/test.rs:710:8: 710:43
        let mut _87: u64;                    // in scope 0 at workspace/buffer/src/test.rs:710:8: 710:23
        let mut _88: u64;                    // in scope 0 at workspace/buffer/src/test.rs:710:27: 710:43
        let mut _89: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:710:39: 710:42
        let mut _90: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:713:13: 713:77
        let mut _91: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:713:13: 713:54
        let mut _92: *const [u8; 22];        // in scope 0 at workspace/buffer/src/test.rs:713:13: 713:41
        let _93: &[u8; 22];                  // in scope 0 at workspace/buffer/src/test.rs:713:13: 713:41
        let mut _94: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:714:13: 714:62
        let mut _95: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:714:13: 714:39
        let mut _96: *const [u8; 7];         // in scope 0 at workspace/buffer/src/test.rs:714:13: 714:26
        let _97: &[u8; 7];                   // in scope 0 at workspace/buffer/src/test.rs:714:13: 714:26
        let mut _98: u32;                    // in scope 0 at workspace/buffer/src/test.rs:715:13: 715:39
        let mut _99: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:716:13: 719:22
        let mut _100: &[i8];                 // in scope 0 at workspace/buffer/src/test.rs:716:13: 719:22
        let mut _101: &[i8; 27];             // in scope 0 at workspace/buffer/src/test.rs:716:13: 719:22
        let _102: &[i8; 27];                 // in scope 0 at workspace/buffer/src/test.rs:716:15: 718:14
        let mut _103: &[u8; 27];             // in scope 0 at workspace/buffer/src/test.rs:717:17: 717:50
        let _104: &[u8; 27];                 // in scope 0 at workspace/buffer/src/test.rs:717:17: 717:50
        let _105: ();                        // in scope 0 at workspace/buffer/src/test.rs:722:5: 725:6
        let mut _106: *mut i8;               // in scope 0 at workspace/buffer/src/test.rs:723:9: 723:78
        let mut _107: *const i8;             // in scope 0 at workspace/buffer/src/test.rs:723:9: 723:57
        let mut _108: *const u8;             // in scope 0 at workspace/buffer/src/test.rs:723:9: 723:34
        let mut _109: *const [u8; 6];        // in scope 0 at workspace/buffer/src/test.rs:723:9: 723:21
        let _110: &[u8; 6];                  // in scope 0 at workspace/buffer/src/test.rs:723:9: 723:21
        let mut _111: *mut i8;               // in scope 0 at workspace/buffer/src/test.rs:724:9: 724:20
        let _112: ();                        // in scope 0 at workspace/buffer/src/test.rs:726:5: 726:21
        let mut _113: *mut src::test::buffer_t; // in scope 0 at workspace/buffer/src/test.rs:726:17: 726:20
        scope 1 {
            debug buf => _1;                 // in scope 1 at workspace/buffer/src/test.rs:657:9: 657:16
            let mut _47: i64;                // in scope 1 at workspace/buffer/src/test.rs:685:9: 685:20
            scope 2 {
                debug removed => _47;        // in scope 2 at workspace/buffer/src/test.rs:685:9: 685:20
            }
        }
    
        bb0: {
            _6 = const b"  Hello\n\n \x00";  // scope 0 at workspace/buffer/src/test.rs:658:9: 658:28
                                             // ty::Const
                                             // + ty: &[u8; 11]
                                             // + val: Value(Scalar(alloc78))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:658:9: 658:28
                                             // + literal: Const { ty: &[u8; 11], val: Value(Scalar(alloc78)) }
            _5 = &raw const (*_6);           // scope 0 at workspace/buffer/src/test.rs:658:9: 658:28
            _4 = move _5 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:658:9: 658:41
            _3 = move _4 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:658:9: 658:64
            _2 = move _3 as *mut i8 (Misc);  // scope 0 at workspace/buffer/src/test.rs:658:9: 658:85
            _1 = src::test::buffer_new_with_copy(move _2) -> bb1; // scope 0 at workspace/buffer/src/test.rs:657:19: 659:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:657:19: 657:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8) -> *mut src::test::buffer_t {src::test::buffer_new_with_copy}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _8 = _1;                         // scope 1 at workspace/buffer/src/test.rs:660:17: 660:20
            _7 = src::test::buffer_trim(move _8) -> bb2; // scope 1 at workspace/buffer/src/test.rs:660:5: 660:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:660:5: 660:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_trim}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _10 = const 5_u64;               // scope 1 at workspace/buffer/src/test.rs:661:8: 661:23
            _12 = _1;                        // scope 1 at workspace/buffer/src/test.rs:661:41: 661:44
            _11 = src::test::buffer_length(move _12) -> bb3; // scope 1 at workspace/buffer/src/test.rs:661:27: 661:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:661:27: 661:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _9 = Eq(move _10, move _11);     // scope 1 at workspace/buffer/src/test.rs:661:8: 661:45
            switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/buffer/src/test.rs:661:8: 661:45
        }
    
        bb4: {
            _29 = const 10_u64;              // scope 1 at workspace/buffer/src/test.rs:673:8: 673:24
            _31 = _1;                        // scope 1 at workspace/buffer/src/test.rs:673:40: 673:43
            _30 = src::test::buffer_size(move _31) -> bb8; // scope 1 at workspace/buffer/src/test.rs:673:28: 673:44
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:673:28: 673:39
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _16 = const b"5 == buffer_length(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:664:13: 664:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc75))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:664:13: 664:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc75)) }
            _15 = &raw const (*_16);         // scope 1 at workspace/buffer/src/test.rs:664:13: 664:43
            _14 = move _15 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:664:13: 664:56
            _13 = move _14 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:664:13: 664:79
            _20 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:665:13: 665:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:665:13: 665:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _19 = &raw const (*_20);         // scope 1 at workspace/buffer/src/test.rs:665:13: 665:26
            _18 = move _19 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:665:13: 665:39
            _17 = move _18 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:665:13: 665:62
            _21 = const 222_u32;             // scope 1 at workspace/buffer/src/test.rs:666:13: 666:39
            _27 = const b"void test_buffer_compact()\x00"; // scope 1 at workspace/buffer/src/test.rs:668:17: 668:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc81))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:668:17: 668:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc81)) }
            _26 = _27;                       // scope 1 at workspace/buffer/src/test.rs:668:17: 668:50
            _25 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _26) -> bb6; // scope 1 at workspace/buffer/src/test.rs:667:15: 669:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:667:15: 667:70
                                             // + user_ty: UserType(0)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _24 = _25;                       // scope 1 at workspace/buffer/src/test.rs:667:13: 670:22
            _23 = move _24 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:667:13: 670:22
            _22 = core::slice::<impl [i8]>::as_ptr(move _23) -> bb7; // scope 1 at workspace/buffer/src/test.rs:667:13: 670:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:670:14: 670:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            src::test::__assert_fail(move _13, move _17, move _21, move _22); // scope 1 at workspace/buffer/src/test.rs:663:9: 671:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:663:9: 663:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _28 = Eq(move _29, move _30);    // scope 1 at workspace/buffer/src/test.rs:673:8: 673:44
            switchInt(move _28) -> [false: bb10, otherwise: bb9]; // scope 1 at workspace/buffer/src/test.rs:673:8: 673:44
        }
    
        bb9: {
            _48 = _1;                        // scope 1 at workspace/buffer/src/test.rs:685:38: 685:41
            _47 = src::test::buffer_compact(move _48) -> bb13; // scope 1 at workspace/buffer/src/test.rs:685:23: 685:42
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:685:23: 685:37
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> i64 {src::test::buffer_compact}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _35 = const b"10 == buffer_size(buf)\x00"; // scope 1 at workspace/buffer/src/test.rs:676:13: 676:42
                                             // ty::Const
                                             // + ty: &[u8; 23]
                                             // + val: Value(Scalar(alloc82))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:676:13: 676:42
                                             // + literal: Const { ty: &[u8; 23], val: Value(Scalar(alloc82)) }
            _34 = &raw const (*_35);         // scope 1 at workspace/buffer/src/test.rs:676:13: 676:42
            _33 = move _34 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:676:13: 676:55
            _32 = move _33 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:676:13: 676:78
            _39 = const b"test.c\x00";       // scope 1 at workspace/buffer/src/test.rs:677:13: 677:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:677:13: 677:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _38 = &raw const (*_39);         // scope 1 at workspace/buffer/src/test.rs:677:13: 677:26
            _37 = move _38 as *const u8 (Pointer(ArrayToPointer)); // scope 1 at workspace/buffer/src/test.rs:677:13: 677:39
            _36 = move _37 as *const i8 (Misc); // scope 1 at workspace/buffer/src/test.rs:677:13: 677:62
            _40 = const 223_u32;             // scope 1 at workspace/buffer/src/test.rs:678:13: 678:39
            _46 = const b"void test_buffer_compact()\x00"; // scope 1 at workspace/buffer/src/test.rs:680:17: 680:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc81))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:680:17: 680:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc81)) }
            _45 = _46;                       // scope 1 at workspace/buffer/src/test.rs:680:17: 680:50
            _44 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _45) -> bb11; // scope 1 at workspace/buffer/src/test.rs:679:15: 681:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:679:15: 679:70
                                             // + user_ty: UserType(1)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _43 = _44;                       // scope 1 at workspace/buffer/src/test.rs:679:13: 682:22
            _42 = move _43 as &[i8] (Pointer(Unsize)); // scope 1 at workspace/buffer/src/test.rs:679:13: 682:22
            _41 = core::slice::<impl [i8]>::as_ptr(move _42) -> bb12; // scope 1 at workspace/buffer/src/test.rs:679:13: 682:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:682:14: 682:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            src::test::__assert_fail(move _32, move _36, move _40, move _41); // scope 1 at workspace/buffer/src/test.rs:675:9: 683:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:675:9: 675:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            _50 = const 5_i64;               // scope 2 at workspace/buffer/src/test.rs:686:8: 686:32
            _51 = _47;                       // scope 2 at workspace/buffer/src/test.rs:686:36: 686:43
            _49 = Eq(move _50, move _51);    // scope 2 at workspace/buffer/src/test.rs:686:8: 686:43
            switchInt(move _49) -> [false: bb15, otherwise: bb14]; // scope 2 at workspace/buffer/src/test.rs:686:8: 686:43
        }
    
        bb14: {
            _68 = const 5_u64;               // scope 2 at workspace/buffer/src/test.rs:698:8: 698:23
            _70 = _1;                        // scope 2 at workspace/buffer/src/test.rs:698:41: 698:44
            _69 = src::test::buffer_length(move _70) -> bb18; // scope 2 at workspace/buffer/src/test.rs:698:27: 698:45
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:698:27: 698:40
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_length}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _55 = const b"5 == removed\x00"; // scope 2 at workspace/buffer/src/test.rs:689:13: 689:32
                                             // ty::Const
                                             // + ty: &[u8; 13]
                                             // + val: Value(Scalar(alloc83))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:689:13: 689:32
                                             // + literal: Const { ty: &[u8; 13], val: Value(Scalar(alloc83)) }
            _54 = &raw const (*_55);         // scope 2 at workspace/buffer/src/test.rs:689:13: 689:32
            _53 = move _54 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:689:13: 689:45
            _52 = move _53 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:689:13: 689:68
            _59 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:690:13: 690:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:690:13: 690:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _58 = &raw const (*_59);         // scope 2 at workspace/buffer/src/test.rs:690:13: 690:26
            _57 = move _58 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:690:13: 690:39
            _56 = move _57 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:690:13: 690:62
            _60 = const 226_u32;             // scope 2 at workspace/buffer/src/test.rs:691:13: 691:39
            _66 = const b"void test_buffer_compact()\x00"; // scope 2 at workspace/buffer/src/test.rs:693:17: 693:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc81))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:693:17: 693:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc81)) }
            _65 = _66;                       // scope 2 at workspace/buffer/src/test.rs:693:17: 693:50
            _64 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _65) -> bb16; // scope 2 at workspace/buffer/src/test.rs:692:15: 694:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:692:15: 692:70
                                             // + user_ty: UserType(2)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            _63 = _64;                       // scope 2 at workspace/buffer/src/test.rs:692:13: 695:22
            _62 = move _63 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:692:13: 695:22
            _61 = core::slice::<impl [i8]>::as_ptr(move _62) -> bb17; // scope 2 at workspace/buffer/src/test.rs:692:13: 695:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:695:14: 695:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            src::test::__assert_fail(move _52, move _56, move _60, move _61); // scope 2 at workspace/buffer/src/test.rs:688:9: 696:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:688:9: 688:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb18: {
            _67 = Eq(move _68, move _69);    // scope 2 at workspace/buffer/src/test.rs:698:8: 698:45
            switchInt(move _67) -> [false: bb20, otherwise: bb19]; // scope 2 at workspace/buffer/src/test.rs:698:8: 698:45
        }
    
        bb19: {
            _87 = const 5_u64;               // scope 2 at workspace/buffer/src/test.rs:710:8: 710:23
            _89 = _1;                        // scope 2 at workspace/buffer/src/test.rs:710:39: 710:42
            _88 = src::test::buffer_size(move _89) -> bb23; // scope 2 at workspace/buffer/src/test.rs:710:27: 710:43
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:710:27: 710:38
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) -> u64 {src::test::buffer_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb20: {
            _74 = const b"5 == buffer_length(buf)\x00"; // scope 2 at workspace/buffer/src/test.rs:701:13: 701:43
                                             // ty::Const
                                             // + ty: &[u8; 24]
                                             // + val: Value(Scalar(alloc75))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:701:13: 701:43
                                             // + literal: Const { ty: &[u8; 24], val: Value(Scalar(alloc75)) }
            _73 = &raw const (*_74);         // scope 2 at workspace/buffer/src/test.rs:701:13: 701:43
            _72 = move _73 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:701:13: 701:56
            _71 = move _72 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:701:13: 701:79
            _78 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:702:13: 702:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:702:13: 702:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _77 = &raw const (*_78);         // scope 2 at workspace/buffer/src/test.rs:702:13: 702:26
            _76 = move _77 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:702:13: 702:39
            _75 = move _76 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:702:13: 702:62
            _79 = const 227_u32;             // scope 2 at workspace/buffer/src/test.rs:703:13: 703:39
            _85 = const b"void test_buffer_compact()\x00"; // scope 2 at workspace/buffer/src/test.rs:705:17: 705:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc81))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:705:17: 705:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc81)) }
            _84 = _85;                       // scope 2 at workspace/buffer/src/test.rs:705:17: 705:50
            _83 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _84) -> bb21; // scope 2 at workspace/buffer/src/test.rs:704:15: 706:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:704:15: 704:70
                                             // + user_ty: UserType(3)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb21: {
            _82 = _83;                       // scope 2 at workspace/buffer/src/test.rs:704:13: 707:22
            _81 = move _82 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:704:13: 707:22
            _80 = core::slice::<impl [i8]>::as_ptr(move _81) -> bb22; // scope 2 at workspace/buffer/src/test.rs:704:13: 707:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:707:14: 707:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb22: {
            src::test::__assert_fail(move _71, move _75, move _79, move _80); // scope 2 at workspace/buffer/src/test.rs:700:9: 708:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:700:9: 700:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb23: {
            _86 = Eq(move _87, move _88);    // scope 2 at workspace/buffer/src/test.rs:710:8: 710:43
            switchInt(move _86) -> [false: bb25, otherwise: bb24]; // scope 2 at workspace/buffer/src/test.rs:710:8: 710:43
        }
    
        bb24: {
            _110 = const b"Hello\x00";       // scope 2 at workspace/buffer/src/test.rs:723:9: 723:21
                                             // ty::Const
                                             // + ty: &[u8; 6]
                                             // + val: Value(Scalar(alloc32))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:723:9: 723:21
                                             // + literal: Const { ty: &[u8; 6], val: Value(Scalar(alloc32)) }
            _109 = &raw const (*_110);       // scope 2 at workspace/buffer/src/test.rs:723:9: 723:21
            _108 = move _109 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:723:9: 723:34
            _107 = move _108 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:723:9: 723:57
            _106 = move _107 as *mut i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:723:9: 723:78
            _111 = ((*_1).2: *mut i8);       // scope 2 at workspace/buffer/src/test.rs:724:9: 724:20
            _105 = src::test::equal(move _106, move _111) -> bb28; // scope 2 at workspace/buffer/src/test.rs:722:5: 725:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:722:5: 722:10
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut i8, *mut i8) {src::test::equal}, val: Value(Scalar(<ZST>)) }
        }
    
        bb25: {
            _93 = const b"5 == buffer_size(buf)\x00"; // scope 2 at workspace/buffer/src/test.rs:713:13: 713:41
                                             // ty::Const
                                             // + ty: &[u8; 22]
                                             // + val: Value(Scalar(alloc84))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:713:13: 713:41
                                             // + literal: Const { ty: &[u8; 22], val: Value(Scalar(alloc84)) }
            _92 = &raw const (*_93);         // scope 2 at workspace/buffer/src/test.rs:713:13: 713:41
            _91 = move _92 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:713:13: 713:54
            _90 = move _91 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:713:13: 713:77
            _97 = const b"test.c\x00";       // scope 2 at workspace/buffer/src/test.rs:714:13: 714:26
                                             // ty::Const
                                             // + ty: &[u8; 7]
                                             // + val: Value(Scalar(alloc27))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:714:13: 714:26
                                             // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc27)) }
            _96 = &raw const (*_97);         // scope 2 at workspace/buffer/src/test.rs:714:13: 714:26
            _95 = move _96 as *const u8 (Pointer(ArrayToPointer)); // scope 2 at workspace/buffer/src/test.rs:714:13: 714:39
            _94 = move _95 as *const i8 (Misc); // scope 2 at workspace/buffer/src/test.rs:714:13: 714:62
            _98 = const 228_u32;             // scope 2 at workspace/buffer/src/test.rs:715:13: 715:39
            _104 = const b"void test_buffer_compact()\x00"; // scope 2 at workspace/buffer/src/test.rs:717:17: 717:50
                                             // ty::Const
                                             // + ty: &[u8; 27]
                                             // + val: Value(Scalar(alloc81))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:717:17: 717:50
                                             // + literal: Const { ty: &[u8; 27], val: Value(Scalar(alloc81)) }
            _103 = _104;                     // scope 2 at workspace/buffer/src/test.rs:717:17: 717:50
            _102 = std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>(move _103) -> bb26; // scope 2 at workspace/buffer/src/test.rs:716:15: 718:14
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:716:15: 716:70
                                             // + user_ty: UserType(4)
                                             // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 27]) -> &[i8; 27] {std::intrinsics::transmute::<&[u8; 27], &[i8; 27]>}, val: Value(Scalar(<ZST>)) }
        }
    
        bb26: {
            _101 = _102;                     // scope 2 at workspace/buffer/src/test.rs:716:13: 719:22
            _100 = move _101 as &[i8] (Pointer(Unsize)); // scope 2 at workspace/buffer/src/test.rs:716:13: 719:22
            _99 = core::slice::<impl [i8]>::as_ptr(move _100) -> bb27; // scope 2 at workspace/buffer/src/test.rs:716:13: 719:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:719:14: 719:20
                                             // + literal: Const { ty: for<'r> fn(&'r [i8]) -> *const i8 {core::slice::<impl [i8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
        }
    
        bb27: {
            src::test::__assert_fail(move _90, move _94, move _98, move _99); // scope 2 at workspace/buffer/src/test.rs:712:9: 720:10
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:712:9: 712:22
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const i8, u32, *const i8) -> ! {src::test::__assert_fail}, val: Value(Scalar(<ZST>)) }
        }
    
        bb28: {
            _113 = _1;                       // scope 2 at workspace/buffer/src/test.rs:726:17: 726:20
            _112 = src::test::buffer_free(move _113) -> bb29; // scope 2 at workspace/buffer/src/test.rs:726:5: 726:21
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:726:5: 726:16
                                             // + literal: Const { ty: unsafe extern "C" fn(*mut src::test::buffer_t) {src::test::buffer_free}, val: Value(Scalar(<ZST>)) }
        }
    
        bb29: {
            return;                          // scope 0 at workspace/buffer/src/test.rs:727:2: 727:2
        }
    }
    
    alloc84 (size: 22, align: 1) {
        0x00 │ 35 20 3d 3d 20 62 75 66 66 65 72 5f 73 69 7a 65 │ 5 == buffer_size
        0x10 │ 28 62 75 66 29 00                               │ (buf).
    }
    
    alloc83 (size: 13, align: 1) {
        35 20 3d 3d 20 72 65 6d 6f 76 65 64 00          │ 5 == removed.
    }
    
    alloc82 (size: 23, align: 1) {
        0x00 │ 31 30 20 3d 3d 20 62 75 66 66 65 72 5f 73 69 7a │ 10 == buffer_siz
        0x10 │ 65 28 62 75 66 29 00                            │ e(buf).
    }
    
    alloc81 (size: 27, align: 1) {
        0x00 │ 76 6f 69 64 20 74 65 73 74 5f 62 75 66 66 65 72 │ void test_buffer
        0x10 │ 5f 63 6f 6d 70 61 63 74 28 29 00                │ _compact().
    }
    
    alloc78 (size: 11, align: 1) {
        20 20 48 65 6c 6c 6f 0a 0a 20 00                │   Hello.. .
    }
    
    alloc75 (size: 24, align: 1) {
        0x00 │ 35 20 3d 3d 20 62 75 66 66 65 72 5f 6c 65 6e 67 │ 5 == buffer_leng
        0x10 │ 74 68 28 62 75 66 29 00                         │ th(buf).
    }
    
    alloc32 (size: 6, align: 1) {
        48 65 6c 6c 6f 00                               │ Hello.
    }
    
    alloc27 (size: 7, align: 1) {
        74 65 73 74 2e 63 00                            │ test.c.
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::main_0() -> i32 {
        let mut _0: i32;                     // return place in scope 0 at workspace/buffer/src/test.rs:728:23: 728:26
        let _1: ();                          // in scope 0 at workspace/buffer/src/test.rs:729:5: 729:22
        let _2: ();                          // in scope 0 at workspace/buffer/src/test.rs:730:5: 730:32
        let _3: ();                          // in scope 0 at workspace/buffer/src/test.rs:731:5: 731:25
        let _4: ();                          // in scope 0 at workspace/buffer/src/test.rs:732:5: 732:31
        let _5: ();                          // in scope 0 at workspace/buffer/src/test.rs:733:5: 733:27
        let _6: ();                          // in scope 0 at workspace/buffer/src/test.rs:734:5: 734:26
        let _7: ();                          // in scope 0 at workspace/buffer/src/test.rs:735:5: 735:24
        let _8: ();                          // in scope 0 at workspace/buffer/src/test.rs:736:5: 736:37
        let _9: ();                          // in scope 0 at workspace/buffer/src/test.rs:737:5: 737:29
        let _10: ();                         // in scope 0 at workspace/buffer/src/test.rs:738:5: 738:38
        let _11: ();                         // in scope 0 at workspace/buffer/src/test.rs:739:5: 739:25
        let _12: ();                         // in scope 0 at workspace/buffer/src/test.rs:741:5: 741:26
        let _13: ();                         // in scope 0 at workspace/buffer/src/test.rs:742:5: 742:23
        let _14: ();                         // in scope 0 at workspace/buffer/src/test.rs:743:5: 743:24
        let _15: ();                         // in scope 0 at workspace/buffer/src/test.rs:744:5: 744:23
        let _16: ();                         // in scope 0 at workspace/buffer/src/test.rs:745:5: 745:26
        let _17: i32;                        // in scope 0 at workspace/buffer/src/test.rs:746:5: 748:6
        let mut _18: *const i8;              // in scope 0 at workspace/buffer/src/test.rs:747:9: 747:98
        let mut _19: *const u8;              // in scope 0 at workspace/buffer/src/test.rs:747:9: 747:75
        let mut _20: *const [u8; 26];        // in scope 0 at workspace/buffer/src/test.rs:747:9: 747:62
        let _21: &[u8; 26];                  // in scope 0 at workspace/buffer/src/test.rs:747:9: 747:62
    
        bb0: {
            _1 = src::test::test_buffer_new() -> bb1; // scope 0 at workspace/buffer/src/test.rs:729:5: 729:22
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:729:5: 729:20
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_new}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            _2 = src::test::test_buffer_new_with_size() -> bb2; // scope 0 at workspace/buffer/src/test.rs:730:5: 730:32
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:730:5: 730:30
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_new_with_size}, val: Value(Scalar(<ZST>)) }
        }
    
        bb2: {
            _3 = src::test::test_buffer_append() -> bb3; // scope 0 at workspace/buffer/src/test.rs:731:5: 731:25
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:731:5: 731:23
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_append}, val: Value(Scalar(<ZST>)) }
        }
    
        bb3: {
            _4 = src::test::test_buffer_append__grow() -> bb4; // scope 0 at workspace/buffer/src/test.rs:732:5: 732:31
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:732:5: 732:29
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_append__grow}, val: Value(Scalar(<ZST>)) }
        }
    
        bb4: {
            _5 = src::test::test_buffer_append_n() -> bb5; // scope 0 at workspace/buffer/src/test.rs:733:5: 733:27
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:733:5: 733:25
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_append_n}, val: Value(Scalar(<ZST>)) }
        }
    
        bb5: {
            _6 = src::test::test_buffer_prepend() -> bb6; // scope 0 at workspace/buffer/src/test.rs:734:5: 734:26
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:734:5: 734:24
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_prepend}, val: Value(Scalar(<ZST>)) }
        }
    
        bb6: {
            _7 = src::test::test_buffer_slice() -> bb7; // scope 0 at workspace/buffer/src/test.rs:735:5: 735:24
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:735:5: 735:22
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_slice}, val: Value(Scalar(<ZST>)) }
        }
    
        bb7: {
            _8 = src::test::test_buffer_slice__range_error() -> bb8; // scope 0 at workspace/buffer/src/test.rs:736:5: 736:37
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:736:5: 736:35
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_slice__range_error}, val: Value(Scalar(<ZST>)) }
        }
    
        bb8: {
            _9 = src::test::test_buffer_slice__end() -> bb9; // scope 0 at workspace/buffer/src/test.rs:737:5: 737:29
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:737:5: 737:27
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_slice__end}, val: Value(Scalar(<ZST>)) }
        }
    
        bb9: {
            _10 = src::test::test_buffer_slice__end_overflow() -> bb10; // scope 0 at workspace/buffer/src/test.rs:738:5: 738:38
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:738:5: 738:36
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_slice__end_overflow}, val: Value(Scalar(<ZST>)) }
        }
    
        bb10: {
            _11 = src::test::test_buffer_equals() -> bb11; // scope 0 at workspace/buffer/src/test.rs:739:5: 739:25
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:739:5: 739:23
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_equals}, val: Value(Scalar(<ZST>)) }
        }
    
        bb11: {
            _12 = src::test::test_buffer_indexof() -> bb12; // scope 0 at workspace/buffer/src/test.rs:741:5: 741:26
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:741:5: 741:24
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_indexof}, val: Value(Scalar(<ZST>)) }
        }
    
        bb12: {
            _13 = src::test::test_buffer_fill() -> bb13; // scope 0 at workspace/buffer/src/test.rs:742:5: 742:23
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:742:5: 742:21
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_fill}, val: Value(Scalar(<ZST>)) }
        }
    
        bb13: {
            _14 = src::test::test_buffer_clear() -> bb14; // scope 0 at workspace/buffer/src/test.rs:743:5: 743:24
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:743:5: 743:22
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_clear}, val: Value(Scalar(<ZST>)) }
        }
    
        bb14: {
            _15 = src::test::test_buffer_trim() -> bb15; // scope 0 at workspace/buffer/src/test.rs:744:5: 744:23
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:744:5: 744:21
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_trim}, val: Value(Scalar(<ZST>)) }
        }
    
        bb15: {
            _16 = src::test::test_buffer_compact() -> bb16; // scope 0 at workspace/buffer/src/test.rs:745:5: 745:26
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:745:5: 745:24
                                             // + literal: Const { ty: unsafe extern "C" fn() {src::test::test_buffer_compact}, val: Value(Scalar(<ZST>)) }
        }
    
        bb16: {
            _21 = const b"\n  \x1b[32m\xe2\x9c\x93 \x1b[90mok\x1b[0m\n\n\x00"; // scope 0 at workspace/buffer/src/test.rs:747:9: 747:62
                                             // ty::Const
                                             // + ty: &[u8; 26]
                                             // + val: Value(Scalar(alloc85))
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:747:9: 747:62
                                             // + literal: Const { ty: &[u8; 26], val: Value(Scalar(alloc85)) }
            _20 = &raw const (*_21);         // scope 0 at workspace/buffer/src/test.rs:747:9: 747:62
            _19 = move _20 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/buffer/src/test.rs:747:9: 747:75
            _18 = move _19 as *const i8 (Misc); // scope 0 at workspace/buffer/src/test.rs:747:9: 747:98
            _17 = src::test::printf(move _18) -> bb17; // scope 0 at workspace/buffer/src/test.rs:746:5: 748:6
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:746:5: 746:11
                                             // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::test::printf}, val: Value(Scalar(<ZST>)) }
        }
    
        bb17: {
            _0 = const 0_i32;                // scope 0 at workspace/buffer/src/test.rs:749:12: 749:13
            return;                          // scope 0 at workspace/buffer/src/test.rs:750:2: 750:2
        }
    }
    
    alloc85 (size: 26, align: 1) {
        0x00 │ 0a 20 20 1b 5b 33 32 6d e2 9c 93 20 1b 5b 39 30 │ .  .[32m... .[90
        0x10 │ 6d 6f 6b 1b 5b 30 6d 0a 0a 00                   │ mok.[0m...
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] ... logging body:
    fn src::test::main() -> () {
        let mut _0: ();                      // return place in scope 0 at workspace/buffer/src/test.rs:752:15: 752:15
        let mut _1: i32;                     // in scope 0 at workspace/buffer/src/test.rs:753:35: 753:50
        scope 1 {
        }
    
        bb0: {
            _1 = src::test::main_0() -> bb1; // scope 1 at workspace/buffer/src/test.rs:753:35: 753:43
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:753:35: 753:41
                                             // + literal: Const { ty: unsafe fn() -> i32 {src::test::main_0}, val: Value(Scalar(<ZST>)) }
        }
    
        bb1: {
            std::process::exit(move _1);     // scope 1 at workspace/buffer/src/test.rs:753:14: 753:51
                                             // mir::Constant
                                             // + span: workspace/buffer/src/test.rs:753:14: 753:34
                                             // + literal: Const { ty: fn(i32) -> ! {std::process::exit}, val: Value(Scalar(<ZST>)) }
        }
    }
    
[2022-02-08T10:55:12Z INFO  crustr_rustc_interface::toy_run] Done
    

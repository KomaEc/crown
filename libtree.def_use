@DefId(0:93 ~ lib[f5c5]::src::libtree::putchar)
bb0:
  _3 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _4 = _3 as *const () (PtrToPtr)
  using: _3@Mir(bb0[0])
  _5 = _4 as usize (Transmute)
  using: _4@Mir(bb0[1])
  _6 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _7 = Sub(_6, const 1_usize)
  using: _6@Mir(bb0[3])
  _8 = BitAnd(_5, _7)
  using: _5@Mir(bb0[2]), _7@Mir(bb0[4])
  _9 = Eq(_8, const 0_usize)
  using: _8@Mir(bb0[5])
  assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable]
  using: _9@Mir(bb0[6]), _6@Mir(bb0[3]), _5@Mir(bb0[2])
bb1:
  return
  using: _0@Mir(bb2[1])
bb2:
  _2 = (*_3)
  using: _3@Mir(bb0[0])
  _0 = src::libtree::_IO_putc(_1, move _2) -> [return: bb1, unwind continue]
  using: _1@Entry, _2@Mir(bb2[0])
@DefId(0:94 ~ lib[f5c5]::src::libtree::stat)
bb0:
  _3 = const 1_i32
  using: 
  _0 = src::libtree::__xstat(move _3, _1, _2) -> [return: bb1, unwind continue]
  using: _3@Mir(bb0[0]), _1@Entry, _2@Entry
bb1:
  return
  using: _0@Mir(bb0[1])
@DefId(0:97 ~ lib[f5c5]::src::libtree::utoa)
bb0:
  _3 = _1
  using: _1@Entry
  goto -> bb1
  using: 
bb1:
  _4 = _3
  using: _3@Phi(bb1)
  _6 = _3
  using: _3@Phi(bb1)
  _5 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _6, const 1_isize) -> [return: bb2, unwind continue]
  using: _6@Mir(bb1[1])
bb2:
  _3 = move _5
  using: _5@Mir(bb1[2])
  _9 = const '0' as i32 (IntToInt)
  using: 
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb2[1])
  _11 = _2
  using: _2@Phi(bb1)
  _13 = const 10_i32
  using: 
  _12 = move _13 as u64 (IntToInt)
  using: _13@Mir(bb2[4])
  _10 = core::num::<impl u64>::wrapping_rem(move _11, move _12) -> [return: bb3, unwind continue]
  using: _11@Mir(bb2[3]), _12@Mir(bb2[5])
bb3:
  _7 = core::num::<impl u64>::wrapping_add(move _8, move _10) -> [return: bb4, unwind continue]
  using: _8@Mir(bb2[2]), _10@Mir(bb2[6])
bb4:
  (*_4) = move _7 as i8 (IntToInt)
  using: _4@Mir(bb1[0]), _7@Mir(bb3[0])
  _15 = _2
  using: _2@Phi(bb1)
  _17 = const 10_i32
  using: 
  _16 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb4[2])
  _14 = core::num::<impl u64>::wrapping_div(move _15, move _16) -> [return: bb5, unwind continue]
  using: _15@Mir(bb4[1]), _16@Mir(bb4[3])
bb5:
  _2 = move _14
  using: _14@Mir(bb4[4])
  _19 = _2
  using: _2@Mir(bb5[0])
  _21 = const 0_i32
  using: 
  _20 = move _21 as u64 (IntToInt)
  using: _21@Mir(bb5[2])
  _18 = Gt(move _19, move _20)
  using: _19@Mir(bb5[1]), _20@Mir(bb5[3])
  switchInt(move _18) -> [0: bb6, otherwise: bb1]
  using: _18@Mir(bb5[4])
bb6:
  _25 = _3
  using: _3@Mir(bb2[0])
  _26 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _24 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _25, move _26) -> [return: bb7, unwind continue]
  using: _25@Mir(bb6[0]), _26@Mir(bb6[1])
bb7:
  _23 = move _24 as i64 (IntToInt)
  using: _24@Mir(bb6[2])
  _22 = move _23 as u64 (IntToInt)
  using: _23@Mir(bb7[0])
  _28 = const 0_i32
  using: 
  _27 = move _28 as u64 (IntToInt)
  using: _28@Mir(bb7[2])
  goto -> bb8
  using: 
bb8:
  _30 = _27
  using: _27@Phi(bb8)
  _33 = const 2_i32
  using: 
  _32 = move _33 as u64 (IntToInt)
  using: _33@Mir(bb8[1])
  _31 = core::num::<impl u64>::wrapping_div(_22, move _32) -> [return: bb9, unwind continue]
  using: _22@Mir(bb7[1]), _32@Mir(bb8[2])
bb9:
  _29 = Lt(move _30, move _31)
  using: _30@Mir(bb8[0]), _31@Mir(bb8[3])
  switchInt(move _29) -> [0: bb20, otherwise: bb10]
  using: _29@Mir(bb9[0])
bb10:
  _37 = _27
  using: _27@Phi(bb8)
  _36 = move _37 as isize (IntToInt)
  using: _37@Mir(bb10[0])
  _35 = std::ptr::mut_ptr::<impl *mut i8>::offset(_1, move _36) -> [return: bb11, unwind continue]
  using: _1@Entry, _36@Mir(bb10[1])
bb11:
  _34 = (*_35)
  using: _35@Mir(bb10[2])
  _43 = _27
  using: _27@Phi(bb8)
  _42 = core::num::<impl u64>::wrapping_sub(_22, move _43) -> [return: bb12, unwind continue]
  using: _22@Mir(bb7[1]), _43@Mir(bb11[1])
bb12:
  _45 = const 1_i32
  using: 
  _44 = move _45 as u64 (IntToInt)
  using: _45@Mir(bb12[0])
  _41 = core::num::<impl u64>::wrapping_sub(move _42, move _44) -> [return: bb13, unwind continue]
  using: _42@Mir(bb11[2]), _44@Mir(bb12[1])
bb13:
  _40 = move _41 as isize (IntToInt)
  using: _41@Mir(bb12[2])
  _39 = std::ptr::mut_ptr::<impl *mut i8>::offset(_1, move _40) -> [return: bb14, unwind continue]
  using: _1@Entry, _40@Mir(bb13[0])
bb14:
  _38 = (*_39)
  using: _39@Mir(bb13[1])
  _48 = _27
  using: _27@Phi(bb8)
  _47 = move _48 as isize (IntToInt)
  using: _48@Mir(bb14[1])
  _46 = std::ptr::mut_ptr::<impl *mut i8>::offset(_1, move _47) -> [return: bb15, unwind continue]
  using: _1@Entry, _47@Mir(bb14[2])
bb15:
  (*_46) = move _38
  using: _46@Mir(bb14[3]), _38@Mir(bb14[0])
  _53 = _27
  using: _27@Phi(bb8)
  _52 = core::num::<impl u64>::wrapping_sub(_22, move _53) -> [return: bb16, unwind continue]
  using: _22@Mir(bb7[1]), _53@Mir(bb15[1])
bb16:
  _55 = const 1_i32
  using: 
  _54 = move _55 as u64 (IntToInt)
  using: _55@Mir(bb16[0])
  _51 = core::num::<impl u64>::wrapping_sub(move _52, move _54) -> [return: bb17, unwind continue]
  using: _52@Mir(bb15[2]), _54@Mir(bb16[1])
bb17:
  _50 = move _51 as isize (IntToInt)
  using: _51@Mir(bb16[2])
  _49 = std::ptr::mut_ptr::<impl *mut i8>::offset(_1, move _50) -> [return: bb18, unwind continue]
  using: _1@Entry, _50@Mir(bb17[0])
bb18:
  (*_49) = _34
  using: _49@Mir(bb17[1]), _34@Mir(bb11[0])
  _57 = _27
  using: _27@Phi(bb8)
  _56 = core::num::<impl u64>::wrapping_add(move _57, const 1_u64) -> [return: bb19, unwind continue]
  using: _57@Mir(bb18[1])
bb19:
  _27 = move _56
  using: _56@Mir(bb18[2])
  goto -> bb8
  using: 
bb20:
  _58 = const '\0' as i32 (IntToInt)
  using: 
  _60 = _22 as isize (IntToInt)
  using: _22@Mir(bb7[1])
  _59 = std::ptr::mut_ptr::<impl *mut i8>::offset(_1, move _60) -> [return: bb21, unwind continue]
  using: _1@Entry, _60@Mir(bb20[1])
bb21:
  (*_59) = move _58 as i8 (IntToInt)
  using: _59@Mir(bb20[2]), _58@Mir(bb20[0])
  return
  using: _0@Entry
@DefId(0:98 ~ lib[f5c5]::src::libtree::small_vec_u64_init)
bb0:
  _3 = _1 as *mut libc::c_void (PtrToPtr)
  using: _1@Entry
  _4 = const 0_i32
  using: 
  _6 = std::mem::size_of::<src::libtree::small_vec_u64_t>() -> [return: bb1, unwind continue]
  using: 
bb1:
  _5 = move _6 as u64 (IntToInt)
  using: _6@Mir(bb0[2])
  _2 = src::libtree::memset(move _3, move _4, move _5) -> [return: bb2, unwind continue]
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1]), _5@Mir(bb1[0])
bb2:
  _17 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _18 = _17 as usize (Transmute)
  using: _17@Mir(bb2[0])
  _19 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _20 = Sub(_19, const 1_usize)
  using: _19@Mir(bb2[2])
  _21 = BitAnd(_18, _20)
  using: _18@Mir(bb2[1]), _20@Mir(bb2[3])
  _22 = Eq(_21, const 0_usize)
  using: _21@Mir(bb2[4])
  assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb5, unwind unreachable]
  using: _22@Mir(bb2[5]), _19@Mir(bb2[2]), _18@Mir(bb2[1])
bb3:
  (*_7) = move _8
  using: _7@Mir(bb5[0]), _8@Mir(bb4[2])
  return
  using: _0@Entry
bb4:
  _10 = &mut ((*_1).0: [u64; 16])
  using: _1@Entry
  _9 = move _10 as &mut [u64] (PointerCoercion(Unsize))
  using: _10@Mir(bb4[0])
  _8 = core::slice::<impl [u64]>::as_mut_ptr(move _9) -> [return: bb3, unwind continue]
  using: _9@Mir(bb4[1])
bb5:
  _7 = &mut ((*_1).1: *mut u64)
  using: _1@Entry
  _11 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _12 = _11 as usize (Transmute)
  using: _11@Mir(bb5[1])
  _13 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _14 = Sub(_13, const 1_usize)
  using: _13@Mir(bb5[3])
  _15 = BitAnd(_12, _14)
  using: _12@Mir(bb5[2]), _14@Mir(bb5[4])
  _16 = Eq(_15, const 0_usize)
  using: _15@Mir(bb5[5])
  assert(_16, "misaligned pointer dereference: address must be a multiple of {} but is {}", _13, _12) -> [success: bb4, unwind unreachable]
  using: _16@Mir(bb5[6]), _13@Mir(bb5[3]), _12@Mir(bb5[2])
@DefId(0:99 ~ lib[f5c5]::src::libtree::small_vec_u64_append)
bb0:
  _185 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _186 = _185 as usize (Transmute)
  using: _185@Mir(bb0[0])
  _187 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _188 = Sub(_187, const 1_usize)
  using: _187@Mir(bb0[2])
  _189 = BitAnd(_186, _188)
  using: _186@Mir(bb0[1]), _188@Mir(bb0[3])
  _190 = Eq(_189, const 0_usize)
  using: _189@Mir(bb0[4])
  assert(_190, "misaligned pointer dereference: address must be a multiple of {} but is {}", _187, _186) -> [success: bb48, unwind unreachable]
  using: _190@Mir(bb0[5]), _187@Mir(bb0[2]), _186@Mir(bb0[1])
bb1:
  _179 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _180 = _179 as usize (Transmute)
  using: _179@Mir(bb1[0])
  _181 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _182 = Sub(_181, const 1_usize)
  using: _181@Mir(bb1[2])
  _183 = BitAnd(_180, _182)
  using: _180@Mir(bb1[1]), _182@Mir(bb1[3])
  _184 = Eq(_183, const 0_usize)
  using: _183@Mir(bb1[4])
  assert(_184, "misaligned pointer dereference: address must be a multiple of {} but is {}", _181, _180) -> [success: bb47, unwind unreachable]
  using: _184@Mir(bb1[5]), _181@Mir(bb1[2]), _180@Mir(bb1[1])
bb2:
  (*_7) = move _9
  using: _7@Mir(bb47[0]), _9@Mir(bb47[3])
  _173 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _174 = _173 as usize (Transmute)
  using: _173@Mir(bb2[1])
  _175 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _176 = Sub(_175, const 1_usize)
  using: _175@Mir(bb2[3])
  _177 = BitAnd(_174, _176)
  using: _174@Mir(bb2[2]), _176@Mir(bb2[4])
  _178 = Eq(_177, const 0_usize)
  using: _177@Mir(bb2[5])
  assert(_178, "misaligned pointer dereference: address must be a multiple of {} but is {}", _175, _174) -> [success: bb46, unwind unreachable]
  using: _178@Mir(bb2[6]), _175@Mir(bb2[3]), _174@Mir(bb2[2])
bb3:
  _167 = _11 as *const () (PtrToPtr)
  using: _11@Mir(bb46[2])
  _168 = _167 as usize (Transmute)
  using: _167@Mir(bb3[0])
  _169 = AlignOf(u64)
  using: 
  _170 = Sub(_169, const 1_usize)
  using: _169@Mir(bb3[2])
  _171 = BitAnd(_168, _170)
  using: _168@Mir(bb3[1]), _170@Mir(bb3[3])
  _172 = Eq(_171, const 0_usize)
  using: _171@Mir(bb3[4])
  assert(_172, "misaligned pointer dereference: address must be a multiple of {} but is {}", _169, _168) -> [success: bb45, unwind unreachable]
  using: _172@Mir(bb3[5]), _169@Mir(bb3[2]), _168@Mir(bb3[1])
bb4:
  _161 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _162 = _161 as usize (Transmute)
  using: _161@Mir(bb4[0])
  _163 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _164 = Sub(_163, const 1_usize)
  using: _163@Mir(bb4[2])
  _165 = BitAnd(_162, _164)
  using: _162@Mir(bb4[1]), _164@Mir(bb4[3])
  _166 = Eq(_165, const 0_usize)
  using: _165@Mir(bb4[4])
  assert(_166, "misaligned pointer dereference: address must be a multiple of {} but is {}", _163, _162) -> [success: bb44, unwind unreachable]
  using: _166@Mir(bb4[5]), _163@Mir(bb4[2]), _162@Mir(bb4[1])
bb5:
  _19 = const 2_i32
  using: 
  _20 = const 16_i32
  using: 
  _21 = CheckedMul(_19, _20)
  using: _19@Mir(bb5[0]), _20@Mir(bb5[1])
  assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", move _19, move _20) -> [success: bb7, unwind continue]
  using: _21@Mir(bb5[2]), _19@Mir(bb5[0]), _20@Mir(bb5[1])
bb6:
  _155 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _156 = _155 as usize (Transmute)
  using: _155@Mir(bb6[0])
  _157 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _158 = Sub(_157, const 1_usize)
  using: _157@Mir(bb6[2])
  _159 = BitAnd(_156, _158)
  using: _156@Mir(bb6[1]), _158@Mir(bb6[3])
  _160 = Eq(_159, const 0_usize)
  using: _159@Mir(bb6[4])
  assert(_160, "misaligned pointer dereference: address must be a multiple of {} but is {}", _157, _156) -> [success: bb43, unwind unreachable]
  using: _160@Mir(bb6[5]), _157@Mir(bb6[2]), _156@Mir(bb6[1])
bb7:
  _18 = move (_21.0: i32)
  using: _21@Mir(bb5[2])
  _143 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _144 = _143 as usize (Transmute)
  using: _143@Mir(bb7[1])
  _145 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _146 = Sub(_145, const 1_usize)
  using: _145@Mir(bb7[3])
  _147 = BitAnd(_144, _146)
  using: _144@Mir(bb7[2]), _146@Mir(bb7[4])
  _148 = Eq(_147, const 0_usize)
  using: _147@Mir(bb7[5])
  assert(_148, "misaligned pointer dereference: address must be a multiple of {} but is {}", _145, _144) -> [success: bb41, unwind unreachable]
  using: _148@Mir(bb7[6]), _145@Mir(bb7[3]), _144@Mir(bb7[2])
bb8:
  _26 = move _27 as u64 (IntToInt)
  using: _27@Mir(bb39[1])
  _24 = core::num::<impl u64>::wrapping_mul(move _25, move _26) -> [return: bb9, unwind continue]
  using: _25@Mir(bb39[0]), _26@Mir(bb8[0])
bb9:
  _23 = src::libtree::malloc(move _24) -> [return: bb10, unwind continue]
  using: _24@Mir(bb8[1])
bb10:
  (*_22) = move _23 as *mut u64 (PtrToPtr)
  using: _22@Mir(bb40[0]), _23@Mir(bb9[0])
  _125 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _126 = _125 as usize (Transmute)
  using: _125@Mir(bb10[1])
  _127 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _128 = Sub(_127, const 1_usize)
  using: _127@Mir(bb10[3])
  _129 = BitAnd(_126, _128)
  using: _126@Mir(bb10[2]), _128@Mir(bb10[4])
  _130 = Eq(_129, const 0_usize)
  using: _129@Mir(bb10[5])
  assert(_130, "misaligned pointer dereference: address must be a multiple of {} but is {}", _127, _126) -> [success: bb38, unwind unreachable]
  using: _130@Mir(bb10[6]), _127@Mir(bb10[3]), _126@Mir(bb10[2])
bb11:
  switchInt(move _28) -> [0: bb13, otherwise: bb12]
  using: _28@Mir(bb38[1])
bb12:
  _31 = const 1_i32
  using: 
  _30 = src::libtree::exit(move _31) -> unwind continue
  using: _31@Mir(bb12[0])
bb13:
  _119 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _120 = _119 as usize (Transmute)
  using: _119@Mir(bb13[0])
  _121 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _122 = Sub(_121, const 1_usize)
  using: _121@Mir(bb13[2])
  _123 = BitAnd(_120, _122)
  using: _120@Mir(bb13[1]), _122@Mir(bb13[3])
  _124 = Eq(_123, const 0_usize)
  using: _123@Mir(bb13[4])
  assert(_124, "misaligned pointer dereference: address must be a multiple of {} but is {}", _121, _120) -> [success: bb37, unwind unreachable]
  using: _124@Mir(bb13[5]), _121@Mir(bb13[2]), _120@Mir(bb13[1])
bb14:
  _35 = move _36 as *const libc::c_void (PtrToPtr)
  using: _36@Mir(bb36[2])
  _41 = const 16_i32
  using: 
  _40 = move _41 as u64 (IntToInt)
  using: _41@Mir(bb14[1])
  _43 = std::mem::size_of::<u64>() -> [return: bb15, unwind continue]
  using: 
bb15:
  _42 = move _43 as u64 (IntToInt)
  using: _43@Mir(bb14[3])
  _39 = core::num::<impl u64>::wrapping_mul(move _40, move _42) -> [return: bb16, unwind continue]
  using: _40@Mir(bb14[2]), _42@Mir(bb15[0])
bb16:
  _32 = src::libtree::memcpy(move _33, move _35, move _39) -> [return: bb25, unwind continue]
  using: _33@Mir(bb37[1]), _35@Mir(bb14[0]), _39@Mir(bb15[1])
bb17:
  _107 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _108 = _107 as usize (Transmute)
  using: _107@Mir(bb17[0])
  _109 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _110 = Sub(_109, const 1_usize)
  using: _109@Mir(bb17[2])
  _111 = BitAnd(_108, _110)
  using: _108@Mir(bb17[1]), _110@Mir(bb17[3])
  _112 = Eq(_111, const 0_usize)
  using: _111@Mir(bb17[4])
  assert(_112, "misaligned pointer dereference: address must be a multiple of {} but is {}", _109, _108) -> [success: bb35, unwind unreachable]
  using: _112@Mir(bb17[5]), _109@Mir(bb17[2]), _108@Mir(bb17[1])
bb18:
  (*_47) = move _48
  using: _47@Mir(bb35[0]), _48@Mir(bb35[4])
  _101 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _102 = _101 as usize (Transmute)
  using: _101@Mir(bb18[1])
  _103 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _104 = Sub(_103, const 1_usize)
  using: _103@Mir(bb18[3])
  _105 = BitAnd(_102, _104)
  using: _102@Mir(bb18[2]), _104@Mir(bb18[4])
  _106 = Eq(_105, const 0_usize)
  using: _105@Mir(bb18[5])
  assert(_106, "misaligned pointer dereference: address must be a multiple of {} but is {}", _103, _102) -> [success: bb34, unwind unreachable]
  using: _106@Mir(bb18[6]), _103@Mir(bb18[3]), _102@Mir(bb18[2])
bb19:
  _58 = move _59 as u64 (IntToInt)
  using: _59@Mir(bb33[1])
  _56 = core::num::<impl u64>::wrapping_mul(move _57, move _58) -> [return: bb20, unwind continue]
  using: _57@Mir(bb33[0]), _58@Mir(bb19[0])
bb20:
  _53 = src::libtree::realloc(move _54, move _56) -> [return: bb21, unwind continue]
  using: _54@Mir(bb34[1]), _56@Mir(bb19[1])
bb21:
  _52 = move _53 as *mut u64 (PtrToPtr)
  using: _53@Mir(bb20[0])
  _60 = std::ptr::mut_ptr::<impl *mut u64>::is_null(_52) -> [return: bb22, unwind continue]
  using: _52@Mir(bb21[0])
bb22:
  switchInt(move _60) -> [0: bb24, otherwise: bb23]
  using: _60@Mir(bb21[1])
bb23:
  _62 = const 1_i32
  using: 
  _61 = src::libtree::exit(move _62) -> unwind continue
  using: _62@Mir(bb23[0])
bb24:
  _89 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _90 = _89 as usize (Transmute)
  using: _89@Mir(bb24[0])
  _91 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _92 = Sub(_91, const 1_usize)
  using: _91@Mir(bb24[2])
  _93 = BitAnd(_90, _92)
  using: _90@Mir(bb24[1]), _92@Mir(bb24[3])
  _94 = Eq(_93, const 0_usize)
  using: _93@Mir(bb24[4])
  assert(_94, "misaligned pointer dereference: address must be a multiple of {} but is {}", _91, _90) -> [success: bb32, unwind unreachable]
  using: _94@Mir(bb24[5]), _91@Mir(bb24[2]), _90@Mir(bb24[1])
bb25:
  _83 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _84 = _83 as usize (Transmute)
  using: _83@Mir(bb25[0])
  _85 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _86 = Sub(_85, const 1_usize)
  using: _85@Mir(bb25[2])
  _87 = BitAnd(_84, _86)
  using: _84@Mir(bb25[1]), _86@Mir(bb25[3])
  _88 = Eq(_87, const 0_usize)
  using: _87@Mir(bb25[4])
  assert(_88, "misaligned pointer dereference: address must be a multiple of {} but is {}", _85, _84) -> [success: bb31, unwind unreachable]
  using: _88@Mir(bb25[5]), _85@Mir(bb25[2]), _84@Mir(bb25[1])
bb26:
  (*_64) = move _66
  using: _64@Mir(bb31[0]), _66@Mir(bb31[3])
  _77 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _78 = _77 as usize (Transmute)
  using: _77@Mir(bb26[1])
  _79 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _80 = Sub(_79, const 1_usize)
  using: _79@Mir(bb26[3])
  _81 = BitAnd(_78, _80)
  using: _78@Mir(bb26[2]), _80@Mir(bb26[4])
  _82 = Eq(_81, const 0_usize)
  using: _81@Mir(bb26[5])
  assert(_82, "misaligned pointer dereference: address must be a multiple of {} but is {}", _79, _78) -> [success: bb30, unwind unreachable]
  using: _82@Mir(bb26[6]), _79@Mir(bb26[3]), _78@Mir(bb26[2])
bb27:
  _71 = _68 as *const () (PtrToPtr)
  using: _68@Mir(bb30[2])
  _72 = _71 as usize (Transmute)
  using: _71@Mir(bb27[0])
  _73 = AlignOf(u64)
  using: 
  _74 = Sub(_73, const 1_usize)
  using: _73@Mir(bb27[2])
  _75 = BitAnd(_72, _74)
  using: _72@Mir(bb27[1]), _74@Mir(bb27[3])
  _76 = Eq(_75, const 0_usize)
  using: _75@Mir(bb27[4])
  assert(_76, "misaligned pointer dereference: address must be a multiple of {} but is {}", _73, _72) -> [success: bb29, unwind unreachable]
  using: _76@Mir(bb27[5]), _73@Mir(bb27[2]), _72@Mir(bb27[1])
bb28:
  return
  using: _0@Entry
bb29:
  (*_68) = _2
  using: _68@Mir(bb30[2]), _2@Entry
  goto -> bb28
  using: 
bb30:
  _69 = ((*_1).1: *mut u64)
  using: _1@Entry
  _70 = _65 as isize (IntToInt)
  using: _65@Mir(bb31[1])
  _68 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _69, move _70) -> [return: bb27, unwind continue]
  using: _69@Mir(bb30[0]), _70@Mir(bb30[1])
bb31:
  _64 = &mut ((*_1).2: u64)
  using: _1@Entry
  _65 = (*_64)
  using: _64@Mir(bb31[0])
  _67 = (*_64)
  using: _64@Mir(bb31[0])
  _66 = core::num::<impl u64>::wrapping_add(move _67, const 1_u64) -> [return: bb26, unwind continue]
  using: _67@Mir(bb31[2])
bb32:
  _63 = &mut ((*_1).1: *mut u64)
  using: _1@Entry
  (*_63) = _52
  using: _63@Mir(bb32[0]), _52@Mir(bb21[0])
  goto -> bb25
  using: 
bb33:
  _57 = ((*_1).3: u64)
  using: _1@Entry
  _59 = std::mem::size_of::<u64>() -> [return: bb19, unwind continue]
  using: 
bb34:
  _55 = ((*_1).1: *mut u64)
  using: _1@Entry
  _54 = move _55 as *mut libc::c_void (PtrToPtr)
  using: _55@Mir(bb34[0])
  _95 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _96 = _95 as usize (Transmute)
  using: _95@Mir(bb34[2])
  _97 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _98 = Sub(_97, const 1_usize)
  using: _97@Mir(bb34[4])
  _99 = BitAnd(_96, _98)
  using: _96@Mir(bb34[3]), _98@Mir(bb34[5])
  _100 = Eq(_99, const 0_usize)
  using: _99@Mir(bb34[6])
  assert(_100, "misaligned pointer dereference: address must be a multiple of {} but is {}", _97, _96) -> [success: bb33, unwind unreachable]
  using: _100@Mir(bb34[7]), _97@Mir(bb34[4]), _96@Mir(bb34[3])
bb35:
  _47 = &mut ((*_1).3: u64)
  using: _1@Entry
  _49 = (*_47)
  using: _47@Mir(bb35[0])
  _51 = const 2_i32
  using: 
  _50 = move _51 as u64 (IntToInt)
  using: _51@Mir(bb35[2])
  _48 = core::num::<impl u64>::wrapping_mul(move _49, move _50) -> [return: bb18, unwind continue]
  using: _49@Mir(bb35[1]), _50@Mir(bb35[3])
bb36:
  _38 = &mut ((*_1).0: [u64; 16])
  using: _1@Entry
  _37 = move _38 as &mut [u64] (PointerCoercion(Unsize))
  using: _38@Mir(bb36[0])
  _36 = core::slice::<impl [u64]>::as_mut_ptr(move _37) -> [return: bb14, unwind continue]
  using: _37@Mir(bb36[1])
bb37:
  _34 = ((*_1).1: *mut u64)
  using: _1@Entry
  _33 = move _34 as *mut libc::c_void (PtrToPtr)
  using: _34@Mir(bb37[0])
  _113 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _114 = _113 as usize (Transmute)
  using: _113@Mir(bb37[2])
  _115 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _116 = Sub(_115, const 1_usize)
  using: _115@Mir(bb37[4])
  _117 = BitAnd(_114, _116)
  using: _114@Mir(bb37[3]), _116@Mir(bb37[5])
  _118 = Eq(_117, const 0_usize)
  using: _117@Mir(bb37[6])
  assert(_118, "misaligned pointer dereference: address must be a multiple of {} but is {}", _115, _114) -> [success: bb36, unwind unreachable]
  using: _118@Mir(bb37[7]), _115@Mir(bb37[4]), _114@Mir(bb37[3])
bb38:
  _29 = ((*_1).1: *mut u64)
  using: _1@Entry
  _28 = std::ptr::mut_ptr::<impl *mut u64>::is_null(move _29) -> [return: bb11, unwind continue]
  using: _29@Mir(bb38[0])
bb39:
  _25 = ((*_1).3: u64)
  using: _1@Entry
  _27 = std::mem::size_of::<u64>() -> [return: bb8, unwind continue]
  using: 
bb40:
  _22 = &mut ((*_1).1: *mut u64)
  using: _1@Entry
  _131 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _132 = _131 as usize (Transmute)
  using: _131@Mir(bb40[1])
  _133 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _134 = Sub(_133, const 1_usize)
  using: _133@Mir(bb40[3])
  _135 = BitAnd(_132, _134)
  using: _132@Mir(bb40[2]), _134@Mir(bb40[4])
  _136 = Eq(_135, const 0_usize)
  using: _135@Mir(bb40[5])
  assert(_136, "misaligned pointer dereference: address must be a multiple of {} but is {}", _133, _132) -> [success: bb39, unwind unreachable]
  using: _136@Mir(bb40[6]), _133@Mir(bb40[3]), _132@Mir(bb40[2])
bb41:
  ((*_1).3: u64) = move _18 as u64 (IntToInt)
  using: _1@Entry, _18@Mir(bb7[0])
  _137 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _138 = _137 as usize (Transmute)
  using: _137@Mir(bb41[1])
  _139 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _140 = Sub(_139, const 1_usize)
  using: _139@Mir(bb41[3])
  _141 = BitAnd(_138, _140)
  using: _138@Mir(bb41[2]), _140@Mir(bb41[4])
  _142 = Eq(_141, const 0_usize)
  using: _141@Mir(bb41[5])
  assert(_142, "misaligned pointer dereference: address must be a multiple of {} but is {}", _139, _138) -> [success: bb40, unwind unreachable]
  using: _142@Mir(bb41[6]), _139@Mir(bb41[3]), _138@Mir(bb41[2])
bb42:
  _46 = ((*_1).3: u64)
  using: _1@Entry
  _44 = Eq(move _45, move _46)
  using: _45@Mir(bb43[0]), _46@Mir(bb42[0])
  switchInt(move _44) -> [0: bb25, otherwise: bb17]
  using: _44@Mir(bb42[1])
bb43:
  _45 = ((*_1).2: u64)
  using: _1@Entry
  _149 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _150 = _149 as usize (Transmute)
  using: _149@Mir(bb43[1])
  _151 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _152 = Sub(_151, const 1_usize)
  using: _151@Mir(bb43[3])
  _153 = BitAnd(_150, _152)
  using: _150@Mir(bb43[2]), _152@Mir(bb43[4])
  _154 = Eq(_153, const 0_usize)
  using: _153@Mir(bb43[5])
  assert(_154, "misaligned pointer dereference: address must be a multiple of {} but is {}", _151, _150) -> [success: bb42, unwind unreachable]
  using: _154@Mir(bb43[6]), _151@Mir(bb43[3]), _150@Mir(bb43[2])
bb44:
  _15 = ((*_1).2: u64)
  using: _1@Entry
  _17 = const 16_i32
  using: 
  _16 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb44[1])
  _14 = Eq(move _15, move _16)
  using: _15@Mir(bb44[0]), _16@Mir(bb44[2])
  switchInt(move _14) -> [0: bb6, otherwise: bb5]
  using: _14@Mir(bb44[3])
bb45:
  (*_11) = _2
  using: _11@Mir(bb46[2]), _2@Entry
  goto -> bb28
  using: 
bb46:
  _12 = ((*_1).1: *mut u64)
  using: _1@Entry
  _13 = _8 as isize (IntToInt)
  using: _8@Mir(bb47[1])
  _11 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _12, move _13) -> [return: bb3, unwind continue]
  using: _12@Mir(bb46[0]), _13@Mir(bb46[1])
bb47:
  _7 = &mut ((*_1).2: u64)
  using: _1@Entry
  _8 = (*_7)
  using: _7@Mir(bb47[0])
  _10 = (*_7)
  using: _7@Mir(bb47[0])
  _9 = core::num::<impl u64>::wrapping_add(move _10, const 1_u64) -> [return: bb2, unwind continue]
  using: _10@Mir(bb47[2])
bb48:
  _4 = ((*_1).2: u64)
  using: _1@Entry
  _6 = const 16_i32
  using: 
  _5 = move _6 as u64 (IntToInt)
  using: _6@Mir(bb48[1])
  _3 = Lt(move _4, move _5)
  using: _4@Mir(bb48[0]), _5@Mir(bb48[2])
  switchInt(move _3) -> [0: bb4, otherwise: bb1]
  using: _3@Mir(bb48[3])
@DefId(0:100 ~ lib[f5c5]::src::libtree::small_vec_u64_free)
bb0:
  _22 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _23 = _22 as usize (Transmute)
  using: _22@Mir(bb0[0])
  _24 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _25 = Sub(_24, const 1_usize)
  using: _24@Mir(bb0[2])
  _26 = BitAnd(_23, _25)
  using: _23@Mir(bb0[1]), _25@Mir(bb0[3])
  _27 = Eq(_26, const 0_usize)
  using: _26@Mir(bb0[4])
  assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb6, unwind unreachable]
  using: _27@Mir(bb0[5]), _24@Mir(bb0[2]), _23@Mir(bb0[1])
bb1:
  _16 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _17 = _16 as usize (Transmute)
  using: _16@Mir(bb1[0])
  _18 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _19 = Sub(_18, const 1_usize)
  using: _18@Mir(bb1[2])
  _20 = BitAnd(_17, _19)
  using: _17@Mir(bb1[1]), _19@Mir(bb1[3])
  _21 = Eq(_20, const 0_usize)
  using: _20@Mir(bb1[4])
  assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb5, unwind unreachable]
  using: _21@Mir(bb1[5]), _18@Mir(bb1[2]), _17@Mir(bb1[1])
bb2:
  _10 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _11 = _10 as usize (Transmute)
  using: _10@Mir(bb2[0])
  _12 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _13 = Sub(_12, const 1_usize)
  using: _12@Mir(bb2[2])
  _14 = BitAnd(_11, _13)
  using: _11@Mir(bb2[1]), _13@Mir(bb2[3])
  _15 = Eq(_14, const 0_usize)
  using: _14@Mir(bb2[4])
  assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb4, unwind unreachable]
  using: _15@Mir(bb2[5]), _12@Mir(bb2[2]), _11@Mir(bb2[1])
bb3:
  return
  using: _0@Entry
bb4:
  _9 = &mut ((*_1).1: *mut u64)
  using: _1@Entry
  (*_9) = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: _9@Mir(bb4[0])
  goto -> bb3
  using: 
bb5:
  _8 = ((*_1).1: *mut u64)
  using: _1@Entry
  _7 = move _8 as *mut libc::c_void (PtrToPtr)
  using: _8@Mir(bb5[0])
  _6 = src::libtree::free(move _7) -> [return: bb2, unwind continue]
  using: _7@Mir(bb5[1])
bb6:
  _3 = ((*_1).2: u64)
  using: _1@Entry
  _5 = const 16_i32
  using: 
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb6[1])
  _2 = Le(move _3, move _4)
  using: _3@Mir(bb6[0]), _4@Mir(bb6[2])
  switchInt(move _2) -> [0: bb1, otherwise: bb3]
  using: _2@Mir(bb6[3])
@DefId(0:101 ~ lib[f5c5]::src::libtree::host_is_little_endian)
bb0:
  _1 = const 1_i32
  using: 
  _4 = &mut _1
  using: _1@Mir(bb0[0])
  _3 = &raw mut (*_4)
  using: _4@Mir(bb0[1])
  _2 = move _3 as *mut i8 (PtrToPtr)
  using: _3@Mir(bb0[2])
  _10 = const 0_i32
  using: 
  _9 = move _10 as isize (IntToInt)
  using: _10@Mir(bb0[4])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::offset(_2, move _9) -> [return: bb1, unwind continue]
  using: _2@Mir(bb0[3]), _9@Mir(bb0[5])
bb1:
  _7 = (*_8)
  using: _8@Mir(bb0[6])
  _6 = move _7 as i32 (IntToInt)
  using: _7@Mir(bb1[0])
  _11 = const 1_i32
  using: 
  _5 = Eq(move _6, move _11)
  using: _6@Mir(bb1[1]), _11@Mir(bb1[2])
  _0 = move _5 as i32 (IntToInt)
  using: _5@Mir(bb1[3])
  return
  using: _0@Mir(bb1[4])
@DefId(0:102 ~ lib[f5c5]::src::libtree::is_ascending_order)
bb0:
  _4 = const 1_i32
  using: 
  _3 = move _4 as u64 (IntToInt)
  using: _4@Mir(bb0[0])
  goto -> bb1
  using: 
bb1:
  _6 = _3
  using: _3@Phi(bb1)
  _5 = Lt(move _6, _2)
  using: _6@Mir(bb1[0]), _2@Entry
  switchInt(move _5) -> [0: bb9, otherwise: bb2]
  using: _5@Mir(bb1[1])
bb2:
  _12 = _3
  using: _3@Phi(bb1)
  _14 = const 1_i32
  using: 
  _13 = move _14 as u64 (IntToInt)
  using: _14@Mir(bb2[1])
  _11 = core::num::<impl u64>::wrapping_sub(move _12, move _13) -> [return: bb3, unwind continue]
  using: _12@Mir(bb2[0]), _13@Mir(bb2[2])
bb3:
  _10 = move _11 as isize (IntToInt)
  using: _11@Mir(bb2[3])
  _9 = std::ptr::mut_ptr::<impl *mut u64>::offset(_1, move _10) -> [return: bb4, unwind continue]
  using: _1@Entry, _10@Mir(bb3[0])
bb4:
  _27 = _9 as *const () (PtrToPtr)
  using: _9@Mir(bb3[1])
  _28 = _27 as usize (Transmute)
  using: _27@Mir(bb4[0])
  _29 = AlignOf(u64)
  using: 
  _30 = Sub(_29, const 1_usize)
  using: _29@Mir(bb4[2])
  _31 = BitAnd(_28, _30)
  using: _28@Mir(bb4[1]), _30@Mir(bb4[3])
  _32 = Eq(_31, const 0_usize)
  using: _31@Mir(bb4[4])
  assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb12, unwind unreachable]
  using: _32@Mir(bb4[5]), _29@Mir(bb4[2]), _28@Mir(bb4[1])
bb5:
  _21 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb12[3])
  _22 = _21 as usize (Transmute)
  using: _21@Mir(bb5[0])
  _23 = AlignOf(u64)
  using: 
  _24 = Sub(_23, const 1_usize)
  using: _23@Mir(bb5[2])
  _25 = BitAnd(_22, _24)
  using: _22@Mir(bb5[1]), _24@Mir(bb5[3])
  _26 = Eq(_25, const 0_usize)
  using: _25@Mir(bb5[4])
  assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb11, unwind unreachable]
  using: _26@Mir(bb5[5]), _23@Mir(bb5[2]), _22@Mir(bb5[1])
bb6:
  _0 = const 0_i32
  using: 
  goto -> bb10
  using: 
bb7:
  _20 = _3
  using: _3@Phi(bb1)
  _19 = core::num::<impl u64>::wrapping_add(move _20, const 1_u64) -> [return: bb8, unwind continue]
  using: _20@Mir(bb7[0])
bb8:
  _3 = move _19
  using: _19@Mir(bb7[1])
  goto -> bb1
  using: 
bb9:
  _0 = const 1_i32
  using: 
  goto -> bb10
  using: 
bb10:
  return
  using: _0@Phi(bb10)
bb11:
  _15 = (*_16)
  using: _16@Mir(bb12[3])
  _7 = Ge(move _8, move _15)
  using: _8@Mir(bb12[0]), _15@Mir(bb11[0])
  switchInt(move _7) -> [0: bb7, otherwise: bb6]
  using: _7@Mir(bb11[1])
bb12:
  _8 = (*_9)
  using: _9@Mir(bb3[1])
  _18 = _3
  using: _3@Phi(bb1)
  _17 = move _18 as isize (IntToInt)
  using: _18@Mir(bb12[1])
  _16 = std::ptr::mut_ptr::<impl *mut u64>::offset(_1, move _17) -> [return: bb5, unwind continue]
  using: _1@Entry, _17@Mir(bb12[2])
@DefId(0:103 ~ lib[f5c5]::src::libtree::string_table_maybe_grow)
bb0:
  _60 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _61 = _60 as usize (Transmute)
  using: _60@Mir(bb0[0])
  _62 = AlignOf(src::libtree::string_table_t)
  using: 
  _63 = Sub(_62, const 1_usize)
  using: _62@Mir(bb0[2])
  _64 = BitAnd(_61, _63)
  using: _61@Mir(bb0[1]), _63@Mir(bb0[3])
  _65 = Eq(_64, const 0_usize)
  using: _64@Mir(bb0[4])
  assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb18, unwind unreachable]
  using: _65@Mir(bb0[5]), _62@Mir(bb0[2]), _61@Mir(bb0[1])
bb1:
  _54 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _55 = _54 as usize (Transmute)
  using: _54@Mir(bb1[0])
  _56 = AlignOf(src::libtree::string_table_t)
  using: 
  _57 = Sub(_56, const 1_usize)
  using: _56@Mir(bb1[2])
  _58 = BitAnd(_55, _57)
  using: _55@Mir(bb1[1]), _57@Mir(bb1[3])
  _59 = Eq(_58, const 0_usize)
  using: _58@Mir(bb1[4])
  assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb17, unwind unreachable]
  using: _59@Mir(bb1[5]), _56@Mir(bb1[2]), _55@Mir(bb1[1])
bb2:
  _9 = const 2_i32
  using: 
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb2[0])
  _48 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _49 = _48 as usize (Transmute)
  using: _48@Mir(bb2[2])
  _50 = AlignOf(src::libtree::string_table_t)
  using: 
  _51 = Sub(_50, const 1_usize)
  using: _50@Mir(bb2[4])
  _52 = BitAnd(_49, _51)
  using: _49@Mir(bb2[3]), _51@Mir(bb2[5])
  _53 = Eq(_52, const 0_usize)
  using: _52@Mir(bb2[6])
  assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb16, unwind unreachable]
  using: _53@Mir(bb2[7]), _50@Mir(bb2[4]), _49@Mir(bb2[3])
bb3:
  _7 = core::num::<impl u64>::wrapping_mul(move _8, move _10) -> [return: bb4, unwind continue]
  using: _8@Mir(bb2[1]), _10@Mir(bb16[1])
bb4:
  _42 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _43 = _42 as usize (Transmute)
  using: _42@Mir(bb4[0])
  _44 = AlignOf(src::libtree::string_table_t)
  using: 
  _45 = Sub(_44, const 1_usize)
  using: _44@Mir(bb4[2])
  _46 = BitAnd(_43, _45)
  using: _43@Mir(bb4[1]), _45@Mir(bb4[3])
  _47 = Eq(_46, const 0_usize)
  using: _46@Mir(bb4[4])
  assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb15, unwind unreachable]
  using: _47@Mir(bb4[5]), _44@Mir(bb4[2]), _43@Mir(bb4[1])
bb5:
  _18 = move _19 as u64 (IntToInt)
  using: _19@Mir(bb13[1])
  _16 = core::num::<impl u64>::wrapping_mul(move _17, move _18) -> [return: bb6, unwind continue]
  using: _17@Mir(bb13[0]), _18@Mir(bb5[0])
bb6:
  _13 = src::libtree::realloc(move _14, move _16) -> [return: bb7, unwind continue]
  using: _14@Mir(bb14[1]), _16@Mir(bb5[1])
bb7:
  _12 = move _13 as *mut i8 (PtrToPtr)
  using: _13@Mir(bb6[0])
  _20 = std::ptr::mut_ptr::<impl *mut i8>::is_null(_12) -> [return: bb8, unwind continue]
  using: _12@Mir(bb7[0])
bb8:
  switchInt(move _20) -> [0: bb10, otherwise: bb9]
  using: _20@Mir(bb7[1])
bb9:
  _22 = const 1_i32
  using: 
  _21 = src::libtree::exit(move _22) -> unwind continue
  using: _22@Mir(bb9[0])
bb10:
  _24 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _25 = _24 as usize (Transmute)
  using: _24@Mir(bb10[0])
  _26 = AlignOf(src::libtree::string_table_t)
  using: 
  _27 = Sub(_26, const 1_usize)
  using: _26@Mir(bb10[2])
  _28 = BitAnd(_25, _27)
  using: _25@Mir(bb10[1]), _27@Mir(bb10[3])
  _29 = Eq(_28, const 0_usize)
  using: _28@Mir(bb10[4])
  assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb12, unwind unreachable]
  using: _29@Mir(bb10[5]), _26@Mir(bb10[2]), _25@Mir(bb10[1])
bb11:
  return
  using: _0@Entry
bb12:
  _23 = &mut ((*_1).0: *mut i8)
  using: _1@Entry
  (*_23) = _12
  using: _23@Mir(bb12[0]), _12@Mir(bb7[0])
  goto -> bb11
  using: 
bb13:
  _17 = ((*_1).2: u64)
  using: _1@Entry
  _19 = std::mem::size_of::<i8>() -> [return: bb5, unwind continue]
  using: 
bb14:
  _15 = ((*_1).0: *mut i8)
  using: _1@Entry
  _14 = move _15 as *mut libc::c_void (PtrToPtr)
  using: _15@Mir(bb14[0])
  _30 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _31 = _30 as usize (Transmute)
  using: _30@Mir(bb14[2])
  _32 = AlignOf(src::libtree::string_table_t)
  using: 
  _33 = Sub(_32, const 1_usize)
  using: _32@Mir(bb14[4])
  _34 = BitAnd(_31, _33)
  using: _31@Mir(bb14[3]), _33@Mir(bb14[5])
  _35 = Eq(_34, const 0_usize)
  using: _34@Mir(bb14[6])
  assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb13, unwind unreachable]
  using: _35@Mir(bb14[7]), _32@Mir(bb14[4]), _31@Mir(bb14[3])
bb15:
  ((*_1).2: u64) = move _7
  using: _1@Entry, _7@Mir(bb3[0])
  _36 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _37 = _36 as usize (Transmute)
  using: _36@Mir(bb15[1])
  _38 = AlignOf(src::libtree::string_table_t)
  using: 
  _39 = Sub(_38, const 1_usize)
  using: _38@Mir(bb15[3])
  _40 = BitAnd(_37, _39)
  using: _37@Mir(bb15[2]), _39@Mir(bb15[4])
  _41 = Eq(_40, const 0_usize)
  using: _40@Mir(bb15[5])
  assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb14, unwind unreachable]
  using: _41@Mir(bb15[6]), _38@Mir(bb15[3]), _37@Mir(bb15[2])
bb16:
  _11 = ((*_1).1: u64)
  using: _1@Entry
  _10 = core::num::<impl u64>::wrapping_add(move _11, _2) -> [return: bb3, unwind continue]
  using: _11@Mir(bb16[0]), _2@Entry
bb17:
  _6 = ((*_1).2: u64)
  using: _1@Entry
  _3 = Le(move _4, move _6)
  using: _4@Mir(bb18[1]), _6@Mir(bb17[0])
  switchInt(move _3) -> [0: bb2, otherwise: bb11]
  using: _3@Mir(bb17[1])
bb18:
  _5 = ((*_1).1: u64)
  using: _1@Entry
  _4 = core::num::<impl u64>::wrapping_add(move _5, _2) -> [return: bb1, unwind continue]
  using: _5@Mir(bb18[0]), _2@Entry
@DefId(0:104 ~ lib[f5c5]::src::libtree::string_table_store)
bb0:
  _4 = src::libtree::strlen(_2) -> [return: bb1, unwind continue]
  using: _2@Entry
bb1:
  _6 = const 1_i32
  using: 
  _5 = move _6 as u64 (IntToInt)
  using: _6@Mir(bb1[0])
  _3 = core::num::<impl u64>::wrapping_add(move _4, move _5) -> [return: bb2, unwind continue]
  using: _4@Mir(bb0[0]), _5@Mir(bb1[1])
bb2:
  _8 = _3
  using: _3@Mir(bb1[2])
  _7 = src::libtree::string_table_maybe_grow(_1, move _8) -> [return: bb3, unwind continue]
  using: _1@Entry, _8@Mir(bb2[0])
bb3:
  _33 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _34 = _33 as usize (Transmute)
  using: _33@Mir(bb3[0])
  _35 = AlignOf(src::libtree::string_table_t)
  using: 
  _36 = Sub(_35, const 1_usize)
  using: _35@Mir(bb3[2])
  _37 = BitAnd(_34, _36)
  using: _34@Mir(bb3[1]), _36@Mir(bb3[3])
  _38 = Eq(_37, const 0_usize)
  using: _37@Mir(bb3[4])
  assert(_38, "misaligned pointer dereference: address must be a multiple of {} but is {}", _35, _34) -> [success: bb9, unwind unreachable]
  using: _38@Mir(bb3[5]), _35@Mir(bb3[2]), _34@Mir(bb3[1])
bb4:
  _10 = move _11 as *mut libc::c_void (PtrToPtr)
  using: _11@Mir(bb8[2])
  _15 = _2 as *const libc::c_void (PtrToPtr)
  using: _2@Entry
  _16 = _3
  using: _3@Mir(bb1[2])
  _9 = src::libtree::memcpy(move _10, move _15, move _16) -> [return: bb5, unwind continue]
  using: _10@Mir(bb4[0]), _15@Mir(bb4[1]), _16@Mir(bb4[2])
bb5:
  _21 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _22 = _21 as usize (Transmute)
  using: _21@Mir(bb5[0])
  _23 = AlignOf(src::libtree::string_table_t)
  using: 
  _24 = Sub(_23, const 1_usize)
  using: _23@Mir(bb5[2])
  _25 = BitAnd(_22, _24)
  using: _22@Mir(bb5[1]), _24@Mir(bb5[3])
  _26 = Eq(_25, const 0_usize)
  using: _25@Mir(bb5[4])
  assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb7, unwind unreachable]
  using: _26@Mir(bb5[5]), _23@Mir(bb5[2]), _22@Mir(bb5[1])
bb6:
  (*_17) = move _18
  using: _17@Mir(bb7[0]), _18@Mir(bb7[3])
  return
  using: _0@Entry
bb7:
  _17 = &mut ((*_1).1: u64)
  using: _1@Entry
  _19 = (*_17)
  using: _17@Mir(bb7[0])
  _20 = _3
  using: _3@Mir(bb1[2])
  _18 = core::num::<impl u64>::wrapping_add(move _19, move _20) -> [return: bb6, unwind continue]
  using: _19@Mir(bb7[1]), _20@Mir(bb7[2])
bb8:
  _14 = ((*_1).1: u64)
  using: _1@Entry
  _13 = move _14 as isize (IntToInt)
  using: _14@Mir(bb8[0])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _12, move _13) -> [return: bb4, unwind continue]
  using: _12@Mir(bb9[0]), _13@Mir(bb8[1])
bb9:
  _12 = ((*_1).0: *mut i8)
  using: _1@Entry
  _27 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _28 = _27 as usize (Transmute)
  using: _27@Mir(bb9[1])
  _29 = AlignOf(src::libtree::string_table_t)
  using: 
  _30 = Sub(_29, const 1_usize)
  using: _29@Mir(bb9[3])
  _31 = BitAnd(_28, _30)
  using: _28@Mir(bb9[2]), _30@Mir(bb9[4])
  _32 = Eq(_31, const 0_usize)
  using: _31@Mir(bb9[5])
  assert(_32, "misaligned pointer dereference: address must be a multiple of {} but is {}", _29, _28) -> [success: bb8, unwind unreachable]
  using: _32@Mir(bb9[6]), _29@Mir(bb9[3]), _28@Mir(bb9[2])
@DefId(0:105 ~ lib[f5c5]::src::libtree::string_table_copy_from_file)
bb0:
  _3 = const 0_i32
  using: 
  goto -> bb1
  using: 
bb1:
  _4 = src::libtree::_IO_getc(_2) -> [return: bb2, unwind continue]
  using: _2@Entry
bb2:
  _3 = move _4
  using: _4@Mir(bb1[0])
  _6 = _3
  using: _3@Mir(bb2[0])
  _7 = const '\0' as i32 (IntToInt)
  using: 
  _5 = Ne(move _6, move _7)
  using: _6@Mir(bb2[1]), _7@Mir(bb2[2])
  switchInt(move _5) -> [0: bb6, otherwise: bb3]
  using: _5@Mir(bb2[3])
bb3:
  _9 = _3
  using: _3@Mir(bb2[0])
  _11 = const 1_i32
  using: 
  _12 = Eq(_11, const i32::MIN)
  using: _11@Mir(bb3[1])
  assert(!move _12, "attempt to negate `{}`, which would overflow", _11) -> [success: bb4, unwind continue]
  using: _12@Mir(bb3[2]), _11@Mir(bb3[1])
bb4:
  _10 = Neg(move _11)
  using: _11@Mir(bb3[1])
  _8 = Ne(move _9, move _10)
  using: _9@Mir(bb3[0]), _10@Mir(bb4[0])
  switchInt(move _8) -> [0: bb6, otherwise: bb5]
  using: _8@Mir(bb4[1])
bb5:
  _15 = const 1_i32
  using: 
  _14 = move _15 as u64 (IntToInt)
  using: _15@Mir(bb5[0])
  _13 = src::libtree::string_table_maybe_grow(_1, move _14) -> [return: bb7, unwind continue]
  using: _1@Entry, _14@Mir(bb5[1])
bb6:
  _26 = const 1_i32
  using: 
  _25 = move _26 as u64 (IntToInt)
  using: _26@Mir(bb6[0])
  _24 = src::libtree::string_table_maybe_grow(_1, move _25) -> [return: bb10, unwind continue]
  using: _1@Entry, _25@Mir(bb6[1])
bb7:
  _53 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _54 = _53 as usize (Transmute)
  using: _53@Mir(bb7[0])
  _55 = AlignOf(src::libtree::string_table_t)
  using: 
  _56 = Sub(_55, const 1_usize)
  using: _55@Mir(bb7[2])
  _57 = BitAnd(_54, _56)
  using: _54@Mir(bb7[1]), _56@Mir(bb7[3])
  _58 = Eq(_57, const 0_usize)
  using: _57@Mir(bb7[4])
  assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb16, unwind unreachable]
  using: _58@Mir(bb7[5]), _55@Mir(bb7[2]), _54@Mir(bb7[1])
bb8:
  (*_16) = move _18
  using: _16@Mir(bb16[0]), _18@Mir(bb16[3])
  _20 = _3
  using: _3@Mir(bb2[0])
  _47 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _48 = _47 as usize (Transmute)
  using: _47@Mir(bb8[2])
  _49 = AlignOf(src::libtree::string_table_t)
  using: 
  _50 = Sub(_49, const 1_usize)
  using: _49@Mir(bb8[4])
  _51 = BitAnd(_48, _50)
  using: _48@Mir(bb8[3]), _50@Mir(bb8[5])
  _52 = Eq(_51, const 0_usize)
  using: _51@Mir(bb8[6])
  assert(_52, "misaligned pointer dereference: address must be a multiple of {} but is {}", _49, _48) -> [success: bb15, unwind unreachable]
  using: _52@Mir(bb8[7]), _49@Mir(bb8[4]), _48@Mir(bb8[3])
bb9:
  (*_21) = move _20 as i8 (IntToInt)
  using: _21@Mir(bb15[2]), _20@Mir(bb8[1])
  goto -> bb1
  using: 
bb10:
  _41 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _42 = _41 as usize (Transmute)
  using: _41@Mir(bb10[0])
  _43 = AlignOf(src::libtree::string_table_t)
  using: 
  _44 = Sub(_43, const 1_usize)
  using: _43@Mir(bb10[2])
  _45 = BitAnd(_42, _44)
  using: _42@Mir(bb10[1]), _44@Mir(bb10[3])
  _46 = Eq(_45, const 0_usize)
  using: _45@Mir(bb10[4])
  assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb14, unwind unreachable]
  using: _46@Mir(bb10[5]), _43@Mir(bb10[2]), _42@Mir(bb10[1])
bb11:
  (*_27) = move _29
  using: _27@Mir(bb14[0]), _29@Mir(bb14[3])
  _31 = const '\0' as i32 (IntToInt)
  using: 
  _35 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _36 = _35 as usize (Transmute)
  using: _35@Mir(bb11[2])
  _37 = AlignOf(src::libtree::string_table_t)
  using: 
  _38 = Sub(_37, const 1_usize)
  using: _37@Mir(bb11[4])
  _39 = BitAnd(_36, _38)
  using: _36@Mir(bb11[3]), _38@Mir(bb11[5])
  _40 = Eq(_39, const 0_usize)
  using: _39@Mir(bb11[6])
  assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb13, unwind unreachable]
  using: _40@Mir(bb11[7]), _37@Mir(bb11[4]), _36@Mir(bb11[3])
bb12:
  (*_32) = move _31 as i8 (IntToInt)
  using: _32@Mir(bb13[2]), _31@Mir(bb11[1])
  return
  using: _0@Entry
bb13:
  _33 = ((*_1).0: *mut i8)
  using: _1@Entry
  _34 = _28 as isize (IntToInt)
  using: _28@Mir(bb14[1])
  _32 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _33, move _34) -> [return: bb12, unwind continue]
  using: _33@Mir(bb13[0]), _34@Mir(bb13[1])
bb14:
  _27 = &mut ((*_1).1: u64)
  using: _1@Entry
  _28 = (*_27)
  using: _27@Mir(bb14[0])
  _30 = (*_27)
  using: _27@Mir(bb14[0])
  _29 = core::num::<impl u64>::wrapping_add(move _30, const 1_u64) -> [return: bb11, unwind continue]
  using: _30@Mir(bb14[2])
bb15:
  _22 = ((*_1).0: *mut i8)
  using: _1@Entry
  _23 = _17 as isize (IntToInt)
  using: _17@Mir(bb16[1])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _22, move _23) -> [return: bb9, unwind continue]
  using: _22@Mir(bb15[0]), _23@Mir(bb15[1])
bb16:
  _16 = &mut ((*_1).1: u64)
  using: _1@Entry
  _17 = (*_16)
  using: _16@Mir(bb16[0])
  _19 = (*_16)
  using: _16@Mir(bb16[0])
  _18 = core::num::<impl u64>::wrapping_add(move _19, const 1_u64) -> [return: bb8, unwind continue]
  using: _19@Mir(bb16[2])
@DefId(0:106 ~ lib[f5c5]::src::libtree::is_in_exclude_list)
bb0:
  _3 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _4 = const '\0' as i32 (IntToInt)
  using: 
  _2 = src::libtree::strrchr(move _3, move _4) -> [return: bb1, unwind continue]
  using: _3@Mir(bb0[0]), _4@Mir(bb0[1])
bb1:
  _6 = _2
  using: _2@Mir(bb0[2])
  _5 = Eq(_1, move _6)
  using: _1@Entry, _6@Mir(bb1[0])
  switchInt(move _5) -> [0: bb3, otherwise: bb2]
  using: _5@Mir(bb1[1])
bb2:
  _0 = const 0_i32
  using: 
  goto -> bb25
  using: 
bb3:
  _8 = _2
  using: _2@Mir(bb0[2])
  _7 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _8, const -1_isize) -> [return: bb4, unwind continue]
  using: _8@Mir(bb3[0])
bb4:
  _2 = move _7
  using: _7@Mir(bb3[1])
  goto -> bb5
  using: 
bb5:
  _10 = _2
  using: _2@Phi(bb5)
  _9 = Ne(move _10, _1)
  using: _10@Mir(bb5[0]), _1@Entry
  switchInt(move _9) -> [0: bb11, otherwise: bb6]
  using: _9@Mir(bb5[1])
bb6:
  _13 = (*_2)
  using: _2@Phi(bb5)
  _12 = move _13 as i32 (IntToInt)
  using: _13@Mir(bb6[0])
  _14 = const '0' as i32 (IntToInt)
  using: 
  _11 = Ge(move _12, move _14)
  using: _12@Mir(bb6[1]), _14@Mir(bb6[2])
  switchInt(move _11) -> [0: bb8, otherwise: bb7]
  using: _11@Mir(bb6[3])
bb7:
  _17 = (*_2)
  using: _2@Phi(bb5)
  _16 = move _17 as i32 (IntToInt)
  using: _17@Mir(bb7[0])
  _18 = const '9' as i32 (IntToInt)
  using: 
  _15 = Le(move _16, move _18)
  using: _16@Mir(bb7[1]), _18@Mir(bb7[2])
  switchInt(move _15) -> [0: bb8, otherwise: bb9]
  using: _15@Mir(bb7[3])
bb8:
  _21 = (*_2)
  using: _2@Phi(bb5)
  _20 = move _21 as i32 (IntToInt)
  using: _21@Mir(bb8[0])
  _22 = const '.' as i32 (IntToInt)
  using: 
  _19 = Eq(move _20, move _22)
  using: _20@Mir(bb8[1]), _22@Mir(bb8[2])
  switchInt(move _19) -> [0: bb11, otherwise: bb9]
  using: _19@Mir(bb8[3])
bb9:
  _24 = _2
  using: _2@Phi(bb5)
  _23 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _24, const -1_isize) -> [return: bb10, unwind continue]
  using: _24@Mir(bb9[0])
bb10:
  _2 = move _23
  using: _23@Mir(bb9[1])
  goto -> bb5
  using: 
bb11:
  _26 = const 0_i32
  using: 
  _25 = move _26 as u64 (IntToInt)
  using: _26@Mir(bb11[0])
  goto -> bb12
  using: 
bb12:
  _28 = _25
  using: _25@Phi(bb12)
  _31 = std::mem::size_of::<[*const i8; 14]>() -> [return: bb13, unwind continue]
  using: 
bb13:
  _30 = move _31 as u64 (IntToInt)
  using: _31@Mir(bb12[1])
  _33 = std::mem::size_of::<*mut i8>() -> [return: bb14, unwind continue]
  using: 
bb14:
  _32 = move _33 as u64 (IntToInt)
  using: _33@Mir(bb13[1])
  _29 = core::num::<impl u64>::wrapping_div(move _30, move _32) -> [return: bb15, unwind continue]
  using: _30@Mir(bb13[0]), _32@Mir(bb14[0])
bb15:
  _27 = Lt(move _28, move _29)
  using: _28@Mir(bb12[0]), _29@Mir(bb14[1])
  switchInt(move _27) -> [0: bb24, otherwise: bb16]
  using: _27@Mir(bb15[0])
bb16:
  _36 = const {alloc13: *mut [*const i8; 14]}
  using: 
  _38 = _25
  using: _25@Phi(bb12)
  _37 = move _38 as usize (IntToInt)
  using: _38@Mir(bb16[1])
  _72 = _36 as *const () (PtrToPtr)
  using: _36@Mir(bb16[0])
  _73 = _72 as usize (Transmute)
  using: _72@Mir(bb16[3])
  _74 = AlignOf(*const i8)
  using: 
  _75 = Sub(_74, const 1_usize)
  using: _74@Mir(bb16[5])
  _76 = BitAnd(_73, _75)
  using: _73@Mir(bb16[4]), _75@Mir(bb16[6])
  _77 = Eq(_76, const 0_usize)
  using: _76@Mir(bb16[7])
  assert(_77, "misaligned pointer dereference: address must be a multiple of {} but is {}", _74, _73) -> [success: bb29, unwind unreachable]
  using: _77@Mir(bb16[8]), _74@Mir(bb16[5]), _73@Mir(bb16[4])
bb17:
  _66 = _36 as *const () (PtrToPtr)
  using: _36@Mir(bb16[0])
  _67 = _66 as usize (Transmute)
  using: _66@Mir(bb17[0])
  _68 = AlignOf(*const i8)
  using: 
  _69 = Sub(_68, const 1_usize)
  using: _68@Mir(bb17[2])
  _70 = BitAnd(_67, _69)
  using: _67@Mir(bb17[1]), _69@Mir(bb17[3])
  _71 = Eq(_70, const 0_usize)
  using: _70@Mir(bb17[4])
  assert(_71, "misaligned pointer dereference: address must be a multiple of {} but is {}", _68, _67) -> [success: bb28, unwind unreachable]
  using: _71@Mir(bb17[5]), _68@Mir(bb17[2]), _67@Mir(bb17[1])
bb18:
  _43 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _45 = const {alloc13: *mut [*const i8; 14]}
  using: 
  _47 = _25
  using: _25@Phi(bb12)
  _46 = move _47 as usize (IntToInt)
  using: _47@Mir(bb18[2])
  _60 = _45 as *const () (PtrToPtr)
  using: _45@Mir(bb18[1])
  _61 = _60 as usize (Transmute)
  using: _60@Mir(bb18[4])
  _62 = AlignOf(*const i8)
  using: 
  _63 = Sub(_62, const 1_usize)
  using: _62@Mir(bb18[6])
  _64 = BitAnd(_61, _63)
  using: _61@Mir(bb18[5]), _63@Mir(bb18[7])
  _65 = Eq(_64, const 0_usize)
  using: _64@Mir(bb18[8])
  assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb27, unwind unreachable]
  using: _65@Mir(bb18[9]), _62@Mir(bb18[6]), _61@Mir(bb18[5])
bb19:
  _54 = _45 as *const () (PtrToPtr)
  using: _45@Mir(bb18[1])
  _55 = _54 as usize (Transmute)
  using: _54@Mir(bb19[0])
  _56 = AlignOf(*const i8)
  using: 
  _57 = Sub(_56, const 1_usize)
  using: _56@Mir(bb19[2])
  _58 = BitAnd(_55, _57)
  using: _55@Mir(bb19[1]), _57@Mir(bb19[3])
  _59 = Eq(_58, const 0_usize)
  using: _58@Mir(bb19[4])
  assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb26, unwind unreachable]
  using: _59@Mir(bb19[5]), _56@Mir(bb19[2]), _55@Mir(bb19[1])
bb20:
  _51 = const 0_i32
  using: 
  _41 = Ne(move _42, move _51)
  using: _42@Mir(bb26[2]), _51@Mir(bb20[0])
  switchInt(move _41) -> [0: bb23, otherwise: bb21]
  using: _41@Mir(bb20[1])
bb21:
  _53 = _25
  using: _25@Phi(bb12)
  _52 = core::num::<impl u64>::wrapping_add(move _53, const 1_u64) -> [return: bb22, unwind continue]
  using: _53@Mir(bb21[0])
bb22:
  _25 = move _52
  using: _52@Mir(bb21[1])
  goto -> bb12
  using: 
bb23:
  _0 = const 1_i32
  using: 
  goto -> bb25
  using: 
bb24:
  _0 = const 0_i32
  using: 
  goto -> bb25
  using: 
bb25:
  return
  using: _0@Phi(bb25)
bb26:
  _44 = (*_45)[_46]
  using: _45@Mir(bb18[1]), _46@Mir(bb18[3])
  _50 = _34
  using: _34@Mir(bb28[1])
  _42 = src::libtree::strncmp(move _43, move _44, move _50) -> [return: bb20, unwind continue]
  using: _43@Mir(bb18[0]), _44@Mir(bb26[0]), _50@Mir(bb26[1])
bb27:
  _48 = const 14_usize
  using: 
  _49 = Lt(_46, _48)
  using: _46@Mir(bb18[3]), _48@Mir(bb27[0])
  assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _46) -> [success: bb19, unwind continue]
  using: _49@Mir(bb27[1]), _48@Mir(bb27[0]), _46@Mir(bb18[3])
bb28:
  _35 = (*_36)[_37]
  using: _36@Mir(bb16[0]), _37@Mir(bb16[2])
  _34 = src::libtree::strlen(move _35) -> [return: bb18, unwind continue]
  using: _35@Mir(bb28[0])
bb29:
  _39 = const 14_usize
  using: 
  _40 = Lt(_37, _39)
  using: _37@Mir(bb16[2]), _39@Mir(bb29[0])
  assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _37) -> [success: bb17, unwind continue]
  using: _40@Mir(bb29[1]), _39@Mir(bb29[0]), _37@Mir(bb16[2])
@DefId(0:108 ~ lib[f5c5]::src::libtree::tree_preamble)
bb0:
  _5 = const 0_i32
  using: 
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  _3 = Eq(_2, move _4)
  using: _2@Entry, _4@Mir(bb0[1])
  switchInt(move _3) -> [0: bb1, otherwise: bb17]
  using: _3@Mir(bb0[2])
bb1:
  _7 = const 0_i32
  using: 
  _6 = move _7 as u64 (IntToInt)
  using: _7@Mir(bb1[0])
  goto -> bb2
  using: 
bb2:
  _9 = _6
  using: _6@Phi(bb2)
  _12 = const 1_i32
  using: 
  _11 = move _12 as u64 (IntToInt)
  using: _12@Mir(bb2[1])
  _10 = core::num::<impl u64>::wrapping_sub(_2, move _11) -> [return: bb3, unwind continue]
  using: _2@Entry, _11@Mir(bb2[2])
bb3:
  _8 = Lt(move _9, move _10)
  using: _9@Mir(bb2[0]), _10@Mir(bb2[3])
  switchInt(move _8) -> [0: bb11, otherwise: bb4]
  using: _8@Mir(bb3[0])
bb4:
  _18 = _6
  using: _6@Phi(bb2)
  _17 = move _18 as usize (IntToInt)
  using: _18@Mir(bb4[0])
  _79 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _80 = _79 as usize (Transmute)
  using: _79@Mir(bb4[2])
  _81 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _82 = Sub(_81, const 1_usize)
  using: _81@Mir(bb4[4])
  _83 = BitAnd(_80, _82)
  using: _80@Mir(bb4[3]), _82@Mir(bb4[5])
  _84 = Eq(_83, const 0_usize)
  using: _83@Mir(bb4[6])
  assert(_84, "misaligned pointer dereference: address must be a multiple of {} but is {}", _81, _80) -> [success: bb23, unwind unreachable]
  using: _84@Mir(bb4[7]), _81@Mir(bb4[4]), _80@Mir(bb4[3])
bb5:
  _73 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _74 = _73 as usize (Transmute)
  using: _73@Mir(bb5[0])
  _75 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _76 = Sub(_75, const 1_usize)
  using: _75@Mir(bb5[2])
  _77 = BitAnd(_74, _76)
  using: _74@Mir(bb5[1]), _76@Mir(bb5[3])
  _78 = Eq(_77, const 0_usize)
  using: _77@Mir(bb5[4])
  assert(_78, "misaligned pointer dereference: address must be a multiple of {} but is {}", _75, _74) -> [success: bb22, unwind unreachable]
  using: _78@Mir(bb5[5]), _75@Mir(bb5[2]), _74@Mir(bb5[1])
bb6:
  _23 = const b"    \x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb6[0])
  _21 = move _22 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _22@Mir(bb6[1])
  _14 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb6[2])
  goto -> bb8
  using: 
bb7:
  _26 = const b"\xe2\x94\x82   \x00"
  using: 
  _25 = &raw const (*_26)
  using: _26@Mir(bb7[0])
  _24 = move _25 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _25@Mir(bb7[1])
  _14 = move _24 as *const i8 (PtrToPtr)
  using: _24@Mir(bb7[2])
  goto -> bb8
  using: 
bb8:
  _28 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _67 = _28 as *const () (PtrToPtr)
  using: _28@Mir(bb8[0])
  _68 = _67 as usize (Transmute)
  using: _67@Mir(bb8[1])
  _69 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _70 = Sub(_69, const 1_usize)
  using: _69@Mir(bb8[3])
  _71 = BitAnd(_68, _70)
  using: _68@Mir(bb8[2]), _70@Mir(bb8[4])
  _72 = Eq(_71, const 0_usize)
  using: _71@Mir(bb8[5])
  assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb21, unwind unreachable]
  using: _72@Mir(bb8[6]), _69@Mir(bb8[3]), _68@Mir(bb8[2])
bb9:
  _30 = _6
  using: _6@Phi(bb2)
  _29 = core::num::<impl u64>::wrapping_add(move _30, const 1_u64) -> [return: bb10, unwind continue]
  using: _30@Mir(bb9[0])
bb10:
  _6 = move _29
  using: _29@Mir(bb9[1])
  goto -> bb2
  using: 
bb11:
  _38 = const 1_i32
  using: 
  _37 = move _38 as u64 (IntToInt)
  using: _38@Mir(bb11[0])
  _36 = core::num::<impl u64>::wrapping_sub(_2, move _37) -> [return: bb12, unwind continue]
  using: _2@Entry, _37@Mir(bb11[1])
bb12:
  _35 = move _36 as usize (IntToInt)
  using: _36@Mir(bb11[2])
  _61 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _62 = _61 as usize (Transmute)
  using: _61@Mir(bb12[1])
  _63 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _64 = Sub(_63, const 1_usize)
  using: _63@Mir(bb12[3])
  _65 = BitAnd(_62, _64)
  using: _62@Mir(bb12[2]), _64@Mir(bb12[4])
  _66 = Eq(_65, const 0_usize)
  using: _65@Mir(bb12[5])
  assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb20, unwind unreachable]
  using: _66@Mir(bb12[6]), _63@Mir(bb12[3]), _62@Mir(bb12[2])
bb13:
  _55 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _56 = _55 as usize (Transmute)
  using: _55@Mir(bb13[0])
  _57 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _58 = Sub(_57, const 1_usize)
  using: _57@Mir(bb13[2])
  _59 = BitAnd(_56, _58)
  using: _56@Mir(bb13[1]), _58@Mir(bb13[3])
  _60 = Eq(_59, const 0_usize)
  using: _59@Mir(bb13[4])
  assert(_60, "misaligned pointer dereference: address must be a multiple of {} but is {}", _57, _56) -> [success: bb19, unwind unreachable]
  using: _60@Mir(bb13[5]), _57@Mir(bb13[2]), _56@Mir(bb13[1])
bb14:
  _43 = const b"\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 \x00"
  using: 
  _42 = &raw const (*_43)
  using: _43@Mir(bb14[0])
  _41 = move _42 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _42@Mir(bb14[1])
  _32 = move _41 as *const i8 (PtrToPtr)
  using: _41@Mir(bb14[2])
  goto -> bb16
  using: 
bb15:
  _46 = const b"\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 \x00"
  using: 
  _45 = &raw const (*_46)
  using: _46@Mir(bb15[0])
  _44 = move _45 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _45@Mir(bb15[1])
  _32 = move _44 as *const i8 (PtrToPtr)
  using: _44@Mir(bb15[2])
  goto -> bb16
  using: 
bb16:
  _48 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _49 = _48 as *const () (PtrToPtr)
  using: _48@Mir(bb16[0])
  _50 = _49 as usize (Transmute)
  using: _49@Mir(bb16[1])
  _51 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _52 = Sub(_51, const 1_usize)
  using: _51@Mir(bb16[3])
  _53 = BitAnd(_50, _52)
  using: _50@Mir(bb16[2]), _52@Mir(bb16[4])
  _54 = Eq(_53, const 0_usize)
  using: _53@Mir(bb16[5])
  assert(_54, "misaligned pointer dereference: address must be a multiple of {} but is {}", _51, _50) -> [success: bb18, unwind unreachable]
  using: _54@Mir(bb16[6]), _51@Mir(bb16[3]), _50@Mir(bb16[2])
bb17:
  return
  using: _0@Entry
bb18:
  _47 = (*_48)
  using: _48@Mir(bb16[0])
  _31 = src::libtree::fputs(move _32, move _47) -> [return: bb17, unwind continue]
  using: _32@Phi(bb16), _47@Mir(bb18[0])
bb19:
  _34 = ((*_1).15: [i8; 32])[_35]
  using: _1@Entry, _35@Mir(bb12[0])
  _33 = move _34 as i32 (IntToInt)
  using: _34@Mir(bb19[0])
  switchInt(move _33) -> [0: bb15, otherwise: bb14]
  using: _33@Mir(bb19[1])
bb20:
  _39 = const 32_usize
  using: 
  _40 = Lt(_35, _39)
  using: _35@Mir(bb12[0]), _39@Mir(bb20[0])
  assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _35) -> [success: bb13, unwind continue]
  using: _40@Mir(bb20[1]), _39@Mir(bb20[0]), _35@Mir(bb12[0])
bb21:
  _27 = (*_28)
  using: _28@Mir(bb8[0])
  _13 = src::libtree::fputs(move _14, move _27) -> [return: bb9, unwind continue]
  using: _14@Phi(bb8), _27@Mir(bb21[0])
bb22:
  _16 = ((*_1).15: [i8; 32])[_17]
  using: _1@Entry, _17@Mir(bb4[1])
  _15 = move _16 as i32 (IntToInt)
  using: _16@Mir(bb22[0])
  switchInt(move _15) -> [0: bb7, otherwise: bb6]
  using: _15@Mir(bb22[1])
bb23:
  _19 = const 32_usize
  using: 
  _20 = Lt(_17, _19)
  using: _17@Mir(bb4[1]), _19@Mir(bb23[0])
  assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _17) -> [success: bb5, unwind continue]
  using: _20@Mir(bb23[1]), _19@Mir(bb23[0]), _17@Mir(bb4[1])
@DefId(0:109 ~ lib[f5c5]::src::libtree::apply_exclude_list)
bb0:
  _5 = const 0_i32
  using: 
  _4 = move _5 as u64 (IntToInt)
  using: _5@Mir(bb0[0])
  goto -> bb1
  using: 
bb1:
  _7 = _4
  using: _4@Phi(bb1)
  _133 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _134 = _133 as usize (Transmute)
  using: _133@Mir(bb1[1])
  _135 = AlignOf(u64)
  using: 
  _136 = Sub(_135, const 1_usize)
  using: _135@Mir(bb1[3])
  _137 = BitAnd(_134, _136)
  using: _134@Mir(bb1[2]), _136@Mir(bb1[4])
  _138 = Eq(_137, const 0_usize)
  using: _137@Mir(bb1[5])
  assert(_138, "misaligned pointer dereference: address must be a multiple of {} but is {}", _135, _134) -> [success: bb31, unwind unreachable]
  using: _138@Mir(bb1[6]), _135@Mir(bb1[3]), _134@Mir(bb1[2])
bb2:
  _127 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _128 = _127 as usize (Transmute)
  using: _127@Mir(bb2[0])
  _129 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _130 = Sub(_129, const 1_usize)
  using: _129@Mir(bb2[2])
  _131 = BitAnd(_128, _130)
  using: _128@Mir(bb2[1]), _130@Mir(bb2[3])
  _132 = Eq(_131, const 0_usize)
  using: _131@Mir(bb2[4])
  assert(_132, "misaligned pointer dereference: address must be a multiple of {} but is {}", _129, _128) -> [success: bb30, unwind unreachable]
  using: _132@Mir(bb2[5]), _129@Mir(bb2[2]), _128@Mir(bb2[1])
bb3:
  _115 = _14 as *const () (PtrToPtr)
  using: _14@Mir(bb29[3])
  _116 = _115 as usize (Transmute)
  using: _115@Mir(bb3[0])
  _117 = AlignOf(u64)
  using: 
  _118 = Sub(_117, const 1_usize)
  using: _117@Mir(bb3[2])
  _119 = BitAnd(_116, _118)
  using: _116@Mir(bb3[1]), _118@Mir(bb3[3])
  _120 = Eq(_119, const 0_usize)
  using: _119@Mir(bb3[4])
  assert(_120, "misaligned pointer dereference: address must be a multiple of {} but is {}", _117, _116) -> [success: bb28, unwind unreachable]
  using: _120@Mir(bb3[5]), _117@Mir(bb3[2]), _116@Mir(bb3[1])
bb4:
  _9 = src::libtree::is_in_exclude_list(move _10) -> [return: bb5, unwind continue]
  using: _10@Mir(bb28[2])
bb5:
  switchInt(move _9) -> [0: bb13, otherwise: bb6]
  using: _9@Mir(bb4[0])
bb6:
  _109 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _110 = _109 as usize (Transmute)
  using: _109@Mir(bb6[0])
  _111 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _112 = Sub(_111, const 1_usize)
  using: _111@Mir(bb6[2])
  _113 = BitAnd(_110, _112)
  using: _110@Mir(bb6[1]), _112@Mir(bb6[3])
  _114 = Eq(_113, const 0_usize)
  using: _113@Mir(bb6[4])
  assert(_114, "misaligned pointer dereference: address must be a multiple of {} but is {}", _111, _110) -> [success: bb27, unwind unreachable]
  using: _114@Mir(bb6[5]), _111@Mir(bb6[2]), _110@Mir(bb6[1])
bb7:
  _103 = _19 as *const () (PtrToPtr)
  using: _19@Mir(bb27[3])
  _104 = _103 as usize (Transmute)
  using: _103@Mir(bb7[0])
  _105 = AlignOf(u64)
  using: 
  _106 = Sub(_105, const 1_usize)
  using: _105@Mir(bb7[2])
  _107 = BitAnd(_104, _106)
  using: _104@Mir(bb7[1]), _106@Mir(bb7[3])
  _108 = Eq(_107, const 0_usize)
  using: _107@Mir(bb7[4])
  assert(_108, "misaligned pointer dereference: address must be a multiple of {} but is {}", _105, _104) -> [success: bb26, unwind unreachable]
  using: _108@Mir(bb7[5]), _105@Mir(bb7[2]), _104@Mir(bb7[1])
bb8:
  _26 = move _27 as isize (IntToInt)
  using: _27@Mir(bb24[3])
  _24 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _25, move _26) -> [return: bb9, unwind continue]
  using: _25@Mir(bb25[0]), _26@Mir(bb8[0])
bb9:
  _85 = _24 as *const () (PtrToPtr)
  using: _24@Mir(bb8[1])
  _86 = _85 as usize (Transmute)
  using: _85@Mir(bb9[0])
  _87 = AlignOf(u64)
  using: 
  _88 = Sub(_87, const 1_usize)
  using: _87@Mir(bb9[2])
  _89 = BitAnd(_86, _88)
  using: _86@Mir(bb9[1]), _88@Mir(bb9[3])
  _90 = Eq(_89, const 0_usize)
  using: _89@Mir(bb9[4])
  assert(_90, "misaligned pointer dereference: address must be a multiple of {} but is {}", _87, _86) -> [success: bb23, unwind unreachable]
  using: _90@Mir(bb9[5]), _87@Mir(bb9[2]), _86@Mir(bb9[1])
bb10:
  _73 = _31 as *const () (PtrToPtr)
  using: _31@Mir(bb22[3])
  _74 = _73 as usize (Transmute)
  using: _73@Mir(bb10[0])
  _75 = AlignOf(u64)
  using: 
  _76 = Sub(_75, const 1_usize)
  using: _75@Mir(bb10[2])
  _77 = BitAnd(_74, _76)
  using: _74@Mir(bb10[1]), _76@Mir(bb10[3])
  _78 = Eq(_77, const 0_usize)
  using: _77@Mir(bb10[4])
  assert(_78, "misaligned pointer dereference: address must be a multiple of {} but is {}", _75, _74) -> [success: bb21, unwind unreachable]
  using: _78@Mir(bb10[5]), _75@Mir(bb10[2]), _74@Mir(bb10[1])
bb11:
  _61 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _62 = _61 as usize (Transmute)
  using: _61@Mir(bb11[0])
  _63 = AlignOf(u64)
  using: 
  _64 = Sub(_63, const 1_usize)
  using: _63@Mir(bb11[2])
  _65 = BitAnd(_62, _64)
  using: _62@Mir(bb11[1]), _64@Mir(bb11[3])
  _66 = Eq(_65, const 0_usize)
  using: _65@Mir(bb11[4])
  assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb19, unwind unreachable]
  using: _66@Mir(bb11[5]), _63@Mir(bb11[2]), _62@Mir(bb11[1])
bb12:
  _43 = _37 as *const () (PtrToPtr)
  using: _37@Mir(bb17[2])
  _44 = _43 as usize (Transmute)
  using: _43@Mir(bb12[0])
  _45 = AlignOf(u64)
  using: 
  _46 = Sub(_45, const 1_usize)
  using: _45@Mir(bb12[2])
  _47 = BitAnd(_44, _46)
  using: _44@Mir(bb12[1]), _46@Mir(bb12[3])
  _48 = Eq(_47, const 0_usize)
  using: _47@Mir(bb12[4])
  assert(_48, "misaligned pointer dereference: address must be a multiple of {} but is {}", _45, _44) -> [success: bb16, unwind unreachable]
  using: _48@Mir(bb12[5]), _45@Mir(bb12[2]), _44@Mir(bb12[1])
bb13:
  _42 = _4
  using: _4@Phi(bb1)
  _41 = core::num::<impl u64>::wrapping_add(move _42, const 1_u64) -> [return: bb14, unwind continue]
  using: _42@Mir(bb13[0])
bb14:
  _4 = move _41
  using: _41@Mir(bb13[1])
  goto -> bb1
  using: 
bb15:
  return
  using: _0@Entry
bb16:
  (*_37) = _18
  using: _37@Mir(bb17[2]), _18@Mir(bb26[0])
  goto -> bb1
  using: 
bb17:
  _40 = (*_1)
  using: _1@Entry
  _39 = move _40 as isize (IntToInt)
  using: _40@Mir(bb17[0])
  _37 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _38, move _39) -> [return: bb12, unwind continue]
  using: _38@Mir(bb18[0]), _39@Mir(bb17[1])
bb18:
  _38 = ((*_2).1: *mut u64)
  using: _2@Entry
  _49 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _50 = _49 as usize (Transmute)
  using: _49@Mir(bb18[1])
  _51 = AlignOf(u64)
  using: 
  _52 = Sub(_51, const 1_usize)
  using: _51@Mir(bb18[3])
  _53 = BitAnd(_50, _52)
  using: _50@Mir(bb18[2]), _52@Mir(bb18[4])
  _54 = Eq(_53, const 0_usize)
  using: _53@Mir(bb18[5])
  assert(_54, "misaligned pointer dereference: address must be a multiple of {} but is {}", _51, _50) -> [success: bb17, unwind unreachable]
  using: _54@Mir(bb18[6]), _51@Mir(bb18[3]), _50@Mir(bb18[2])
bb19:
  (*_1) = move _35
  using: _1@Entry, _35@Mir(bb20[1])
  _55 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _56 = _55 as usize (Transmute)
  using: _55@Mir(bb19[1])
  _57 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _58 = Sub(_57, const 1_usize)
  using: _57@Mir(bb19[3])
  _59 = BitAnd(_56, _58)
  using: _56@Mir(bb19[2]), _58@Mir(bb19[4])
  _60 = Eq(_59, const 0_usize)
  using: _59@Mir(bb19[5])
  assert(_60, "misaligned pointer dereference: address must be a multiple of {} but is {}", _57, _56) -> [success: bb18, unwind unreachable]
  using: _60@Mir(bb19[6]), _57@Mir(bb19[3]), _56@Mir(bb19[2])
bb20:
  _36 = (*_1)
  using: _1@Entry
  _35 = core::num::<impl u64>::wrapping_sub(move _36, const 1_u64) -> [return: bb11, unwind continue]
  using: _36@Mir(bb20[0])
bb21:
  (*_31) = move _23
  using: _31@Mir(bb22[3]), _23@Mir(bb23[0])
  _67 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _68 = _67 as usize (Transmute)
  using: _67@Mir(bb21[1])
  _69 = AlignOf(u64)
  using: 
  _70 = Sub(_69, const 1_usize)
  using: _69@Mir(bb21[3])
  _71 = BitAnd(_68, _70)
  using: _68@Mir(bb21[2]), _70@Mir(bb21[4])
  _72 = Eq(_71, const 0_usize)
  using: _71@Mir(bb21[5])
  assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb20, unwind unreachable]
  using: _72@Mir(bb21[6]), _69@Mir(bb21[3]), _68@Mir(bb21[2])
bb22:
  _32 = ((*_2).1: *mut u64)
  using: _2@Entry
  _34 = _4
  using: _4@Phi(bb1)
  _33 = move _34 as isize (IntToInt)
  using: _34@Mir(bb22[1])
  _31 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _32, move _33) -> [return: bb10, unwind continue]
  using: _32@Mir(bb22[0]), _33@Mir(bb22[2])
bb23:
  _23 = (*_24)
  using: _24@Mir(bb8[1])
  _79 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _80 = _79 as usize (Transmute)
  using: _79@Mir(bb23[1])
  _81 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _82 = Sub(_81, const 1_usize)
  using: _81@Mir(bb23[3])
  _83 = BitAnd(_80, _82)
  using: _80@Mir(bb23[2]), _82@Mir(bb23[4])
  _84 = Eq(_83, const 0_usize)
  using: _83@Mir(bb23[5])
  assert(_84, "misaligned pointer dereference: address must be a multiple of {} but is {}", _81, _80) -> [success: bb22, unwind unreachable]
  using: _84@Mir(bb23[6]), _81@Mir(bb23[3]), _80@Mir(bb23[2])
bb24:
  _28 = (*_1)
  using: _1@Entry
  _30 = const 1_i32
  using: 
  _29 = move _30 as u64 (IntToInt)
  using: _30@Mir(bb24[1])
  _27 = core::num::<impl u64>::wrapping_sub(move _28, move _29) -> [return: bb8, unwind continue]
  using: _28@Mir(bb24[0]), _29@Mir(bb24[2])
bb25:
  _25 = ((*_2).1: *mut u64)
  using: _2@Entry
  _91 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _92 = _91 as usize (Transmute)
  using: _91@Mir(bb25[1])
  _93 = AlignOf(u64)
  using: 
  _94 = Sub(_93, const 1_usize)
  using: _93@Mir(bb25[3])
  _95 = BitAnd(_92, _94)
  using: _92@Mir(bb25[2]), _94@Mir(bb25[4])
  _96 = Eq(_95, const 0_usize)
  using: _95@Mir(bb25[5])
  assert(_96, "misaligned pointer dereference: address must be a multiple of {} but is {}", _93, _92) -> [success: bb24, unwind unreachable]
  using: _96@Mir(bb25[6]), _93@Mir(bb25[3]), _92@Mir(bb25[2])
bb26:
  _18 = (*_19)
  using: _19@Mir(bb27[3])
  _97 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _98 = _97 as usize (Transmute)
  using: _97@Mir(bb26[1])
  _99 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _100 = Sub(_99, const 1_usize)
  using: _99@Mir(bb26[3])
  _101 = BitAnd(_98, _100)
  using: _98@Mir(bb26[2]), _100@Mir(bb26[4])
  _102 = Eq(_101, const 0_usize)
  using: _101@Mir(bb26[5])
  assert(_102, "misaligned pointer dereference: address must be a multiple of {} but is {}", _99, _98) -> [success: bb25, unwind unreachable]
  using: _102@Mir(bb26[6]), _99@Mir(bb26[3]), _98@Mir(bb26[2])
bb27:
  _20 = ((*_2).1: *mut u64)
  using: _2@Entry
  _22 = _4
  using: _4@Phi(bb1)
  _21 = move _22 as isize (IntToInt)
  using: _22@Mir(bb27[1])
  _19 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _20, move _21) -> [return: bb7, unwind continue]
  using: _20@Mir(bb27[0]), _21@Mir(bb27[2])
bb28:
  _13 = (*_14)
  using: _14@Mir(bb29[3])
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb28[0])
  _10 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _11, move _12) -> [return: bb4, unwind continue]
  using: _11@Mir(bb30[0]), _12@Mir(bb28[1])
bb29:
  _15 = ((*_2).1: *mut u64)
  using: _2@Entry
  _17 = _4
  using: _4@Phi(bb1)
  _16 = move _17 as isize (IntToInt)
  using: _17@Mir(bb29[1])
  _14 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _15, move _16) -> [return: bb3, unwind continue]
  using: _15@Mir(bb29[0]), _16@Mir(bb29[2])
bb30:
  _11 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Entry
  _121 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _122 = _121 as usize (Transmute)
  using: _121@Mir(bb30[1])
  _123 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _124 = Sub(_123, const 1_usize)
  using: _123@Mir(bb30[3])
  _125 = BitAnd(_122, _124)
  using: _122@Mir(bb30[2]), _124@Mir(bb30[4])
  _126 = Eq(_125, const 0_usize)
  using: _125@Mir(bb30[5])
  assert(_126, "misaligned pointer dereference: address must be a multiple of {} but is {}", _123, _122) -> [success: bb29, unwind unreachable]
  using: _126@Mir(bb30[6]), _123@Mir(bb30[3]), _122@Mir(bb30[2])
bb31:
  _8 = (*_1)
  using: _1@Entry
  _6 = Lt(move _7, move _8)
  using: _7@Mir(bb1[0]), _8@Mir(bb31[0])
  switchInt(move _6) -> [0: bb15, otherwise: bb2]
  using: _6@Mir(bb31[1])
@DefId(0:110 ~ lib[f5c5]::src::libtree::check_absolute_paths)
bb0:
  _6 = const 0_i32
  using: 
  _8 = const 0_i32
  using: 
  _7 = move _8 as u64 (IntToInt)
  using: _8@Mir(bb0[1])
  goto -> bb1
  using: 
bb1:
  _10 = _7
  using: _7@Phi(bb1)
  _353 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _354 = _353 as usize (Transmute)
  using: _353@Mir(bb1[1])
  _355 = AlignOf(u64)
  using: 
  _356 = Sub(_355, const 1_usize)
  using: _355@Mir(bb1[3])
  _357 = BitAnd(_354, _356)
  using: _354@Mir(bb1[2]), _356@Mir(bb1[4])
  _358 = Eq(_357, const 0_usize)
  using: _357@Mir(bb1[5])
  assert(_358, "misaligned pointer dereference: address must be a multiple of {} but is {}", _355, _354) -> [success: bb82, unwind unreachable]
  using: _358@Mir(bb1[6]), _355@Mir(bb1[3]), _354@Mir(bb1[2])
bb2:
  _347 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _348 = _347 as usize (Transmute)
  using: _347@Mir(bb2[0])
  _349 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _350 = Sub(_349, const 1_usize)
  using: _349@Mir(bb2[2])
  _351 = BitAnd(_348, _350)
  using: _348@Mir(bb2[1]), _350@Mir(bb2[3])
  _352 = Eq(_351, const 0_usize)
  using: _351@Mir(bb2[4])
  assert(_352, "misaligned pointer dereference: address must be a multiple of {} but is {}", _349, _348) -> [success: bb81, unwind unreachable]
  using: _352@Mir(bb2[5]), _349@Mir(bb2[2]), _348@Mir(bb2[1])
bb3:
  _329 = _21 as *const () (PtrToPtr)
  using: _21@Mir(bb79[3])
  _330 = _329 as usize (Transmute)
  using: _329@Mir(bb3[0])
  _331 = AlignOf(u64)
  using: 
  _332 = Sub(_331, const 1_usize)
  using: _331@Mir(bb3[2])
  _333 = BitAnd(_330, _332)
  using: _330@Mir(bb3[1]), _332@Mir(bb3[3])
  _334 = Eq(_333, const 0_usize)
  using: _333@Mir(bb3[4])
  assert(_334, "misaligned pointer dereference: address must be a multiple of {} but is {}", _331, _330) -> [success: bb78, unwind unreachable]
  using: _334@Mir(bb3[5]), _331@Mir(bb3[2]), _330@Mir(bb3[1])
bb4:
  _16 = move _17 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _17@Mir(bb78[2])
  _25 = const '/' as i32 (IntToInt)
  using: 
  _15 = src::libtree::strchr(move _16, move _25) -> [return: bb5, unwind continue]
  using: _16@Mir(bb4[0]), _25@Mir(bb4[1])
bb5:
  _14 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _15) -> [return: bb6, unwind continue]
  using: _15@Mir(bb4[2])
bb6:
  switchInt(move _14) -> [0: bb9, otherwise: bb7]
  using: _14@Mir(bb5[0])
bb7:
  _27 = _7
  using: _7@Phi(bb1)
  _26 = core::num::<impl u64>::wrapping_add(move _27, const 1_u64) -> [return: bb8, unwind continue]
  using: _27@Mir(bb7[0])
bb8:
  _7 = move _26
  using: _26@Mir(bb7[1])
  goto -> bb1
  using: 
bb9:
  _28 = [const 0_i8; 4096]
  using: 
  _323 = _12 as *const () (PtrToPtr)
  using: _12@Mir(bb81[1])
  _324 = _323 as usize (Transmute)
  using: _323@Mir(bb9[1])
  _325 = AlignOf(src::libtree::string_table_t)
  using: 
  _326 = Sub(_325, const 1_usize)
  using: _325@Mir(bb9[3])
  _327 = BitAnd(_324, _326)
  using: _324@Mir(bb9[2]), _326@Mir(bb9[4])
  _328 = Eq(_327, const 0_usize)
  using: _327@Mir(bb9[5])
  assert(_328, "misaligned pointer dereference: address must be a multiple of {} but is {}", _325, _324) -> [success: bb77, unwind unreachable]
  using: _328@Mir(bb9[6]), _325@Mir(bb9[3]), _324@Mir(bb9[2])
bb10:
  _311 = _35 as *const () (PtrToPtr)
  using: _35@Mir(bb76[3])
  _312 = _311 as usize (Transmute)
  using: _311@Mir(bb10[0])
  _313 = AlignOf(u64)
  using: 
  _314 = Sub(_313, const 1_usize)
  using: _313@Mir(bb10[2])
  _315 = BitAnd(_312, _314)
  using: _312@Mir(bb10[1]), _314@Mir(bb10[3])
  _316 = Eq(_315, const 0_usize)
  using: _315@Mir(bb10[4])
  assert(_316, "misaligned pointer dereference: address must be a multiple of {} but is {}", _313, _312) -> [success: bb75, unwind unreachable]
  using: _316@Mir(bb10[5]), _313@Mir(bb10[2]), _312@Mir(bb10[1])
bb11:
  _30 = move _31 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _31@Mir(bb75[2])
  _29 = src::libtree::strlen(move _30) -> [return: bb12, unwind continue]
  using: _30@Mir(bb11[0])
bb12:
  _40 = _29
  using: _29@Mir(bb11[1])
  _42 = const 4096_i32
  using: 
  _41 = move _42 as u64 (IntToInt)
  using: _42@Mir(bb12[1])
  _39 = Ge(move _40, move _41)
  using: _40@Mir(bb12[0]), _41@Mir(bb12[2])
  switchInt(move _39) -> [0: bb13, otherwise: bb1]
  using: _39@Mir(bb12[3])
bb13:
  _47 = &mut _28
  using: _28@Mir(bb9[0])
  _46 = move _47 as &mut [i8] (PointerCoercion(Unsize))
  using: _47@Mir(bb13[0])
  _45 = core::slice::<impl [i8]>::as_mut_ptr(move _46) -> [return: bb14, unwind continue]
  using: _46@Mir(bb13[1])
bb14:
  _44 = move _45 as *mut libc::c_void (PtrToPtr)
  using: _45@Mir(bb13[2])
  _305 = _12 as *const () (PtrToPtr)
  using: _12@Mir(bb81[1])
  _306 = _305 as usize (Transmute)
  using: _305@Mir(bb14[1])
  _307 = AlignOf(src::libtree::string_table_t)
  using: 
  _308 = Sub(_307, const 1_usize)
  using: _307@Mir(bb14[3])
  _309 = BitAnd(_306, _308)
  using: _306@Mir(bb14[2]), _308@Mir(bb14[4])
  _310 = Eq(_309, const 0_usize)
  using: _309@Mir(bb14[5])
  assert(_310, "misaligned pointer dereference: address must be a multiple of {} but is {}", _307, _306) -> [success: bb74, unwind unreachable]
  using: _310@Mir(bb14[6]), _307@Mir(bb14[3]), _306@Mir(bb14[2])
bb15:
  _293 = _53 as *const () (PtrToPtr)
  using: _53@Mir(bb73[3])
  _294 = _293 as usize (Transmute)
  using: _293@Mir(bb15[0])
  _295 = AlignOf(u64)
  using: 
  _296 = Sub(_295, const 1_usize)
  using: _295@Mir(bb15[2])
  _297 = BitAnd(_294, _296)
  using: _294@Mir(bb15[1]), _296@Mir(bb15[3])
  _298 = Eq(_297, const 0_usize)
  using: _297@Mir(bb15[4])
  assert(_298, "misaligned pointer dereference: address must be a multiple of {} but is {}", _295, _294) -> [success: bb72, unwind unreachable]
  using: _298@Mir(bb15[5]), _295@Mir(bb15[2]), _294@Mir(bb15[1])
bb16:
  _48 = move _49 as *const libc::c_void (PtrToPtr)
  using: _49@Mir(bb72[2])
  _58 = _29
  using: _29@Mir(bb11[1])
  _60 = const 1_i32
  using: 
  _59 = move _60 as u64 (IntToInt)
  using: _60@Mir(bb16[2])
  _57 = core::num::<impl u64>::wrapping_add(move _58, move _59) -> [return: bb17, unwind continue]
  using: _58@Mir(bb16[1]), _59@Mir(bb16[3])
bb17:
  _43 = src::libtree::memcpy(move _44, move _48, move _57) -> [return: bb18, unwind continue]
  using: _44@Mir(bb14[0]), _48@Mir(bb16[0]), _57@Mir(bb16[4])
bb18:
  _287 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _288 = _287 as usize (Transmute)
  using: _287@Mir(bb18[0])
  _289 = AlignOf(u64)
  using: 
  _290 = Sub(_289, const 1_usize)
  using: _289@Mir(bb18[2])
  _291 = BitAnd(_288, _290)
  using: _288@Mir(bb18[1]), _290@Mir(bb18[3])
  _292 = Eq(_291, const 0_usize)
  using: _291@Mir(bb18[4])
  assert(_292, "misaligned pointer dereference: address must be a multiple of {} but is {}", _289, _288) -> [success: bb71, unwind unreachable]
  using: _292@Mir(bb18[5]), _289@Mir(bb18[2]), _288@Mir(bb18[1])
bb19:
  _275 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _276 = _275 as usize (Transmute)
  using: _275@Mir(bb19[0])
  _277 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _278 = Sub(_277, const 1_usize)
  using: _277@Mir(bb19[2])
  _279 = BitAnd(_276, _278)
  using: _276@Mir(bb19[1]), _278@Mir(bb19[3])
  _280 = Eq(_279, const 0_usize)
  using: _279@Mir(bb19[4])
  assert(_280, "misaligned pointer dereference: address must be a multiple of {} but is {}", _277, _276) -> [success: bb69, unwind unreachable]
  using: _280@Mir(bb19[5]), _277@Mir(bb19[2]), _276@Mir(bb19[1])
bb20:
  _72 = _28[_73]
  using: _28@Mir(bb9[0]), _73@Mir(bb69[3])
  _71 = move _72 as i32 (IntToInt)
  using: _72@Mir(bb20[0])
  _77 = const '/' as i32 (IntToInt)
  using: 
  _70 = Ne(move _71, move _77)
  using: _71@Mir(bb20[1]), _77@Mir(bb20[2])
  switchInt(move _70) -> [0: bb22, otherwise: bb21]
  using: _70@Mir(bb20[3])
bb21:
  _81 = const b" is not absolute\x00"
  using: 
  _80 = &raw const (*_81)
  using: _81@Mir(bb21[0])
  _79 = move _80 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _80@Mir(bb21[1])
  _78 = move _79 as *const i8 (PtrToPtr)
  using: _79@Mir(bb21[2])
  _69 = move _78 as *mut i8 (PtrToPtr)
  using: _78@Mir(bb21[3])
  _82 = const 28_i32
  using: 
  _6 = move _82
  using: _82@Mir(bb21[5])
  goto -> bb30
  using: 
bb22:
  _86 = &mut _28
  using: _28@Mir(bb9[0])
  _85 = move _86 as &mut [i8] (PointerCoercion(Unsize))
  using: _86@Mir(bb22[0])
  _84 = core::slice::<impl [i8]>::as_mut_ptr(move _85) -> [return: bb23, unwind continue]
  using: _85@Mir(bb22[1])
bb23:
  _89 = const 1_i32
  using: 
  _88 = move _89 as u64 (IntToInt)
  using: _89@Mir(bb23[0])
  _87 = core::num::<impl u64>::wrapping_add(_3, move _88) -> [return: bb24, unwind continue]
  using: _3@Entry, _88@Mir(bb23[1])
bb24:
  _90 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _83 = src::libtree::recurse(move _84, move _87, _4, _5, _90) -> [return: bb25, unwind continue]
  using: _84@Mir(bb22[2]), _87@Mir(bb23[2]), _4@Entry, _5@Entry, _90@Mir(bb24[0])
bb25:
  _92 = _83
  using: _83@Mir(bb24[1])
  _93 = const 28_i32
  using: 
  _91 = Eq(move _92, move _93)
  using: _92@Mir(bb25[0]), _93@Mir(bb25[1])
  switchInt(move _91) -> [0: bb27, otherwise: bb26]
  using: _91@Mir(bb25[2])
bb26:
  _94 = const 28_i32
  using: 
  _6 = move _94
  using: _94@Mir(bb26[0])
  goto -> bb27
  using: 
bb27:
  _96 = _83
  using: _83@Mir(bb24[1])
  _97 = const 0_i32
  using: 
  _95 = Ne(move _96, move _97)
  using: _96@Mir(bb27[0]), _97@Mir(bb27[1])
  switchInt(move _95) -> [0: bb30, otherwise: bb28]
  using: _95@Mir(bb27[2])
bb28:
  _99 = _83
  using: _83@Mir(bb24[1])
  _100 = const 28_i32
  using: 
  _98 = Ne(move _99, move _100)
  using: _99@Mir(bb28[0]), _100@Mir(bb28[1])
  switchInt(move _98) -> [0: bb30, otherwise: bb29]
  using: _98@Mir(bb28[2])
bb29:
  _104 = const b" not found\x00"
  using: 
  _103 = &raw const (*_104)
  using: _104@Mir(bb29[0])
  _102 = move _103 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _103@Mir(bb29[1])
  _101 = move _102 as *const i8 (PtrToPtr)
  using: _102@Mir(bb29[2])
  _69 = move _101 as *mut i8 (PtrToPtr)
  using: _101@Mir(bb29[3])
  goto -> bb30
  using: 
bb30:
  _106 = _69
  using: _69@Phi(bb30)
  _105 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _106) -> [return: bb31, unwind continue]
  using: _106@Mir(bb30[0])
bb31:
  switchInt(move _105) -> [0: bb32, otherwise: bb43]
  using: _105@Mir(bb30[1])
bb32:
  _110 = const 1_i32
  using: 
  _109 = move _110 as u64 (IntToInt)
  using: _110@Mir(bb32[0])
  _108 = core::num::<impl u64>::wrapping_add(_3, move _109) -> [return: bb33, unwind continue]
  using: _3@Entry, _109@Mir(bb32[1])
bb33:
  _107 = src::libtree::tree_preamble(_4, move _108) -> [return: bb34, unwind continue]
  using: _4@Entry, _108@Mir(bb32[2])
bb34:
  _269 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _270 = _269 as usize (Transmute)
  using: _269@Mir(bb34[0])
  _271 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _272 = Sub(_271, const 1_usize)
  using: _271@Mir(bb34[2])
  _273 = BitAnd(_270, _272)
  using: _270@Mir(bb34[1]), _272@Mir(bb34[3])
  _274 = Eq(_273, const 0_usize)
  using: _273@Mir(bb34[4])
  assert(_274, "misaligned pointer dereference: address must be a multiple of {} but is {}", _271, _270) -> [success: bb68, unwind unreachable]
  using: _274@Mir(bb34[5]), _271@Mir(bb34[2]), _270@Mir(bb34[1])
bb35:
  _116 = const b"\x1b[1;31m\x00"
  using: 
  _115 = &raw const (*_116)
  using: _116@Mir(bb35[0])
  _114 = move _115 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _115@Mir(bb35[1])
  _113 = move _114 as *const i8 (PtrToPtr)
  using: _114@Mir(bb35[2])
  _118 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _263 = _118 as *const () (PtrToPtr)
  using: _118@Mir(bb35[4])
  _264 = _263 as usize (Transmute)
  using: _263@Mir(bb35[5])
  _265 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _266 = Sub(_265, const 1_usize)
  using: _265@Mir(bb35[7])
  _267 = BitAnd(_264, _266)
  using: _264@Mir(bb35[6]), _266@Mir(bb35[8])
  _268 = Eq(_267, const 0_usize)
  using: _267@Mir(bb35[9])
  assert(_268, "misaligned pointer dereference: address must be a multiple of {} but is {}", _265, _264) -> [success: bb67, unwind unreachable]
  using: _268@Mir(bb35[10]), _265@Mir(bb35[7]), _264@Mir(bb35[6])
bb36:
  _123 = &mut _28
  using: _28@Mir(bb9[0])
  _122 = move _123 as &mut [i8] (PointerCoercion(Unsize))
  using: _123@Mir(bb36[0])
  _121 = core::slice::<impl [i8]>::as_mut_ptr(move _122) -> [return: bb37, unwind continue]
  using: _122@Mir(bb36[1])
bb37:
  _120 = move _121 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _121@Mir(bb36[2])
  _125 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _257 = _125 as *const () (PtrToPtr)
  using: _125@Mir(bb37[1])
  _258 = _257 as usize (Transmute)
  using: _257@Mir(bb37[2])
  _259 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _260 = Sub(_259, const 1_usize)
  using: _259@Mir(bb37[4])
  _261 = BitAnd(_258, _260)
  using: _258@Mir(bb37[3]), _260@Mir(bb37[5])
  _262 = Eq(_261, const 0_usize)
  using: _261@Mir(bb37[6])
  assert(_262, "misaligned pointer dereference: address must be a multiple of {} but is {}", _259, _258) -> [success: bb66, unwind unreachable]
  using: _262@Mir(bb37[7]), _259@Mir(bb37[4]), _258@Mir(bb37[3])
bb38:
  _130 = const b" is not absolute\x00"
  using: 
  _129 = &raw const (*_130)
  using: _130@Mir(bb38[0])
  _128 = move _129 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _129@Mir(bb38[1])
  _127 = move _128 as *const i8 (PtrToPtr)
  using: _128@Mir(bb38[2])
  _132 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _251 = _132 as *const () (PtrToPtr)
  using: _132@Mir(bb38[4])
  _252 = _251 as usize (Transmute)
  using: _251@Mir(bb38[5])
  _253 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _254 = Sub(_253, const 1_usize)
  using: _253@Mir(bb38[7])
  _255 = BitAnd(_252, _254)
  using: _252@Mir(bb38[6]), _254@Mir(bb38[8])
  _256 = Eq(_255, const 0_usize)
  using: _255@Mir(bb38[9])
  assert(_256, "misaligned pointer dereference: address must be a multiple of {} but is {}", _253, _252) -> [success: bb65, unwind unreachable]
  using: _256@Mir(bb38[10]), _253@Mir(bb38[7]), _252@Mir(bb38[6])
bb39:
  _245 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _246 = _245 as usize (Transmute)
  using: _245@Mir(bb39[0])
  _247 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _248 = Sub(_247, const 1_usize)
  using: _247@Mir(bb39[2])
  _249 = BitAnd(_246, _248)
  using: _246@Mir(bb39[1]), _248@Mir(bb39[3])
  _250 = Eq(_249, const 0_usize)
  using: _249@Mir(bb39[4])
  assert(_250, "misaligned pointer dereference: address must be a multiple of {} but is {}", _247, _246) -> [success: bb64, unwind unreachable]
  using: _250@Mir(bb39[5]), _247@Mir(bb39[2]), _246@Mir(bb39[1])
bb40:
  _138 = const b"\x1b[0m\n\x00"
  using: 
  _137 = &raw const (*_138)
  using: _138@Mir(bb40[0])
  _136 = move _137 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _137@Mir(bb40[1])
  _134 = move _136 as *const i8 (PtrToPtr)
  using: _136@Mir(bb40[2])
  goto -> bb42
  using: 
bb41:
  _141 = const b"\n\x00"
  using: 
  _140 = &raw const (*_141)
  using: _141@Mir(bb41[0])
  _139 = move _140 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _140@Mir(bb41[1])
  _134 = move _139 as *const i8 (PtrToPtr)
  using: _139@Mir(bb41[2])
  goto -> bb42
  using: 
bb42:
  _143 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _239 = _143 as *const () (PtrToPtr)
  using: _143@Mir(bb42[0])
  _240 = _239 as usize (Transmute)
  using: _239@Mir(bb42[1])
  _241 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _242 = Sub(_241, const 1_usize)
  using: _241@Mir(bb42[3])
  _243 = BitAnd(_240, _242)
  using: _240@Mir(bb42[2]), _242@Mir(bb42[4])
  _244 = Eq(_243, const 0_usize)
  using: _243@Mir(bb42[5])
  assert(_244, "misaligned pointer dereference: address must be a multiple of {} but is {}", _241, _240) -> [success: bb63, unwind unreachable]
  using: _244@Mir(bb42[6]), _241@Mir(bb42[3]), _240@Mir(bb42[2])
bb43:
  _233 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _234 = _233 as usize (Transmute)
  using: _233@Mir(bb43[0])
  _235 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _236 = Sub(_235, const 1_usize)
  using: _235@Mir(bb43[2])
  _237 = BitAnd(_234, _236)
  using: _234@Mir(bb43[1]), _236@Mir(bb43[3])
  _238 = Eq(_237, const 0_usize)
  using: _237@Mir(bb43[4])
  assert(_238, "misaligned pointer dereference: address must be a multiple of {} but is {}", _235, _234) -> [success: bb62, unwind unreachable]
  using: _238@Mir(bb43[5]), _235@Mir(bb43[2]), _234@Mir(bb43[1])
bb44:
  _227 = _145 as *const () (PtrToPtr)
  using: _145@Mir(bb62[3])
  _228 = _227 as usize (Transmute)
  using: _227@Mir(bb44[0])
  _229 = AlignOf(u64)
  using: 
  _230 = Sub(_229, const 1_usize)
  using: _229@Mir(bb44[2])
  _231 = BitAnd(_228, _230)
  using: _228@Mir(bb44[1]), _230@Mir(bb44[3])
  _232 = Eq(_231, const 0_usize)
  using: _231@Mir(bb44[4])
  assert(_232, "misaligned pointer dereference: address must be a multiple of {} but is {}", _229, _228) -> [success: bb61, unwind unreachable]
  using: _232@Mir(bb44[5]), _229@Mir(bb44[2]), _228@Mir(bb44[1])
bb45:
  _152 = move _153 as isize (IntToInt)
  using: _153@Mir(bb59[3])
  _150 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _151, move _152) -> [return: bb46, unwind continue]
  using: _151@Mir(bb60[0]), _152@Mir(bb45[0])
bb46:
  _209 = _150 as *const () (PtrToPtr)
  using: _150@Mir(bb45[1])
  _210 = _209 as usize (Transmute)
  using: _209@Mir(bb46[0])
  _211 = AlignOf(u64)
  using: 
  _212 = Sub(_211, const 1_usize)
  using: _211@Mir(bb46[2])
  _213 = BitAnd(_210, _212)
  using: _210@Mir(bb46[1]), _212@Mir(bb46[3])
  _214 = Eq(_213, const 0_usize)
  using: _213@Mir(bb46[4])
  assert(_214, "misaligned pointer dereference: address must be a multiple of {} but is {}", _211, _210) -> [success: bb58, unwind unreachable]
  using: _214@Mir(bb46[5]), _211@Mir(bb46[2]), _210@Mir(bb46[1])
bb47:
  _197 = _157 as *const () (PtrToPtr)
  using: _157@Mir(bb57[3])
  _198 = _197 as usize (Transmute)
  using: _197@Mir(bb47[0])
  _199 = AlignOf(u64)
  using: 
  _200 = Sub(_199, const 1_usize)
  using: _199@Mir(bb47[2])
  _201 = BitAnd(_198, _200)
  using: _198@Mir(bb47[1]), _200@Mir(bb47[3])
  _202 = Eq(_201, const 0_usize)
  using: _201@Mir(bb47[4])
  assert(_202, "misaligned pointer dereference: address must be a multiple of {} but is {}", _199, _198) -> [success: bb56, unwind unreachable]
  using: _202@Mir(bb47[5]), _199@Mir(bb47[2]), _198@Mir(bb47[1])
bb48:
  _185 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _186 = _185 as usize (Transmute)
  using: _185@Mir(bb48[0])
  _187 = AlignOf(u64)
  using: 
  _188 = Sub(_187, const 1_usize)
  using: _187@Mir(bb48[2])
  _189 = BitAnd(_186, _188)
  using: _186@Mir(bb48[1]), _188@Mir(bb48[3])
  _190 = Eq(_189, const 0_usize)
  using: _189@Mir(bb48[4])
  assert(_190, "misaligned pointer dereference: address must be a multiple of {} but is {}", _187, _186) -> [success: bb54, unwind unreachable]
  using: _190@Mir(bb48[5]), _187@Mir(bb48[2]), _186@Mir(bb48[1])
bb49:
  _167 = _163 as *const () (PtrToPtr)
  using: _163@Mir(bb52[2])
  _168 = _167 as usize (Transmute)
  using: _167@Mir(bb49[0])
  _169 = AlignOf(u64)
  using: 
  _170 = Sub(_169, const 1_usize)
  using: _169@Mir(bb49[2])
  _171 = BitAnd(_168, _170)
  using: _168@Mir(bb49[1]), _170@Mir(bb49[3])
  _172 = Eq(_171, const 0_usize)
  using: _171@Mir(bb49[4])
  assert(_172, "misaligned pointer dereference: address must be a multiple of {} but is {}", _169, _168) -> [success: bb51, unwind unreachable]
  using: _172@Mir(bb49[5]), _169@Mir(bb49[2]), _168@Mir(bb49[1])
bb50:
  _0 = _6
  using: _6@Phi(bb1)
  return
  using: _0@Mir(bb50[0])
bb51:
  (*_163) = _144
  using: _163@Mir(bb52[2]), _144@Mir(bb61[0])
  goto -> bb1
  using: 
bb52:
  _166 = (*_1)
  using: _1@Entry
  _165 = move _166 as isize (IntToInt)
  using: _166@Mir(bb52[0])
  _163 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _164, move _165) -> [return: bb49, unwind continue]
  using: _164@Mir(bb53[0]), _165@Mir(bb52[1])
bb53:
  _164 = ((*_2).1: *mut u64)
  using: _2@Entry
  _173 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _174 = _173 as usize (Transmute)
  using: _173@Mir(bb53[1])
  _175 = AlignOf(u64)
  using: 
  _176 = Sub(_175, const 1_usize)
  using: _175@Mir(bb53[3])
  _177 = BitAnd(_174, _176)
  using: _174@Mir(bb53[2]), _176@Mir(bb53[4])
  _178 = Eq(_177, const 0_usize)
  using: _177@Mir(bb53[5])
  assert(_178, "misaligned pointer dereference: address must be a multiple of {} but is {}", _175, _174) -> [success: bb52, unwind unreachable]
  using: _178@Mir(bb53[6]), _175@Mir(bb53[3]), _174@Mir(bb53[2])
bb54:
  (*_1) = move _161
  using: _1@Entry, _161@Mir(bb55[1])
  _179 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _180 = _179 as usize (Transmute)
  using: _179@Mir(bb54[1])
  _181 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _182 = Sub(_181, const 1_usize)
  using: _181@Mir(bb54[3])
  _183 = BitAnd(_180, _182)
  using: _180@Mir(bb54[2]), _182@Mir(bb54[4])
  _184 = Eq(_183, const 0_usize)
  using: _183@Mir(bb54[5])
  assert(_184, "misaligned pointer dereference: address must be a multiple of {} but is {}", _181, _180) -> [success: bb53, unwind unreachable]
  using: _184@Mir(bb54[6]), _181@Mir(bb54[3]), _180@Mir(bb54[2])
bb55:
  _162 = (*_1)
  using: _1@Entry
  _161 = core::num::<impl u64>::wrapping_sub(move _162, const 1_u64) -> [return: bb48, unwind continue]
  using: _162@Mir(bb55[0])
bb56:
  (*_157) = move _149
  using: _157@Mir(bb57[3]), _149@Mir(bb58[0])
  _191 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _192 = _191 as usize (Transmute)
  using: _191@Mir(bb56[1])
  _193 = AlignOf(u64)
  using: 
  _194 = Sub(_193, const 1_usize)
  using: _193@Mir(bb56[3])
  _195 = BitAnd(_192, _194)
  using: _192@Mir(bb56[2]), _194@Mir(bb56[4])
  _196 = Eq(_195, const 0_usize)
  using: _195@Mir(bb56[5])
  assert(_196, "misaligned pointer dereference: address must be a multiple of {} but is {}", _193, _192) -> [success: bb55, unwind unreachable]
  using: _196@Mir(bb56[6]), _193@Mir(bb56[3]), _192@Mir(bb56[2])
bb57:
  _158 = ((*_2).1: *mut u64)
  using: _2@Entry
  _160 = _7
  using: _7@Phi(bb1)
  _159 = move _160 as isize (IntToInt)
  using: _160@Mir(bb57[1])
  _157 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _158, move _159) -> [return: bb47, unwind continue]
  using: _158@Mir(bb57[0]), _159@Mir(bb57[2])
bb58:
  _149 = (*_150)
  using: _150@Mir(bb45[1])
  _203 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _204 = _203 as usize (Transmute)
  using: _203@Mir(bb58[1])
  _205 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _206 = Sub(_205, const 1_usize)
  using: _205@Mir(bb58[3])
  _207 = BitAnd(_204, _206)
  using: _204@Mir(bb58[2]), _206@Mir(bb58[4])
  _208 = Eq(_207, const 0_usize)
  using: _207@Mir(bb58[5])
  assert(_208, "misaligned pointer dereference: address must be a multiple of {} but is {}", _205, _204) -> [success: bb57, unwind unreachable]
  using: _208@Mir(bb58[6]), _205@Mir(bb58[3]), _204@Mir(bb58[2])
bb59:
  _154 = (*_1)
  using: _1@Entry
  _156 = const 1_i32
  using: 
  _155 = move _156 as u64 (IntToInt)
  using: _156@Mir(bb59[1])
  _153 = core::num::<impl u64>::wrapping_sub(move _154, move _155) -> [return: bb45, unwind continue]
  using: _154@Mir(bb59[0]), _155@Mir(bb59[2])
bb60:
  _151 = ((*_2).1: *mut u64)
  using: _2@Entry
  _215 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _216 = _215 as usize (Transmute)
  using: _215@Mir(bb60[1])
  _217 = AlignOf(u64)
  using: 
  _218 = Sub(_217, const 1_usize)
  using: _217@Mir(bb60[3])
  _219 = BitAnd(_216, _218)
  using: _216@Mir(bb60[2]), _218@Mir(bb60[4])
  _220 = Eq(_219, const 0_usize)
  using: _219@Mir(bb60[5])
  assert(_220, "misaligned pointer dereference: address must be a multiple of {} but is {}", _217, _216) -> [success: bb59, unwind unreachable]
  using: _220@Mir(bb60[6]), _217@Mir(bb60[3]), _216@Mir(bb60[2])
bb61:
  _144 = (*_145)
  using: _145@Mir(bb62[3])
  _221 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _222 = _221 as usize (Transmute)
  using: _221@Mir(bb61[1])
  _223 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _224 = Sub(_223, const 1_usize)
  using: _223@Mir(bb61[3])
  _225 = BitAnd(_222, _224)
  using: _222@Mir(bb61[2]), _224@Mir(bb61[4])
  _226 = Eq(_225, const 0_usize)
  using: _225@Mir(bb61[5])
  assert(_226, "misaligned pointer dereference: address must be a multiple of {} but is {}", _223, _222) -> [success: bb60, unwind unreachable]
  using: _226@Mir(bb61[6]), _223@Mir(bb61[3]), _222@Mir(bb61[2])
bb62:
  _146 = ((*_2).1: *mut u64)
  using: _2@Entry
  _148 = _7
  using: _7@Phi(bb1)
  _147 = move _148 as isize (IntToInt)
  using: _148@Mir(bb62[1])
  _145 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _146, move _147) -> [return: bb44, unwind continue]
  using: _146@Mir(bb62[0]), _147@Mir(bb62[2])
bb63:
  _142 = (*_143)
  using: _143@Mir(bb42[0])
  _133 = src::libtree::fputs(move _134, move _142) -> [return: bb43, unwind continue]
  using: _134@Phi(bb42), _142@Mir(bb63[0])
bb64:
  _135 = ((*_4).2: i32)
  using: _4@Entry
  switchInt(move _135) -> [0: bb41, otherwise: bb40]
  using: _135@Mir(bb64[0])
bb65:
  _131 = (*_132)
  using: _132@Mir(bb38[4])
  _126 = src::libtree::fputs(move _127, move _131) -> [return: bb39, unwind continue]
  using: _127@Mir(bb38[3]), _131@Mir(bb65[0])
bb66:
  _124 = (*_125)
  using: _125@Mir(bb37[1])
  _119 = src::libtree::fputs(move _120, move _124) -> [return: bb38, unwind continue]
  using: _120@Mir(bb37[0]), _124@Mir(bb66[0])
bb67:
  _117 = (*_118)
  using: _118@Mir(bb35[4])
  _112 = src::libtree::fputs(move _113, move _117) -> [return: bb36, unwind continue]
  using: _113@Mir(bb35[3]), _117@Mir(bb67[0])
bb68:
  _111 = ((*_4).2: i32)
  using: _4@Entry
  switchInt(move _111) -> [0: bb36, otherwise: bb35]
  using: _111@Mir(bb68[0])
bb69:
  ((*_4).15: [i8; 32])[_66] = move _61 as i8 (IntToInt)
  using: _4@Entry, _66@Mir(bb71[5]), _61@Mir(bb71[4])
  _69 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _74 = const 0_i32
  using: 
  _73 = move _74 as usize (IntToInt)
  using: _74@Mir(bb69[2])
  _75 = const 4096_usize
  using: 
  _76 = Lt(_73, _75)
  using: _73@Mir(bb69[3]), _75@Mir(bb69[4])
  assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _73) -> [success: bb20, unwind continue]
  using: _76@Mir(bb69[5]), _75@Mir(bb69[4]), _73@Mir(bb69[3])
bb70:
  _67 = const 32_usize
  using: 
  _68 = Lt(_66, _67)
  using: _66@Mir(bb71[5]), _67@Mir(bb70[0])
  assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> [success: bb19, unwind continue]
  using: _68@Mir(bb70[1]), _67@Mir(bb70[0]), _66@Mir(bb71[5])
bb71:
  _63 = (*_1)
  using: _1@Entry
  _65 = const 1_i32
  using: 
  _64 = move _65 as u64 (IntToInt)
  using: _65@Mir(bb71[1])
  _62 = Le(move _63, move _64)
  using: _63@Mir(bb71[0]), _64@Mir(bb71[2])
  _61 = move _62 as i32 (IntToInt)
  using: _62@Mir(bb71[3])
  _66 = _3 as usize (IntToInt)
  using: _3@Entry
  _281 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _282 = _281 as usize (Transmute)
  using: _281@Mir(bb71[6])
  _283 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _284 = Sub(_283, const 1_usize)
  using: _283@Mir(bb71[8])
  _285 = BitAnd(_282, _284)
  using: _282@Mir(bb71[7]), _284@Mir(bb71[9])
  _286 = Eq(_285, const 0_usize)
  using: _285@Mir(bb71[10])
  assert(_286, "misaligned pointer dereference: address must be a multiple of {} but is {}", _283, _282) -> [success: bb70, unwind unreachable]
  using: _286@Mir(bb71[11]), _283@Mir(bb71[8]), _282@Mir(bb71[7])
bb72:
  _52 = (*_53)
  using: _53@Mir(bb73[3])
  _51 = move _52 as isize (IntToInt)
  using: _52@Mir(bb72[0])
  _49 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _50, move _51) -> [return: bb16, unwind continue]
  using: _50@Mir(bb74[0]), _51@Mir(bb72[1])
bb73:
  _54 = ((*_2).1: *mut u64)
  using: _2@Entry
  _56 = _7
  using: _7@Phi(bb1)
  _55 = move _56 as isize (IntToInt)
  using: _56@Mir(bb73[1])
  _53 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _54, move _55) -> [return: bb15, unwind continue]
  using: _54@Mir(bb73[0]), _55@Mir(bb73[2])
bb74:
  _50 = ((*_12).0: *mut i8)
  using: _12@Mir(bb81[1])
  _299 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _300 = _299 as usize (Transmute)
  using: _299@Mir(bb74[1])
  _301 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _302 = Sub(_301, const 1_usize)
  using: _301@Mir(bb74[3])
  _303 = BitAnd(_300, _302)
  using: _300@Mir(bb74[2]), _302@Mir(bb74[4])
  _304 = Eq(_303, const 0_usize)
  using: _303@Mir(bb74[5])
  assert(_304, "misaligned pointer dereference: address must be a multiple of {} but is {}", _301, _300) -> [success: bb73, unwind unreachable]
  using: _304@Mir(bb74[6]), _301@Mir(bb74[3]), _300@Mir(bb74[2])
bb75:
  _34 = (*_35)
  using: _35@Mir(bb76[3])
  _33 = move _34 as isize (IntToInt)
  using: _34@Mir(bb75[0])
  _31 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _32, move _33) -> [return: bb11, unwind continue]
  using: _32@Mir(bb77[0]), _33@Mir(bb75[1])
bb76:
  _36 = ((*_2).1: *mut u64)
  using: _2@Entry
  _38 = _7
  using: _7@Phi(bb1)
  _37 = move _38 as isize (IntToInt)
  using: _38@Mir(bb76[1])
  _35 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _36, move _37) -> [return: bb10, unwind continue]
  using: _36@Mir(bb76[0]), _37@Mir(bb76[2])
bb77:
  _32 = ((*_12).0: *mut i8)
  using: _12@Mir(bb81[1])
  _317 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _318 = _317 as usize (Transmute)
  using: _317@Mir(bb77[1])
  _319 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _320 = Sub(_319, const 1_usize)
  using: _319@Mir(bb77[3])
  _321 = BitAnd(_318, _320)
  using: _318@Mir(bb77[2]), _320@Mir(bb77[4])
  _322 = Eq(_321, const 0_usize)
  using: _321@Mir(bb77[5])
  assert(_322, "misaligned pointer dereference: address must be a multiple of {} but is {}", _319, _318) -> [success: bb76, unwind unreachable]
  using: _322@Mir(bb77[6]), _319@Mir(bb77[3]), _318@Mir(bb77[2])
bb78:
  _20 = (*_21)
  using: _21@Mir(bb79[3])
  _19 = move _20 as isize (IntToInt)
  using: _20@Mir(bb78[0])
  _17 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _18, move _19) -> [return: bb4, unwind continue]
  using: _18@Mir(bb80[0]), _19@Mir(bb78[1])
bb79:
  _22 = ((*_2).1: *mut u64)
  using: _2@Entry
  _24 = _7
  using: _7@Phi(bb1)
  _23 = move _24 as isize (IntToInt)
  using: _24@Mir(bb79[1])
  _21 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _22, move _23) -> [return: bb3, unwind continue]
  using: _22@Mir(bb79[0]), _23@Mir(bb79[2])
bb80:
  _18 = ((*_12).0: *mut i8)
  using: _12@Mir(bb81[1])
  _335 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _336 = _335 as usize (Transmute)
  using: _335@Mir(bb80[1])
  _337 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _338 = Sub(_337, const 1_usize)
  using: _337@Mir(bb80[3])
  _339 = BitAnd(_336, _338)
  using: _336@Mir(bb80[2]), _338@Mir(bb80[4])
  _340 = Eq(_339, const 0_usize)
  using: _339@Mir(bb80[5])
  assert(_340, "misaligned pointer dereference: address must be a multiple of {} but is {}", _337, _336) -> [success: bb79, unwind unreachable]
  using: _340@Mir(bb80[6]), _337@Mir(bb80[3]), _336@Mir(bb80[2])
bb81:
  _13 = &mut ((*_4).5: src::libtree::string_table_t)
  using: _4@Entry
  _12 = &raw const (*_13)
  using: _13@Mir(bb81[0])
  _341 = _12 as *const () (PtrToPtr)
  using: _12@Mir(bb81[1])
  _342 = _341 as usize (Transmute)
  using: _341@Mir(bb81[2])
  _343 = AlignOf(src::libtree::string_table_t)
  using: 
  _344 = Sub(_343, const 1_usize)
  using: _343@Mir(bb81[4])
  _345 = BitAnd(_342, _344)
  using: _342@Mir(bb81[3]), _344@Mir(bb81[5])
  _346 = Eq(_345, const 0_usize)
  using: _345@Mir(bb81[6])
  assert(_346, "misaligned pointer dereference: address must be a multiple of {} but is {}", _343, _342) -> [success: bb80, unwind unreachable]
  using: _346@Mir(bb81[7]), _343@Mir(bb81[4]), _342@Mir(bb81[3])
bb82:
  _11 = (*_1)
  using: _1@Entry
  _9 = Lt(move _10, move _11)
  using: _10@Mir(bb1[0]), _11@Mir(bb82[0])
  switchInt(move _9) -> [0: bb50, otherwise: bb2]
  using: _9@Mir(bb82[1])
@DefId(0:113 ~ lib[f5c5]::src::libtree::check_search_paths)
bb0:
  _8 = const 0_i32
  using: 
  _9 = [const 0_i8; 4096]
  using: 
  _13 = &mut _9
  using: _9@Mir(bb0[1])
  _12 = move _13 as &mut [i8] (PointerCoercion(Unsize))
  using: _13@Mir(bb0[2])
  _11 = core::slice::<impl [i8]>::as_mut_ptr(move _12) -> [return: bb1, unwind continue]
  using: _12@Mir(bb0[3])
bb1:
  _15 = const 4096_i32
  using: 
  _14 = move _15 as isize (IntToInt)
  using: _15@Mir(bb1[0])
  _10 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _11, move _14) -> [return: bb2, unwind continue]
  using: _11@Mir(bb0[4]), _14@Mir(bb1[1])
bb2:
  _367 = _6 as *const () (PtrToPtr)
  using: _6@Entry
  _368 = _367 as usize (Transmute)
  using: _367@Mir(bb2[0])
  _369 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _370 = Sub(_369, const 1_usize)
  using: _369@Mir(bb2[2])
  _371 = BitAnd(_368, _370)
  using: _368@Mir(bb2[1]), _370@Mir(bb2[3])
  _372 = Eq(_371, const 0_usize)
  using: _371@Mir(bb2[4])
  assert(_372, "misaligned pointer dereference: address must be a multiple of {} but is {}", _369, _368) -> [success: bb91, unwind unreachable]
  using: _372@Mir(bb2[5]), _369@Mir(bb2[2]), _368@Mir(bb2[1])
bb3:
  _361 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _362 = _361 as usize (Transmute)
  using: _361@Mir(bb3[0])
  _363 = AlignOf(src::libtree::string_table_t)
  using: 
  _364 = Sub(_363, const 1_usize)
  using: _363@Mir(bb3[2])
  _365 = BitAnd(_362, _364)
  using: _362@Mir(bb3[1]), _364@Mir(bb3[3])
  _366 = Eq(_365, const 0_usize)
  using: _365@Mir(bb3[4])
  assert(_366, "misaligned pointer dereference: address must be a multiple of {} but is {}", _363, _362) -> [success: bb90, unwind unreachable]
  using: _366@Mir(bb3[5]), _363@Mir(bb3[2]), _362@Mir(bb3[1])
bb4:
  _20 = (*_21)
  using: _21@Mir(bb90[3])
  _19 = move _20 as i32 (IntToInt)
  using: _20@Mir(bb4[0])
  _25 = const '\0' as i32 (IntToInt)
  using: 
  _18 = Ne(move _19, move _25)
  using: _19@Mir(bb4[1]), _25@Mir(bb4[2])
  switchInt(move _18) -> [0: bb60, otherwise: bb5]
  using: _18@Mir(bb4[3])
bb5:
  _355 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _356 = _355 as usize (Transmute)
  using: _355@Mir(bb5[0])
  _357 = AlignOf(src::libtree::string_table_t)
  using: 
  _358 = Sub(_357, const 1_usize)
  using: _357@Mir(bb5[2])
  _359 = BitAnd(_356, _358)
  using: _356@Mir(bb5[1]), _358@Mir(bb5[3])
  _360 = Eq(_359, const 0_usize)
  using: _359@Mir(bb5[4])
  assert(_360, "misaligned pointer dereference: address must be a multiple of {} but is {}", _357, _356) -> [success: bb89, unwind unreachable]
  using: _360@Mir(bb5[5]), _357@Mir(bb5[2]), _356@Mir(bb5[1])
bb6:
  _28 = (*_29)
  using: _29@Mir(bb89[3])
  _27 = move _28 as i32 (IntToInt)
  using: _28@Mir(bb6[0])
  _33 = const ':' as i32 (IntToInt)
  using: 
  _26 = Eq(move _27, move _33)
  using: _27@Mir(bb6[1]), _33@Mir(bb6[2])
  switchInt(move _26) -> [0: bb11, otherwise: bb7]
  using: _26@Mir(bb6[3])
bb7:
  _349 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _350 = _349 as usize (Transmute)
  using: _349@Mir(bb7[0])
  _351 = AlignOf(src::libtree::string_table_t)
  using: 
  _352 = Sub(_351, const 1_usize)
  using: _351@Mir(bb7[2])
  _353 = BitAnd(_350, _352)
  using: _350@Mir(bb7[1]), _352@Mir(bb7[3])
  _354 = Eq(_353, const 0_usize)
  using: _353@Mir(bb7[4])
  assert(_354, "misaligned pointer dereference: address must be a multiple of {} but is {}", _351, _350) -> [success: bb88, unwind unreachable]
  using: _354@Mir(bb7[5]), _351@Mir(bb7[2]), _350@Mir(bb7[1])
bb8:
  _36 = (*_37)
  using: _37@Mir(bb88[3])
  _35 = move _36 as i32 (IntToInt)
  using: _36@Mir(bb8[0])
  _41 = const '\0' as i32 (IntToInt)
  using: 
  _34 = Ne(move _35, move _41)
  using: _35@Mir(bb8[1]), _41@Mir(bb8[2])
  switchInt(move _34) -> [0: bb11, otherwise: bb9]
  using: _34@Mir(bb8[3])
bb9:
  _43 = _2
  using: _2@Phi(bb5)
  _42 = core::num::<impl u64>::wrapping_add(move _43, const 1_u64) -> [return: bb10, unwind continue]
  using: _43@Mir(bb9[0])
bb10:
  _2 = move _42
  using: _42@Mir(bb9[1])
  goto -> bb5
  using: 
bb11:
  _343 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _344 = _343 as usize (Transmute)
  using: _343@Mir(bb11[0])
  _345 = AlignOf(src::libtree::string_table_t)
  using: 
  _346 = Sub(_345, const 1_usize)
  using: _345@Mir(bb11[2])
  _347 = BitAnd(_344, _346)
  using: _344@Mir(bb11[1]), _346@Mir(bb11[3])
  _348 = Eq(_347, const 0_usize)
  using: _347@Mir(bb11[4])
  assert(_348, "misaligned pointer dereference: address must be a multiple of {} but is {}", _345, _344) -> [success: bb87, unwind unreachable]
  using: _348@Mir(bb11[5]), _345@Mir(bb11[2]), _344@Mir(bb11[1])
bb12:
  _46 = (*_47)
  using: _47@Mir(bb87[3])
  _45 = move _46 as i32 (IntToInt)
  using: _46@Mir(bb12[0])
  _51 = const '\0' as i32 (IntToInt)
  using: 
  _44 = Eq(move _45, move _51)
  using: _45@Mir(bb12[1]), _51@Mir(bb12[2])
  switchInt(move _44) -> [0: bb14, otherwise: bb13]
  using: _44@Mir(bb12[3])
bb13:
  _0 = _8
  using: _8@Phi(bb3)
  goto -> bb61
  using: 
bb14:
  _54 = &mut _9
  using: _9@Mir(bb0[1])
  _53 = move _54 as &mut [i8] (PointerCoercion(Unsize))
  using: _54@Mir(bb14[0])
  _52 = core::slice::<impl [i8]>::as_mut_ptr(move _53) -> [return: bb15, unwind continue]
  using: _53@Mir(bb14[1])
bb15:
  _337 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _338 = _337 as usize (Transmute)
  using: _337@Mir(bb15[0])
  _339 = AlignOf(src::libtree::string_table_t)
  using: 
  _340 = Sub(_339, const 1_usize)
  using: _339@Mir(bb15[2])
  _341 = BitAnd(_338, _340)
  using: _338@Mir(bb15[1]), _340@Mir(bb15[3])
  _342 = Eq(_341, const 0_usize)
  using: _341@Mir(bb15[4])
  assert(_342, "misaligned pointer dereference: address must be a multiple of {} but is {}", _339, _338) -> [success: bb86, unwind unreachable]
  using: _342@Mir(bb15[5]), _339@Mir(bb15[2]), _338@Mir(bb15[1])
bb16:
  _57 = (*_58)
  using: _58@Mir(bb86[3])
  _56 = move _57 as i32 (IntToInt)
  using: _57@Mir(bb16[0])
  _62 = const '\0' as i32 (IntToInt)
  using: 
  _55 = Ne(move _56, move _62)
  using: _56@Mir(bb16[1]), _62@Mir(bb16[2])
  switchInt(move _55) -> [0: bb24, otherwise: bb17]
  using: _55@Mir(bb16[3])
bb17:
  _331 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _332 = _331 as usize (Transmute)
  using: _331@Mir(bb17[0])
  _333 = AlignOf(src::libtree::string_table_t)
  using: 
  _334 = Sub(_333, const 1_usize)
  using: _333@Mir(bb17[2])
  _335 = BitAnd(_332, _334)
  using: _332@Mir(bb17[1]), _334@Mir(bb17[3])
  _336 = Eq(_335, const 0_usize)
  using: _335@Mir(bb17[4])
  assert(_336, "misaligned pointer dereference: address must be a multiple of {} but is {}", _333, _332) -> [success: bb85, unwind unreachable]
  using: _336@Mir(bb17[5]), _333@Mir(bb17[2]), _332@Mir(bb17[1])
bb18:
  _65 = (*_66)
  using: _66@Mir(bb85[3])
  _64 = move _65 as i32 (IntToInt)
  using: _65@Mir(bb18[0])
  _70 = const ':' as i32 (IntToInt)
  using: 
  _63 = Ne(move _64, move _70)
  using: _64@Mir(bb18[1]), _70@Mir(bb18[2])
  switchInt(move _63) -> [0: bb24, otherwise: bb19]
  using: _63@Mir(bb18[3])
bb19:
  _72 = _52
  using: _52@Phi(bb15)
  _73 = _10
  using: _10@Mir(bb1[2])
  _71 = Ne(move _72, move _73)
  using: _72@Mir(bb19[0]), _73@Mir(bb19[1])
  switchInt(move _71) -> [0: bb24, otherwise: bb20]
  using: _71@Mir(bb19[2])
bb20:
  _74 = _2
  using: _2@Phi(bb15)
  _76 = _2
  using: _2@Phi(bb15)
  _75 = core::num::<impl u64>::wrapping_add(move _76, const 1_u64) -> [return: bb21, unwind continue]
  using: _76@Mir(bb20[1])
bb21:
  _2 = move _75
  using: _75@Mir(bb20[2])
  _77 = _52
  using: _52@Phi(bb15)
  _79 = _52
  using: _52@Phi(bb15)
  _78 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _79, const 1_isize) -> [return: bb22, unwind continue]
  using: _79@Mir(bb21[2])
bb22:
  _52 = move _78
  using: _78@Mir(bb21[3])
  _325 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _326 = _325 as usize (Transmute)
  using: _325@Mir(bb22[1])
  _327 = AlignOf(src::libtree::string_table_t)
  using: 
  _328 = Sub(_327, const 1_usize)
  using: _327@Mir(bb22[3])
  _329 = BitAnd(_326, _328)
  using: _326@Mir(bb22[2]), _328@Mir(bb22[4])
  _330 = Eq(_329, const 0_usize)
  using: _329@Mir(bb22[5])
  assert(_330, "misaligned pointer dereference: address must be a multiple of {} but is {}", _327, _326) -> [success: bb84, unwind unreachable]
  using: _330@Mir(bb22[6]), _327@Mir(bb22[3]), _326@Mir(bb22[2])
bb23:
  _80 = (*_81)
  using: _81@Mir(bb84[2])
  (*_77) = move _80
  using: _77@Mir(bb21[1]), _80@Mir(bb23[0])
  goto -> bb15
  using: 
bb24:
  _86 = _52
  using: _52@Phi(bb15)
  _88 = const 1_i32
  using: 
  _87 = move _88 as isize (IntToInt)
  using: _88@Mir(bb24[1])
  _85 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _86, move _87) -> [return: bb25, unwind continue]
  using: _86@Mir(bb24[0]), _87@Mir(bb24[2])
bb25:
  _89 = _10
  using: _10@Mir(bb1[2])
  _84 = Ge(move _85, move _89)
  using: _85@Mir(bb24[3]), _89@Mir(bb25[0])
  switchInt(move _84) -> [0: bb26, otherwise: bb3]
  using: _84@Mir(bb25[1])
bb26:
  _94 = _52
  using: _52@Phi(bb15)
  _97 = const 1_i32
  using: 
  _96 = move _97 as isize (IntToInt)
  using: _97@Mir(bb26[1])
  _98 = Eq(_96, const isize::MIN)
  using: _96@Mir(bb26[2])
  assert(!move _98, "attempt to negate `{}`, which would overflow", _96) -> [success: bb27, unwind continue]
  using: _98@Mir(bb26[3]), _96@Mir(bb26[2])
bb27:
  _95 = Neg(move _96)
  using: _96@Mir(bb26[2])
  _93 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _94, move _95) -> [return: bb28, unwind continue]
  using: _94@Mir(bb26[0]), _95@Mir(bb27[0])
bb28:
  _92 = (*_93)
  using: _93@Mir(bb27[1])
  _91 = move _92 as i32 (IntToInt)
  using: _92@Mir(bb28[0])
  _99 = const '/' as i32 (IntToInt)
  using: 
  _90 = Ne(move _91, move _99)
  using: _91@Mir(bb28[1]), _99@Mir(bb28[2])
  switchInt(move _90) -> [0: bb31, otherwise: bb29]
  using: _90@Mir(bb28[3])
bb29:
  _100 = _52
  using: _52@Phi(bb15)
  _102 = _52
  using: _52@Phi(bb15)
  _101 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _102, const 1_isize) -> [return: bb30, unwind continue]
  using: _102@Mir(bb29[1])
bb30:
  _52 = move _101
  using: _101@Mir(bb29[2])
  _103 = const '/' as i32 (IntToInt)
  using: 
  (*_100) = move _103 as i8 (IntToInt)
  using: _100@Mir(bb29[0]), _103@Mir(bb30[1])
  goto -> bb31
  using: 
bb31:
  _104 = _52
  using: _52@Phi(bb31)
  _106 = const 0_i32
  using: 
  _105 = move _106 as u64 (IntToInt)
  using: _106@Mir(bb31[1])
  goto -> bb32
  using: 
bb32:
  _108 = _105
  using: _105@Phi(bb32)
  _319 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _320 = _319 as usize (Transmute)
  using: _319@Mir(bb32[1])
  _321 = AlignOf(u64)
  using: 
  _322 = Sub(_321, const 1_usize)
  using: _321@Mir(bb32[3])
  _323 = BitAnd(_320, _322)
  using: _320@Mir(bb32[2]), _322@Mir(bb32[4])
  _324 = Eq(_323, const 0_usize)
  using: _323@Mir(bb32[5])
  assert(_324, "misaligned pointer dereference: address must be a multiple of {} but is {}", _321, _320) -> [success: bb83, unwind unreachable]
  using: _324@Mir(bb32[6]), _321@Mir(bb32[3]), _320@Mir(bb32[2])
bb33:
  _313 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _314 = _313 as usize (Transmute)
  using: _313@Mir(bb33[0])
  _315 = AlignOf(src::libtree::string_table_t)
  using: 
  _316 = Sub(_315, const 1_usize)
  using: _315@Mir(bb33[2])
  _317 = BitAnd(_314, _316)
  using: _314@Mir(bb33[1]), _316@Mir(bb33[3])
  _318 = Eq(_317, const 0_usize)
  using: _317@Mir(bb33[4])
  assert(_318, "misaligned pointer dereference: address must be a multiple of {} but is {}", _315, _314) -> [success: bb82, unwind unreachable]
  using: _318@Mir(bb33[5]), _315@Mir(bb33[2]), _314@Mir(bb33[1])
bb34:
  _301 = _116 as *const () (PtrToPtr)
  using: _116@Mir(bb81[3])
  _302 = _301 as usize (Transmute)
  using: _301@Mir(bb34[0])
  _303 = AlignOf(u64)
  using: 
  _304 = Sub(_303, const 1_usize)
  using: _303@Mir(bb34[2])
  _305 = BitAnd(_302, _304)
  using: _302@Mir(bb34[1]), _304@Mir(bb34[3])
  _306 = Eq(_305, const 0_usize)
  using: _305@Mir(bb34[4])
  assert(_306, "misaligned pointer dereference: address must be a multiple of {} but is {}", _303, _302) -> [success: bb80, unwind unreachable]
  using: _306@Mir(bb34[5]), _303@Mir(bb34[2]), _302@Mir(bb34[1])
bb35:
  _111 = move _112 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _112@Mir(bb80[2])
  _110 = src::libtree::strlen(move _111) -> [return: bb36, unwind continue]
  using: _111@Mir(bb35[0])
bb36:
  _124 = _110
  using: _110@Mir(bb35[1])
  _123 = move _124 as isize (IntToInt)
  using: _124@Mir(bb36[0])
  _122 = std::ptr::mut_ptr::<impl *mut i8>::offset(_104, move _123) -> [return: bb37, unwind continue]
  using: _104@Mir(bb31[0]), _123@Mir(bb36[1])
bb37:
  _126 = const 1_i32
  using: 
  _125 = move _126 as isize (IntToInt)
  using: _126@Mir(bb37[0])
  _121 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _122, move _125) -> [return: bb38, unwind continue]
  using: _122@Mir(bb36[2]), _125@Mir(bb37[1])
bb38:
  _127 = _10
  using: _10@Mir(bb1[2])
  _120 = Ge(move _121, move _127)
  using: _121@Mir(bb37[2]), _127@Mir(bb38[0])
  switchInt(move _120) -> [0: bb39, otherwise: bb32]
  using: _120@Mir(bb38[1])
bb39:
  _129 = _104 as *mut libc::c_void (PtrToPtr)
  using: _104@Mir(bb31[0])
  _295 = _16 as *const () (PtrToPtr)
  using: _16@Mir(bb91[1])
  _296 = _295 as usize (Transmute)
  using: _295@Mir(bb39[1])
  _297 = AlignOf(src::libtree::string_table_t)
  using: 
  _298 = Sub(_297, const 1_usize)
  using: _297@Mir(bb39[3])
  _299 = BitAnd(_296, _298)
  using: _296@Mir(bb39[2]), _298@Mir(bb39[4])
  _300 = Eq(_299, const 0_usize)
  using: _299@Mir(bb39[5])
  assert(_300, "misaligned pointer dereference: address must be a multiple of {} but is {}", _297, _296) -> [success: bb79, unwind unreachable]
  using: _300@Mir(bb39[6]), _297@Mir(bb39[3]), _296@Mir(bb39[2])
bb40:
  _283 = _135 as *const () (PtrToPtr)
  using: _135@Mir(bb78[3])
  _284 = _283 as usize (Transmute)
  using: _283@Mir(bb40[0])
  _285 = AlignOf(u64)
  using: 
  _286 = Sub(_285, const 1_usize)
  using: _285@Mir(bb40[2])
  _287 = BitAnd(_284, _286)
  using: _284@Mir(bb40[1]), _286@Mir(bb40[3])
  _288 = Eq(_287, const 0_usize)
  using: _287@Mir(bb40[4])
  assert(_288, "misaligned pointer dereference: address must be a multiple of {} but is {}", _285, _284) -> [success: bb77, unwind unreachable]
  using: _288@Mir(bb40[5]), _285@Mir(bb40[2]), _284@Mir(bb40[1])
bb41:
  _130 = move _131 as *const libc::c_void (PtrToPtr)
  using: _131@Mir(bb77[2])
  _140 = _110
  using: _110@Mir(bb35[1])
  _142 = const 1_i32
  using: 
  _141 = move _142 as u64 (IntToInt)
  using: _142@Mir(bb41[2])
  _139 = core::num::<impl u64>::wrapping_add(move _140, move _141) -> [return: bb42, unwind continue]
  using: _140@Mir(bb41[1]), _141@Mir(bb41[3])
bb42:
  _128 = src::libtree::memcpy(move _129, move _130, move _139) -> [return: bb43, unwind continue]
  using: _129@Mir(bb39[0]), _130@Mir(bb41[0]), _139@Mir(bb41[4])
bb43:
  _277 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _278 = _277 as usize (Transmute)
  using: _277@Mir(bb43[0])
  _279 = AlignOf(u64)
  using: 
  _280 = Sub(_279, const 1_usize)
  using: _279@Mir(bb43[2])
  _281 = BitAnd(_278, _280)
  using: _278@Mir(bb43[1]), _280@Mir(bb43[3])
  _282 = Eq(_281, const 0_usize)
  using: _281@Mir(bb43[4])
  assert(_282, "misaligned pointer dereference: address must be a multiple of {} but is {}", _279, _278) -> [success: bb76, unwind unreachable]
  using: _282@Mir(bb43[5]), _279@Mir(bb43[2]), _278@Mir(bb43[1])
bb44:
  _265 = _6 as *const () (PtrToPtr)
  using: _6@Entry
  _266 = _265 as usize (Transmute)
  using: _265@Mir(bb44[0])
  _267 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _268 = Sub(_267, const 1_usize)
  using: _267@Mir(bb44[2])
  _269 = BitAnd(_266, _268)
  using: _266@Mir(bb44[1]), _268@Mir(bb44[3])
  _270 = Eq(_269, const 0_usize)
  using: _269@Mir(bb44[4])
  assert(_270, "misaligned pointer dereference: address must be a multiple of {} but is {}", _267, _266) -> [success: bb74, unwind unreachable]
  using: _270@Mir(bb44[5]), _267@Mir(bb44[2]), _266@Mir(bb44[1])
bb45:
  _157 = const 1_i32
  using: 
  _156 = move _157 as u64 (IntToInt)
  using: _157@Mir(bb45[0])
  _155 = core::num::<impl u64>::wrapping_add(_5, move _156) -> [return: bb46, unwind continue]
  using: _5@Entry, _156@Mir(bb45[1])
bb46:
  _151 = src::libtree::recurse(move _152, move _155, _6, _7, _1) -> [return: bb47, unwind continue]
  using: _152@Mir(bb74[3]), _155@Mir(bb45[2]), _6@Entry, _7@Entry, _1@Entry
bb47:
  _159 = _151
  using: _151@Mir(bb46[0])
  _160 = const 28_i32
  using: 
  _158 = Eq(move _159, move _160)
  using: _159@Mir(bb47[0]), _160@Mir(bb47[1])
  switchInt(move _158) -> [0: bb49, otherwise: bb48]
  using: _158@Mir(bb47[2])
bb48:
  _161 = const 28_i32
  using: 
  _8 = move _161
  using: _161@Mir(bb48[0])
  goto -> bb49
  using: 
bb49:
  _163 = _151
  using: _151@Mir(bb46[0])
  _164 = const 0_i32
  using: 
  _162 = Eq(move _163, move _164)
  using: _163@Mir(bb49[0]), _164@Mir(bb49[1])
  switchInt(move _162) -> [0: bb50, otherwise: bb51]
  using: _162@Mir(bb49[2])
bb50:
  _166 = _151
  using: _151@Mir(bb46[0])
  _167 = const 28_i32
  using: 
  _165 = Eq(move _166, move _167)
  using: _166@Mir(bb50[0]), _167@Mir(bb50[1])
  switchInt(move _165) -> [0: bb58, otherwise: bb51]
  using: _165@Mir(bb50[2])
bb51:
  _259 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _260 = _259 as usize (Transmute)
  using: _259@Mir(bb51[0])
  _261 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _262 = Sub(_261, const 1_usize)
  using: _261@Mir(bb51[2])
  _263 = BitAnd(_260, _262)
  using: _260@Mir(bb51[1]), _262@Mir(bb51[3])
  _264 = Eq(_263, const 0_usize)
  using: _263@Mir(bb51[4])
  assert(_264, "misaligned pointer dereference: address must be a multiple of {} but is {}", _261, _260) -> [success: bb73, unwind unreachable]
  using: _264@Mir(bb51[5]), _261@Mir(bb51[2]), _260@Mir(bb51[1])
bb52:
  _253 = _169 as *const () (PtrToPtr)
  using: _169@Mir(bb73[3])
  _254 = _253 as usize (Transmute)
  using: _253@Mir(bb52[0])
  _255 = AlignOf(u64)
  using: 
  _256 = Sub(_255, const 1_usize)
  using: _255@Mir(bb52[2])
  _257 = BitAnd(_254, _256)
  using: _254@Mir(bb52[1]), _256@Mir(bb52[3])
  _258 = Eq(_257, const 0_usize)
  using: _257@Mir(bb52[4])
  assert(_258, "misaligned pointer dereference: address must be a multiple of {} but is {}", _255, _254) -> [success: bb72, unwind unreachable]
  using: _258@Mir(bb52[5]), _255@Mir(bb52[2]), _254@Mir(bb52[1])
bb53:
  _176 = move _177 as isize (IntToInt)
  using: _177@Mir(bb70[3])
  _174 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _175, move _176) -> [return: bb54, unwind continue]
  using: _175@Mir(bb71[0]), _176@Mir(bb53[0])
bb54:
  _235 = _174 as *const () (PtrToPtr)
  using: _174@Mir(bb53[1])
  _236 = _235 as usize (Transmute)
  using: _235@Mir(bb54[0])
  _237 = AlignOf(u64)
  using: 
  _238 = Sub(_237, const 1_usize)
  using: _237@Mir(bb54[2])
  _239 = BitAnd(_236, _238)
  using: _236@Mir(bb54[1]), _238@Mir(bb54[3])
  _240 = Eq(_239, const 0_usize)
  using: _239@Mir(bb54[4])
  assert(_240, "misaligned pointer dereference: address must be a multiple of {} but is {}", _237, _236) -> [success: bb69, unwind unreachable]
  using: _240@Mir(bb54[5]), _237@Mir(bb54[2]), _236@Mir(bb54[1])
bb55:
  _223 = _181 as *const () (PtrToPtr)
  using: _181@Mir(bb68[3])
  _224 = _223 as usize (Transmute)
  using: _223@Mir(bb55[0])
  _225 = AlignOf(u64)
  using: 
  _226 = Sub(_225, const 1_usize)
  using: _225@Mir(bb55[2])
  _227 = BitAnd(_224, _226)
  using: _224@Mir(bb55[1]), _226@Mir(bb55[3])
  _228 = Eq(_227, const 0_usize)
  using: _227@Mir(bb55[4])
  assert(_228, "misaligned pointer dereference: address must be a multiple of {} but is {}", _225, _224) -> [success: bb67, unwind unreachable]
  using: _228@Mir(bb55[5]), _225@Mir(bb55[2]), _224@Mir(bb55[1])
bb56:
  _211 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _212 = _211 as usize (Transmute)
  using: _211@Mir(bb56[0])
  _213 = AlignOf(u64)
  using: 
  _214 = Sub(_213, const 1_usize)
  using: _213@Mir(bb56[2])
  _215 = BitAnd(_212, _214)
  using: _212@Mir(bb56[1]), _214@Mir(bb56[3])
  _216 = Eq(_215, const 0_usize)
  using: _215@Mir(bb56[4])
  assert(_216, "misaligned pointer dereference: address must be a multiple of {} but is {}", _213, _212) -> [success: bb65, unwind unreachable]
  using: _216@Mir(bb56[5]), _213@Mir(bb56[2]), _212@Mir(bb56[1])
bb57:
  _193 = _187 as *const () (PtrToPtr)
  using: _187@Mir(bb63[2])
  _194 = _193 as usize (Transmute)
  using: _193@Mir(bb57[0])
  _195 = AlignOf(u64)
  using: 
  _196 = Sub(_195, const 1_usize)
  using: _195@Mir(bb57[2])
  _197 = BitAnd(_194, _196)
  using: _194@Mir(bb57[1]), _196@Mir(bb57[3])
  _198 = Eq(_197, const 0_usize)
  using: _197@Mir(bb57[4])
  assert(_198, "misaligned pointer dereference: address must be a multiple of {} but is {}", _195, _194) -> [success: bb62, unwind unreachable]
  using: _198@Mir(bb57[5]), _195@Mir(bb57[2]), _194@Mir(bb57[1])
bb58:
  _192 = _105
  using: _105@Phi(bb32)
  _191 = core::num::<impl u64>::wrapping_add(move _192, const 1_u64) -> [return: bb59, unwind continue]
  using: _192@Mir(bb58[0])
bb59:
  _105 = move _191
  using: _191@Mir(bb58[1])
  goto -> bb32
  using: 
bb60:
  _0 = _8
  using: _8@Phi(bb3)
  goto -> bb61
  using: 
bb61:
  return
  using: _0@Phi(bb61)
bb62:
  (*_187) = _168
  using: _187@Mir(bb63[2]), _168@Mir(bb72[0])
  goto -> bb32
  using: 
bb63:
  _190 = (*_3)
  using: _3@Entry
  _189 = move _190 as isize (IntToInt)
  using: _190@Mir(bb63[0])
  _187 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _188, move _189) -> [return: bb57, unwind continue]
  using: _188@Mir(bb64[0]), _189@Mir(bb63[1])
bb64:
  _188 = ((*_4).1: *mut u64)
  using: _4@Entry
  _199 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _200 = _199 as usize (Transmute)
  using: _199@Mir(bb64[1])
  _201 = AlignOf(u64)
  using: 
  _202 = Sub(_201, const 1_usize)
  using: _201@Mir(bb64[3])
  _203 = BitAnd(_200, _202)
  using: _200@Mir(bb64[2]), _202@Mir(bb64[4])
  _204 = Eq(_203, const 0_usize)
  using: _203@Mir(bb64[5])
  assert(_204, "misaligned pointer dereference: address must be a multiple of {} but is {}", _201, _200) -> [success: bb63, unwind unreachable]
  using: _204@Mir(bb64[6]), _201@Mir(bb64[3]), _200@Mir(bb64[2])
bb65:
  (*_3) = move _185
  using: _3@Entry, _185@Mir(bb66[1])
  _205 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _206 = _205 as usize (Transmute)
  using: _205@Mir(bb65[1])
  _207 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _208 = Sub(_207, const 1_usize)
  using: _207@Mir(bb65[3])
  _209 = BitAnd(_206, _208)
  using: _206@Mir(bb65[2]), _208@Mir(bb65[4])
  _210 = Eq(_209, const 0_usize)
  using: _209@Mir(bb65[5])
  assert(_210, "misaligned pointer dereference: address must be a multiple of {} but is {}", _207, _206) -> [success: bb64, unwind unreachable]
  using: _210@Mir(bb65[6]), _207@Mir(bb65[3]), _206@Mir(bb65[2])
bb66:
  _186 = (*_3)
  using: _3@Entry
  _185 = core::num::<impl u64>::wrapping_sub(move _186, const 1_u64) -> [return: bb56, unwind continue]
  using: _186@Mir(bb66[0])
bb67:
  (*_181) = move _173
  using: _181@Mir(bb68[3]), _173@Mir(bb69[0])
  _217 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _218 = _217 as usize (Transmute)
  using: _217@Mir(bb67[1])
  _219 = AlignOf(u64)
  using: 
  _220 = Sub(_219, const 1_usize)
  using: _219@Mir(bb67[3])
  _221 = BitAnd(_218, _220)
  using: _218@Mir(bb67[2]), _220@Mir(bb67[4])
  _222 = Eq(_221, const 0_usize)
  using: _221@Mir(bb67[5])
  assert(_222, "misaligned pointer dereference: address must be a multiple of {} but is {}", _219, _218) -> [success: bb66, unwind unreachable]
  using: _222@Mir(bb67[6]), _219@Mir(bb67[3]), _218@Mir(bb67[2])
bb68:
  _182 = ((*_4).1: *mut u64)
  using: _4@Entry
  _184 = _105
  using: _105@Phi(bb32)
  _183 = move _184 as isize (IntToInt)
  using: _184@Mir(bb68[1])
  _181 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _182, move _183) -> [return: bb55, unwind continue]
  using: _182@Mir(bb68[0]), _183@Mir(bb68[2])
bb69:
  _173 = (*_174)
  using: _174@Mir(bb53[1])
  _229 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _230 = _229 as usize (Transmute)
  using: _229@Mir(bb69[1])
  _231 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _232 = Sub(_231, const 1_usize)
  using: _231@Mir(bb69[3])
  _233 = BitAnd(_230, _232)
  using: _230@Mir(bb69[2]), _232@Mir(bb69[4])
  _234 = Eq(_233, const 0_usize)
  using: _233@Mir(bb69[5])
  assert(_234, "misaligned pointer dereference: address must be a multiple of {} but is {}", _231, _230) -> [success: bb68, unwind unreachable]
  using: _234@Mir(bb69[6]), _231@Mir(bb69[3]), _230@Mir(bb69[2])
bb70:
  _178 = (*_3)
  using: _3@Entry
  _180 = const 1_i32
  using: 
  _179 = move _180 as u64 (IntToInt)
  using: _180@Mir(bb70[1])
  _177 = core::num::<impl u64>::wrapping_sub(move _178, move _179) -> [return: bb53, unwind continue]
  using: _178@Mir(bb70[0]), _179@Mir(bb70[2])
bb71:
  _175 = ((*_4).1: *mut u64)
  using: _4@Entry
  _241 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _242 = _241 as usize (Transmute)
  using: _241@Mir(bb71[1])
  _243 = AlignOf(u64)
  using: 
  _244 = Sub(_243, const 1_usize)
  using: _243@Mir(bb71[3])
  _245 = BitAnd(_242, _244)
  using: _242@Mir(bb71[2]), _244@Mir(bb71[4])
  _246 = Eq(_245, const 0_usize)
  using: _245@Mir(bb71[5])
  assert(_246, "misaligned pointer dereference: address must be a multiple of {} but is {}", _243, _242) -> [success: bb70, unwind unreachable]
  using: _246@Mir(bb71[6]), _243@Mir(bb71[3]), _242@Mir(bb71[2])
bb72:
  _168 = (*_169)
  using: _169@Mir(bb73[3])
  _247 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _248 = _247 as usize (Transmute)
  using: _247@Mir(bb72[1])
  _249 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _250 = Sub(_249, const 1_usize)
  using: _249@Mir(bb72[3])
  _251 = BitAnd(_248, _250)
  using: _248@Mir(bb72[2]), _250@Mir(bb72[4])
  _252 = Eq(_251, const 0_usize)
  using: _251@Mir(bb72[5])
  assert(_252, "misaligned pointer dereference: address must be a multiple of {} but is {}", _249, _248) -> [success: bb71, unwind unreachable]
  using: _252@Mir(bb72[6]), _249@Mir(bb72[3]), _248@Mir(bb72[2])
bb73:
  _170 = ((*_4).1: *mut u64)
  using: _4@Entry
  _172 = _105
  using: _105@Phi(bb32)
  _171 = move _172 as isize (IntToInt)
  using: _172@Mir(bb73[1])
  _169 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _170, move _171) -> [return: bb52, unwind continue]
  using: _170@Mir(bb73[0]), _171@Mir(bb73[2])
bb74:
  ((*_6).15: [i8; 32])[_148] = move _143 as i8 (IntToInt)
  using: _6@Entry, _148@Mir(bb76[5]), _143@Mir(bb76[4])
  _154 = &mut _9
  using: _9@Mir(bb0[1])
  _153 = move _154 as &mut [i8] (PointerCoercion(Unsize))
  using: _154@Mir(bb74[1])
  _152 = core::slice::<impl [i8]>::as_mut_ptr(move _153) -> [return: bb45, unwind continue]
  using: _153@Mir(bb74[2])
bb75:
  _149 = const 32_usize
  using: 
  _150 = Lt(_148, _149)
  using: _148@Mir(bb76[5]), _149@Mir(bb75[0])
  assert(move _150, "index out of bounds: the length is {} but the index is {}", move _149, _148) -> [success: bb44, unwind continue]
  using: _150@Mir(bb75[1]), _149@Mir(bb75[0]), _148@Mir(bb76[5])
bb76:
  _145 = (*_3)
  using: _3@Entry
  _147 = const 1_i32
  using: 
  _146 = move _147 as u64 (IntToInt)
  using: _147@Mir(bb76[1])
  _144 = Le(move _145, move _146)
  using: _145@Mir(bb76[0]), _146@Mir(bb76[2])
  _143 = move _144 as i32 (IntToInt)
  using: _144@Mir(bb76[3])
  _148 = _5 as usize (IntToInt)
  using: _5@Entry
  _271 = _6 as *const () (PtrToPtr)
  using: _6@Entry
  _272 = _271 as usize (Transmute)
  using: _271@Mir(bb76[6])
  _273 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _274 = Sub(_273, const 1_usize)
  using: _273@Mir(bb76[8])
  _275 = BitAnd(_272, _274)
  using: _272@Mir(bb76[7]), _274@Mir(bb76[9])
  _276 = Eq(_275, const 0_usize)
  using: _275@Mir(bb76[10])
  assert(_276, "misaligned pointer dereference: address must be a multiple of {} but is {}", _273, _272) -> [success: bb75, unwind unreachable]
  using: _276@Mir(bb76[11]), _273@Mir(bb76[8]), _272@Mir(bb76[7])
bb77:
  _134 = (*_135)
  using: _135@Mir(bb78[3])
  _133 = move _134 as isize (IntToInt)
  using: _134@Mir(bb77[0])
  _131 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _132, move _133) -> [return: bb41, unwind continue]
  using: _132@Mir(bb79[0]), _133@Mir(bb77[1])
bb78:
  _136 = ((*_4).1: *mut u64)
  using: _4@Entry
  _138 = _105
  using: _105@Phi(bb32)
  _137 = move _138 as isize (IntToInt)
  using: _138@Mir(bb78[1])
  _135 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _136, move _137) -> [return: bb40, unwind continue]
  using: _136@Mir(bb78[0]), _137@Mir(bb78[2])
bb79:
  _132 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _289 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _290 = _289 as usize (Transmute)
  using: _289@Mir(bb79[1])
  _291 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _292 = Sub(_291, const 1_usize)
  using: _291@Mir(bb79[3])
  _293 = BitAnd(_290, _292)
  using: _290@Mir(bb79[2]), _292@Mir(bb79[4])
  _294 = Eq(_293, const 0_usize)
  using: _293@Mir(bb79[5])
  assert(_294, "misaligned pointer dereference: address must be a multiple of {} but is {}", _291, _290) -> [success: bb78, unwind unreachable]
  using: _294@Mir(bb79[6]), _291@Mir(bb79[3]), _290@Mir(bb79[2])
bb80:
  _115 = (*_116)
  using: _116@Mir(bb81[3])
  _114 = move _115 as isize (IntToInt)
  using: _115@Mir(bb80[0])
  _112 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _113, move _114) -> [return: bb35, unwind continue]
  using: _113@Mir(bb82[0]), _114@Mir(bb80[1])
bb81:
  _117 = ((*_4).1: *mut u64)
  using: _4@Entry
  _119 = _105
  using: _105@Phi(bb32)
  _118 = move _119 as isize (IntToInt)
  using: _119@Mir(bb81[1])
  _116 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _117, move _118) -> [return: bb34, unwind continue]
  using: _117@Mir(bb81[0]), _118@Mir(bb81[2])
bb82:
  _113 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _307 = _4 as *const () (PtrToPtr)
  using: _4@Entry
  _308 = _307 as usize (Transmute)
  using: _307@Mir(bb82[1])
  _309 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _310 = Sub(_309, const 1_usize)
  using: _309@Mir(bb82[3])
  _311 = BitAnd(_308, _310)
  using: _308@Mir(bb82[2]), _310@Mir(bb82[4])
  _312 = Eq(_311, const 0_usize)
  using: _311@Mir(bb82[5])
  assert(_312, "misaligned pointer dereference: address must be a multiple of {} but is {}", _309, _308) -> [success: bb81, unwind unreachable]
  using: _312@Mir(bb82[6]), _309@Mir(bb82[3]), _308@Mir(bb82[2])
bb83:
  _109 = (*_3)
  using: _3@Entry
  _107 = Lt(move _108, move _109)
  using: _108@Mir(bb32[0]), _109@Mir(bb83[0])
  switchInt(move _107) -> [0: bb3, otherwise: bb33]
  using: _107@Mir(bb83[1])
bb84:
  _82 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _83 = _74 as isize (IntToInt)
  using: _74@Mir(bb20[0])
  _81 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _82, move _83) -> [return: bb23, unwind continue]
  using: _82@Mir(bb84[0]), _83@Mir(bb84[1])
bb85:
  _67 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _69 = _2
  using: _2@Phi(bb15)
  _68 = move _69 as isize (IntToInt)
  using: _69@Mir(bb85[1])
  _66 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _67, move _68) -> [return: bb18, unwind continue]
  using: _67@Mir(bb85[0]), _68@Mir(bb85[2])
bb86:
  _59 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _61 = _2
  using: _2@Phi(bb15)
  _60 = move _61 as isize (IntToInt)
  using: _61@Mir(bb86[1])
  _58 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _59, move _60) -> [return: bb16, unwind continue]
  using: _59@Mir(bb86[0]), _60@Mir(bb86[2])
bb87:
  _48 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _50 = _2
  using: _2@Phi(bb5)
  _49 = move _50 as isize (IntToInt)
  using: _50@Mir(bb87[1])
  _47 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _48, move _49) -> [return: bb12, unwind continue]
  using: _48@Mir(bb87[0]), _49@Mir(bb87[2])
bb88:
  _38 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _40 = _2
  using: _2@Phi(bb5)
  _39 = move _40 as isize (IntToInt)
  using: _40@Mir(bb88[1])
  _37 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _38, move _39) -> [return: bb8, unwind continue]
  using: _38@Mir(bb88[0]), _39@Mir(bb88[2])
bb89:
  _30 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _32 = _2
  using: _2@Phi(bb5)
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb89[1])
  _29 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _30, move _31) -> [return: bb6, unwind continue]
  using: _30@Mir(bb89[0]), _31@Mir(bb89[2])
bb90:
  _22 = ((*_16).0: *mut i8)
  using: _16@Mir(bb91[1])
  _24 = _2
  using: _2@Phi(bb3)
  _23 = move _24 as isize (IntToInt)
  using: _24@Mir(bb90[1])
  _21 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _22, move _23) -> [return: bb4, unwind continue]
  using: _22@Mir(bb90[0]), _23@Mir(bb90[2])
bb91:
  _17 = &mut ((*_6).5: src::libtree::string_table_t)
  using: _6@Entry
  _16 = &raw const (*_17)
  using: _17@Mir(bb91[0])
  goto -> bb3
  using: 
@DefId(0:116 ~ lib[f5c5]::src::libtree::interpolate_variables)
bb0:
  _4 = _2
  using: _2@Entry
  _5 = _2
  using: _2@Entry
  _371 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _372 = _371 as usize (Transmute)
  using: _371@Mir(bb0[2])
  _373 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _374 = Sub(_373, const 1_usize)
  using: _373@Mir(bb0[4])
  _375 = BitAnd(_372, _374)
  using: _372@Mir(bb0[3]), _374@Mir(bb0[5])
  _376 = Eq(_375, const 0_usize)
  using: _375@Mir(bb0[6])
  assert(_376, "misaligned pointer dereference: address must be a multiple of {} but is {}", _373, _372) -> [success: bb90, unwind unreachable]
  using: _376@Mir(bb0[7]), _373@Mir(bb0[4]), _372@Mir(bb0[3])
bb1:
  _365 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _366 = _365 as usize (Transmute)
  using: _365@Mir(bb1[0])
  _367 = AlignOf(src::libtree::string_table_t)
  using: 
  _368 = Sub(_367, const 1_usize)
  using: _367@Mir(bb1[2])
  _369 = BitAnd(_366, _368)
  using: _366@Mir(bb1[1]), _368@Mir(bb1[3])
  _370 = Eq(_369, const 0_usize)
  using: _369@Mir(bb1[4])
  assert(_370, "misaligned pointer dereference: address must be a multiple of {} but is {}", _367, _366) -> [success: bb89, unwind unreachable]
  using: _370@Mir(bb1[5]), _367@Mir(bb1[2]), _366@Mir(bb1[1])
bb2:
  _9 = move _10 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _10@Mir(bb89[3])
  _14 = const '$' as i32 (IntToInt)
  using: 
  _8 = src::libtree::strchr(move _9, move _14) -> [return: bb3, unwind continue]
  using: _9@Mir(bb2[0]), _14@Mir(bb2[1])
bb3:
  _16 = _8
  using: _8@Mir(bb2[2])
  _15 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _16) -> [return: bb4, unwind continue]
  using: _16@Mir(bb3[0])
bb4:
  switchInt(move _15) -> [0: bb6, otherwise: bb5]
  using: _15@Mir(bb3[1])
bb5:
  _193 = _4
  using: _4@Phi(bb1)
  _192 = Ne(move _193, _2)
  using: _193@Mir(bb5[0]), _2@Entry
  switchInt(move _192) -> [0: bb55, otherwise: bb54]
  using: _192@Mir(bb5[1])
bb6:
  _19 = _8
  using: _8@Mir(bb2[2])
  _359 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _360 = _359 as usize (Transmute)
  using: _359@Mir(bb6[1])
  _361 = AlignOf(src::libtree::string_table_t)
  using: 
  _362 = Sub(_361, const 1_usize)
  using: _361@Mir(bb6[3])
  _363 = BitAnd(_360, _362)
  using: _360@Mir(bb6[2]), _362@Mir(bb6[4])
  _364 = Eq(_363, const 0_usize)
  using: _363@Mir(bb6[5])
  assert(_364, "misaligned pointer dereference: address must be a multiple of {} but is {}", _361, _360) -> [success: bb88, unwind unreachable]
  using: _364@Mir(bb6[6]), _361@Mir(bb6[3]), _360@Mir(bb6[2])
bb7:
  _17 = move _18 as i64 (IntToInt)
  using: _18@Mir(bb88[2])
  _5 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb7[0])
  _23 = _5
  using: _5@Mir(bb7[1])
  _24 = _4
  using: _4@Phi(bb1)
  _22 = core::num::<impl u64>::wrapping_sub(move _23, move _24) -> [return: bb8, unwind continue]
  using: _23@Mir(bb7[2]), _24@Mir(bb7[3])
bb8:
  _26 = _5
  using: _5@Mir(bb7[1])
  _25 = core::num::<impl u64>::wrapping_add(move _26, const 1_u64) -> [return: bb9, unwind continue]
  using: _26@Mir(bb8[0])
bb9:
  _5 = move _25
  using: _25@Mir(bb8[1])
  _27 = const 0_i32
  using: 
  _353 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _354 = _353 as usize (Transmute)
  using: _353@Mir(bb9[2])
  _355 = AlignOf(src::libtree::string_table_t)
  using: 
  _356 = Sub(_355, const 1_usize)
  using: _355@Mir(bb9[4])
  _357 = BitAnd(_354, _356)
  using: _354@Mir(bb9[3]), _356@Mir(bb9[5])
  _358 = Eq(_357, const 0_usize)
  using: _357@Mir(bb9[6])
  assert(_358, "misaligned pointer dereference: address must be a multiple of {} but is {}", _355, _354) -> [success: bb87, unwind unreachable]
  using: _358@Mir(bb9[7]), _355@Mir(bb9[4]), _354@Mir(bb9[3])
bb10:
  _30 = (*_31)
  using: _31@Mir(bb87[3])
  _29 = move _30 as i32 (IntToInt)
  using: _30@Mir(bb10[0])
  _35 = const '{' as i32 (IntToInt)
  using: 
  _28 = Eq(move _29, move _35)
  using: _29@Mir(bb10[1]), _35@Mir(bb10[2])
  switchInt(move _28) -> [0: bb13, otherwise: bb11]
  using: _28@Mir(bb10[3])
bb11:
  _36 = const 1_i32
  using: 
  _27 = move _36
  using: _36@Mir(bb11[0])
  _38 = _5
  using: _5@Mir(bb9[0])
  _37 = core::num::<impl u64>::wrapping_add(move _38, const 1_u64) -> [return: bb12, unwind continue]
  using: _38@Mir(bb11[2])
bb12:
  _5 = move _37
  using: _37@Mir(bb11[3])
  goto -> bb13
  using: 
bb13:
  _39 = const 0_usize as *const i8 (PointerFromExposedAddress)
  using: 
  _347 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _348 = _347 as usize (Transmute)
  using: _347@Mir(bb13[1])
  _349 = AlignOf(src::libtree::string_table_t)
  using: 
  _350 = Sub(_349, const 1_usize)
  using: _349@Mir(bb13[3])
  _351 = BitAnd(_348, _350)
  using: _348@Mir(bb13[2]), _350@Mir(bb13[4])
  _352 = Eq(_351, const 0_usize)
  using: _351@Mir(bb13[5])
  assert(_352, "misaligned pointer dereference: address must be a multiple of {} but is {}", _349, _348) -> [success: bb86, unwind unreachable]
  using: _352@Mir(bb13[6]), _349@Mir(bb13[3]), _348@Mir(bb13[2])
bb14:
  _43 = &mut (*_44)
  using: _44@Mir(bb86[3])
  _42 = &raw const (*_43)
  using: _43@Mir(bb14[0])
  _51 = const b"ORIGIN\x00"
  using: 
  _50 = &raw const (*_51)
  using: _51@Mir(bb14[2])
  _49 = move _50 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _50@Mir(bb14[3])
  _48 = move _49 as *const i8 (PtrToPtr)
  using: _49@Mir(bb14[4])
  _53 = const 6_i32
  using: 
  _52 = move _53 as u64 (IntToInt)
  using: _53@Mir(bb14[6])
  _41 = src::libtree::strncmp(move _42, move _48, move _52) -> [return: bb15, unwind continue]
  using: _42@Mir(bb14[1]), _48@Mir(bb14[5]), _52@Mir(bb14[7])
bb15:
  _54 = const 0_i32
  using: 
  _40 = Eq(move _41, move _54)
  using: _41@Mir(bb14[8]), _54@Mir(bb15[0])
  switchInt(move _40) -> [0: bb18, otherwise: bb16]
  using: _40@Mir(bb15[1])
bb16:
  _39 = _3
  using: _3@Entry
  _56 = _5
  using: _5@Phi(bb13)
  _58 = const 6_i32
  using: 
  _57 = move _58 as u64 (IntToInt)
  using: _58@Mir(bb16[2])
  _55 = core::num::<impl u64>::wrapping_add(move _56, move _57) -> [return: bb17, unwind continue]
  using: _56@Mir(bb16[1]), _57@Mir(bb16[3])
bb17:
  _5 = move _55
  using: _55@Mir(bb16[4])
  goto -> bb38
  using: 
bb18:
  _341 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _342 = _341 as usize (Transmute)
  using: _341@Mir(bb18[0])
  _343 = AlignOf(src::libtree::string_table_t)
  using: 
  _344 = Sub(_343, const 1_usize)
  using: _343@Mir(bb18[2])
  _345 = BitAnd(_342, _344)
  using: _342@Mir(bb18[1]), _344@Mir(bb18[3])
  _346 = Eq(_345, const 0_usize)
  using: _345@Mir(bb18[4])
  assert(_346, "misaligned pointer dereference: address must be a multiple of {} but is {}", _343, _342) -> [success: bb85, unwind unreachable]
  using: _346@Mir(bb18[5]), _343@Mir(bb18[2]), _342@Mir(bb18[1])
bb19:
  _62 = &mut (*_63)
  using: _63@Mir(bb85[3])
  _61 = &raw const (*_62)
  using: _62@Mir(bb19[0])
  _70 = const b"LIB\x00"
  using: 
  _69 = &raw const (*_70)
  using: _70@Mir(bb19[2])
  _68 = move _69 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _69@Mir(bb19[3])
  _67 = move _68 as *const i8 (PtrToPtr)
  using: _68@Mir(bb19[4])
  _72 = const 3_i32
  using: 
  _71 = move _72 as u64 (IntToInt)
  using: _72@Mir(bb19[6])
  _60 = src::libtree::strncmp(move _61, move _67, move _71) -> [return: bb20, unwind continue]
  using: _61@Mir(bb19[1]), _67@Mir(bb19[5]), _71@Mir(bb19[7])
bb20:
  _73 = const 0_i32
  using: 
  _59 = Eq(move _60, move _73)
  using: _60@Mir(bb19[8]), _73@Mir(bb20[0])
  switchInt(move _59) -> [0: bb23, otherwise: bb21]
  using: _59@Mir(bb20[1])
bb21:
  _335 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _336 = _335 as usize (Transmute)
  using: _335@Mir(bb21[0])
  _337 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _338 = Sub(_337, const 1_usize)
  using: _337@Mir(bb21[2])
  _339 = BitAnd(_336, _338)
  using: _336@Mir(bb21[1]), _338@Mir(bb21[3])
  _340 = Eq(_339, const 0_usize)
  using: _339@Mir(bb21[4])
  assert(_340, "misaligned pointer dereference: address must be a multiple of {} but is {}", _337, _336) -> [success: bb84, unwind unreachable]
  using: _340@Mir(bb21[5]), _337@Mir(bb21[2]), _336@Mir(bb21[1])
bb22:
  _5 = move _75
  using: _75@Mir(bb84[5])
  goto -> bb38
  using: 
bb23:
  _329 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _330 = _329 as usize (Transmute)
  using: _329@Mir(bb23[0])
  _331 = AlignOf(src::libtree::string_table_t)
  using: 
  _332 = Sub(_331, const 1_usize)
  using: _331@Mir(bb23[2])
  _333 = BitAnd(_330, _332)
  using: _330@Mir(bb23[1]), _332@Mir(bb23[3])
  _334 = Eq(_333, const 0_usize)
  using: _333@Mir(bb23[4])
  assert(_334, "misaligned pointer dereference: address must be a multiple of {} but is {}", _331, _330) -> [success: bb83, unwind unreachable]
  using: _334@Mir(bb23[5]), _331@Mir(bb23[2]), _330@Mir(bb23[1])
bb24:
  _82 = &mut (*_83)
  using: _83@Mir(bb83[3])
  _81 = &raw const (*_82)
  using: _82@Mir(bb24[0])
  _90 = const b"PLATFORM\x00"
  using: 
  _89 = &raw const (*_90)
  using: _90@Mir(bb24[2])
  _88 = move _89 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _89@Mir(bb24[3])
  _87 = move _88 as *const i8 (PtrToPtr)
  using: _88@Mir(bb24[4])
  _92 = const 8_i32
  using: 
  _91 = move _92 as u64 (IntToInt)
  using: _92@Mir(bb24[6])
  _80 = src::libtree::strncmp(move _81, move _87, move _91) -> [return: bb25, unwind continue]
  using: _81@Mir(bb24[1]), _87@Mir(bb24[5]), _91@Mir(bb24[7])
bb25:
  _93 = const 0_i32
  using: 
  _79 = Eq(move _80, move _93)
  using: _80@Mir(bb24[8]), _93@Mir(bb25[0])
  switchInt(move _79) -> [0: bb28, otherwise: bb26]
  using: _79@Mir(bb25[1])
bb26:
  _323 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _324 = _323 as usize (Transmute)
  using: _323@Mir(bb26[0])
  _325 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _326 = Sub(_325, const 1_usize)
  using: _325@Mir(bb26[2])
  _327 = BitAnd(_324, _326)
  using: _324@Mir(bb26[1]), _326@Mir(bb26[3])
  _328 = Eq(_327, const 0_usize)
  using: _327@Mir(bb26[4])
  assert(_328, "misaligned pointer dereference: address must be a multiple of {} but is {}", _325, _324) -> [success: bb82, unwind unreachable]
  using: _328@Mir(bb26[5]), _325@Mir(bb26[2]), _324@Mir(bb26[1])
bb27:
  _5 = move _95
  using: _95@Mir(bb82[5])
  goto -> bb38
  using: 
bb28:
  _317 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _318 = _317 as usize (Transmute)
  using: _317@Mir(bb28[0])
  _319 = AlignOf(src::libtree::string_table_t)
  using: 
  _320 = Sub(_319, const 1_usize)
  using: _319@Mir(bb28[2])
  _321 = BitAnd(_318, _320)
  using: _318@Mir(bb28[1]), _320@Mir(bb28[3])
  _322 = Eq(_321, const 0_usize)
  using: _321@Mir(bb28[4])
  assert(_322, "misaligned pointer dereference: address must be a multiple of {} but is {}", _319, _318) -> [success: bb81, unwind unreachable]
  using: _322@Mir(bb28[5]), _319@Mir(bb28[2]), _318@Mir(bb28[1])
bb29:
  _102 = &mut (*_103)
  using: _103@Mir(bb81[3])
  _101 = &raw const (*_102)
  using: _102@Mir(bb29[0])
  _110 = const b"OSNAME\x00"
  using: 
  _109 = &raw const (*_110)
  using: _110@Mir(bb29[2])
  _108 = move _109 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _109@Mir(bb29[3])
  _107 = move _108 as *const i8 (PtrToPtr)
  using: _108@Mir(bb29[4])
  _112 = const 6_i32
  using: 
  _111 = move _112 as u64 (IntToInt)
  using: _112@Mir(bb29[6])
  _100 = src::libtree::strncmp(move _101, move _107, move _111) -> [return: bb30, unwind continue]
  using: _101@Mir(bb29[1]), _107@Mir(bb29[5]), _111@Mir(bb29[7])
bb30:
  _113 = const 0_i32
  using: 
  _99 = Eq(move _100, move _113)
  using: _100@Mir(bb29[8]), _113@Mir(bb30[0])
  switchInt(move _99) -> [0: bb33, otherwise: bb31]
  using: _99@Mir(bb30[1])
bb31:
  _311 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _312 = _311 as usize (Transmute)
  using: _311@Mir(bb31[0])
  _313 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _314 = Sub(_313, const 1_usize)
  using: _313@Mir(bb31[2])
  _315 = BitAnd(_312, _314)
  using: _312@Mir(bb31[1]), _314@Mir(bb31[3])
  _316 = Eq(_315, const 0_usize)
  using: _315@Mir(bb31[4])
  assert(_316, "misaligned pointer dereference: address must be a multiple of {} but is {}", _313, _312) -> [success: bb80, unwind unreachable]
  using: _316@Mir(bb31[5]), _313@Mir(bb31[2]), _312@Mir(bb31[1])
bb32:
  _5 = move _115
  using: _115@Mir(bb80[5])
  goto -> bb38
  using: 
bb33:
  _305 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _306 = _305 as usize (Transmute)
  using: _305@Mir(bb33[0])
  _307 = AlignOf(src::libtree::string_table_t)
  using: 
  _308 = Sub(_307, const 1_usize)
  using: _307@Mir(bb33[2])
  _309 = BitAnd(_306, _308)
  using: _306@Mir(bb33[1]), _308@Mir(bb33[3])
  _310 = Eq(_309, const 0_usize)
  using: _309@Mir(bb33[4])
  assert(_310, "misaligned pointer dereference: address must be a multiple of {} but is {}", _307, _306) -> [success: bb79, unwind unreachable]
  using: _310@Mir(bb33[5]), _307@Mir(bb33[2]), _306@Mir(bb33[1])
bb34:
  _122 = &mut (*_123)
  using: _123@Mir(bb79[3])
  _121 = &raw const (*_122)
  using: _122@Mir(bb34[0])
  _130 = const b"OSREL\x00"
  using: 
  _129 = &raw const (*_130)
  using: _130@Mir(bb34[2])
  _128 = move _129 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _129@Mir(bb34[3])
  _127 = move _128 as *const i8 (PtrToPtr)
  using: _128@Mir(bb34[4])
  _132 = const 5_i32
  using: 
  _131 = move _132 as u64 (IntToInt)
  using: _132@Mir(bb34[6])
  _120 = src::libtree::strncmp(move _121, move _127, move _131) -> [return: bb35, unwind continue]
  using: _121@Mir(bb34[1]), _127@Mir(bb34[5]), _131@Mir(bb34[7])
bb35:
  _133 = const 0_i32
  using: 
  _119 = Eq(move _120, move _133)
  using: _120@Mir(bb34[8]), _133@Mir(bb35[0])
  switchInt(move _119) -> [0: bb1, otherwise: bb36]
  using: _119@Mir(bb35[1])
bb36:
  _299 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _300 = _299 as usize (Transmute)
  using: _299@Mir(bb36[0])
  _301 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _302 = Sub(_301, const 1_usize)
  using: _301@Mir(bb36[2])
  _303 = BitAnd(_300, _302)
  using: _300@Mir(bb36[1]), _302@Mir(bb36[3])
  _304 = Eq(_303, const 0_usize)
  using: _303@Mir(bb36[4])
  assert(_304, "misaligned pointer dereference: address must be a multiple of {} but is {}", _301, _300) -> [success: bb78, unwind unreachable]
  using: _304@Mir(bb36[5]), _301@Mir(bb36[2]), _300@Mir(bb36[1])
bb37:
  _5 = move _135
  using: _135@Mir(bb78[5])
  goto -> bb38
  using: 
bb38:
  _139 = _27
  using: _27@Phi(bb13)
  switchInt(move _139) -> [0: bb43, otherwise: bb39]
  using: _139@Mir(bb38[0])
bb39:
  _293 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _294 = _293 as usize (Transmute)
  using: _293@Mir(bb39[0])
  _295 = AlignOf(src::libtree::string_table_t)
  using: 
  _296 = Sub(_295, const 1_usize)
  using: _295@Mir(bb39[2])
  _297 = BitAnd(_294, _296)
  using: _294@Mir(bb39[1]), _296@Mir(bb39[3])
  _298 = Eq(_297, const 0_usize)
  using: _297@Mir(bb39[4])
  assert(_298, "misaligned pointer dereference: address must be a multiple of {} but is {}", _295, _294) -> [success: bb77, unwind unreachable]
  using: _298@Mir(bb39[5]), _295@Mir(bb39[2]), _294@Mir(bb39[1])
bb40:
  _142 = (*_143)
  using: _143@Mir(bb77[3])
  _141 = move _142 as i32 (IntToInt)
  using: _142@Mir(bb40[0])
  _147 = const '}' as i32 (IntToInt)
  using: 
  _140 = Ne(move _141, move _147)
  using: _141@Mir(bb40[1]), _147@Mir(bb40[2])
  switchInt(move _140) -> [0: bb41, otherwise: bb1]
  using: _140@Mir(bb40[3])
bb41:
  _149 = _5
  using: _5@Phi(bb38)
  _148 = core::num::<impl u64>::wrapping_add(move _149, const 1_u64) -> [return: bb42, unwind continue]
  using: _149@Mir(bb41[0])
bb42:
  _5 = move _148
  using: _148@Mir(bb41[1])
  goto -> bb43
  using: 
bb43:
  _151 = _39
  using: _39@Phi(bb38)
  _150 = src::libtree::strlen(move _151) -> [return: bb44, unwind continue]
  using: _151@Mir(bb43[0])
bb44:
  _154 = _22
  using: _22@Mir(bb7[4])
  _155 = _150
  using: _150@Mir(bb43[1])
  _153 = core::num::<impl u64>::wrapping_add(move _154, move _155) -> [return: bb45, unwind continue]
  using: _154@Mir(bb44[0]), _155@Mir(bb44[1])
bb45:
  _152 = src::libtree::string_table_maybe_grow(_6, move _153) -> [return: bb46, unwind continue]
  using: _6@Mir(bb90[1]), _153@Mir(bb44[2])
bb46:
  _287 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _288 = _287 as usize (Transmute)
  using: _287@Mir(bb46[0])
  _289 = AlignOf(src::libtree::string_table_t)
  using: 
  _290 = Sub(_289, const 1_usize)
  using: _289@Mir(bb46[2])
  _291 = BitAnd(_288, _290)
  using: _288@Mir(bb46[1]), _290@Mir(bb46[3])
  _292 = Eq(_291, const 0_usize)
  using: _291@Mir(bb46[4])
  assert(_292, "misaligned pointer dereference: address must be a multiple of {} but is {}", _289, _288) -> [success: bb76, unwind unreachable]
  using: _292@Mir(bb46[5]), _289@Mir(bb46[2]), _288@Mir(bb46[1])
bb47:
  _159 = &mut (*_160)
  using: _160@Mir(bb75[2])
  _158 = &raw mut (*_159)
  using: _159@Mir(bb47[0])
  _157 = move _158 as *mut libc::c_void (PtrToPtr)
  using: _158@Mir(bb47[1])
  _275 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _276 = _275 as usize (Transmute)
  using: _275@Mir(bb47[3])
  _277 = AlignOf(src::libtree::string_table_t)
  using: 
  _278 = Sub(_277, const 1_usize)
  using: _277@Mir(bb47[5])
  _279 = BitAnd(_276, _278)
  using: _276@Mir(bb47[4]), _278@Mir(bb47[6])
  _280 = Eq(_279, const 0_usize)
  using: _279@Mir(bb47[7])
  assert(_280, "misaligned pointer dereference: address must be a multiple of {} but is {}", _277, _276) -> [success: bb74, unwind unreachable]
  using: _280@Mir(bb47[8]), _277@Mir(bb47[5]), _276@Mir(bb47[4])
bb48:
  _166 = &mut (*_167)
  using: _167@Mir(bb74[3])
  _165 = &raw mut (*_166)
  using: _166@Mir(bb48[0])
  _164 = move _165 as *const libc::c_void (PtrToPtr)
  using: _165@Mir(bb48[1])
  _171 = _22
  using: _22@Mir(bb7[4])
  _156 = src::libtree::memcpy(move _157, move _164, move _171) -> [return: bb49, unwind continue]
  using: _157@Mir(bb47[2]), _164@Mir(bb48[2]), _171@Mir(bb48[3])
bb49:
  _269 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _270 = _269 as usize (Transmute)
  using: _269@Mir(bb49[0])
  _271 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _272 = Sub(_271, const 1_usize)
  using: _271@Mir(bb49[2])
  _273 = BitAnd(_270, _272)
  using: _270@Mir(bb49[1]), _272@Mir(bb49[3])
  _274 = Eq(_273, const 0_usize)
  using: _273@Mir(bb49[4])
  assert(_274, "misaligned pointer dereference: address must be a multiple of {} but is {}", _271, _270) -> [success: bb73, unwind unreachable]
  using: _274@Mir(bb49[5]), _271@Mir(bb49[2]), _270@Mir(bb49[1])
bb50:
  (*_172) = move _173
  using: _172@Mir(bb73[0]), _173@Mir(bb73[3])
  _176 = _5
  using: _5@Phi(bb43)
  _4 = move _176
  using: _176@Mir(bb50[1])
  _263 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _264 = _263 as usize (Transmute)
  using: _263@Mir(bb50[3])
  _265 = AlignOf(src::libtree::string_table_t)
  using: 
  _266 = Sub(_265, const 1_usize)
  using: _265@Mir(bb50[5])
  _267 = BitAnd(_264, _266)
  using: _264@Mir(bb50[4]), _266@Mir(bb50[6])
  _268 = Eq(_267, const 0_usize)
  using: _267@Mir(bb50[7])
  assert(_268, "misaligned pointer dereference: address must be a multiple of {} but is {}", _265, _264) -> [success: bb72, unwind unreachable]
  using: _268@Mir(bb50[8]), _265@Mir(bb50[5]), _264@Mir(bb50[4])
bb51:
  _180 = &mut (*_181)
  using: _181@Mir(bb71[2])
  _179 = &raw mut (*_180)
  using: _180@Mir(bb51[0])
  _178 = move _179 as *mut libc::c_void (PtrToPtr)
  using: _179@Mir(bb51[1])
  _186 = _39
  using: _39@Phi(bb38)
  _185 = move _186 as *const libc::c_void (PtrToPtr)
  using: _186@Mir(bb51[3])
  _187 = _150
  using: _150@Mir(bb43[1])
  _177 = src::libtree::memcpy(move _178, move _185, move _187) -> [return: bb52, unwind continue]
  using: _178@Mir(bb51[2]), _185@Mir(bb51[4]), _187@Mir(bb51[5])
bb52:
  _251 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _252 = _251 as usize (Transmute)
  using: _251@Mir(bb52[0])
  _253 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _254 = Sub(_253, const 1_usize)
  using: _253@Mir(bb52[2])
  _255 = BitAnd(_252, _254)
  using: _252@Mir(bb52[1]), _254@Mir(bb52[3])
  _256 = Eq(_255, const 0_usize)
  using: _255@Mir(bb52[4])
  assert(_256, "misaligned pointer dereference: address must be a multiple of {} but is {}", _253, _252) -> [success: bb70, unwind unreachable]
  using: _256@Mir(bb52[5]), _253@Mir(bb52[2]), _252@Mir(bb52[1])
bb53:
  (*_188) = move _189
  using: _188@Mir(bb70[0]), _189@Mir(bb70[3])
  goto -> bb1
  using: 
bb54:
  _245 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _246 = _245 as usize (Transmute)
  using: _245@Mir(bb54[0])
  _247 = AlignOf(src::libtree::string_table_t)
  using: 
  _248 = Sub(_247, const 1_usize)
  using: _247@Mir(bb54[2])
  _249 = BitAnd(_246, _248)
  using: _246@Mir(bb54[1]), _248@Mir(bb54[3])
  _250 = Eq(_249, const 0_usize)
  using: _249@Mir(bb54[4])
  assert(_250, "misaligned pointer dereference: address must be a multiple of {} but is {}", _247, _246) -> [success: bb69, unwind unreachable]
  using: _250@Mir(bb54[5]), _247@Mir(bb54[2]), _246@Mir(bb54[1])
bb55:
  _0 = const 0_i32
  using: 
  goto -> bb64
  using: 
bb56:
  _196 = move _197 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _197@Mir(bb69[3])
  _195 = src::libtree::strlen(move _196) -> [return: bb57, unwind continue]
  using: _196@Mir(bb56[0])
bb57:
  _202 = const 1_i32
  using: 
  _201 = move _202 as u64 (IntToInt)
  using: _202@Mir(bb57[0])
  _194 = core::num::<impl u64>::wrapping_add(move _195, move _201) -> [return: bb58, unwind continue]
  using: _195@Mir(bb56[1]), _201@Mir(bb57[1])
bb58:
  _204 = _194
  using: _194@Mir(bb57[2])
  _203 = src::libtree::string_table_maybe_grow(_6, move _204) -> [return: bb59, unwind continue]
  using: _6@Mir(bb90[1]), _204@Mir(bb58[0])
bb59:
  _239 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _240 = _239 as usize (Transmute)
  using: _239@Mir(bb59[0])
  _241 = AlignOf(src::libtree::string_table_t)
  using: 
  _242 = Sub(_241, const 1_usize)
  using: _241@Mir(bb59[2])
  _243 = BitAnd(_240, _242)
  using: _240@Mir(bb59[1]), _242@Mir(bb59[3])
  _244 = Eq(_243, const 0_usize)
  using: _243@Mir(bb59[4])
  assert(_244, "misaligned pointer dereference: address must be a multiple of {} but is {}", _241, _240) -> [success: bb68, unwind unreachable]
  using: _244@Mir(bb59[5]), _241@Mir(bb59[2]), _240@Mir(bb59[1])
bb60:
  _206 = move _207 as *mut libc::c_void (PtrToPtr)
  using: _207@Mir(bb67[2])
  _227 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _228 = _227 as usize (Transmute)
  using: _227@Mir(bb60[1])
  _229 = AlignOf(src::libtree::string_table_t)
  using: 
  _230 = Sub(_229, const 1_usize)
  using: _229@Mir(bb60[3])
  _231 = BitAnd(_228, _230)
  using: _228@Mir(bb60[2]), _230@Mir(bb60[4])
  _232 = Eq(_231, const 0_usize)
  using: _231@Mir(bb60[5])
  assert(_232, "misaligned pointer dereference: address must be a multiple of {} but is {}", _229, _228) -> [success: bb66, unwind unreachable]
  using: _232@Mir(bb60[6]), _229@Mir(bb60[3]), _228@Mir(bb60[2])
bb61:
  _211 = move _212 as *const libc::c_void (PtrToPtr)
  using: _212@Mir(bb66[3])
  _216 = _194
  using: _194@Mir(bb57[2])
  _205 = src::libtree::memcpy(move _206, move _211, move _216) -> [return: bb62, unwind continue]
  using: _206@Mir(bb60[0]), _211@Mir(bb61[0]), _216@Mir(bb61[1])
bb62:
  _221 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _222 = _221 as usize (Transmute)
  using: _221@Mir(bb62[0])
  _223 = AlignOf(src::libtree::string_table_t)
  using: 
  _224 = Sub(_223, const 1_usize)
  using: _223@Mir(bb62[2])
  _225 = BitAnd(_222, _224)
  using: _222@Mir(bb62[1]), _224@Mir(bb62[3])
  _226 = Eq(_225, const 0_usize)
  using: _225@Mir(bb62[4])
  assert(_226, "misaligned pointer dereference: address must be a multiple of {} but is {}", _223, _222) -> [success: bb65, unwind unreachable]
  using: _226@Mir(bb62[5]), _223@Mir(bb62[2]), _222@Mir(bb62[1])
bb63:
  (*_217) = move _218
  using: _217@Mir(bb65[0]), _218@Mir(bb65[3])
  _0 = const 1_i32
  using: 
  goto -> bb64
  using: 
bb64:
  return
  using: _0@Phi(bb64)
bb65:
  _217 = &mut ((*_6).1: u64)
  using: _6@Mir(bb90[1])
  _219 = (*_217)
  using: _217@Mir(bb65[0])
  _220 = _194
  using: _194@Mir(bb57[2])
  _218 = core::num::<impl u64>::wrapping_add(move _219, move _220) -> [return: bb63, unwind continue]
  using: _219@Mir(bb65[1]), _220@Mir(bb65[2])
bb66:
  _213 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _215 = _4
  using: _4@Phi(bb1)
  _214 = move _215 as isize (IntToInt)
  using: _215@Mir(bb66[1])
  _212 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _213, move _214) -> [return: bb61, unwind continue]
  using: _213@Mir(bb66[0]), _214@Mir(bb66[2])
bb67:
  _210 = ((*_6).1: u64)
  using: _6@Mir(bb90[1])
  _209 = move _210 as isize (IntToInt)
  using: _210@Mir(bb67[0])
  _207 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _208, move _209) -> [return: bb60, unwind continue]
  using: _208@Mir(bb68[0]), _209@Mir(bb67[1])
bb68:
  _208 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _233 = _6 as *const () (PtrToPtr)
  using: _6@Mir(bb90[1])
  _234 = _233 as usize (Transmute)
  using: _233@Mir(bb68[1])
  _235 = AlignOf(src::libtree::string_table_t)
  using: 
  _236 = Sub(_235, const 1_usize)
  using: _235@Mir(bb68[3])
  _237 = BitAnd(_234, _236)
  using: _234@Mir(bb68[2]), _236@Mir(bb68[4])
  _238 = Eq(_237, const 0_usize)
  using: _237@Mir(bb68[5])
  assert(_238, "misaligned pointer dereference: address must be a multiple of {} but is {}", _235, _234) -> [success: bb67, unwind unreachable]
  using: _238@Mir(bb68[6]), _235@Mir(bb68[3]), _234@Mir(bb68[2])
bb69:
  _198 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _200 = _4
  using: _4@Phi(bb1)
  _199 = move _200 as isize (IntToInt)
  using: _200@Mir(bb69[1])
  _197 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _198, move _199) -> [return: bb56, unwind continue]
  using: _198@Mir(bb69[0]), _199@Mir(bb69[2])
bb70:
  _188 = &mut (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _190 = (*_188)
  using: _188@Mir(bb70[0])
  _191 = _150
  using: _150@Mir(bb43[1])
  _189 = core::num::<impl u64>::wrapping_add(move _190, move _191) -> [return: bb53, unwind continue]
  using: _190@Mir(bb70[1]), _191@Mir(bb70[2])
bb71:
  _184 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _183 = move _184 as isize (IntToInt)
  using: _184@Mir(bb71[0])
  _181 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _182, move _183) -> [return: bb51, unwind continue]
  using: _182@Mir(bb72[0]), _183@Mir(bb71[1])
bb72:
  _182 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _257 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _258 = _257 as usize (Transmute)
  using: _257@Mir(bb72[1])
  _259 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _260 = Sub(_259, const 1_usize)
  using: _259@Mir(bb72[3])
  _261 = BitAnd(_258, _260)
  using: _258@Mir(bb72[2]), _260@Mir(bb72[4])
  _262 = Eq(_261, const 0_usize)
  using: _261@Mir(bb72[5])
  assert(_262, "misaligned pointer dereference: address must be a multiple of {} but is {}", _259, _258) -> [success: bb71, unwind unreachable]
  using: _262@Mir(bb72[6]), _259@Mir(bb72[3]), _258@Mir(bb72[2])
bb73:
  _172 = &mut (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _174 = (*_172)
  using: _172@Mir(bb73[0])
  _175 = _22
  using: _22@Mir(bb7[4])
  _173 = core::num::<impl u64>::wrapping_add(move _174, move _175) -> [return: bb50, unwind continue]
  using: _174@Mir(bb73[1]), _175@Mir(bb73[2])
bb74:
  _168 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _170 = _4
  using: _4@Phi(bb1)
  _169 = move _170 as isize (IntToInt)
  using: _170@Mir(bb74[1])
  _167 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _168, move _169) -> [return: bb48, unwind continue]
  using: _168@Mir(bb74[0]), _169@Mir(bb74[2])
bb75:
  _163 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _162 = move _163 as isize (IntToInt)
  using: _163@Mir(bb75[0])
  _160 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _161, move _162) -> [return: bb47, unwind continue]
  using: _161@Mir(bb76[0]), _162@Mir(bb75[1])
bb76:
  _161 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _281 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _282 = _281 as usize (Transmute)
  using: _281@Mir(bb76[1])
  _283 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _284 = Sub(_283, const 1_usize)
  using: _283@Mir(bb76[3])
  _285 = BitAnd(_282, _284)
  using: _282@Mir(bb76[2]), _284@Mir(bb76[4])
  _286 = Eq(_285, const 0_usize)
  using: _285@Mir(bb76[5])
  assert(_286, "misaligned pointer dereference: address must be a multiple of {} but is {}", _283, _282) -> [success: bb75, unwind unreachable]
  using: _286@Mir(bb76[6]), _283@Mir(bb76[3]), _282@Mir(bb76[2])
bb77:
  _144 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _146 = _5
  using: _5@Phi(bb38)
  _145 = move _146 as isize (IntToInt)
  using: _146@Mir(bb77[1])
  _143 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _144, move _145) -> [return: bb40, unwind continue]
  using: _144@Mir(bb77[0]), _145@Mir(bb77[2])
bb78:
  _134 = ((*_1).10: *mut i8)
  using: _1@Entry
  _39 = move _134 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _134@Mir(bb78[0])
  _136 = _5
  using: _5@Phi(bb13)
  _138 = const 5_i32
  using: 
  _137 = move _138 as u64 (IntToInt)
  using: _138@Mir(bb78[3])
  _135 = core::num::<impl u64>::wrapping_add(move _136, move _137) -> [return: bb37, unwind continue]
  using: _136@Mir(bb78[2]), _137@Mir(bb78[4])
bb79:
  _124 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _126 = _5
  using: _5@Phi(bb13)
  _125 = move _126 as isize (IntToInt)
  using: _126@Mir(bb79[1])
  _123 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _124, move _125) -> [return: bb34, unwind continue]
  using: _124@Mir(bb79[0]), _125@Mir(bb79[2])
bb80:
  _114 = ((*_1).9: *mut i8)
  using: _1@Entry
  _39 = move _114 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _114@Mir(bb80[0])
  _116 = _5
  using: _5@Phi(bb13)
  _118 = const 6_i32
  using: 
  _117 = move _118 as u64 (IntToInt)
  using: _118@Mir(bb80[3])
  _115 = core::num::<impl u64>::wrapping_add(move _116, move _117) -> [return: bb32, unwind continue]
  using: _116@Mir(bb80[2]), _117@Mir(bb80[4])
bb81:
  _104 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _106 = _5
  using: _5@Phi(bb13)
  _105 = move _106 as isize (IntToInt)
  using: _106@Mir(bb81[1])
  _103 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _104, move _105) -> [return: bb29, unwind continue]
  using: _104@Mir(bb81[0]), _105@Mir(bb81[2])
bb82:
  _94 = ((*_1).7: *mut i8)
  using: _1@Entry
  _39 = move _94 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _94@Mir(bb82[0])
  _96 = _5
  using: _5@Phi(bb13)
  _98 = const 8_i32
  using: 
  _97 = move _98 as u64 (IntToInt)
  using: _98@Mir(bb82[3])
  _95 = core::num::<impl u64>::wrapping_add(move _96, move _97) -> [return: bb27, unwind continue]
  using: _96@Mir(bb82[2]), _97@Mir(bb82[4])
bb83:
  _84 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _86 = _5
  using: _5@Phi(bb13)
  _85 = move _86 as isize (IntToInt)
  using: _86@Mir(bb83[1])
  _83 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _84, move _85) -> [return: bb24, unwind continue]
  using: _84@Mir(bb83[0]), _85@Mir(bb83[2])
bb84:
  _74 = ((*_1).8: *mut i8)
  using: _1@Entry
  _39 = move _74 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _74@Mir(bb84[0])
  _76 = _5
  using: _5@Phi(bb13)
  _78 = const 3_i32
  using: 
  _77 = move _78 as u64 (IntToInt)
  using: _78@Mir(bb84[3])
  _75 = core::num::<impl u64>::wrapping_add(move _76, move _77) -> [return: bb22, unwind continue]
  using: _76@Mir(bb84[2]), _77@Mir(bb84[4])
bb85:
  _64 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _66 = _5
  using: _5@Phi(bb13)
  _65 = move _66 as isize (IntToInt)
  using: _66@Mir(bb85[1])
  _63 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _64, move _65) -> [return: bb19, unwind continue]
  using: _64@Mir(bb85[0]), _65@Mir(bb85[2])
bb86:
  _45 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _47 = _5
  using: _5@Phi(bb13)
  _46 = move _47 as isize (IntToInt)
  using: _47@Mir(bb86[1])
  _44 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _45, move _46) -> [return: bb14, unwind continue]
  using: _45@Mir(bb86[0]), _46@Mir(bb86[2])
bb87:
  _32 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _34 = _5
  using: _5@Mir(bb9[0])
  _33 = move _34 as isize (IntToInt)
  using: _34@Mir(bb87[1])
  _31 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _32, move _33) -> [return: bb10, unwind continue]
  using: _32@Mir(bb87[0]), _33@Mir(bb87[2])
bb88:
  _21 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _20 = move _21 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _21@Mir(bb88[0])
  _18 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _19, move _20) -> [return: bb7, unwind continue]
  using: _19@Mir(bb6[0]), _20@Mir(bb88[1])
bb89:
  _11 = ((*_6).0: *mut i8)
  using: _6@Mir(bb90[1])
  _13 = _5
  using: _5@Phi(bb1)
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb89[1])
  _10 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _11, move _12) -> [return: bb2, unwind continue]
  using: _11@Mir(bb89[0]), _12@Mir(bb89[2])
bb90:
  _7 = &mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _6 = &raw mut (*_7)
  using: _7@Mir(bb90[0])
  goto -> bb1
  using: 
@DefId(0:117 ~ lib[f5c5]::src::libtree::print_colon_delimited_paths)
bb0:
  goto -> bb1
  using: 
bb1:
  _5 = (*_1)
  using: _1@Phi(bb1)
  _4 = move _5 as i32 (IntToInt)
  using: _5@Mir(bb1[0])
  _6 = const '\0' as i32 (IntToInt)
  using: 
  _3 = Eq(move _4, move _6)
  using: _4@Mir(bb1[1]), _6@Mir(bb1[2])
  switchInt(move _3) -> [0: bb2, otherwise: bb18]
  using: _3@Mir(bb1[3])
bb2:
  _8 = _1
  using: _1@Phi(bb1)
  _9 = const ':' as i32 (IntToInt)
  using: 
  _7 = src::libtree::strchr(move _8, move _9) -> [return: bb3, unwind continue]
  using: _8@Mir(bb2[0]), _9@Mir(bb2[1])
bb3:
  _11 = _1
  using: _1@Phi(bb1)
  _13 = _7
  using: _7@Mir(bb2[2])
  _12 = move _13 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _13@Mir(bb3[1])
  _10 = Eq(move _11, move _12)
  using: _11@Mir(bb3[0]), _12@Mir(bb3[2])
  switchInt(move _10) -> [0: bb6, otherwise: bb4]
  using: _10@Mir(bb3[3])
bb4:
  _15 = _1
  using: _1@Phi(bb1)
  _14 = std::ptr::const_ptr::<impl *const i8>::offset(move _15, const 1_isize) -> [return: bb5, unwind continue]
  using: _15@Mir(bb4[0])
bb5:
  _1 = move _14
  using: _14@Mir(bb4[1])
  goto -> bb1
  using: 
bb6:
  _18 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _62 = _18 as *const () (PtrToPtr)
  using: _18@Mir(bb6[0])
  _63 = _62 as usize (Transmute)
  using: _62@Mir(bb6[1])
  _64 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _65 = Sub(_64, const 1_usize)
  using: _64@Mir(bb6[3])
  _66 = BitAnd(_63, _65)
  using: _63@Mir(bb6[2]), _65@Mir(bb6[4])
  _67 = Eq(_66, const 0_usize)
  using: _66@Mir(bb6[5])
  assert(_67, "misaligned pointer dereference: address must be a multiple of {} but is {}", _64, _63) -> [success: bb21, unwind unreachable]
  using: _67@Mir(bb6[6]), _64@Mir(bb6[3]), _63@Mir(bb6[2])
bb7:
  _23 = const b"    \x00"
  using: 
  _22 = &raw const (*_23)
  using: _23@Mir(bb7[0])
  _21 = move _22 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _22@Mir(bb7[1])
  _20 = move _21 as *const i8 (PtrToPtr)
  using: _21@Mir(bb7[2])
  _25 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _56 = _25 as *const () (PtrToPtr)
  using: _25@Mir(bb7[4])
  _57 = _56 as usize (Transmute)
  using: _56@Mir(bb7[5])
  _58 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _59 = Sub(_58, const 1_usize)
  using: _58@Mir(bb7[7])
  _60 = BitAnd(_57, _59)
  using: _57@Mir(bb7[6]), _59@Mir(bb7[8])
  _61 = Eq(_60, const 0_usize)
  using: _60@Mir(bb7[9])
  assert(_61, "misaligned pointer dereference: address must be a multiple of {} but is {}", _58, _57) -> [success: bb20, unwind unreachable]
  using: _61@Mir(bb7[10]), _58@Mir(bb7[7]), _57@Mir(bb7[6])
bb8:
  _27 = _7
  using: _7@Mir(bb2[2])
  _26 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _27) -> [return: bb9, unwind continue]
  using: _27@Mir(bb8[0])
bb9:
  switchInt(move _26) -> [0: bb11, otherwise: bb10]
  using: _26@Mir(bb8[1])
bb10:
  _29 = _1
  using: _1@Phi(bb1)
  _28 = src::libtree::puts(move _29) -> [return: bb14, unwind continue]
  using: _29@Mir(bb10[0])
bb11:
  _32 = _1
  using: _1@Phi(bb1)
  _31 = move _32 as *const libc::c_void (PtrToPtr)
  using: _32@Mir(bb11[0])
  _34 = const 1_i32
  using: 
  _33 = move _34 as u64 (IntToInt)
  using: _34@Mir(bb11[2])
  _38 = _7
  using: _7@Mir(bb2[2])
  _39 = _1
  using: _1@Phi(bb1)
  _37 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _38, move _39) -> [return: bb12, unwind continue]
  using: _38@Mir(bb11[4]), _39@Mir(bb11[5])
bb12:
  _36 = move _37 as i64 (IntToInt)
  using: _37@Mir(bb11[6])
  _35 = move _36 as u64 (IntToInt)
  using: _36@Mir(bb12[0])
  _41 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _50 = _41 as *const () (PtrToPtr)
  using: _41@Mir(bb12[2])
  _51 = _50 as usize (Transmute)
  using: _50@Mir(bb12[3])
  _52 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _53 = Sub(_52, const 1_usize)
  using: _52@Mir(bb12[5])
  _54 = BitAnd(_51, _53)
  using: _51@Mir(bb12[4]), _53@Mir(bb12[6])
  _55 = Eq(_54, const 0_usize)
  using: _54@Mir(bb12[7])
  assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb19, unwind unreachable]
  using: _55@Mir(bb12[8]), _52@Mir(bb12[5]), _51@Mir(bb12[4])
bb13:
  _43 = const '\n' as i32 (IntToInt)
  using: 
  _42 = src::libtree::putchar(move _43) -> [return: bb14, unwind continue]
  using: _43@Mir(bb13[0])
bb14:
  _45 = _7
  using: _7@Mir(bb2[2])
  _44 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _45) -> [return: bb15, unwind continue]
  using: _45@Mir(bb14[0])
bb15:
  switchInt(move _44) -> [0: bb16, otherwise: bb18]
  using: _44@Mir(bb14[1])
bb16:
  _47 = _7
  using: _7@Mir(bb2[2])
  _49 = const 1_i32
  using: 
  _48 = move _49 as isize (IntToInt)
  using: _49@Mir(bb16[1])
  _46 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _47, move _48) -> [return: bb17, unwind continue]
  using: _47@Mir(bb16[0]), _48@Mir(bb16[2])
bb17:
  _1 = move _46 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _46@Mir(bb16[3])
  goto -> bb1
  using: 
bb18:
  return
  using: _0@Entry
bb19:
  _40 = (*_41)
  using: _41@Mir(bb12[2])
  _30 = src::libtree::fwrite(move _31, move _33, move _35, move _40) -> [return: bb13, unwind continue]
  using: _31@Mir(bb11[1]), _33@Mir(bb11[3]), _35@Mir(bb12[1]), _40@Mir(bb19[0])
bb20:
  _24 = (*_25)
  using: _25@Mir(bb7[4])
  _19 = src::libtree::fputs(move _20, move _24) -> [return: bb8, unwind continue]
  using: _20@Mir(bb7[3]), _24@Mir(bb20[0])
bb21:
  _17 = (*_18)
  using: _18@Mir(bb6[0])
  _16 = src::libtree::fputs(_2, move _17) -> [return: bb7, unwind continue]
  using: _2@Entry, _17@Mir(bb21[0])
@DefId(0:118 ~ lib[f5c5]::src::libtree::print_line)
bb0:
  _8 = src::libtree::tree_preamble(_7, _1) -> [return: bb1, unwind continue]
  using: _7@Entry, _1@Entry
bb1:
  _9 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _288 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _289 = _288 as usize (Transmute)
  using: _288@Mir(bb1[1])
  _290 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _291 = Sub(_290, const 1_usize)
  using: _290@Mir(bb1[3])
  _292 = BitAnd(_289, _291)
  using: _289@Mir(bb1[2]), _291@Mir(bb1[4])
  _293 = Eq(_292, const 0_usize)
  using: _292@Mir(bb1[5])
  assert(_293, "misaligned pointer dereference: address must be a multiple of {} but is {}", _290, _289) -> [success: bb68, unwind unreachable]
  using: _293@Mir(bb1[6]), _290@Mir(bb1[3]), _289@Mir(bb1[2])
bb2:
  switchInt(move _5) -> [0: bb13, otherwise: bb3]
  using: _5@Entry
bb3:
  _13 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _14 = const '/' as i32 (IntToInt)
  using: 
  _12 = src::libtree::strrchr(move _13, move _14) -> [return: bb4, unwind continue]
  using: _13@Mir(bb3[0]), _14@Mir(bb3[1])
bb4:
  _9 = move _12
  using: _12@Mir(bb3[2])
  _16 = _9
  using: _9@Mir(bb4[0])
  _15 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _16) -> [return: bb5, unwind continue]
  using: _16@Mir(bb4[1])
bb5:
  _11 = Not(move _15)
  using: _15@Mir(bb4[2])
  switchInt(move _11) -> [0: bb13, otherwise: bb6]
  using: _11@Mir(bb5[0])
bb6:
  _18 = _4 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _4@Entry
  _20 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _282 = _20 as *const () (PtrToPtr)
  using: _20@Mir(bb6[1])
  _283 = _282 as usize (Transmute)
  using: _282@Mir(bb6[2])
  _284 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _285 = Sub(_284, const 1_usize)
  using: _284@Mir(bb6[4])
  _286 = BitAnd(_283, _285)
  using: _283@Mir(bb6[3]), _285@Mir(bb6[5])
  _287 = Eq(_286, const 0_usize)
  using: _286@Mir(bb6[6])
  assert(_287, "misaligned pointer dereference: address must be a multiple of {} but is {}", _284, _283) -> [success: bb67, unwind unreachable]
  using: _287@Mir(bb6[7]), _284@Mir(bb6[4]), _283@Mir(bb6[3])
bb7:
  _22 = _2 as *const libc::c_void (PtrToPtr)
  using: _2@Entry
  _24 = const 1_i32
  using: 
  _23 = move _24 as u64 (IntToInt)
  using: _24@Mir(bb7[1])
  _29 = _9
  using: _9@Mir(bb4[0])
  _31 = const 1_i32
  using: 
  _30 = move _31 as isize (IntToInt)
  using: _31@Mir(bb7[4])
  _28 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _29, move _30) -> [return: bb8, unwind continue]
  using: _29@Mir(bb7[3]), _30@Mir(bb7[5])
bb8:
  _32 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _27 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _28, move _32) -> [return: bb9, unwind continue]
  using: _28@Mir(bb7[6]), _32@Mir(bb8[0])
bb9:
  _26 = move _27 as i64 (IntToInt)
  using: _27@Mir(bb8[1])
  _25 = move _26 as u64 (IntToInt)
  using: _26@Mir(bb9[0])
  _34 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _276 = _34 as *const () (PtrToPtr)
  using: _34@Mir(bb9[2])
  _277 = _276 as usize (Transmute)
  using: _276@Mir(bb9[3])
  _278 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _279 = Sub(_278, const 1_usize)
  using: _278@Mir(bb9[5])
  _280 = BitAnd(_277, _279)
  using: _277@Mir(bb9[4]), _279@Mir(bb9[6])
  _281 = Eq(_280, const 0_usize)
  using: _280@Mir(bb9[7])
  assert(_281, "misaligned pointer dereference: address must be a multiple of {} but is {}", _278, _277) -> [success: bb66, unwind unreachable]
  using: _281@Mir(bb9[8]), _278@Mir(bb9[5]), _277@Mir(bb9[4])
bb10:
  _36 = _3 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _3@Entry
  _38 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _270 = _38 as *const () (PtrToPtr)
  using: _38@Mir(bb10[1])
  _271 = _270 as usize (Transmute)
  using: _270@Mir(bb10[2])
  _272 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _273 = Sub(_272, const 1_usize)
  using: _272@Mir(bb10[4])
  _274 = BitAnd(_271, _273)
  using: _271@Mir(bb10[3]), _273@Mir(bb10[5])
  _275 = Eq(_274, const 0_usize)
  using: _274@Mir(bb10[6])
  assert(_275, "misaligned pointer dereference: address must be a multiple of {} but is {}", _272, _271) -> [success: bb65, unwind unreachable]
  using: _275@Mir(bb10[7]), _272@Mir(bb10[4]), _271@Mir(bb10[3])
bb11:
  _42 = _9
  using: _9@Mir(bb4[0])
  _44 = const 1_i32
  using: 
  _43 = move _44 as isize (IntToInt)
  using: _44@Mir(bb11[1])
  _41 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _42, move _43) -> [return: bb12, unwind continue]
  using: _42@Mir(bb11[0]), _43@Mir(bb11[2])
bb12:
  _40 = move _41 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _41@Mir(bb11[3])
  _46 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _264 = _46 as *const () (PtrToPtr)
  using: _46@Mir(bb12[1])
  _265 = _264 as usize (Transmute)
  using: _264@Mir(bb12[2])
  _266 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _267 = Sub(_266, const 1_usize)
  using: _266@Mir(bb12[4])
  _268 = BitAnd(_265, _267)
  using: _265@Mir(bb12[3]), _267@Mir(bb12[5])
  _269 = Eq(_268, const 0_usize)
  using: _268@Mir(bb12[6])
  assert(_269, "misaligned pointer dereference: address must be a multiple of {} but is {}", _266, _265) -> [success: bb64, unwind unreachable]
  using: _269@Mir(bb12[7]), _266@Mir(bb12[4]), _265@Mir(bb12[3])
bb13:
  _258 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _259 = _258 as usize (Transmute)
  using: _258@Mir(bb13[0])
  _260 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _261 = Sub(_260, const 1_usize)
  using: _260@Mir(bb13[2])
  _262 = BitAnd(_259, _261)
  using: _259@Mir(bb13[1]), _261@Mir(bb13[3])
  _263 = Eq(_262, const 0_usize)
  using: _262@Mir(bb13[4])
  assert(_263, "misaligned pointer dereference: address must be a multiple of {} but is {}", _260, _259) -> [success: bb63, unwind unreachable]
  using: _263@Mir(bb13[5]), _260@Mir(bb13[2]), _259@Mir(bb13[1])
bb14:
  _49 = _3 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _3@Entry
  _51 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _252 = _51 as *const () (PtrToPtr)
  using: _51@Mir(bb14[1])
  _253 = _252 as usize (Transmute)
  using: _252@Mir(bb14[2])
  _254 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _255 = Sub(_254, const 1_usize)
  using: _254@Mir(bb14[4])
  _256 = BitAnd(_253, _255)
  using: _253@Mir(bb14[3]), _255@Mir(bb14[5])
  _257 = Eq(_256, const 0_usize)
  using: _256@Mir(bb14[6])
  assert(_257, "misaligned pointer dereference: address must be a multiple of {} but is {}", _254, _253) -> [success: bb62, unwind unreachable]
  using: _257@Mir(bb14[7]), _254@Mir(bb14[4]), _253@Mir(bb14[3])
bb15:
  _53 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _55 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _246 = _55 as *const () (PtrToPtr)
  using: _55@Mir(bb15[1])
  _247 = _246 as usize (Transmute)
  using: _246@Mir(bb15[2])
  _248 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _249 = Sub(_248, const 1_usize)
  using: _248@Mir(bb15[4])
  _250 = BitAnd(_247, _249)
  using: _247@Mir(bb15[3]), _249@Mir(bb15[5])
  _251 = Eq(_250, const 0_usize)
  using: _250@Mir(bb15[6])
  assert(_251, "misaligned pointer dereference: address must be a multiple of {} but is {}", _248, _247) -> [success: bb61, unwind unreachable]
  using: _251@Mir(bb15[7]), _248@Mir(bb15[4]), _247@Mir(bb15[3])
bb16:
  _240 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _241 = _240 as usize (Transmute)
  using: _240@Mir(bb16[0])
  _242 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _243 = Sub(_242, const 1_usize)
  using: _242@Mir(bb16[2])
  _244 = BitAnd(_241, _243)
  using: _241@Mir(bb16[1]), _243@Mir(bb16[3])
  _245 = Eq(_244, const 0_usize)
  using: _244@Mir(bb16[4])
  assert(_245, "misaligned pointer dereference: address must be a multiple of {} but is {}", _242, _241) -> [success: bb60, unwind unreachable]
  using: _245@Mir(bb16[5]), _242@Mir(bb16[2]), _241@Mir(bb16[1])
bb17:
  switchInt(move _5) -> [0: bb19, otherwise: bb18]
  using: _5@Entry
bb18:
  _61 = const b"\x1b[0m \x1b[33m\x00"
  using: 
  _60 = &raw const (*_61)
  using: _61@Mir(bb18[0])
  _59 = move _60 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _60@Mir(bb18[1])
  _58 = move _59 as *const i8 (PtrToPtr)
  using: _59@Mir(bb18[2])
  _63 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _234 = _63 as *const () (PtrToPtr)
  using: _63@Mir(bb18[4])
  _235 = _234 as usize (Transmute)
  using: _234@Mir(bb18[5])
  _236 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _237 = Sub(_236, const 1_usize)
  using: _236@Mir(bb18[7])
  _238 = BitAnd(_235, _237)
  using: _235@Mir(bb18[6]), _237@Mir(bb18[8])
  _239 = Eq(_238, const 0_usize)
  using: _238@Mir(bb18[9])
  assert(_239, "misaligned pointer dereference: address must be a multiple of {} but is {}", _236, _235) -> [success: bb59, unwind unreachable]
  using: _239@Mir(bb18[10]), _236@Mir(bb18[7]), _235@Mir(bb18[6])
bb19:
  _65 = const ' ' as i32 (IntToInt)
  using: 
  _64 = src::libtree::putchar(move _65) -> [return: bb20, unwind continue]
  using: _65@Mir(bb19[0])
bb20:
  _66 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _67 = (_6.0: u32)
  using: _6@Entry
  switchInt(_67) -> [2: bb21, 3: bb31, 4: bb32, 5: bb33, 1: bb41, 6: bb42, otherwise: bb43]
  using: _67@Mir(bb20[1])
bb21:
  _70 = (_6.1: u64)
  using: _6@Entry
  _72 = const 1_i32
  using: 
  _71 = move _72 as u64 (IntToInt)
  using: _72@Mir(bb21[1])
  _69 = core::num::<impl u64>::wrapping_add(move _70, move _71) -> [return: bb22, unwind continue]
  using: _70@Mir(bb21[0]), _71@Mir(bb21[2])
bb22:
  _68 = Ge(move _69, _1)
  using: _69@Mir(bb21[3]), _1@Entry
  switchInt(move _68) -> [0: bb24, otherwise: bb23]
  using: _68@Mir(bb22[0])
bb23:
  _77 = const b"[rpath]\x00"
  using: 
  _76 = &raw const (*_77)
  using: _77@Mir(bb23[0])
  _75 = move _76 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _76@Mir(bb23[1])
  _74 = move _75 as *const i8 (PtrToPtr)
  using: _75@Mir(bb23[2])
  _79 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _228 = _79 as *const () (PtrToPtr)
  using: _79@Mir(bb23[4])
  _229 = _228 as usize (Transmute)
  using: _228@Mir(bb23[5])
  _230 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _231 = Sub(_230, const 1_usize)
  using: _230@Mir(bb23[7])
  _232 = BitAnd(_229, _231)
  using: _229@Mir(bb23[6]), _231@Mir(bb23[8])
  _233 = Eq(_232, const 0_usize)
  using: _232@Mir(bb23[9])
  assert(_233, "misaligned pointer dereference: address must be a multiple of {} but is {}", _230, _229) -> [success: bb58, unwind unreachable]
  using: _233@Mir(bb23[10]), _230@Mir(bb23[7]), _229@Mir(bb23[6])
bb24:
  _80 = [const 0_i8; 8]
  using: 
  _84 = &mut _80
  using: _80@Mir(bb24[0])
  _83 = move _84 as &mut [i8] (PointerCoercion(Unsize))
  using: _84@Mir(bb24[1])
  _82 = core::slice::<impl [i8]>::as_mut_ptr(move _83) -> [return: bb25, unwind continue]
  using: _83@Mir(bb24[2])
bb25:
  _86 = (_6.1: u64)
  using: _6@Entry
  _88 = const 1_i32
  using: 
  _87 = move _88 as u64 (IntToInt)
  using: _88@Mir(bb25[1])
  _85 = core::num::<impl u64>::wrapping_add(move _86, move _87) -> [return: bb26, unwind continue]
  using: _86@Mir(bb25[0]), _87@Mir(bb25[2])
bb26:
  _81 = src::libtree::utoa(move _82, move _85) -> [return: bb27, unwind continue]
  using: _82@Mir(bb24[3]), _85@Mir(bb25[3])
bb27:
  _93 = const b"[rpath of \x00"
  using: 
  _92 = &raw const (*_93)
  using: _93@Mir(bb27[0])
  _91 = move _92 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _92@Mir(bb27[1])
  _90 = move _91 as *const i8 (PtrToPtr)
  using: _91@Mir(bb27[2])
  _95 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _222 = _95 as *const () (PtrToPtr)
  using: _95@Mir(bb27[4])
  _223 = _222 as usize (Transmute)
  using: _222@Mir(bb27[5])
  _224 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _225 = Sub(_224, const 1_usize)
  using: _224@Mir(bb27[7])
  _226 = BitAnd(_223, _225)
  using: _223@Mir(bb27[6]), _225@Mir(bb27[8])
  _227 = Eq(_226, const 0_usize)
  using: _226@Mir(bb27[9])
  assert(_227, "misaligned pointer dereference: address must be a multiple of {} but is {}", _224, _223) -> [success: bb57, unwind unreachable]
  using: _227@Mir(bb27[10]), _224@Mir(bb27[7]), _223@Mir(bb27[6])
bb28:
  _100 = &mut _80
  using: _80@Mir(bb24[0])
  _99 = move _100 as &mut [i8] (PointerCoercion(Unsize))
  using: _100@Mir(bb28[0])
  _98 = core::slice::<impl [i8]>::as_mut_ptr(move _99) -> [return: bb29, unwind continue]
  using: _99@Mir(bb28[1])
bb29:
  _97 = move _98 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _98@Mir(bb28[2])
  _102 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _216 = _102 as *const () (PtrToPtr)
  using: _102@Mir(bb29[1])
  _217 = _216 as usize (Transmute)
  using: _216@Mir(bb29[2])
  _218 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _219 = Sub(_218, const 1_usize)
  using: _218@Mir(bb29[4])
  _220 = BitAnd(_217, _219)
  using: _217@Mir(bb29[3]), _219@Mir(bb29[5])
  _221 = Eq(_220, const 0_usize)
  using: _220@Mir(bb29[6])
  assert(_221, "misaligned pointer dereference: address must be a multiple of {} but is {}", _218, _217) -> [success: bb56, unwind unreachable]
  using: _221@Mir(bb29[7]), _218@Mir(bb29[4]), _217@Mir(bb29[3])
bb30:
  _104 = const ']' as i32 (IntToInt)
  using: 
  _103 = src::libtree::putchar(move _104) -> [return: bb43, unwind continue]
  using: _104@Mir(bb30[0])
bb31:
  _109 = const b"[LD_LIBRARY_PATH]\x00"
  using: 
  _108 = &raw const (*_109)
  using: _109@Mir(bb31[0])
  _107 = move _108 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _108@Mir(bb31[1])
  _106 = move _107 as *const i8 (PtrToPtr)
  using: _107@Mir(bb31[2])
  _111 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _210 = _111 as *const () (PtrToPtr)
  using: _111@Mir(bb31[4])
  _211 = _210 as usize (Transmute)
  using: _210@Mir(bb31[5])
  _212 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _213 = Sub(_212, const 1_usize)
  using: _212@Mir(bb31[7])
  _214 = BitAnd(_211, _213)
  using: _211@Mir(bb31[6]), _213@Mir(bb31[8])
  _215 = Eq(_214, const 0_usize)
  using: _214@Mir(bb31[9])
  assert(_215, "misaligned pointer dereference: address must be a multiple of {} but is {}", _212, _211) -> [success: bb55, unwind unreachable]
  using: _215@Mir(bb31[10]), _212@Mir(bb31[7]), _211@Mir(bb31[6])
bb32:
  _116 = const b"[runpath]\x00"
  using: 
  _115 = &raw const (*_116)
  using: _116@Mir(bb32[0])
  _114 = move _115 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _115@Mir(bb32[1])
  _113 = move _114 as *const i8 (PtrToPtr)
  using: _114@Mir(bb32[2])
  _118 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _204 = _118 as *const () (PtrToPtr)
  using: _118@Mir(bb32[4])
  _205 = _204 as usize (Transmute)
  using: _204@Mir(bb32[5])
  _206 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _207 = Sub(_206, const 1_usize)
  using: _206@Mir(bb32[7])
  _208 = BitAnd(_205, _207)
  using: _205@Mir(bb32[6]), _207@Mir(bb32[8])
  _209 = Eq(_208, const 0_usize)
  using: _208@Mir(bb32[9])
  assert(_209, "misaligned pointer dereference: address must be a multiple of {} but is {}", _206, _205) -> [success: bb54, unwind unreachable]
  using: _209@Mir(bb32[10]), _206@Mir(bb32[7]), _205@Mir(bb32[6])
bb33:
  _120 = const '[' as i32 (IntToInt)
  using: 
  _119 = src::libtree::putchar(move _120) -> [return: bb34, unwind continue]
  using: _120@Mir(bb33[0])
bb34:
  _198 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _199 = _198 as usize (Transmute)
  using: _198@Mir(bb34[0])
  _200 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _201 = Sub(_200, const 1_usize)
  using: _200@Mir(bb34[2])
  _202 = BitAnd(_199, _201)
  using: _199@Mir(bb34[1]), _201@Mir(bb34[3])
  _203 = Eq(_202, const 0_usize)
  using: _202@Mir(bb34[4])
  assert(_203, "misaligned pointer dereference: address must be a multiple of {} but is {}", _200, _199) -> [success: bb53, unwind unreachable]
  using: _203@Mir(bb34[5]), _200@Mir(bb34[2]), _199@Mir(bb34[1])
bb35:
  _66 = move _121
  using: _121@Mir(bb53[3])
  _127 = _66
  using: _66@Mir(bb35[0])
  _126 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _127) -> [return: bb36, unwind continue]
  using: _127@Mir(bb35[1])
bb36:
  switchInt(move _126) -> [0: bb38, otherwise: bb37]
  using: _126@Mir(bb35[2])
bb37:
  _192 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _193 = _192 as usize (Transmute)
  using: _192@Mir(bb37[0])
  _194 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _195 = Sub(_194, const 1_usize)
  using: _194@Mir(bb37[2])
  _196 = BitAnd(_193, _195)
  using: _193@Mir(bb37[1]), _195@Mir(bb37[3])
  _197 = Eq(_196, const 0_usize)
  using: _196@Mir(bb37[4])
  assert(_197, "misaligned pointer dereference: address must be a multiple of {} but is {}", _194, _193) -> [success: bb52, unwind unreachable]
  using: _197@Mir(bb37[5]), _194@Mir(bb37[2]), _193@Mir(bb37[1])
bb38:
  _128 = _66
  using: _66@Mir(bb35[0])
  _130 = const 1_i32
  using: 
  _129 = move _130 as isize (IntToInt)
  using: _130@Mir(bb38[1])
  _125 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _128, move _129) -> [return: bb39, unwind continue]
  using: _128@Mir(bb38[0]), _129@Mir(bb38[2])
bb39:
  _66 = move _125
  using: _125@Phi(bb39)
  _133 = _66
  using: _66@Mir(bb39[0])
  _132 = move _133 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _133@Mir(bb39[1])
  _135 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _186 = _135 as *const () (PtrToPtr)
  using: _135@Mir(bb39[3])
  _187 = _186 as usize (Transmute)
  using: _186@Mir(bb39[4])
  _188 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _189 = Sub(_188, const 1_usize)
  using: _188@Mir(bb39[6])
  _190 = BitAnd(_187, _189)
  using: _187@Mir(bb39[5]), _189@Mir(bb39[7])
  _191 = Eq(_190, const 0_usize)
  using: _190@Mir(bb39[8])
  assert(_191, "misaligned pointer dereference: address must be a multiple of {} but is {}", _188, _187) -> [success: bb51, unwind unreachable]
  using: _191@Mir(bb39[9]), _188@Mir(bb39[6]), _187@Mir(bb39[5])
bb40:
  _137 = const ']' as i32 (IntToInt)
  using: 
  _136 = src::libtree::putchar(move _137) -> [return: bb43, unwind continue]
  using: _137@Mir(bb40[0])
bb41:
  _142 = const b"[direct]\x00"
  using: 
  _141 = &raw const (*_142)
  using: _142@Mir(bb41[0])
  _140 = move _141 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _141@Mir(bb41[1])
  _139 = move _140 as *const i8 (PtrToPtr)
  using: _140@Mir(bb41[2])
  _144 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _180 = _144 as *const () (PtrToPtr)
  using: _144@Mir(bb41[4])
  _181 = _180 as usize (Transmute)
  using: _180@Mir(bb41[5])
  _182 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _183 = Sub(_182, const 1_usize)
  using: _182@Mir(bb41[7])
  _184 = BitAnd(_181, _183)
  using: _181@Mir(bb41[6]), _183@Mir(bb41[8])
  _185 = Eq(_184, const 0_usize)
  using: _184@Mir(bb41[9])
  assert(_185, "misaligned pointer dereference: address must be a multiple of {} but is {}", _182, _181) -> [success: bb50, unwind unreachable]
  using: _185@Mir(bb41[10]), _182@Mir(bb41[7]), _181@Mir(bb41[6])
bb42:
  _149 = const b"[default path]\x00"
  using: 
  _148 = &raw const (*_149)
  using: _149@Mir(bb42[0])
  _147 = move _148 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _148@Mir(bb42[1])
  _146 = move _147 as *const i8 (PtrToPtr)
  using: _147@Mir(bb42[2])
  _151 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _174 = _151 as *const () (PtrToPtr)
  using: _151@Mir(bb42[4])
  _175 = _174 as usize (Transmute)
  using: _174@Mir(bb42[5])
  _176 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _177 = Sub(_176, const 1_usize)
  using: _176@Mir(bb42[7])
  _178 = BitAnd(_175, _177)
  using: _175@Mir(bb42[6]), _177@Mir(bb42[8])
  _179 = Eq(_178, const 0_usize)
  using: _178@Mir(bb42[9])
  assert(_179, "misaligned pointer dereference: address must be a multiple of {} but is {}", _176, _175) -> [success: bb49, unwind unreachable]
  using: _179@Mir(bb42[10]), _176@Mir(bb42[7]), _175@Mir(bb42[6])
bb43:
  _168 = _7 as *const () (PtrToPtr)
  using: _7@Entry
  _169 = _168 as usize (Transmute)
  using: _168@Mir(bb43[0])
  _170 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _171 = Sub(_170, const 1_usize)
  using: _170@Mir(bb43[2])
  _172 = BitAnd(_169, _171)
  using: _169@Mir(bb43[1]), _171@Mir(bb43[3])
  _173 = Eq(_172, const 0_usize)
  using: _172@Mir(bb43[4])
  assert(_173, "misaligned pointer dereference: address must be a multiple of {} but is {}", _170, _169) -> [success: bb48, unwind unreachable]
  using: _173@Mir(bb43[5]), _170@Mir(bb43[2]), _169@Mir(bb43[1])
bb44:
  _157 = const b"\x1b[0m\n\x00"
  using: 
  _156 = &raw const (*_157)
  using: _157@Mir(bb44[0])
  _155 = move _156 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _156@Mir(bb44[1])
  _154 = move _155 as *const i8 (PtrToPtr)
  using: _155@Mir(bb44[2])
  _159 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _162 = _159 as *const () (PtrToPtr)
  using: _159@Mir(bb44[4])
  _163 = _162 as usize (Transmute)
  using: _162@Mir(bb44[5])
  _164 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _165 = Sub(_164, const 1_usize)
  using: _164@Mir(bb44[7])
  _166 = BitAnd(_163, _165)
  using: _163@Mir(bb44[6]), _165@Mir(bb44[8])
  _167 = Eq(_166, const 0_usize)
  using: _166@Mir(bb44[9])
  assert(_167, "misaligned pointer dereference: address must be a multiple of {} but is {}", _164, _163) -> [success: bb47, unwind unreachable]
  using: _167@Mir(bb44[10]), _164@Mir(bb44[7]), _163@Mir(bb44[6])
bb45:
  _161 = const '\n' as i32 (IntToInt)
  using: 
  _160 = src::libtree::putchar(move _161) -> [return: bb46, unwind continue]
  using: _161@Mir(bb45[0])
bb46:
  return
  using: _0@Entry
bb47:
  _158 = (*_159)
  using: _159@Mir(bb44[4])
  _153 = src::libtree::fputs(move _154, move _158) -> [return: bb46, unwind continue]
  using: _154@Mir(bb44[3]), _158@Mir(bb47[0])
bb48:
  _152 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _152) -> [0: bb45, otherwise: bb44]
  using: _152@Mir(bb48[0])
bb49:
  _150 = (*_151)
  using: _151@Mir(bb42[4])
  _145 = src::libtree::fputs(move _146, move _150) -> [return: bb43, unwind continue]
  using: _146@Mir(bb42[3]), _150@Mir(bb49[0])
bb50:
  _143 = (*_144)
  using: _144@Mir(bb41[4])
  _138 = src::libtree::fputs(move _139, move _143) -> [return: bb43, unwind continue]
  using: _139@Mir(bb41[3]), _143@Mir(bb50[0])
bb51:
  _134 = (*_135)
  using: _135@Mir(bb39[3])
  _131 = src::libtree::fputs(move _132, move _134) -> [return: bb40, unwind continue]
  using: _132@Mir(bb39[2]), _134@Mir(bb51[0])
bb52:
  _125 = ((*_7).3: *mut i8)
  using: _7@Entry
  goto -> bb39
  using: 
bb53:
  _123 = ((*_7).3: *mut i8)
  using: _7@Entry
  _122 = move _123 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _123@Mir(bb53[0])
  _124 = const '/' as i32 (IntToInt)
  using: 
  _121 = src::libtree::strrchr(move _122, move _124) -> [return: bb35, unwind continue]
  using: _122@Mir(bb53[1]), _124@Mir(bb53[2])
bb54:
  _117 = (*_118)
  using: _118@Mir(bb32[4])
  _112 = src::libtree::fputs(move _113, move _117) -> [return: bb43, unwind continue]
  using: _113@Mir(bb32[3]), _117@Mir(bb54[0])
bb55:
  _110 = (*_111)
  using: _111@Mir(bb31[4])
  _105 = src::libtree::fputs(move _106, move _110) -> [return: bb43, unwind continue]
  using: _106@Mir(bb31[3]), _110@Mir(bb55[0])
bb56:
  _101 = (*_102)
  using: _102@Mir(bb29[1])
  _96 = src::libtree::fputs(move _97, move _101) -> [return: bb30, unwind continue]
  using: _97@Mir(bb29[0]), _101@Mir(bb56[0])
bb57:
  _94 = (*_95)
  using: _95@Mir(bb27[4])
  _89 = src::libtree::fputs(move _90, move _94) -> [return: bb28, unwind continue]
  using: _90@Mir(bb27[3]), _94@Mir(bb57[0])
bb58:
  _78 = (*_79)
  using: _79@Mir(bb23[4])
  _73 = src::libtree::fputs(move _74, move _78) -> [return: bb43, unwind continue]
  using: _74@Mir(bb23[3]), _78@Mir(bb58[0])
bb59:
  _62 = (*_63)
  using: _63@Mir(bb18[4])
  _57 = src::libtree::fputs(move _58, move _62) -> [return: bb20, unwind continue]
  using: _58@Mir(bb18[3]), _62@Mir(bb59[0])
bb60:
  _56 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _56) -> [0: bb19, otherwise: bb17]
  using: _56@Mir(bb60[0])
bb61:
  _54 = (*_55)
  using: _55@Mir(bb15[1])
  _52 = src::libtree::fputs(move _53, move _54) -> [return: bb16, unwind continue]
  using: _53@Mir(bb15[0]), _54@Mir(bb61[0])
bb62:
  _50 = (*_51)
  using: _51@Mir(bb14[1])
  _48 = src::libtree::fputs(move _49, move _50) -> [return: bb15, unwind continue]
  using: _49@Mir(bb14[0]), _50@Mir(bb62[0])
bb63:
  _47 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _47) -> [0: bb15, otherwise: bb14]
  using: _47@Mir(bb63[0])
bb64:
  _45 = (*_46)
  using: _46@Mir(bb12[1])
  _39 = src::libtree::fputs(move _40, move _45) -> [return: bb16, unwind continue]
  using: _40@Mir(bb12[0]), _45@Mir(bb64[0])
bb65:
  _37 = (*_38)
  using: _38@Mir(bb10[1])
  _35 = src::libtree::fputs(move _36, move _37) -> [return: bb11, unwind continue]
  using: _36@Mir(bb10[0]), _37@Mir(bb65[0])
bb66:
  _33 = (*_34)
  using: _34@Mir(bb9[2])
  _21 = src::libtree::fwrite(move _22, move _23, move _25, move _33) -> [return: bb10, unwind continue]
  using: _22@Mir(bb7[0]), _23@Mir(bb7[2]), _25@Mir(bb9[1]), _33@Mir(bb66[0])
bb67:
  _19 = (*_20)
  using: _20@Mir(bb6[1])
  _17 = src::libtree::fputs(move _18, move _19) -> [return: bb7, unwind continue]
  using: _18@Mir(bb6[0]), _19@Mir(bb67[0])
bb68:
  _10 = ((*_7).2: i32)
  using: _7@Entry
  switchInt(move _10) -> [0: bb13, otherwise: bb2]
  using: _10@Mir(bb68[0])
@DefId(0:121 ~ lib[f5c5]::src::libtree::print_error)
bb0:
  _8 = const 0_i32
  using: 
  _7 = move _8 as u64 (IntToInt)
  using: _8@Mir(bb0[0])
  goto -> bb1
  using: 
bb1:
  _10 = _7
  using: _7@Phi(bb1)
  _9 = Lt(move _10, _2)
  using: _10@Mir(bb1[0]), _2@Entry
  switchInt(move _9) -> [0: bb16, otherwise: bb2]
  using: _9@Mir(bb1[1])
bb2:
  _14 = _7
  using: _7@Phi(bb1)
  _16 = const 1_i32
  using: 
  _15 = move _16 as u64 (IntToInt)
  using: _16@Mir(bb2[1])
  _13 = core::num::<impl u64>::wrapping_add(move _14, move _15) -> [return: bb3, unwind continue]
  using: _14@Mir(bb2[0]), _15@Mir(bb2[2])
bb3:
  _12 = Ge(move _13, _2)
  using: _13@Mir(bb2[3]), _2@Entry
  _11 = move _12 as i32 (IntToInt)
  using: _12@Mir(bb3[0])
  _17 = _1 as usize (IntToInt)
  using: _1@Entry
  _877 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _878 = _877 as usize (Transmute)
  using: _877@Mir(bb3[3])
  _879 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _880 = Sub(_879, const 1_usize)
  using: _879@Mir(bb3[5])
  _881 = BitAnd(_878, _880)
  using: _878@Mir(bb3[4]), _880@Mir(bb3[6])
  _882 = Eq(_881, const 0_usize)
  using: _881@Mir(bb3[7])
  assert(_882, "misaligned pointer dereference: address must be a multiple of {} but is {}", _879, _878) -> [success: bb205, unwind unreachable]
  using: _882@Mir(bb3[8]), _879@Mir(bb3[5]), _878@Mir(bb3[4])
bb4:
  _871 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _872 = _871 as usize (Transmute)
  using: _871@Mir(bb4[0])
  _873 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _874 = Sub(_873, const 1_usize)
  using: _873@Mir(bb4[2])
  _875 = BitAnd(_872, _874)
  using: _872@Mir(bb4[1]), _874@Mir(bb4[3])
  _876 = Eq(_875, const 0_usize)
  using: _875@Mir(bb4[4])
  assert(_876, "misaligned pointer dereference: address must be a multiple of {} but is {}", _873, _872) -> [success: bb204, unwind unreachable]
  using: _876@Mir(bb4[5]), _873@Mir(bb4[2]), _872@Mir(bb4[1])
bb5:
  _20 = src::libtree::tree_preamble(_5, move _21) -> [return: bb6, unwind continue]
  using: _5@Entry, _21@Mir(bb204[3])
bb6:
  _865 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _866 = _865 as usize (Transmute)
  using: _865@Mir(bb6[0])
  _867 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _868 = Sub(_867, const 1_usize)
  using: _867@Mir(bb6[2])
  _869 = BitAnd(_866, _868)
  using: _866@Mir(bb6[1]), _868@Mir(bb6[3])
  _870 = Eq(_869, const 0_usize)
  using: _869@Mir(bb6[4])
  assert(_870, "misaligned pointer dereference: address must be a multiple of {} but is {}", _867, _866) -> [success: bb203, unwind unreachable]
  using: _870@Mir(bb6[5]), _867@Mir(bb6[2]), _866@Mir(bb6[1])
bb7:
  _29 = const b"\x1b[1;31m\x00"
  using: 
  _28 = &raw const (*_29)
  using: _29@Mir(bb7[0])
  _27 = move _28 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _28@Mir(bb7[1])
  _26 = move _27 as *const i8 (PtrToPtr)
  using: _27@Mir(bb7[2])
  _31 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _859 = _31 as *const () (PtrToPtr)
  using: _31@Mir(bb7[4])
  _860 = _859 as usize (Transmute)
  using: _859@Mir(bb7[5])
  _861 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _862 = Sub(_861, const 1_usize)
  using: _861@Mir(bb7[7])
  _863 = BitAnd(_860, _862)
  using: _860@Mir(bb7[6]), _862@Mir(bb7[8])
  _864 = Eq(_863, const 0_usize)
  using: _863@Mir(bb7[9])
  assert(_864, "misaligned pointer dereference: address must be a multiple of {} but is {}", _861, _860) -> [success: bb202, unwind unreachable]
  using: _864@Mir(bb7[10]), _861@Mir(bb7[7]), _860@Mir(bb7[6])
bb8:
  _853 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _854 = _853 as usize (Transmute)
  using: _853@Mir(bb8[0])
  _855 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _856 = Sub(_855, const 1_usize)
  using: _855@Mir(bb8[2])
  _857 = BitAnd(_854, _856)
  using: _854@Mir(bb8[1]), _856@Mir(bb8[3])
  _858 = Eq(_857, const 0_usize)
  using: _857@Mir(bb8[4])
  assert(_858, "misaligned pointer dereference: address must be a multiple of {} but is {}", _855, _854) -> [success: bb201, unwind unreachable]
  using: _858@Mir(bb8[5]), _855@Mir(bb8[2]), _854@Mir(bb8[1])
bb9:
  _841 = _38 as *const () (PtrToPtr)
  using: _38@Mir(bb200[3])
  _842 = _841 as usize (Transmute)
  using: _841@Mir(bb9[0])
  _843 = AlignOf(u64)
  using: 
  _844 = Sub(_843, const 1_usize)
  using: _843@Mir(bb9[2])
  _845 = BitAnd(_842, _844)
  using: _842@Mir(bb9[1]), _844@Mir(bb9[3])
  _846 = Eq(_845, const 0_usize)
  using: _845@Mir(bb9[4])
  assert(_846, "misaligned pointer dereference: address must be a multiple of {} but is {}", _843, _842) -> [success: bb199, unwind unreachable]
  using: _846@Mir(bb9[5]), _843@Mir(bb9[2]), _842@Mir(bb9[1])
bb10:
  _33 = move _34 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _34@Mir(bb199[2])
  _43 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _835 = _43 as *const () (PtrToPtr)
  using: _43@Mir(bb10[1])
  _836 = _835 as usize (Transmute)
  using: _835@Mir(bb10[2])
  _837 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _838 = Sub(_837, const 1_usize)
  using: _837@Mir(bb10[4])
  _839 = BitAnd(_836, _838)
  using: _836@Mir(bb10[3]), _838@Mir(bb10[5])
  _840 = Eq(_839, const 0_usize)
  using: _839@Mir(bb10[6])
  assert(_840, "misaligned pointer dereference: address must be a multiple of {} but is {}", _837, _836) -> [success: bb198, unwind unreachable]
  using: _840@Mir(bb10[7]), _837@Mir(bb10[4]), _836@Mir(bb10[3])
bb11:
  _48 = const b" not found\n\x00"
  using: 
  _47 = &raw const (*_48)
  using: _48@Mir(bb11[0])
  _46 = move _47 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _47@Mir(bb11[1])
  _45 = move _46 as *const i8 (PtrToPtr)
  using: _46@Mir(bb11[2])
  _50 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _829 = _50 as *const () (PtrToPtr)
  using: _50@Mir(bb11[4])
  _830 = _829 as usize (Transmute)
  using: _829@Mir(bb11[5])
  _831 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _832 = Sub(_831, const 1_usize)
  using: _831@Mir(bb11[7])
  _833 = BitAnd(_830, _832)
  using: _830@Mir(bb11[6]), _832@Mir(bb11[8])
  _834 = Eq(_833, const 0_usize)
  using: _833@Mir(bb11[9])
  assert(_834, "misaligned pointer dereference: address must be a multiple of {} but is {}", _831, _830) -> [success: bb197, unwind unreachable]
  using: _834@Mir(bb11[10]), _831@Mir(bb11[7]), _830@Mir(bb11[6])
bb12:
  _823 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _824 = _823 as usize (Transmute)
  using: _823@Mir(bb12[0])
  _825 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _826 = Sub(_825, const 1_usize)
  using: _825@Mir(bb12[2])
  _827 = BitAnd(_824, _826)
  using: _824@Mir(bb12[1]), _826@Mir(bb12[3])
  _828 = Eq(_827, const 0_usize)
  using: _827@Mir(bb12[4])
  assert(_828, "misaligned pointer dereference: address must be a multiple of {} but is {}", _825, _824) -> [success: bb196, unwind unreachable]
  using: _828@Mir(bb12[5]), _825@Mir(bb12[2]), _824@Mir(bb12[1])
bb13:
  _56 = const b"\x1b[0m\x00"
  using: 
  _55 = &raw const (*_56)
  using: _56@Mir(bb13[0])
  _54 = move _55 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _55@Mir(bb13[1])
  _53 = move _54 as *const i8 (PtrToPtr)
  using: _54@Mir(bb13[2])
  _58 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _817 = _58 as *const () (PtrToPtr)
  using: _58@Mir(bb13[4])
  _818 = _817 as usize (Transmute)
  using: _817@Mir(bb13[5])
  _819 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _820 = Sub(_819, const 1_usize)
  using: _819@Mir(bb13[7])
  _821 = BitAnd(_818, _820)
  using: _818@Mir(bb13[6]), _820@Mir(bb13[8])
  _822 = Eq(_821, const 0_usize)
  using: _821@Mir(bb13[9])
  assert(_822, "misaligned pointer dereference: address must be a multiple of {} but is {}", _819, _818) -> [success: bb195, unwind unreachable]
  using: _822@Mir(bb13[10]), _819@Mir(bb13[7]), _818@Mir(bb13[6])
bb14:
  _60 = _7
  using: _7@Phi(bb1)
  _59 = core::num::<impl u64>::wrapping_add(move _60, const 1_u64) -> [return: bb15, unwind continue]
  using: _60@Mir(bb14[0])
bb15:
  _7 = move _59
  using: _59@Mir(bb14[1])
  goto -> bb1
  using: 
bb16:
  _811 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _812 = _811 as usize (Transmute)
  using: _811@Mir(bb16[0])
  _813 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _814 = Sub(_813, const 1_usize)
  using: _813@Mir(bb16[2])
  _815 = BitAnd(_812, _814)
  using: _812@Mir(bb16[1]), _814@Mir(bb16[3])
  _816 = Eq(_815, const 0_usize)
  using: _815@Mir(bb16[4])
  assert(_816, "misaligned pointer dereference: address must be a multiple of {} but is {}", _813, _812) -> [success: bb194, unwind unreachable]
  using: _816@Mir(bb16[5]), _813@Mir(bb16[2]), _812@Mir(bb16[1])
bb17:
  _66 = const b"    \x1b[0;31m\xe2\x94\x8a\x1b[0m\x00"
  using: 
  _65 = &raw const (*_66)
  using: _66@Mir(bb17[0])
  _64 = move _65 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _65@Mir(bb17[1])
  _62 = move _64 as *const i8 (PtrToPtr)
  using: _64@Mir(bb17[2])
  goto -> bb19
  using: 
bb18:
  _69 = const b"    \xe2\x94\x8a\x00"
  using: 
  _68 = &raw const (*_69)
  using: _69@Mir(bb18[0])
  _67 = move _68 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _68@Mir(bb18[1])
  _62 = move _67 as *const i8 (PtrToPtr)
  using: _67@Mir(bb18[2])
  goto -> bb19
  using: 
bb19:
  _61 = move _62 as *mut i8 (PtrToPtr)
  using: _62@Phi(bb19)
  _76 = std::mem::size_of::<[i8; 7]>() -> [return: bb20, unwind continue]
  using: 
bb20:
  _75 = move _76 as u64 (IntToInt)
  using: _76@Mir(bb19[1])
  _74 = core::num::<impl u64>::wrapping_mul(move _75, _1) -> [return: bb21, unwind continue]
  using: _75@Mir(bb20[0]), _1@Entry
bb21:
  _78 = _61 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _61@Mir(bb19[0])
  _77 = src::libtree::strlen(move _78) -> [return: bb22, unwind continue]
  using: _78@Mir(bb21[0])
bb22:
  _73 = core::num::<impl u64>::wrapping_add(move _74, move _77) -> [return: bb23, unwind continue]
  using: _74@Mir(bb20[1]), _77@Mir(bb21[1])
bb23:
  _80 = const 1_i32
  using: 
  _79 = move _80 as u64 (IntToInt)
  using: _80@Mir(bb23[0])
  _72 = core::num::<impl u64>::wrapping_add(move _73, move _79) -> [return: bb24, unwind continue]
  using: _73@Mir(bb22[0]), _79@Mir(bb23[1])
bb24:
  _71 = src::libtree::malloc(move _72) -> [return: bb25, unwind continue]
  using: _72@Mir(bb23[2])
bb25:
  _70 = move _71 as *mut i8 (PtrToPtr)
  using: _71@Mir(bb24[0])
  _81 = _70
  using: _70@Mir(bb25[0])
  _83 = const 0_i32
  using: 
  _82 = move _83 as u64 (IntToInt)
  using: _83@Mir(bb25[2])
  goto -> bb26
  using: 
bb26:
  _85 = _82
  using: _82@Phi(bb26)
  _84 = Lt(move _85, _1)
  using: _85@Mir(bb26[0]), _1@Entry
  switchInt(move _84) -> [0: bb41, otherwise: bb27]
  using: _84@Mir(bb26[1])
bb27:
  _88 = _82
  using: _82@Phi(bb26)
  _87 = move _88 as usize (IntToInt)
  using: _88@Mir(bb27[0])
  _805 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _806 = _805 as usize (Transmute)
  using: _805@Mir(bb27[2])
  _807 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _808 = Sub(_807, const 1_usize)
  using: _807@Mir(bb27[4])
  _809 = BitAnd(_806, _808)
  using: _806@Mir(bb27[3]), _808@Mir(bb27[5])
  _810 = Eq(_809, const 0_usize)
  using: _809@Mir(bb27[6])
  assert(_810, "misaligned pointer dereference: address must be a multiple of {} but is {}", _807, _806) -> [success: bb193, unwind unreachable]
  using: _810@Mir(bb27[7]), _807@Mir(bb27[4]), _806@Mir(bb27[3])
bb28:
  _799 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _800 = _799 as usize (Transmute)
  using: _799@Mir(bb28[0])
  _801 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _802 = Sub(_801, const 1_usize)
  using: _801@Mir(bb28[2])
  _803 = BitAnd(_800, _802)
  using: _800@Mir(bb28[1]), _802@Mir(bb28[3])
  _804 = Eq(_803, const 0_usize)
  using: _803@Mir(bb28[4])
  assert(_804, "misaligned pointer dereference: address must be a multiple of {} but is {}", _801, _800) -> [success: bb192, unwind unreachable]
  using: _804@Mir(bb28[5]), _801@Mir(bb28[2]), _800@Mir(bb28[1])
bb29:
  _94 = std::mem::size_of::<[i8; 5]>() -> [return: bb30, unwind continue]
  using: 
bb30:
  _93 = move _94 as u64 (IntToInt)
  using: _94@Mir(bb29[0])
  _96 = const 1_i32
  using: 
  _95 = move _96 as u64 (IntToInt)
  using: _96@Mir(bb30[1])
  _92 = core::num::<impl u64>::wrapping_sub(move _93, move _95) -> [return: bb31, unwind continue]
  using: _93@Mir(bb30[0]), _95@Mir(bb30[2])
bb31:
  _91 = move _92 as i32 (IntToInt)
  using: _92@Mir(bb30[3])
  _99 = _81
  using: _81@Phi(bb26)
  _98 = move _99 as *mut libc::c_void (PtrToPtr)
  using: _99@Mir(bb31[1])
  _104 = const b"    \x00"
  using: 
  _103 = &raw const (*_104)
  using: _104@Mir(bb31[3])
  _102 = move _103 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _103@Mir(bb31[4])
  _101 = move _102 as *const i8 (PtrToPtr)
  using: _102@Mir(bb31[5])
  _100 = move _101 as *const libc::c_void (PtrToPtr)
  using: _101@Mir(bb31[6])
  _105 = _91 as u64 (IntToInt)
  using: _91@Mir(bb31[0])
  _97 = src::libtree::memcpy(move _98, move _100, move _105) -> [return: bb32, unwind continue]
  using: _98@Mir(bb31[2]), _100@Mir(bb31[7]), _105@Mir(bb31[8])
bb32:
  _107 = _81
  using: _81@Phi(bb26)
  _108 = _91 as isize (IntToInt)
  using: _91@Mir(bb31[0])
  _106 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _107, move _108) -> [return: bb33, unwind continue]
  using: _107@Mir(bb32[0]), _108@Mir(bb32[1])
bb33:
  _81 = move _106
  using: _106@Mir(bb32[2])
  goto -> bb39
  using: 
bb34:
  _112 = std::mem::size_of::<[i8; 7]>() -> [return: bb35, unwind continue]
  using: 
bb35:
  _111 = move _112 as u64 (IntToInt)
  using: _112@Mir(bb34[0])
  _114 = const 1_i32
  using: 
  _113 = move _114 as u64 (IntToInt)
  using: _114@Mir(bb35[1])
  _110 = core::num::<impl u64>::wrapping_sub(move _111, move _113) -> [return: bb36, unwind continue]
  using: _111@Mir(bb35[0]), _113@Mir(bb35[2])
bb36:
  _109 = move _110 as i32 (IntToInt)
  using: _110@Mir(bb35[3])
  _117 = _81
  using: _81@Phi(bb26)
  _116 = move _117 as *mut libc::c_void (PtrToPtr)
  using: _117@Mir(bb36[1])
  _122 = const b"\xe2\x94\x82   \x00"
  using: 
  _121 = &raw const (*_122)
  using: _122@Mir(bb36[3])
  _120 = move _121 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _121@Mir(bb36[4])
  _119 = move _120 as *const i8 (PtrToPtr)
  using: _120@Mir(bb36[5])
  _118 = move _119 as *const libc::c_void (PtrToPtr)
  using: _119@Mir(bb36[6])
  _123 = _109 as u64 (IntToInt)
  using: _109@Mir(bb36[0])
  _115 = src::libtree::memcpy(move _116, move _118, move _123) -> [return: bb37, unwind continue]
  using: _116@Mir(bb36[2]), _118@Mir(bb36[7]), _123@Mir(bb36[8])
bb37:
  _125 = _81
  using: _81@Phi(bb26)
  _126 = _109 as isize (IntToInt)
  using: _109@Mir(bb36[0])
  _124 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _125, move _126) -> [return: bb38, unwind continue]
  using: _125@Mir(bb37[0]), _126@Mir(bb37[1])
bb38:
  _81 = move _124
  using: _124@Mir(bb37[2])
  goto -> bb39
  using: 
bb39:
  _128 = _82
  using: _82@Phi(bb26)
  _127 = core::num::<impl u64>::wrapping_add(move _128, const 1_u64) -> [return: bb40, unwind continue]
  using: _128@Mir(bb39[0])
bb40:
  _82 = move _127
  using: _127@Mir(bb39[1])
  goto -> bb26
  using: 
bb41:
  _130 = _81
  using: _81@Phi(bb26)
  _131 = _61 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _61@Mir(bb19[0])
  _129 = src::libtree::strcpy(move _130, move _131) -> [return: bb42, unwind continue]
  using: _130@Mir(bb41[0]), _131@Mir(bb41[1])
bb42:
  _133 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _135 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _793 = _135 as *const () (PtrToPtr)
  using: _135@Mir(bb42[1])
  _794 = _793 as usize (Transmute)
  using: _793@Mir(bb42[2])
  _795 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _796 = Sub(_795, const 1_usize)
  using: _795@Mir(bb42[4])
  _797 = BitAnd(_794, _796)
  using: _794@Mir(bb42[3]), _796@Mir(bb42[5])
  _798 = Eq(_797, const 0_usize)
  using: _797@Mir(bb42[6])
  assert(_798, "misaligned pointer dereference: address must be a multiple of {} but is {}", _795, _794) -> [success: bb191, unwind unreachable]
  using: _798@Mir(bb42[7]), _795@Mir(bb42[4]), _794@Mir(bb42[3])
bb43:
  _787 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _788 = _787 as usize (Transmute)
  using: _787@Mir(bb43[0])
  _789 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _790 = Sub(_789, const 1_usize)
  using: _789@Mir(bb43[2])
  _791 = BitAnd(_788, _790)
  using: _788@Mir(bb43[1]), _790@Mir(bb43[3])
  _792 = Eq(_791, const 0_usize)
  using: _791@Mir(bb43[4])
  assert(_792, "misaligned pointer dereference: address must be a multiple of {} but is {}", _789, _788) -> [success: bb190, unwind unreachable]
  using: _792@Mir(bb43[5]), _789@Mir(bb43[2]), _788@Mir(bb43[1])
bb44:
  _141 = const b"\x1b[0;90m\x00"
  using: 
  _140 = &raw const (*_141)
  using: _141@Mir(bb44[0])
  _139 = move _140 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _140@Mir(bb44[1])
  _138 = move _139 as *const i8 (PtrToPtr)
  using: _139@Mir(bb44[2])
  _143 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _781 = _143 as *const () (PtrToPtr)
  using: _143@Mir(bb44[4])
  _782 = _781 as usize (Transmute)
  using: _781@Mir(bb44[5])
  _783 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _784 = Sub(_783, const 1_usize)
  using: _783@Mir(bb44[7])
  _785 = BitAnd(_782, _784)
  using: _782@Mir(bb44[6]), _784@Mir(bb44[8])
  _786 = Eq(_785, const 0_usize)
  using: _785@Mir(bb44[9])
  assert(_786, "misaligned pointer dereference: address must be a multiple of {} but is {}", _783, _782) -> [success: bb189, unwind unreachable]
  using: _786@Mir(bb44[10]), _783@Mir(bb44[7]), _782@Mir(bb44[6])
bb45:
  _148 = const b" Paths considered in this order:\n\x00"
  using: 
  _147 = &raw const (*_148)
  using: _148@Mir(bb45[0])
  _146 = move _147 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _147@Mir(bb45[1])
  _145 = move _146 as *const i8 (PtrToPtr)
  using: _146@Mir(bb45[2])
  _150 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _775 = _150 as *const () (PtrToPtr)
  using: _150@Mir(bb45[4])
  _776 = _775 as usize (Transmute)
  using: _775@Mir(bb45[5])
  _777 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _778 = Sub(_777, const 1_usize)
  using: _777@Mir(bb45[7])
  _779 = BitAnd(_776, _778)
  using: _776@Mir(bb45[6]), _778@Mir(bb45[8])
  _780 = Eq(_779, const 0_usize)
  using: _779@Mir(bb45[9])
  assert(_780, "misaligned pointer dereference: address must be a multiple of {} but is {}", _777, _776) -> [success: bb188, unwind unreachable]
  using: _780@Mir(bb45[10]), _777@Mir(bb45[7]), _776@Mir(bb45[6])
bb46:
  _769 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _770 = _769 as usize (Transmute)
  using: _769@Mir(bb46[0])
  _771 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _772 = Sub(_771, const 1_usize)
  using: _771@Mir(bb46[2])
  _773 = BitAnd(_770, _772)
  using: _770@Mir(bb46[1]), _772@Mir(bb46[3])
  _774 = Eq(_773, const 0_usize)
  using: _773@Mir(bb46[4])
  assert(_774, "misaligned pointer dereference: address must be a multiple of {} but is {}", _771, _770) -> [success: bb187, unwind unreachable]
  using: _774@Mir(bb46[5]), _771@Mir(bb46[2]), _770@Mir(bb46[1])
bb47:
  _156 = const b"\x1b[0m\x00"
  using: 
  _155 = &raw const (*_156)
  using: _156@Mir(bb47[0])
  _154 = move _155 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _155@Mir(bb47[1])
  _153 = move _154 as *const i8 (PtrToPtr)
  using: _154@Mir(bb47[2])
  _158 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _763 = _158 as *const () (PtrToPtr)
  using: _158@Mir(bb47[4])
  _764 = _763 as usize (Transmute)
  using: _763@Mir(bb47[5])
  _765 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _766 = Sub(_765, const 1_usize)
  using: _765@Mir(bb47[7])
  _767 = BitAnd(_764, _766)
  using: _764@Mir(bb47[6]), _766@Mir(bb47[8])
  _768 = Eq(_767, const 0_usize)
  using: _767@Mir(bb47[9])
  assert(_768, "misaligned pointer dereference: address must be a multiple of {} but is {}", _765, _764) -> [success: bb186, unwind unreachable]
  using: _768@Mir(bb47[10]), _765@Mir(bb47[7]), _764@Mir(bb47[6])
bb48:
  _160 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _162 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _757 = _162 as *const () (PtrToPtr)
  using: _162@Mir(bb48[1])
  _758 = _757 as usize (Transmute)
  using: _757@Mir(bb48[2])
  _759 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _760 = Sub(_759, const 1_usize)
  using: _759@Mir(bb48[4])
  _761 = BitAnd(_758, _760)
  using: _758@Mir(bb48[3]), _760@Mir(bb48[5])
  _762 = Eq(_761, const 0_usize)
  using: _761@Mir(bb48[6])
  assert(_762, "misaligned pointer dereference: address must be a multiple of {} but is {}", _759, _758) -> [success: bb185, unwind unreachable]
  using: _762@Mir(bb48[7]), _759@Mir(bb48[4]), _758@Mir(bb48[3])
bb49:
  _163 = std::ptr::mut_ptr::<impl *mut i8>::is_null(_4) -> [return: bb50, unwind continue]
  using: _4@Entry
bb50:
  switchInt(move _163) -> [0: bb52, otherwise: bb51]
  using: _163@Mir(bb49[0])
bb51:
  _751 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _752 = _751 as usize (Transmute)
  using: _751@Mir(bb51[0])
  _753 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _754 = Sub(_753, const 1_usize)
  using: _753@Mir(bb51[2])
  _755 = BitAnd(_752, _754)
  using: _752@Mir(bb51[1]), _754@Mir(bb51[3])
  _756 = Eq(_755, const 0_usize)
  using: _755@Mir(bb51[4])
  assert(_756, "misaligned pointer dereference: address must be a multiple of {} but is {}", _753, _752) -> [success: bb184, unwind unreachable]
  using: _756@Mir(bb51[5]), _753@Mir(bb51[2]), _752@Mir(bb51[1])
bb52:
  _745 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _746 = _745 as usize (Transmute)
  using: _745@Mir(bb52[0])
  _747 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _748 = Sub(_747, const 1_usize)
  using: _747@Mir(bb52[2])
  _749 = BitAnd(_746, _748)
  using: _746@Mir(bb52[1]), _748@Mir(bb52[3])
  _750 = Eq(_749, const 0_usize)
  using: _749@Mir(bb52[4])
  assert(_750, "misaligned pointer dereference: address must be a multiple of {} but is {}", _747, _746) -> [success: bb183, unwind unreachable]
  using: _750@Mir(bb52[5]), _747@Mir(bb52[2]), _746@Mir(bb52[1])
bb53:
  _169 = const b"\x1b[0;90m\x00"
  using: 
  _168 = &raw const (*_169)
  using: _169@Mir(bb53[0])
  _167 = move _168 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _168@Mir(bb53[1])
  _166 = move _167 as *const i8 (PtrToPtr)
  using: _167@Mir(bb53[2])
  _171 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _739 = _171 as *const () (PtrToPtr)
  using: _171@Mir(bb53[4])
  _740 = _739 as usize (Transmute)
  using: _739@Mir(bb53[5])
  _741 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _742 = Sub(_741, const 1_usize)
  using: _741@Mir(bb53[7])
  _743 = BitAnd(_740, _742)
  using: _740@Mir(bb53[6]), _742@Mir(bb53[8])
  _744 = Eq(_743, const 0_usize)
  using: _743@Mir(bb53[9])
  assert(_744, "misaligned pointer dereference: address must be a multiple of {} but is {}", _741, _740) -> [success: bb182, unwind unreachable]
  using: _744@Mir(bb53[10]), _741@Mir(bb53[7]), _740@Mir(bb53[6])
bb54:
  _176 = const b" 1. rpath is skipped because runpath was set\n\x00"
  using: 
  _175 = &raw const (*_176)
  using: _176@Mir(bb54[0])
  _174 = move _175 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _175@Mir(bb54[1])
  _173 = move _174 as *const i8 (PtrToPtr)
  using: _174@Mir(bb54[2])
  _178 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _733 = _178 as *const () (PtrToPtr)
  using: _178@Mir(bb54[4])
  _734 = _733 as usize (Transmute)
  using: _733@Mir(bb54[5])
  _735 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _736 = Sub(_735, const 1_usize)
  using: _735@Mir(bb54[7])
  _737 = BitAnd(_734, _736)
  using: _734@Mir(bb54[6]), _736@Mir(bb54[8])
  _738 = Eq(_737, const 0_usize)
  using: _737@Mir(bb54[9])
  assert(_738, "misaligned pointer dereference: address must be a multiple of {} but is {}", _735, _734) -> [success: bb181, unwind unreachable]
  using: _738@Mir(bb54[10]), _735@Mir(bb54[7]), _734@Mir(bb54[6])
bb55:
  _727 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _728 = _727 as usize (Transmute)
  using: _727@Mir(bb55[0])
  _729 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _730 = Sub(_729, const 1_usize)
  using: _729@Mir(bb55[2])
  _731 = BitAnd(_728, _730)
  using: _728@Mir(bb55[1]), _730@Mir(bb55[3])
  _732 = Eq(_731, const 0_usize)
  using: _731@Mir(bb55[4])
  assert(_732, "misaligned pointer dereference: address must be a multiple of {} but is {}", _729, _728) -> [success: bb180, unwind unreachable]
  using: _732@Mir(bb55[5]), _729@Mir(bb55[2]), _728@Mir(bb55[1])
bb56:
  _184 = const b"\x1b[0m\x00"
  using: 
  _183 = &raw const (*_184)
  using: _184@Mir(bb56[0])
  _182 = move _183 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _183@Mir(bb56[1])
  _181 = move _182 as *const i8 (PtrToPtr)
  using: _182@Mir(bb56[2])
  _186 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _721 = _186 as *const () (PtrToPtr)
  using: _186@Mir(bb56[4])
  _722 = _721 as usize (Transmute)
  using: _721@Mir(bb56[5])
  _723 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _724 = Sub(_723, const 1_usize)
  using: _723@Mir(bb56[7])
  _725 = BitAnd(_722, _724)
  using: _722@Mir(bb56[6]), _724@Mir(bb56[8])
  _726 = Eq(_725, const 0_usize)
  using: _725@Mir(bb56[9])
  assert(_726, "misaligned pointer dereference: address must be a multiple of {} but is {}", _723, _722) -> [success: bb179, unwind unreachable]
  using: _726@Mir(bb56[10]), _723@Mir(bb56[7]), _722@Mir(bb56[6])
bb57:
  _192 = const b"\x1b[0;90m\x00"
  using: 
  _191 = &raw const (*_192)
  using: _192@Mir(bb57[0])
  _190 = move _191 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _191@Mir(bb57[1])
  _189 = move _190 as *const i8 (PtrToPtr)
  using: _190@Mir(bb57[2])
  _194 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _715 = _194 as *const () (PtrToPtr)
  using: _194@Mir(bb57[4])
  _716 = _715 as usize (Transmute)
  using: _715@Mir(bb57[5])
  _717 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _718 = Sub(_717, const 1_usize)
  using: _717@Mir(bb57[7])
  _719 = BitAnd(_716, _718)
  using: _716@Mir(bb57[6]), _718@Mir(bb57[8])
  _720 = Eq(_719, const 0_usize)
  using: _719@Mir(bb57[9])
  assert(_720, "misaligned pointer dereference: address must be a multiple of {} but is {}", _717, _716) -> [success: bb178, unwind unreachable]
  using: _720@Mir(bb57[10]), _717@Mir(bb57[7]), _716@Mir(bb57[6])
bb58:
  _199 = const b" 1. rpath:\n\x00"
  using: 
  _198 = &raw const (*_199)
  using: _199@Mir(bb58[0])
  _197 = move _198 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _198@Mir(bb58[1])
  _196 = move _197 as *const i8 (PtrToPtr)
  using: _197@Mir(bb58[2])
  _201 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _709 = _201 as *const () (PtrToPtr)
  using: _201@Mir(bb58[4])
  _710 = _709 as usize (Transmute)
  using: _709@Mir(bb58[5])
  _711 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _712 = Sub(_711, const 1_usize)
  using: _711@Mir(bb58[7])
  _713 = BitAnd(_710, _712)
  using: _710@Mir(bb58[6]), _712@Mir(bb58[8])
  _714 = Eq(_713, const 0_usize)
  using: _713@Mir(bb58[9])
  assert(_714, "misaligned pointer dereference: address must be a multiple of {} but is {}", _711, _710) -> [success: bb177, unwind unreachable]
  using: _714@Mir(bb58[10]), _711@Mir(bb58[7]), _710@Mir(bb58[6])
bb59:
  _703 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _704 = _703 as usize (Transmute)
  using: _703@Mir(bb59[0])
  _705 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _706 = Sub(_705, const 1_usize)
  using: _705@Mir(bb59[2])
  _707 = BitAnd(_704, _706)
  using: _704@Mir(bb59[1]), _706@Mir(bb59[3])
  _708 = Eq(_707, const 0_usize)
  using: _707@Mir(bb59[4])
  assert(_708, "misaligned pointer dereference: address must be a multiple of {} but is {}", _705, _704) -> [success: bb176, unwind unreachable]
  using: _708@Mir(bb59[5]), _705@Mir(bb59[2]), _704@Mir(bb59[1])
bb60:
  _207 = const b"\x1b[0m\x00"
  using: 
  _206 = &raw const (*_207)
  using: _207@Mir(bb60[0])
  _205 = move _206 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _206@Mir(bb60[1])
  _204 = move _205 as *const i8 (PtrToPtr)
  using: _205@Mir(bb60[2])
  _209 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _697 = _209 as *const () (PtrToPtr)
  using: _209@Mir(bb60[4])
  _698 = _697 as usize (Transmute)
  using: _697@Mir(bb60[5])
  _699 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _700 = Sub(_699, const 1_usize)
  using: _699@Mir(bb60[7])
  _701 = BitAnd(_698, _700)
  using: _698@Mir(bb60[6]), _700@Mir(bb60[8])
  _702 = Eq(_701, const 0_usize)
  using: _701@Mir(bb60[9])
  assert(_702, "misaligned pointer dereference: address must be a multiple of {} but is {}", _699, _698) -> [success: bb175, unwind unreachable]
  using: _702@Mir(bb60[10]), _699@Mir(bb60[7]), _698@Mir(bb60[6])
bb61:
  _210 = _1 as i32 (IntToInt)
  using: _1@Entry
  goto -> bb62
  using: 
bb62:
  _212 = _210
  using: _210@Phi(bb62)
  _213 = const 0_i32
  using: 
  _211 = Ge(move _212, move _213)
  using: _212@Mir(bb62[0]), _213@Mir(bb62[1])
  switchInt(move _211) -> [0: bb82, otherwise: bb63]
  using: _211@Mir(bb62[2])
bb63:
  _217 = _210
  using: _210@Phi(bb62)
  _216 = move _217 as usize (IntToInt)
  using: _217@Mir(bb63[0])
  _691 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _692 = _691 as usize (Transmute)
  using: _691@Mir(bb63[2])
  _693 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _694 = Sub(_693, const 1_usize)
  using: _693@Mir(bb63[4])
  _695 = BitAnd(_692, _694)
  using: _692@Mir(bb63[3]), _694@Mir(bb63[5])
  _696 = Eq(_695, const 0_usize)
  using: _695@Mir(bb63[6])
  assert(_696, "misaligned pointer dereference: address must be a multiple of {} but is {}", _693, _692) -> [success: bb174, unwind unreachable]
  using: _696@Mir(bb63[7]), _693@Mir(bb63[4]), _692@Mir(bb63[3])
bb64:
  _685 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _686 = _685 as usize (Transmute)
  using: _685@Mir(bb64[0])
  _687 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _688 = Sub(_687, const 1_usize)
  using: _687@Mir(bb64[2])
  _689 = BitAnd(_686, _688)
  using: _686@Mir(bb64[1]), _688@Mir(bb64[3])
  _690 = Eq(_689, const 0_usize)
  using: _689@Mir(bb64[4])
  assert(_690, "misaligned pointer dereference: address must be a multiple of {} but is {}", _687, _686) -> [success: bb173, unwind unreachable]
  using: _690@Mir(bb64[5]), _687@Mir(bb64[2]), _686@Mir(bb64[1])
bb65:
  _221 = [const 0_i8; 8]
  using: 
  _225 = &mut _221
  using: _221@Mir(bb65[0])
  _224 = move _225 as &mut [i8] (PointerCoercion(Unsize))
  using: _225@Mir(bb65[1])
  _223 = core::slice::<impl [i8]>::as_mut_ptr(move _224) -> [return: bb66, unwind continue]
  using: _224@Mir(bb65[2])
bb66:
  _228 = _210
  using: _210@Phi(bb62)
  _229 = const 1_i32
  using: 
  _230 = CheckedAdd(_228, _229)
  using: _228@Mir(bb66[0]), _229@Mir(bb66[1])
  assert(!move (_230.1: bool), "attempt to compute `{} + {}`, which would overflow", move _228, move _229) -> [success: bb67, unwind continue]
  using: _230@Mir(bb66[2]), _228@Mir(bb66[0]), _229@Mir(bb66[1])
bb67:
  _227 = move (_230.0: i32)
  using: _230@Mir(bb66[2])
  _226 = move _227 as u64 (IntToInt)
  using: _227@Mir(bb67[0])
  _222 = src::libtree::utoa(move _223, move _226) -> [return: bb68, unwind continue]
  using: _223@Mir(bb65[3]), _226@Mir(bb67[1])
bb68:
  _232 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _234 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _679 = _234 as *const () (PtrToPtr)
  using: _234@Mir(bb68[1])
  _680 = _679 as usize (Transmute)
  using: _679@Mir(bb68[2])
  _681 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _682 = Sub(_681, const 1_usize)
  using: _681@Mir(bb68[4])
  _683 = BitAnd(_680, _682)
  using: _680@Mir(bb68[3]), _682@Mir(bb68[5])
  _684 = Eq(_683, const 0_usize)
  using: _683@Mir(bb68[6])
  assert(_684, "misaligned pointer dereference: address must be a multiple of {} but is {}", _681, _680) -> [success: bb172, unwind unreachable]
  using: _684@Mir(bb68[7]), _681@Mir(bb68[4]), _680@Mir(bb68[3])
bb69:
  _673 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _674 = _673 as usize (Transmute)
  using: _673@Mir(bb69[0])
  _675 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _676 = Sub(_675, const 1_usize)
  using: _675@Mir(bb69[2])
  _677 = BitAnd(_674, _676)
  using: _674@Mir(bb69[1]), _676@Mir(bb69[3])
  _678 = Eq(_677, const 0_usize)
  using: _677@Mir(bb69[4])
  assert(_678, "misaligned pointer dereference: address must be a multiple of {} but is {}", _675, _674) -> [success: bb171, unwind unreachable]
  using: _678@Mir(bb69[5]), _675@Mir(bb69[2]), _674@Mir(bb69[1])
bb70:
  _240 = const b"\x1b[0;90m\x00"
  using: 
  _239 = &raw const (*_240)
  using: _240@Mir(bb70[0])
  _238 = move _239 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _239@Mir(bb70[1])
  _237 = move _238 as *const i8 (PtrToPtr)
  using: _238@Mir(bb70[2])
  _242 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _667 = _242 as *const () (PtrToPtr)
  using: _242@Mir(bb70[4])
  _668 = _667 as usize (Transmute)
  using: _667@Mir(bb70[5])
  _669 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _670 = Sub(_669, const 1_usize)
  using: _669@Mir(bb70[7])
  _671 = BitAnd(_668, _670)
  using: _668@Mir(bb70[6]), _670@Mir(bb70[8])
  _672 = Eq(_671, const 0_usize)
  using: _671@Mir(bb70[9])
  assert(_672, "misaligned pointer dereference: address must be a multiple of {} but is {}", _669, _668) -> [success: bb170, unwind unreachable]
  using: _672@Mir(bb70[10]), _669@Mir(bb70[7]), _668@Mir(bb70[6])
bb71:
  _247 = const b"    depth \x00"
  using: 
  _246 = &raw const (*_247)
  using: _247@Mir(bb71[0])
  _245 = move _246 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _246@Mir(bb71[1])
  _244 = move _245 as *const i8 (PtrToPtr)
  using: _245@Mir(bb71[2])
  _249 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _661 = _249 as *const () (PtrToPtr)
  using: _249@Mir(bb71[4])
  _662 = _661 as usize (Transmute)
  using: _661@Mir(bb71[5])
  _663 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _664 = Sub(_663, const 1_usize)
  using: _663@Mir(bb71[7])
  _665 = BitAnd(_662, _664)
  using: _662@Mir(bb71[6]), _664@Mir(bb71[8])
  _666 = Eq(_665, const 0_usize)
  using: _665@Mir(bb71[9])
  assert(_666, "misaligned pointer dereference: address must be a multiple of {} but is {}", _663, _662) -> [success: bb169, unwind unreachable]
  using: _666@Mir(bb71[10]), _663@Mir(bb71[7]), _662@Mir(bb71[6])
bb72:
  _254 = &mut _221
  using: _221@Mir(bb65[0])
  _253 = move _254 as &mut [i8] (PointerCoercion(Unsize))
  using: _254@Mir(bb72[0])
  _252 = core::slice::<impl [i8]>::as_mut_ptr(move _253) -> [return: bb73, unwind continue]
  using: _253@Mir(bb72[1])
bb73:
  _251 = move _252 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _252@Mir(bb72[2])
  _256 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _655 = _256 as *const () (PtrToPtr)
  using: _256@Mir(bb73[1])
  _656 = _655 as usize (Transmute)
  using: _655@Mir(bb73[2])
  _657 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _658 = Sub(_657, const 1_usize)
  using: _657@Mir(bb73[4])
  _659 = BitAnd(_656, _658)
  using: _656@Mir(bb73[3]), _658@Mir(bb73[5])
  _660 = Eq(_659, const 0_usize)
  using: _659@Mir(bb73[6])
  assert(_660, "misaligned pointer dereference: address must be a multiple of {} but is {}", _657, _656) -> [success: bb168, unwind unreachable]
  using: _660@Mir(bb73[7]), _657@Mir(bb73[4]), _656@Mir(bb73[3])
bb74:
  _649 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _650 = _649 as usize (Transmute)
  using: _649@Mir(bb74[0])
  _651 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _652 = Sub(_651, const 1_usize)
  using: _651@Mir(bb74[2])
  _653 = BitAnd(_650, _652)
  using: _650@Mir(bb74[1]), _652@Mir(bb74[3])
  _654 = Eq(_653, const 0_usize)
  using: _653@Mir(bb74[4])
  assert(_654, "misaligned pointer dereference: address must be a multiple of {} but is {}", _651, _650) -> [success: bb167, unwind unreachable]
  using: _654@Mir(bb74[5]), _651@Mir(bb74[2]), _650@Mir(bb74[1])
bb75:
  _262 = const b"\x1b[0m\x00"
  using: 
  _261 = &raw const (*_262)
  using: _262@Mir(bb75[0])
  _260 = move _261 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _261@Mir(bb75[1])
  _259 = move _260 as *const i8 (PtrToPtr)
  using: _260@Mir(bb75[2])
  _264 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _643 = _264 as *const () (PtrToPtr)
  using: _264@Mir(bb75[4])
  _644 = _643 as usize (Transmute)
  using: _643@Mir(bb75[5])
  _645 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _646 = Sub(_645, const 1_usize)
  using: _645@Mir(bb75[7])
  _647 = BitAnd(_644, _646)
  using: _644@Mir(bb75[6]), _646@Mir(bb75[8])
  _648 = Eq(_647, const 0_usize)
  using: _647@Mir(bb75[9])
  assert(_648, "misaligned pointer dereference: address must be a multiple of {} but is {}", _645, _644) -> [success: bb166, unwind unreachable]
  using: _648@Mir(bb75[10]), _645@Mir(bb75[7]), _644@Mir(bb75[6])
bb76:
  _266 = const '\n' as i32 (IntToInt)
  using: 
  _265 = src::libtree::putchar(move _266) -> [return: bb77, unwind continue]
  using: _266@Mir(bb76[0])
bb77:
  _637 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _638 = _637 as usize (Transmute)
  using: _637@Mir(bb77[0])
  _639 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _640 = Sub(_639, const 1_usize)
  using: _639@Mir(bb77[2])
  _641 = BitAnd(_638, _640)
  using: _638@Mir(bb77[1]), _640@Mir(bb77[3])
  _642 = Eq(_641, const 0_usize)
  using: _641@Mir(bb77[4])
  assert(_642, "misaligned pointer dereference: address must be a multiple of {} but is {}", _639, _638) -> [success: bb165, unwind unreachable]
  using: _642@Mir(bb77[5]), _639@Mir(bb77[2]), _638@Mir(bb77[1])
bb78:
  _625 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _626 = _625 as usize (Transmute)
  using: _625@Mir(bb78[0])
  _627 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _628 = Sub(_627, const 1_usize)
  using: _627@Mir(bb78[2])
  _629 = BitAnd(_626, _628)
  using: _626@Mir(bb78[1]), _628@Mir(bb78[3])
  _630 = Eq(_629, const 0_usize)
  using: _629@Mir(bb78[4])
  assert(_630, "misaligned pointer dereference: address must be a multiple of {} but is {}", _627, _626) -> [success: bb163, unwind unreachable]
  using: _630@Mir(bb78[5]), _627@Mir(bb78[2]), _626@Mir(bb78[1])
bb79:
  _268 = move _269 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _269@Mir(bb163[2])
  _277 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _267 = src::libtree::print_colon_delimited_paths(move _268, move _277) -> [return: bb80, unwind continue]
  using: _268@Mir(bb79[0]), _277@Mir(bb79[1])
bb80:
  _278 = CheckedSub(_210, const 1_i32)
  using: _210@Phi(bb62)
  assert(!move (_278.1: bool), "attempt to compute `{} - {}`, which would overflow", _210, const 1_i32) -> [success: bb81, unwind continue]
  using: _278@Mir(bb80[0]), _210@Phi(bb62)
bb81:
  _210 = move (_278.0: i32)
  using: _278@Mir(bb80[0])
  goto -> bb62
  using: 
bb82:
  _280 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _282 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _619 = _282 as *const () (PtrToPtr)
  using: _282@Mir(bb82[1])
  _620 = _619 as usize (Transmute)
  using: _619@Mir(bb82[2])
  _621 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _622 = Sub(_621, const 1_usize)
  using: _621@Mir(bb82[4])
  _623 = BitAnd(_620, _622)
  using: _620@Mir(bb82[3]), _622@Mir(bb82[5])
  _624 = Eq(_623, const 0_usize)
  using: _623@Mir(bb82[6])
  assert(_624, "misaligned pointer dereference: address must be a multiple of {} but is {}", _621, _620) -> [success: bb162, unwind unreachable]
  using: _624@Mir(bb82[7]), _621@Mir(bb82[4]), _620@Mir(bb82[3])
bb83:
  _613 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _614 = _613 as usize (Transmute)
  using: _613@Mir(bb83[0])
  _615 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _616 = Sub(_615, const 1_usize)
  using: _615@Mir(bb83[2])
  _617 = BitAnd(_614, _616)
  using: _614@Mir(bb83[1]), _616@Mir(bb83[3])
  _618 = Eq(_617, const 0_usize)
  using: _617@Mir(bb83[4])
  assert(_618, "misaligned pointer dereference: address must be a multiple of {} but is {}", _615, _614) -> [success: bb161, unwind unreachable]
  using: _618@Mir(bb83[5]), _615@Mir(bb83[2]), _614@Mir(bb83[1])
bb84:
  _288 = const b"\x1b[0;90m\x00"
  using: 
  _287 = &raw const (*_288)
  using: _288@Mir(bb84[0])
  _286 = move _287 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _287@Mir(bb84[1])
  _285 = move _286 as *const i8 (PtrToPtr)
  using: _286@Mir(bb84[2])
  _290 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _607 = _290 as *const () (PtrToPtr)
  using: _290@Mir(bb84[4])
  _608 = _607 as usize (Transmute)
  using: _607@Mir(bb84[5])
  _609 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _610 = Sub(_609, const 1_usize)
  using: _609@Mir(bb84[7])
  _611 = BitAnd(_608, _610)
  using: _608@Mir(bb84[6]), _610@Mir(bb84[8])
  _612 = Eq(_611, const 0_usize)
  using: _611@Mir(bb84[9])
  assert(_612, "misaligned pointer dereference: address must be a multiple of {} but is {}", _609, _608) -> [success: bb160, unwind unreachable]
  using: _612@Mir(bb84[10]), _609@Mir(bb84[7]), _608@Mir(bb84[6])
bb85:
  _601 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _602 = _601 as usize (Transmute)
  using: _601@Mir(bb85[0])
  _603 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _604 = Sub(_603, const 1_usize)
  using: _603@Mir(bb85[2])
  _605 = BitAnd(_602, _604)
  using: _602@Mir(bb85[1]), _604@Mir(bb85[3])
  _606 = Eq(_605, const 0_usize)
  using: _605@Mir(bb85[4])
  assert(_606, "misaligned pointer dereference: address must be a multiple of {} but is {}", _603, _602) -> [success: bb159, unwind unreachable]
  using: _606@Mir(bb85[5]), _603@Mir(bb85[2]), _602@Mir(bb85[1])
bb86:
  _298 = const b" 2. LD_LIBRARY_PATH was not set\n\x00"
  using: 
  _297 = &raw const (*_298)
  using: _298@Mir(bb86[0])
  _296 = move _297 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _297@Mir(bb86[1])
  _292 = move _296 as *const i8 (PtrToPtr)
  using: _296@Mir(bb86[2])
  goto -> bb88
  using: 
bb87:
  _301 = const b" 2. LD_LIBRARY_PATH:\n\x00"
  using: 
  _300 = &raw const (*_301)
  using: _301@Mir(bb87[0])
  _299 = move _300 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _300@Mir(bb87[1])
  _292 = move _299 as *const i8 (PtrToPtr)
  using: _299@Mir(bb87[2])
  goto -> bb88
  using: 
bb88:
  _303 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _595 = _303 as *const () (PtrToPtr)
  using: _303@Mir(bb88[0])
  _596 = _595 as usize (Transmute)
  using: _595@Mir(bb88[1])
  _597 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _598 = Sub(_597, const 1_usize)
  using: _597@Mir(bb88[3])
  _599 = BitAnd(_596, _598)
  using: _596@Mir(bb88[2]), _598@Mir(bb88[4])
  _600 = Eq(_599, const 0_usize)
  using: _599@Mir(bb88[5])
  assert(_600, "misaligned pointer dereference: address must be a multiple of {} but is {}", _597, _596) -> [success: bb158, unwind unreachable]
  using: _600@Mir(bb88[6]), _597@Mir(bb88[3]), _596@Mir(bb88[2])
bb89:
  _589 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _590 = _589 as usize (Transmute)
  using: _589@Mir(bb89[0])
  _591 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _592 = Sub(_591, const 1_usize)
  using: _591@Mir(bb89[2])
  _593 = BitAnd(_590, _592)
  using: _590@Mir(bb89[1]), _592@Mir(bb89[3])
  _594 = Eq(_593, const 0_usize)
  using: _593@Mir(bb89[4])
  assert(_594, "misaligned pointer dereference: address must be a multiple of {} but is {}", _591, _590) -> [success: bb157, unwind unreachable]
  using: _594@Mir(bb89[5]), _591@Mir(bb89[2]), _590@Mir(bb89[1])
bb90:
  _309 = const b"\x1b[0m\x00"
  using: 
  _308 = &raw const (*_309)
  using: _309@Mir(bb90[0])
  _307 = move _308 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _308@Mir(bb90[1])
  _306 = move _307 as *const i8 (PtrToPtr)
  using: _307@Mir(bb90[2])
  _311 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _583 = _311 as *const () (PtrToPtr)
  using: _311@Mir(bb90[4])
  _584 = _583 as usize (Transmute)
  using: _583@Mir(bb90[5])
  _585 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _586 = Sub(_585, const 1_usize)
  using: _585@Mir(bb90[7])
  _587 = BitAnd(_584, _586)
  using: _584@Mir(bb90[6]), _586@Mir(bb90[8])
  _588 = Eq(_587, const 0_usize)
  using: _587@Mir(bb90[9])
  assert(_588, "misaligned pointer dereference: address must be a multiple of {} but is {}", _585, _584) -> [success: bb156, unwind unreachable]
  using: _588@Mir(bb90[10]), _585@Mir(bb90[7]), _584@Mir(bb90[6])
bb91:
  _577 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _578 = _577 as usize (Transmute)
  using: _577@Mir(bb91[0])
  _579 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _580 = Sub(_579, const 1_usize)
  using: _579@Mir(bb91[2])
  _581 = BitAnd(_578, _580)
  using: _578@Mir(bb91[1]), _580@Mir(bb91[3])
  _582 = Eq(_581, const 0_usize)
  using: _581@Mir(bb91[4])
  assert(_582, "misaligned pointer dereference: address must be a multiple of {} but is {}", _579, _578) -> [success: bb155, unwind unreachable]
  using: _582@Mir(bb91[5]), _579@Mir(bb91[2]), _578@Mir(bb91[1])
bb92:
  _571 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _572 = _571 as usize (Transmute)
  using: _571@Mir(bb92[0])
  _573 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _574 = Sub(_573, const 1_usize)
  using: _573@Mir(bb92[2])
  _575 = BitAnd(_572, _574)
  using: _572@Mir(bb92[1]), _574@Mir(bb92[3])
  _576 = Eq(_575, const 0_usize)
  using: _575@Mir(bb92[4])
  assert(_576, "misaligned pointer dereference: address must be a multiple of {} but is {}", _573, _572) -> [success: bb154, unwind unreachable]
  using: _576@Mir(bb92[5]), _573@Mir(bb92[2]), _572@Mir(bb92[1])
bb93:
  _316 = move _317 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _317@Mir(bb153[2])
  _321 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _315 = src::libtree::print_colon_delimited_paths(move _316, move _321) -> [return: bb94, unwind continue]
  using: _316@Mir(bb93[0]), _321@Mir(bb93[1])
bb94:
  _323 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _325 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _559 = _325 as *const () (PtrToPtr)
  using: _325@Mir(bb94[1])
  _560 = _559 as usize (Transmute)
  using: _559@Mir(bb94[2])
  _561 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _562 = Sub(_561, const 1_usize)
  using: _561@Mir(bb94[4])
  _563 = BitAnd(_560, _562)
  using: _560@Mir(bb94[3]), _562@Mir(bb94[5])
  _564 = Eq(_563, const 0_usize)
  using: _563@Mir(bb94[6])
  assert(_564, "misaligned pointer dereference: address must be a multiple of {} but is {}", _561, _560) -> [success: bb152, unwind unreachable]
  using: _564@Mir(bb94[7]), _561@Mir(bb94[4]), _560@Mir(bb94[3])
bb95:
  _553 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _554 = _553 as usize (Transmute)
  using: _553@Mir(bb95[0])
  _555 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _556 = Sub(_555, const 1_usize)
  using: _555@Mir(bb95[2])
  _557 = BitAnd(_554, _556)
  using: _554@Mir(bb95[1]), _556@Mir(bb95[3])
  _558 = Eq(_557, const 0_usize)
  using: _557@Mir(bb95[4])
  assert(_558, "misaligned pointer dereference: address must be a multiple of {} but is {}", _555, _554) -> [success: bb151, unwind unreachable]
  using: _558@Mir(bb95[5]), _555@Mir(bb95[2]), _554@Mir(bb95[1])
bb96:
  _331 = const b"\x1b[0;90m\x00"
  using: 
  _330 = &raw const (*_331)
  using: _331@Mir(bb96[0])
  _329 = move _330 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _330@Mir(bb96[1])
  _328 = move _329 as *const i8 (PtrToPtr)
  using: _329@Mir(bb96[2])
  _333 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _547 = _333 as *const () (PtrToPtr)
  using: _333@Mir(bb96[4])
  _548 = _547 as usize (Transmute)
  using: _547@Mir(bb96[5])
  _549 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _550 = Sub(_549, const 1_usize)
  using: _549@Mir(bb96[7])
  _551 = BitAnd(_548, _550)
  using: _548@Mir(bb96[6]), _550@Mir(bb96[8])
  _552 = Eq(_551, const 0_usize)
  using: _551@Mir(bb96[9])
  assert(_552, "misaligned pointer dereference: address must be a multiple of {} but is {}", _549, _548) -> [success: bb150, unwind unreachable]
  using: _552@Mir(bb96[10]), _549@Mir(bb96[7]), _548@Mir(bb96[6])
bb97:
  _336 = std::ptr::mut_ptr::<impl *mut i8>::is_null(_4) -> [return: bb98, unwind continue]
  using: _4@Entry
bb98:
  switchInt(move _336) -> [0: bb100, otherwise: bb99]
  using: _336@Mir(bb97[0])
bb99:
  _339 = const b" 3. runpath was not set\n\x00"
  using: 
  _338 = &raw const (*_339)
  using: _339@Mir(bb99[0])
  _337 = move _338 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _338@Mir(bb99[1])
  _335 = move _337 as *const i8 (PtrToPtr)
  using: _337@Mir(bb99[2])
  goto -> bb101
  using: 
bb100:
  _342 = const b" 3. runpath:\n\x00"
  using: 
  _341 = &raw const (*_342)
  using: _342@Mir(bb100[0])
  _340 = move _341 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _341@Mir(bb100[1])
  _335 = move _340 as *const i8 (PtrToPtr)
  using: _340@Mir(bb100[2])
  goto -> bb101
  using: 
bb101:
  _344 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _541 = _344 as *const () (PtrToPtr)
  using: _344@Mir(bb101[0])
  _542 = _541 as usize (Transmute)
  using: _541@Mir(bb101[1])
  _543 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _544 = Sub(_543, const 1_usize)
  using: _543@Mir(bb101[3])
  _545 = BitAnd(_542, _544)
  using: _542@Mir(bb101[2]), _544@Mir(bb101[4])
  _546 = Eq(_545, const 0_usize)
  using: _545@Mir(bb101[5])
  assert(_546, "misaligned pointer dereference: address must be a multiple of {} but is {}", _543, _542) -> [success: bb149, unwind unreachable]
  using: _546@Mir(bb101[6]), _543@Mir(bb101[3]), _542@Mir(bb101[2])
bb102:
  _535 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _536 = _535 as usize (Transmute)
  using: _535@Mir(bb102[0])
  _537 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _538 = Sub(_537, const 1_usize)
  using: _537@Mir(bb102[2])
  _539 = BitAnd(_536, _538)
  using: _536@Mir(bb102[1]), _538@Mir(bb102[3])
  _540 = Eq(_539, const 0_usize)
  using: _539@Mir(bb102[4])
  assert(_540, "misaligned pointer dereference: address must be a multiple of {} but is {}", _537, _536) -> [success: bb148, unwind unreachable]
  using: _540@Mir(bb102[5]), _537@Mir(bb102[2]), _536@Mir(bb102[1])
bb103:
  _350 = const b"\x1b[0m\x00"
  using: 
  _349 = &raw const (*_350)
  using: _350@Mir(bb103[0])
  _348 = move _349 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _349@Mir(bb103[1])
  _347 = move _348 as *const i8 (PtrToPtr)
  using: _348@Mir(bb103[2])
  _352 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _529 = _352 as *const () (PtrToPtr)
  using: _352@Mir(bb103[4])
  _530 = _529 as usize (Transmute)
  using: _529@Mir(bb103[5])
  _531 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _532 = Sub(_531, const 1_usize)
  using: _531@Mir(bb103[7])
  _533 = BitAnd(_530, _532)
  using: _530@Mir(bb103[6]), _532@Mir(bb103[8])
  _534 = Eq(_533, const 0_usize)
  using: _533@Mir(bb103[9])
  assert(_534, "misaligned pointer dereference: address must be a multiple of {} but is {}", _531, _530) -> [success: bb147, unwind unreachable]
  using: _534@Mir(bb103[10]), _531@Mir(bb103[7]), _530@Mir(bb103[6])
bb104:
  _353 = std::ptr::mut_ptr::<impl *mut i8>::is_null(_4) -> [return: bb105, unwind continue]
  using: _4@Entry
bb105:
  switchInt(move _353) -> [0: bb106, otherwise: bb107]
  using: _353@Mir(bb104[0])
bb106:
  _355 = _4 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _4@Entry
  _356 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _354 = src::libtree::print_colon_delimited_paths(move _355, move _356) -> [return: bb107, unwind continue]
  using: _355@Mir(bb106[0]), _356@Mir(bb106[1])
bb107:
  _358 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _360 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _523 = _360 as *const () (PtrToPtr)
  using: _360@Mir(bb107[1])
  _524 = _523 as usize (Transmute)
  using: _523@Mir(bb107[2])
  _525 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _526 = Sub(_525, const 1_usize)
  using: _525@Mir(bb107[4])
  _527 = BitAnd(_524, _526)
  using: _524@Mir(bb107[3]), _526@Mir(bb107[5])
  _528 = Eq(_527, const 0_usize)
  using: _527@Mir(bb107[6])
  assert(_528, "misaligned pointer dereference: address must be a multiple of {} but is {}", _525, _524) -> [success: bb146, unwind unreachable]
  using: _528@Mir(bb107[7]), _525@Mir(bb107[4]), _524@Mir(bb107[3])
bb108:
  _517 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _518 = _517 as usize (Transmute)
  using: _517@Mir(bb108[0])
  _519 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _520 = Sub(_519, const 1_usize)
  using: _519@Mir(bb108[2])
  _521 = BitAnd(_518, _520)
  using: _518@Mir(bb108[1]), _520@Mir(bb108[3])
  _522 = Eq(_521, const 0_usize)
  using: _521@Mir(bb108[4])
  assert(_522, "misaligned pointer dereference: address must be a multiple of {} but is {}", _519, _518) -> [success: bb145, unwind unreachable]
  using: _522@Mir(bb108[5]), _519@Mir(bb108[2]), _518@Mir(bb108[1])
bb109:
  _366 = const b"\x1b[0;90m\x00"
  using: 
  _365 = &raw const (*_366)
  using: _366@Mir(bb109[0])
  _364 = move _365 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _365@Mir(bb109[1])
  _363 = move _364 as *const i8 (PtrToPtr)
  using: _364@Mir(bb109[2])
  _368 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _511 = _368 as *const () (PtrToPtr)
  using: _368@Mir(bb109[4])
  _512 = _511 as usize (Transmute)
  using: _511@Mir(bb109[5])
  _513 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _514 = Sub(_513, const 1_usize)
  using: _513@Mir(bb109[7])
  _515 = BitAnd(_512, _514)
  using: _512@Mir(bb109[6]), _514@Mir(bb109[8])
  _516 = Eq(_515, const 0_usize)
  using: _515@Mir(bb109[9])
  assert(_516, "misaligned pointer dereference: address must be a multiple of {} but is {}", _513, _512) -> [success: bb144, unwind unreachable]
  using: _516@Mir(bb109[10]), _513@Mir(bb109[7]), _512@Mir(bb109[6])
bb110:
  switchInt(move _6) -> [0: bb112, otherwise: bb111]
  using: _6@Entry
bb111:
  _373 = const b" 4. ld config files not considered due to NODEFLIB flag\n\x00"
  using: 
  _372 = &raw const (*_373)
  using: _373@Mir(bb111[0])
  _371 = move _372 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _372@Mir(bb111[1])
  _370 = move _371 as *const i8 (PtrToPtr)
  using: _371@Mir(bb111[2])
  goto -> bb113
  using: 
bb112:
  _376 = const b" 4. ld config files:\n\x00"
  using: 
  _375 = &raw const (*_376)
  using: _376@Mir(bb112[0])
  _374 = move _375 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _375@Mir(bb112[1])
  _370 = move _374 as *const i8 (PtrToPtr)
  using: _374@Mir(bb112[2])
  goto -> bb113
  using: 
bb113:
  _378 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _505 = _378 as *const () (PtrToPtr)
  using: _378@Mir(bb113[0])
  _506 = _505 as usize (Transmute)
  using: _505@Mir(bb113[1])
  _507 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _508 = Sub(_507, const 1_usize)
  using: _507@Mir(bb113[3])
  _509 = BitAnd(_506, _508)
  using: _506@Mir(bb113[2]), _508@Mir(bb113[4])
  _510 = Eq(_509, const 0_usize)
  using: _509@Mir(bb113[5])
  assert(_510, "misaligned pointer dereference: address must be a multiple of {} but is {}", _507, _506) -> [success: bb143, unwind unreachable]
  using: _510@Mir(bb113[6]), _507@Mir(bb113[3]), _506@Mir(bb113[2])
bb114:
  _499 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _500 = _499 as usize (Transmute)
  using: _499@Mir(bb114[0])
  _501 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _502 = Sub(_501, const 1_usize)
  using: _501@Mir(bb114[2])
  _503 = BitAnd(_500, _502)
  using: _500@Mir(bb114[1]), _502@Mir(bb114[3])
  _504 = Eq(_503, const 0_usize)
  using: _503@Mir(bb114[4])
  assert(_504, "misaligned pointer dereference: address must be a multiple of {} but is {}", _501, _500) -> [success: bb142, unwind unreachable]
  using: _504@Mir(bb114[5]), _501@Mir(bb114[2]), _500@Mir(bb114[1])
bb115:
  _384 = const b"\x1b[0m\x00"
  using: 
  _383 = &raw const (*_384)
  using: _384@Mir(bb115[0])
  _382 = move _383 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _383@Mir(bb115[1])
  _381 = move _382 as *const i8 (PtrToPtr)
  using: _382@Mir(bb115[2])
  _386 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _493 = _386 as *const () (PtrToPtr)
  using: _386@Mir(bb115[4])
  _494 = _493 as usize (Transmute)
  using: _493@Mir(bb115[5])
  _495 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _496 = Sub(_495, const 1_usize)
  using: _495@Mir(bb115[7])
  _497 = BitAnd(_494, _496)
  using: _494@Mir(bb115[6]), _496@Mir(bb115[8])
  _498 = Eq(_497, const 0_usize)
  using: _497@Mir(bb115[9])
  assert(_498, "misaligned pointer dereference: address must be a multiple of {} but is {}", _495, _494) -> [success: bb141, unwind unreachable]
  using: _498@Mir(bb115[10]), _495@Mir(bb115[7]), _494@Mir(bb115[6])
bb116:
  _487 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _488 = _487 as usize (Transmute)
  using: _487@Mir(bb116[0])
  _489 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _490 = Sub(_489, const 1_usize)
  using: _489@Mir(bb116[2])
  _491 = BitAnd(_488, _490)
  using: _488@Mir(bb116[1]), _490@Mir(bb116[3])
  _492 = Eq(_491, const 0_usize)
  using: _491@Mir(bb116[4])
  assert(_492, "misaligned pointer dereference: address must be a multiple of {} but is {}", _489, _488) -> [success: bb140, unwind unreachable]
  using: _492@Mir(bb116[5]), _489@Mir(bb116[2]), _488@Mir(bb116[1])
bb117:
  _388 = move _389 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _389@Mir(bb139[2])
  _393 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _387 = src::libtree::print_colon_delimited_paths(move _388, move _393) -> [return: bb118, unwind continue]
  using: _388@Mir(bb117[0]), _393@Mir(bb117[1])
bb118:
  _395 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _397 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _475 = _397 as *const () (PtrToPtr)
  using: _397@Mir(bb118[1])
  _476 = _475 as usize (Transmute)
  using: _475@Mir(bb118[2])
  _477 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _478 = Sub(_477, const 1_usize)
  using: _477@Mir(bb118[4])
  _479 = BitAnd(_476, _478)
  using: _476@Mir(bb118[3]), _478@Mir(bb118[5])
  _480 = Eq(_479, const 0_usize)
  using: _479@Mir(bb118[6])
  assert(_480, "misaligned pointer dereference: address must be a multiple of {} but is {}", _477, _476) -> [success: bb138, unwind unreachable]
  using: _480@Mir(bb118[7]), _477@Mir(bb118[4]), _476@Mir(bb118[3])
bb119:
  _469 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _470 = _469 as usize (Transmute)
  using: _469@Mir(bb119[0])
  _471 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _472 = Sub(_471, const 1_usize)
  using: _471@Mir(bb119[2])
  _473 = BitAnd(_470, _472)
  using: _470@Mir(bb119[1]), _472@Mir(bb119[3])
  _474 = Eq(_473, const 0_usize)
  using: _473@Mir(bb119[4])
  assert(_474, "misaligned pointer dereference: address must be a multiple of {} but is {}", _471, _470) -> [success: bb137, unwind unreachable]
  using: _474@Mir(bb119[5]), _471@Mir(bb119[2]), _470@Mir(bb119[1])
bb120:
  _403 = const b"\x1b[0;90m\x00"
  using: 
  _402 = &raw const (*_403)
  using: _403@Mir(bb120[0])
  _401 = move _402 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _402@Mir(bb120[1])
  _400 = move _401 as *const i8 (PtrToPtr)
  using: _401@Mir(bb120[2])
  _405 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _463 = _405 as *const () (PtrToPtr)
  using: _405@Mir(bb120[4])
  _464 = _463 as usize (Transmute)
  using: _463@Mir(bb120[5])
  _465 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _466 = Sub(_465, const 1_usize)
  using: _465@Mir(bb120[7])
  _467 = BitAnd(_464, _466)
  using: _464@Mir(bb120[6]), _466@Mir(bb120[8])
  _468 = Eq(_467, const 0_usize)
  using: _467@Mir(bb120[9])
  assert(_468, "misaligned pointer dereference: address must be a multiple of {} but is {}", _465, _464) -> [success: bb136, unwind unreachable]
  using: _468@Mir(bb120[10]), _465@Mir(bb120[7]), _464@Mir(bb120[6])
bb121:
  switchInt(move _6) -> [0: bb123, otherwise: bb122]
  using: _6@Entry
bb122:
  _410 = const b" 5. Standard paths not considered due to NODEFLIB flag\n\x00"
  using: 
  _409 = &raw const (*_410)
  using: _410@Mir(bb122[0])
  _408 = move _409 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _409@Mir(bb122[1])
  _407 = move _408 as *const i8 (PtrToPtr)
  using: _408@Mir(bb122[2])
  goto -> bb124
  using: 
bb123:
  _413 = const b" 5. Standard paths:\n\x00"
  using: 
  _412 = &raw const (*_413)
  using: _413@Mir(bb123[0])
  _411 = move _412 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _412@Mir(bb123[1])
  _407 = move _411 as *const i8 (PtrToPtr)
  using: _411@Mir(bb123[2])
  goto -> bb124
  using: 
bb124:
  _415 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _457 = _415 as *const () (PtrToPtr)
  using: _415@Mir(bb124[0])
  _458 = _457 as usize (Transmute)
  using: _457@Mir(bb124[1])
  _459 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _460 = Sub(_459, const 1_usize)
  using: _459@Mir(bb124[3])
  _461 = BitAnd(_458, _460)
  using: _458@Mir(bb124[2]), _460@Mir(bb124[4])
  _462 = Eq(_461, const 0_usize)
  using: _461@Mir(bb124[5])
  assert(_462, "misaligned pointer dereference: address must be a multiple of {} but is {}", _459, _458) -> [success: bb135, unwind unreachable]
  using: _462@Mir(bb124[6]), _459@Mir(bb124[3]), _458@Mir(bb124[2])
bb125:
  _451 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _452 = _451 as usize (Transmute)
  using: _451@Mir(bb125[0])
  _453 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _454 = Sub(_453, const 1_usize)
  using: _453@Mir(bb125[2])
  _455 = BitAnd(_452, _454)
  using: _452@Mir(bb125[1]), _454@Mir(bb125[3])
  _456 = Eq(_455, const 0_usize)
  using: _455@Mir(bb125[4])
  assert(_456, "misaligned pointer dereference: address must be a multiple of {} but is {}", _453, _452) -> [success: bb134, unwind unreachable]
  using: _456@Mir(bb125[5]), _453@Mir(bb125[2]), _452@Mir(bb125[1])
bb126:
  _421 = const b"\x1b[0m\x00"
  using: 
  _420 = &raw const (*_421)
  using: _421@Mir(bb126[0])
  _419 = move _420 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _420@Mir(bb126[1])
  _418 = move _419 as *const i8 (PtrToPtr)
  using: _419@Mir(bb126[2])
  _423 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _445 = _423 as *const () (PtrToPtr)
  using: _423@Mir(bb126[4])
  _446 = _445 as usize (Transmute)
  using: _445@Mir(bb126[5])
  _447 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _448 = Sub(_447, const 1_usize)
  using: _447@Mir(bb126[7])
  _449 = BitAnd(_446, _448)
  using: _446@Mir(bb126[6]), _448@Mir(bb126[8])
  _450 = Eq(_449, const 0_usize)
  using: _449@Mir(bb126[9])
  assert(_450, "misaligned pointer dereference: address must be a multiple of {} but is {}", _447, _446) -> [success: bb133, unwind unreachable]
  using: _450@Mir(bb126[10]), _447@Mir(bb126[7]), _446@Mir(bb126[6])
bb127:
  _439 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _440 = _439 as usize (Transmute)
  using: _439@Mir(bb127[0])
  _441 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _442 = Sub(_441, const 1_usize)
  using: _441@Mir(bb127[2])
  _443 = BitAnd(_440, _442)
  using: _440@Mir(bb127[1]), _442@Mir(bb127[3])
  _444 = Eq(_443, const 0_usize)
  using: _443@Mir(bb127[4])
  assert(_444, "misaligned pointer dereference: address must be a multiple of {} but is {}", _441, _440) -> [success: bb132, unwind unreachable]
  using: _444@Mir(bb127[5]), _441@Mir(bb127[2]), _440@Mir(bb127[1])
bb128:
  _425 = move _426 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _426@Mir(bb131[2])
  _430 = _70 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _70@Mir(bb25[0])
  _424 = src::libtree::print_colon_delimited_paths(move _425, move _430) -> [return: bb129, unwind continue]
  using: _425@Mir(bb128[0]), _430@Mir(bb128[1])
bb129:
  _432 = _70 as *mut libc::c_void (PtrToPtr)
  using: _70@Mir(bb25[0])
  _431 = src::libtree::free(move _432) -> [return: bb130, unwind continue]
  using: _432@Mir(bb129[0])
bb130:
  return
  using: _0@Entry
bb131:
  _429 = ((*_5).13: u64)
  using: _5@Entry
  _428 = move _429 as isize (IntToInt)
  using: _429@Mir(bb131[0])
  _426 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _427, move _428) -> [return: bb128, unwind continue]
  using: _427@Mir(bb132[0]), _428@Mir(bb131[1])
bb132:
  _427 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Entry
  _433 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _434 = _433 as usize (Transmute)
  using: _433@Mir(bb132[1])
  _435 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _436 = Sub(_435, const 1_usize)
  using: _435@Mir(bb132[3])
  _437 = BitAnd(_434, _436)
  using: _434@Mir(bb132[2]), _436@Mir(bb132[4])
  _438 = Eq(_437, const 0_usize)
  using: _437@Mir(bb132[5])
  assert(_438, "misaligned pointer dereference: address must be a multiple of {} but is {}", _435, _434) -> [success: bb131, unwind unreachable]
  using: _438@Mir(bb132[6]), _435@Mir(bb132[3]), _434@Mir(bb132[2])
bb133:
  _422 = (*_423)
  using: _423@Mir(bb126[4])
  _417 = src::libtree::fputs(move _418, move _422) -> [return: bb127, unwind continue]
  using: _418@Mir(bb126[3]), _422@Mir(bb133[0])
bb134:
  _416 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _416) -> [0: bb127, otherwise: bb126]
  using: _416@Mir(bb134[0])
bb135:
  _414 = (*_415)
  using: _415@Mir(bb124[0])
  _406 = src::libtree::fputs(move _407, move _414) -> [return: bb125, unwind continue]
  using: _407@Phi(bb124), _414@Mir(bb135[0])
bb136:
  _404 = (*_405)
  using: _405@Mir(bb120[4])
  _399 = src::libtree::fputs(move _400, move _404) -> [return: bb121, unwind continue]
  using: _400@Mir(bb120[3]), _404@Mir(bb136[0])
bb137:
  _398 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _398) -> [0: bb121, otherwise: bb120]
  using: _398@Mir(bb137[0])
bb138:
  _396 = (*_397)
  using: _397@Mir(bb118[1])
  _394 = src::libtree::fputs(move _395, move _396) -> [return: bb119, unwind continue]
  using: _395@Mir(bb118[0]), _396@Mir(bb138[0])
bb139:
  _392 = ((*_5).14: u64)
  using: _5@Entry
  _391 = move _392 as isize (IntToInt)
  using: _392@Mir(bb139[0])
  _389 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _390, move _391) -> [return: bb117, unwind continue]
  using: _390@Mir(bb140[0]), _391@Mir(bb139[1])
bb140:
  _390 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Entry
  _481 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _482 = _481 as usize (Transmute)
  using: _481@Mir(bb140[1])
  _483 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _484 = Sub(_483, const 1_usize)
  using: _483@Mir(bb140[3])
  _485 = BitAnd(_482, _484)
  using: _482@Mir(bb140[2]), _484@Mir(bb140[4])
  _486 = Eq(_485, const 0_usize)
  using: _485@Mir(bb140[5])
  assert(_486, "misaligned pointer dereference: address must be a multiple of {} but is {}", _483, _482) -> [success: bb139, unwind unreachable]
  using: _486@Mir(bb140[6]), _483@Mir(bb140[3]), _482@Mir(bb140[2])
bb141:
  _385 = (*_386)
  using: _386@Mir(bb115[4])
  _380 = src::libtree::fputs(move _381, move _385) -> [return: bb116, unwind continue]
  using: _381@Mir(bb115[3]), _385@Mir(bb141[0])
bb142:
  _379 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _379) -> [0: bb116, otherwise: bb115]
  using: _379@Mir(bb142[0])
bb143:
  _377 = (*_378)
  using: _378@Mir(bb113[0])
  _369 = src::libtree::fputs(move _370, move _377) -> [return: bb114, unwind continue]
  using: _370@Phi(bb113), _377@Mir(bb143[0])
bb144:
  _367 = (*_368)
  using: _368@Mir(bb109[4])
  _362 = src::libtree::fputs(move _363, move _367) -> [return: bb110, unwind continue]
  using: _363@Mir(bb109[3]), _367@Mir(bb144[0])
bb145:
  _361 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _361) -> [0: bb110, otherwise: bb109]
  using: _361@Mir(bb145[0])
bb146:
  _359 = (*_360)
  using: _360@Mir(bb107[1])
  _357 = src::libtree::fputs(move _358, move _359) -> [return: bb108, unwind continue]
  using: _358@Mir(bb107[0]), _359@Mir(bb146[0])
bb147:
  _351 = (*_352)
  using: _352@Mir(bb103[4])
  _346 = src::libtree::fputs(move _347, move _351) -> [return: bb104, unwind continue]
  using: _347@Mir(bb103[3]), _351@Mir(bb147[0])
bb148:
  _345 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _345) -> [0: bb104, otherwise: bb103]
  using: _345@Mir(bb148[0])
bb149:
  _343 = (*_344)
  using: _344@Mir(bb101[0])
  _334 = src::libtree::fputs(move _335, move _343) -> [return: bb102, unwind continue]
  using: _335@Phi(bb101), _343@Mir(bb149[0])
bb150:
  _332 = (*_333)
  using: _333@Mir(bb96[4])
  _327 = src::libtree::fputs(move _328, move _332) -> [return: bb97, unwind continue]
  using: _328@Mir(bb96[3]), _332@Mir(bb150[0])
bb151:
  _326 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _326) -> [0: bb97, otherwise: bb96]
  using: _326@Mir(bb151[0])
bb152:
  _324 = (*_325)
  using: _325@Mir(bb94[1])
  _322 = src::libtree::fputs(move _323, move _324) -> [return: bb95, unwind continue]
  using: _323@Mir(bb94[0]), _324@Mir(bb152[0])
bb153:
  _320 = ((*_5).12: u64)
  using: _5@Entry
  _319 = move _320 as isize (IntToInt)
  using: _320@Mir(bb153[0])
  _317 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _318, move _319) -> [return: bb93, unwind continue]
  using: _318@Mir(bb154[0]), _319@Mir(bb153[1])
bb154:
  _318 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Entry
  _565 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _566 = _565 as usize (Transmute)
  using: _565@Mir(bb154[1])
  _567 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _568 = Sub(_567, const 1_usize)
  using: _567@Mir(bb154[3])
  _569 = BitAnd(_566, _568)
  using: _566@Mir(bb154[2]), _568@Mir(bb154[4])
  _570 = Eq(_569, const 0_usize)
  using: _569@Mir(bb154[5])
  assert(_570, "misaligned pointer dereference: address must be a multiple of {} but is {}", _567, _566) -> [success: bb153, unwind unreachable]
  using: _570@Mir(bb154[6]), _567@Mir(bb154[3]), _566@Mir(bb154[2])
bb155:
  _313 = ((*_5).12: u64)
  using: _5@Entry
  _314 = const u64::MAX
  using: 
  _312 = Ne(move _313, move _314)
  using: _313@Mir(bb155[0]), _314@Mir(bb155[1])
  switchInt(move _312) -> [0: bb94, otherwise: bb92]
  using: _312@Mir(bb155[2])
bb156:
  _310 = (*_311)
  using: _311@Mir(bb90[4])
  _305 = src::libtree::fputs(move _306, move _310) -> [return: bb91, unwind continue]
  using: _306@Mir(bb90[3]), _310@Mir(bb156[0])
bb157:
  _304 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _304) -> [0: bb91, otherwise: bb90]
  using: _304@Mir(bb157[0])
bb158:
  _302 = (*_303)
  using: _303@Mir(bb88[0])
  _291 = src::libtree::fputs(move _292, move _302) -> [return: bb89, unwind continue]
  using: _292@Phi(bb88), _302@Mir(bb158[0])
bb159:
  _294 = ((*_5).12: u64)
  using: _5@Entry
  _295 = const u64::MAX
  using: 
  _293 = Eq(move _294, move _295)
  using: _294@Mir(bb159[0]), _295@Mir(bb159[1])
  switchInt(move _293) -> [0: bb87, otherwise: bb86]
  using: _293@Mir(bb159[2])
bb160:
  _289 = (*_290)
  using: _290@Mir(bb84[4])
  _284 = src::libtree::fputs(move _285, move _289) -> [return: bb85, unwind continue]
  using: _285@Mir(bb84[3]), _289@Mir(bb160[0])
bb161:
  _283 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _283) -> [0: bb85, otherwise: bb84]
  using: _283@Mir(bb161[0])
bb162:
  _281 = (*_282)
  using: _282@Mir(bb82[1])
  _279 = src::libtree::fputs(move _280, move _281) -> [return: bb83, unwind continue]
  using: _280@Mir(bb82[0]), _281@Mir(bb162[0])
bb163:
  _272 = ((*_5).11: [u64; 32])[_273]
  using: _5@Entry, _273@Mir(bb165[2])
  _271 = move _272 as isize (IntToInt)
  using: _272@Mir(bb163[0])
  _269 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _270, move _271) -> [return: bb79, unwind continue]
  using: _270@Mir(bb165[0]), _271@Mir(bb163[1])
bb164:
  _275 = const 32_usize
  using: 
  _276 = Lt(_273, _275)
  using: _273@Mir(bb165[2]), _275@Mir(bb164[0])
  assert(move _276, "index out of bounds: the length is {} but the index is {}", move _275, _273) -> [success: bb78, unwind continue]
  using: _276@Mir(bb164[1]), _275@Mir(bb164[0]), _273@Mir(bb165[2])
bb165:
  _270 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Entry
  _274 = _210
  using: _210@Phi(bb62)
  _273 = move _274 as usize (IntToInt)
  using: _274@Mir(bb165[1])
  _631 = _5 as *const () (PtrToPtr)
  using: _5@Entry
  _632 = _631 as usize (Transmute)
  using: _631@Mir(bb165[3])
  _633 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _634 = Sub(_633, const 1_usize)
  using: _633@Mir(bb165[5])
  _635 = BitAnd(_632, _634)
  using: _632@Mir(bb165[4]), _634@Mir(bb165[6])
  _636 = Eq(_635, const 0_usize)
  using: _635@Mir(bb165[7])
  assert(_636, "misaligned pointer dereference: address must be a multiple of {} but is {}", _633, _632) -> [success: bb164, unwind unreachable]
  using: _636@Mir(bb165[8]), _633@Mir(bb165[5]), _632@Mir(bb165[4])
bb166:
  _263 = (*_264)
  using: _264@Mir(bb75[4])
  _258 = src::libtree::fputs(move _259, move _263) -> [return: bb76, unwind continue]
  using: _259@Mir(bb75[3]), _263@Mir(bb166[0])
bb167:
  _257 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _257) -> [0: bb76, otherwise: bb75]
  using: _257@Mir(bb167[0])
bb168:
  _255 = (*_256)
  using: _256@Mir(bb73[1])
  _250 = src::libtree::fputs(move _251, move _255) -> [return: bb74, unwind continue]
  using: _251@Mir(bb73[0]), _255@Mir(bb168[0])
bb169:
  _248 = (*_249)
  using: _249@Mir(bb71[4])
  _243 = src::libtree::fputs(move _244, move _248) -> [return: bb72, unwind continue]
  using: _244@Mir(bb71[3]), _248@Mir(bb169[0])
bb170:
  _241 = (*_242)
  using: _242@Mir(bb70[4])
  _236 = src::libtree::fputs(move _237, move _241) -> [return: bb71, unwind continue]
  using: _237@Mir(bb70[3]), _241@Mir(bb170[0])
bb171:
  _235 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _235) -> [0: bb71, otherwise: bb70]
  using: _235@Mir(bb171[0])
bb172:
  _233 = (*_234)
  using: _234@Mir(bb68[1])
  _231 = src::libtree::fputs(move _232, move _233) -> [return: bb69, unwind continue]
  using: _232@Mir(bb68[0]), _233@Mir(bb172[0])
bb173:
  _215 = ((*_5).11: [u64; 32])[_216]
  using: _5@Entry, _216@Mir(bb63[1])
  _220 = const u64::MAX
  using: 
  _214 = Ne(move _215, move _220)
  using: _215@Mir(bb173[0]), _220@Mir(bb173[1])
  switchInt(move _214) -> [0: bb80, otherwise: bb65]
  using: _214@Mir(bb173[2])
bb174:
  _218 = const 32_usize
  using: 
  _219 = Lt(_216, _218)
  using: _216@Mir(bb63[1]), _218@Mir(bb174[0])
  assert(move _219, "index out of bounds: the length is {} but the index is {}", move _218, _216) -> [success: bb64, unwind continue]
  using: _219@Mir(bb174[1]), _218@Mir(bb174[0]), _216@Mir(bb63[1])
bb175:
  _208 = (*_209)
  using: _209@Mir(bb60[4])
  _203 = src::libtree::fputs(move _204, move _208) -> [return: bb61, unwind continue]
  using: _204@Mir(bb60[3]), _208@Mir(bb175[0])
bb176:
  _202 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _202) -> [0: bb61, otherwise: bb60]
  using: _202@Mir(bb176[0])
bb177:
  _200 = (*_201)
  using: _201@Mir(bb58[4])
  _195 = src::libtree::fputs(move _196, move _200) -> [return: bb59, unwind continue]
  using: _196@Mir(bb58[3]), _200@Mir(bb177[0])
bb178:
  _193 = (*_194)
  using: _194@Mir(bb57[4])
  _188 = src::libtree::fputs(move _189, move _193) -> [return: bb58, unwind continue]
  using: _189@Mir(bb57[3]), _193@Mir(bb178[0])
bb179:
  _185 = (*_186)
  using: _186@Mir(bb56[4])
  _180 = src::libtree::fputs(move _181, move _185) -> [return: bb82, unwind continue]
  using: _181@Mir(bb56[3]), _185@Mir(bb179[0])
bb180:
  _179 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _179) -> [0: bb82, otherwise: bb56]
  using: _179@Mir(bb180[0])
bb181:
  _177 = (*_178)
  using: _178@Mir(bb54[4])
  _172 = src::libtree::fputs(move _173, move _177) -> [return: bb55, unwind continue]
  using: _173@Mir(bb54[3]), _177@Mir(bb181[0])
bb182:
  _170 = (*_171)
  using: _171@Mir(bb53[4])
  _165 = src::libtree::fputs(move _166, move _170) -> [return: bb54, unwind continue]
  using: _166@Mir(bb53[3]), _170@Mir(bb182[0])
bb183:
  _164 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _164) -> [0: bb54, otherwise: bb53]
  using: _164@Mir(bb183[0])
bb184:
  _187 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _187) -> [0: bb58, otherwise: bb57]
  using: _187@Mir(bb184[0])
bb185:
  _161 = (*_162)
  using: _162@Mir(bb48[1])
  _159 = src::libtree::fputs(move _160, move _161) -> [return: bb49, unwind continue]
  using: _160@Mir(bb48[0]), _161@Mir(bb185[0])
bb186:
  _157 = (*_158)
  using: _158@Mir(bb47[4])
  _152 = src::libtree::fputs(move _153, move _157) -> [return: bb48, unwind continue]
  using: _153@Mir(bb47[3]), _157@Mir(bb186[0])
bb187:
  _151 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _151) -> [0: bb48, otherwise: bb47]
  using: _151@Mir(bb187[0])
bb188:
  _149 = (*_150)
  using: _150@Mir(bb45[4])
  _144 = src::libtree::fputs(move _145, move _149) -> [return: bb46, unwind continue]
  using: _145@Mir(bb45[3]), _149@Mir(bb188[0])
bb189:
  _142 = (*_143)
  using: _143@Mir(bb44[4])
  _137 = src::libtree::fputs(move _138, move _142) -> [return: bb45, unwind continue]
  using: _138@Mir(bb44[3]), _142@Mir(bb189[0])
bb190:
  _136 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _136) -> [0: bb45, otherwise: bb44]
  using: _136@Mir(bb190[0])
bb191:
  _134 = (*_135)
  using: _135@Mir(bb42[1])
  _132 = src::libtree::fputs(move _133, move _134) -> [return: bb43, unwind continue]
  using: _133@Mir(bb42[0]), _134@Mir(bb191[0])
bb192:
  _86 = ((*_5).15: [i8; 32])[_87]
  using: _5@Entry, _87@Mir(bb27[1])
  switchInt(move _86) -> [0: bb34, otherwise: bb29]
  using: _86@Mir(bb192[0])
bb193:
  _89 = const 32_usize
  using: 
  _90 = Lt(_87, _89)
  using: _87@Mir(bb27[1]), _89@Mir(bb193[0])
  assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _87) -> [success: bb28, unwind continue]
  using: _90@Mir(bb193[1]), _89@Mir(bb193[0]), _87@Mir(bb27[1])
bb194:
  _63 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _63) -> [0: bb18, otherwise: bb17]
  using: _63@Mir(bb194[0])
bb195:
  _57 = (*_58)
  using: _58@Mir(bb13[4])
  _52 = src::libtree::fputs(move _53, move _57) -> [return: bb14, unwind continue]
  using: _53@Mir(bb13[3]), _57@Mir(bb195[0])
bb196:
  _51 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _51) -> [0: bb14, otherwise: bb13]
  using: _51@Mir(bb196[0])
bb197:
  _49 = (*_50)
  using: _50@Mir(bb11[4])
  _44 = src::libtree::fputs(move _45, move _49) -> [return: bb12, unwind continue]
  using: _45@Mir(bb11[3]), _49@Mir(bb197[0])
bb198:
  _42 = (*_43)
  using: _43@Mir(bb10[1])
  _32 = src::libtree::fputs(move _33, move _42) -> [return: bb11, unwind continue]
  using: _33@Mir(bb10[0]), _42@Mir(bb198[0])
bb199:
  _37 = (*_38)
  using: _38@Mir(bb200[3])
  _36 = move _37 as isize (IntToInt)
  using: _37@Mir(bb199[0])
  _34 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _35, move _36) -> [return: bb10, unwind continue]
  using: _35@Mir(bb201[0]), _36@Mir(bb199[1])
bb200:
  _39 = ((*_3).1: *mut u64)
  using: _3@Entry
  _41 = _7
  using: _7@Phi(bb1)
  _40 = move _41 as isize (IntToInt)
  using: _41@Mir(bb200[1])
  _38 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _39, move _40) -> [return: bb9, unwind continue]
  using: _39@Mir(bb200[0]), _40@Mir(bb200[2])
bb201:
  _35 = (((*_5).5: src::libtree::string_table_t).0: *mut i8)
  using: _5@Entry
  _847 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _848 = _847 as usize (Transmute)
  using: _847@Mir(bb201[1])
  _849 = AlignOf(src::libtree::small_vec_u64_t)
  using: 
  _850 = Sub(_849, const 1_usize)
  using: _849@Mir(bb201[3])
  _851 = BitAnd(_848, _850)
  using: _848@Mir(bb201[2]), _850@Mir(bb201[4])
  _852 = Eq(_851, const 0_usize)
  using: _851@Mir(bb201[5])
  assert(_852, "misaligned pointer dereference: address must be a multiple of {} but is {}", _849, _848) -> [success: bb200, unwind unreachable]
  using: _852@Mir(bb201[6]), _849@Mir(bb201[3]), _848@Mir(bb201[2])
bb202:
  _30 = (*_31)
  using: _31@Mir(bb7[4])
  _25 = src::libtree::fputs(move _26, move _30) -> [return: bb8, unwind continue]
  using: _26@Mir(bb7[3]), _30@Mir(bb202[0])
bb203:
  _24 = ((*_5).2: i32)
  using: _5@Entry
  switchInt(move _24) -> [0: bb8, otherwise: bb7]
  using: _24@Mir(bb203[0])
bb204:
  ((*_5).15: [i8; 32])[_17] = move _11 as i8 (IntToInt)
  using: _5@Entry, _17@Mir(bb3[2]), _11@Mir(bb3[1])
  _23 = const 1_i32
  using: 
  _22 = move _23 as u64 (IntToInt)
  using: _23@Mir(bb204[1])
  _21 = core::num::<impl u64>::wrapping_add(_1, move _22) -> [return: bb5, unwind continue]
  using: _1@Entry, _22@Mir(bb204[2])
bb205:
  _18 = const 32_usize
  using: 
  _19 = Lt(_17, _18)
  using: _17@Mir(bb3[2]), _18@Mir(bb205[0])
  assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb4, unwind continue]
  using: _19@Mir(bb205[1]), _18@Mir(bb205[0]), _17@Mir(bb3[2])
@DefId(0:127 ~ lib[f5c5]::src::libtree::visited_files_contains)
bb0:
  _4 = const 0_i32
  using: 
  _3 = move _4 as u64 (IntToInt)
  using: _4@Mir(bb0[0])
  goto -> bb1
  using: 
bb1:
  _6 = _3
  using: _3@Phi(bb1)
  _58 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _59 = _58 as usize (Transmute)
  using: _58@Mir(bb1[1])
  _60 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _61 = Sub(_60, const 1_usize)
  using: _60@Mir(bb1[3])
  _62 = BitAnd(_59, _61)
  using: _59@Mir(bb1[2]), _61@Mir(bb1[4])
  _63 = Eq(_62, const 0_usize)
  using: _62@Mir(bb1[5])
  assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb16, unwind unreachable]
  using: _63@Mir(bb1[6]), _60@Mir(bb1[3]), _59@Mir(bb1[2])
bb2:
  _52 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _53 = _52 as usize (Transmute)
  using: _52@Mir(bb2[0])
  _54 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _55 = Sub(_54, const 1_usize)
  using: _54@Mir(bb2[2])
  _56 = BitAnd(_53, _55)
  using: _53@Mir(bb2[1]), _55@Mir(bb2[3])
  _57 = Eq(_56, const 0_usize)
  using: _56@Mir(bb2[4])
  assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb15, unwind unreachable]
  using: _57@Mir(bb2[5]), _54@Mir(bb2[2]), _53@Mir(bb2[1])
bb3:
  _46 = _10 as *const () (PtrToPtr)
  using: _10@Mir(bb15[3])
  _47 = _46 as usize (Transmute)
  using: _46@Mir(bb3[0])
  _48 = AlignOf(src::libtree::visited_file_t)
  using: 
  _49 = Sub(_48, const 1_usize)
  using: _48@Mir(bb3[2])
  _50 = BitAnd(_47, _49)
  using: _47@Mir(bb3[1]), _49@Mir(bb3[3])
  _51 = Eq(_50, const 0_usize)
  using: _50@Mir(bb3[4])
  assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb14, unwind unreachable]
  using: _51@Mir(bb3[5]), _48@Mir(bb3[2]), _47@Mir(bb3[1])
bb4:
  _28 = _8 as *const () (PtrToPtr)
  using: _8@Mir(bb14[1])
  _29 = _28 as usize (Transmute)
  using: _28@Mir(bb4[0])
  _30 = AlignOf(src::libtree::visited_file_t)
  using: 
  _31 = Sub(_30, const 1_usize)
  using: _30@Mir(bb4[2])
  _32 = BitAnd(_29, _31)
  using: _29@Mir(bb4[1]), _31@Mir(bb4[3])
  _33 = Eq(_32, const 0_usize)
  using: _32@Mir(bb4[4])
  assert(_33, "misaligned pointer dereference: address must be a multiple of {} but is {}", _30, _29) -> [success: bb11, unwind unreachable]
  using: _33@Mir(bb4[5]), _30@Mir(bb4[2]), _29@Mir(bb4[1])
bb5:
  _0 = const 1_i32
  using: 
  goto -> bb9
  using: 
bb6:
  _21 = _3
  using: _3@Phi(bb1)
  _20 = core::num::<impl u64>::wrapping_add(move _21, const 1_u64) -> [return: bb7, unwind continue]
  using: _21@Mir(bb6[0])
bb7:
  _3 = move _20
  using: _20@Mir(bb6[1])
  goto -> bb1
  using: 
bb8:
  _0 = const 0_i32
  using: 
  goto -> bb9
  using: 
bb9:
  return
  using: _0@Phi(bb9)
bb10:
  _19 = ((*_2).1: u64)
  using: _2@Entry
  _17 = Eq(move _18, move _19)
  using: _18@Mir(bb11[0]), _19@Mir(bb10[0])
  switchInt(move _17) -> [0: bb6, otherwise: bb5]
  using: _17@Mir(bb10[1])
bb11:
  _18 = ((*_8).1: u64)
  using: _8@Mir(bb14[1])
  _22 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _23 = _22 as usize (Transmute)
  using: _22@Mir(bb11[1])
  _24 = AlignOf(src::libtree::stat)
  using: 
  _25 = Sub(_24, const 1_usize)
  using: _24@Mir(bb11[3])
  _26 = BitAnd(_23, _25)
  using: _23@Mir(bb11[2]), _25@Mir(bb11[4])
  _27 = Eq(_26, const 0_usize)
  using: _26@Mir(bb11[5])
  assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb10, unwind unreachable]
  using: _27@Mir(bb11[6]), _24@Mir(bb11[3]), _23@Mir(bb11[2])
bb12:
  _16 = ((*_2).0: u64)
  using: _2@Entry
  _14 = Eq(move _15, move _16)
  using: _15@Mir(bb13[0]), _16@Mir(bb12[0])
  switchInt(move _14) -> [0: bb6, otherwise: bb4]
  using: _14@Mir(bb12[1])
bb13:
  _15 = ((*_8).0: u64)
  using: _8@Mir(bb14[1])
  _34 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _35 = _34 as usize (Transmute)
  using: _34@Mir(bb13[1])
  _36 = AlignOf(src::libtree::stat)
  using: 
  _37 = Sub(_36, const 1_usize)
  using: _36@Mir(bb13[3])
  _38 = BitAnd(_35, _37)
  using: _35@Mir(bb13[2]), _37@Mir(bb13[4])
  _39 = Eq(_38, const 0_usize)
  using: _38@Mir(bb13[5])
  assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb12, unwind unreachable]
  using: _39@Mir(bb13[6]), _36@Mir(bb13[3]), _35@Mir(bb13[2])
bb14:
  _9 = &mut (*_10)
  using: _10@Mir(bb15[3])
  _8 = &raw mut (*_9)
  using: _9@Mir(bb14[0])
  _40 = _8 as *const () (PtrToPtr)
  using: _8@Mir(bb14[1])
  _41 = _40 as usize (Transmute)
  using: _40@Mir(bb14[2])
  _42 = AlignOf(src::libtree::visited_file_t)
  using: 
  _43 = Sub(_42, const 1_usize)
  using: _42@Mir(bb14[4])
  _44 = BitAnd(_41, _43)
  using: _41@Mir(bb14[3]), _43@Mir(bb14[5])
  _45 = Eq(_44, const 0_usize)
  using: _44@Mir(bb14[6])
  assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb13, unwind unreachable]
  using: _45@Mir(bb14[7]), _42@Mir(bb14[4]), _41@Mir(bb14[3])
bb15:
  _11 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _13 = _3
  using: _3@Phi(bb1)
  _12 = move _13 as isize (IntToInt)
  using: _13@Mir(bb15[1])
  _10 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _11, move _12) -> [return: bb3, unwind continue]
  using: _11@Mir(bb15[0]), _12@Mir(bb15[2])
bb16:
  _7 = ((*_1).1: u64)
  using: _1@Entry
  _5 = Lt(move _6, move _7)
  using: _6@Mir(bb1[0]), _7@Mir(bb16[0])
  switchInt(move _5) -> [0: bb8, otherwise: bb2]
  using: _5@Mir(bb16[1])
@DefId(0:128 ~ lib[f5c5]::src::libtree::visited_files_append)
bb0:
  _126 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _127 = _126 as usize (Transmute)
  using: _126@Mir(bb0[0])
  _128 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _129 = Sub(_128, const 1_usize)
  using: _128@Mir(bb0[2])
  _130 = BitAnd(_127, _129)
  using: _127@Mir(bb0[1]), _129@Mir(bb0[3])
  _131 = Eq(_130, const 0_usize)
  using: _130@Mir(bb0[4])
  assert(_131, "misaligned pointer dereference: address must be a multiple of {} but is {}", _128, _127) -> [success: bb27, unwind unreachable]
  using: _131@Mir(bb0[5]), _128@Mir(bb0[2]), _127@Mir(bb0[1])
bb1:
  _114 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _115 = _114 as usize (Transmute)
  using: _114@Mir(bb1[0])
  _116 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _117 = Sub(_116, const 1_usize)
  using: _116@Mir(bb1[2])
  _118 = BitAnd(_115, _117)
  using: _115@Mir(bb1[1]), _117@Mir(bb1[3])
  _119 = Eq(_118, const 0_usize)
  using: _118@Mir(bb1[4])
  assert(_119, "misaligned pointer dereference: address must be a multiple of {} but is {}", _116, _115) -> [success: bb25, unwind unreachable]
  using: _119@Mir(bb1[5]), _116@Mir(bb1[2]), _115@Mir(bb1[1])
bb2:
  (*_6) = move _7
  using: _6@Mir(bb25[0]), _7@Mir(bb25[4])
  _108 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _109 = _108 as usize (Transmute)
  using: _108@Mir(bb2[1])
  _110 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _111 = Sub(_110, const 1_usize)
  using: _110@Mir(bb2[3])
  _112 = BitAnd(_109, _111)
  using: _109@Mir(bb2[2]), _111@Mir(bb2[4])
  _113 = Eq(_112, const 0_usize)
  using: _112@Mir(bb2[5])
  assert(_113, "misaligned pointer dereference: address must be a multiple of {} but is {}", _110, _109) -> [success: bb24, unwind unreachable]
  using: _113@Mir(bb2[6]), _110@Mir(bb2[3]), _109@Mir(bb2[2])
bb3:
  _17 = move _18 as u64 (IntToInt)
  using: _18@Mir(bb22[1])
  _15 = core::num::<impl u64>::wrapping_mul(move _16, move _17) -> [return: bb4, unwind continue]
  using: _16@Mir(bb22[0]), _17@Mir(bb3[0])
bb4:
  _12 = src::libtree::realloc(move _13, move _15) -> [return: bb5, unwind continue]
  using: _13@Mir(bb23[1]), _15@Mir(bb3[1])
bb5:
  (*_11) = move _12 as *mut src::libtree::visited_file_t (PtrToPtr)
  using: _11@Mir(bb24[0]), _12@Mir(bb4[0])
  _90 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _91 = _90 as usize (Transmute)
  using: _90@Mir(bb5[1])
  _92 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _93 = Sub(_92, const 1_usize)
  using: _92@Mir(bb5[3])
  _94 = BitAnd(_91, _93)
  using: _91@Mir(bb5[2]), _93@Mir(bb5[4])
  _95 = Eq(_94, const 0_usize)
  using: _94@Mir(bb5[5])
  assert(_95, "misaligned pointer dereference: address must be a multiple of {} but is {}", _92, _91) -> [success: bb21, unwind unreachable]
  using: _95@Mir(bb5[6]), _92@Mir(bb5[3]), _91@Mir(bb5[2])
bb6:
  switchInt(move _19) -> [0: bb8, otherwise: bb7]
  using: _19@Mir(bb21[1])
bb7:
  _22 = const 1_i32
  using: 
  _21 = src::libtree::exit(move _22) -> unwind continue
  using: _22@Mir(bb7[0])
bb8:
  _84 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _85 = _84 as usize (Transmute)
  using: _84@Mir(bb8[0])
  _86 = AlignOf(src::libtree::stat)
  using: 
  _87 = Sub(_86, const 1_usize)
  using: _86@Mir(bb8[2])
  _88 = BitAnd(_85, _87)
  using: _85@Mir(bb8[1]), _87@Mir(bb8[3])
  _89 = Eq(_88, const 0_usize)
  using: _88@Mir(bb8[4])
  assert(_89, "misaligned pointer dereference: address must be a multiple of {} but is {}", _86, _85) -> [success: bb20, unwind unreachable]
  using: _89@Mir(bb8[5]), _86@Mir(bb8[2]), _85@Mir(bb8[1])
bb9:
  _66 = _24 as *const () (PtrToPtr)
  using: _24@Mir(bb18[2])
  _67 = _66 as usize (Transmute)
  using: _66@Mir(bb9[0])
  _68 = AlignOf(src::libtree::visited_file_t)
  using: 
  _69 = Sub(_68, const 1_usize)
  using: _68@Mir(bb9[2])
  _70 = BitAnd(_67, _69)
  using: _67@Mir(bb9[1]), _69@Mir(bb9[3])
  _71 = Eq(_70, const 0_usize)
  using: _70@Mir(bb9[4])
  assert(_71, "misaligned pointer dereference: address must be a multiple of {} but is {}", _68, _67) -> [success: bb17, unwind unreachable]
  using: _71@Mir(bb9[5]), _68@Mir(bb9[2]), _67@Mir(bb9[1])
bb10:
  _42 = _29 as *const () (PtrToPtr)
  using: _29@Mir(bb14[2])
  _43 = _42 as usize (Transmute)
  using: _42@Mir(bb10[0])
  _44 = AlignOf(src::libtree::visited_file_t)
  using: 
  _45 = Sub(_44, const 1_usize)
  using: _44@Mir(bb10[2])
  _46 = BitAnd(_43, _45)
  using: _43@Mir(bb10[1]), _45@Mir(bb10[3])
  _47 = Eq(_46, const 0_usize)
  using: _46@Mir(bb10[4])
  assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb13, unwind unreachable]
  using: _47@Mir(bb10[5]), _44@Mir(bb10[2]), _43@Mir(bb10[1])
bb11:
  (*_33) = move _34
  using: _33@Mir(bb12[0]), _34@Mir(bb12[2])
  return
  using: _0@Entry
bb12:
  _33 = &mut ((*_1).1: u64)
  using: _1@Entry
  _35 = (*_33)
  using: _33@Mir(bb12[0])
  _34 = core::num::<impl u64>::wrapping_add(move _35, const 1_u64) -> [return: bb11, unwind continue]
  using: _35@Mir(bb12[1])
bb13:
  ((*_29).1: u64) = move _28
  using: _29@Mir(bb14[2]), _28@Mir(bb16[0])
  _36 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _37 = _36 as usize (Transmute)
  using: _36@Mir(bb13[1])
  _38 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _39 = Sub(_38, const 1_usize)
  using: _38@Mir(bb13[3])
  _40 = BitAnd(_37, _39)
  using: _37@Mir(bb13[2]), _39@Mir(bb13[4])
  _41 = Eq(_40, const 0_usize)
  using: _40@Mir(bb13[5])
  assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb12, unwind unreachable]
  using: _41@Mir(bb13[6]), _38@Mir(bb13[3]), _37@Mir(bb13[2])
bb14:
  _32 = ((*_1).1: u64)
  using: _1@Entry
  _31 = move _32 as isize (IntToInt)
  using: _32@Mir(bb14[0])
  _29 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _30, move _31) -> [return: bb10, unwind continue]
  using: _30@Mir(bb15[0]), _31@Mir(bb14[1])
bb15:
  _30 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _48 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _49 = _48 as usize (Transmute)
  using: _48@Mir(bb15[1])
  _50 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _51 = Sub(_50, const 1_usize)
  using: _50@Mir(bb15[3])
  _52 = BitAnd(_49, _51)
  using: _49@Mir(bb15[2]), _51@Mir(bb15[4])
  _53 = Eq(_52, const 0_usize)
  using: _52@Mir(bb15[5])
  assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb14, unwind unreachable]
  using: _53@Mir(bb15[6]), _50@Mir(bb15[3]), _49@Mir(bb15[2])
bb16:
  _28 = ((*_2).1: u64)
  using: _2@Entry
  _54 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _55 = _54 as usize (Transmute)
  using: _54@Mir(bb16[1])
  _56 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _57 = Sub(_56, const 1_usize)
  using: _56@Mir(bb16[3])
  _58 = BitAnd(_55, _57)
  using: _55@Mir(bb16[2]), _57@Mir(bb16[4])
  _59 = Eq(_58, const 0_usize)
  using: _58@Mir(bb16[5])
  assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb15, unwind unreachable]
  using: _59@Mir(bb16[6]), _56@Mir(bb16[3]), _55@Mir(bb16[2])
bb17:
  ((*_24).0: u64) = move _23
  using: _24@Mir(bb18[2]), _23@Mir(bb20[0])
  _60 = _2 as *const () (PtrToPtr)
  using: _2@Entry
  _61 = _60 as usize (Transmute)
  using: _60@Mir(bb17[1])
  _62 = AlignOf(src::libtree::stat)
  using: 
  _63 = Sub(_62, const 1_usize)
  using: _62@Mir(bb17[3])
  _64 = BitAnd(_61, _63)
  using: _61@Mir(bb17[2]), _63@Mir(bb17[4])
  _65 = Eq(_64, const 0_usize)
  using: _64@Mir(bb17[5])
  assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb16, unwind unreachable]
  using: _65@Mir(bb17[6]), _62@Mir(bb17[3]), _61@Mir(bb17[2])
bb18:
  _27 = ((*_1).1: u64)
  using: _1@Entry
  _26 = move _27 as isize (IntToInt)
  using: _27@Mir(bb18[0])
  _24 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::offset(move _25, move _26) -> [return: bb9, unwind continue]
  using: _25@Mir(bb19[0]), _26@Mir(bb18[1])
bb19:
  _25 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _72 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _73 = _72 as usize (Transmute)
  using: _72@Mir(bb19[1])
  _74 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _75 = Sub(_74, const 1_usize)
  using: _74@Mir(bb19[3])
  _76 = BitAnd(_73, _75)
  using: _73@Mir(bb19[2]), _75@Mir(bb19[4])
  _77 = Eq(_76, const 0_usize)
  using: _76@Mir(bb19[5])
  assert(_77, "misaligned pointer dereference: address must be a multiple of {} but is {}", _74, _73) -> [success: bb18, unwind unreachable]
  using: _77@Mir(bb19[6]), _74@Mir(bb19[3]), _73@Mir(bb19[2])
bb20:
  _23 = ((*_2).0: u64)
  using: _2@Entry
  _78 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _79 = _78 as usize (Transmute)
  using: _78@Mir(bb20[1])
  _80 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _81 = Sub(_80, const 1_usize)
  using: _80@Mir(bb20[3])
  _82 = BitAnd(_79, _81)
  using: _79@Mir(bb20[2]), _81@Mir(bb20[4])
  _83 = Eq(_82, const 0_usize)
  using: _82@Mir(bb20[5])
  assert(_83, "misaligned pointer dereference: address must be a multiple of {} but is {}", _80, _79) -> [success: bb19, unwind unreachable]
  using: _83@Mir(bb20[6]), _80@Mir(bb20[3]), _79@Mir(bb20[2])
bb21:
  _20 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _19 = std::ptr::mut_ptr::<impl *mut src::libtree::visited_file_t>::is_null(move _20) -> [return: bb6, unwind continue]
  using: _20@Mir(bb21[0])
bb22:
  _16 = ((*_1).2: u64)
  using: _1@Entry
  _18 = std::mem::size_of::<src::libtree::visited_file_t>() -> [return: bb3, unwind continue]
  using: 
bb23:
  _14 = ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _13 = move _14 as *mut libc::c_void (PtrToPtr)
  using: _14@Mir(bb23[0])
  _96 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _97 = _96 as usize (Transmute)
  using: _96@Mir(bb23[2])
  _98 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _99 = Sub(_98, const 1_usize)
  using: _98@Mir(bb23[4])
  _100 = BitAnd(_97, _99)
  using: _97@Mir(bb23[3]), _99@Mir(bb23[5])
  _101 = Eq(_100, const 0_usize)
  using: _100@Mir(bb23[6])
  assert(_101, "misaligned pointer dereference: address must be a multiple of {} but is {}", _98, _97) -> [success: bb22, unwind unreachable]
  using: _101@Mir(bb23[7]), _98@Mir(bb23[4]), _97@Mir(bb23[3])
bb24:
  _11 = &mut ((*_1).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _102 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _103 = _102 as usize (Transmute)
  using: _102@Mir(bb24[1])
  _104 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _105 = Sub(_104, const 1_usize)
  using: _104@Mir(bb24[3])
  _106 = BitAnd(_103, _105)
  using: _103@Mir(bb24[2]), _105@Mir(bb24[4])
  _107 = Eq(_106, const 0_usize)
  using: _106@Mir(bb24[5])
  assert(_107, "misaligned pointer dereference: address must be a multiple of {} but is {}", _104, _103) -> [success: bb23, unwind unreachable]
  using: _107@Mir(bb24[6]), _104@Mir(bb24[3]), _103@Mir(bb24[2])
bb25:
  _6 = &mut ((*_1).2: u64)
  using: _1@Entry
  _8 = (*_6)
  using: _6@Mir(bb25[0])
  _10 = const 2_i32
  using: 
  _9 = move _10 as u64 (IntToInt)
  using: _10@Mir(bb25[2])
  _7 = core::num::<impl u64>::wrapping_mul(move _8, move _9) -> [return: bb2, unwind continue]
  using: _8@Mir(bb25[1]), _9@Mir(bb25[3])
bb26:
  _5 = ((*_1).2: u64)
  using: _1@Entry
  _3 = Eq(move _4, move _5)
  using: _4@Mir(bb27[0]), _5@Mir(bb26[0])
  switchInt(move _3) -> [0: bb8, otherwise: bb1]
  using: _3@Mir(bb26[1])
bb27:
  _4 = ((*_1).1: u64)
  using: _1@Entry
  _120 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _121 = _120 as usize (Transmute)
  using: _120@Mir(bb27[1])
  _122 = AlignOf(src::libtree::visited_file_array_t)
  using: 
  _123 = Sub(_122, const 1_usize)
  using: _122@Mir(bb27[3])
  _124 = BitAnd(_121, _123)
  using: _121@Mir(bb27[2]), _123@Mir(bb27[4])
  _125 = Eq(_124, const 0_usize)
  using: _124@Mir(bb27[5])
  assert(_125, "misaligned pointer dereference: address must be a multiple of {} but is {}", _122, _121) -> [success: bb26, unwind unreachable]
  using: _125@Mir(bb27[6]), _122@Mir(bb27[3]), _121@Mir(bb27[2])
@DefId(0:129 ~ lib[f5c5]::src::libtree::recurse)
bb0:
  _7 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _11 = const b"rb\x00"
  using: 
  _10 = &raw const (*_11)
  using: _11@Mir(bb0[1])
  _9 = move _10 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _10@Mir(bb0[2])
  _8 = move _9 as *const i8 (PtrToPtr)
  using: _9@Mir(bb0[3])
  _6 = src::libtree::fopen(move _7, move _8) -> [return: bb1, unwind continue]
  using: _7@Mir(bb0[0]), _8@Mir(bb0[4])
bb1:
  _13 = _6
  using: _6@Mir(bb0[5])
  _12 = std::ptr::mut_ptr::<impl *mut src::libtree::_IO_FILE>::is_null(move _13) -> [return: bb2, unwind continue]
  using: _13@Mir(bb1[0])
bb2:
  switchInt(move _12) -> [0: bb4, otherwise: bb3]
  using: _12@Mir(bb1[1])
bb3:
  _0 = const 31_i32
  using: 
  goto -> bb354
  using: 
bb4:
  _1242 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1243 = _1242 as usize (Transmute)
  using: _1242@Mir(bb4[0])
  _1244 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1245 = Sub(_1244, const 1_usize)
  using: _1244@Mir(bb4[2])
  _1246 = BitAnd(_1243, _1245)
  using: _1243@Mir(bb4[1]), _1245@Mir(bb4[3])
  _1247 = Eq(_1246, const 0_usize)
  using: _1246@Mir(bb4[4])
  assert(_1247, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1244, _1243) -> [success: bb404, unwind unreachable]
  using: _1247@Mir(bb4[5]), _1244@Mir(bb4[2]), _1243@Mir(bb4[1])
bb5:
  _27 = const 1_i32
  using: 
  _26 = move _27 as u64 (IntToInt)
  using: _27@Mir(bb5[0])
  _16 = Ne(move _17, move _26)
  using: _17@Mir(bb404[10]), _26@Mir(bb5[1])
  switchInt(move _16) -> [0: bb8, otherwise: bb6]
  using: _16@Mir(bb5[2])
bb6:
  _29 = _6
  using: _6@Mir(bb0[5])
  _28 = src::libtree::fclose(move _29) -> [return: bb7, unwind continue]
  using: _29@Mir(bb6[0])
bb7:
  _0 = const 11_i32
  using: 
  goto -> bb354
  using: 
bb8:
  _34 = const 0_i32
  using: 
  _33 = move _34 as usize (IntToInt)
  using: _34@Mir(bb8[0])
  _35 = const 16_usize
  using: 
  _36 = Lt(_33, _35)
  using: _33@Mir(bb8[1]), _35@Mir(bb8[2])
  assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _33) -> [success: bb9, unwind continue]
  using: _36@Mir(bb8[3]), _35@Mir(bb8[2]), _33@Mir(bb8[1])
bb9:
  _32 = _15[_33]
  using: _15@Mir(bb404[1]), _33@Mir(bb8[1])
  _31 = move _32 as i32 (IntToInt)
  using: _32@Mir(bb9[0])
  _37 = const 127_i32
  using: 
  _30 = Ne(move _31, move _37)
  using: _31@Mir(bb9[1]), _37@Mir(bb9[2])
  switchInt(move _30) -> [0: bb10, otherwise: bb16]
  using: _30@Mir(bb9[3])
bb10:
  _42 = const 1_i32
  using: 
  _41 = move _42 as usize (IntToInt)
  using: _42@Mir(bb10[0])
  _43 = const 16_usize
  using: 
  _44 = Lt(_41, _43)
  using: _41@Mir(bb10[1]), _43@Mir(bb10[2])
  assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _41) -> [success: bb11, unwind continue]
  using: _44@Mir(bb10[3]), _43@Mir(bb10[2]), _41@Mir(bb10[1])
bb11:
  _40 = _15[_41]
  using: _15@Mir(bb404[1]), _41@Mir(bb10[1])
  _39 = move _40 as i32 (IntToInt)
  using: _40@Mir(bb11[0])
  _45 = const 'E' as i32 (IntToInt)
  using: 
  _38 = Ne(move _39, move _45)
  using: _39@Mir(bb11[1]), _45@Mir(bb11[2])
  switchInt(move _38) -> [0: bb12, otherwise: bb16]
  using: _38@Mir(bb11[3])
bb12:
  _50 = const 2_i32
  using: 
  _49 = move _50 as usize (IntToInt)
  using: _50@Mir(bb12[0])
  _51 = const 16_usize
  using: 
  _52 = Lt(_49, _51)
  using: _49@Mir(bb12[1]), _51@Mir(bb12[2])
  assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _49) -> [success: bb13, unwind continue]
  using: _52@Mir(bb12[3]), _51@Mir(bb12[2]), _49@Mir(bb12[1])
bb13:
  _48 = _15[_49]
  using: _15@Mir(bb404[1]), _49@Mir(bb12[1])
  _47 = move _48 as i32 (IntToInt)
  using: _48@Mir(bb13[0])
  _53 = const 'L' as i32 (IntToInt)
  using: 
  _46 = Ne(move _47, move _53)
  using: _47@Mir(bb13[1]), _53@Mir(bb13[2])
  switchInt(move _46) -> [0: bb14, otherwise: bb16]
  using: _46@Mir(bb13[3])
bb14:
  _58 = const 3_i32
  using: 
  _57 = move _58 as usize (IntToInt)
  using: _58@Mir(bb14[0])
  _59 = const 16_usize
  using: 
  _60 = Lt(_57, _59)
  using: _57@Mir(bb14[1]), _59@Mir(bb14[2])
  assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _57) -> [success: bb15, unwind continue]
  using: _60@Mir(bb14[3]), _59@Mir(bb14[2]), _57@Mir(bb14[1])
bb15:
  _56 = _15[_57]
  using: _15@Mir(bb404[1]), _57@Mir(bb14[1])
  _55 = move _56 as i32 (IntToInt)
  using: _56@Mir(bb15[0])
  _61 = const 'F' as i32 (IntToInt)
  using: 
  _54 = Ne(move _55, move _61)
  using: _55@Mir(bb15[1]), _61@Mir(bb15[2])
  switchInt(move _54) -> [0: bb18, otherwise: bb16]
  using: _54@Mir(bb15[3])
bb16:
  _63 = _6
  using: _6@Mir(bb0[5])
  _62 = src::libtree::fclose(move _63) -> [return: bb17, unwind continue]
  using: _63@Mir(bb16[0])
bb17:
  _0 = const 11_i32
  using: 
  goto -> bb354
  using: 
bb18:
  _68 = const 4_i32
  using: 
  _67 = move _68 as usize (IntToInt)
  using: _68@Mir(bb18[0])
  _69 = const 16_usize
  using: 
  _70 = Lt(_67, _69)
  using: _67@Mir(bb18[1]), _69@Mir(bb18[2])
  assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _67) -> [success: bb19, unwind continue]
  using: _70@Mir(bb18[3]), _69@Mir(bb18[2]), _67@Mir(bb18[1])
bb19:
  _66 = _15[_67]
  using: _15@Mir(bb404[1]), _67@Mir(bb18[1])
  _65 = move _66 as i32 (IntToInt)
  using: _66@Mir(bb19[0])
  _71 = const 1_i32
  using: 
  _64 = Ne(move _65, move _71)
  using: _65@Mir(bb19[1]), _71@Mir(bb19[2])
  switchInt(move _64) -> [0: bb24, otherwise: bb20]
  using: _64@Mir(bb19[3])
bb20:
  _76 = const 4_i32
  using: 
  _75 = move _76 as usize (IntToInt)
  using: _76@Mir(bb20[0])
  _77 = const 16_usize
  using: 
  _78 = Lt(_75, _77)
  using: _75@Mir(bb20[1]), _77@Mir(bb20[2])
  assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _75) -> [success: bb21, unwind continue]
  using: _78@Mir(bb20[3]), _77@Mir(bb20[2]), _75@Mir(bb20[1])
bb21:
  _74 = _15[_75]
  using: _15@Mir(bb404[1]), _75@Mir(bb20[1])
  _73 = move _74 as i32 (IntToInt)
  using: _74@Mir(bb21[0])
  _79 = const 2_i32
  using: 
  _72 = Ne(move _73, move _79)
  using: _73@Mir(bb21[1]), _79@Mir(bb21[2])
  switchInt(move _72) -> [0: bb24, otherwise: bb22]
  using: _72@Mir(bb21[3])
bb22:
  _81 = _6
  using: _6@Mir(bb0[5])
  _80 = src::libtree::fclose(move _81) -> [return: bb23, unwind continue]
  using: _81@Mir(bb22[0])
bb23:
  _0 = const 12_i32
  using: 
  goto -> bb354
  using: 
bb24:
  _86 = const 5_i32
  using: 
  _85 = move _86 as usize (IntToInt)
  using: _86@Mir(bb24[0])
  _87 = const 16_usize
  using: 
  _88 = Lt(_85, _87)
  using: _85@Mir(bb24[1]), _87@Mir(bb24[2])
  assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _85) -> [success: bb25, unwind continue]
  using: _88@Mir(bb24[3]), _87@Mir(bb24[2]), _85@Mir(bb24[1])
bb25:
  _84 = _15[_85]
  using: _15@Mir(bb404[1]), _85@Mir(bb24[1])
  _83 = move _84 as i32 (IntToInt)
  using: _84@Mir(bb25[0])
  _89 = const '\u{1}' as i32 (IntToInt)
  using: 
  _82 = Ne(move _83, move _89)
  using: _83@Mir(bb25[1]), _89@Mir(bb25[2])
  switchInt(move _82) -> [0: bb30, otherwise: bb26]
  using: _82@Mir(bb25[3])
bb26:
  _94 = const 5_i32
  using: 
  _93 = move _94 as usize (IntToInt)
  using: _94@Mir(bb26[0])
  _95 = const 16_usize
  using: 
  _96 = Lt(_93, _95)
  using: _93@Mir(bb26[1]), _95@Mir(bb26[2])
  assert(move _96, "index out of bounds: the length is {} but the index is {}", move _95, _93) -> [success: bb27, unwind continue]
  using: _96@Mir(bb26[3]), _95@Mir(bb26[2]), _93@Mir(bb26[1])
bb27:
  _92 = _15[_93]
  using: _15@Mir(bb404[1]), _93@Mir(bb26[1])
  _91 = move _92 as i32 (IntToInt)
  using: _92@Mir(bb27[0])
  _97 = const '\u{2}' as i32 (IntToInt)
  using: 
  _90 = Ne(move _91, move _97)
  using: _91@Mir(bb27[1]), _97@Mir(bb27[2])
  switchInt(move _90) -> [0: bb30, otherwise: bb28]
  using: _90@Mir(bb27[3])
bb28:
  _99 = _6
  using: _6@Mir(bb0[5])
  _98 = src::libtree::fclose(move _99) -> [return: bb29, unwind continue]
  using: _99@Mir(bb28[0])
bb29:
  _0 = const 13_i32
  using: 
  goto -> bb354
  using: 
bb30:
  _103 = const 0_i32
  using: 
  _102 = move _103 as i8 (IntToInt)
  using: _103@Mir(bb30[0])
  _107 = const 4_i32
  using: 
  _106 = move _107 as usize (IntToInt)
  using: _107@Mir(bb30[2])
  _108 = const 16_usize
  using: 
  _109 = Lt(_106, _108)
  using: _106@Mir(bb30[3]), _108@Mir(bb30[4])
  assert(move _109, "index out of bounds: the length is {} but the index is {}", move _108, _106) -> [success: bb31, unwind continue]
  using: _109@Mir(bb30[5]), _108@Mir(bb30[4]), _106@Mir(bb30[3])
bb31:
  _105 = _15[_106]
  using: _15@Mir(bb404[1]), _106@Mir(bb30[3])
  _104 = move _105 as u8 (IntToInt)
  using: _105@Mir(bb31[0])
  _101 = src::libtree::compat_t { any: move _102, class: move _104, machine: const 0_u16 }
  using: _102@Mir(bb30[1]), _104@Mir(bb31[1])
  _100 = _101
  using: _101@Mir(bb31[2])
  _115 = const 5_i32
  using: 
  _114 = move _115 as usize (IntToInt)
  using: _115@Mir(bb31[4])
  _116 = const 16_usize
  using: 
  _117 = Lt(_114, _116)
  using: _114@Mir(bb31[5]), _116@Mir(bb31[6])
  assert(move _117, "index out of bounds: the length is {} but the index is {}", move _116, _114) -> [success: bb32, unwind continue]
  using: _117@Mir(bb31[7]), _116@Mir(bb31[6]), _114@Mir(bb31[5])
bb32:
  _113 = _15[_114]
  using: _15@Mir(bb404[1]), _114@Mir(bb31[5])
  _112 = move _113 as i32 (IntToInt)
  using: _113@Mir(bb32[0])
  _118 = const '\u{1}' as i32 (IntToInt)
  using: 
  _111 = Eq(move _112, move _118)
  using: _112@Mir(bb32[1]), _118@Mir(bb32[2])
  _110 = move _111 as i32 (IntToInt)
  using: _111@Mir(bb32[3])
  _119 = (_4.0: i8)
  using: _4@Entry
  switchInt(move _119) -> [0: bb33, otherwise: bb36]
  using: _119@Mir(bb32[5])
bb33:
  _122 = (_4.1: u8)
  using: _4@Entry
  _121 = move _122 as i32 (IntToInt)
  using: _122@Mir(bb33[0])
  _124 = (_100.1: u8)
  using: _100@Mir(bb31[3])
  _123 = move _124 as i32 (IntToInt)
  using: _124@Mir(bb33[2])
  _120 = Ne(move _121, move _123)
  using: _121@Mir(bb33[1]), _123@Mir(bb33[3])
  switchInt(move _120) -> [0: bb36, otherwise: bb34]
  using: _120@Mir(bb33[4])
bb34:
  _126 = _6
  using: _6@Mir(bb0[5])
  _125 = src::libtree::fclose(move _126) -> [return: bb35, unwind continue]
  using: _126@Mir(bb34[0])
bb35:
  _0 = const 15_i32
  using: 
  goto -> bb354
  using: 
bb36:
  _128 = src::libtree::host_is_little_endian() -> [return: bb37, unwind continue]
  using: 
bb37:
  _127 = BitXor(_110, move _128)
  using: _110@Mir(bb32[4]), _128@Mir(bb36[0])
  switchInt(move _127) -> [0: bb40, otherwise: bb38]
  using: _127@Mir(bb37[0])
bb38:
  _130 = _6
  using: _6@Mir(bb0[5])
  _129 = src::libtree::fclose(move _130) -> [return: bb39, unwind continue]
  using: _130@Mir(bb38[0])
bb39:
  _0 = const 16_i32
  using: 
  goto -> bb354
  using: 
bb40:
  _132 = src::libtree::header_64_t { e_type: const 0_u16, e_machine: const 0_u16, e_version: const 0_u32, e_entry: const 0_u64, e_phoff: const 0_u64, e_shoff: const 0_u64, e_flags: const 0_u32, e_ehsize: const 0_u16, e_phentsize: const 0_u16, e_phnum: const 0_u16, e_shentsize: const 0_u16, e_shnum: const 0_u16, e_shstrndx: const 0_u16 }
  using: 
  _131 = src::libtree::C2RustUnnamed_1 { h64: move _132 }
  using: _132@Mir(bb40[0])
  _135 = (_100.1: u8)
  using: _100@Mir(bb31[3])
  _134 = move _135 as i32 (IntToInt)
  using: _135@Mir(bb40[2])
  _136 = const 2_i32
  using: 
  _133 = Eq(move _134, move _136)
  using: _134@Mir(bb40[3]), _136@Mir(bb40[4])
  switchInt(move _133) -> [0: bb42, otherwise: bb41]
  using: _133@Mir(bb40[5])
bb41:
  _141 = &mut (_131.0: src::libtree::header_64_t)
  using: _131@Mir(bb40[1])
  _140 = &raw mut (*_141)
  using: _141@Mir(bb41[0])
  _139 = move _140 as *mut libc::c_void (PtrToPtr)
  using: _140@Mir(bb41[1])
  _143 = std::mem::size_of::<src::libtree::header_64_t>() -> [return: bb43, unwind continue]
  using: 
bb42:
  _183 = &mut (_131.1: src::libtree::header_32_t)
  using: _131@Mir(bb40[1])
  _182 = &raw mut (*_183)
  using: _183@Mir(bb42[0])
  _181 = move _182 as *mut libc::c_void (PtrToPtr)
  using: _182@Mir(bb42[1])
  _185 = std::mem::size_of::<src::libtree::header_32_t>() -> [return: bb59, unwind continue]
  using: 
bb43:
  _142 = move _143 as u64 (IntToInt)
  using: _143@Mir(bb41[3])
  _145 = const 1_i32
  using: 
  _144 = move _145 as u64 (IntToInt)
  using: _145@Mir(bb43[1])
  _146 = _6
  using: _6@Mir(bb0[5])
  _138 = src::libtree::fread(move _139, move _142, move _144, move _146) -> [return: bb44, unwind continue]
  using: _139@Mir(bb41[2]), _142@Mir(bb43[0]), _144@Mir(bb43[2]), _146@Mir(bb43[3])
bb44:
  _148 = const 1_i32
  using: 
  _147 = move _148 as u64 (IntToInt)
  using: _148@Mir(bb44[0])
  _137 = Ne(move _138, move _147)
  using: _138@Mir(bb43[4]), _147@Mir(bb44[1])
  switchInt(move _137) -> [0: bb47, otherwise: bb45]
  using: _137@Mir(bb44[2])
bb45:
  _150 = _6
  using: _6@Mir(bb0[5])
  _149 = src::libtree::fclose(move _150) -> [return: bb46, unwind continue]
  using: _150@Mir(bb45[0])
bb46:
  _0 = const 14_i32
  using: 
  goto -> bb354
  using: 
bb47:
  _153 = ((_131.0: src::libtree::header_64_t).0: u16)
  using: _131@Mir(bb40[1])
  _152 = move _153 as i32 (IntToInt)
  using: _153@Mir(bb47[0])
  _154 = const 2_i32
  using: 
  _151 = Ne(move _152, move _154)
  using: _152@Mir(bb47[1]), _154@Mir(bb47[2])
  switchInt(move _151) -> [0: bb51, otherwise: bb48]
  using: _151@Mir(bb47[3])
bb48:
  _157 = ((_131.0: src::libtree::header_64_t).0: u16)
  using: _131@Mir(bb40[1])
  _156 = move _157 as i32 (IntToInt)
  using: _157@Mir(bb48[0])
  _158 = const 3_i32
  using: 
  _155 = Ne(move _156, move _158)
  using: _156@Mir(bb48[1]), _158@Mir(bb48[2])
  switchInt(move _155) -> [0: bb51, otherwise: bb49]
  using: _155@Mir(bb48[3])
bb49:
  _160 = _6
  using: _6@Mir(bb0[5])
  _159 = src::libtree::fclose(move _160) -> [return: bb50, unwind continue]
  using: _160@Mir(bb49[0])
bb50:
  _0 = const 17_i32
  using: 
  goto -> bb354
  using: 
bb51:
  _161 = ((_131.0: src::libtree::header_64_t).1: u16)
  using: _131@Mir(bb40[1])
  (_100.2: u16) = move _161
  using: _161@Mir(bb51[0])
  _162 = (_4.0: i8)
  using: _4@Entry
  switchInt(move _162) -> [0: bb52, otherwise: bb55]
  using: _162@Mir(bb51[2])
bb52:
  _165 = (_4.2: u16)
  using: _4@Entry
  _164 = move _165 as i32 (IntToInt)
  using: _165@Mir(bb52[0])
  _167 = (_100.2: u16)
  using: _100@Mir(bb31[3])
  _166 = move _167 as i32 (IntToInt)
  using: _167@Mir(bb52[2])
  _163 = Ne(move _164, move _166)
  using: _164@Mir(bb52[1]), _166@Mir(bb52[3])
  switchInt(move _163) -> [0: bb55, otherwise: bb53]
  using: _163@Mir(bb52[4])
bb53:
  _169 = _6
  using: _6@Mir(bb0[5])
  _168 = src::libtree::fclose(move _169) -> [return: bb54, unwind continue]
  using: _169@Mir(bb53[0])
bb54:
  _0 = const 32_i32
  using: 
  goto -> bb354
  using: 
bb55:
  _172 = _6
  using: _6@Mir(bb0[5])
  _174 = ((_131.0: src::libtree::header_64_t).4: u64)
  using: _131@Mir(bb40[1])
  _173 = move _174 as i64 (IntToInt)
  using: _174@Mir(bb55[1])
  _175 = const 0_i32
  using: 
  _171 = src::libtree::fseek(move _172, move _173, move _175) -> [return: bb56, unwind continue]
  using: _172@Mir(bb55[0]), _173@Mir(bb55[2]), _175@Mir(bb55[3])
bb56:
  _176 = const 0_i32
  using: 
  _170 = Ne(move _171, move _176)
  using: _171@Mir(bb55[4]), _176@Mir(bb56[0])
  switchInt(move _170) -> [0: bb75, otherwise: bb57]
  using: _170@Mir(bb56[1])
bb57:
  _178 = _6
  using: _6@Mir(bb0[5])
  _177 = src::libtree::fclose(move _178) -> [return: bb58, unwind continue]
  using: _178@Mir(bb57[0])
bb58:
  _0 = const 18_i32
  using: 
  goto -> bb354
  using: 
bb59:
  _184 = move _185 as u64 (IntToInt)
  using: _185@Mir(bb42[3])
  _187 = const 1_i32
  using: 
  _186 = move _187 as u64 (IntToInt)
  using: _187@Mir(bb59[1])
  _188 = _6
  using: _6@Mir(bb0[5])
  _180 = src::libtree::fread(move _181, move _184, move _186, move _188) -> [return: bb60, unwind continue]
  using: _181@Mir(bb42[2]), _184@Mir(bb59[0]), _186@Mir(bb59[2]), _188@Mir(bb59[3])
bb60:
  _190 = const 1_i32
  using: 
  _189 = move _190 as u64 (IntToInt)
  using: _190@Mir(bb60[0])
  _179 = Ne(move _180, move _189)
  using: _180@Mir(bb59[4]), _189@Mir(bb60[1])
  switchInt(move _179) -> [0: bb63, otherwise: bb61]
  using: _179@Mir(bb60[2])
bb61:
  _192 = _6
  using: _6@Mir(bb0[5])
  _191 = src::libtree::fclose(move _192) -> [return: bb62, unwind continue]
  using: _192@Mir(bb61[0])
bb62:
  _0 = const 14_i32
  using: 
  goto -> bb354
  using: 
bb63:
  _195 = ((_131.1: src::libtree::header_32_t).0: u16)
  using: _131@Mir(bb40[1])
  _194 = move _195 as i32 (IntToInt)
  using: _195@Mir(bb63[0])
  _196 = const 2_i32
  using: 
  _193 = Ne(move _194, move _196)
  using: _194@Mir(bb63[1]), _196@Mir(bb63[2])
  switchInt(move _193) -> [0: bb67, otherwise: bb64]
  using: _193@Mir(bb63[3])
bb64:
  _199 = ((_131.1: src::libtree::header_32_t).0: u16)
  using: _131@Mir(bb40[1])
  _198 = move _199 as i32 (IntToInt)
  using: _199@Mir(bb64[0])
  _200 = const 3_i32
  using: 
  _197 = Ne(move _198, move _200)
  using: _198@Mir(bb64[1]), _200@Mir(bb64[2])
  switchInt(move _197) -> [0: bb67, otherwise: bb65]
  using: _197@Mir(bb64[3])
bb65:
  _202 = _6
  using: _6@Mir(bb0[5])
  _201 = src::libtree::fclose(move _202) -> [return: bb66, unwind continue]
  using: _202@Mir(bb65[0])
bb66:
  _0 = const 17_i32
  using: 
  goto -> bb354
  using: 
bb67:
  _203 = ((_131.1: src::libtree::header_32_t).1: u16)
  using: _131@Mir(bb40[1])
  (_100.2: u16) = move _203
  using: _203@Mir(bb67[0])
  _204 = (_4.0: i8)
  using: _4@Entry
  switchInt(move _204) -> [0: bb68, otherwise: bb71]
  using: _204@Mir(bb67[2])
bb68:
  _207 = (_4.2: u16)
  using: _4@Entry
  _206 = move _207 as i32 (IntToInt)
  using: _207@Mir(bb68[0])
  _209 = (_100.2: u16)
  using: _100@Mir(bb31[3])
  _208 = move _209 as i32 (IntToInt)
  using: _209@Mir(bb68[2])
  _205 = Ne(move _206, move _208)
  using: _206@Mir(bb68[1]), _208@Mir(bb68[3])
  switchInt(move _205) -> [0: bb71, otherwise: bb69]
  using: _205@Mir(bb68[4])
bb69:
  _211 = _6
  using: _6@Mir(bb0[5])
  _210 = src::libtree::fclose(move _211) -> [return: bb70, unwind continue]
  using: _211@Mir(bb69[0])
bb70:
  _0 = const 32_i32
  using: 
  goto -> bb354
  using: 
bb71:
  _214 = _6
  using: _6@Mir(bb0[5])
  _216 = ((_131.1: src::libtree::header_32_t).4: u32)
  using: _131@Mir(bb40[1])
  _215 = move _216 as i64 (IntToInt)
  using: _216@Mir(bb71[1])
  _217 = const 0_i32
  using: 
  _213 = src::libtree::fseek(move _214, move _215, move _217) -> [return: bb72, unwind continue]
  using: _214@Mir(bb71[0]), _215@Mir(bb71[2]), _217@Mir(bb71[3])
bb72:
  _218 = const 0_i32
  using: 
  _212 = Ne(move _213, move _218)
  using: _213@Mir(bb71[4]), _218@Mir(bb72[0])
  switchInt(move _212) -> [0: bb75, otherwise: bb73]
  using: _212@Mir(bb72[1])
bb73:
  _220 = _6
  using: _6@Mir(bb0[5])
  _219 = src::libtree::fclose(move _220) -> [return: bb74, unwind continue]
  using: _220@Mir(bb73[0])
bb74:
  _0 = const 18_i32
  using: 
  goto -> bb354
  using: 
bb75:
  _222 = src::libtree::prog_64_t { p_type: const 0_u32, p_flags: const 0_u32, p_offset: const 0_u64, p_vaddr: const 0_u64, p_paddr: const 0_u64, p_filesz: const 0_u64, p_memsz: const 0_u64, p_align: const 0_u64 }
  using: 
  _221 = src::libtree::C2RustUnnamed_0 { p64: move _222 }
  using: _222@Mir(bb75[0])
  _224 = [const 0_u64; 16]
  using: 
  _225 = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: 
  _223 = src::libtree::small_vec_u64_t { buf: move _224, p: move _225, n: const 0_u64, capacity: const 0_u64 }
  using: _224@Mir(bb75[2]), _225@Mir(bb75[3])
  _227 = [const 0_u64; 16]
  using: 
  _228 = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: 
  _226 = src::libtree::small_vec_u64_t { buf: move _227, p: move _228, n: const 0_u64, capacity: const 0_u64 }
  using: _227@Mir(bb75[5]), _228@Mir(bb75[6])
  _231 = &mut _223
  using: _223@Mir(bb75[4])
  _230 = &raw mut (*_231)
  using: _231@Mir(bb75[8])
  _229 = src::libtree::small_vec_u64_init(move _230) -> [return: bb76, unwind continue]
  using: _230@Mir(bb75[9])
bb76:
  _234 = &mut _226
  using: _226@Mir(bb75[7])
  _233 = &raw mut (*_234)
  using: _234@Mir(bb76[0])
  _232 = src::libtree::small_vec_u64_init(move _233) -> [return: bb77, unwind continue]
  using: _233@Mir(bb76[1])
bb77:
  _235 = const u64::MAX
  using: 
  _238 = (_100.1: u8)
  using: _100@Mir(bb31[3])
  _237 = move _238 as i32 (IntToInt)
  using: _238@Mir(bb77[1])
  _239 = const 2_i32
  using: 
  _236 = Eq(move _237, move _239)
  using: _237@Mir(bb77[2]), _239@Mir(bb77[3])
  switchInt(move _236) -> [0: bb94, otherwise: bb78]
  using: _236@Mir(bb77[4])
bb78:
  _241 = const 0_i32
  using: 
  _240 = move _241 as u64 (IntToInt)
  using: _241@Mir(bb78[0])
  goto -> bb79
  using: 
bb79:
  _243 = _240
  using: _240@Phi(bb79)
  _245 = ((_131.0: src::libtree::header_64_t).9: u16)
  using: _131@Mir(bb40[1])
  _244 = move _245 as u64 (IntToInt)
  using: _245@Mir(bb79[1])
  _242 = Lt(move _243, move _244)
  using: _243@Mir(bb79[0]), _244@Mir(bb79[2])
  switchInt(move _242) -> [0: bb110, otherwise: bb80]
  using: _242@Mir(bb79[3])
bb80:
  _250 = &mut (_221.0: src::libtree::prog_64_t)
  using: _221@Mir(bb75[1])
  _249 = &raw mut (*_250)
  using: _250@Mir(bb80[0])
  _248 = move _249 as *mut libc::c_void (PtrToPtr)
  using: _249@Mir(bb80[1])
  _252 = std::mem::size_of::<src::libtree::prog_64_t>() -> [return: bb81, unwind continue]
  using: 
bb81:
  _251 = move _252 as u64 (IntToInt)
  using: _252@Mir(bb80[3])
  _254 = const 1_i32
  using: 
  _253 = move _254 as u64 (IntToInt)
  using: _254@Mir(bb81[1])
  _255 = _6
  using: _6@Mir(bb0[5])
  _247 = src::libtree::fread(move _248, move _251, move _253, move _255) -> [return: bb82, unwind continue]
  using: _248@Mir(bb80[2]), _251@Mir(bb81[0]), _253@Mir(bb81[2]), _255@Mir(bb81[3])
bb82:
  _257 = const 1_i32
  using: 
  _256 = move _257 as u64 (IntToInt)
  using: _257@Mir(bb82[0])
  _246 = Ne(move _247, move _256)
  using: _247@Mir(bb81[4]), _256@Mir(bb82[1])
  switchInt(move _246) -> [0: bb87, otherwise: bb83]
  using: _246@Mir(bb82[2])
bb83:
  _259 = _6
  using: _6@Mir(bb0[5])
  _258 = src::libtree::fclose(move _259) -> [return: bb84, unwind continue]
  using: _259@Mir(bb83[0])
bb84:
  _262 = &mut _223
  using: _223@Mir(bb75[4])
  _261 = &raw mut (*_262)
  using: _262@Mir(bb84[0])
  _260 = src::libtree::small_vec_u64_free(move _261) -> [return: bb85, unwind continue]
  using: _261@Mir(bb84[1])
bb85:
  _265 = &mut _226
  using: _226@Mir(bb75[7])
  _264 = &raw mut (*_265)
  using: _265@Mir(bb85[0])
  _263 = src::libtree::small_vec_u64_free(move _264) -> [return: bb86, unwind continue]
  using: _264@Mir(bb85[1])
bb86:
  _0 = const 19_i32
  using: 
  goto -> bb354
  using: 
bb87:
  _267 = ((_221.0: src::libtree::prog_64_t).0: u32)
  using: _221@Mir(bb75[1])
  _269 = const 1_i32
  using: 
  _268 = move _269 as u32 (IntToInt)
  using: _269@Mir(bb87[1])
  _266 = Eq(move _267, move _268)
  using: _267@Mir(bb87[0]), _268@Mir(bb87[2])
  switchInt(move _266) -> [0: bb89, otherwise: bb88]
  using: _266@Mir(bb87[3])
bb88:
  _272 = &mut _223
  using: _223@Mir(bb75[4])
  _271 = &raw mut (*_272)
  using: _272@Mir(bb88[0])
  _273 = ((_221.0: src::libtree::prog_64_t).2: u64)
  using: _221@Mir(bb75[1])
  _270 = src::libtree::small_vec_u64_append(move _271, move _273) -> [return: bb90, unwind continue]
  using: _271@Mir(bb88[1]), _273@Mir(bb88[2])
bb89:
  _279 = ((_221.0: src::libtree::prog_64_t).0: u32)
  using: _221@Mir(bb75[1])
  _281 = const 2_i32
  using: 
  _280 = move _281 as u32 (IntToInt)
  using: _281@Mir(bb89[1])
  _278 = Eq(move _279, move _280)
  using: _279@Mir(bb89[0]), _280@Mir(bb89[2])
  switchInt(move _278) -> [0: bb92, otherwise: bb91]
  using: _278@Mir(bb89[3])
bb90:
  _276 = &mut _226
  using: _226@Mir(bb75[7])
  _275 = &raw mut (*_276)
  using: _276@Mir(bb90[0])
  _277 = ((_221.0: src::libtree::prog_64_t).3: u64)
  using: _221@Mir(bb75[1])
  _274 = src::libtree::small_vec_u64_append(move _275, move _277) -> [return: bb92, unwind continue]
  using: _275@Mir(bb90[1]), _277@Mir(bb90[2])
bb91:
  _282 = ((_221.0: src::libtree::prog_64_t).2: u64)
  using: _221@Mir(bb75[1])
  _235 = move _282
  using: _282@Mir(bb91[0])
  goto -> bb92
  using: 
bb92:
  _284 = _240
  using: _240@Phi(bb79)
  _283 = core::num::<impl u64>::wrapping_add(move _284, const 1_u64) -> [return: bb93, unwind continue]
  using: _284@Mir(bb92[0])
bb93:
  _240 = move _283
  using: _283@Mir(bb92[1])
  goto -> bb79
  using: 
bb94:
  _286 = const 0_i32
  using: 
  _285 = move _286 as u32 (IntToInt)
  using: _286@Mir(bb94[0])
  goto -> bb95
  using: 
bb95:
  _288 = _285
  using: _285@Phi(bb95)
  _290 = ((_131.1: src::libtree::header_32_t).9: u16)
  using: _131@Mir(bb40[1])
  _289 = move _290 as u32 (IntToInt)
  using: _290@Mir(bb95[1])
  _287 = Lt(move _288, move _289)
  using: _288@Mir(bb95[0]), _289@Mir(bb95[2])
  switchInt(move _287) -> [0: bb110, otherwise: bb96]
  using: _287@Mir(bb95[3])
bb96:
  _295 = &mut (_221.1: src::libtree::prog_32_t)
  using: _221@Mir(bb75[1])
  _294 = &raw mut (*_295)
  using: _295@Mir(bb96[0])
  _293 = move _294 as *mut libc::c_void (PtrToPtr)
  using: _294@Mir(bb96[1])
  _297 = std::mem::size_of::<src::libtree::prog_32_t>() -> [return: bb97, unwind continue]
  using: 
bb97:
  _296 = move _297 as u64 (IntToInt)
  using: _297@Mir(bb96[3])
  _299 = const 1_i32
  using: 
  _298 = move _299 as u64 (IntToInt)
  using: _299@Mir(bb97[1])
  _300 = _6
  using: _6@Mir(bb0[5])
  _292 = src::libtree::fread(move _293, move _296, move _298, move _300) -> [return: bb98, unwind continue]
  using: _293@Mir(bb96[2]), _296@Mir(bb97[0]), _298@Mir(bb97[2]), _300@Mir(bb97[3])
bb98:
  _302 = const 1_i32
  using: 
  _301 = move _302 as u64 (IntToInt)
  using: _302@Mir(bb98[0])
  _291 = Ne(move _292, move _301)
  using: _292@Mir(bb97[4]), _301@Mir(bb98[1])
  switchInt(move _291) -> [0: bb103, otherwise: bb99]
  using: _291@Mir(bb98[2])
bb99:
  _304 = _6
  using: _6@Mir(bb0[5])
  _303 = src::libtree::fclose(move _304) -> [return: bb100, unwind continue]
  using: _304@Mir(bb99[0])
bb100:
  _307 = &mut _223
  using: _223@Mir(bb75[4])
  _306 = &raw mut (*_307)
  using: _307@Mir(bb100[0])
  _305 = src::libtree::small_vec_u64_free(move _306) -> [return: bb101, unwind continue]
  using: _306@Mir(bb100[1])
bb101:
  _310 = &mut _226
  using: _226@Mir(bb75[7])
  _309 = &raw mut (*_310)
  using: _310@Mir(bb101[0])
  _308 = src::libtree::small_vec_u64_free(move _309) -> [return: bb102, unwind continue]
  using: _309@Mir(bb101[1])
bb102:
  _0 = const 19_i32
  using: 
  goto -> bb354
  using: 
bb103:
  _312 = ((_221.1: src::libtree::prog_32_t).0: u32)
  using: _221@Mir(bb75[1])
  _314 = const 1_i32
  using: 
  _313 = move _314 as u32 (IntToInt)
  using: _314@Mir(bb103[1])
  _311 = Eq(move _312, move _313)
  using: _312@Mir(bb103[0]), _313@Mir(bb103[2])
  switchInt(move _311) -> [0: bb105, otherwise: bb104]
  using: _311@Mir(bb103[3])
bb104:
  _317 = &mut _223
  using: _223@Mir(bb75[4])
  _316 = &raw mut (*_317)
  using: _317@Mir(bb104[0])
  _319 = ((_221.1: src::libtree::prog_32_t).1: u32)
  using: _221@Mir(bb75[1])
  _318 = move _319 as u64 (IntToInt)
  using: _319@Mir(bb104[2])
  _315 = src::libtree::small_vec_u64_append(move _316, move _318) -> [return: bb106, unwind continue]
  using: _316@Mir(bb104[1]), _318@Mir(bb104[3])
bb105:
  _326 = ((_221.1: src::libtree::prog_32_t).0: u32)
  using: _221@Mir(bb75[1])
  _328 = const 2_i32
  using: 
  _327 = move _328 as u32 (IntToInt)
  using: _328@Mir(bb105[1])
  _325 = Eq(move _326, move _327)
  using: _326@Mir(bb105[0]), _327@Mir(bb105[2])
  switchInt(move _325) -> [0: bb108, otherwise: bb107]
  using: _325@Mir(bb105[3])
bb106:
  _322 = &mut _226
  using: _226@Mir(bb75[7])
  _321 = &raw mut (*_322)
  using: _322@Mir(bb106[0])
  _324 = ((_221.1: src::libtree::prog_32_t).2: u32)
  using: _221@Mir(bb75[1])
  _323 = move _324 as u64 (IntToInt)
  using: _324@Mir(bb106[2])
  _320 = src::libtree::small_vec_u64_append(move _321, move _323) -> [return: bb108, unwind continue]
  using: _321@Mir(bb106[1]), _323@Mir(bb106[3])
bb107:
  _329 = ((_221.1: src::libtree::prog_32_t).1: u32)
  using: _221@Mir(bb75[1])
  _235 = move _329 as u64 (IntToInt)
  using: _329@Mir(bb107[0])
  goto -> bb108
  using: 
bb108:
  _331 = _285
  using: _285@Phi(bb95)
  _330 = core::num::<impl u32>::wrapping_add(move _331, const 1_u32) -> [return: bb109, unwind continue]
  using: _331@Mir(bb108[0])
bb109:
  _285 = move _330
  using: _330@Mir(bb108[1])
  goto -> bb95
  using: 
bb110:
  _333 = [const 0_i64; 3]
  using: 
  _332 = src::libtree::stat { st_dev: const 0_u64, st_ino: const 0_u64, st_nlink: const 0_u64, st_mode: const 0_u32, st_uid: const 0_u32, st_gid: const 0_u32, __pad0: const 0_i32, st_rdev: const 0_u64, st_size: const 0_i64, st_blksize: const 0_i64, st_blocks: const 0_i64, st_atime: const 0_i64, st_atimensec: const 0_u64, st_mtime: const 0_i64, st_mtimensec: const 0_u64, st_ctime: const 0_i64, st_ctimensec: const 0_u64, __glibc_reserved: move _333 }
  using: _333@Mir(bb110[0])
  _336 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _338 = &mut _332
  using: _332@Mir(bb110[1])
  _337 = &raw mut (*_338)
  using: _338@Mir(bb110[3])
  _335 = src::libtree::stat(move _336, move _337) -> [return: bb111, unwind continue]
  using: _336@Mir(bb110[2]), _337@Mir(bb110[4])
bb111:
  _339 = const 0_i32
  using: 
  _334 = Ne(move _335, move _339)
  using: _335@Mir(bb110[5]), _339@Mir(bb111[0])
  switchInt(move _334) -> [0: bb116, otherwise: bb112]
  using: _334@Mir(bb111[1])
bb112:
  _341 = _6
  using: _6@Mir(bb0[5])
  _340 = src::libtree::fclose(move _341) -> [return: bb113, unwind continue]
  using: _341@Mir(bb112[0])
bb113:
  _344 = &mut _223
  using: _223@Mir(bb75[4])
  _343 = &raw mut (*_344)
  using: _344@Mir(bb113[0])
  _342 = src::libtree::small_vec_u64_free(move _343) -> [return: bb114, unwind continue]
  using: _343@Mir(bb113[1])
bb114:
  _347 = &mut _226
  using: _226@Mir(bb75[7])
  _346 = &raw mut (*_347)
  using: _347@Mir(bb114[0])
  _345 = src::libtree::small_vec_u64_free(move _346) -> [return: bb115, unwind continue]
  using: _346@Mir(bb114[1])
bb115:
  _0 = const 20_i32
  using: 
  goto -> bb354
  using: 
bb116:
  _1236 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1237 = _1236 as usize (Transmute)
  using: _1236@Mir(bb116[0])
  _1238 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1239 = Sub(_1238, const 1_usize)
  using: _1238@Mir(bb116[2])
  _1240 = BitAnd(_1237, _1239)
  using: _1237@Mir(bb116[1]), _1239@Mir(bb116[3])
  _1241 = Eq(_1240, const 0_usize)
  using: _1240@Mir(bb116[4])
  assert(_1241, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1238, _1237) -> [success: bb403, unwind unreachable]
  using: _1241@Mir(bb116[5]), _1238@Mir(bb116[2]), _1237@Mir(bb116[1])
bb117:
  _353 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _353) -> [0: bb118, otherwise: bb119]
  using: _353@Mir(bb117[0])
bb118:
  _1230 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1231 = _1230 as usize (Transmute)
  using: _1230@Mir(bb118[0])
  _1232 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1233 = Sub(_1232, const 1_usize)
  using: _1232@Mir(bb118[2])
  _1234 = BitAnd(_1231, _1233)
  using: _1231@Mir(bb118[1]), _1233@Mir(bb118[3])
  _1235 = Eq(_1234, const 0_usize)
  using: _1234@Mir(bb118[4])
  assert(_1235, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1232, _1231) -> [success: bb402, unwind unreachable]
  using: _1235@Mir(bb118[5]), _1232@Mir(bb118[2]), _1231@Mir(bb118[1])
bb119:
  _360 = _235
  using: _235@Phi(bb110)
  _361 = const u64::MAX
  using: 
  _359 = Eq(move _360, move _361)
  using: _360@Mir(bb119[0]), _361@Mir(bb119[1])
  switchInt(move _359) -> [0: bb125, otherwise: bb120]
  using: _359@Mir(bb119[2])
bb120:
  _367 = const b"\x1b[1;36m\x00"
  using: 
  _366 = &raw const (*_367)
  using: _367@Mir(bb120[0])
  _365 = move _366 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _366@Mir(bb120[1])
  _364 = move _365 as *const i8 (PtrToPtr)
  using: _365@Mir(bb120[2])
  _363 = move _364 as *mut i8 (PtrToPtr)
  using: _364@Mir(bb120[3])
  _372 = const b"\x1b[0;36m\x00"
  using: 
  _371 = &raw const (*_372)
  using: _372@Mir(bb120[5])
  _370 = move _371 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _371@Mir(bb120[6])
  _369 = move _370 as *const i8 (PtrToPtr)
  using: _370@Mir(bb120[7])
  _368 = move _369 as *mut i8 (PtrToPtr)
  using: _369@Mir(bb120[8])
  _373 = const 1_i32
  using: 
  _362 = src::libtree::print_line(_2, _1, move _363, move _368, move _373, _5, _3) -> [return: bb121, unwind continue]
  using: _2@Entry, _1@Entry, _363@Mir(bb120[4]), _368@Mir(bb120[9]), _373@Mir(bb120[10]), _5@Entry, _3@Entry
bb121:
  _375 = _6
  using: _6@Mir(bb0[5])
  _374 = src::libtree::fclose(move _375) -> [return: bb122, unwind continue]
  using: _375@Mir(bb121[0])
bb122:
  _378 = &mut _223
  using: _223@Mir(bb75[4])
  _377 = &raw mut (*_378)
  using: _378@Mir(bb122[0])
  _376 = src::libtree::small_vec_u64_free(move _377) -> [return: bb123, unwind continue]
  using: _377@Mir(bb122[1])
bb123:
  _381 = &mut _226
  using: _226@Mir(bb75[7])
  _380 = &raw mut (*_381)
  using: _381@Mir(bb123[0])
  _379 = src::libtree::small_vec_u64_free(move _380) -> [return: bb124, unwind continue]
  using: _380@Mir(bb123[1])
bb124:
  _0 = const 0_i32
  using: 
  goto -> bb354
  using: 
bb125:
  _383 = (_223.2: u64)
  using: _223@Mir(bb75[4])
  _385 = const 0_i32
  using: 
  _384 = move _385 as u64 (IntToInt)
  using: _385@Mir(bb125[1])
  _382 = Eq(move _383, move _384)
  using: _383@Mir(bb125[0]), _384@Mir(bb125[2])
  switchInt(move _382) -> [0: bb127, otherwise: bb126]
  using: _382@Mir(bb125[3])
bb126:
  _387 = _6
  using: _6@Mir(bb0[5])
  _386 = src::libtree::fclose(move _387) -> [return: bb128, unwind continue]
  using: _387@Mir(bb126[0])
bb127:
  _396 = _6
  using: _6@Mir(bb0[5])
  _398 = _235
  using: _235@Phi(bb110)
  _397 = move _398 as i64 (IntToInt)
  using: _398@Mir(bb127[1])
  _399 = const 0_i32
  using: 
  _395 = src::libtree::fseek(move _396, move _397, move _399) -> [return: bb131, unwind continue]
  using: _396@Mir(bb127[0]), _397@Mir(bb127[2]), _399@Mir(bb127[3])
bb128:
  _390 = &mut _223
  using: _223@Mir(bb75[4])
  _389 = &raw mut (*_390)
  using: _390@Mir(bb128[0])
  _388 = src::libtree::small_vec_u64_free(move _389) -> [return: bb129, unwind continue]
  using: _389@Mir(bb128[1])
bb129:
  _393 = &mut _226
  using: _226@Mir(bb75[7])
  _392 = &raw mut (*_393)
  using: _393@Mir(bb129[0])
  _391 = src::libtree::small_vec_u64_free(move _392) -> [return: bb130, unwind continue]
  using: _392@Mir(bb129[1])
bb130:
  _0 = const 29_i32
  using: 
  goto -> bb354
  using: 
bb131:
  _400 = const 0_i32
  using: 
  _394 = Ne(move _395, move _400)
  using: _395@Mir(bb127[4]), _400@Mir(bb131[0])
  switchInt(move _394) -> [0: bb136, otherwise: bb132]
  using: _394@Mir(bb131[1])
bb132:
  _402 = _6
  using: _6@Mir(bb0[5])
  _401 = src::libtree::fclose(move _402) -> [return: bb133, unwind continue]
  using: _402@Mir(bb132[0])
bb133:
  _405 = &mut _223
  using: _223@Mir(bb75[4])
  _404 = &raw mut (*_405)
  using: _405@Mir(bb133[0])
  _403 = src::libtree::small_vec_u64_free(move _404) -> [return: bb134, unwind continue]
  using: _404@Mir(bb133[1])
bb134:
  _408 = &mut _226
  using: _226@Mir(bb75[7])
  _407 = &raw mut (*_408)
  using: _408@Mir(bb134[0])
  _406 = src::libtree::small_vec_u64_free(move _407) -> [return: bb135, unwind continue]
  using: _407@Mir(bb134[1])
bb135:
  _0 = const 21_i32
  using: 
  goto -> bb354
  using: 
bb136:
  _409 = const 0_i32
  using: 
  _410 = const u64::MAX
  using: 
  _411 = const u64::MAX
  using: 
  _412 = const u64::MAX
  using: 
  _413 = const u64::MAX
  using: 
  _415 = [const 0_u64; 16]
  using: 
  _416 = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: 
  _414 = src::libtree::small_vec_u64_t { buf: move _415, p: move _416, n: const 0_u64, capacity: const 0_u64 }
  using: _415@Mir(bb136[5]), _416@Mir(bb136[6])
  _419 = &mut _414
  using: _414@Mir(bb136[7])
  _418 = &raw mut (*_419)
  using: _419@Mir(bb136[8])
  _417 = src::libtree::small_vec_u64_init(move _418) -> [return: bb137, unwind continue]
  using: _418@Mir(bb136[9])
bb137:
  _420 = const 1_i32
  using: 
  goto -> bb138
  using: 
bb138:
  _421 = _420
  using: _420@Phi(bb138)
  switchInt(move _421) -> [0: bb166, otherwise: bb139]
  using: _421@Mir(bb138[0])
bb139:
  _422 = const 0_u64
  using: 
  _423 = const 0_u64
  using: 
  _426 = (_100.1: u8)
  using: _100@Mir(bb31[3])
  _425 = move _426 as i32 (IntToInt)
  using: _426@Mir(bb139[2])
  _427 = const 2_i32
  using: 
  _424 = Eq(move _425, move _427)
  using: _425@Mir(bb139[3]), _427@Mir(bb139[4])
  switchInt(move _424) -> [0: bb149, otherwise: bb140]
  using: _424@Mir(bb139[5])
bb140:
  _428 = src::libtree::dyn_64_t { d_tag: const 0_i64, d_val: const 0_u64 }
  using: 
  _433 = &mut _428
  using: _428@Mir(bb140[0])
  _432 = &raw mut (*_433)
  using: _433@Mir(bb140[1])
  _431 = move _432 as *mut libc::c_void (PtrToPtr)
  using: _432@Mir(bb140[2])
  _435 = std::mem::size_of::<src::libtree::dyn_64_t>() -> [return: bb141, unwind continue]
  using: 
bb141:
  _434 = move _435 as u64 (IntToInt)
  using: _435@Mir(bb140[4])
  _437 = const 1_i32
  using: 
  _436 = move _437 as u64 (IntToInt)
  using: _437@Mir(bb141[1])
  _438 = _6
  using: _6@Mir(bb0[5])
  _430 = src::libtree::fread(move _431, move _434, move _436, move _438) -> [return: bb142, unwind continue]
  using: _431@Mir(bb140[3]), _434@Mir(bb141[0]), _436@Mir(bb141[2]), _438@Mir(bb141[3])
bb142:
  _440 = const 1_i32
  using: 
  _439 = move _440 as u64 (IntToInt)
  using: _440@Mir(bb142[0])
  _429 = Ne(move _430, move _439)
  using: _430@Mir(bb141[4]), _439@Mir(bb142[1])
  switchInt(move _429) -> [0: bb148, otherwise: bb143]
  using: _429@Mir(bb142[2])
bb143:
  _442 = _6
  using: _6@Mir(bb0[5])
  _441 = src::libtree::fclose(move _442) -> [return: bb144, unwind continue]
  using: _442@Mir(bb143[0])
bb144:
  _445 = &mut _223
  using: _223@Mir(bb75[4])
  _444 = &raw mut (*_445)
  using: _445@Mir(bb144[0])
  _443 = src::libtree::small_vec_u64_free(move _444) -> [return: bb145, unwind continue]
  using: _444@Mir(bb144[1])
bb145:
  _448 = &mut _226
  using: _226@Mir(bb75[7])
  _447 = &raw mut (*_448)
  using: _448@Mir(bb145[0])
  _446 = src::libtree::small_vec_u64_free(move _447) -> [return: bb146, unwind continue]
  using: _447@Mir(bb145[1])
bb146:
  _451 = &mut _414
  using: _414@Mir(bb136[7])
  _450 = &raw mut (*_451)
  using: _451@Mir(bb146[0])
  _449 = src::libtree::small_vec_u64_free(move _450) -> [return: bb147, unwind continue]
  using: _450@Mir(bb146[1])
bb147:
  _0 = const 22_i32
  using: 
  goto -> bb354
  using: 
bb148:
  _452 = (_428.0: i64)
  using: _428@Mir(bb140[0])
  _422 = move _452 as u64 (IntToInt)
  using: _452@Mir(bb148[0])
  _453 = (_428.1: u64)
  using: _428@Mir(bb140[0])
  _423 = move _453
  using: _453@Mir(bb148[2])
  goto -> bb158
  using: 
bb149:
  _454 = src::libtree::dyn_32_t { d_tag: const 0_i32, d_val: const 0_u32 }
  using: 
  _459 = &mut _454
  using: _454@Mir(bb149[0])
  _458 = &raw mut (*_459)
  using: _459@Mir(bb149[1])
  _457 = move _458 as *mut libc::c_void (PtrToPtr)
  using: _458@Mir(bb149[2])
  _461 = std::mem::size_of::<src::libtree::dyn_32_t>() -> [return: bb150, unwind continue]
  using: 
bb150:
  _460 = move _461 as u64 (IntToInt)
  using: _461@Mir(bb149[4])
  _463 = const 1_i32
  using: 
  _462 = move _463 as u64 (IntToInt)
  using: _463@Mir(bb150[1])
  _464 = _6
  using: _6@Mir(bb0[5])
  _456 = src::libtree::fread(move _457, move _460, move _462, move _464) -> [return: bb151, unwind continue]
  using: _457@Mir(bb149[3]), _460@Mir(bb150[0]), _462@Mir(bb150[2]), _464@Mir(bb150[3])
bb151:
  _466 = const 1_i32
  using: 
  _465 = move _466 as u64 (IntToInt)
  using: _466@Mir(bb151[0])
  _455 = Ne(move _456, move _465)
  using: _456@Mir(bb150[4]), _465@Mir(bb151[1])
  switchInt(move _455) -> [0: bb157, otherwise: bb152]
  using: _455@Mir(bb151[2])
bb152:
  _468 = _6
  using: _6@Mir(bb0[5])
  _467 = src::libtree::fclose(move _468) -> [return: bb153, unwind continue]
  using: _468@Mir(bb152[0])
bb153:
  _471 = &mut _223
  using: _223@Mir(bb75[4])
  _470 = &raw mut (*_471)
  using: _471@Mir(bb153[0])
  _469 = src::libtree::small_vec_u64_free(move _470) -> [return: bb154, unwind continue]
  using: _470@Mir(bb153[1])
bb154:
  _474 = &mut _226
  using: _226@Mir(bb75[7])
  _473 = &raw mut (*_474)
  using: _474@Mir(bb154[0])
  _472 = src::libtree::small_vec_u64_free(move _473) -> [return: bb155, unwind continue]
  using: _473@Mir(bb154[1])
bb155:
  _477 = &mut _414
  using: _414@Mir(bb136[7])
  _476 = &raw mut (*_477)
  using: _477@Mir(bb155[0])
  _475 = src::libtree::small_vec_u64_free(move _476) -> [return: bb156, unwind continue]
  using: _476@Mir(bb155[1])
bb156:
  _0 = const 22_i32
  using: 
  goto -> bb354
  using: 
bb157:
  _478 = (_454.0: i32)
  using: _454@Mir(bb149[0])
  _422 = move _478 as u64 (IntToInt)
  using: _478@Mir(bb157[0])
  _479 = (_454.1: u32)
  using: _454@Mir(bb149[0])
  _423 = move _479 as u64 (IntToInt)
  using: _479@Mir(bb157[2])
  goto -> bb158
  using: 
bb158:
  switchInt(_422) -> [0: bb159, 5: bb160, 15: bb161, 29: bb162, 1: bb163, 14: bb164, 1879048187: bb165, otherwise: bb138]
  using: _422@Phi(bb158)
bb159:
  _480 = const 0_i32
  using: 
  _420 = move _480
  using: _480@Mir(bb159[0])
  goto -> bb138
  using: 
bb160:
  _481 = _423
  using: _423@Phi(bb158)
  _410 = move _481
  using: _481@Mir(bb160[0])
  goto -> bb138
  using: 
bb161:
  _482 = _423
  using: _423@Phi(bb158)
  _411 = move _482
  using: _482@Mir(bb161[0])
  goto -> bb138
  using: 
bb162:
  _483 = _423
  using: _423@Phi(bb158)
  _412 = move _483
  using: _483@Mir(bb162[0])
  goto -> bb138
  using: 
bb163:
  _486 = &mut _414
  using: _414@Mir(bb136[7])
  _485 = &raw mut (*_486)
  using: _486@Mir(bb163[0])
  _487 = _423
  using: _423@Phi(bb158)
  _484 = src::libtree::small_vec_u64_append(move _485, move _487) -> [return: bb138, unwind continue]
  using: _485@Mir(bb163[1]), _487@Mir(bb163[2])
bb164:
  _488 = _423
  using: _423@Phi(bb158)
  _413 = move _488
  using: _488@Mir(bb164[0])
  goto -> bb138
  using: 
bb165:
  _493 = const 2048_i32
  using: 
  _492 = move _493 as u64 (IntToInt)
  using: _493@Mir(bb165[0])
  _494 = _423
  using: _423@Phi(bb158)
  _491 = BitAnd(move _492, move _494)
  using: _492@Mir(bb165[1]), _494@Mir(bb165[2])
  _496 = const 2048_i32
  using: 
  _495 = move _496 as u64 (IntToInt)
  using: _496@Mir(bb165[4])
  _490 = Eq(move _491, move _495)
  using: _491@Mir(bb165[3]), _495@Mir(bb165[5])
  _489 = move _490 as i32 (IntToInt)
  using: _490@Mir(bb165[6])
  _409 = BitOr(_409, move _489)
  using: _489@Mir(bb165[7])
  goto -> bb138
  using: 
bb166:
  _498 = _410
  using: _410@Phi(bb138)
  _499 = const u64::MAX
  using: 
  _497 = Eq(move _498, move _499)
  using: _498@Mir(bb166[0]), _499@Mir(bb166[1])
  switchInt(move _497) -> [0: bb168, otherwise: bb167]
  using: _497@Mir(bb166[2])
bb167:
  _501 = _6
  using: _6@Mir(bb0[5])
  _500 = src::libtree::fclose(move _501) -> [return: bb169, unwind continue]
  using: _501@Mir(bb167[0])
bb168:
  _512 = (_226.1: *mut u64)
  using: _226@Mir(bb75[7])
  _513 = (_226.2: u64)
  using: _226@Mir(bb75[7])
  _511 = src::libtree::is_ascending_order(move _512, move _513) -> [return: bb173, unwind continue]
  using: _512@Mir(bb168[0]), _513@Mir(bb168[1])
bb169:
  _504 = &mut _223
  using: _223@Mir(bb75[4])
  _503 = &raw mut (*_504)
  using: _504@Mir(bb169[0])
  _502 = src::libtree::small_vec_u64_free(move _503) -> [return: bb170, unwind continue]
  using: _503@Mir(bb169[1])
bb170:
  _507 = &mut _226
  using: _226@Mir(bb75[7])
  _506 = &raw mut (*_507)
  using: _507@Mir(bb170[0])
  _505 = src::libtree::small_vec_u64_free(move _506) -> [return: bb171, unwind continue]
  using: _506@Mir(bb170[1])
bb171:
  _510 = &mut _414
  using: _414@Mir(bb136[7])
  _509 = &raw mut (*_510)
  using: _510@Mir(bb171[0])
  _508 = src::libtree::small_vec_u64_free(move _509) -> [return: bb172, unwind continue]
  using: _509@Mir(bb171[1])
bb172:
  _0 = const 23_i32
  using: 
  goto -> bb354
  using: 
bb173:
  switchInt(move _511) -> [0: bb174, otherwise: bb179]
  using: _511@Mir(bb168[2])
bb174:
  _515 = _6
  using: _6@Mir(bb0[5])
  _514 = src::libtree::fclose(move _515) -> [return: bb175, unwind continue]
  using: _515@Mir(bb174[0])
bb175:
  _518 = &mut _226
  using: _226@Mir(bb75[7])
  _517 = &raw mut (*_518)
  using: _518@Mir(bb175[0])
  _516 = src::libtree::small_vec_u64_free(move _517) -> [return: bb176, unwind continue]
  using: _517@Mir(bb175[1])
bb176:
  _521 = &mut _223
  using: _223@Mir(bb75[4])
  _520 = &raw mut (*_521)
  using: _521@Mir(bb176[0])
  _519 = src::libtree::small_vec_u64_free(move _520) -> [return: bb177, unwind continue]
  using: _520@Mir(bb176[1])
bb177:
  _524 = &mut _414
  using: _414@Mir(bb136[7])
  _523 = &raw mut (*_524)
  using: _524@Mir(bb177[0])
  _522 = src::libtree::small_vec_u64_free(move _523) -> [return: bb178, unwind continue]
  using: _523@Mir(bb177[1])
bb178:
  _0 = const 30_i32
  using: 
  goto -> bb354
  using: 
bb179:
  _526 = const 0_i32
  using: 
  _525 = move _526 as u64 (IntToInt)
  using: _526@Mir(bb179[0])
  goto -> bb180
  using: 
bb180:
  _529 = _525
  using: _525@Phi(bb180)
  _531 = const 1_i32
  using: 
  _530 = move _531 as u64 (IntToInt)
  using: _531@Mir(bb180[1])
  _528 = core::num::<impl u64>::wrapping_add(move _529, move _530) -> [return: bb181, unwind continue]
  using: _529@Mir(bb180[0]), _530@Mir(bb180[2])
bb181:
  _532 = (_226.2: u64)
  using: _226@Mir(bb75[7])
  _527 = Ne(move _528, move _532)
  using: _528@Mir(bb180[3]), _532@Mir(bb181[0])
  switchInt(move _527) -> [0: bb187, otherwise: bb182]
  using: _527@Mir(bb181[1])
bb182:
  _534 = _410
  using: _410@Phi(bb138)
  _537 = (_226.1: *mut u64)
  using: _226@Mir(bb75[7])
  _540 = _525
  using: _525@Phi(bb180)
  _542 = const 1_i32
  using: 
  _541 = move _542 as u64 (IntToInt)
  using: _542@Mir(bb182[3])
  _539 = core::num::<impl u64>::wrapping_add(move _540, move _541) -> [return: bb183, unwind continue]
  using: _540@Mir(bb182[2]), _541@Mir(bb182[4])
bb183:
  _538 = move _539 as isize (IntToInt)
  using: _539@Mir(bb182[5])
  _536 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _537, move _538) -> [return: bb184, unwind continue]
  using: _537@Mir(bb182[1]), _538@Mir(bb183[0])
bb184:
  _1224 = _536 as *const () (PtrToPtr)
  using: _536@Mir(bb183[1])
  _1225 = _1224 as usize (Transmute)
  using: _1224@Mir(bb184[0])
  _1226 = AlignOf(u64)
  using: 
  _1227 = Sub(_1226, const 1_usize)
  using: _1226@Mir(bb184[2])
  _1228 = BitAnd(_1225, _1227)
  using: _1225@Mir(bb184[1]), _1227@Mir(bb184[3])
  _1229 = Eq(_1228, const 0_usize)
  using: _1228@Mir(bb184[4])
  assert(_1229, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1226, _1225) -> [success: bb401, unwind unreachable]
  using: _1229@Mir(bb184[5]), _1226@Mir(bb184[2]), _1225@Mir(bb184[1])
bb185:
  _544 = _525
  using: _525@Phi(bb180)
  _543 = core::num::<impl u64>::wrapping_add(move _544, const 1_u64) -> [return: bb186, unwind continue]
  using: _544@Mir(bb185[0])
bb186:
  _525 = move _543
  using: _543@Mir(bb185[1])
  goto -> bb180
  using: 
bb187:
  _549 = (_223.1: *mut u64)
  using: _223@Mir(bb75[4])
  _551 = _525
  using: _525@Phi(bb180)
  _550 = move _551 as isize (IntToInt)
  using: _551@Mir(bb187[1])
  _548 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _549, move _550) -> [return: bb188, unwind continue]
  using: _549@Mir(bb187[0]), _550@Mir(bb187[2])
bb188:
  _1218 = _548 as *const () (PtrToPtr)
  using: _548@Mir(bb187[3])
  _1219 = _1218 as usize (Transmute)
  using: _1218@Mir(bb188[0])
  _1220 = AlignOf(u64)
  using: 
  _1221 = Sub(_1220, const 1_usize)
  using: _1220@Mir(bb188[2])
  _1222 = BitAnd(_1219, _1221)
  using: _1219@Mir(bb188[1]), _1221@Mir(bb188[3])
  _1223 = Eq(_1222, const 0_usize)
  using: _1222@Mir(bb188[4])
  assert(_1223, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1220, _1219) -> [success: bb400, unwind unreachable]
  using: _1223@Mir(bb188[5]), _1220@Mir(bb188[2]), _1219@Mir(bb188[1])
bb189:
  _555 = (_226.1: *mut u64)
  using: _226@Mir(bb75[7])
  _557 = _525
  using: _525@Phi(bb180)
  _556 = move _557 as isize (IntToInt)
  using: _557@Mir(bb189[1])
  _554 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _555, move _556) -> [return: bb190, unwind continue]
  using: _555@Mir(bb189[0]), _556@Mir(bb189[2])
bb190:
  _1212 = _554 as *const () (PtrToPtr)
  using: _554@Mir(bb189[3])
  _1213 = _1212 as usize (Transmute)
  using: _1212@Mir(bb190[0])
  _1214 = AlignOf(u64)
  using: 
  _1215 = Sub(_1214, const 1_usize)
  using: _1214@Mir(bb190[2])
  _1216 = BitAnd(_1213, _1215)
  using: _1213@Mir(bb190[1]), _1215@Mir(bb190[3])
  _1217 = Eq(_1216, const 0_usize)
  using: _1216@Mir(bb190[4])
  assert(_1217, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1214, _1213) -> [success: bb399, unwind unreachable]
  using: _1217@Mir(bb190[5]), _1214@Mir(bb190[2]), _1213@Mir(bb190[1])
bb191:
  _560 = &mut _226
  using: _226@Mir(bb75[7])
  _559 = &raw mut (*_560)
  using: _560@Mir(bb191[0])
  _558 = src::libtree::small_vec_u64_free(move _559) -> [return: bb192, unwind continue]
  using: _559@Mir(bb191[1])
bb192:
  _563 = &mut _223
  using: _223@Mir(bb75[4])
  _562 = &raw mut (*_563)
  using: _563@Mir(bb192[0])
  _561 = src::libtree::small_vec_u64_free(move _562) -> [return: bb193, unwind continue]
  using: _562@Mir(bb192[1])
bb193:
  _1206 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1207 = _1206 as usize (Transmute)
  using: _1206@Mir(bb193[0])
  _1208 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1209 = Sub(_1208, const 1_usize)
  using: _1208@Mir(bb193[2])
  _1210 = BitAnd(_1207, _1209)
  using: _1207@Mir(bb193[1]), _1209@Mir(bb193[3])
  _1211 = Eq(_1210, const 0_usize)
  using: _1210@Mir(bb193[4])
  assert(_1211, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1208, _1207) -> [success: bb398, unwind unreachable]
  using: _1211@Mir(bb193[5]), _1208@Mir(bb193[2]), _1207@Mir(bb193[1])
bb194:
  _570 = _6
  using: _6@Mir(bb0[5])
  _573 = _545
  using: _545@Mir(bb399[1])
  _574 = _413
  using: _413@Phi(bb138)
  _572 = core::num::<impl u64>::wrapping_add(move _573, move _574) -> [return: bb195, unwind continue]
  using: _573@Mir(bb194[1]), _574@Mir(bb194[2])
bb195:
  _571 = move _572 as i64 (IntToInt)
  using: _572@Mir(bb194[3])
  _575 = const 0_i32
  using: 
  _569 = src::libtree::fseek(move _570, move _571, move _575) -> [return: bb196, unwind continue]
  using: _570@Mir(bb194[0]), _571@Mir(bb195[0]), _575@Mir(bb195[1])
bb196:
  _576 = const 0_i32
  using: 
  _568 = Ne(move _569, move _576)
  using: _569@Mir(bb195[2]), _576@Mir(bb196[0])
  switchInt(move _568) -> [0: bb200, otherwise: bb197]
  using: _568@Mir(bb196[1])
bb197:
  _1200 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1201 = _1200 as usize (Transmute)
  using: _1200@Mir(bb197[0])
  _1202 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1203 = Sub(_1202, const 1_usize)
  using: _1202@Mir(bb197[2])
  _1204 = BitAnd(_1201, _1203)
  using: _1201@Mir(bb197[1]), _1203@Mir(bb197[3])
  _1205 = Eq(_1204, const 0_usize)
  using: _1204@Mir(bb197[4])
  assert(_1205, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1202, _1201) -> [success: bb397, unwind unreachable]
  using: _1205@Mir(bb197[5]), _1202@Mir(bb197[2]), _1201@Mir(bb197[1])
bb198:
  _581 = &mut _414
  using: _414@Mir(bb136[7])
  _580 = &raw mut (*_581)
  using: _581@Mir(bb198[0])
  _579 = src::libtree::small_vec_u64_free(move _580) -> [return: bb199, unwind continue]
  using: _580@Mir(bb198[1])
bb199:
  _0 = const 24_i32
  using: 
  goto -> bb354
  using: 
bb200:
  _1194 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1195 = _1194 as usize (Transmute)
  using: _1194@Mir(bb200[0])
  _1196 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1197 = Sub(_1196, const 1_usize)
  using: _1196@Mir(bb200[2])
  _1198 = BitAnd(_1195, _1197)
  using: _1195@Mir(bb200[1]), _1197@Mir(bb200[3])
  _1199 = Eq(_1198, const 0_usize)
  using: _1198@Mir(bb200[4])
  assert(_1199, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1196, _1195) -> [success: bb396, unwind unreachable]
  using: _1199@Mir(bb200[5]), _1196@Mir(bb200[2]), _1195@Mir(bb200[1])
bb201:
  _589 = _413
  using: _413@Phi(bb138)
  _590 = const u64::MAX
  using: 
  _588 = Ne(move _589, move _590)
  using: _589@Mir(bb201[0]), _590@Mir(bb201[1])
  switchInt(move _588) -> [0: bb203, otherwise: bb202]
  using: _588@Mir(bb201[2])
bb202:
  _1188 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1189 = _1188 as usize (Transmute)
  using: _1188@Mir(bb202[0])
  _1190 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1191 = Sub(_1190, const 1_usize)
  using: _1190@Mir(bb202[2])
  _1192 = BitAnd(_1189, _1191)
  using: _1189@Mir(bb202[1]), _1191@Mir(bb202[3])
  _1193 = Eq(_1192, const 0_usize)
  using: _1192@Mir(bb202[4])
  assert(_1193, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1190, _1189) -> [success: bb395, unwind unreachable]
  using: _1193@Mir(bb202[5]), _1190@Mir(bb202[2]), _1189@Mir(bb202[1])
bb203:
  _587 = const false
  using: 
  goto -> bb206
  using: 
bb204:
  _591 = src::libtree::is_in_exclude_list(move _592) -> [return: bb205, unwind continue]
  using: _592@Mir(bb395[2])
bb205:
  _587 = Ne(move _591, const 0_i32)
  using: _591@Mir(bb204[0])
  goto -> bb206
  using: 
bb206:
  _586 = move _587 as i32 (IntToInt)
  using: _587@Phi(bb206)
  _1182 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1183 = _1182 as usize (Transmute)
  using: _1182@Mir(bb206[1])
  _1184 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1185 = Sub(_1184, const 1_usize)
  using: _1184@Mir(bb206[3])
  _1186 = BitAnd(_1183, _1185)
  using: _1183@Mir(bb206[2]), _1185@Mir(bb206[4])
  _1187 = Eq(_1186, const 0_usize)
  using: _1186@Mir(bb206[5])
  assert(_1187, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1184, _1183) -> [success: bb394, unwind unreachable]
  using: _1187@Mir(bb206[6]), _1184@Mir(bb206[3]), _1183@Mir(bb206[2])
bb207:
  _599 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _599) -> [0: bb209, otherwise: bb210]
  using: _599@Mir(bb207[0])
bb208:
  _596 = const false
  using: 
  goto -> bb215
  using: 
bb209:
  switchInt(move _586) -> [0: bb213, otherwise: bb210]
  using: _586@Mir(bb206[0])
bb210:
  _600 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _600) -> [0: bb211, otherwise: bb214]
  using: _600@Mir(bb210[0])
bb211:
  switchInt(move _586) -> [0: bb214, otherwise: bb212]
  using: _586@Mir(bb206[0])
bb212:
  _1176 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1177 = _1176 as usize (Transmute)
  using: _1176@Mir(bb212[0])
  _1178 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1179 = Sub(_1178, const 1_usize)
  using: _1178@Mir(bb212[2])
  _1180 = BitAnd(_1177, _1179)
  using: _1177@Mir(bb212[1]), _1179@Mir(bb212[3])
  _1181 = Eq(_1180, const 0_usize)
  using: _1180@Mir(bb212[4])
  assert(_1181, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1178, _1177) -> [success: bb393, unwind unreachable]
  using: _1181@Mir(bb212[5]), _1178@Mir(bb212[2]), _1177@Mir(bb212[1])
bb213:
  _596 = const true
  using: 
  goto -> bb215
  using: 
bb214:
  _1170 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1171 = _1170 as usize (Transmute)
  using: _1170@Mir(bb214[0])
  _1172 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1173 = Sub(_1172, const 1_usize)
  using: _1172@Mir(bb214[2])
  _1174 = BitAnd(_1171, _1173)
  using: _1171@Mir(bb214[1]), _1173@Mir(bb214[3])
  _1175 = Eq(_1174, const 0_usize)
  using: _1174@Mir(bb214[4])
  assert(_1175, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1172, _1171) -> [success: bb392, unwind unreachable]
  using: _1175@Mir(bb214[5]), _1172@Mir(bb214[2]), _1171@Mir(bb214[1])
bb215:
  _595 = move _596 as i32 (IntToInt)
  using: _596@Phi(bb215)
  switchInt(move _595) -> [0: bb216, otherwise: bb237]
  using: _595@Mir(bb215[0])
bb216:
  _608 = _413
  using: _413@Phi(bb138)
  _609 = const u64::MAX
  using: 
  _607 = Eq(move _608, move _609)
  using: _608@Mir(bb216[0]), _609@Mir(bb216[1])
  switchInt(move _607) -> [0: bb217, otherwise: bb218]
  using: _607@Mir(bb216[2])
bb217:
  _1164 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1165 = _1164 as usize (Transmute)
  using: _1164@Mir(bb217[0])
  _1166 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1167 = Sub(_1166, const 1_usize)
  using: _1166@Mir(bb217[2])
  _1168 = BitAnd(_1165, _1167)
  using: _1165@Mir(bb217[1]), _1167@Mir(bb217[3])
  _1169 = Eq(_1168, const 0_usize)
  using: _1168@Mir(bb217[4])
  assert(_1169, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1166, _1165) -> [success: bb391, unwind unreachable]
  using: _1169@Mir(bb217[5]), _1166@Mir(bb217[2]), _1165@Mir(bb217[1])
bb218:
  _606 = _1
  using: _1@Entry
  goto -> bb220
  using: 
bb219:
  _1158 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1159 = _1158 as usize (Transmute)
  using: _1158@Mir(bb219[0])
  _1160 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1161 = Sub(_1160, const 1_usize)
  using: _1160@Mir(bb219[2])
  _1162 = BitAnd(_1159, _1161)
  using: _1159@Mir(bb219[1]), _1161@Mir(bb219[3])
  _1163 = Eq(_1162, const 0_usize)
  using: _1162@Mir(bb219[4])
  assert(_1163, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1160, _1159) -> [success: bb390, unwind unreachable]
  using: _1163@Mir(bb219[5]), _1160@Mir(bb219[2]), _1159@Mir(bb219[1])
bb220:
  switchInt(move _586) -> [0: bb222, otherwise: bb221]
  using: _586@Mir(bb206[0])
bb221:
  _617 = const b"\x1b[0;35m\x00"
  using: 
  _616 = &raw const (*_617)
  using: _617@Mir(bb221[0])
  _615 = move _616 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _616@Mir(bb221[1])
  _614 = move _615 as *const i8 (PtrToPtr)
  using: _615@Mir(bb221[2])
  goto -> bb225
  using: 
bb222:
  _618 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _618) -> [0: bb224, otherwise: bb223]
  using: _618@Mir(bb222[0])
bb223:
  _621 = const b"\x1b[0;34m\x00"
  using: 
  _620 = &raw const (*_621)
  using: _621@Mir(bb223[0])
  _619 = move _620 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _620@Mir(bb223[1])
  _614 = move _619 as *const i8 (PtrToPtr)
  using: _619@Mir(bb223[2])
  goto -> bb225
  using: 
bb224:
  _624 = const b"\x1b[1;36m\x00"
  using: 
  _623 = &raw const (*_624)
  using: _624@Mir(bb224[0])
  _622 = move _623 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _623@Mir(bb224[1])
  _614 = move _622 as *const i8 (PtrToPtr)
  using: _622@Mir(bb224[2])
  goto -> bb225
  using: 
bb225:
  _613 = move _614 as *mut i8 (PtrToPtr)
  using: _614@Phi(bb225)
  switchInt(move _586) -> [0: bb227, otherwise: bb226]
  using: _586@Mir(bb206[0])
bb226:
  _629 = const b"\x1b[0;35m\x00"
  using: 
  _628 = &raw const (*_629)
  using: _629@Mir(bb226[0])
  _627 = move _628 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _628@Mir(bb226[1])
  _626 = move _627 as *const i8 (PtrToPtr)
  using: _627@Mir(bb226[2])
  goto -> bb230
  using: 
bb227:
  _630 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _630) -> [0: bb229, otherwise: bb228]
  using: _630@Mir(bb227[0])
bb228:
  _633 = const b"\x1b[0;34m\x00"
  using: 
  _632 = &raw const (*_633)
  using: _633@Mir(bb228[0])
  _631 = move _632 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _632@Mir(bb228[1])
  _626 = move _631 as *const i8 (PtrToPtr)
  using: _631@Mir(bb228[2])
  goto -> bb230
  using: 
bb229:
  _636 = const b"\x1b[0;36m\x00"
  using: 
  _635 = &raw const (*_636)
  using: _636@Mir(bb229[0])
  _634 = move _635 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _635@Mir(bb229[1])
  _626 = move _634 as *const i8 (PtrToPtr)
  using: _634@Mir(bb229[2])
  goto -> bb230
  using: 
bb230:
  _625 = move _626 as *mut i8 (PtrToPtr)
  using: _626@Phi(bb230)
  _639 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _639) -> [0: bb231, otherwise: bb232]
  using: _639@Mir(bb230[1])
bb231:
  _638 = Eq(_586, const 0_i32)
  using: _586@Mir(bb206[0])
  goto -> bb233
  using: 
bb232:
  _638 = const false
  using: 
  goto -> bb233
  using: 
bb233:
  _637 = move _638 as i32 (IntToInt)
  using: _638@Phi(bb233)
  _641 = _606
  using: _606@Phi(bb220)
  _640 = src::libtree::print_line(_2, move _641, _613, _625, _637, _5, _3) -> [return: bb234, unwind continue]
  using: _2@Entry, _641@Mir(bb233[1]), _613@Mir(bb225[0]), _625@Mir(bb230[0]), _637@Mir(bb233[0]), _5@Entry, _3@Entry
bb234:
  _1152 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1153 = _1152 as usize (Transmute)
  using: _1152@Mir(bb234[0])
  _1154 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1155 = Sub(_1154, const 1_usize)
  using: _1154@Mir(bb234[2])
  _1156 = BitAnd(_1153, _1155)
  using: _1153@Mir(bb234[1]), _1155@Mir(bb234[3])
  _1157 = Eq(_1156, const 0_usize)
  using: _1156@Mir(bb234[4])
  assert(_1157, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1154, _1153) -> [success: bb389, unwind unreachable]
  using: _1157@Mir(bb234[5]), _1154@Mir(bb234[2]), _1153@Mir(bb234[1])
bb235:
  _646 = &mut _414
  using: _414@Mir(bb136[7])
  _645 = &raw mut (*_646)
  using: _646@Mir(bb235[0])
  _644 = src::libtree::small_vec_u64_free(move _645) -> [return: bb236, unwind continue]
  using: _645@Mir(bb235[1])
bb236:
  _0 = const 0_i32
  using: 
  goto -> bb354
  using: 
bb237:
  _647 = [const 0_i8; 4096]
  using: 
  _649 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _650 = const '/' as i32 (IntToInt)
  using: 
  _648 = src::libtree::strrchr(move _649, move _650) -> [return: bb238, unwind continue]
  using: _649@Mir(bb237[1]), _650@Mir(bb237[2])
bb238:
  _652 = _648
  using: _648@Mir(bb237[3])
  _651 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _652) -> [return: bb239, unwind continue]
  using: _652@Mir(bb238[0])
bb239:
  switchInt(move _651) -> [0: bb241, otherwise: bb240]
  using: _651@Mir(bb238[1])
bb240:
  _672 = &mut _647
  using: _647@Mir(bb237[0])
  _671 = move _672 as &mut [i8] (PointerCoercion(Unsize))
  using: _672@Mir(bb240[0])
  _670 = core::slice::<impl [i8]>::as_mut_ptr(move _671) -> [return: bb246, unwind continue]
  using: _671@Mir(bb240[1])
bb241:
  _656 = _648
  using: _648@Mir(bb237[3])
  _657 = _1 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _1@Entry
  _655 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _656, move _657) -> [return: bb242, unwind continue]
  using: _656@Mir(bb241[0]), _657@Mir(bb241[1])
bb242:
  _654 = move _655 as i64 (IntToInt)
  using: _655@Mir(bb241[2])
  _653 = move _654 as u64 (IntToInt)
  using: _654@Mir(bb242[0])
  _662 = &mut _647
  using: _647@Mir(bb237[0])
  _661 = move _662 as &mut [i8] (PointerCoercion(Unsize))
  using: _662@Mir(bb242[2])
  _660 = core::slice::<impl [i8]>::as_mut_ptr(move _661) -> [return: bb243, unwind continue]
  using: _661@Mir(bb242[3])
bb243:
  _659 = move _660 as *mut libc::c_void (PtrToPtr)
  using: _660@Mir(bb242[4])
  _663 = _1 as *const libc::c_void (PtrToPtr)
  using: _1@Entry
  _658 = src::libtree::memcpy(move _659, move _663, _653) -> [return: bb244, unwind continue]
  using: _659@Mir(bb243[0]), _663@Mir(bb243[1]), _653@Mir(bb242[1])
bb244:
  _664 = const '\0' as i32 (IntToInt)
  using: 
  _665 = _653 as usize (IntToInt)
  using: _653@Mir(bb242[1])
  _666 = const 4096_usize
  using: 
  _667 = Lt(_665, _666)
  using: _665@Mir(bb244[1]), _666@Mir(bb244[2])
  assert(move _667, "index out of bounds: the length is {} but the index is {}", move _666, _665) -> [success: bb245, unwind continue]
  using: _667@Mir(bb244[3]), _666@Mir(bb244[2]), _665@Mir(bb244[1])
bb245:
  _647[_665] = move _664 as i8 (IntToInt)
  using: _665@Mir(bb244[1]), _664@Mir(bb244[0])
  goto -> bb247
  using: 
bb246:
  _669 = move _670 as *mut libc::c_void (PtrToPtr)
  using: _670@Mir(bb240[2])
  _677 = const b"./\x00"
  using: 
  _676 = &raw const (*_677)
  using: _677@Mir(bb246[1])
  _675 = move _676 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _676@Mir(bb246[2])
  _674 = move _675 as *const i8 (PtrToPtr)
  using: _675@Mir(bb246[3])
  _673 = move _674 as *const libc::c_void (PtrToPtr)
  using: _674@Mir(bb246[4])
  _679 = const 3_i32
  using: 
  _678 = move _679 as u64 (IntToInt)
  using: _679@Mir(bb246[6])
  _668 = src::libtree::memcpy(move _669, move _673, move _678) -> [return: bb247, unwind continue]
  using: _669@Mir(bb246[0]), _673@Mir(bb246[5]), _678@Mir(bb246[7])
bb247:
  _681 = _411
  using: _411@Phi(bb138)
  _682 = const u64::MAX
  using: 
  _680 = Eq(move _681, move _682)
  using: _681@Mir(bb247[0]), _682@Mir(bb247[1])
  switchInt(move _680) -> [0: bb250, otherwise: bb248]
  using: _680@Mir(bb247[2])
bb248:
  _683 = const u64::MAX
  using: 
  _684 = _2 as usize (IntToInt)
  using: _2@Entry
  _1146 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1147 = _1146 as usize (Transmute)
  using: _1146@Mir(bb248[2])
  _1148 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1149 = Sub(_1148, const 1_usize)
  using: _1148@Mir(bb248[4])
  _1150 = BitAnd(_1147, _1149)
  using: _1147@Mir(bb248[3]), _1149@Mir(bb248[5])
  _1151 = Eq(_1150, const 0_usize)
  using: _1150@Mir(bb248[6])
  assert(_1151, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1148, _1147) -> [success: bb388, unwind unreachable]
  using: _1151@Mir(bb248[7]), _1148@Mir(bb248[4]), _1147@Mir(bb248[3])
bb249:
  _1140 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1141 = _1140 as usize (Transmute)
  using: _1140@Mir(bb249[0])
  _1142 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1143 = Sub(_1142, const 1_usize)
  using: _1142@Mir(bb249[2])
  _1144 = BitAnd(_1141, _1143)
  using: _1141@Mir(bb249[1]), _1143@Mir(bb249[3])
  _1145 = Eq(_1144, const 0_usize)
  using: _1144@Mir(bb249[4])
  assert(_1145, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1142, _1141) -> [success: bb387, unwind unreachable]
  using: _1145@Mir(bb249[5]), _1142@Mir(bb249[2]), _1141@Mir(bb249[1])
bb250:
  _1134 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1135 = _1134 as usize (Transmute)
  using: _1134@Mir(bb250[0])
  _1136 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1137 = Sub(_1136, const 1_usize)
  using: _1136@Mir(bb250[2])
  _1138 = BitAnd(_1135, _1137)
  using: _1135@Mir(bb250[1]), _1137@Mir(bb250[3])
  _1139 = Eq(_1138, const 0_usize)
  using: _1138@Mir(bb250[4])
  assert(_1139, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1136, _1135) -> [success: bb386, unwind unreachable]
  using: _1139@Mir(bb250[5]), _1136@Mir(bb250[2]), _1135@Mir(bb250[1])
bb251:
  _1122 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1123 = _1122 as usize (Transmute)
  using: _1122@Mir(bb251[0])
  _1124 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1125 = Sub(_1124, const 1_usize)
  using: _1124@Mir(bb251[2])
  _1126 = BitAnd(_1123, _1125)
  using: _1123@Mir(bb251[1]), _1125@Mir(bb251[3])
  _1127 = Eq(_1126, const 0_usize)
  using: _1126@Mir(bb251[4])
  assert(_1127, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1124, _1123) -> [success: bb384, unwind unreachable]
  using: _1127@Mir(bb251[5]), _1124@Mir(bb251[2]), _1123@Mir(bb251[1])
bb252:
  _694 = move _695 as i64 (IntToInt)
  using: _695@Mir(bb384[4])
  _698 = const 0_i32
  using: 
  _692 = src::libtree::fseek(move _693, move _694, move _698) -> [return: bb253, unwind continue]
  using: _693@Mir(bb384[1]), _694@Mir(bb252[0]), _698@Mir(bb252[1])
bb253:
  _699 = const 0_i32
  using: 
  _691 = Ne(move _692, move _699)
  using: _692@Mir(bb252[2]), _699@Mir(bb253[0])
  switchInt(move _691) -> [0: bb257, otherwise: bb254]
  using: _691@Mir(bb253[1])
bb254:
  _1116 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1117 = _1116 as usize (Transmute)
  using: _1116@Mir(bb254[0])
  _1118 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1119 = Sub(_1118, const 1_usize)
  using: _1118@Mir(bb254[2])
  _1120 = BitAnd(_1117, _1119)
  using: _1117@Mir(bb254[1]), _1119@Mir(bb254[3])
  _1121 = Eq(_1120, const 0_usize)
  using: _1120@Mir(bb254[4])
  assert(_1121, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1118, _1117) -> [success: bb383, unwind unreachable]
  using: _1121@Mir(bb254[5]), _1118@Mir(bb254[2]), _1117@Mir(bb254[1])
bb255:
  _704 = &mut _414
  using: _414@Mir(bb136[7])
  _703 = &raw mut (*_704)
  using: _704@Mir(bb255[0])
  _702 = src::libtree::small_vec_u64_free(move _703) -> [return: bb256, unwind continue]
  using: _703@Mir(bb255[1])
bb256:
  _0 = const 25_i32
  using: 
  goto -> bb354
  using: 
bb257:
  _1110 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1111 = _1110 as usize (Transmute)
  using: _1110@Mir(bb257[0])
  _1112 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1113 = Sub(_1112, const 1_usize)
  using: _1112@Mir(bb257[2])
  _1114 = BitAnd(_1111, _1113)
  using: _1111@Mir(bb257[1]), _1113@Mir(bb257[3])
  _1115 = Eq(_1114, const 0_usize)
  using: _1114@Mir(bb257[4])
  assert(_1115, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1112, _1111) -> [success: bb382, unwind unreachable]
  using: _1115@Mir(bb257[5]), _1112@Mir(bb257[2]), _1111@Mir(bb257[1])
bb258:
  _1104 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1105 = _1104 as usize (Transmute)
  using: _1104@Mir(bb258[0])
  _1106 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1107 = Sub(_1106, const 1_usize)
  using: _1106@Mir(bb258[2])
  _1108 = BitAnd(_1105, _1107)
  using: _1105@Mir(bb258[1]), _1107@Mir(bb258[3])
  _1109 = Eq(_1108, const 0_usize)
  using: _1108@Mir(bb258[4])
  assert(_1109, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1106, _1105) -> [success: bb381, unwind unreachable]
  using: _1109@Mir(bb258[5]), _1106@Mir(bb258[2]), _1105@Mir(bb258[1])
bb259:
  _1092 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1093 = _1092 as usize (Transmute)
  using: _1092@Mir(bb259[0])
  _1094 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1095 = Sub(_1094, const 1_usize)
  using: _1094@Mir(bb259[2])
  _1096 = BitAnd(_1093, _1095)
  using: _1093@Mir(bb259[1]), _1095@Mir(bb259[3])
  _1097 = Eq(_1096, const 0_usize)
  using: _1096@Mir(bb259[4])
  assert(_1097, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1094, _1093) -> [success: bb379, unwind unreachable]
  using: _1097@Mir(bb259[5]), _1094@Mir(bb259[2]), _1093@Mir(bb259[1])
bb260:
  _715 = move _716 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _716@Mir(bb379[3])
  _710 = src::libtree::interpolate_variables(_3, move _711, move _715) -> [return: bb261, unwind continue]
  using: _3@Entry, _711@Mir(bb379[0]), _715@Mir(bb260[0])
bb261:
  switchInt(move _710) -> [0: bb264, otherwise: bb262]
  using: _710@Mir(bb260[1])
bb262:
  _719 = _2 as usize (IntToInt)
  using: _2@Entry
  _1086 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1087 = _1086 as usize (Transmute)
  using: _1086@Mir(bb262[1])
  _1088 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1089 = Sub(_1088, const 1_usize)
  using: _1088@Mir(bb262[3])
  _1090 = BitAnd(_1087, _1089)
  using: _1087@Mir(bb262[2]), _1089@Mir(bb262[4])
  _1091 = Eq(_1090, const 0_usize)
  using: _1090@Mir(bb262[5])
  assert(_1091, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1088, _1087) -> [success: bb378, unwind unreachable]
  using: _1091@Mir(bb262[6]), _1088@Mir(bb262[3]), _1087@Mir(bb262[2])
bb263:
  _1080 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1081 = _1080 as usize (Transmute)
  using: _1080@Mir(bb263[0])
  _1082 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1083 = Sub(_1082, const 1_usize)
  using: _1082@Mir(bb263[2])
  _1084 = BitAnd(_1081, _1083)
  using: _1081@Mir(bb263[1]), _1083@Mir(bb263[3])
  _1085 = Eq(_1084, const 0_usize)
  using: _1084@Mir(bb263[4])
  assert(_1085, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1082, _1081) -> [success: bb377, unwind unreachable]
  using: _1085@Mir(bb263[5]), _1082@Mir(bb263[2]), _1081@Mir(bb263[1])
bb264:
  _1074 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1075 = _1074 as usize (Transmute)
  using: _1074@Mir(bb264[0])
  _1076 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1077 = Sub(_1076, const 1_usize)
  using: _1076@Mir(bb264[2])
  _1078 = BitAnd(_1075, _1077)
  using: _1075@Mir(bb264[1]), _1077@Mir(bb264[3])
  _1079 = Eq(_1078, const 0_usize)
  using: _1078@Mir(bb264[4])
  assert(_1079, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1076, _1075) -> [success: bb376, unwind unreachable]
  using: _1079@Mir(bb264[5]), _1076@Mir(bb264[2]), _1075@Mir(bb264[1])
bb265:
  _728 = _6
  using: _6@Mir(bb0[5])
  _731 = _545
  using: _545@Mir(bb399[1])
  _732 = _412
  using: _412@Phi(bb138)
  _730 = core::num::<impl u64>::wrapping_add(move _731, move _732) -> [return: bb266, unwind continue]
  using: _731@Mir(bb265[1]), _732@Mir(bb265[2])
bb266:
  _729 = move _730 as i64 (IntToInt)
  using: _730@Mir(bb265[3])
  _733 = const 0_i32
  using: 
  _727 = src::libtree::fseek(move _728, move _729, move _733) -> [return: bb267, unwind continue]
  using: _728@Mir(bb265[0]), _729@Mir(bb266[0]), _733@Mir(bb266[1])
bb267:
  _734 = const 0_i32
  using: 
  _726 = Ne(move _727, move _734)
  using: _727@Mir(bb266[2]), _734@Mir(bb267[0])
  switchInt(move _726) -> [0: bb271, otherwise: bb268]
  using: _726@Mir(bb267[1])
bb268:
  _1068 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1069 = _1068 as usize (Transmute)
  using: _1068@Mir(bb268[0])
  _1070 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1071 = Sub(_1070, const 1_usize)
  using: _1070@Mir(bb268[2])
  _1072 = BitAnd(_1069, _1071)
  using: _1069@Mir(bb268[1]), _1071@Mir(bb268[3])
  _1073 = Eq(_1072, const 0_usize)
  using: _1072@Mir(bb268[4])
  assert(_1073, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1070, _1069) -> [success: bb375, unwind unreachable]
  using: _1073@Mir(bb268[5]), _1070@Mir(bb268[2]), _1069@Mir(bb268[1])
bb269:
  _739 = &mut _414
  using: _414@Mir(bb136[7])
  _738 = &raw mut (*_739)
  using: _739@Mir(bb269[0])
  _737 = src::libtree::small_vec_u64_free(move _738) -> [return: bb270, unwind continue]
  using: _738@Mir(bb269[1])
bb270:
  _0 = const 26_i32
  using: 
  goto -> bb354
  using: 
bb271:
  _1062 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1063 = _1062 as usize (Transmute)
  using: _1062@Mir(bb271[0])
  _1064 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1065 = Sub(_1064, const 1_usize)
  using: _1064@Mir(bb271[2])
  _1066 = BitAnd(_1063, _1065)
  using: _1063@Mir(bb271[1]), _1065@Mir(bb271[3])
  _1067 = Eq(_1066, const 0_usize)
  using: _1066@Mir(bb271[4])
  assert(_1067, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1064, _1063) -> [success: bb374, unwind unreachable]
  using: _1067@Mir(bb271[5]), _1064@Mir(bb271[2]), _1063@Mir(bb271[1])
bb272:
  _1056 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1057 = _1056 as usize (Transmute)
  using: _1056@Mir(bb272[0])
  _1058 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1059 = Sub(_1058, const 1_usize)
  using: _1058@Mir(bb272[2])
  _1060 = BitAnd(_1057, _1059)
  using: _1057@Mir(bb272[1]), _1059@Mir(bb272[3])
  _1061 = Eq(_1060, const 0_usize)
  using: _1060@Mir(bb272[4])
  assert(_1061, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1058, _1057) -> [success: bb373, unwind unreachable]
  using: _1061@Mir(bb272[5]), _1058@Mir(bb272[2]), _1057@Mir(bb272[1])
bb273:
  _747 = move _748 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _748@Mir(bb373[4])
  _745 = src::libtree::interpolate_variables(_3, move _746, move _747) -> [return: bb274, unwind continue]
  using: _3@Entry, _746@Mir(bb373[1]), _747@Mir(bb273[0])
bb274:
  switchInt(move _745) -> [0: bb276, otherwise: bb275]
  using: _745@Mir(bb273[1])
bb275:
  _722 = _744
  using: _744@Mir(bb373[0])
  goto -> bb276
  using: 
bb276:
  _752 = [const 0_u64; 16]
  using: 
  _753 = const 0_usize as *mut u64 (PointerFromExposedAddress)
  using: 
  _751 = src::libtree::small_vec_u64_t { buf: move _752, p: move _753, n: const 0_u64, capacity: const 0_u64 }
  using: _752@Mir(bb276[0]), _753@Mir(bb276[1])
  _756 = &mut _751
  using: _751@Mir(bb276[2])
  _755 = &raw mut (*_756)
  using: _756@Mir(bb276[3])
  _754 = src::libtree::small_vec_u64_init(move _755) -> [return: bb277, unwind continue]
  using: _755@Mir(bb276[4])
bb277:
  _758 = const 0_i32
  using: 
  _757 = move _758 as u64 (IntToInt)
  using: _758@Mir(bb277[0])
  goto -> bb278
  using: 
bb278:
  _760 = _757
  using: _757@Phi(bb278)
  _761 = (_414.2: u64)
  using: _414@Mir(bb136[7])
  _759 = Lt(move _760, move _761)
  using: _760@Mir(bb278[0]), _761@Mir(bb278[1])
  switchInt(move _759) -> [0: bb291, otherwise: bb279]
  using: _759@Mir(bb278[2])
bb279:
  _764 = &mut _751
  using: _751@Mir(bb276[2])
  _763 = &raw mut (*_764)
  using: _764@Mir(bb279[0])
  _1050 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1051 = _1050 as usize (Transmute)
  using: _1050@Mir(bb279[2])
  _1052 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1053 = Sub(_1052, const 1_usize)
  using: _1052@Mir(bb279[4])
  _1054 = BitAnd(_1051, _1053)
  using: _1051@Mir(bb279[3]), _1053@Mir(bb279[5])
  _1055 = Eq(_1054, const 0_usize)
  using: _1054@Mir(bb279[6])
  assert(_1055, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1052, _1051) -> [success: bb372, unwind unreachable]
  using: _1055@Mir(bb279[7]), _1052@Mir(bb279[4]), _1051@Mir(bb279[3])
bb280:
  _768 = _6
  using: _6@Mir(bb0[5])
  _771 = _545
  using: _545@Mir(bb399[1])
  _774 = (_414.1: *mut u64)
  using: _414@Mir(bb136[7])
  _776 = _757
  using: _757@Phi(bb278)
  _775 = move _776 as isize (IntToInt)
  using: _776@Mir(bb280[3])
  _773 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _774, move _775) -> [return: bb281, unwind continue]
  using: _774@Mir(bb280[2]), _775@Mir(bb280[4])
bb281:
  _1044 = _773 as *const () (PtrToPtr)
  using: _773@Mir(bb280[5])
  _1045 = _1044 as usize (Transmute)
  using: _1044@Mir(bb281[0])
  _1046 = AlignOf(u64)
  using: 
  _1047 = Sub(_1046, const 1_usize)
  using: _1046@Mir(bb281[2])
  _1048 = BitAnd(_1045, _1047)
  using: _1045@Mir(bb281[1]), _1047@Mir(bb281[3])
  _1049 = Eq(_1048, const 0_usize)
  using: _1048@Mir(bb281[4])
  assert(_1049, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1046, _1045) -> [success: bb371, unwind unreachable]
  using: _1049@Mir(bb281[5]), _1046@Mir(bb281[2]), _1045@Mir(bb281[1])
bb282:
  _769 = move _770 as i64 (IntToInt)
  using: _770@Mir(bb371[1])
  _777 = const 0_i32
  using: 
  _767 = src::libtree::fseek(move _768, move _769, move _777) -> [return: bb283, unwind continue]
  using: _768@Mir(bb280[0]), _769@Mir(bb282[0]), _777@Mir(bb282[1])
bb283:
  _778 = const 0_i32
  using: 
  _766 = Ne(move _767, move _778)
  using: _767@Mir(bb282[2]), _778@Mir(bb283[0])
  switchInt(move _766) -> [0: bb288, otherwise: bb284]
  using: _766@Mir(bb283[1])
bb284:
  _1038 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1039 = _1038 as usize (Transmute)
  using: _1038@Mir(bb284[0])
  _1040 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1041 = Sub(_1040, const 1_usize)
  using: _1040@Mir(bb284[2])
  _1042 = BitAnd(_1039, _1041)
  using: _1039@Mir(bb284[1]), _1041@Mir(bb284[3])
  _1043 = Eq(_1042, const 0_usize)
  using: _1042@Mir(bb284[4])
  assert(_1043, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1040, _1039) -> [success: bb370, unwind unreachable]
  using: _1043@Mir(bb284[5]), _1040@Mir(bb284[2]), _1039@Mir(bb284[1])
bb285:
  _783 = &mut _751
  using: _751@Mir(bb276[2])
  _782 = &raw mut (*_783)
  using: _783@Mir(bb285[0])
  _781 = src::libtree::small_vec_u64_free(move _782) -> [return: bb286, unwind continue]
  using: _782@Mir(bb285[1])
bb286:
  _786 = &mut _414
  using: _414@Mir(bb136[7])
  _785 = &raw mut (*_786)
  using: _786@Mir(bb286[0])
  _784 = src::libtree::small_vec_u64_free(move _785) -> [return: bb287, unwind continue]
  using: _785@Mir(bb286[1])
bb287:
  _0 = const 27_i32
  using: 
  goto -> bb354
  using: 
bb288:
  _1032 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1033 = _1032 as usize (Transmute)
  using: _1032@Mir(bb288[0])
  _1034 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1035 = Sub(_1034, const 1_usize)
  using: _1034@Mir(bb288[2])
  _1036 = BitAnd(_1033, _1035)
  using: _1033@Mir(bb288[1]), _1035@Mir(bb288[3])
  _1037 = Eq(_1036, const 0_usize)
  using: _1036@Mir(bb288[4])
  assert(_1037, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1034, _1033) -> [success: bb369, unwind unreachable]
  using: _1037@Mir(bb288[5]), _1034@Mir(bb288[2]), _1033@Mir(bb288[1])
bb289:
  _792 = _757
  using: _757@Phi(bb278)
  _791 = core::num::<impl u64>::wrapping_add(move _792, const 1_u64) -> [return: bb290, unwind continue]
  using: _792@Mir(bb289[0])
bb290:
  _757 = move _791
  using: _791@Mir(bb289[1])
  goto -> bb278
  using: 
bb291:
  _794 = _6
  using: _6@Mir(bb0[5])
  _793 = src::libtree::fclose(move _794) -> [return: bb292, unwind continue]
  using: _794@Mir(bb291[0])
bb292:
  _797 = _413
  using: _413@Phi(bb138)
  _798 = const u64::MAX
  using: 
  _796 = Eq(move _797, move _798)
  using: _797@Mir(bb292[0]), _798@Mir(bb292[1])
  switchInt(move _796) -> [0: bb293, otherwise: bb294]
  using: _796@Mir(bb292[2])
bb293:
  _1026 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1027 = _1026 as usize (Transmute)
  using: _1026@Mir(bb293[0])
  _1028 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1029 = Sub(_1028, const 1_usize)
  using: _1028@Mir(bb293[2])
  _1030 = BitAnd(_1027, _1029)
  using: _1027@Mir(bb293[1]), _1029@Mir(bb293[3])
  _1031 = Eq(_1030, const 0_usize)
  using: _1030@Mir(bb293[4])
  assert(_1031, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1028, _1027) -> [success: bb368, unwind unreachable]
  using: _1031@Mir(bb293[5]), _1028@Mir(bb293[2]), _1027@Mir(bb293[1])
bb294:
  _795 = _1
  using: _1@Entry
  goto -> bb296
  using: 
bb295:
  _1020 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1021 = _1020 as usize (Transmute)
  using: _1020@Mir(bb295[0])
  _1022 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1023 = Sub(_1022, const 1_usize)
  using: _1022@Mir(bb295[2])
  _1024 = BitAnd(_1021, _1023)
  using: _1021@Mir(bb295[1]), _1023@Mir(bb295[3])
  _1025 = Eq(_1024, const 0_usize)
  using: _1024@Mir(bb295[4])
  assert(_1025, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1022, _1021) -> [success: bb367, unwind unreachable]
  using: _1025@Mir(bb295[5]), _1022@Mir(bb295[2]), _1021@Mir(bb295[1])
bb296:
  switchInt(move _586) -> [0: bb298, otherwise: bb297]
  using: _586@Mir(bb206[0])
bb297:
  _806 = const b"\x1b[0;35m\x00"
  using: 
  _805 = &raw const (*_806)
  using: _806@Mir(bb297[0])
  _804 = move _805 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _805@Mir(bb297[1])
  _803 = move _804 as *const i8 (PtrToPtr)
  using: _804@Mir(bb297[2])
  goto -> bb301
  using: 
bb298:
  _807 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _807) -> [0: bb300, otherwise: bb299]
  using: _807@Mir(bb298[0])
bb299:
  _810 = const b"\x1b[0;34m\x00"
  using: 
  _809 = &raw const (*_810)
  using: _810@Mir(bb299[0])
  _808 = move _809 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _809@Mir(bb299[1])
  _803 = move _808 as *const i8 (PtrToPtr)
  using: _808@Mir(bb299[2])
  goto -> bb301
  using: 
bb300:
  _813 = const b"\x1b[1;36m\x00"
  using: 
  _812 = &raw const (*_813)
  using: _813@Mir(bb300[0])
  _811 = move _812 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _812@Mir(bb300[1])
  _803 = move _811 as *const i8 (PtrToPtr)
  using: _811@Mir(bb300[2])
  goto -> bb301
  using: 
bb301:
  _802 = move _803 as *mut i8 (PtrToPtr)
  using: _803@Phi(bb301)
  switchInt(move _586) -> [0: bb303, otherwise: bb302]
  using: _586@Mir(bb206[0])
bb302:
  _818 = const b"\x1b[0;35m\x00"
  using: 
  _817 = &raw const (*_818)
  using: _818@Mir(bb302[0])
  _816 = move _817 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _817@Mir(bb302[1])
  _815 = move _816 as *const i8 (PtrToPtr)
  using: _816@Mir(bb302[2])
  goto -> bb306
  using: 
bb303:
  _819 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _819) -> [0: bb305, otherwise: bb304]
  using: _819@Mir(bb303[0])
bb304:
  _822 = const b"\x1b[0;34m\x00"
  using: 
  _821 = &raw const (*_822)
  using: _822@Mir(bb304[0])
  _820 = move _821 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _821@Mir(bb304[1])
  _815 = move _820 as *const i8 (PtrToPtr)
  using: _820@Mir(bb304[2])
  goto -> bb306
  using: 
bb305:
  _825 = const b"\x1b[0;36m\x00"
  using: 
  _824 = &raw const (*_825)
  using: _825@Mir(bb305[0])
  _823 = move _824 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _824@Mir(bb305[1])
  _815 = move _823 as *const i8 (PtrToPtr)
  using: _823@Mir(bb305[2])
  goto -> bb306
  using: 
bb306:
  _814 = move _815 as *mut i8 (PtrToPtr)
  using: _815@Phi(bb306)
  _828 = _348
  using: _348@Mir(bb403[4])
  switchInt(move _828) -> [0: bb307, otherwise: bb308]
  using: _828@Mir(bb306[1])
bb307:
  _827 = Eq(_586, const 0_i32)
  using: _586@Mir(bb206[0])
  goto -> bb309
  using: 
bb308:
  _827 = const false
  using: 
  goto -> bb309
  using: 
bb309:
  _826 = move _827 as i32 (IntToInt)
  using: _827@Phi(bb309)
  _830 = _795
  using: _795@Phi(bb296)
  _829 = src::libtree::print_line(_2, move _830, _802, _814, _826, _5, _3) -> [return: bb310, unwind continue]
  using: _2@Entry, _830@Mir(bb309[1]), _802@Mir(bb301[0]), _814@Mir(bb306[0]), _826@Mir(bb309[0]), _5@Entry, _3@Entry
bb310:
  _831 = const 0_i32
  using: 
  _832 = (_751.2: u64)
  using: _751@Mir(bb276[2])
  _833 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _833) -> [0: bb313, otherwise: bb311]
  using: _833@Mir(bb310[2])
bb311:
  _1014 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1015 = _1014 as usize (Transmute)
  using: _1014@Mir(bb311[0])
  _1016 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1017 = Sub(_1016, const 1_usize)
  using: _1016@Mir(bb311[2])
  _1018 = BitAnd(_1015, _1017)
  using: _1015@Mir(bb311[1]), _1017@Mir(bb311[3])
  _1019 = Eq(_1018, const 0_usize)
  using: _1018@Mir(bb311[4])
  assert(_1019, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1016, _1015) -> [success: bb366, unwind unreachable]
  using: _1019@Mir(bb311[5]), _1016@Mir(bb311[2]), _1015@Mir(bb311[1])
bb312:
  _839 = &mut _832
  using: _832@Mir(bb310[1])
  _838 = &raw mut (*_839)
  using: _839@Mir(bb312[0])
  _841 = &mut _751
  using: _751@Mir(bb276[2])
  _840 = &raw mut (*_841)
  using: _841@Mir(bb312[2])
  _837 = src::libtree::apply_exclude_list(move _838, move _840, _3) -> [return: bb313, unwind continue]
  using: _838@Mir(bb312[1]), _840@Mir(bb312[3]), _3@Entry
bb313:
  _842 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _842) -> [0: bb316, otherwise: bb314]
  using: _842@Mir(bb313[0])
bb314:
  _845 = &mut _832
  using: _832@Mir(bb310[1])
  _844 = &raw mut (*_845)
  using: _845@Mir(bb314[0])
  _847 = &mut _751
  using: _751@Mir(bb276[2])
  _846 = &raw mut (*_847)
  using: _847@Mir(bb314[2])
  _848 = _100
  using: _100@Mir(bb31[3])
  _843 = src::libtree::check_absolute_paths(move _844, move _846, _2, _3, move _848) -> [return: bb315, unwind continue]
  using: _844@Mir(bb314[1]), _846@Mir(bb314[3]), _2@Entry, _3@Entry, _848@Mir(bb314[4])
bb315:
  _831 = BitOr(_831, move _843)
  using: _843@Mir(bb314[5])
  goto -> bb316
  using: 
bb316:
  _850 = _412
  using: _412@Phi(bb138)
  _851 = const u64::MAX
  using: 
  _849 = Eq(move _850, move _851)
  using: _850@Mir(bb316[0]), _851@Mir(bb316[1])
  switchInt(move _849) -> [0: bb327, otherwise: bb317]
  using: _849@Mir(bb316[2])
bb317:
  _852 = _2 as i32 (IntToInt)
  using: _2@Entry
  goto -> bb318
  using: 
bb318:
  _854 = _852
  using: _852@Phi(bb318)
  _855 = const 0_i32
  using: 
  _853 = Ge(move _854, move _855)
  using: _854@Mir(bb318[0]), _855@Mir(bb318[1])
  switchInt(move _853) -> [0: bb327, otherwise: bb319]
  using: _853@Mir(bb318[2])
bb319:
  _856 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _856) -> [0: bb327, otherwise: bb320]
  using: _856@Mir(bb319[0])
bb320:
  _860 = _852
  using: _852@Phi(bb318)
  _859 = move _860 as usize (IntToInt)
  using: _860@Mir(bb320[0])
  _1008 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1009 = _1008 as usize (Transmute)
  using: _1008@Mir(bb320[2])
  _1010 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1011 = Sub(_1010, const 1_usize)
  using: _1010@Mir(bb320[4])
  _1012 = BitAnd(_1009, _1011)
  using: _1009@Mir(bb320[3]), _1011@Mir(bb320[5])
  _1013 = Eq(_1012, const 0_usize)
  using: _1012@Mir(bb320[6])
  assert(_1013, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1010, _1009) -> [success: bb365, unwind unreachable]
  using: _1013@Mir(bb320[7]), _1010@Mir(bb320[4]), _1009@Mir(bb320[3])
bb321:
  _1002 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1003 = _1002 as usize (Transmute)
  using: _1002@Mir(bb321[0])
  _1004 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1005 = Sub(_1004, const 1_usize)
  using: _1004@Mir(bb321[2])
  _1006 = BitAnd(_1003, _1005)
  using: _1003@Mir(bb321[1]), _1005@Mir(bb321[3])
  _1007 = Eq(_1006, const 0_usize)
  using: _1006@Mir(bb321[4])
  assert(_1007, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1004, _1003) -> [success: bb364, unwind unreachable]
  using: _1007@Mir(bb321[5]), _1004@Mir(bb321[2]), _1003@Mir(bb321[1])
bb322:
  _867 = _852
  using: _852@Phi(bb318)
  _866 = move _867 as u64 (IntToInt)
  using: _867@Mir(bb322[0])
  _865 = src::libtree::found_t { how: const _, depth: move _866 }
  using: _866@Mir(bb322[1])
  _870 = _852
  using: _852@Phi(bb318)
  _869 = move _870 as usize (IntToInt)
  using: _870@Mir(bb322[3])
  _996 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _997 = _996 as usize (Transmute)
  using: _996@Mir(bb322[5])
  _998 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _999 = Sub(_998, const 1_usize)
  using: _998@Mir(bb322[7])
  _1000 = BitAnd(_997, _999)
  using: _997@Mir(bb322[6]), _999@Mir(bb322[8])
  _1001 = Eq(_1000, const 0_usize)
  using: _1000@Mir(bb322[9])
  assert(_1001, "misaligned pointer dereference: address must be a multiple of {} but is {}", _998, _997) -> [success: bb363, unwind unreachable]
  using: _1001@Mir(bb322[10]), _998@Mir(bb322[7]), _997@Mir(bb322[6])
bb323:
  _990 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _991 = _990 as usize (Transmute)
  using: _990@Mir(bb323[0])
  _992 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _993 = Sub(_992, const 1_usize)
  using: _992@Mir(bb323[2])
  _994 = BitAnd(_991, _993)
  using: _991@Mir(bb323[1]), _993@Mir(bb323[3])
  _995 = Eq(_994, const 0_usize)
  using: _994@Mir(bb323[4])
  assert(_995, "misaligned pointer dereference: address must be a multiple of {} but is {}", _992, _991) -> [success: bb362, unwind unreachable]
  using: _995@Mir(bb323[5]), _992@Mir(bb323[2]), _991@Mir(bb323[1])
bb324:
  _831 = BitOr(_831, move _864)
  using: _864@Mir(bb362[6])
  goto -> bb325
  using: 
bb325:
  _878 = CheckedSub(_852, const 1_i32)
  using: _852@Phi(bb318)
  assert(!move (_878.1: bool), "attempt to compute `{} - {}`, which would overflow", _852, const 1_i32) -> [success: bb326, unwind continue]
  using: _878@Mir(bb325[0]), _852@Phi(bb318)
bb326:
  _852 = move (_878.0: i32)
  using: _878@Mir(bb325[0])
  goto -> bb318
  using: 
bb327:
  _879 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _879) -> [0: bb331, otherwise: bb328]
  using: _879@Mir(bb327[0])
bb328:
  _984 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _985 = _984 as usize (Transmute)
  using: _984@Mir(bb328[0])
  _986 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _987 = Sub(_986, const 1_usize)
  using: _986@Mir(bb328[2])
  _988 = BitAnd(_985, _987)
  using: _985@Mir(bb328[1]), _987@Mir(bb328[3])
  _989 = Eq(_988, const 0_usize)
  using: _988@Mir(bb328[4])
  assert(_989, "misaligned pointer dereference: address must be a multiple of {} but is {}", _986, _985) -> [success: bb361, unwind unreachable]
  using: _989@Mir(bb328[5]), _986@Mir(bb328[2]), _985@Mir(bb328[1])
bb329:
  _884 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _978 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _979 = _978 as usize (Transmute)
  using: _978@Mir(bb329[1])
  _980 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _981 = Sub(_980, const 1_usize)
  using: _980@Mir(bb329[3])
  _982 = BitAnd(_979, _981)
  using: _979@Mir(bb329[2]), _981@Mir(bb329[4])
  _983 = Eq(_982, const 0_usize)
  using: _982@Mir(bb329[5])
  assert(_983, "misaligned pointer dereference: address must be a multiple of {} but is {}", _980, _979) -> [success: bb360, unwind unreachable]
  using: _983@Mir(bb329[6]), _980@Mir(bb329[3]), _979@Mir(bb329[2])
bb330:
  _831 = BitOr(_831, move _883)
  using: _883@Mir(bb360[6])
  goto -> bb331
  using: 
bb331:
  _891 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _891) -> [0: bb335, otherwise: bb332]
  using: _891@Mir(bb331[0])
bb332:
  _893 = _412
  using: _412@Phi(bb138)
  _894 = const u64::MAX
  using: 
  _892 = Ne(move _893, move _894)
  using: _893@Mir(bb332[0]), _894@Mir(bb332[1])
  switchInt(move _892) -> [0: bb335, otherwise: bb333]
  using: _892@Mir(bb332[2])
bb333:
  _896 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _897 = _722
  using: _722@Phi(bb276)
  _899 = &mut _832
  using: _832@Mir(bb310[1])
  _898 = &raw mut (*_899)
  using: _899@Mir(bb333[2])
  _901 = &mut _751
  using: _751@Mir(bb276[2])
  _900 = &raw mut (*_901)
  using: _901@Mir(bb333[4])
  _902 = _100
  using: _100@Mir(bb31[3])
  _895 = src::libtree::check_search_paths(_896, move _897, move _898, move _900, _2, _3, move _902) -> [return: bb334, unwind continue]
  using: _896@Mir(bb333[0]), _897@Mir(bb333[1]), _898@Mir(bb333[3]), _900@Mir(bb333[5]), _2@Entry, _3@Entry, _902@Mir(bb333[6])
bb334:
  _831 = BitOr(_831, move _895)
  using: _895@Mir(bb333[7])
  goto -> bb335
  using: 
bb335:
  _903 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _903) -> [0: bb339, otherwise: bb336]
  using: _903@Mir(bb335[0])
bb336:
  _904 = _409
  using: _409@Mir(bb165[8])
  switchInt(move _904) -> [0: bb337, otherwise: bb339]
  using: _904@Mir(bb336[0])
bb337:
  _906 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _972 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _973 = _972 as usize (Transmute)
  using: _972@Mir(bb337[1])
  _974 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _975 = Sub(_974, const 1_usize)
  using: _974@Mir(bb337[3])
  _976 = BitAnd(_973, _975)
  using: _973@Mir(bb337[2]), _975@Mir(bb337[4])
  _977 = Eq(_976, const 0_usize)
  using: _976@Mir(bb337[5])
  assert(_977, "misaligned pointer dereference: address must be a multiple of {} but is {}", _974, _973) -> [success: bb359, unwind unreachable]
  using: _977@Mir(bb337[6]), _974@Mir(bb337[3]), _973@Mir(bb337[2])
bb338:
  _831 = BitOr(_831, move _905)
  using: _905@Mir(bb359[6])
  goto -> bb339
  using: 
bb339:
  _913 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _913) -> [0: bb343, otherwise: bb340]
  using: _913@Mir(bb339[0])
bb340:
  _914 = _409
  using: _409@Mir(bb165[8])
  switchInt(move _914) -> [0: bb341, otherwise: bb343]
  using: _914@Mir(bb340[0])
bb341:
  _916 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _966 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _967 = _966 as usize (Transmute)
  using: _966@Mir(bb341[1])
  _968 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _969 = Sub(_968, const 1_usize)
  using: _968@Mir(bb341[3])
  _970 = BitAnd(_967, _969)
  using: _967@Mir(bb341[2]), _969@Mir(bb341[4])
  _971 = Eq(_970, const 0_usize)
  using: _970@Mir(bb341[5])
  assert(_971, "misaligned pointer dereference: address must be a multiple of {} but is {}", _968, _967) -> [success: bb358, unwind unreachable]
  using: _971@Mir(bb341[6]), _968@Mir(bb341[3]), _967@Mir(bb341[2])
bb342:
  _831 = BitOr(_831, move _915)
  using: _915@Mir(bb358[6])
  goto -> bb343
  using: 
bb343:
  _923 = _832
  using: _832@Mir(bb310[1])
  switchInt(move _923) -> [0: bb351, otherwise: bb344]
  using: _923@Mir(bb343[0])
bb344:
  _925 = _832
  using: _832@Mir(bb310[1])
  _927 = &mut _751
  using: _751@Mir(bb276[2])
  _926 = &raw mut (*_927)
  using: _927@Mir(bb344[1])
  _930 = _412
  using: _412@Phi(bb138)
  _931 = const u64::MAX
  using: 
  _929 = Eq(move _930, move _931)
  using: _930@Mir(bb344[3]), _931@Mir(bb344[4])
  switchInt(move _929) -> [0: bb346, otherwise: bb345]
  using: _929@Mir(bb344[5])
bb345:
  _928 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  goto -> bb347
  using: 
bb346:
  _960 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _961 = _960 as usize (Transmute)
  using: _960@Mir(bb346[0])
  _962 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _963 = Sub(_962, const 1_usize)
  using: _962@Mir(bb346[2])
  _964 = BitAnd(_961, _963)
  using: _961@Mir(bb346[1]), _963@Mir(bb346[3])
  _965 = Eq(_964, const 0_usize)
  using: _964@Mir(bb346[4])
  assert(_965, "misaligned pointer dereference: address must be a multiple of {} but is {}", _962, _961) -> [success: bb357, unwind unreachable]
  using: _965@Mir(bb346[5]), _962@Mir(bb346[2]), _961@Mir(bb346[1])
bb347:
  _935 = _409
  using: _409@Mir(bb165[8])
  _924 = src::libtree::print_error(_2, move _925, move _926, move _928, _3, move _935) -> [return: bb348, unwind continue]
  using: _2@Entry, _925@Mir(bb344[0]), _926@Mir(bb344[2]), _928@Phi(bb347), _3@Entry, _935@Mir(bb347[0])
bb348:
  _954 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _955 = _954 as usize (Transmute)
  using: _954@Mir(bb348[0])
  _956 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _957 = Sub(_956, const 1_usize)
  using: _956@Mir(bb348[2])
  _958 = BitAnd(_955, _957)
  using: _955@Mir(bb348[1]), _957@Mir(bb348[3])
  _959 = Eq(_958, const 0_usize)
  using: _958@Mir(bb348[4])
  assert(_959, "misaligned pointer dereference: address must be a multiple of {} but is {}", _956, _955) -> [success: bb356, unwind unreachable]
  using: _959@Mir(bb348[5]), _956@Mir(bb348[2]), _955@Mir(bb348[1])
bb349:
  _941 = &mut _414
  using: _414@Mir(bb136[7])
  _940 = &raw mut (*_941)
  using: _941@Mir(bb349[0])
  _939 = src::libtree::small_vec_u64_free(move _940) -> [return: bb350, unwind continue]
  using: _940@Mir(bb349[1])
bb350:
  _0 = const 28_i32
  using: 
  goto -> bb354
  using: 
bb351:
  _948 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _949 = _948 as usize (Transmute)
  using: _948@Mir(bb351[0])
  _950 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _951 = Sub(_950, const 1_usize)
  using: _950@Mir(bb351[2])
  _952 = BitAnd(_949, _951)
  using: _949@Mir(bb351[1]), _951@Mir(bb351[3])
  _953 = Eq(_952, const 0_usize)
  using: _952@Mir(bb351[4])
  assert(_953, "misaligned pointer dereference: address must be a multiple of {} but is {}", _950, _949) -> [success: bb355, unwind unreachable]
  using: _953@Mir(bb351[5]), _950@Mir(bb351[2]), _949@Mir(bb351[1])
bb352:
  _947 = &mut _414
  using: _414@Mir(bb136[7])
  _946 = &raw mut (*_947)
  using: _947@Mir(bb352[0])
  _945 = src::libtree::small_vec_u64_free(move _946) -> [return: bb353, unwind continue]
  using: _946@Mir(bb352[1])
bb353:
  _0 = _831
  using: _831@Phi(bb343)
  goto -> bb354
  using: 
bb354:
  return
  using: _0@Phi(bb354)
bb355:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _944 = &mut _751
  using: _751@Mir(bb276[2])
  _943 = &raw mut (*_944)
  using: _944@Mir(bb355[1])
  _942 = src::libtree::small_vec_u64_free(move _943) -> [return: bb352, unwind continue]
  using: _943@Mir(bb355[2])
bb356:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _938 = &mut _751
  using: _751@Mir(bb276[2])
  _937 = &raw mut (*_938)
  using: _938@Mir(bb356[1])
  _936 = src::libtree::small_vec_u64_free(move _937) -> [return: bb349, unwind continue]
  using: _937@Mir(bb356[2])
bb357:
  _932 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Entry
  _934 = _722
  using: _722@Phi(bb276)
  _933 = move _934 as isize (IntToInt)
  using: _934@Mir(bb357[1])
  _928 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _932, move _933) -> [return: bb347, unwind continue]
  using: _932@Mir(bb357[0]), _933@Mir(bb357[2])
bb358:
  _917 = ((*_3).13: u64)
  using: _3@Entry
  _919 = &mut _832
  using: _832@Mir(bb310[1])
  _918 = &raw mut (*_919)
  using: _919@Mir(bb358[1])
  _921 = &mut _751
  using: _751@Mir(bb276[2])
  _920 = &raw mut (*_921)
  using: _921@Mir(bb358[3])
  _922 = _100
  using: _100@Mir(bb31[3])
  _915 = src::libtree::check_search_paths(_916, move _917, move _918, move _920, _2, _3, move _922) -> [return: bb342, unwind continue]
  using: _916@Mir(bb341[0]), _917@Mir(bb358[0]), _918@Mir(bb358[2]), _920@Mir(bb358[4]), _2@Entry, _3@Entry, _922@Mir(bb358[5])
bb359:
  _907 = ((*_3).14: u64)
  using: _3@Entry
  _909 = &mut _832
  using: _832@Mir(bb310[1])
  _908 = &raw mut (*_909)
  using: _909@Mir(bb359[1])
  _911 = &mut _751
  using: _751@Mir(bb276[2])
  _910 = &raw mut (*_911)
  using: _911@Mir(bb359[3])
  _912 = _100
  using: _100@Mir(bb31[3])
  _905 = src::libtree::check_search_paths(_906, move _907, move _908, move _910, _2, _3, move _912) -> [return: bb338, unwind continue]
  using: _906@Mir(bb337[0]), _907@Mir(bb359[0]), _908@Mir(bb359[2]), _910@Mir(bb359[4]), _2@Entry, _3@Entry, _912@Mir(bb359[5])
bb360:
  _885 = ((*_3).12: u64)
  using: _3@Entry
  _887 = &mut _832
  using: _832@Mir(bb310[1])
  _886 = &raw mut (*_887)
  using: _887@Mir(bb360[1])
  _889 = &mut _751
  using: _751@Mir(bb276[2])
  _888 = &raw mut (*_889)
  using: _889@Mir(bb360[3])
  _890 = _100
  using: _100@Mir(bb31[3])
  _883 = src::libtree::check_search_paths(_884, move _885, move _886, move _888, _2, _3, move _890) -> [return: bb330, unwind continue]
  using: _884@Mir(bb329[0]), _885@Mir(bb360[0]), _886@Mir(bb360[2]), _888@Mir(bb360[4]), _2@Entry, _3@Entry, _890@Mir(bb360[5])
bb361:
  _881 = ((*_3).12: u64)
  using: _3@Entry
  _882 = const u64::MAX
  using: 
  _880 = Ne(move _881, move _882)
  using: _881@Mir(bb361[0]), _882@Mir(bb361[1])
  switchInt(move _880) -> [0: bb331, otherwise: bb329]
  using: _880@Mir(bb361[2])
bb362:
  _868 = ((*_3).11: [u64; 32])[_869]
  using: _3@Entry, _869@Mir(bb322[4])
  _874 = &mut _832
  using: _832@Mir(bb310[1])
  _873 = &raw mut (*_874)
  using: _874@Mir(bb362[1])
  _876 = &mut _751
  using: _751@Mir(bb276[2])
  _875 = &raw mut (*_876)
  using: _876@Mir(bb362[3])
  _877 = _100
  using: _100@Mir(bb31[3])
  _864 = src::libtree::check_search_paths(_865, move _868, move _873, move _875, _2, _3, move _877) -> [return: bb324, unwind continue]
  using: _865@Mir(bb322[2]), _868@Mir(bb362[0]), _873@Mir(bb362[2]), _875@Mir(bb362[4]), _2@Entry, _3@Entry, _877@Mir(bb362[5])
bb363:
  _871 = const 32_usize
  using: 
  _872 = Lt(_869, _871)
  using: _869@Mir(bb322[4]), _871@Mir(bb363[0])
  assert(move _872, "index out of bounds: the length is {} but the index is {}", move _871, _869) -> [success: bb323, unwind continue]
  using: _872@Mir(bb363[1]), _871@Mir(bb363[0]), _869@Mir(bb322[4])
bb364:
  _858 = ((*_3).11: [u64; 32])[_859]
  using: _3@Entry, _859@Mir(bb320[1])
  _863 = const u64::MAX
  using: 
  _857 = Eq(move _858, move _863)
  using: _858@Mir(bb364[0]), _863@Mir(bb364[1])
  switchInt(move _857) -> [0: bb322, otherwise: bb325]
  using: _857@Mir(bb364[2])
bb365:
  _861 = const 32_usize
  using: 
  _862 = Lt(_859, _861)
  using: _859@Mir(bb320[1]), _861@Mir(bb365[0])
  assert(move _862, "index out of bounds: the length is {} but the index is {}", move _861, _859) -> [success: bb321, unwind continue]
  using: _862@Mir(bb365[1]), _861@Mir(bb365[0]), _859@Mir(bb320[1])
bb366:
  _835 = ((*_3).0: i32)
  using: _3@Entry
  _836 = const 0_i32
  using: 
  _834 = Eq(move _835, move _836)
  using: _835@Mir(bb366[0]), _836@Mir(bb366[1])
  switchInt(move _834) -> [0: bb313, otherwise: bb312]
  using: _834@Mir(bb366[2])
bb367:
  _800 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Entry
  _801 = _564 as isize (IntToInt)
  using: _564@Mir(bb398[0])
  _795 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _800, move _801) -> [return: bb296, unwind continue]
  using: _800@Mir(bb367[0]), _801@Mir(bb367[1])
bb368:
  _799 = ((*_3).1: i32)
  using: _3@Entry
  switchInt(move _799) -> [0: bb295, otherwise: bb294]
  using: _799@Mir(bb368[0])
bb369:
  _789 = &mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Entry
  _788 = &raw mut (*_789)
  using: _789@Mir(bb369[0])
  _790 = _6
  using: _6@Mir(bb0[5])
  _787 = src::libtree::string_table_copy_from_file(move _788, move _790) -> [return: bb289, unwind continue]
  using: _788@Mir(bb369[1]), _790@Mir(bb369[2])
bb370:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _780 = _6
  using: _6@Mir(bb0[5])
  _779 = src::libtree::fclose(move _780) -> [return: bb285, unwind continue]
  using: _780@Mir(bb370[1])
bb371:
  _772 = (*_773)
  using: _773@Mir(bb280[5])
  _770 = core::num::<impl u64>::wrapping_add(move _771, move _772) -> [return: bb282, unwind continue]
  using: _771@Mir(bb280[1]), _772@Mir(bb371[0])
bb372:
  _765 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _762 = src::libtree::small_vec_u64_append(move _763, move _765) -> [return: bb280, unwind continue]
  using: _763@Mir(bb279[1]), _765@Mir(bb372[0])
bb373:
  _744 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _746 = _722
  using: _722@Mir(bb376[0])
  _750 = &mut _647
  using: _647@Mir(bb237[0])
  _749 = move _750 as &mut [i8] (PointerCoercion(Unsize))
  using: _750@Mir(bb373[2])
  _748 = core::slice::<impl [i8]>::as_mut_ptr(move _749) -> [return: bb273, unwind continue]
  using: _749@Mir(bb373[3])
bb374:
  _742 = &mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Entry
  _741 = &raw mut (*_742)
  using: _742@Mir(bb374[0])
  _743 = _6
  using: _6@Mir(bb0[5])
  _740 = src::libtree::string_table_copy_from_file(move _741, move _743) -> [return: bb272, unwind continue]
  using: _741@Mir(bb374[1]), _743@Mir(bb374[2])
bb375:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _736 = _6
  using: _6@Mir(bb0[5])
  _735 = src::libtree::fclose(move _736) -> [return: bb269, unwind continue]
  using: _736@Mir(bb375[1])
bb376:
  _722 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _724 = _412
  using: _412@Phi(bb138)
  _725 = const u64::MAX
  using: 
  _723 = Ne(move _724, move _725)
  using: _724@Mir(bb376[1]), _725@Mir(bb376[2])
  switchInt(move _723) -> [0: bb276, otherwise: bb265]
  using: _723@Mir(bb376[3])
bb377:
  ((*_3).11: [u64; 32])[_719] = _709
  using: _3@Entry, _719@Mir(bb262[0]), _709@Mir(bb381[0])
  goto -> bb264
  using: 
bb378:
  _720 = const 32_usize
  using: 
  _721 = Lt(_719, _720)
  using: _719@Mir(bb262[0]), _720@Mir(bb378[0])
  assert(move _721, "index out of bounds: the length is {} but the index is {}", move _720, _719) -> [success: bb263, unwind continue]
  using: _721@Mir(bb378[1]), _720@Mir(bb378[0]), _719@Mir(bb262[0])
bb379:
  _711 = ((*_3).11: [u64; 32])[_712]
  using: _3@Entry, _712@Mir(bb381[1])
  _718 = &mut _647
  using: _647@Mir(bb237[0])
  _717 = move _718 as &mut [i8] (PointerCoercion(Unsize))
  using: _718@Mir(bb379[1])
  _716 = core::slice::<impl [i8]>::as_mut_ptr(move _717) -> [return: bb260, unwind continue]
  using: _717@Mir(bb379[2])
bb380:
  _713 = const 32_usize
  using: 
  _714 = Lt(_712, _713)
  using: _712@Mir(bb381[1]), _713@Mir(bb380[0])
  assert(move _714, "index out of bounds: the length is {} but the index is {}", move _713, _712) -> [success: bb259, unwind continue]
  using: _714@Mir(bb380[1]), _713@Mir(bb380[0]), _712@Mir(bb381[1])
bb381:
  _709 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _712 = _2 as usize (IntToInt)
  using: _2@Entry
  _1098 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1099 = _1098 as usize (Transmute)
  using: _1098@Mir(bb381[2])
  _1100 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1101 = Sub(_1100, const 1_usize)
  using: _1100@Mir(bb381[4])
  _1102 = BitAnd(_1099, _1101)
  using: _1099@Mir(bb381[3]), _1101@Mir(bb381[5])
  _1103 = Eq(_1102, const 0_usize)
  using: _1102@Mir(bb381[6])
  assert(_1103, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1100, _1099) -> [success: bb380, unwind unreachable]
  using: _1103@Mir(bb381[7]), _1100@Mir(bb381[4]), _1099@Mir(bb381[3])
bb382:
  _707 = &mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Entry
  _706 = &raw mut (*_707)
  using: _707@Mir(bb382[0])
  _708 = _6
  using: _6@Mir(bb0[5])
  _705 = src::libtree::string_table_copy_from_file(move _706, move _708) -> [return: bb258, unwind continue]
  using: _706@Mir(bb382[1]), _708@Mir(bb382[2])
bb383:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _701 = _6
  using: _6@Mir(bb0[5])
  _700 = src::libtree::fclose(move _701) -> [return: bb255, unwind continue]
  using: _701@Mir(bb383[1])
bb384:
  ((*_3).11: [u64; 32])[_688] = move _687
  using: _3@Entry, _688@Mir(bb386[1]), _687@Mir(bb386[0])
  _693 = _6
  using: _6@Mir(bb0[5])
  _696 = _545
  using: _545@Mir(bb399[1])
  _697 = _411
  using: _411@Phi(bb138)
  _695 = core::num::<impl u64>::wrapping_add(move _696, move _697) -> [return: bb252, unwind continue]
  using: _696@Mir(bb384[2]), _697@Mir(bb384[3])
bb385:
  _689 = const 32_usize
  using: 
  _690 = Lt(_688, _689)
  using: _688@Mir(bb386[1]), _689@Mir(bb385[0])
  assert(move _690, "index out of bounds: the length is {} but the index is {}", move _689, _688) -> [success: bb251, unwind continue]
  using: _690@Mir(bb385[1]), _689@Mir(bb385[0]), _688@Mir(bb386[1])
bb386:
  _687 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _688 = _2 as usize (IntToInt)
  using: _2@Entry
  _1128 = _3 as *const () (PtrToPtr)
  using: _3@Entry
  _1129 = _1128 as usize (Transmute)
  using: _1128@Mir(bb386[2])
  _1130 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _1131 = Sub(_1130, const 1_usize)
  using: _1130@Mir(bb386[4])
  _1132 = BitAnd(_1129, _1131)
  using: _1129@Mir(bb386[3]), _1131@Mir(bb386[5])
  _1133 = Eq(_1132, const 0_usize)
  using: _1132@Mir(bb386[6])
  assert(_1133, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1130, _1129) -> [success: bb385, unwind unreachable]
  using: _1133@Mir(bb386[7]), _1130@Mir(bb386[4]), _1129@Mir(bb386[3])
bb387:
  ((*_3).11: [u64; 32])[_684] = move _683
  using: _3@Entry, _684@Mir(bb248[1]), _683@Mir(bb248[0])
  goto -> bb264
  using: 
bb388:
  _685 = const 32_usize
  using: 
  _686 = Lt(_684, _685)
  using: _684@Mir(bb248[1]), _685@Mir(bb388[0])
  assert(move _686, "index out of bounds: the length is {} but the index is {}", move _685, _684) -> [success: bb249, unwind continue]
  using: _686@Mir(bb388[1]), _685@Mir(bb388[0]), _684@Mir(bb248[1])
bb389:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _643 = _6
  using: _6@Mir(bb0[5])
  _642 = src::libtree::fclose(move _643) -> [return: bb235, unwind continue]
  using: _643@Mir(bb389[1])
bb390:
  _611 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Entry
  _612 = _564 as isize (IntToInt)
  using: _564@Mir(bb398[0])
  _606 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _611, move _612) -> [return: bb220, unwind continue]
  using: _611@Mir(bb390[0]), _612@Mir(bb390[1])
bb391:
  _610 = ((*_3).1: i32)
  using: _3@Entry
  switchInt(move _610) -> [0: bb219, otherwise: bb218]
  using: _610@Mir(bb391[0])
bb392:
  _604 = ((*_3).0: i32)
  using: _3@Entry
  _605 = const 3_i32
  using: 
  _596 = Ge(move _604, move _605)
  using: _604@Mir(bb392[0]), _605@Mir(bb392[1])
  goto -> bb215
  using: 
bb393:
  _602 = ((*_3).0: i32)
  using: _3@Entry
  _603 = const 2_i32
  using: 
  _601 = Ge(move _602, move _603)
  using: _602@Mir(bb393[0]), _603@Mir(bb393[1])
  switchInt(move _601) -> [0: bb214, otherwise: bb213]
  using: _601@Mir(bb393[2])
bb394:
  _598 = ((*_3).4: u64)
  using: _3@Entry
  _597 = Lt(_2, move _598)
  using: _2@Entry, _598@Mir(bb394[0])
  switchInt(move _597) -> [0: bb208, otherwise: bb207]
  using: _597@Mir(bb394[1])
bb395:
  _593 = (((*_3).5: src::libtree::string_table_t).0: *mut i8)
  using: _3@Entry
  _594 = _564 as isize (IntToInt)
  using: _564@Mir(bb398[0])
  _592 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _593, move _594) -> [return: bb204, unwind continue]
  using: _593@Mir(bb395[0]), _594@Mir(bb395[1])
bb396:
  _584 = &mut ((*_3).5: src::libtree::string_table_t)
  using: _3@Entry
  _583 = &raw mut (*_584)
  using: _584@Mir(bb396[0])
  _585 = _6
  using: _6@Mir(bb0[5])
  _582 = src::libtree::string_table_copy_from_file(move _583, move _585) -> [return: bb201, unwind continue]
  using: _583@Mir(bb396[1]), _585@Mir(bb396[2])
bb397:
  (((*_3).5: src::libtree::string_table_t).1: u64) = _14
  using: _3@Entry, _14@Mir(bb404[0])
  _578 = _6
  using: _6@Mir(bb0[5])
  _577 = src::libtree::fclose(move _578) -> [return: bb198, unwind continue]
  using: _578@Mir(bb397[1])
bb398:
  _564 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _566 = _413
  using: _413@Phi(bb138)
  _567 = const u64::MAX
  using: 
  _565 = Ne(move _566, move _567)
  using: _566@Mir(bb398[1]), _567@Mir(bb398[2])
  switchInt(move _565) -> [0: bb201, otherwise: bb194]
  using: _565@Mir(bb398[3])
bb399:
  _553 = (*_554)
  using: _554@Mir(bb189[3])
  _545 = core::num::<impl u64>::wrapping_sub(move _546, move _553) -> [return: bb191, unwind continue]
  using: _546@Mir(bb400[2]), _553@Mir(bb399[0])
bb400:
  _547 = (*_548)
  using: _548@Mir(bb187[3])
  _552 = _410
  using: _410@Phi(bb138)
  _546 = core::num::<impl u64>::wrapping_add(move _547, move _552) -> [return: bb189, unwind continue]
  using: _547@Mir(bb400[0]), _552@Mir(bb400[1])
bb401:
  _535 = (*_536)
  using: _536@Mir(bb183[1])
  _533 = Ge(move _534, move _535)
  using: _534@Mir(bb182[0]), _535@Mir(bb401[0])
  switchInt(move _533) -> [0: bb187, otherwise: bb185]
  using: _533@Mir(bb401[1])
bb402:
  _356 = &mut ((*_3).6: src::libtree::visited_file_array_t)
  using: _3@Entry
  _355 = &raw mut (*_356)
  using: _356@Mir(bb402[0])
  _358 = &mut _332
  using: _332@Mir(bb110[1])
  _357 = &raw mut (*_358)
  using: _358@Mir(bb402[2])
  _354 = src::libtree::visited_files_append(move _355, move _357) -> [return: bb119, unwind continue]
  using: _355@Mir(bb402[1]), _357@Mir(bb402[3])
bb403:
  _350 = &mut ((*_3).6: src::libtree::visited_file_array_t)
  using: _3@Entry
  _349 = &raw mut (*_350)
  using: _350@Mir(bb403[0])
  _352 = &mut _332
  using: _332@Mir(bb110[1])
  _351 = &raw mut (*_352)
  using: _352@Mir(bb403[2])
  _348 = src::libtree::visited_files_contains(move _349, move _351) -> [return: bb117, unwind continue]
  using: _349@Mir(bb403[1]), _351@Mir(bb403[3])
bb404:
  _14 = (((*_3).5: src::libtree::string_table_t).1: u64)
  using: _3@Entry
  _15 = [const 0_i8; 16]
  using: 
  _20 = &mut _15
  using: _15@Mir(bb404[1])
  _19 = &raw mut (*_20)
  using: _20@Mir(bb404[2])
  _18 = move _19 as *mut libc::c_void (PtrToPtr)
  using: _19@Mir(bb404[3])
  _22 = const 16_i32
  using: 
  _21 = move _22 as u64 (IntToInt)
  using: _22@Mir(bb404[5])
  _24 = const 1_i32
  using: 
  _23 = move _24 as u64 (IntToInt)
  using: _24@Mir(bb404[7])
  _25 = _6
  using: _6@Mir(bb0[5])
  _17 = src::libtree::fread(move _18, move _21, move _23, move _25) -> [return: bb5, unwind continue]
  using: _18@Mir(bb404[4]), _21@Mir(bb404[6]), _23@Mir(bb404[8]), _25@Mir(bb404[9])
@DefId(0:140 ~ lib[f5c5]::src::libtree::ld_conf_globbing)
bb0:
  _4 = const 0_usize as *mut *mut i8 (PointerFromExposedAddress)
  using: 
  _5 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void)>::None
  using: 
  _6 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::None
  using: 
  _7 = std::option::Option::<unsafe extern "C" fn(*const i8) -> *mut libc::c_void>::None
  using: 
  _8 = std::option::Option::<unsafe extern "C" fn(*const i8, *mut libc::c_void) -> i32>::None
  using: 
  _9 = std::option::Option::<unsafe extern "C" fn(*const i8, *mut libc::c_void) -> i32>::None
  using: 
  _3 = src::libtree::glob_t { gl_pathc: const 0_u64, gl_pathv: move _4, gl_offs: const 0_u64, gl_flags: const 0_i32, gl_closedir: move _5, gl_readdir: move _6, gl_opendir: move _7, gl_lstat: move _8, gl_stat: move _9 }
  using: _4@Mir(bb0[0]), _5@Mir(bb0[1]), _6@Mir(bb0[2]), _7@Mir(bb0[3]), _8@Mir(bb0[4]), _9@Mir(bb0[5])
  _13 = &mut _3
  using: _3@Mir(bb0[6])
  _12 = &raw mut (*_13)
  using: _13@Mir(bb0[7])
  _11 = move _12 as *mut libc::c_void (PtrToPtr)
  using: _12@Mir(bb0[8])
  _14 = const 0_i32
  using: 
  _16 = std::mem::size_of::<src::libtree::glob_t>() -> [return: bb1, unwind continue]
  using: 
bb1:
  _15 = move _16 as u64 (IntToInt)
  using: _16@Mir(bb0[11])
  _10 = src::libtree::memset(move _11, move _14, move _15) -> [return: bb2, unwind continue]
  using: _11@Mir(bb0[9]), _14@Mir(bb0[10]), _15@Mir(bb1[0])
bb2:
  _18 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _19 = const 0_i32
  using: 
  _20 = std::option::Option::<unsafe extern "C" fn(*const i8, i32) -> i32>::None
  using: 
  _22 = &mut _3
  using: _3@Mir(bb0[6])
  _21 = &raw mut (*_22)
  using: _22@Mir(bb2[3])
  _17 = src::libtree::glob(move _18, move _19, move _20, move _21) -> [return: bb3, unwind continue]
  using: _18@Mir(bb2[0]), _19@Mir(bb2[1]), _20@Mir(bb2[2]), _21@Mir(bb2[4])
bb3:
  switchInt(_17) -> [1: bb5, 2: bb5, 3: bb7, otherwise: bb4]
  using: _17@Mir(bb2[5])
bb4:
  _29 = const 0_i32
  using: 
  _31 = const 0_i32
  using: 
  _30 = move _31 as u64 (IntToInt)
  using: _31@Mir(bb4[1])
  goto -> bb9
  using: 
bb5:
  _25 = &mut _3
  using: _3@Mir(bb0[6])
  _24 = &raw mut (*_25)
  using: _25@Mir(bb5[0])
  _23 = src::libtree::globfree(move _24) -> [return: bb6, unwind continue]
  using: _24@Mir(bb5[1])
bb6:
  _0 = const 1_i32
  using: 
  goto -> bb16
  using: 
bb7:
  _28 = &mut _3
  using: _3@Mir(bb0[6])
  _27 = &raw mut (*_28)
  using: _28@Mir(bb7[0])
  _26 = src::libtree::globfree(move _27) -> [return: bb8, unwind continue]
  using: _27@Mir(bb7[1])
bb8:
  _0 = const 0_i32
  using: 
  goto -> bb16
  using: 
bb9:
  _33 = _30
  using: _30@Phi(bb9)
  _34 = (_3.0: u64)
  using: _3@Mir(bb0[6])
  _32 = Lt(move _33, move _34)
  using: _33@Mir(bb9[0]), _34@Mir(bb9[1])
  switchInt(move _32) -> [0: bb14, otherwise: bb10]
  using: _32@Mir(bb9[2])
bb10:
  _38 = (_3.1: *mut *mut i8)
  using: _3@Mir(bb0[6])
  _40 = _30
  using: _30@Phi(bb9)
  _39 = move _40 as isize (IntToInt)
  using: _40@Mir(bb10[1])
  _37 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _38, move _39) -> [return: bb11, unwind continue]
  using: _38@Mir(bb10[0]), _39@Mir(bb10[2])
bb11:
  _46 = _37 as *const () (PtrToPtr)
  using: _37@Mir(bb10[3])
  _47 = _46 as usize (Transmute)
  using: _46@Mir(bb11[0])
  _48 = AlignOf(*mut i8)
  using: 
  _49 = Sub(_48, const 1_usize)
  using: _48@Mir(bb11[2])
  _50 = BitAnd(_47, _49)
  using: _47@Mir(bb11[1]), _49@Mir(bb11[3])
  _51 = Eq(_50, const 0_usize)
  using: _50@Mir(bb11[4])
  assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb17, unwind unreachable]
  using: _51@Mir(bb11[5]), _48@Mir(bb11[2]), _47@Mir(bb11[1])
bb12:
  _29 = BitOr(_29, move _35)
  using: _35@Mir(bb17[1])
  _42 = _30
  using: _30@Phi(bb9)
  _41 = core::num::<impl u64>::wrapping_add(move _42, const 1_u64) -> [return: bb13, unwind continue]
  using: _42@Mir(bb12[1])
bb13:
  _30 = move _41
  using: _41@Mir(bb12[2])
  goto -> bb9
  using: 
bb14:
  _45 = &mut _3
  using: _3@Mir(bb0[6])
  _44 = &raw mut (*_45)
  using: _45@Mir(bb14[0])
  _43 = src::libtree::globfree(move _44) -> [return: bb15, unwind continue]
  using: _44@Mir(bb14[1])
bb15:
  _0 = _29
  using: _29@Mir(bb12[0])
  goto -> bb16
  using: 
bb16:
  return
  using: _0@Phi(bb16)
bb17:
  _36 = (*_37)
  using: _37@Mir(bb10[3])
  _35 = src::libtree::parse_ld_config_file(_1, move _36) -> [return: bb12, unwind continue]
  using: _1@Entry, _36@Mir(bb17[0])
@DefId(0:141 ~ lib[f5c5]::src::libtree::parse_ld_config_file)
bb0:
  _4 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _8 = const b"r\x00"
  using: 
  _7 = &raw const (*_8)
  using: _8@Mir(bb0[1])
  _6 = move _7 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _7@Mir(bb0[2])
  _5 = move _6 as *const i8 (PtrToPtr)
  using: _6@Mir(bb0[3])
  _3 = src::libtree::fopen(move _4, move _5) -> [return: bb1, unwind continue]
  using: _4@Mir(bb0[0]), _5@Mir(bb0[4])
bb1:
  _10 = _3
  using: _3@Mir(bb0[5])
  _9 = std::ptr::mut_ptr::<impl *mut src::libtree::_IO_FILE>::is_null(move _10) -> [return: bb2, unwind continue]
  using: _10@Mir(bb1[0])
bb2:
  switchInt(move _9) -> [0: bb4, otherwise: bb3]
  using: _9@Mir(bb1[1])
bb3:
  _0 = const 1_i32
  using: 
  goto -> bb81
  using: 
bb4:
  _11 = const 0_i32
  using: 
  _12 = [const 0_i8; 4096]
  using: 
  _13 = [const 0_i8; 4096]
  using: 
  goto -> bb5
  using: 
bb5:
  _15 = _11
  using: _11@Phi(bb5)
  _17 = const 1_i32
  using: 
  _18 = Eq(_17, const i32::MIN)
  using: _17@Mir(bb5[1])
  assert(!move _18, "attempt to negate `{}`, which would overflow", _17) -> [success: bb6, unwind continue]
  using: _18@Mir(bb5[2]), _17@Mir(bb5[1])
bb6:
  _16 = Neg(move _17)
  using: _17@Mir(bb5[1])
  _14 = Ne(move _15, move _16)
  using: _15@Mir(bb5[0]), _16@Mir(bb6[0])
  switchInt(move _14) -> [0: bb79, otherwise: bb7]
  using: _14@Mir(bb6[1])
bb7:
  _20 = const 0_i32
  using: 
  _19 = move _20 as u64 (IntToInt)
  using: _20@Mir(bb7[0])
  goto -> bb8
  using: 
bb8:
  _22 = _3
  using: _3@Mir(bb0[5])
  _21 = src::libtree::_IO_getc(move _22) -> [return: bb9, unwind continue]
  using: _22@Mir(bb8[0])
bb9:
  _11 = move _21
  using: _21@Mir(bb8[1])
  _24 = _11
  using: _11@Mir(bb9[0])
  _25 = const '\n' as i32 (IntToInt)
  using: 
  _23 = Ne(move _24, move _25)
  using: _24@Mir(bb9[1]), _25@Mir(bb9[2])
  switchInt(move _23) -> [0: bb13, otherwise: bb10]
  using: _23@Mir(bb9[3])
bb10:
  _27 = _11
  using: _11@Mir(bb9[0])
  _29 = const 1_i32
  using: 
  _30 = Eq(_29, const i32::MIN)
  using: _29@Mir(bb10[1])
  assert(!move _30, "attempt to negate `{}`, which would overflow", _29) -> [success: bb11, unwind continue]
  using: _30@Mir(bb10[2]), _29@Mir(bb10[1])
bb11:
  _28 = Neg(move _29)
  using: _29@Mir(bb10[1])
  _26 = Ne(move _27, move _28)
  using: _27@Mir(bb10[0]), _28@Mir(bb11[0])
  switchInt(move _26) -> [0: bb13, otherwise: bb12]
  using: _26@Mir(bb11[1])
bb12:
  _32 = _19
  using: _19@Phi(bb8)
  _35 = const 4096_i32
  using: 
  _36 = const 1_i32
  using: 
  _37 = CheckedSub(_35, _36)
  using: _35@Mir(bb12[1]), _36@Mir(bb12[2])
  assert(!move (_37.1: bool), "attempt to compute `{} - {}`, which would overflow", move _35, move _36) -> [success: bb14, unwind continue]
  using: _37@Mir(bb12[3]), _35@Mir(bb12[1]), _36@Mir(bb12[2])
bb13:
  _45 = const '\0' as i32 (IntToInt)
  using: 
  _47 = _19
  using: _19@Phi(bb8)
  _46 = move _47 as usize (IntToInt)
  using: _47@Mir(bb13[1])
  _48 = const 4096_usize
  using: 
  _49 = Lt(_46, _48)
  using: _46@Mir(bb13[2]), _48@Mir(bb13[3])
  assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _46) -> [success: bb18, unwind continue]
  using: _49@Mir(bb13[4]), _48@Mir(bb13[3]), _46@Mir(bb13[2])
bb14:
  _34 = move (_37.0: i32)
  using: _37@Mir(bb12[3])
  _33 = move _34 as u64 (IntToInt)
  using: _34@Mir(bb14[0])
  _31 = Lt(move _32, move _33)
  using: _32@Mir(bb12[0]), _33@Mir(bb14[1])
  switchInt(move _31) -> [0: bb8, otherwise: bb15]
  using: _31@Mir(bb14[2])
bb15:
  _38 = _19
  using: _19@Phi(bb8)
  _40 = _19
  using: _19@Phi(bb8)
  _39 = core::num::<impl u64>::wrapping_add(move _40, const 1_u64) -> [return: bb16, unwind continue]
  using: _40@Mir(bb15[1])
bb16:
  _19 = move _39
  using: _39@Mir(bb15[2])
  _41 = _11
  using: _11@Mir(bb9[0])
  _42 = _38 as usize (IntToInt)
  using: _38@Mir(bb15[0])
  _43 = const 4096_usize
  using: 
  _44 = Lt(_42, _43)
  using: _42@Mir(bb16[2]), _43@Mir(bb16[3])
  assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb17, unwind continue]
  using: _44@Mir(bb16[4]), _43@Mir(bb16[3]), _42@Mir(bb16[2])
bb17:
  _12[_42] = move _41 as i8 (IntToInt)
  using: _42@Mir(bb16[2]), _41@Mir(bb16[1])
  goto -> bb8
  using: 
bb18:
  _12[_46] = move _45 as i8 (IntToInt)
  using: _46@Mir(bb13[2]), _45@Mir(bb13[0])
  _52 = &mut _12
  using: _12@Mir(bb4[1])
  _51 = move _52 as &mut [i8] (PointerCoercion(Unsize))
  using: _52@Mir(bb18[1])
  _50 = core::slice::<impl [i8]>::as_mut_ptr(move _51) -> [return: bb19, unwind continue]
  using: _51@Mir(bb18[2])
bb19:
  _56 = &mut _12
  using: _12@Mir(bb4[1])
  _55 = move _56 as &mut [i8] (PointerCoercion(Unsize))
  using: _56@Mir(bb19[0])
  _54 = core::slice::<impl [i8]>::as_mut_ptr(move _55) -> [return: bb20, unwind continue]
  using: _55@Mir(bb19[1])
bb20:
  _58 = _19
  using: _19@Phi(bb8)
  _57 = move _58 as isize (IntToInt)
  using: _58@Mir(bb20[0])
  _53 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _54, move _57) -> [return: bb21, unwind continue]
  using: _54@Mir(bb19[2]), _57@Mir(bb20[1])
bb21:
  _64 = src::libtree::__ctype_b_loc() -> [return: bb22, unwind continue]
  using: 
bb22:
  _286 = _64 as *const () (PtrToPtr)
  using: _64@Mir(bb21[0])
  _287 = _286 as usize (Transmute)
  using: _286@Mir(bb22[0])
  _288 = AlignOf(*const u16)
  using: 
  _289 = Sub(_288, const 1_usize)
  using: _288@Mir(bb22[2])
  _290 = BitAnd(_287, _289)
  using: _287@Mir(bb22[1]), _289@Mir(bb22[3])
  _291 = Eq(_290, const 0_usize)
  using: _290@Mir(bb22[4])
  assert(_291, "misaligned pointer dereference: address must be a multiple of {} but is {}", _288, _287) -> [success: bb91, unwind unreachable]
  using: _291@Mir(bb22[5]), _288@Mir(bb22[2]), _287@Mir(bb22[1])
bb23:
  _280 = _62 as *const () (PtrToPtr)
  using: _62@Mir(bb91[4])
  _281 = _280 as usize (Transmute)
  using: _280@Mir(bb23[0])
  _282 = AlignOf(u16)
  using: 
  _283 = Sub(_282, const 1_usize)
  using: _282@Mir(bb23[2])
  _284 = BitAnd(_281, _283)
  using: _281@Mir(bb23[1]), _283@Mir(bb23[3])
  _285 = Eq(_284, const 0_usize)
  using: _284@Mir(bb23[4])
  assert(_285, "misaligned pointer dereference: address must be a multiple of {} but is {}", _282, _281) -> [success: bb90, unwind unreachable]
  using: _285@Mir(bb23[5]), _282@Mir(bb23[2]), _281@Mir(bb23[1])
bb24:
  _72 = _50
  using: _50@Phi(bb21)
  _71 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _72, const 1_isize) -> [return: bb25, unwind continue]
  using: _72@Mir(bb24[0])
bb25:
  _50 = move _71
  using: _71@Mir(bb24[1])
  goto -> bb21
  using: 
bb26:
  _75 = _50
  using: _50@Phi(bb21)
  _74 = move _75 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _75@Mir(bb26[0])
  _76 = const '#' as i32 (IntToInt)
  using: 
  _73 = src::libtree::strchr(move _74, move _76) -> [return: bb27, unwind continue]
  using: _74@Mir(bb26[1]), _76@Mir(bb26[2])
bb27:
  _78 = _73
  using: _73@Mir(bb26[3])
  _77 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _78) -> [return: bb28, unwind continue]
  using: _78@Mir(bb27[0])
bb28:
  switchInt(move _77) -> [0: bb29, otherwise: bb30]
  using: _77@Mir(bb27[1])
bb29:
  _79 = const '\0' as i32 (IntToInt)
  using: 
  (*_73) = move _79 as i8 (IntToInt)
  using: _73@Mir(bb26[3]), _79@Mir(bb29[0])
  goto -> bb30
  using: 
bb30:
  _81 = _53
  using: _53@Phi(bb30)
  _82 = _50
  using: _50@Phi(bb21)
  _80 = Ne(move _81, move _82)
  using: _81@Mir(bb30[0]), _82@Mir(bb30[1])
  switchInt(move _80) -> [0: bb35, otherwise: bb31]
  using: _80@Mir(bb30[2])
bb31:
  _84 = _53
  using: _53@Phi(bb30)
  _83 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _84, const -1_isize) -> [return: bb32, unwind continue]
  using: _84@Mir(bb31[0])
bb32:
  _53 = move _83
  using: _83@Mir(bb31[1])
  _90 = src::libtree::__ctype_b_loc() -> [return: bb33, unwind continue]
  using: 
bb33:
  _274 = _90 as *const () (PtrToPtr)
  using: _90@Mir(bb32[1])
  _275 = _274 as usize (Transmute)
  using: _274@Mir(bb33[0])
  _276 = AlignOf(*const u16)
  using: 
  _277 = Sub(_276, const 1_usize)
  using: _276@Mir(bb33[2])
  _278 = BitAnd(_275, _277)
  using: _275@Mir(bb33[1]), _277@Mir(bb33[3])
  _279 = Eq(_278, const 0_usize)
  using: _278@Mir(bb33[4])
  assert(_279, "misaligned pointer dereference: address must be a multiple of {} but is {}", _276, _275) -> [success: bb89, unwind unreachable]
  using: _279@Mir(bb33[5]), _276@Mir(bb33[2]), _275@Mir(bb33[1])
bb34:
  _268 = _88 as *const () (PtrToPtr)
  using: _88@Mir(bb89[4])
  _269 = _268 as usize (Transmute)
  using: _268@Mir(bb34[0])
  _270 = AlignOf(u16)
  using: 
  _271 = Sub(_270, const 1_usize)
  using: _270@Mir(bb34[2])
  _272 = BitAnd(_269, _271)
  using: _269@Mir(bb34[1]), _271@Mir(bb34[3])
  _273 = Eq(_272, const 0_usize)
  using: _272@Mir(bb34[4])
  assert(_273, "misaligned pointer dereference: address must be a multiple of {} but is {}", _270, _269) -> [success: bb88, unwind unreachable]
  using: _273@Mir(bb34[5]), _270@Mir(bb34[2]), _269@Mir(bb34[1])
bb35:
  _98 = _50
  using: _50@Phi(bb21)
  _99 = _53
  using: _53@Phi(bb35)
  _97 = Eq(move _98, move _99)
  using: _98@Mir(bb35[0]), _99@Mir(bb35[1])
  switchInt(move _97) -> [0: bb36, otherwise: bb5]
  using: _97@Mir(bb35[2])
bb36:
  _100 = const '\0' as i32 (IntToInt)
  using: 
  _102 = _53
  using: _53@Phi(bb35)
  _104 = const 1_i32
  using: 
  _103 = move _104 as isize (IntToInt)
  using: _104@Mir(bb36[2])
  _101 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _102, move _103) -> [return: bb37, unwind continue]
  using: _102@Mir(bb36[1]), _103@Mir(bb36[3])
bb37:
  (*_101) = move _100 as i8 (IntToInt)
  using: _101@Mir(bb36[4]), _100@Mir(bb36[0])
  _108 = _50
  using: _50@Phi(bb21)
  _107 = move _108 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _108@Mir(bb37[1])
  _112 = const b"include\x00"
  using: 
  _111 = &raw const (*_112)
  using: _112@Mir(bb37[3])
  _110 = move _111 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _111@Mir(bb37[4])
  _109 = move _110 as *const i8 (PtrToPtr)
  using: _110@Mir(bb37[5])
  _114 = const 7_i32
  using: 
  _113 = move _114 as u64 (IntToInt)
  using: _114@Mir(bb37[7])
  _106 = src::libtree::strncmp(move _107, move _109, move _113) -> [return: bb38, unwind continue]
  using: _107@Mir(bb37[2]), _109@Mir(bb37[6]), _113@Mir(bb37[8])
bb38:
  _115 = const 0_i32
  using: 
  _105 = Eq(move _106, move _115)
  using: _106@Mir(bb37[9]), _115@Mir(bb38[0])
  switchInt(move _105) -> [0: bb75, otherwise: bb39]
  using: _105@Mir(bb38[1])
bb39:
  _121 = src::libtree::__ctype_b_loc() -> [return: bb40, unwind continue]
  using: 
bb40:
  _262 = _121 as *const () (PtrToPtr)
  using: _121@Mir(bb39[0])
  _263 = _262 as usize (Transmute)
  using: _262@Mir(bb40[0])
  _264 = AlignOf(*const u16)
  using: 
  _265 = Sub(_264, const 1_usize)
  using: _264@Mir(bb40[2])
  _266 = BitAnd(_263, _265)
  using: _263@Mir(bb40[1]), _265@Mir(bb40[3])
  _267 = Eq(_266, const 0_usize)
  using: _266@Mir(bb40[4])
  assert(_267, "misaligned pointer dereference: address must be a multiple of {} but is {}", _264, _263) -> [success: bb87, unwind unreachable]
  using: _267@Mir(bb40[5]), _264@Mir(bb40[2]), _263@Mir(bb40[1])
bb41:
  _124 = (*_125)
  using: _125@Mir(bb87[4])
  _123 = move _124 as i32 (IntToInt)
  using: _124@Mir(bb41[0])
  _122 = move _123 as isize (IntToInt)
  using: _123@Mir(bb41[1])
  _119 = std::ptr::const_ptr::<impl *const u16>::offset(move _120, move _122) -> [return: bb42, unwind continue]
  using: _120@Mir(bb87[0]), _122@Mir(bb41[2])
bb42:
  _256 = _119 as *const () (PtrToPtr)
  using: _119@Mir(bb41[3])
  _257 = _256 as usize (Transmute)
  using: _256@Mir(bb42[0])
  _258 = AlignOf(u16)
  using: 
  _259 = Sub(_258, const 1_usize)
  using: _258@Mir(bb42[2])
  _260 = BitAnd(_257, _259)
  using: _257@Mir(bb42[1]), _259@Mir(bb42[3])
  _261 = Eq(_260, const 0_usize)
  using: _260@Mir(bb42[4])
  assert(_261, "misaligned pointer dereference: address must be a multiple of {} but is {}", _258, _257) -> [success: bb86, unwind unreachable]
  using: _261@Mir(bb42[5]), _258@Mir(bb42[2]), _257@Mir(bb42[1])
bb43:
  _133 = _50
  using: _50@Phi(bb21)
  _135 = const 8_i32
  using: 
  _134 = move _135 as isize (IntToInt)
  using: _135@Mir(bb43[1])
  _132 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _133, move _134) -> [return: bb44, unwind continue]
  using: _133@Mir(bb43[0]), _134@Mir(bb43[2])
bb44:
  _50 = move _132
  using: _132@Mir(bb43[3])
  goto -> bb45
  using: 
bb45:
  _141 = src::libtree::__ctype_b_loc() -> [return: bb46, unwind continue]
  using: 
bb46:
  _250 = _141 as *const () (PtrToPtr)
  using: _141@Mir(bb45[0])
  _251 = _250 as usize (Transmute)
  using: _250@Mir(bb46[0])
  _252 = AlignOf(*const u16)
  using: 
  _253 = Sub(_252, const 1_usize)
  using: _252@Mir(bb46[2])
  _254 = BitAnd(_251, _253)
  using: _251@Mir(bb46[1]), _253@Mir(bb46[3])
  _255 = Eq(_254, const 0_usize)
  using: _254@Mir(bb46[4])
  assert(_255, "misaligned pointer dereference: address must be a multiple of {} but is {}", _252, _251) -> [success: bb85, unwind unreachable]
  using: _255@Mir(bb46[5]), _252@Mir(bb46[2]), _251@Mir(bb46[1])
bb47:
  _244 = _139 as *const () (PtrToPtr)
  using: _139@Mir(bb85[4])
  _245 = _244 as usize (Transmute)
  using: _244@Mir(bb47[0])
  _246 = AlignOf(u16)
  using: 
  _247 = Sub(_246, const 1_usize)
  using: _246@Mir(bb47[2])
  _248 = BitAnd(_245, _247)
  using: _245@Mir(bb47[1]), _247@Mir(bb47[3])
  _249 = Eq(_248, const 0_usize)
  using: _248@Mir(bb47[4])
  assert(_249, "misaligned pointer dereference: address must be a multiple of {} but is {}", _246, _245) -> [success: bb84, unwind unreachable]
  using: _249@Mir(bb47[5]), _246@Mir(bb47[2]), _245@Mir(bb47[1])
bb48:
  _149 = _50
  using: _50@Phi(bb45)
  _148 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _149, const 1_isize) -> [return: bb49, unwind continue]
  using: _149@Mir(bb48[0])
bb49:
  _50 = move _148
  using: _148@Mir(bb48[1])
  goto -> bb45
  using: 
bb50:
  _152 = (*_50)
  using: _50@Phi(bb45)
  _151 = move _152 as i32 (IntToInt)
  using: _152@Mir(bb50[0])
  _153 = const '/' as i32 (IntToInt)
  using: 
  _150 = Ne(move _151, move _153)
  using: _151@Mir(bb50[1]), _153@Mir(bb50[2])
  switchInt(move _150) -> [0: bb74, otherwise: bb51]
  using: _150@Mir(bb50[3])
bb51:
  _155 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _156 = const '/' as i32 (IntToInt)
  using: 
  _154 = src::libtree::strrchr(move _155, move _156) -> [return: bb52, unwind continue]
  using: _155@Mir(bb51[0]), _156@Mir(bb51[1])
bb52:
  _159 = _154
  using: _154@Mir(bb51[2])
  _158 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _159) -> [return: bb53, unwind continue]
  using: _159@Mir(bb52[0])
bb53:
  switchInt(move _158) -> [0: bb55, otherwise: bb54]
  using: _158@Mir(bb52[1])
bb54:
  _160 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _161 = const '\0' as i32 (IntToInt)
  using: 
  _157 = src::libtree::strrchr(move _160, move _161) -> [return: bb56, unwind continue]
  using: _160@Mir(bb54[0]), _161@Mir(bb54[1])
bb55:
  _157 = _154
  using: _154@Mir(bb51[2])
  goto -> bb56
  using: 
bb56:
  _154 = move _157
  using: _157@Phi(bb56)
  _165 = _154
  using: _154@Mir(bb56[0])
  _166 = _2 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _2@Entry
  _164 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _165, move _166) -> [return: bb57, unwind continue]
  using: _165@Mir(bb56[1]), _166@Mir(bb56[2])
bb57:
  _163 = move _164 as i64 (IntToInt)
  using: _164@Mir(bb56[3])
  _162 = move _163 as u64 (IntToInt)
  using: _163@Mir(bb57[0])
  _171 = _53
  using: _53@Phi(bb35)
  _173 = _50
  using: _50@Phi(bb45)
  _172 = move _173 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _173@Mir(bb57[3])
  _170 = std::ptr::mut_ptr::<impl *mut i8>::offset_from(move _171, move _172) -> [return: bb58, unwind continue]
  using: _171@Mir(bb57[2]), _172@Mir(bb57[4])
bb58:
  _169 = move _170 as i64 (IntToInt)
  using: _170@Mir(bb57[5])
  _175 = const 1_i32
  using: 
  _174 = move _175 as i64 (IntToInt)
  using: _175@Mir(bb58[1])
  _176 = CheckedAdd(_169, _174)
  using: _169@Mir(bb58[0]), _174@Mir(bb58[2])
  assert(!move (_176.1: bool), "attempt to compute `{} + {}`, which would overflow", move _169, move _174) -> [success: bb59, unwind continue]
  using: _176@Mir(bb58[3]), _169@Mir(bb58[0]), _174@Mir(bb58[2])
bb59:
  _168 = move (_176.0: i64)
  using: _176@Mir(bb58[3])
  _167 = move _168 as u64 (IntToInt)
  using: _168@Mir(bb59[0])
  _181 = const 1_i32
  using: 
  _180 = move _181 as u64 (IntToInt)
  using: _181@Mir(bb59[2])
  _179 = core::num::<impl u64>::wrapping_add(_162, move _180) -> [return: bb60, unwind continue]
  using: _162@Mir(bb57[1]), _180@Mir(bb59[3])
bb60:
  _178 = core::num::<impl u64>::wrapping_add(move _179, _167) -> [return: bb61, unwind continue]
  using: _179@Mir(bb59[4]), _167@Mir(bb59[1])
bb61:
  _183 = const 4096_i32
  using: 
  _182 = move _183 as u64 (IntToInt)
  using: _183@Mir(bb61[0])
  _177 = Ge(move _178, move _182)
  using: _178@Mir(bb60[0]), _182@Mir(bb61[1])
  switchInt(move _177) -> [0: bb62, otherwise: bb5]
  using: _177@Mir(bb61[2])
bb62:
  _188 = &mut _13
  using: _13@Mir(bb4[2])
  _187 = move _188 as &mut [i8] (PointerCoercion(Unsize))
  using: _188@Mir(bb62[0])
  _186 = core::slice::<impl [i8]>::as_mut_ptr(move _187) -> [return: bb63, unwind continue]
  using: _187@Mir(bb62[1])
bb63:
  _185 = move _186 as *mut libc::c_void (PtrToPtr)
  using: _186@Mir(bb62[2])
  _189 = _2 as *const libc::c_void (PtrToPtr)
  using: _2@Entry
  _184 = src::libtree::memcpy(move _185, move _189, _162) -> [return: bb64, unwind continue]
  using: _185@Mir(bb63[0]), _189@Mir(bb63[1]), _162@Mir(bb57[1])
bb64:
  _190 = const '/' as i32 (IntToInt)
  using: 
  _191 = _162 as usize (IntToInt)
  using: _162@Mir(bb57[1])
  _192 = const 4096_usize
  using: 
  _193 = Lt(_191, _192)
  using: _191@Mir(bb64[1]), _192@Mir(bb64[2])
  assert(move _193, "index out of bounds: the length is {} but the index is {}", move _192, _191) -> [success: bb65, unwind continue]
  using: _193@Mir(bb64[3]), _192@Mir(bb64[2]), _191@Mir(bb64[1])
bb65:
  _13[_191] = move _190 as i8 (IntToInt)
  using: _191@Mir(bb64[1]), _190@Mir(bb64[0])
  _200 = &mut _13
  using: _13@Mir(bb4[2])
  _199 = move _200 as &mut [i8] (PointerCoercion(Unsize))
  using: _200@Mir(bb65[1])
  _198 = core::slice::<impl [i8]>::as_mut_ptr(move _199) -> [return: bb66, unwind continue]
  using: _199@Mir(bb65[2])
bb66:
  _201 = _162 as isize (IntToInt)
  using: _162@Mir(bb57[1])
  _197 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _198, move _201) -> [return: bb67, unwind continue]
  using: _198@Mir(bb65[3]), _201@Mir(bb66[0])
bb67:
  _203 = const 1_i32
  using: 
  _202 = move _203 as isize (IntToInt)
  using: _203@Mir(bb67[0])
  _196 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _197, move _202) -> [return: bb68, unwind continue]
  using: _197@Mir(bb66[1]), _202@Mir(bb67[1])
bb68:
  _195 = move _196 as *mut libc::c_void (PtrToPtr)
  using: _196@Mir(bb67[2])
  _205 = _50
  using: _50@Phi(bb45)
  _204 = move _205 as *const libc::c_void (PtrToPtr)
  using: _205@Mir(bb68[1])
  _194 = src::libtree::memcpy(move _195, move _204, _167) -> [return: bb69, unwind continue]
  using: _195@Mir(bb68[0]), _204@Mir(bb68[2]), _167@Mir(bb59[1])
bb69:
  _206 = const '\0' as i32 (IntToInt)
  using: 
  _211 = const 1_i32
  using: 
  _210 = move _211 as u64 (IntToInt)
  using: _211@Mir(bb69[1])
  _209 = core::num::<impl u64>::wrapping_add(_162, move _210) -> [return: bb70, unwind continue]
  using: _162@Mir(bb57[1]), _210@Mir(bb69[2])
bb70:
  _208 = core::num::<impl u64>::wrapping_add(move _209, _167) -> [return: bb71, unwind continue]
  using: _209@Mir(bb69[3]), _167@Mir(bb59[1])
bb71:
  _207 = move _208 as usize (IntToInt)
  using: _208@Mir(bb70[0])
  _212 = const 4096_usize
  using: 
  _213 = Lt(_207, _212)
  using: _207@Mir(bb71[0]), _212@Mir(bb71[1])
  assert(move _213, "index out of bounds: the length is {} but the index is {}", move _212, _207) -> [success: bb72, unwind continue]
  using: _213@Mir(bb71[2]), _212@Mir(bb71[1]), _207@Mir(bb71[0])
bb72:
  _13[_207] = move _206 as i8 (IntToInt)
  using: _207@Mir(bb71[0]), _206@Mir(bb69[0])
  _216 = &mut _13
  using: _13@Mir(bb4[2])
  _215 = move _216 as &mut [i8] (PointerCoercion(Unsize))
  using: _216@Mir(bb72[1])
  _214 = core::slice::<impl [i8]>::as_mut_ptr(move _215) -> [return: bb73, unwind continue]
  using: _215@Mir(bb72[2])
bb73:
  _50 = move _214
  using: _214@Mir(bb72[3])
  goto -> bb74
  using: 
bb74:
  _218 = _50
  using: _50@Phi(bb74)
  _217 = src::libtree::ld_conf_globbing(_1, move _218) -> [return: bb5, unwind continue]
  using: _1@Entry, _218@Mir(bb74[0])
bb75:
  _221 = _50
  using: _50@Phi(bb21)
  _220 = move _221 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _221@Mir(bb75[0])
  _219 = src::libtree::string_table_store(_1, move _220) -> [return: bb76, unwind continue]
  using: _1@Entry, _220@Mir(bb75[1])
bb76:
  _222 = const ':' as i32 (IntToInt)
  using: 
  _238 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _239 = _238 as usize (Transmute)
  using: _238@Mir(bb76[1])
  _240 = AlignOf(src::libtree::string_table_t)
  using: 
  _241 = Sub(_240, const 1_usize)
  using: _240@Mir(bb76[3])
  _242 = BitAnd(_239, _241)
  using: _239@Mir(bb76[2]), _241@Mir(bb76[4])
  _243 = Eq(_242, const 0_usize)
  using: _242@Mir(bb76[5])
  assert(_243, "misaligned pointer dereference: address must be a multiple of {} but is {}", _240, _239) -> [success: bb83, unwind unreachable]
  using: _243@Mir(bb76[6]), _240@Mir(bb76[3]), _239@Mir(bb76[2])
bb77:
  _225 = move _226 as isize (IntToInt)
  using: _226@Mir(bb82[3])
  _223 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _224, move _225) -> [return: bb78, unwind continue]
  using: _224@Mir(bb83[0]), _225@Mir(bb77[0])
bb78:
  (*_223) = move _222 as i8 (IntToInt)
  using: _223@Mir(bb77[1]), _222@Mir(bb76[0])
  goto -> bb5
  using: 
bb79:
  _231 = _3
  using: _3@Mir(bb0[5])
  _230 = src::libtree::fclose(move _231) -> [return: bb80, unwind continue]
  using: _231@Mir(bb79[0])
bb80:
  _0 = const 0_i32
  using: 
  goto -> bb81
  using: 
bb81:
  return
  using: _0@Phi(bb81)
bb82:
  _227 = ((*_1).1: u64)
  using: _1@Entry
  _229 = const 1_i32
  using: 
  _228 = move _229 as u64 (IntToInt)
  using: _229@Mir(bb82[1])
  _226 = core::num::<impl u64>::wrapping_sub(move _227, move _228) -> [return: bb77, unwind continue]
  using: _227@Mir(bb82[0]), _228@Mir(bb82[2])
bb83:
  _224 = ((*_1).0: *mut i8)
  using: _1@Entry
  _232 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _233 = _232 as usize (Transmute)
  using: _232@Mir(bb83[1])
  _234 = AlignOf(src::libtree::string_table_t)
  using: 
  _235 = Sub(_234, const 1_usize)
  using: _234@Mir(bb83[3])
  _236 = BitAnd(_233, _235)
  using: _233@Mir(bb83[2]), _235@Mir(bb83[4])
  _237 = Eq(_236, const 0_usize)
  using: _236@Mir(bb83[5])
  assert(_237, "misaligned pointer dereference: address must be a multiple of {} but is {}", _234, _233) -> [success: bb82, unwind unreachable]
  using: _237@Mir(bb83[6]), _234@Mir(bb83[3]), _233@Mir(bb83[2])
bb84:
  _138 = (*_139)
  using: _139@Mir(bb85[4])
  _137 = move _138 as i32 (IntToInt)
  using: _138@Mir(bb84[0])
  _147 = const _ as i32 (IntToInt)
  using: 
  _146 = move _147 as u16 (IntToInt)
  using: _147@Mir(bb84[2])
  _145 = move _146 as i32 (IntToInt)
  using: _146@Mir(bb84[3])
  _136 = BitAnd(move _137, move _145)
  using: _137@Mir(bb84[1]), _145@Mir(bb84[4])
  switchInt(move _136) -> [0: bb50, otherwise: bb48]
  using: _136@Mir(bb84[5])
bb85:
  _140 = (*_141)
  using: _141@Mir(bb45[0])
  _144 = (*_50)
  using: _50@Phi(bb45)
  _143 = move _144 as i32 (IntToInt)
  using: _144@Mir(bb85[1])
  _142 = move _143 as isize (IntToInt)
  using: _143@Mir(bb85[2])
  _139 = std::ptr::const_ptr::<impl *const u16>::offset(move _140, move _142) -> [return: bb47, unwind continue]
  using: _140@Mir(bb85[0]), _142@Mir(bb85[3])
bb86:
  _118 = (*_119)
  using: _119@Mir(bb41[3])
  _117 = move _118 as i32 (IntToInt)
  using: _118@Mir(bb86[0])
  _131 = const _ as i32 (IntToInt)
  using: 
  _130 = move _131 as u16 (IntToInt)
  using: _131@Mir(bb86[2])
  _129 = move _130 as i32 (IntToInt)
  using: _130@Mir(bb86[3])
  _116 = BitAnd(move _117, move _129)
  using: _117@Mir(bb86[1]), _129@Mir(bb86[4])
  switchInt(move _116) -> [0: bb75, otherwise: bb43]
  using: _116@Mir(bb86[5])
bb87:
  _120 = (*_121)
  using: _121@Mir(bb39[0])
  _126 = _50
  using: _50@Phi(bb21)
  _128 = const 7_i32
  using: 
  _127 = move _128 as isize (IntToInt)
  using: _128@Mir(bb87[2])
  _125 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _126, move _127) -> [return: bb41, unwind continue]
  using: _126@Mir(bb87[1]), _127@Mir(bb87[3])
bb88:
  _87 = (*_88)
  using: _88@Mir(bb89[4])
  _86 = move _87 as i32 (IntToInt)
  using: _87@Mir(bb88[0])
  _96 = const _ as i32 (IntToInt)
  using: 
  _95 = move _96 as u16 (IntToInt)
  using: _96@Mir(bb88[2])
  _94 = move _95 as i32 (IntToInt)
  using: _95@Mir(bb88[3])
  _85 = BitAnd(move _86, move _94)
  using: _86@Mir(bb88[1]), _94@Mir(bb88[4])
  switchInt(move _85) -> [0: bb35, otherwise: bb30]
  using: _85@Mir(bb88[5])
bb89:
  _89 = (*_90)
  using: _90@Mir(bb32[1])
  _93 = (*_53)
  using: _53@Mir(bb32[0])
  _92 = move _93 as i32 (IntToInt)
  using: _93@Mir(bb89[1])
  _91 = move _92 as isize (IntToInt)
  using: _92@Mir(bb89[2])
  _88 = std::ptr::const_ptr::<impl *const u16>::offset(move _89, move _91) -> [return: bb34, unwind continue]
  using: _89@Mir(bb89[0]), _91@Mir(bb89[3])
bb90:
  _61 = (*_62)
  using: _62@Mir(bb91[4])
  _60 = move _61 as i32 (IntToInt)
  using: _61@Mir(bb90[0])
  _70 = const _ as i32 (IntToInt)
  using: 
  _69 = move _70 as u16 (IntToInt)
  using: _70@Mir(bb90[2])
  _68 = move _69 as i32 (IntToInt)
  using: _69@Mir(bb90[3])
  _59 = BitAnd(move _60, move _68)
  using: _60@Mir(bb90[1]), _68@Mir(bb90[4])
  switchInt(move _59) -> [0: bb26, otherwise: bb24]
  using: _59@Mir(bb90[5])
bb91:
  _63 = (*_64)
  using: _64@Mir(bb21[0])
  _67 = (*_50)
  using: _50@Phi(bb21)
  _66 = move _67 as i32 (IntToInt)
  using: _67@Mir(bb91[1])
  _65 = move _66 as isize (IntToInt)
  using: _66@Mir(bb91[2])
  _62 = std::ptr::const_ptr::<impl *const u16>::offset(move _63, move _65) -> [return: bb23, unwind continue]
  using: _63@Mir(bb91[0]), _65@Mir(bb91[3])
@DefId(0:146 ~ lib[f5c5]::src::libtree::parse_ld_so_conf)
bb0:
  _65 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _66 = _65 as usize (Transmute)
  using: _65@Mir(bb0[0])
  _67 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _68 = Sub(_67, const 1_usize)
  using: _67@Mir(bb0[2])
  _69 = BitAnd(_66, _68)
  using: _66@Mir(bb0[1]), _68@Mir(bb0[3])
  _70 = Eq(_69, const 0_usize)
  using: _69@Mir(bb0[4])
  assert(_70, "misaligned pointer dereference: address must be a multiple of {} but is {}", _67, _66) -> [success: bb14, unwind unreachable]
  using: _70@Mir(bb0[5]), _67@Mir(bb0[2]), _66@Mir(bb0[1])
bb1:
  _41 = _2 as *const () (PtrToPtr)
  using: _2@Mir(bb14[1])
  _42 = _41 as usize (Transmute)
  using: _41@Mir(bb1[0])
  _43 = AlignOf(src::libtree::string_table_t)
  using: 
  _44 = Sub(_43, const 1_usize)
  using: _43@Mir(bb1[2])
  _45 = BitAnd(_42, _44)
  using: _42@Mir(bb1[1]), _44@Mir(bb1[3])
  _46 = Eq(_45, const 0_usize)
  using: _45@Mir(bb1[4])
  assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb10, unwind unreachable]
  using: _46@Mir(bb1[5]), _43@Mir(bb1[2]), _42@Mir(bb1[1])
bb2:
  _10 = const '\0' as i32 (IntToInt)
  using: 
  _29 = _2 as *const () (PtrToPtr)
  using: _2@Mir(bb14[1])
  _30 = _29 as usize (Transmute)
  using: _29@Mir(bb2[1])
  _31 = AlignOf(src::libtree::string_table_t)
  using: 
  _32 = Sub(_31, const 1_usize)
  using: _31@Mir(bb2[3])
  _33 = BitAnd(_30, _32)
  using: _30@Mir(bb2[2]), _32@Mir(bb2[4])
  _34 = Eq(_33, const 0_usize)
  using: _33@Mir(bb2[5])
  assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb8, unwind unreachable]
  using: _34@Mir(bb2[6]), _31@Mir(bb2[3]), _30@Mir(bb2[2])
bb3:
  _13 = move _14 as isize (IntToInt)
  using: _14@Mir(bb7[3])
  _11 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _12, move _13) -> [return: bb4, unwind continue]
  using: _12@Mir(bb8[0]), _13@Mir(bb3[0])
bb4:
  (*_11) = move _10 as i8 (IntToInt)
  using: _11@Mir(bb3[1]), _10@Mir(bb2[0])
  goto -> bb6
  using: 
bb5:
  _22 = const b"\x00"
  using: 
  _21 = &raw const (*_22)
  using: _22@Mir(bb5[0])
  _20 = move _21 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _21@Mir(bb5[1])
  _19 = move _20 as *const i8 (PtrToPtr)
  using: _20@Mir(bb5[2])
  _18 = src::libtree::string_table_store(_2, move _19) -> [return: bb6, unwind continue]
  using: _2@Mir(bb14[1]), _19@Mir(bb5[3])
bb6:
  return
  using: _0@Entry
bb7:
  _15 = ((*_2).1: u64)
  using: _2@Mir(bb14[1])
  _17 = const 1_i32
  using: 
  _16 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb7[1])
  _14 = core::num::<impl u64>::wrapping_sub(move _15, move _16) -> [return: bb3, unwind continue]
  using: _15@Mir(bb7[0]), _16@Mir(bb7[2])
bb8:
  _12 = ((*_2).0: *mut i8)
  using: _2@Mir(bb14[1])
  _23 = _2 as *const () (PtrToPtr)
  using: _2@Mir(bb14[1])
  _24 = _23 as usize (Transmute)
  using: _23@Mir(bb8[1])
  _25 = AlignOf(src::libtree::string_table_t)
  using: 
  _26 = Sub(_25, const 1_usize)
  using: _25@Mir(bb8[3])
  _27 = BitAnd(_24, _26)
  using: _24@Mir(bb8[2]), _26@Mir(bb8[4])
  _28 = Eq(_27, const 0_usize)
  using: _27@Mir(bb8[5])
  assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb7, unwind unreachable]
  using: _28@Mir(bb8[6]), _25@Mir(bb8[3]), _24@Mir(bb8[2])
bb9:
  _9 = ((*_1).14: u64)
  using: _1@Entry
  _7 = Gt(move _8, move _9)
  using: _8@Mir(bb10[0]), _9@Mir(bb9[0])
  switchInt(move _7) -> [0: bb5, otherwise: bb2]
  using: _7@Mir(bb9[1])
bb10:
  _8 = ((*_2).1: u64)
  using: _2@Mir(bb14[1])
  _35 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _36 = _35 as usize (Transmute)
  using: _35@Mir(bb10[1])
  _37 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _38 = Sub(_37, const 1_usize)
  using: _37@Mir(bb10[3])
  _39 = BitAnd(_36, _38)
  using: _36@Mir(bb10[2]), _38@Mir(bb10[4])
  _40 = Eq(_39, const 0_usize)
  using: _39@Mir(bb10[5])
  assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb9, unwind unreachable]
  using: _40@Mir(bb10[6]), _37@Mir(bb10[3]), _36@Mir(bb10[2])
bb11:
  _6 = ((*_1).3: *mut i8)
  using: _1@Entry
  _5 = src::libtree::parse_ld_config_file(_2, move _6) -> [return: bb1, unwind continue]
  using: _2@Mir(bb14[1]), _6@Mir(bb11[0])
bb12:
  ((*_1).14: u64) = move _4
  using: _1@Entry, _4@Mir(bb13[0])
  _47 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _48 = _47 as usize (Transmute)
  using: _47@Mir(bb12[1])
  _49 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _50 = Sub(_49, const 1_usize)
  using: _49@Mir(bb12[3])
  _51 = BitAnd(_48, _50)
  using: _48@Mir(bb12[2]), _50@Mir(bb12[4])
  _52 = Eq(_51, const 0_usize)
  using: _51@Mir(bb12[5])
  assert(_52, "misaligned pointer dereference: address must be a multiple of {} but is {}", _49, _48) -> [success: bb11, unwind unreachable]
  using: _52@Mir(bb12[6]), _49@Mir(bb12[3]), _48@Mir(bb12[2])
bb13:
  _4 = ((*_2).1: u64)
  using: _2@Mir(bb14[1])
  _53 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _54 = _53 as usize (Transmute)
  using: _53@Mir(bb13[1])
  _55 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _56 = Sub(_55, const 1_usize)
  using: _55@Mir(bb13[3])
  _57 = BitAnd(_54, _56)
  using: _54@Mir(bb13[2]), _56@Mir(bb13[4])
  _58 = Eq(_57, const 0_usize)
  using: _57@Mir(bb13[5])
  assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb12, unwind unreachable]
  using: _58@Mir(bb13[6]), _55@Mir(bb13[3]), _54@Mir(bb13[2])
bb14:
  _3 = &mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _2 = &raw mut (*_3)
  using: _3@Mir(bb14[0])
  _59 = _2 as *const () (PtrToPtr)
  using: _2@Mir(bb14[1])
  _60 = _59 as usize (Transmute)
  using: _59@Mir(bb14[2])
  _61 = AlignOf(src::libtree::string_table_t)
  using: 
  _62 = Sub(_61, const 1_usize)
  using: _61@Mir(bb14[4])
  _63 = BitAnd(_60, _62)
  using: _60@Mir(bb14[3]), _62@Mir(bb14[5])
  _64 = Eq(_63, const 0_usize)
  using: _63@Mir(bb14[6])
  assert(_64, "misaligned pointer dereference: address must be a multiple of {} but is {}", _61, _60) -> [success: bb13, unwind unreachable]
  using: _64@Mir(bb14[7]), _61@Mir(bb14[4]), _60@Mir(bb14[3])
@DefId(0:147 ~ lib[f5c5]::src::libtree::parse_ld_library_path)
bb0:
  _2 = const u64::MAX
  using: 
  _60 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _61 = _60 as usize (Transmute)
  using: _60@Mir(bb0[1])
  _62 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _63 = Sub(_62, const 1_usize)
  using: _62@Mir(bb0[3])
  _64 = BitAnd(_61, _63)
  using: _61@Mir(bb0[2]), _63@Mir(bb0[4])
  _65 = Eq(_64, const 0_usize)
  using: _64@Mir(bb0[5])
  assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb16, unwind unreachable]
  using: _65@Mir(bb0[6]), _62@Mir(bb0[3]), _61@Mir(bb0[2])
bb1:
  _9 = _3
  using: _3@Mir(bb16[5])
  _8 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _9) -> [return: bb2, unwind continue]
  using: _9@Mir(bb1[0])
bb2:
  switchInt(move _8) -> [0: bb3, otherwise: bb10]
  using: _8@Mir(bb1[1])
bb3:
  _54 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _55 = _54 as usize (Transmute)
  using: _54@Mir(bb3[0])
  _56 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _57 = Sub(_56, const 1_usize)
  using: _56@Mir(bb3[2])
  _58 = BitAnd(_55, _57)
  using: _55@Mir(bb3[1]), _57@Mir(bb3[3])
  _59 = Eq(_58, const 0_usize)
  using: _58@Mir(bb3[4])
  assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb15, unwind unreachable]
  using: _59@Mir(bb3[5]), _56@Mir(bb3[2]), _55@Mir(bb3[1])
bb4:
  _36 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _37 = _36 as usize (Transmute)
  using: _36@Mir(bb4[0])
  _38 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _39 = Sub(_38, const 1_usize)
  using: _38@Mir(bb4[2])
  _40 = BitAnd(_37, _39)
  using: _37@Mir(bb4[1]), _39@Mir(bb4[3])
  _41 = Eq(_40, const 0_usize)
  using: _40@Mir(bb4[4])
  assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb12, unwind unreachable]
  using: _41@Mir(bb4[5]), _38@Mir(bb4[2]), _37@Mir(bb4[1])
bb5:
  _22 = _16
  using: _16@Phi(bb5)
  _21 = move _22 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _22@Mir(bb5[0])
  _23 = const ';' as i32 (IntToInt)
  using: 
  _20 = src::libtree::strchr(move _21, move _23) -> [return: bb6, unwind continue]
  using: _21@Mir(bb5[1]), _23@Mir(bb5[2])
bb6:
  _16 = move _20
  using: _20@Mir(bb5[3])
  _25 = _16
  using: _16@Mir(bb6[0])
  _24 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _25) -> [return: bb7, unwind continue]
  using: _25@Mir(bb6[1])
bb7:
  switchInt(move _24) -> [0: bb8, otherwise: bb10]
  using: _24@Mir(bb6[2])
bb8:
  _26 = _16
  using: _16@Mir(bb6[0])
  _28 = _16
  using: _16@Mir(bb6[0])
  _27 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _28, const 1_isize) -> [return: bb9, unwind continue]
  using: _28@Mir(bb8[1])
bb9:
  _16 = move _27
  using: _27@Mir(bb8[2])
  _29 = const ':' as i32 (IntToInt)
  using: 
  (*_26) = move _29 as i8 (IntToInt)
  using: _26@Mir(bb8[0]), _29@Mir(bb9[1])
  goto -> bb5
  using: 
bb10:
  return
  using: _0@Entry
bb11:
  _19 = ((*_1).12: u64)
  using: _1@Entry
  _18 = move _19 as isize (IntToInt)
  using: _19@Mir(bb11[0])
  _16 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _17, move _18) -> [return: bb5, unwind continue]
  using: _17@Mir(bb12[0]), _18@Mir(bb11[1])
bb12:
  _17 = (((*_1).5: src::libtree::string_table_t).0: *mut i8)
  using: _1@Entry
  _30 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _31 = _30 as usize (Transmute)
  using: _30@Mir(bb12[1])
  _32 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _33 = Sub(_32, const 1_usize)
  using: _32@Mir(bb12[3])
  _34 = BitAnd(_31, _33)
  using: _31@Mir(bb12[2]), _33@Mir(bb12[4])
  _35 = Eq(_34, const 0_usize)
  using: _34@Mir(bb12[5])
  assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb11, unwind unreachable]
  using: _35@Mir(bb12[6]), _32@Mir(bb12[3]), _31@Mir(bb12[2])
bb13:
  _13 = &mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _12 = &raw mut (*_13)
  using: _13@Mir(bb13[0])
  _15 = _3
  using: _3@Mir(bb16[5])
  _14 = move _15 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _15@Mir(bb13[2])
  _11 = src::libtree::string_table_store(move _12, move _14) -> [return: bb4, unwind continue]
  using: _12@Mir(bb13[1]), _14@Mir(bb13[3])
bb14:
  ((*_1).12: u64) = move _10
  using: _1@Entry, _10@Mir(bb15[0])
  _42 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _43 = _42 as usize (Transmute)
  using: _42@Mir(bb14[1])
  _44 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _45 = Sub(_44, const 1_usize)
  using: _44@Mir(bb14[3])
  _46 = BitAnd(_43, _45)
  using: _43@Mir(bb14[2]), _45@Mir(bb14[4])
  _47 = Eq(_46, const 0_usize)
  using: _46@Mir(bb14[5])
  assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb13, unwind unreachable]
  using: _47@Mir(bb14[6]), _44@Mir(bb14[3]), _43@Mir(bb14[2])
bb15:
  _10 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _48 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _49 = _48 as usize (Transmute)
  using: _48@Mir(bb15[1])
  _50 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _51 = Sub(_50, const 1_usize)
  using: _50@Mir(bb15[3])
  _52 = BitAnd(_49, _51)
  using: _49@Mir(bb15[2]), _51@Mir(bb15[4])
  _53 = Eq(_52, const 0_usize)
  using: _52@Mir(bb15[5])
  assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb14, unwind unreachable]
  using: _53@Mir(bb15[6]), _50@Mir(bb15[3]), _49@Mir(bb15[2])
bb16:
  ((*_1).12: u64) = move _2
  using: _1@Entry, _2@Mir(bb0[0])
  _7 = const b"LD_LIBRARY_PATH\x00"
  using: 
  _6 = &raw const (*_7)
  using: _7@Mir(bb16[1])
  _5 = move _6 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _6@Mir(bb16[2])
  _4 = move _5 as *const i8 (PtrToPtr)
  using: _5@Mir(bb16[3])
  _3 = src::libtree::getenv(move _4) -> [return: bb1, unwind continue]
  using: _4@Mir(bb16[4])
@DefId(0:148 ~ lib[f5c5]::src::libtree::set_default_paths)
bb0:
  _22 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _23 = _22 as usize (Transmute)
  using: _22@Mir(bb0[0])
  _24 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _25 = Sub(_24, const 1_usize)
  using: _24@Mir(bb0[2])
  _26 = BitAnd(_23, _25)
  using: _23@Mir(bb0[1]), _25@Mir(bb0[3])
  _27 = Eq(_26, const 0_usize)
  using: _26@Mir(bb0[4])
  assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb4, unwind unreachable]
  using: _27@Mir(bb0[5]), _24@Mir(bb0[2]), _23@Mir(bb0[1])
bb1:
  return
  using: _0@Entry
bb2:
  _5 = &mut ((*_1).5: src::libtree::string_table_t)
  using: _1@Entry
  _4 = &raw mut (*_5)
  using: _5@Mir(bb2[0])
  _9 = const b"/lib:/lib64:/usr/lib:/usr/lib64\x00"
  using: 
  _8 = &raw const (*_9)
  using: _9@Mir(bb2[2])
  _7 = move _8 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _8@Mir(bb2[3])
  _6 = move _7 as *const i8 (PtrToPtr)
  using: _7@Mir(bb2[4])
  _3 = src::libtree::string_table_store(move _4, move _6) -> [return: bb1, unwind continue]
  using: _4@Mir(bb2[1]), _6@Mir(bb2[5])
bb3:
  ((*_1).13: u64) = move _2
  using: _1@Entry, _2@Mir(bb4[0])
  _10 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _11 = _10 as usize (Transmute)
  using: _10@Mir(bb3[1])
  _12 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _13 = Sub(_12, const 1_usize)
  using: _12@Mir(bb3[3])
  _14 = BitAnd(_11, _13)
  using: _11@Mir(bb3[2]), _13@Mir(bb3[4])
  _15 = Eq(_14, const 0_usize)
  using: _14@Mir(bb3[5])
  assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable]
  using: _15@Mir(bb3[6]), _12@Mir(bb3[3]), _11@Mir(bb3[2])
bb4:
  _2 = (((*_1).5: src::libtree::string_table_t).1: u64)
  using: _1@Entry
  _16 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _17 = _16 as usize (Transmute)
  using: _16@Mir(bb4[1])
  _18 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _19 = Sub(_18, const 1_usize)
  using: _18@Mir(bb4[3])
  _20 = BitAnd(_17, _19)
  using: _17@Mir(bb4[2]), _19@Mir(bb4[4])
  _21 = Eq(_20, const 0_usize)
  using: _20@Mir(bb4[5])
  assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb3, unwind unreachable]
  using: _21@Mir(bb4[6]), _18@Mir(bb4[3]), _17@Mir(bb4[2])
@DefId(0:149 ~ lib[f5c5]::src::libtree::libtree_state_init)
bb0:
  _2 = const 0_i32
  using: 
  _60 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _61 = _60 as usize (Transmute)
  using: _60@Mir(bb0[1])
  _62 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _63 = Sub(_62, const 1_usize)
  using: _62@Mir(bb0[3])
  _64 = BitAnd(_61, _63)
  using: _61@Mir(bb0[2]), _63@Mir(bb0[4])
  _65 = Eq(_64, const 0_usize)
  using: _64@Mir(bb0[5])
  assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb14, unwind unreachable]
  using: _65@Mir(bb0[6]), _62@Mir(bb0[3]), _61@Mir(bb0[2])
bb1:
  _8 = move _9 as u64 (IntToInt)
  using: _9@Mir(bb11[1])
  _6 = core::num::<impl u64>::wrapping_mul(move _7, move _8) -> [return: bb2, unwind continue]
  using: _7@Mir(bb11[0]), _8@Mir(bb1[0])
bb2:
  _5 = src::libtree::malloc(move _6) -> [return: bb3, unwind continue]
  using: _6@Mir(bb1[1])
bb3:
  (*_4) = move _5 as *mut i8 (PtrToPtr)
  using: _4@Mir(bb12[0]), _5@Mir(bb2[0])
  _10 = const 0_i32
  using: 
  _36 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _37 = _36 as usize (Transmute)
  using: _36@Mir(bb3[2])
  _38 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _39 = Sub(_38, const 1_usize)
  using: _38@Mir(bb3[4])
  _40 = BitAnd(_37, _39)
  using: _37@Mir(bb3[3]), _39@Mir(bb3[5])
  _41 = Eq(_40, const 0_usize)
  using: _40@Mir(bb3[6])
  assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb10, unwind unreachable]
  using: _41@Mir(bb3[7]), _38@Mir(bb3[4]), _37@Mir(bb3[3])
bb4:
  _16 = move _17 as u64 (IntToInt)
  using: _17@Mir(bb7[1])
  _14 = core::num::<impl u64>::wrapping_mul(move _15, move _16) -> [return: bb5, unwind continue]
  using: _15@Mir(bb7[0]), _16@Mir(bb4[0])
bb5:
  _13 = src::libtree::malloc(move _14) -> [return: bb6, unwind continue]
  using: _14@Mir(bb4[1])
bb6:
  (*_12) = move _13 as *mut src::libtree::visited_file_t (PtrToPtr)
  using: _12@Mir(bb8[0]), _13@Mir(bb5[0])
  return
  using: _0@Entry
bb7:
  _15 = (((*_1).6: src::libtree::visited_file_array_t).2: u64)
  using: _1@Entry
  _17 = std::mem::size_of::<src::libtree::visited_file_t>() -> [return: bb4, unwind continue]
  using: 
bb8:
  _12 = &mut (((*_1).6: src::libtree::visited_file_array_t).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _18 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _19 = _18 as usize (Transmute)
  using: _18@Mir(bb8[1])
  _20 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _21 = Sub(_20, const 1_usize)
  using: _20@Mir(bb8[3])
  _22 = BitAnd(_19, _21)
  using: _19@Mir(bb8[2]), _21@Mir(bb8[4])
  _23 = Eq(_22, const 0_usize)
  using: _22@Mir(bb8[5])
  assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb7, unwind unreachable]
  using: _23@Mir(bb8[6]), _20@Mir(bb8[3]), _19@Mir(bb8[2])
bb9:
  (((*_1).6: src::libtree::visited_file_array_t).2: u64) = move _11 as u64 (IntToInt)
  using: _1@Entry, _11@Mir(bb10[1])
  _24 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _25 = _24 as usize (Transmute)
  using: _24@Mir(bb9[1])
  _26 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _27 = Sub(_26, const 1_usize)
  using: _26@Mir(bb9[3])
  _28 = BitAnd(_25, _27)
  using: _25@Mir(bb9[2]), _27@Mir(bb9[4])
  _29 = Eq(_28, const 0_usize)
  using: _28@Mir(bb9[5])
  assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb8, unwind unreachable]
  using: _29@Mir(bb9[6]), _26@Mir(bb9[3]), _25@Mir(bb9[2])
bb10:
  (((*_1).6: src::libtree::visited_file_array_t).1: u64) = move _10 as u64 (IntToInt)
  using: _1@Entry, _10@Mir(bb3[1])
  _11 = const 256_i32
  using: 
  _30 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _31 = _30 as usize (Transmute)
  using: _30@Mir(bb10[2])
  _32 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _33 = Sub(_32, const 1_usize)
  using: _32@Mir(bb10[4])
  _34 = BitAnd(_31, _33)
  using: _31@Mir(bb10[3]), _33@Mir(bb10[5])
  _35 = Eq(_34, const 0_usize)
  using: _34@Mir(bb10[6])
  assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb9, unwind unreachable]
  using: _35@Mir(bb10[7]), _32@Mir(bb10[4]), _31@Mir(bb10[3])
bb11:
  _7 = (((*_1).5: src::libtree::string_table_t).2: u64)
  using: _1@Entry
  _9 = std::mem::size_of::<i8>() -> [return: bb1, unwind continue]
  using: 
bb12:
  _4 = &mut (((*_1).5: src::libtree::string_table_t).0: *mut i8)
  using: _1@Entry
  _42 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _43 = _42 as usize (Transmute)
  using: _42@Mir(bb12[1])
  _44 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _45 = Sub(_44, const 1_usize)
  using: _44@Mir(bb12[3])
  _46 = BitAnd(_43, _45)
  using: _43@Mir(bb12[2]), _45@Mir(bb12[4])
  _47 = Eq(_46, const 0_usize)
  using: _46@Mir(bb12[5])
  assert(_47, "misaligned pointer dereference: address must be a multiple of {} but is {}", _44, _43) -> [success: bb11, unwind unreachable]
  using: _47@Mir(bb12[6]), _44@Mir(bb12[3]), _43@Mir(bb12[2])
bb13:
  (((*_1).5: src::libtree::string_table_t).2: u64) = move _3 as u64 (IntToInt)
  using: _1@Entry, _3@Mir(bb14[1])
  _48 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _49 = _48 as usize (Transmute)
  using: _48@Mir(bb13[1])
  _50 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _51 = Sub(_50, const 1_usize)
  using: _50@Mir(bb13[3])
  _52 = BitAnd(_49, _51)
  using: _49@Mir(bb13[2]), _51@Mir(bb13[4])
  _53 = Eq(_52, const 0_usize)
  using: _52@Mir(bb13[5])
  assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb12, unwind unreachable]
  using: _53@Mir(bb13[6]), _50@Mir(bb13[3]), _49@Mir(bb13[2])
bb14:
  (((*_1).5: src::libtree::string_table_t).1: u64) = move _2 as u64 (IntToInt)
  using: _1@Entry, _2@Mir(bb0[0])
  _3 = const 1024_i32
  using: 
  _54 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _55 = _54 as usize (Transmute)
  using: _54@Mir(bb14[2])
  _56 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _57 = Sub(_56, const 1_usize)
  using: _56@Mir(bb14[4])
  _58 = BitAnd(_55, _57)
  using: _55@Mir(bb14[3]), _57@Mir(bb14[5])
  _59 = Eq(_58, const 0_usize)
  using: _58@Mir(bb14[6])
  assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb13, unwind unreachable]
  using: _59@Mir(bb14[7]), _56@Mir(bb14[4]), _55@Mir(bb14[3])
@DefId(0:150 ~ lib[f5c5]::src::libtree::libtree_state_free)
bb0:
  _14 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _15 = _14 as usize (Transmute)
  using: _14@Mir(bb0[0])
  _16 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _17 = Sub(_16, const 1_usize)
  using: _16@Mir(bb0[2])
  _18 = BitAnd(_15, _17)
  using: _15@Mir(bb0[1]), _17@Mir(bb0[3])
  _19 = Eq(_18, const 0_usize)
  using: _18@Mir(bb0[4])
  assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb4, unwind unreachable]
  using: _19@Mir(bb0[5]), _16@Mir(bb0[2]), _15@Mir(bb0[1])
bb1:
  _8 = _1 as *const () (PtrToPtr)
  using: _1@Entry
  _9 = _8 as usize (Transmute)
  using: _8@Mir(bb1[0])
  _10 = AlignOf(src::libtree::libtree_state_t)
  using: 
  _11 = Sub(_10, const 1_usize)
  using: _10@Mir(bb1[2])
  _12 = BitAnd(_9, _11)
  using: _9@Mir(bb1[1]), _11@Mir(bb1[3])
  _13 = Eq(_12, const 0_usize)
  using: _12@Mir(bb1[4])
  assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb3, unwind unreachable]
  using: _13@Mir(bb1[5]), _10@Mir(bb1[2]), _9@Mir(bb1[1])
bb2:
  return
  using: _0@Entry
bb3:
  _7 = (((*_1).6: src::libtree::visited_file_array_t).0: *mut src::libtree::visited_file_t)
  using: _1@Entry
  _6 = move _7 as *mut libc::c_void (PtrToPtr)
  using: _7@Mir(bb3[0])
  _5 = src::libtree::free(move _6) -> [return: bb2, unwind continue]
  using: _6@Mir(bb3[1])
bb4:
  _4 = (((*_1).5: src::libtree::string_table_t).0: *mut i8)
  using: _1@Entry
  _3 = move _4 as *mut libc::c_void (PtrToPtr)
  using: _4@Mir(bb4[0])
  _2 = src::libtree::free(move _3) -> [return: bb1, unwind continue]
  using: _3@Mir(bb4[1])
@DefId(0:151 ~ lib[f5c5]::src::libtree::print_tree)
bb0:
  _4 = src::libtree::libtree_state_init(_3) -> [return: bb1, unwind continue]
  using: _3@Entry
bb1:
  _5 = src::libtree::parse_ld_so_conf(_3) -> [return: bb2, unwind continue]
  using: _3@Entry
bb2:
  _6 = src::libtree::parse_ld_library_path(_3) -> [return: bb3, unwind continue]
  using: _3@Entry
bb3:
  _7 = src::libtree::set_default_paths(_3) -> [return: bb4, unwind continue]
  using: _3@Entry
bb4:
  _8 = const 0_i32
  using: 
  _9 = const 0_i32
  using: 
  goto -> bb5
  using: 
bb5:
  _11 = _9
  using: _9@Phi(bb5)
  _10 = Lt(move _11, _1)
  using: _11@Mir(bb5[0]), _1@Entry
  switchInt(move _10) -> [0: bb43, otherwise: bb6]
  using: _10@Mir(bb5[1])
bb6:
  _16 = _9
  using: _9@Phi(bb5)
  _15 = move _16 as isize (IntToInt)
  using: _16@Mir(bb6[0])
  _14 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(_2, move _15) -> [return: bb7, unwind continue]
  using: _2@Entry, _15@Mir(bb6[1])
bb7:
  _195 = _14 as *const () (PtrToPtr)
  using: _14@Mir(bb6[2])
  _196 = _195 as usize (Transmute)
  using: _195@Mir(bb7[0])
  _197 = AlignOf(*mut i8)
  using: 
  _198 = Sub(_197, const 1_usize)
  using: _197@Mir(bb7[2])
  _199 = BitAnd(_196, _198)
  using: _196@Mir(bb7[1]), _198@Mir(bb7[3])
  _200 = Eq(_199, const 0_usize)
  using: _199@Mir(bb7[4])
  assert(_200, "misaligned pointer dereference: address must be a multiple of {} but is {}", _197, _196) -> [success: bb52, unwind unreachable]
  using: _200@Mir(bb7[5]), _197@Mir(bb7[2]), _196@Mir(bb7[1])
bb8:
  _25 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _189 = _25 as *const () (PtrToPtr)
  using: _25@Mir(bb8[0])
  _190 = _189 as usize (Transmute)
  using: _189@Mir(bb8[1])
  _191 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _192 = Sub(_191, const 1_usize)
  using: _191@Mir(bb8[3])
  _193 = BitAnd(_190, _192)
  using: _190@Mir(bb8[2]), _192@Mir(bb8[4])
  _194 = Eq(_193, const 0_usize)
  using: _193@Mir(bb8[5])
  assert(_194, "misaligned pointer dereference: address must be a multiple of {} but is {}", _191, _190) -> [success: bb51, unwind unreachable]
  using: _194@Mir(bb8[6]), _191@Mir(bb8[3]), _190@Mir(bb8[2])
bb9:
  _27 = _12
  using: _12@Mir(bb52[7])
  _28 = const 0_i32
  using: 
  _26 = Ne(move _27, move _28)
  using: _27@Mir(bb9[0]), _28@Mir(bb9[1])
  switchInt(move _26) -> [0: bb14, otherwise: bb10]
  using: _26@Mir(bb9[2])
bb10:
  _29 = _12
  using: _12@Mir(bb52[7])
  _8 = move _29
  using: _29@Mir(bb10[0])
  _34 = const b"Error [\x00"
  using: 
  _33 = &raw const (*_34)
  using: _34@Mir(bb10[2])
  _32 = move _33 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _33@Mir(bb10[3])
  _31 = move _32 as *const i8 (PtrToPtr)
  using: _32@Mir(bb10[4])
  _36 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _183 = _36 as *const () (PtrToPtr)
  using: _36@Mir(bb10[6])
  _184 = _183 as usize (Transmute)
  using: _183@Mir(bb10[7])
  _185 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _186 = Sub(_185, const 1_usize)
  using: _185@Mir(bb10[9])
  _187 = BitAnd(_184, _186)
  using: _184@Mir(bb10[8]), _186@Mir(bb10[10])
  _188 = Eq(_187, const 0_usize)
  using: _187@Mir(bb10[11])
  assert(_188, "misaligned pointer dereference: address must be a multiple of {} but is {}", _185, _184) -> [success: bb50, unwind unreachable]
  using: _188@Mir(bb10[12]), _185@Mir(bb10[9]), _184@Mir(bb10[8])
bb11:
  _42 = _9
  using: _9@Phi(bb5)
  _41 = move _42 as isize (IntToInt)
  using: _42@Mir(bb11[0])
  _40 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(_2, move _41) -> [return: bb12, unwind continue]
  using: _2@Entry, _41@Mir(bb11[1])
bb12:
  _177 = _40 as *const () (PtrToPtr)
  using: _40@Mir(bb11[2])
  _178 = _177 as usize (Transmute)
  using: _177@Mir(bb12[0])
  _179 = AlignOf(*mut i8)
  using: 
  _180 = Sub(_179, const 1_usize)
  using: _179@Mir(bb12[2])
  _181 = BitAnd(_178, _180)
  using: _178@Mir(bb12[1]), _180@Mir(bb12[3])
  _182 = Eq(_181, const 0_usize)
  using: _181@Mir(bb12[4])
  assert(_182, "misaligned pointer dereference: address must be a multiple of {} but is {}", _179, _178) -> [success: bb49, unwind unreachable]
  using: _182@Mir(bb12[5]), _179@Mir(bb12[2]), _178@Mir(bb12[1])
bb13:
  _49 = const b"]: \x00"
  using: 
  _48 = &raw const (*_49)
  using: _49@Mir(bb13[0])
  _47 = move _48 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _48@Mir(bb13[1])
  _46 = move _47 as *const i8 (PtrToPtr)
  using: _47@Mir(bb13[2])
  _51 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _165 = _51 as *const () (PtrToPtr)
  using: _51@Mir(bb13[4])
  _166 = _165 as usize (Transmute)
  using: _165@Mir(bb13[5])
  _167 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _168 = Sub(_167, const 1_usize)
  using: _167@Mir(bb13[7])
  _169 = BitAnd(_166, _168)
  using: _166@Mir(bb13[6]), _168@Mir(bb13[8])
  _170 = Eq(_169, const 0_usize)
  using: _169@Mir(bb13[9])
  assert(_170, "misaligned pointer dereference: address must be a multiple of {} but is {}", _167, _166) -> [success: bb47, unwind unreachable]
  using: _170@Mir(bb13[10]), _167@Mir(bb13[7]), _166@Mir(bb13[6])
bb14:
  _52 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  switchInt(_12) -> [11: bb15, 12: bb16, 13: bb17, 14: bb18, 15: bb19, 16: bb20, 17: bb21, 18: bb22, 19: bb23, 20: bb24, 21: bb25, 22: bb26, 23: bb27, 24: bb28, 25: bb29, 26: bb30, 27: bb31, 28: bb32, 29: bb33, 30: bb34, 31: bb35, 32: bb36, otherwise: bb37]
  using: _12@Mir(bb52[7])
bb15:
  _56 = const b"Invalid ELF magic bytes\n\x00"
  using: 
  _55 = &raw const (*_56)
  using: _56@Mir(bb15[0])
  _54 = move _55 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _55@Mir(bb15[1])
  _53 = move _54 as *const i8 (PtrToPtr)
  using: _54@Mir(bb15[2])
  _52 = move _53 as *mut i8 (PtrToPtr)
  using: _53@Mir(bb15[3])
  goto -> bb37
  using: 
bb16:
  _60 = const b"Invalid ELF class\n\x00"
  using: 
  _59 = &raw const (*_60)
  using: _60@Mir(bb16[0])
  _58 = move _59 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _59@Mir(bb16[1])
  _57 = move _58 as *const i8 (PtrToPtr)
  using: _58@Mir(bb16[2])
  _52 = move _57 as *mut i8 (PtrToPtr)
  using: _57@Mir(bb16[3])
  goto -> bb37
  using: 
bb17:
  _64 = const b"Invalid ELF data\n\x00"
  using: 
  _63 = &raw const (*_64)
  using: _64@Mir(bb17[0])
  _62 = move _63 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _63@Mir(bb17[1])
  _61 = move _62 as *const i8 (PtrToPtr)
  using: _62@Mir(bb17[2])
  _52 = move _61 as *mut i8 (PtrToPtr)
  using: _61@Mir(bb17[3])
  goto -> bb37
  using: 
bb18:
  _68 = const b"Invalid ELF header\n\x00"
  using: 
  _67 = &raw const (*_68)
  using: _68@Mir(bb18[0])
  _66 = move _67 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _67@Mir(bb18[1])
  _65 = move _66 as *const i8 (PtrToPtr)
  using: _66@Mir(bb18[2])
  _52 = move _65 as *mut i8 (PtrToPtr)
  using: _65@Mir(bb18[3])
  goto -> bb37
  using: 
bb19:
  _72 = const b"Invalid bits\n\x00"
  using: 
  _71 = &raw const (*_72)
  using: _72@Mir(bb19[0])
  _70 = move _71 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _71@Mir(bb19[1])
  _69 = move _70 as *const i8 (PtrToPtr)
  using: _70@Mir(bb19[2])
  _52 = move _69 as *mut i8 (PtrToPtr)
  using: _69@Mir(bb19[3])
  goto -> bb37
  using: 
bb20:
  _76 = const b"Invalid endianness\n\x00"
  using: 
  _75 = &raw const (*_76)
  using: _76@Mir(bb20[0])
  _74 = move _75 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _75@Mir(bb20[1])
  _73 = move _74 as *const i8 (PtrToPtr)
  using: _74@Mir(bb20[2])
  _52 = move _73 as *mut i8 (PtrToPtr)
  using: _73@Mir(bb20[3])
  goto -> bb37
  using: 
bb21:
  _80 = const b"Not an ET_EXEC or ET_DYN ELF file\n\x00"
  using: 
  _79 = &raw const (*_80)
  using: _80@Mir(bb21[0])
  _78 = move _79 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _79@Mir(bb21[1])
  _77 = move _78 as *const i8 (PtrToPtr)
  using: _78@Mir(bb21[2])
  _52 = move _77 as *mut i8 (PtrToPtr)
  using: _77@Mir(bb21[3])
  goto -> bb37
  using: 
bb22:
  _84 = const b"Invalid ELF program header offset\n\x00"
  using: 
  _83 = &raw const (*_84)
  using: _84@Mir(bb22[0])
  _82 = move _83 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _83@Mir(bb22[1])
  _81 = move _82 as *const i8 (PtrToPtr)
  using: _82@Mir(bb22[2])
  _52 = move _81 as *mut i8 (PtrToPtr)
  using: _81@Mir(bb22[3])
  goto -> bb37
  using: 
bb23:
  _88 = const b"Invalid ELF program header\n\x00"
  using: 
  _87 = &raw const (*_88)
  using: _88@Mir(bb23[0])
  _86 = move _87 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _87@Mir(bb23[1])
  _85 = move _86 as *const i8 (PtrToPtr)
  using: _86@Mir(bb23[2])
  _52 = move _85 as *mut i8 (PtrToPtr)
  using: _85@Mir(bb23[3])
  goto -> bb37
  using: 
bb24:
  _92 = const b"Can\'t stat file\n\x00"
  using: 
  _91 = &raw const (*_92)
  using: _92@Mir(bb24[0])
  _90 = move _91 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _91@Mir(bb24[1])
  _89 = move _90 as *const i8 (PtrToPtr)
  using: _90@Mir(bb24[2])
  _52 = move _89 as *mut i8 (PtrToPtr)
  using: _89@Mir(bb24[3])
  goto -> bb37
  using: 
bb25:
  _96 = const b"Invalid ELF dynamic section\n\x00"
  using: 
  _95 = &raw const (*_96)
  using: _96@Mir(bb25[0])
  _94 = move _95 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _95@Mir(bb25[1])
  _93 = move _94 as *const i8 (PtrToPtr)
  using: _94@Mir(bb25[2])
  _52 = move _93 as *mut i8 (PtrToPtr)
  using: _93@Mir(bb25[3])
  goto -> bb37
  using: 
bb26:
  _100 = const b"Invalid ELF dynamic array entry\n\x00"
  using: 
  _99 = &raw const (*_100)
  using: _100@Mir(bb26[0])
  _98 = move _99 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _99@Mir(bb26[1])
  _97 = move _98 as *const i8 (PtrToPtr)
  using: _98@Mir(bb26[2])
  _52 = move _97 as *mut i8 (PtrToPtr)
  using: _97@Mir(bb26[3])
  goto -> bb37
  using: 
bb27:
  _104 = const b"No ELF string table found\n\x00"
  using: 
  _103 = &raw const (*_104)
  using: _104@Mir(bb27[0])
  _102 = move _103 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _103@Mir(bb27[1])
  _101 = move _102 as *const i8 (PtrToPtr)
  using: _102@Mir(bb27[2])
  _52 = move _101 as *mut i8 (PtrToPtr)
  using: _101@Mir(bb27[3])
  goto -> bb37
  using: 
bb28:
  _108 = const b"Can\'t read DT_SONAME\n\x00"
  using: 
  _107 = &raw const (*_108)
  using: _108@Mir(bb28[0])
  _106 = move _107 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _107@Mir(bb28[1])
  _105 = move _106 as *const i8 (PtrToPtr)
  using: _106@Mir(bb28[2])
  _52 = move _105 as *mut i8 (PtrToPtr)
  using: _105@Mir(bb28[3])
  goto -> bb37
  using: 
bb29:
  _112 = const b"Can\'t read DT_RPATH\n\x00"
  using: 
  _111 = &raw const (*_112)
  using: _112@Mir(bb29[0])
  _110 = move _111 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _111@Mir(bb29[1])
  _109 = move _110 as *const i8 (PtrToPtr)
  using: _110@Mir(bb29[2])
  _52 = move _109 as *mut i8 (PtrToPtr)
  using: _109@Mir(bb29[3])
  goto -> bb37
  using: 
bb30:
  _116 = const b"Can\'t read DT_RUNPATH\n\x00"
  using: 
  _115 = &raw const (*_116)
  using: _116@Mir(bb30[0])
  _114 = move _115 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _115@Mir(bb30[1])
  _113 = move _114 as *const i8 (PtrToPtr)
  using: _114@Mir(bb30[2])
  _52 = move _113 as *mut i8 (PtrToPtr)
  using: _113@Mir(bb30[3])
  goto -> bb37
  using: 
bb31:
  _120 = const b"Can\'t read DT_NEEDED\n\x00"
  using: 
  _119 = &raw const (*_120)
  using: _120@Mir(bb31[0])
  _118 = move _119 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _119@Mir(bb31[1])
  _117 = move _118 as *const i8 (PtrToPtr)
  using: _118@Mir(bb31[2])
  _52 = move _117 as *mut i8 (PtrToPtr)
  using: _117@Mir(bb31[3])
  goto -> bb37
  using: 
bb32:
  _124 = const b"Not all dependencies were found\n\x00"
  using: 
  _123 = &raw const (*_124)
  using: _124@Mir(bb32[0])
  _122 = move _123 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _123@Mir(bb32[1])
  _121 = move _122 as *const i8 (PtrToPtr)
  using: _122@Mir(bb32[2])
  _52 = move _121 as *mut i8 (PtrToPtr)
  using: _121@Mir(bb32[3])
  goto -> bb37
  using: 
bb33:
  _128 = const b"No PT_LOAD found in ELF file\n\x00"
  using: 
  _127 = &raw const (*_128)
  using: _128@Mir(bb33[0])
  _126 = move _127 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _127@Mir(bb33[1])
  _125 = move _126 as *const i8 (PtrToPtr)
  using: _126@Mir(bb33[2])
  _52 = move _125 as *mut i8 (PtrToPtr)
  using: _125@Mir(bb33[3])
  goto -> bb37
  using: 
bb34:
  _132 = const b"Virtual addresses are not ordered\n\x00"
  using: 
  _131 = &raw const (*_132)
  using: _132@Mir(bb34[0])
  _130 = move _131 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _131@Mir(bb34[1])
  _129 = move _130 as *const i8 (PtrToPtr)
  using: _130@Mir(bb34[2])
  _52 = move _129 as *mut i8 (PtrToPtr)
  using: _129@Mir(bb34[3])
  goto -> bb37
  using: 
bb35:
  _136 = const b"Could not open file\n\x00"
  using: 
  _135 = &raw const (*_136)
  using: _136@Mir(bb35[0])
  _134 = move _135 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _135@Mir(bb35[1])
  _133 = move _134 as *const i8 (PtrToPtr)
  using: _134@Mir(bb35[2])
  _52 = move _133 as *mut i8 (PtrToPtr)
  using: _133@Mir(bb35[3])
  goto -> bb37
  using: 
bb36:
  _140 = const b"Incompatible ISA\n\x00"
  using: 
  _139 = &raw const (*_140)
  using: _140@Mir(bb36[0])
  _138 = move _139 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _139@Mir(bb36[1])
  _137 = move _138 as *const i8 (PtrToPtr)
  using: _138@Mir(bb36[2])
  _52 = move _137 as *mut i8 (PtrToPtr)
  using: _137@Mir(bb36[3])
  goto -> bb37
  using: 
bb37:
  _142 = _52
  using: _52@Phi(bb37)
  _141 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _142) -> [return: bb38, unwind continue]
  using: _142@Mir(bb37[0])
bb38:
  switchInt(move _141) -> [0: bb39, otherwise: bb40]
  using: _141@Mir(bb37[1])
bb39:
  _145 = _52
  using: _52@Phi(bb37)
  _144 = move _145 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _145@Mir(bb39[0])
  _147 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _159 = _147 as *const () (PtrToPtr)
  using: _147@Mir(bb39[2])
  _160 = _159 as usize (Transmute)
  using: _159@Mir(bb39[3])
  _161 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _162 = Sub(_161, const 1_usize)
  using: _161@Mir(bb39[5])
  _163 = BitAnd(_160, _162)
  using: _160@Mir(bb39[4]), _162@Mir(bb39[6])
  _164 = Eq(_163, const 0_usize)
  using: _163@Mir(bb39[7])
  assert(_164, "misaligned pointer dereference: address must be a multiple of {} but is {}", _161, _160) -> [success: bb46, unwind unreachable]
  using: _164@Mir(bb39[8]), _161@Mir(bb39[5]), _160@Mir(bb39[4])
bb40:
  _150 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _153 = _150 as *const () (PtrToPtr)
  using: _150@Mir(bb40[0])
  _154 = _153 as usize (Transmute)
  using: _153@Mir(bb40[1])
  _155 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _156 = Sub(_155, const 1_usize)
  using: _155@Mir(bb40[3])
  _157 = BitAnd(_154, _156)
  using: _154@Mir(bb40[2]), _156@Mir(bb40[4])
  _158 = Eq(_157, const 0_usize)
  using: _157@Mir(bb40[5])
  assert(_158, "misaligned pointer dereference: address must be a multiple of {} but is {}", _155, _154) -> [success: bb45, unwind unreachable]
  using: _158@Mir(bb40[6]), _155@Mir(bb40[3]), _154@Mir(bb40[2])
bb41:
  _151 = CheckedAdd(_9, const 1_i32)
  using: _9@Phi(bb5)
  assert(!move (_151.1: bool), "attempt to compute `{} + {}`, which would overflow", _9, const 1_i32) -> [success: bb42, unwind continue]
  using: _151@Mir(bb41[0]), _9@Phi(bb5)
bb42:
  _9 = move (_151.0: i32)
  using: _151@Mir(bb41[0])
  goto -> bb5
  using: 
bb43:
  _152 = src::libtree::libtree_state_free(_3) -> [return: bb44, unwind continue]
  using: _3@Entry
bb44:
  _0 = _8
  using: _8@Phi(bb5)
  return
  using: _0@Mir(bb44[0])
bb45:
  _149 = (*_150)
  using: _150@Mir(bb40[0])
  _148 = src::libtree::fflush(move _149) -> [return: bb41, unwind continue]
  using: _149@Mir(bb45[0])
bb46:
  _146 = (*_147)
  using: _147@Mir(bb39[2])
  _143 = src::libtree::fputs(move _144, move _146) -> [return: bb40, unwind continue]
  using: _144@Mir(bb39[1]), _146@Mir(bb46[0])
bb47:
  _50 = (*_51)
  using: _51@Mir(bb13[4])
  _45 = src::libtree::fputs(move _46, move _50) -> [return: bb14, unwind continue]
  using: _46@Mir(bb13[3]), _50@Mir(bb47[0])
bb48:
  _43 = (*_44)
  using: _44@Mir(bb49[2])
  _37 = src::libtree::fputs(move _38, move _43) -> [return: bb13, unwind continue]
  using: _38@Mir(bb49[1]), _43@Mir(bb48[0])
bb49:
  _39 = (*_40)
  using: _40@Mir(bb11[2])
  _38 = move _39 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _39@Mir(bb49[0])
  _44 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _171 = _44 as *const () (PtrToPtr)
  using: _44@Mir(bb49[2])
  _172 = _171 as usize (Transmute)
  using: _171@Mir(bb49[3])
  _173 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _174 = Sub(_173, const 1_usize)
  using: _173@Mir(bb49[5])
  _175 = BitAnd(_172, _174)
  using: _172@Mir(bb49[4]), _174@Mir(bb49[6])
  _176 = Eq(_175, const 0_usize)
  using: _175@Mir(bb49[7])
  assert(_176, "misaligned pointer dereference: address must be a multiple of {} but is {}", _173, _172) -> [success: bb48, unwind unreachable]
  using: _176@Mir(bb49[8]), _173@Mir(bb49[5]), _172@Mir(bb49[4])
bb50:
  _35 = (*_36)
  using: _36@Mir(bb10[6])
  _30 = src::libtree::fputs(move _31, move _35) -> [return: bb11, unwind continue]
  using: _31@Mir(bb10[5]), _35@Mir(bb50[0])
bb51:
  _24 = (*_25)
  using: _25@Mir(bb8[0])
  _23 = src::libtree::fflush(move _24) -> [return: bb9, unwind continue]
  using: _24@Mir(bb51[0])
bb52:
  _13 = (*_14)
  using: _14@Mir(bb6[2])
  _18 = const 0_i32
  using: 
  _17 = move _18 as u64 (IntToInt)
  using: _18@Mir(bb52[1])
  _21 = const 1_i32
  using: 
  _20 = move _21 as i8 (IntToInt)
  using: _21@Mir(bb52[3])
  _19 = src::libtree::compat_t { any: move _20, class: const 0_u8, machine: const 0_u16 }
  using: _20@Mir(bb52[4])
  _22 = src::libtree::found_t { how: const _, depth: const 0_u64 }
  using: 
  _12 = src::libtree::recurse(move _13, move _17, _3, _19, _22) -> [return: bb8, unwind continue]
  using: _13@Mir(bb52[0]), _17@Mir(bb52[2]), _3@Entry, _19@Mir(bb52[5]), _22@Mir(bb52[6])
@DefId(0:152 ~ lib[f5c5]::src::libtree::main_0)
bb0:
  _4 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _6 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _5 = src::libtree::string_table_t { arr: move _6, n: const 0_u64, capacity: const 0_u64 }
  using: _6@Mir(bb0[1])
  _8 = const 0_usize as *mut src::libtree::visited_file_t (PointerFromExposedAddress)
  using: 
  _7 = src::libtree::visited_file_array_t { arr: move _8, n: const 0_u64, capacity: const 0_u64 }
  using: _8@Mir(bb0[3])
  _9 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _10 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _11 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _12 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _13 = [const 0_u64; 32]
  using: 
  _14 = [const 0_i8; 32]
  using: 
  _3 = src::libtree::libtree_state_t { verbosity: const 0_i32, path: const 0_i32, color: const 0_i32, ld_conf_file: move _4, max_depth: const 0_u64, string_table: move _5, visited: move _7, PLATFORM: move _9, LIB: move _10, OSNAME: move _11, OSREL: move _12, rpath_offsets: move _13, ld_library_path_offset: const 0_u64, default_paths_offset: const 0_u64, ld_so_conf_offset: const 0_u64, found_all_needed: move _14 }
  using: _4@Mir(bb0[0]), _5@Mir(bb0[2]), _7@Mir(bb0[4]), _9@Mir(bb0[5]), _10@Mir(bb0[6]), _11@Mir(bb0[7]), _12@Mir(bb0[8]), _13@Mir(bb0[9]), _14@Mir(bb0[10])
  _21 = const b"NO_COLOR\x00"
  using: 
  _20 = &raw const (*_21)
  using: _21@Mir(bb0[12])
  _19 = move _20 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _20@Mir(bb0[13])
  _18 = move _19 as *const i8 (PtrToPtr)
  using: _19@Mir(bb0[14])
  _17 = src::libtree::getenv(move _18) -> [return: bb1, unwind continue]
  using: _18@Mir(bb0[15])
bb1:
  _16 = std::ptr::mut_ptr::<impl *mut i8>::is_null(move _17) -> [return: bb2, unwind continue]
  using: _17@Mir(bb0[16])
bb2:
  switchInt(move _16) -> [0: bb4, otherwise: bb3]
  using: _16@Mir(bb1[0])
bb3:
  _23 = const 1_i32
  using: 
  _22 = src::libtree::isatty(move _23) -> [return: bb5, unwind continue]
  using: _23@Mir(bb3[0])
bb4:
  _15 = const false
  using: 
  goto -> bb6
  using: 
bb5:
  _15 = Ne(move _22, const 0_i32)
  using: _22@Mir(bb3[1])
  goto -> bb6
  using: 
bb6:
  (_3.2: i32) = move _15 as i32 (IntToInt)
  using: _15@Phi(bb6)
  _24 = const 0_i32
  using: 
  (_3.0: i32) = move _24
  using: _24@Mir(bb6[1])
  _25 = const 0_i32
  using: 
  (_3.1: i32) = move _25
  using: _25@Mir(bb6[3])
  _26 = const 32_i32
  using: 
  (_3.4: u64) = move _26 as u64 (IntToInt)
  using: _26@Mir(bb6[5])
  _27 = const 1_i32
  using: 
  _29 = [const 0_i8; 65]
  using: 
  _30 = [const 0_i8; 65]
  using: 
  _31 = [const 0_i8; 65]
  using: 
  _32 = [const 0_i8; 65]
  using: 
  _33 = [const 0_i8; 65]
  using: 
  _34 = [const 0_i8; 65]
  using: 
  _28 = src::libtree::utsname { sysname: move _29, nodename: move _30, release: move _31, version: move _32, machine: move _33, __domainname: move _34 }
  using: _29@Mir(bb6[8]), _30@Mir(bb6[9]), _31@Mir(bb6[10]), _32@Mir(bb6[11]), _33@Mir(bb6[12]), _34@Mir(bb6[13])
  _38 = &mut _28
  using: _28@Mir(bb6[14])
  _37 = &raw mut (*_38)
  using: _38@Mir(bb6[15])
  _36 = src::libtree::uname(move _37) -> [return: bb7, unwind continue]
  using: _37@Mir(bb6[16])
bb7:
  _39 = const 0_i32
  using: 
  _35 = Ne(move _36, move _39)
  using: _36@Mir(bb6[17]), _39@Mir(bb7[0])
  switchInt(move _35) -> [0: bb9, otherwise: bb8]
  using: _35@Mir(bb7[1])
bb8:
  _0 = const 1_i32
  using: 
  goto -> bb122
  using: 
bb9:
  _42 = &mut (_28.4: [i8; 65])
  using: _28@Mir(bb6[14])
  _41 = move _42 as &mut [i8] (PointerCoercion(Unsize))
  using: _42@Mir(bb9[0])
  _40 = core::slice::<impl [i8]>::as_mut_ptr(move _41) -> [return: bb10, unwind continue]
  using: _41@Mir(bb9[1])
bb10:
  (_3.7: *mut i8) = move _40
  using: _40@Mir(bb9[2])
  _45 = &mut (_28.0: [i8; 65])
  using: _28@Mir(bb6[14])
  _44 = move _45 as &mut [i8] (PointerCoercion(Unsize))
  using: _45@Mir(bb10[1])
  _43 = core::slice::<impl [i8]>::as_mut_ptr(move _44) -> [return: bb11, unwind continue]
  using: _44@Mir(bb10[2])
bb11:
  (_3.9: *mut i8) = move _43
  using: _43@Mir(bb10[3])
  _48 = &mut (_28.2: [i8; 65])
  using: _28@Mir(bb6[14])
  _47 = move _48 as &mut [i8] (PointerCoercion(Unsize))
  using: _48@Mir(bb11[1])
  _46 = core::slice::<impl [i8]>::as_mut_ptr(move _47) -> [return: bb12, unwind continue]
  using: _47@Mir(bb11[2])
bb12:
  (_3.10: *mut i8) = move _46
  using: _46@Mir(bb11[3])
  _52 = const b"/etc/ld.so.conf\x00"
  using: 
  _51 = &raw const (*_52)
  using: _52@Mir(bb12[1])
  _50 = move _51 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _51@Mir(bb12[2])
  _49 = move _50 as *const i8 (PtrToPtr)
  using: _50@Mir(bb12[3])
  (_3.3: *mut i8) = move _49 as *mut i8 (PtrToPtr)
  using: _49@Mir(bb12[4])
  _58 = &mut (_28.0: [i8; 65])
  using: _28@Mir(bb6[14])
  _57 = move _58 as &mut [i8] (PointerCoercion(Unsize))
  using: _58@Mir(bb12[6])
  _56 = core::slice::<impl [i8]>::as_mut_ptr(move _57) -> [return: bb13, unwind continue]
  using: _57@Mir(bb12[7])
bb13:
  _55 = move _56 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _56@Mir(bb12[8])
  _62 = const b"FreeBSD\x00"
  using: 
  _61 = &raw const (*_62)
  using: _62@Mir(bb13[1])
  _60 = move _61 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _61@Mir(bb13[2])
  _59 = move _60 as *const i8 (PtrToPtr)
  using: _60@Mir(bb13[3])
  _54 = src::libtree::strcmp(move _55, move _59) -> [return: bb14, unwind continue]
  using: _55@Mir(bb13[0]), _59@Mir(bb13[4])
bb14:
  _63 = const 0_i32
  using: 
  _53 = Eq(move _54, move _63)
  using: _54@Mir(bb13[5]), _63@Mir(bb14[0])
  switchInt(move _53) -> [0: bb16, otherwise: bb15]
  using: _53@Mir(bb14[1])
bb15:
  _67 = const b"/etc/ld-elf.so.conf\x00"
  using: 
  _66 = &raw const (*_67)
  using: _67@Mir(bb15[0])
  _65 = move _66 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _66@Mir(bb15[1])
  _64 = move _65 as *const i8 (PtrToPtr)
  using: _65@Mir(bb15[2])
  (_3.3: *mut i8) = move _64 as *mut i8 (PtrToPtr)
  using: _64@Mir(bb15[3])
  goto -> bb16
  using: 
bb16:
  _71 = const b"lib\x00"
  using: 
  _70 = &raw const (*_71)
  using: _71@Mir(bb16[0])
  _69 = move _70 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _70@Mir(bb16[1])
  _68 = move _69 as *const i8 (PtrToPtr)
  using: _69@Mir(bb16[2])
  (_3.8: *mut i8) = move _68 as *mut i8 (PtrToPtr)
  using: _68@Mir(bb16[3])
  _72 = const 0_i32
  using: 
  _73 = const 0_i32
  using: 
  _74 = const 0_i32
  using: 
  _75 = const 1_i32
  using: 
  goto -> bb17
  using: 
bb17:
  _77 = _75
  using: _75@Phi(bb17)
  _76 = Lt(move _77, _1)
  using: _77@Mir(bb17[0]), _1@Entry
  switchInt(move _76) -> [0: bb82, otherwise: bb18]
  using: _76@Mir(bb17[1])
bb18:
  _80 = _2
  using: _2@Entry
  _82 = _75
  using: _75@Phi(bb17)
  _81 = move _82 as isize (IntToInt)
  using: _82@Mir(bb18[1])
  _79 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _80, move _81) -> [return: bb19, unwind continue]
  using: _80@Mir(bb18[0]), _81@Mir(bb18[2])
bb19:
  _605 = _79 as *const () (PtrToPtr)
  using: _79@Mir(bb18[3])
  _606 = _605 as usize (Transmute)
  using: _605@Mir(bb19[0])
  _607 = AlignOf(*mut i8)
  using: 
  _608 = Sub(_607, const 1_usize)
  using: _607@Mir(bb19[2])
  _609 = BitAnd(_606, _608)
  using: _606@Mir(bb19[1]), _608@Mir(bb19[3])
  _610 = Eq(_609, const 0_usize)
  using: _609@Mir(bb19[4])
  assert(_610, "misaligned pointer dereference: address must be a multiple of {} but is {}", _607, _606) -> [success: bb153, unwind unreachable]
  using: _610@Mir(bb19[5]), _607@Mir(bb19[2]), _606@Mir(bb19[1])
bb20:
  _86 = (*_78)
  using: _78@Mir(bb153[0])
  _85 = move _86 as i32 (IntToInt)
  using: _86@Mir(bb20[0])
  _87 = const '-' as i32 (IntToInt)
  using: 
  _84 = Ne(move _85, move _87)
  using: _85@Mir(bb20[1]), _87@Mir(bb20[2])
  switchInt(move _84) -> [0: bb21, otherwise: bb23]
  using: _84@Mir(bb20[3])
bb21:
  _92 = _78
  using: _78@Mir(bb153[0])
  _94 = const 1_i32
  using: 
  _93 = move _94 as isize (IntToInt)
  using: _94@Mir(bb21[1])
  _91 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _92, move _93) -> [return: bb22, unwind continue]
  using: _92@Mir(bb21[0]), _93@Mir(bb21[2])
bb22:
  _90 = (*_91)
  using: _91@Mir(bb21[3])
  _89 = move _90 as i32 (IntToInt)
  using: _90@Mir(bb22[0])
  _95 = const '\0' as i32 (IntToInt)
  using: 
  _88 = Eq(move _89, move _95)
  using: _89@Mir(bb22[1]), _95@Mir(bb22[2])
  switchInt(move _88) -> [0: bb26, otherwise: bb23]
  using: _88@Mir(bb22[3])
bb23:
  _96 = _27
  using: _27@Phi(bb17)
  _97 = _27
  using: _27@Phi(bb17)
  _98 = CheckedAdd(_97, const 1_i32)
  using: _97@Mir(bb23[1])
  assert(!move (_98.1: bool), "attempt to compute `{} + {}`, which would overflow", move _97, const 1_i32) -> [success: bb24, unwind continue]
  using: _98@Mir(bb23[2]), _97@Mir(bb23[1])
bb24:
  _27 = move (_98.0: i32)
  using: _98@Mir(bb23[2])
  _101 = _2
  using: _2@Entry
  _102 = _96 as isize (IntToInt)
  using: _96@Mir(bb23[0])
  _100 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _101, move _102) -> [return: bb25, unwind continue]
  using: _101@Mir(bb24[1]), _102@Mir(bb24[2])
bb25:
  _599 = _100 as *const () (PtrToPtr)
  using: _100@Mir(bb24[3])
  _600 = _599 as usize (Transmute)
  using: _599@Mir(bb25[0])
  _601 = AlignOf(*mut i8)
  using: 
  _602 = Sub(_601, const 1_usize)
  using: _601@Mir(bb25[2])
  _603 = BitAnd(_600, _602)
  using: _600@Mir(bb25[1]), _602@Mir(bb25[3])
  _604 = Eq(_603, const 0_usize)
  using: _603@Mir(bb25[4])
  assert(_604, "misaligned pointer dereference: address must be a multiple of {} but is {}", _601, _600) -> [success: bb152, unwind unreachable]
  using: _604@Mir(bb25[5]), _601@Mir(bb25[2]), _600@Mir(bb25[1])
bb26:
  _105 = _78
  using: _78@Mir(bb153[0])
  _104 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _105, const 1_isize) -> [return: bb27, unwind continue]
  using: _105@Mir(bb26[0])
bb27:
  _78 = move _104
  using: _104@Mir(bb26[1])
  _108 = (*_78)
  using: _78@Mir(bb27[0])
  _107 = move _108 as i32 (IntToInt)
  using: _108@Mir(bb27[1])
  _109 = const '-' as i32 (IntToInt)
  using: 
  _106 = Eq(move _107, move _109)
  using: _107@Mir(bb27[2]), _109@Mir(bb27[3])
  switchInt(move _106) -> [0: bb68, otherwise: bb28]
  using: _106@Mir(bb27[4])
bb28:
  _111 = _78
  using: _78@Mir(bb27[0])
  _110 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _111, const 1_isize) -> [return: bb29, unwind continue]
  using: _111@Mir(bb28[0])
bb29:
  _78 = move _110
  using: _110@Mir(bb28[1])
  _114 = (*_78)
  using: _78@Mir(bb29[0])
  _113 = move _114 as i32 (IntToInt)
  using: _114@Mir(bb29[1])
  _115 = const '\0' as i32 (IntToInt)
  using: 
  _112 = Eq(move _113, move _115)
  using: _113@Mir(bb29[2]), _115@Mir(bb29[3])
  switchInt(move _112) -> [0: bb31, otherwise: bb30]
  using: _112@Mir(bb29[4])
bb30:
  _116 = const 1_i32
  using: 
  _74 = move _116
  using: _116@Mir(bb30[0])
  goto -> bb80
  using: 
bb31:
  _120 = _78
  using: _78@Mir(bb29[0])
  _119 = move _120 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _120@Mir(bb31[0])
  _124 = const b"version\x00"
  using: 
  _123 = &raw const (*_124)
  using: _124@Mir(bb31[2])
  _122 = move _123 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _123@Mir(bb31[3])
  _121 = move _122 as *const i8 (PtrToPtr)
  using: _122@Mir(bb31[4])
  _118 = src::libtree::strcmp(move _119, move _121) -> [return: bb32, unwind continue]
  using: _119@Mir(bb31[1]), _121@Mir(bb31[5])
bb32:
  _125 = const 0_i32
  using: 
  _117 = Eq(move _118, move _125)
  using: _118@Mir(bb31[6]), _125@Mir(bb32[0])
  switchInt(move _117) -> [0: bb34, otherwise: bb33]
  using: _117@Mir(bb32[1])
bb33:
  _126 = const 1_i32
  using: 
  _73 = move _126
  using: _126@Mir(bb33[0])
  goto -> bb80
  using: 
bb34:
  _130 = _78
  using: _78@Mir(bb29[0])
  _129 = move _130 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _130@Mir(bb34[0])
  _134 = const b"path\x00"
  using: 
  _133 = &raw const (*_134)
  using: _134@Mir(bb34[2])
  _132 = move _133 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _133@Mir(bb34[3])
  _131 = move _132 as *const i8 (PtrToPtr)
  using: _132@Mir(bb34[4])
  _128 = src::libtree::strcmp(move _129, move _131) -> [return: bb35, unwind continue]
  using: _129@Mir(bb34[1]), _131@Mir(bb34[5])
bb35:
  _135 = const 0_i32
  using: 
  _127 = Eq(move _128, move _135)
  using: _128@Mir(bb34[6]), _135@Mir(bb35[0])
  switchInt(move _127) -> [0: bb37, otherwise: bb36]
  using: _127@Mir(bb35[1])
bb36:
  _136 = const 1_i32
  using: 
  (_3.1: i32) = move _136
  using: _136@Mir(bb36[0])
  goto -> bb80
  using: 
bb37:
  _140 = _78
  using: _78@Mir(bb29[0])
  _139 = move _140 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _140@Mir(bb37[0])
  _144 = const b"verbose\x00"
  using: 
  _143 = &raw const (*_144)
  using: _144@Mir(bb37[2])
  _142 = move _143 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _143@Mir(bb37[3])
  _141 = move _142 as *const i8 (PtrToPtr)
  using: _142@Mir(bb37[4])
  _138 = src::libtree::strcmp(move _139, move _141) -> [return: bb38, unwind continue]
  using: _139@Mir(bb37[1]), _141@Mir(bb37[5])
bb38:
  _145 = const 0_i32
  using: 
  _137 = Eq(move _138, move _145)
  using: _138@Mir(bb37[6]), _145@Mir(bb38[0])
  switchInt(move _137) -> [0: bb41, otherwise: bb39]
  using: _137@Mir(bb38[1])
bb39:
  _146 = CheckedAdd((_3.0: i32), const 1_i32)
  using: _3@Mir(bb0[11])
  assert(!move (_146.1: bool), "attempt to compute `{} + {}`, which would overflow", (_3.0: i32), const 1_i32) -> [success: bb40, unwind continue]
  using: _146@Mir(bb39[0]), _3@Mir(bb0[11])
bb40:
  (_3.0: i32) = move (_146.0: i32)
  using: _146@Mir(bb39[0])
  goto -> bb80
  using: 
bb41:
  _150 = _78
  using: _78@Mir(bb29[0])
  _149 = move _150 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _150@Mir(bb41[0])
  _154 = const b"help\x00"
  using: 
  _153 = &raw const (*_154)
  using: _154@Mir(bb41[2])
  _152 = move _153 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _153@Mir(bb41[3])
  _151 = move _152 as *const i8 (PtrToPtr)
  using: _152@Mir(bb41[4])
  _148 = src::libtree::strcmp(move _149, move _151) -> [return: bb42, unwind continue]
  using: _149@Mir(bb41[1]), _151@Mir(bb41[5])
bb42:
  _155 = const 0_i32
  using: 
  _147 = Eq(move _148, move _155)
  using: _148@Mir(bb41[6]), _155@Mir(bb42[0])
  switchInt(move _147) -> [0: bb44, otherwise: bb43]
  using: _147@Mir(bb42[1])
bb43:
  _156 = const 1_i32
  using: 
  _72 = move _156
  using: _156@Mir(bb43[0])
  goto -> bb80
  using: 
bb44:
  _160 = _78
  using: _78@Mir(bb29[0])
  _159 = move _160 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _160@Mir(bb44[0])
  _164 = const b"ldconf\x00"
  using: 
  _163 = &raw const (*_164)
  using: _164@Mir(bb44[2])
  _162 = move _163 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _163@Mir(bb44[3])
  _161 = move _162 as *const i8 (PtrToPtr)
  using: _162@Mir(bb44[4])
  _158 = src::libtree::strcmp(move _159, move _161) -> [return: bb45, unwind continue]
  using: _159@Mir(bb44[1]), _161@Mir(bb44[5])
bb45:
  _165 = const 0_i32
  using: 
  _157 = Eq(move _158, move _165)
  using: _158@Mir(bb44[6]), _165@Mir(bb45[0])
  switchInt(move _157) -> [0: bb53, otherwise: bb46]
  using: _157@Mir(bb45[1])
bb46:
  _168 = _75
  using: _75@Phi(bb17)
  _169 = const 1_i32
  using: 
  _170 = CheckedAdd(_168, _169)
  using: _168@Mir(bb46[0]), _169@Mir(bb46[1])
  assert(!move (_170.1: bool), "attempt to compute `{} + {}`, which would overflow", move _168, move _169) -> [success: bb47, unwind continue]
  using: _170@Mir(bb46[2]), _168@Mir(bb46[0]), _169@Mir(bb46[1])
bb47:
  _167 = move (_170.0: i32)
  using: _170@Mir(bb46[2])
  _166 = Eq(move _167, _1)
  using: _167@Mir(bb47[0]), _1@Entry
  switchInt(move _166) -> [0: bb50, otherwise: bb48]
  using: _166@Mir(bb47[1])
bb48:
  _175 = const b"Expected value after `--ldconf`\n\x00"
  using: 
  _174 = &raw const (*_175)
  using: _175@Mir(bb48[0])
  _173 = move _174 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _174@Mir(bb48[1])
  _172 = move _173 as *const i8 (PtrToPtr)
  using: _173@Mir(bb48[2])
  _177 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _593 = _177 as *const () (PtrToPtr)
  using: _177@Mir(bb48[4])
  _594 = _593 as usize (Transmute)
  using: _593@Mir(bb48[5])
  _595 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _596 = Sub(_595, const 1_usize)
  using: _595@Mir(bb48[7])
  _597 = BitAnd(_594, _596)
  using: _594@Mir(bb48[6]), _596@Mir(bb48[8])
  _598 = Eq(_597, const 0_usize)
  using: _597@Mir(bb48[9])
  assert(_598, "misaligned pointer dereference: address must be a multiple of {} but is {}", _595, _594) -> [success: bb151, unwind unreachable]
  using: _598@Mir(bb48[10]), _595@Mir(bb48[7]), _594@Mir(bb48[6])
bb49:
  _0 = const 1_i32
  using: 
  goto -> bb122
  using: 
bb50:
  _178 = CheckedAdd(_75, const 1_i32)
  using: _75@Phi(bb17)
  assert(!move (_178.1: bool), "attempt to compute `{} + {}`, which would overflow", _75, const 1_i32) -> [success: bb51, unwind continue]
  using: _178@Mir(bb50[0]), _75@Phi(bb17)
bb51:
  _75 = move (_178.0: i32)
  using: _178@Mir(bb50[0])
  _181 = _2
  using: _2@Entry
  _183 = _75
  using: _75@Mir(bb51[0])
  _182 = move _183 as isize (IntToInt)
  using: _183@Mir(bb51[2])
  _180 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _181, move _182) -> [return: bb52, unwind continue]
  using: _181@Mir(bb51[1]), _182@Mir(bb51[3])
bb52:
  _587 = _180 as *const () (PtrToPtr)
  using: _180@Mir(bb51[4])
  _588 = _587 as usize (Transmute)
  using: _587@Mir(bb52[0])
  _589 = AlignOf(*mut i8)
  using: 
  _590 = Sub(_589, const 1_usize)
  using: _589@Mir(bb52[2])
  _591 = BitAnd(_588, _590)
  using: _588@Mir(bb52[1]), _590@Mir(bb52[3])
  _592 = Eq(_591, const 0_usize)
  using: _591@Mir(bb52[4])
  assert(_592, "misaligned pointer dereference: address must be a multiple of {} but is {}", _589, _588) -> [success: bb150, unwind unreachable]
  using: _592@Mir(bb52[5]), _589@Mir(bb52[2]), _588@Mir(bb52[1])
bb53:
  _187 = _78
  using: _78@Mir(bb29[0])
  _186 = move _187 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _187@Mir(bb53[0])
  _191 = const b"max-depth\x00"
  using: 
  _190 = &raw const (*_191)
  using: _191@Mir(bb53[2])
  _189 = move _190 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _190@Mir(bb53[3])
  _188 = move _189 as *const i8 (PtrToPtr)
  using: _189@Mir(bb53[4])
  _185 = src::libtree::strcmp(move _186, move _188) -> [return: bb54, unwind continue]
  using: _186@Mir(bb53[1]), _188@Mir(bb53[5])
bb54:
  _192 = const 0_i32
  using: 
  _184 = Eq(move _185, move _192)
  using: _185@Mir(bb53[6]), _192@Mir(bb54[0])
  switchInt(move _184) -> [0: bb64, otherwise: bb55]
  using: _184@Mir(bb54[1])
bb55:
  _195 = _75
  using: _75@Phi(bb17)
  _196 = const 1_i32
  using: 
  _197 = CheckedAdd(_195, _196)
  using: _195@Mir(bb55[0]), _196@Mir(bb55[1])
  assert(!move (_197.1: bool), "attempt to compute `{} + {}`, which would overflow", move _195, move _196) -> [success: bb56, unwind continue]
  using: _197@Mir(bb55[2]), _195@Mir(bb55[0]), _196@Mir(bb55[1])
bb56:
  _194 = move (_197.0: i32)
  using: _197@Mir(bb55[2])
  _193 = Eq(move _194, _1)
  using: _194@Mir(bb56[0]), _1@Entry
  switchInt(move _193) -> [0: bb59, otherwise: bb57]
  using: _193@Mir(bb56[1])
bb57:
  _202 = const b"Expected value after `--max-depth`\n\x00"
  using: 
  _201 = &raw const (*_202)
  using: _202@Mir(bb57[0])
  _200 = move _201 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _201@Mir(bb57[1])
  _199 = move _200 as *const i8 (PtrToPtr)
  using: _200@Mir(bb57[2])
  _204 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _581 = _204 as *const () (PtrToPtr)
  using: _204@Mir(bb57[4])
  _582 = _581 as usize (Transmute)
  using: _581@Mir(bb57[5])
  _583 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _584 = Sub(_583, const 1_usize)
  using: _583@Mir(bb57[7])
  _585 = BitAnd(_582, _584)
  using: _582@Mir(bb57[6]), _584@Mir(bb57[8])
  _586 = Eq(_585, const 0_usize)
  using: _585@Mir(bb57[9])
  assert(_586, "misaligned pointer dereference: address must be a multiple of {} but is {}", _583, _582) -> [success: bb149, unwind unreachable]
  using: _586@Mir(bb57[10]), _583@Mir(bb57[7]), _582@Mir(bb57[6])
bb58:
  _0 = const 1_i32
  using: 
  goto -> bb122
  using: 
bb59:
  _205 = const 0_usize as *mut i8 (PointerFromExposedAddress)
  using: 
  _206 = CheckedAdd(_75, const 1_i32)
  using: _75@Phi(bb17)
  assert(!move (_206.1: bool), "attempt to compute `{} + {}`, which would overflow", _75, const 1_i32) -> [success: bb60, unwind continue]
  using: _206@Mir(bb59[1]), _75@Phi(bb17)
bb60:
  _75 = move (_206.0: i32)
  using: _206@Mir(bb59[1])
  _211 = _2
  using: _2@Entry
  _213 = _75
  using: _75@Mir(bb60[0])
  _212 = move _213 as isize (IntToInt)
  using: _213@Mir(bb60[2])
  _210 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _211, move _212) -> [return: bb61, unwind continue]
  using: _211@Mir(bb60[1]), _212@Mir(bb60[3])
bb61:
  _575 = _210 as *const () (PtrToPtr)
  using: _210@Mir(bb60[4])
  _576 = _575 as usize (Transmute)
  using: _575@Mir(bb61[0])
  _577 = AlignOf(*mut i8)
  using: 
  _578 = Sub(_577, const 1_usize)
  using: _577@Mir(bb61[2])
  _579 = BitAnd(_576, _578)
  using: _576@Mir(bb61[1]), _578@Mir(bb61[3])
  _580 = Eq(_579, const 0_usize)
  using: _579@Mir(bb61[4])
  assert(_580, "misaligned pointer dereference: address must be a multiple of {} but is {}", _577, _576) -> [success: bb148, unwind unreachable]
  using: _580@Mir(bb61[5]), _577@Mir(bb61[2]), _576@Mir(bb61[1])
bb62:
  (_3.4: u64) = move _207
  using: _207@Mir(bb148[5])
  _218 = (_3.4: u64)
  using: _3@Mir(bb0[11])
  _220 = const 32_i32
  using: 
  _219 = move _220 as u64 (IntToInt)
  using: _220@Mir(bb62[2])
  _217 = Gt(move _218, move _219)
  using: _218@Mir(bb62[1]), _219@Mir(bb62[3])
  switchInt(move _217) -> [0: bb80, otherwise: bb63]
  using: _217@Mir(bb62[4])
bb63:
  _221 = const 32_i32
  using: 
  (_3.4: u64) = move _221 as u64 (IntToInt)
  using: _221@Mir(bb63[0])
  goto -> bb80
  using: 
bb64:
  _226 = const b"Unrecognized flag `--\x00"
  using: 
  _225 = &raw const (*_226)
  using: _226@Mir(bb64[0])
  _224 = move _225 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _225@Mir(bb64[1])
  _223 = move _224 as *const i8 (PtrToPtr)
  using: _224@Mir(bb64[2])
  _228 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _569 = _228 as *const () (PtrToPtr)
  using: _228@Mir(bb64[4])
  _570 = _569 as usize (Transmute)
  using: _569@Mir(bb64[5])
  _571 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _572 = Sub(_571, const 1_usize)
  using: _571@Mir(bb64[7])
  _573 = BitAnd(_570, _572)
  using: _570@Mir(bb64[6]), _572@Mir(bb64[8])
  _574 = Eq(_573, const 0_usize)
  using: _573@Mir(bb64[9])
  assert(_574, "misaligned pointer dereference: address must be a multiple of {} but is {}", _571, _570) -> [success: bb147, unwind unreachable]
  using: _574@Mir(bb64[10]), _571@Mir(bb64[7]), _570@Mir(bb64[6])
bb65:
  _231 = _78
  using: _78@Mir(bb29[0])
  _230 = move _231 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _231@Mir(bb65[0])
  _233 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _563 = _233 as *const () (PtrToPtr)
  using: _233@Mir(bb65[2])
  _564 = _563 as usize (Transmute)
  using: _563@Mir(bb65[3])
  _565 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _566 = Sub(_565, const 1_usize)
  using: _565@Mir(bb65[5])
  _567 = BitAnd(_564, _566)
  using: _564@Mir(bb65[4]), _566@Mir(bb65[6])
  _568 = Eq(_567, const 0_usize)
  using: _567@Mir(bb65[7])
  assert(_568, "misaligned pointer dereference: address must be a multiple of {} but is {}", _565, _564) -> [success: bb146, unwind unreachable]
  using: _568@Mir(bb65[8]), _565@Mir(bb65[5]), _564@Mir(bb65[4])
bb66:
  _238 = const b"`\n\x00"
  using: 
  _237 = &raw const (*_238)
  using: _238@Mir(bb66[0])
  _236 = move _237 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _237@Mir(bb66[1])
  _235 = move _236 as *const i8 (PtrToPtr)
  using: _236@Mir(bb66[2])
  _240 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _557 = _240 as *const () (PtrToPtr)
  using: _240@Mir(bb66[4])
  _558 = _557 as usize (Transmute)
  using: _557@Mir(bb66[5])
  _559 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _560 = Sub(_559, const 1_usize)
  using: _559@Mir(bb66[7])
  _561 = BitAnd(_558, _560)
  using: _558@Mir(bb66[6]), _560@Mir(bb66[8])
  _562 = Eq(_561, const 0_usize)
  using: _561@Mir(bb66[9])
  assert(_562, "misaligned pointer dereference: address must be a multiple of {} but is {}", _559, _558) -> [success: bb145, unwind unreachable]
  using: _562@Mir(bb66[10]), _559@Mir(bb66[7]), _558@Mir(bb66[6])
bb67:
  _0 = const 1_i32
  using: 
  goto -> bb122
  using: 
bb68:
  _243 = (*_78)
  using: _78@Phi(bb68)
  _242 = move _243 as i32 (IntToInt)
  using: _243@Mir(bb68[0])
  _244 = const '\0' as i32 (IntToInt)
  using: 
  _241 = Ne(move _242, move _244)
  using: _242@Mir(bb68[1]), _244@Mir(bb68[2])
  switchInt(move _241) -> [0: bb80, otherwise: bb69]
  using: _241@Mir(bb68[3])
bb69:
  _246 = (*_78)
  using: _78@Phi(bb68)
  _245 = move _246 as i32 (IntToInt)
  using: _246@Mir(bb69[0])
  switchInt(_245) -> [104: bb71, 112: bb72, 118: bb73, otherwise: bb70]
  using: _245@Mir(bb69[1])
bb70:
  _254 = const b"Unrecognized flag `-\x00"
  using: 
  _253 = &raw const (*_254)
  using: _254@Mir(bb70[0])
  _252 = move _253 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _253@Mir(bb70[1])
  _251 = move _252 as *const i8 (PtrToPtr)
  using: _252@Mir(bb70[2])
  _256 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _551 = _256 as *const () (PtrToPtr)
  using: _256@Mir(bb70[4])
  _552 = _551 as usize (Transmute)
  using: _551@Mir(bb70[5])
  _553 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _554 = Sub(_553, const 1_usize)
  using: _553@Mir(bb70[7])
  _555 = BitAnd(_552, _554)
  using: _552@Mir(bb70[6]), _554@Mir(bb70[8])
  _556 = Eq(_555, const 0_usize)
  using: _555@Mir(bb70[9])
  assert(_556, "misaligned pointer dereference: address must be a multiple of {} but is {}", _553, _552) -> [success: bb144, unwind unreachable]
  using: _556@Mir(bb70[10]), _553@Mir(bb70[7]), _552@Mir(bb70[6])
bb71:
  _247 = const 1_i32
  using: 
  _72 = move _247
  using: _247@Mir(bb71[0])
  goto -> bb78
  using: 
bb72:
  _248 = const 1_i32
  using: 
  (_3.1: i32) = move _248
  using: _248@Mir(bb72[0])
  goto -> bb78
  using: 
bb73:
  _249 = CheckedAdd((_3.0: i32), const 1_i32)
  using: _3@Mir(bb0[11])
  assert(!move (_249.1: bool), "attempt to compute `{} + {}`, which would overflow", (_3.0: i32), const 1_i32) -> [success: bb74, unwind continue]
  using: _249@Mir(bb73[0]), _3@Mir(bb0[11])
bb74:
  (_3.0: i32) = move (_249.0: i32)
  using: _249@Mir(bb73[0])
  goto -> bb78
  using: 
bb75:
  _259 = _78
  using: _78@Phi(bb68)
  _258 = move _259 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _259@Mir(bb75[0])
  _261 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _545 = _261 as *const () (PtrToPtr)
  using: _261@Mir(bb75[2])
  _546 = _545 as usize (Transmute)
  using: _545@Mir(bb75[3])
  _547 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _548 = Sub(_547, const 1_usize)
  using: _547@Mir(bb75[5])
  _549 = BitAnd(_546, _548)
  using: _546@Mir(bb75[4]), _548@Mir(bb75[6])
  _550 = Eq(_549, const 0_usize)
  using: _549@Mir(bb75[7])
  assert(_550, "misaligned pointer dereference: address must be a multiple of {} but is {}", _547, _546) -> [success: bb143, unwind unreachable]
  using: _550@Mir(bb75[8]), _547@Mir(bb75[5]), _546@Mir(bb75[4])
bb76:
  _266 = const b"`\n\x00"
  using: 
  _265 = &raw const (*_266)
  using: _266@Mir(bb76[0])
  _264 = move _265 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _265@Mir(bb76[1])
  _263 = move _264 as *const i8 (PtrToPtr)
  using: _264@Mir(bb76[2])
  _268 = const {alloc143: *mut *mut src::libtree::_IO_FILE}
  using: 
  _539 = _268 as *const () (PtrToPtr)
  using: _268@Mir(bb76[4])
  _540 = _539 as usize (Transmute)
  using: _539@Mir(bb76[5])
  _541 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _542 = Sub(_541, const 1_usize)
  using: _541@Mir(bb76[7])
  _543 = BitAnd(_540, _542)
  using: _540@Mir(bb76[6]), _542@Mir(bb76[8])
  _544 = Eq(_543, const 0_usize)
  using: _543@Mir(bb76[9])
  assert(_544, "misaligned pointer dereference: address must be a multiple of {} but is {}", _541, _540) -> [success: bb142, unwind unreachable]
  using: _544@Mir(bb76[10]), _541@Mir(bb76[7]), _540@Mir(bb76[6])
bb77:
  _0 = const 1_i32
  using: 
  goto -> bb122
  using: 
bb78:
  _270 = _78
  using: _78@Phi(bb68)
  _269 = std::ptr::mut_ptr::<impl *mut i8>::offset(move _270, const 1_isize) -> [return: bb79, unwind continue]
  using: _270@Mir(bb78[0])
bb79:
  _78 = move _269
  using: _269@Mir(bb78[1])
  goto -> bb68
  using: 
bb80:
  _271 = CheckedAdd(_75, const 1_i32)
  using: _75@Phi(bb80)
  assert(!move (_271.1: bool), "attempt to compute `{} + {}`, which would overflow", _75, const 1_i32) -> [success: bb81, unwind continue]
  using: _271@Mir(bb80[0]), _75@Phi(bb80)
bb81:
  _75 = move (_271.0: i32)
  using: _271@Mir(bb80[0])
  goto -> bb17
  using: 
bb82:
  _273 = _2
  using: _2@Entry
  _272 = std::ptr::mut_ptr::<impl *mut *mut i8>::offset(move _273, const 1_isize) -> [return: bb83, unwind continue]
  using: _273@Mir(bb82[0])
bb83:
  _2 = move _272
  using: _272@Mir(bb82[1])
  _274 = CheckedSub(_27, const 1_i32)
  using: _27@Phi(bb17)
  assert(!move (_274.1: bool), "attempt to compute `{} - {}`, which would overflow", _27, const 1_i32) -> [success: bb84, unwind continue]
  using: _274@Mir(bb83[1]), _27@Phi(bb17)
bb84:
  _27 = move (_274.0: i32)
  using: _274@Mir(bb83[1])
  _275 = _72
  using: _72@Phi(bb17)
  switchInt(move _275) -> [0: bb85, otherwise: bb87]
  using: _275@Mir(bb84[1])
bb85:
  _276 = _73
  using: _73@Phi(bb17)
  switchInt(move _276) -> [0: bb86, otherwise: bb118]
  using: _276@Mir(bb85[0])
bb86:
  _278 = _27
  using: _27@Mir(bb84[0])
  _279 = const 0_i32
  using: 
  _277 = Eq(move _278, move _279)
  using: _278@Mir(bb86[0]), _279@Mir(bb86[1])
  switchInt(move _277) -> [0: bb118, otherwise: bb87]
  using: _277@Mir(bb86[2])
bb87:
  _284 = const b"Show the dynamic dependency tree of ELF files\nUsage: libtree [OPTION]... [--] FILE [FILES]...\n\n  -h, --help     Print help info\n      --version  Print version info\n\nFile names starting with \'-\', for example \'-.so\', can be specified as follows:\n  libtree -- -.so\n\nLocating libs options:\n  -p, --path       Show the path of libraries instead of the soname\n  -v               Show libraries skipped by default*\n  -vv              Show dependencies of libraries skipped by default*\n  -vvv             Show dependencies of already encountered libraries\n  --ldconf <path>  Config file for extra search paths [\x00"
  using: 
  _283 = &raw const (*_284)
  using: _284@Mir(bb87[0])
  _282 = move _283 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _283@Mir(bb87[1])
  _281 = move _282 as *const i8 (PtrToPtr)
  using: _282@Mir(bb87[2])
  _286 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _533 = _286 as *const () (PtrToPtr)
  using: _286@Mir(bb87[4])
  _534 = _533 as usize (Transmute)
  using: _533@Mir(bb87[5])
  _535 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _536 = Sub(_535, const 1_usize)
  using: _535@Mir(bb87[7])
  _537 = BitAnd(_534, _536)
  using: _534@Mir(bb87[6]), _536@Mir(bb87[8])
  _538 = Eq(_537, const 0_usize)
  using: _537@Mir(bb87[9])
  assert(_538, "misaligned pointer dereference: address must be a multiple of {} but is {}", _535, _534) -> [success: bb141, unwind unreachable]
  using: _538@Mir(bb87[10]), _535@Mir(bb87[7]), _534@Mir(bb87[6])
bb88:
  _289 = (_3.3: *mut i8)
  using: _3@Mir(bb0[11])
  _288 = move _289 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _289@Mir(bb88[0])
  _291 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _527 = _291 as *const () (PtrToPtr)
  using: _291@Mir(bb88[2])
  _528 = _527 as usize (Transmute)
  using: _527@Mir(bb88[3])
  _529 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _530 = Sub(_529, const 1_usize)
  using: _529@Mir(bb88[5])
  _531 = BitAnd(_528, _530)
  using: _528@Mir(bb88[4]), _530@Mir(bb88[6])
  _532 = Eq(_531, const 0_usize)
  using: _531@Mir(bb88[7])
  assert(_532, "misaligned pointer dereference: address must be a multiple of {} but is {}", _529, _528) -> [success: bb140, unwind unreachable]
  using: _532@Mir(bb88[8]), _529@Mir(bb88[5]), _528@Mir(bb88[4])
bb89:
  _296 = const b"]\n  --max-depth <n>  Limit library traversal to at most n levels of depth\n\n* For brevity, the following libraries are not shown by default:\n  \x00"
  using: 
  _295 = &raw const (*_296)
  using: _296@Mir(bb89[0])
  _294 = move _295 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _295@Mir(bb89[1])
  _293 = move _294 as *const i8 (PtrToPtr)
  using: _294@Mir(bb89[2])
  _298 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _521 = _298 as *const () (PtrToPtr)
  using: _298@Mir(bb89[4])
  _522 = _521 as usize (Transmute)
  using: _521@Mir(bb89[5])
  _523 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _524 = Sub(_523, const 1_usize)
  using: _523@Mir(bb89[7])
  _525 = BitAnd(_522, _524)
  using: _522@Mir(bb89[6]), _524@Mir(bb89[8])
  _526 = Eq(_525, const 0_usize)
  using: _525@Mir(bb89[9])
  assert(_526, "misaligned pointer dereference: address must be a multiple of {} but is {}", _523, _522) -> [success: bb139, unwind unreachable]
  using: _526@Mir(bb89[10]), _523@Mir(bb89[7]), _522@Mir(bb89[6])
bb90:
  _301 = std::mem::size_of::<[*const i8; 14]>() -> [return: bb91, unwind continue]
  using: 
bb91:
  _300 = move _301 as u64 (IntToInt)
  using: _301@Mir(bb90[0])
  _303 = std::mem::size_of::<*mut i8>() -> [return: bb92, unwind continue]
  using: 
bb92:
  _302 = move _303 as u64 (IntToInt)
  using: _303@Mir(bb91[1])
  _299 = core::num::<impl u64>::wrapping_div(move _300, move _302) -> [return: bb93, unwind continue]
  using: _300@Mir(bb91[0]), _302@Mir(bb92[0])
bb93:
  _305 = const 3_i32
  using: 
  _304 = move _305 as u64 (IntToInt)
  using: _305@Mir(bb93[0])
  _307 = const 0_i32
  using: 
  _306 = move _307 as u64 (IntToInt)
  using: _307@Mir(bb93[2])
  goto -> bb94
  using: 
bb94:
  _309 = _306
  using: _306@Phi(bb94)
  _310 = _299
  using: _299@Mir(bb92[1])
  _308 = Lt(move _309, move _310)
  using: _309@Mir(bb94[0]), _310@Mir(bb94[1])
  switchInt(move _308) -> [0: bb107, otherwise: bb95]
  using: _308@Mir(bb94[2])
bb95:
  _312 = _304
  using: _304@Phi(bb94)
  _315 = const {alloc13: *mut [*const i8; 14]}
  using: 
  _317 = _306
  using: _306@Phi(bb94)
  _316 = move _317 as usize (IntToInt)
  using: _317@Mir(bb95[2])
  _515 = _315 as *const () (PtrToPtr)
  using: _315@Mir(bb95[1])
  _516 = _515 as usize (Transmute)
  using: _515@Mir(bb95[4])
  _517 = AlignOf(*const i8)
  using: 
  _518 = Sub(_517, const 1_usize)
  using: _517@Mir(bb95[6])
  _519 = BitAnd(_516, _518)
  using: _516@Mir(bb95[5]), _518@Mir(bb95[7])
  _520 = Eq(_519, const 0_usize)
  using: _519@Mir(bb95[8])
  assert(_520, "misaligned pointer dereference: address must be a multiple of {} but is {}", _517, _516) -> [success: bb138, unwind unreachable]
  using: _520@Mir(bb95[9]), _517@Mir(bb95[6]), _516@Mir(bb95[5])
bb96:
  _509 = _315 as *const () (PtrToPtr)
  using: _315@Mir(bb95[1])
  _510 = _509 as usize (Transmute)
  using: _509@Mir(bb96[0])
  _511 = AlignOf(*const i8)
  using: 
  _512 = Sub(_511, const 1_usize)
  using: _511@Mir(bb96[2])
  _513 = BitAnd(_510, _512)
  using: _510@Mir(bb96[1]), _512@Mir(bb96[3])
  _514 = Eq(_513, const 0_usize)
  using: _513@Mir(bb96[4])
  assert(_514, "misaligned pointer dereference: address must be a multiple of {} but is {}", _511, _510) -> [success: bb137, unwind unreachable]
  using: _514@Mir(bb96[5]), _511@Mir(bb96[2]), _510@Mir(bb96[1])
bb97:
  _311 = core::num::<impl u64>::wrapping_add(move _312, move _313) -> [return: bb98, unwind continue]
  using: _312@Mir(bb95[0]), _313@Mir(bb137[1])
bb98:
  _304 = move _311
  using: _311@Mir(bb97[0])
  _321 = _304
  using: _304@Mir(bb98[0])
  _323 = const 60_i32
  using: 
  _322 = move _323 as u64 (IntToInt)
  using: _323@Mir(bb98[2])
  _320 = Gt(move _321, move _322)
  using: _321@Mir(bb98[1]), _322@Mir(bb98[3])
  switchInt(move _320) -> [0: bb100, otherwise: bb99]
  using: _320@Mir(bb98[4])
bb99:
  _324 = const 3_i32
  using: 
  _304 = move _324 as u64 (IntToInt)
  using: _324@Mir(bb99[0])
  _329 = const b"\n  \x00"
  using: 
  _328 = &raw const (*_329)
  using: _329@Mir(bb99[2])
  _327 = move _328 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _328@Mir(bb99[3])
  _326 = move _327 as *const i8 (PtrToPtr)
  using: _327@Mir(bb99[4])
  _331 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _503 = _331 as *const () (PtrToPtr)
  using: _331@Mir(bb99[6])
  _504 = _503 as usize (Transmute)
  using: _503@Mir(bb99[7])
  _505 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _506 = Sub(_505, const 1_usize)
  using: _505@Mir(bb99[9])
  _507 = BitAnd(_504, _506)
  using: _504@Mir(bb99[8]), _506@Mir(bb99[10])
  _508 = Eq(_507, const 0_usize)
  using: _507@Mir(bb99[11])
  assert(_508, "misaligned pointer dereference: address must be a multiple of {} but is {}", _505, _504) -> [success: bb136, unwind unreachable]
  using: _508@Mir(bb99[12]), _505@Mir(bb99[9]), _504@Mir(bb99[8])
bb100:
  _334 = const {alloc13: *mut [*const i8; 14]}
  using: 
  _336 = _306
  using: _306@Phi(bb94)
  _335 = move _336 as usize (IntToInt)
  using: _336@Mir(bb100[1])
  _497 = _334 as *const () (PtrToPtr)
  using: _334@Mir(bb100[0])
  _498 = _497 as usize (Transmute)
  using: _497@Mir(bb100[3])
  _499 = AlignOf(*const i8)
  using: 
  _500 = Sub(_499, const 1_usize)
  using: _499@Mir(bb100[5])
  _501 = BitAnd(_498, _500)
  using: _498@Mir(bb100[4]), _500@Mir(bb100[6])
  _502 = Eq(_501, const 0_usize)
  using: _501@Mir(bb100[7])
  assert(_502, "misaligned pointer dereference: address must be a multiple of {} but is {}", _499, _498) -> [success: bb135, unwind unreachable]
  using: _502@Mir(bb100[8]), _499@Mir(bb100[5]), _498@Mir(bb100[4])
bb101:
  _491 = _334 as *const () (PtrToPtr)
  using: _334@Mir(bb100[0])
  _492 = _491 as usize (Transmute)
  using: _491@Mir(bb101[0])
  _493 = AlignOf(*const i8)
  using: 
  _494 = Sub(_493, const 1_usize)
  using: _493@Mir(bb101[2])
  _495 = BitAnd(_492, _494)
  using: _492@Mir(bb101[1]), _494@Mir(bb101[3])
  _496 = Eq(_495, const 0_usize)
  using: _495@Mir(bb101[4])
  assert(_496, "misaligned pointer dereference: address must be a multiple of {} but is {}", _493, _492) -> [success: bb134, unwind unreachable]
  using: _496@Mir(bb101[5]), _493@Mir(bb101[2]), _492@Mir(bb101[1])
bb102:
  _343 = _306
  using: _306@Phi(bb94)
  _345 = const 1_i32
  using: 
  _344 = move _345 as u64 (IntToInt)
  using: _345@Mir(bb102[1])
  _342 = core::num::<impl u64>::wrapping_add(move _343, move _344) -> [return: bb103, unwind continue]
  using: _343@Mir(bb102[0]), _344@Mir(bb102[2])
bb103:
  _346 = _299
  using: _299@Mir(bb92[1])
  _341 = Ne(move _342, move _346)
  using: _342@Mir(bb102[3]), _346@Mir(bb103[0])
  switchInt(move _341) -> [0: bb105, otherwise: bb104]
  using: _341@Mir(bb103[1])
bb104:
  _351 = const b", \x00"
  using: 
  _350 = &raw const (*_351)
  using: _351@Mir(bb104[0])
  _349 = move _350 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _350@Mir(bb104[1])
  _348 = move _349 as *const i8 (PtrToPtr)
  using: _349@Mir(bb104[2])
  _353 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _479 = _353 as *const () (PtrToPtr)
  using: _353@Mir(bb104[4])
  _480 = _479 as usize (Transmute)
  using: _479@Mir(bb104[5])
  _481 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _482 = Sub(_481, const 1_usize)
  using: _481@Mir(bb104[7])
  _483 = BitAnd(_480, _482)
  using: _480@Mir(bb104[6]), _482@Mir(bb104[8])
  _484 = Eq(_483, const 0_usize)
  using: _483@Mir(bb104[9])
  assert(_484, "misaligned pointer dereference: address must be a multiple of {} but is {}", _481, _480) -> [success: bb132, unwind unreachable]
  using: _484@Mir(bb104[10]), _481@Mir(bb104[7]), _480@Mir(bb104[6])
bb105:
  _355 = _306
  using: _306@Phi(bb94)
  _354 = core::num::<impl u64>::wrapping_add(move _355, const 1_u64) -> [return: bb106, unwind continue]
  using: _355@Mir(bb105[0])
bb106:
  _306 = move _354
  using: _354@Mir(bb105[1])
  goto -> bb94
  using: 
bb107:
  _360 = const b".\n\nThe following rpath/runpath substitutions are used:\n\x00"
  using: 
  _359 = &raw const (*_360)
  using: _360@Mir(bb107[0])
  _358 = move _359 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _359@Mir(bb107[1])
  _357 = move _358 as *const i8 (PtrToPtr)
  using: _358@Mir(bb107[2])
  _362 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _473 = _362 as *const () (PtrToPtr)
  using: _362@Mir(bb107[4])
  _474 = _473 as usize (Transmute)
  using: _473@Mir(bb107[5])
  _475 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _476 = Sub(_475, const 1_usize)
  using: _475@Mir(bb107[7])
  _477 = BitAnd(_474, _476)
  using: _474@Mir(bb107[6]), _476@Mir(bb107[8])
  _478 = Eq(_477, const 0_usize)
  using: _477@Mir(bb107[9])
  assert(_478, "misaligned pointer dereference: address must be a multiple of {} but is {}", _475, _474) -> [success: bb131, unwind unreachable]
  using: _478@Mir(bb107[10]), _475@Mir(bb107[7]), _474@Mir(bb107[6])
bb108:
  _367 = const b"  PLATFORM       \x00"
  using: 
  _366 = &raw const (*_367)
  using: _367@Mir(bb108[0])
  _365 = move _366 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _366@Mir(bb108[1])
  _364 = move _365 as *const i8 (PtrToPtr)
  using: _365@Mir(bb108[2])
  _369 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _467 = _369 as *const () (PtrToPtr)
  using: _369@Mir(bb108[4])
  _468 = _467 as usize (Transmute)
  using: _467@Mir(bb108[5])
  _469 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _470 = Sub(_469, const 1_usize)
  using: _469@Mir(bb108[7])
  _471 = BitAnd(_468, _470)
  using: _468@Mir(bb108[6]), _470@Mir(bb108[8])
  _472 = Eq(_471, const 0_usize)
  using: _471@Mir(bb108[9])
  assert(_472, "misaligned pointer dereference: address must be a multiple of {} but is {}", _469, _468) -> [success: bb130, unwind unreachable]
  using: _472@Mir(bb108[10]), _469@Mir(bb108[7]), _468@Mir(bb108[6])
bb109:
  _372 = (_3.7: *mut i8)
  using: _3@Mir(bb0[11])
  _371 = move _372 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _372@Mir(bb109[0])
  _374 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _461 = _374 as *const () (PtrToPtr)
  using: _374@Mir(bb109[2])
  _462 = _461 as usize (Transmute)
  using: _461@Mir(bb109[3])
  _463 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _464 = Sub(_463, const 1_usize)
  using: _463@Mir(bb109[5])
  _465 = BitAnd(_462, _464)
  using: _462@Mir(bb109[4]), _464@Mir(bb109[6])
  _466 = Eq(_465, const 0_usize)
  using: _465@Mir(bb109[7])
  assert(_466, "misaligned pointer dereference: address must be a multiple of {} but is {}", _463, _462) -> [success: bb129, unwind unreachable]
  using: _466@Mir(bb109[8]), _463@Mir(bb109[5]), _462@Mir(bb109[4])
bb110:
  _379 = const b"\n  LIB            \x00"
  using: 
  _378 = &raw const (*_379)
  using: _379@Mir(bb110[0])
  _377 = move _378 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _378@Mir(bb110[1])
  _376 = move _377 as *const i8 (PtrToPtr)
  using: _377@Mir(bb110[2])
  _381 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _455 = _381 as *const () (PtrToPtr)
  using: _381@Mir(bb110[4])
  _456 = _455 as usize (Transmute)
  using: _455@Mir(bb110[5])
  _457 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _458 = Sub(_457, const 1_usize)
  using: _457@Mir(bb110[7])
  _459 = BitAnd(_456, _458)
  using: _456@Mir(bb110[6]), _458@Mir(bb110[8])
  _460 = Eq(_459, const 0_usize)
  using: _459@Mir(bb110[9])
  assert(_460, "misaligned pointer dereference: address must be a multiple of {} but is {}", _457, _456) -> [success: bb128, unwind unreachable]
  using: _460@Mir(bb110[10]), _457@Mir(bb110[7]), _456@Mir(bb110[6])
bb111:
  _384 = (_3.8: *mut i8)
  using: _3@Mir(bb0[11])
  _383 = move _384 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _384@Mir(bb111[0])
  _386 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _449 = _386 as *const () (PtrToPtr)
  using: _386@Mir(bb111[2])
  _450 = _449 as usize (Transmute)
  using: _449@Mir(bb111[3])
  _451 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _452 = Sub(_451, const 1_usize)
  using: _451@Mir(bb111[5])
  _453 = BitAnd(_450, _452)
  using: _450@Mir(bb111[4]), _452@Mir(bb111[6])
  _454 = Eq(_453, const 0_usize)
  using: _453@Mir(bb111[7])
  assert(_454, "misaligned pointer dereference: address must be a multiple of {} but is {}", _451, _450) -> [success: bb127, unwind unreachable]
  using: _454@Mir(bb111[8]), _451@Mir(bb111[5]), _450@Mir(bb111[4])
bb112:
  _391 = const b"\n  OSNAME         \x00"
  using: 
  _390 = &raw const (*_391)
  using: _391@Mir(bb112[0])
  _389 = move _390 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _390@Mir(bb112[1])
  _388 = move _389 as *const i8 (PtrToPtr)
  using: _389@Mir(bb112[2])
  _393 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _443 = _393 as *const () (PtrToPtr)
  using: _393@Mir(bb112[4])
  _444 = _443 as usize (Transmute)
  using: _443@Mir(bb112[5])
  _445 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _446 = Sub(_445, const 1_usize)
  using: _445@Mir(bb112[7])
  _447 = BitAnd(_444, _446)
  using: _444@Mir(bb112[6]), _446@Mir(bb112[8])
  _448 = Eq(_447, const 0_usize)
  using: _447@Mir(bb112[9])
  assert(_448, "misaligned pointer dereference: address must be a multiple of {} but is {}", _445, _444) -> [success: bb126, unwind unreachable]
  using: _448@Mir(bb112[10]), _445@Mir(bb112[7]), _444@Mir(bb112[6])
bb113:
  _396 = (_3.9: *mut i8)
  using: _3@Mir(bb0[11])
  _395 = move _396 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _396@Mir(bb113[0])
  _398 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _437 = _398 as *const () (PtrToPtr)
  using: _398@Mir(bb113[2])
  _438 = _437 as usize (Transmute)
  using: _437@Mir(bb113[3])
  _439 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _440 = Sub(_439, const 1_usize)
  using: _439@Mir(bb113[5])
  _441 = BitAnd(_438, _440)
  using: _438@Mir(bb113[4]), _440@Mir(bb113[6])
  _442 = Eq(_441, const 0_usize)
  using: _441@Mir(bb113[7])
  assert(_442, "misaligned pointer dereference: address must be a multiple of {} but is {}", _439, _438) -> [success: bb125, unwind unreachable]
  using: _442@Mir(bb113[8]), _439@Mir(bb113[5]), _438@Mir(bb113[4])
bb114:
  _403 = const b"\n  OSREL          \x00"
  using: 
  _402 = &raw const (*_403)
  using: _403@Mir(bb114[0])
  _401 = move _402 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _402@Mir(bb114[1])
  _400 = move _401 as *const i8 (PtrToPtr)
  using: _401@Mir(bb114[2])
  _405 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _431 = _405 as *const () (PtrToPtr)
  using: _405@Mir(bb114[4])
  _432 = _431 as usize (Transmute)
  using: _431@Mir(bb114[5])
  _433 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _434 = Sub(_433, const 1_usize)
  using: _433@Mir(bb114[7])
  _435 = BitAnd(_432, _434)
  using: _432@Mir(bb114[6]), _434@Mir(bb114[8])
  _436 = Eq(_435, const 0_usize)
  using: _435@Mir(bb114[9])
  assert(_436, "misaligned pointer dereference: address must be a multiple of {} but is {}", _433, _432) -> [success: bb124, unwind unreachable]
  using: _436@Mir(bb114[10]), _433@Mir(bb114[7]), _432@Mir(bb114[6])
bb115:
  _408 = (_3.10: *mut i8)
  using: _3@Mir(bb0[11])
  _407 = move _408 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _408@Mir(bb115[0])
  _410 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _425 = _410 as *const () (PtrToPtr)
  using: _410@Mir(bb115[2])
  _426 = _425 as usize (Transmute)
  using: _425@Mir(bb115[3])
  _427 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _428 = Sub(_427, const 1_usize)
  using: _427@Mir(bb115[5])
  _429 = BitAnd(_426, _428)
  using: _426@Mir(bb115[4]), _428@Mir(bb115[6])
  _430 = Eq(_429, const 0_usize)
  using: _429@Mir(bb115[7])
  assert(_430, "misaligned pointer dereference: address must be a multiple of {} but is {}", _427, _426) -> [success: bb123, unwind unreachable]
  using: _430@Mir(bb115[8]), _427@Mir(bb115[5]), _426@Mir(bb115[4])
bb116:
  _412 = const '\n' as i32 (IntToInt)
  using: 
  _411 = src::libtree::putchar(move _412) -> [return: bb117, unwind continue]
  using: _412@Mir(bb116[0])
bb117:
  _414 = _72
  using: _72@Phi(bb17)
  _413 = Eq(move _414, const 0_i32)
  using: _414@Mir(bb117[0])
  _0 = move _413 as i32 (IntToInt)
  using: _413@Mir(bb117[1])
  goto -> bb122
  using: 
bb118:
  _415 = _73
  using: _73@Phi(bb17)
  switchInt(move _415) -> [0: bb120, otherwise: bb119]
  using: _415@Mir(bb118[0])
bb119:
  _420 = const b"3.1.1\x00"
  using: 
  _419 = &raw const (*_420)
  using: _420@Mir(bb119[0])
  _418 = move _419 as *const u8 (PointerCoercion(ArrayToPointer))
  using: _419@Mir(bb119[1])
  _417 = move _418 as *const i8 (PtrToPtr)
  using: _418@Mir(bb119[2])
  _416 = src::libtree::puts(move _417) -> [return: bb121, unwind continue]
  using: _417@Mir(bb119[3])
bb120:
  _421 = _27
  using: _27@Mir(bb84[0])
  _422 = _2
  using: _2@Mir(bb83[0])
  _424 = &mut _3
  using: _3@Mir(bb0[11])
  _423 = &raw mut (*_424)
  using: _424@Mir(bb120[2])
  _0 = src::libtree::print_tree(move _421, move _422, move _423) -> [return: bb122, unwind continue]
  using: _421@Mir(bb120[0]), _422@Mir(bb120[1]), _423@Mir(bb120[3])
bb121:
  _0 = const 0_i32
  using: 
  goto -> bb122
  using: 
bb122:
  return
  using: _0@Phi(bb122)
bb123:
  _409 = (*_410)
  using: _410@Mir(bb115[2])
  _406 = src::libtree::fputs(move _407, move _409) -> [return: bb116, unwind continue]
  using: _407@Mir(bb115[1]), _409@Mir(bb123[0])
bb124:
  _404 = (*_405)
  using: _405@Mir(bb114[4])
  _399 = src::libtree::fputs(move _400, move _404) -> [return: bb115, unwind continue]
  using: _400@Mir(bb114[3]), _404@Mir(bb124[0])
bb125:
  _397 = (*_398)
  using: _398@Mir(bb113[2])
  _394 = src::libtree::fputs(move _395, move _397) -> [return: bb114, unwind continue]
  using: _395@Mir(bb113[1]), _397@Mir(bb125[0])
bb126:
  _392 = (*_393)
  using: _393@Mir(bb112[4])
  _387 = src::libtree::fputs(move _388, move _392) -> [return: bb113, unwind continue]
  using: _388@Mir(bb112[3]), _392@Mir(bb126[0])
bb127:
  _385 = (*_386)
  using: _386@Mir(bb111[2])
  _382 = src::libtree::fputs(move _383, move _385) -> [return: bb112, unwind continue]
  using: _383@Mir(bb111[1]), _385@Mir(bb127[0])
bb128:
  _380 = (*_381)
  using: _381@Mir(bb110[4])
  _375 = src::libtree::fputs(move _376, move _380) -> [return: bb111, unwind continue]
  using: _376@Mir(bb110[3]), _380@Mir(bb128[0])
bb129:
  _373 = (*_374)
  using: _374@Mir(bb109[2])
  _370 = src::libtree::fputs(move _371, move _373) -> [return: bb110, unwind continue]
  using: _371@Mir(bb109[1]), _373@Mir(bb129[0])
bb130:
  _368 = (*_369)
  using: _369@Mir(bb108[4])
  _363 = src::libtree::fputs(move _364, move _368) -> [return: bb109, unwind continue]
  using: _364@Mir(bb108[3]), _368@Mir(bb130[0])
bb131:
  _361 = (*_362)
  using: _362@Mir(bb107[4])
  _356 = src::libtree::fputs(move _357, move _361) -> [return: bb108, unwind continue]
  using: _357@Mir(bb107[3]), _361@Mir(bb131[0])
bb132:
  _352 = (*_353)
  using: _353@Mir(bb104[4])
  _347 = src::libtree::fputs(move _348, move _352) -> [return: bb105, unwind continue]
  using: _348@Mir(bb104[3]), _352@Mir(bb132[0])
bb133:
  _339 = (*_340)
  using: _340@Mir(bb134[1])
  _332 = src::libtree::fputs(move _333, move _339) -> [return: bb102, unwind continue]
  using: _333@Mir(bb134[0]), _339@Mir(bb133[0])
bb134:
  _333 = (*_334)[_335]
  using: _334@Mir(bb100[0]), _335@Mir(bb100[2])
  _340 = const {alloc1: *mut *mut src::libtree::_IO_FILE}
  using: 
  _485 = _340 as *const () (PtrToPtr)
  using: _340@Mir(bb134[1])
  _486 = _485 as usize (Transmute)
  using: _485@Mir(bb134[2])
  _487 = AlignOf(*mut src::libtree::_IO_FILE)
  using: 
  _488 = Sub(_487, const 1_usize)
  using: _487@Mir(bb134[4])
  _489 = BitAnd(_486, _488)
  using: _486@Mir(bb134[3]), _488@Mir(bb134[5])
  _490 = Eq(_489, const 0_usize)
  using: _489@Mir(bb134[6])
  assert(_490, "misaligned pointer dereference: address must be a multiple of {} but is {}", _487, _486) -> [success: bb133, unwind unreachable]
  using: _490@Mir(bb134[7]), _487@Mir(bb134[4]), _486@Mir(bb134[3])
bb135:
  _337 = const 14_usize
  using: 
  _338 = Lt(_335, _337)
  using: _335@Mir(bb100[2]), _337@Mir(bb135[0])
  assert(move _338, "index out of bounds: the length is {} but the index is {}", move _337, _335) -> [success: bb101, unwind continue]
  using: _338@Mir(bb135[1]), _337@Mir(bb135[0]), _335@Mir(bb100[2])
bb136:
  _330 = (*_331)
  using: _331@Mir(bb99[6])
  _325 = src::libtree::fputs(move _326, move _330) -> [return: bb100, unwind continue]
  using: _326@Mir(bb99[5]), _330@Mir(bb136[0])
bb137:
  _314 = (*_315)[_316]
  using: _315@Mir(bb95[1]), _316@Mir(bb95[3])
  _313 = src::libtree::strlen(move _314) -> [return: bb97, unwind continue]
  using: _314@Mir(bb137[0])
bb138:
  _318 = const 14_usize
  using: 
  _319 = Lt(_316, _318)
  using: _316@Mir(bb95[3]), _318@Mir(bb138[0])
  assert(move _319, "index out of bounds: the length is {} but the index is {}", move _318, _316) -> [success: bb96, unwind continue]
  using: _319@Mir(bb138[1]), _318@Mir(bb138[0]), _316@Mir(bb95[3])
bb139:
  _297 = (*_298)
  using: _298@Mir(bb89[4])
  _292 = src::libtree::fputs(move _293, move _297) -> [return: bb90, unwind continue]
  using: _293@Mir(bb89[3]), _297@Mir(bb139[0])
bb140:
  _290 = (*_291)
  using: _291@Mir(bb88[2])
  _287 = src::libtree::fputs(move _288, move _290) -> [return: bb89, unwind continue]
  using: _288@Mir(bb88[1]), _290@Mir(bb140[0])
bb141:
  _285 = (*_286)
  using: _286@Mir(bb87[4])
  _280 = src::libtree::fputs(move _281, move _285) -> [return: bb88, unwind continue]
  using: _281@Mir(bb87[3]), _285@Mir(bb141[0])
bb142:
  _267 = (*_268)
  using: _268@Mir(bb76[4])
  _262 = src::libtree::fputs(move _263, move _267) -> [return: bb77, unwind continue]
  using: _263@Mir(bb76[3]), _267@Mir(bb142[0])
bb143:
  _260 = (*_261)
  using: _261@Mir(bb75[2])
  _257 = src::libtree::fputs(move _258, move _260) -> [return: bb76, unwind continue]
  using: _258@Mir(bb75[1]), _260@Mir(bb143[0])
bb144:
  _255 = (*_256)
  using: _256@Mir(bb70[4])
  _250 = src::libtree::fputs(move _251, move _255) -> [return: bb75, unwind continue]
  using: _251@Mir(bb70[3]), _255@Mir(bb144[0])
bb145:
  _239 = (*_240)
  using: _240@Mir(bb66[4])
  _234 = src::libtree::fputs(move _235, move _239) -> [return: bb67, unwind continue]
  using: _235@Mir(bb66[3]), _239@Mir(bb145[0])
bb146:
  _232 = (*_233)
  using: _233@Mir(bb65[2])
  _229 = src::libtree::fputs(move _230, move _232) -> [return: bb66, unwind continue]
  using: _230@Mir(bb65[1]), _232@Mir(bb146[0])
bb147:
  _227 = (*_228)
  using: _228@Mir(bb64[4])
  _222 = src::libtree::fputs(move _223, move _227) -> [return: bb65, unwind continue]
  using: _223@Mir(bb64[3]), _227@Mir(bb147[0])
bb148:
  _209 = (*_210)
  using: _210@Mir(bb60[4])
  _208 = move _209 as *const i8 (PointerCoercion(MutToConstPointer))
  using: _209@Mir(bb148[0])
  _215 = &mut _205
  using: _205@Mir(bb59[0])
  _214 = &raw mut (*_215)
  using: _215@Mir(bb148[2])
  _216 = const 10_i32
  using: 
  _207 = src::libtree::strtoul(move _208, move _214, move _216) -> [return: bb62, unwind continue]
  using: _208@Mir(bb148[1]), _214@Mir(bb148[3]), _216@Mir(bb148[4])
bb149:
  _203 = (*_204)
  using: _204@Mir(bb57[4])
  _198 = src::libtree::fputs(move _199, move _203) -> [return: bb58, unwind continue]
  using: _199@Mir(bb57[3]), _203@Mir(bb149[0])
bb150:
  _179 = (*_180)
  using: _180@Mir(bb51[4])
  (_3.3: *mut i8) = move _179
  using: _179@Mir(bb150[0])
  goto -> bb80
  using: 
bb151:
  _176 = (*_177)
  using: _177@Mir(bb48[4])
  _171 = src::libtree::fputs(move _172, move _176) -> [return: bb49, unwind continue]
  using: _172@Mir(bb48[3]), _176@Mir(bb151[0])
bb152:
  _99 = &mut (*_100)
  using: _100@Mir(bb24[3])
  _103 = _78
  using: _78@Mir(bb153[0])
  (*_99) = move _103
  using: _99@Mir(bb152[0]), _103@Mir(bb152[1])
  goto -> bb80
  using: 
bb153:
  _78 = (*_79)
  using: _79@Mir(bb18[3])
  _83 = _74
  using: _74@Phi(bb17)
  switchInt(move _83) -> [0: bb20, otherwise: bb23]
  using: _83@Mir(bb153[1])

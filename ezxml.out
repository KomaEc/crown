warning: unused `#[macro_use]` import
 --> refactorer/pointer_analysis/src/lib.rs:7:1
  |
7 | #[macro_use]
  | ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Constraint`
 --> refactorer/pointer_analysis/src/andersen/constraint_solving.rs:4:5
  |
4 |     Constraint, ConstraintIndex, ConstraintKind, ConstraintSet, PointerAnalysisNode,
  |     ^^^^^^^^^^

warning: unused doc comment
  --> refactorer/pointer_analysis/src/andersen/constraint_solving.rs:32:9
   |
32 |           /// FIXME: initialise all ptr!
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 | /         for p in ptr_ctxt.nodes.clone().indices() {
34 | |             let deref_p = ptr_ctxt.generate_temporary(
35 | |                 // (*ptr_ctxt.all_function_def_ids.iter().next().unwrap())
36 | |                 ptr_ctxt.bodies[0]
...  |
43 | |             all_constraints.push(p.get_address_of(deref_p));
44 | |         }
   | |_________- rustdoc does not generate documentation for expressions
   |
   = note: `#[warn(unused_doc_comments)]` on by default
   = help: use `//` for a plain comment

warning: `pointer_analysis` (lib) generated 3 warnings
warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes
 --> refactorer/transform/src/lib.rs:3:12
  |
3 | #![feature(let_chains)]
  |            ^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information

warning: unused import: `crate::unused_ptr_decl::UnusedPointerDecl`
 --> refactorer/transform/src/unused_ptr_decl/diagnostics.rs:1:5
  |
1 | use crate::unused_ptr_decl::UnusedPointerDecl;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `rustc_errors::Applicability`
 --> refactorer/transform/src/unused_ptr_decl/diagnostics.rs:2:5
  |
2 | use rustc_errors::Applicability;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `VarDebugInfo`
 --> refactorer/transform/src/unused_ptr_decl/diagnostics.rs:3:25
  |
3 | use rustc_middle::mir::{VarDebugInfo, VarDebugInfoContents};
  |                         ^^^^^^^^^^^^

warning: unused import: `log`
 --> refactorer/transform/src/unused_ptr_decl/mod.rs:3:5
  |
3 | use log;
  |     ^^^

warning: unused variable: `maybe_borrowed`
   --> refactorer/transform/src/unused_ptr_decl/mod.rs:133:29
    |
133 |                         let maybe_borrowed = self.maybe_borrowed.get();
    |                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_maybe_borrowed`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `transform` (lib) generated 6 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/curr workspace/input/test_alias/ezxml.rs`
error[E0432]: unresolved import `libc`
 --> workspace/input/test_alias/ezxml.rs:1:5
  |
1 | use :: libc;
  |     ^^^^^^^ no `libc` in the root

error[E0658]: C-variadic functions are unstable
   --> workspace/input/test_alias/ezxml.rs:507:1
    |
507 | / pub unsafe extern "C" fn ezxml_get(mut xml: ezxml_t, mut args: ...) -> ezxml_t {
508 | |     let mut ap: ::std::ffi::VaListImpl;
509 | |     let mut r: ezxml_t = 0 as *mut ezxml;
510 | |     ap = args.clone();
511 | |     r = ezxml_vget(xml, ap.as_va_list());
512 | |     return r;
513 | | }
    | |_^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0658]: C-variadic functions are unstable
   --> workspace/input/test_alias/ezxml.rs:540:1
    |
540 | / pub unsafe extern "C" fn ezxml_err(
541 | |     mut root: ezxml_root_t,
542 | |     mut s: *mut i8,
543 | |     mut err: *const i8,
...   |
571 | |     return &mut (*root).xml;
572 | | }
    | |_^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

warning: type `__builtin_va_list` should have an upper camel case name
  --> workspace/input/test_alias/ezxml.rs:71:10
   |
71 | pub type __builtin_va_list = [__va_list_tag; 1];
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `BuiltinVaList`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `_IO_lock_t` should have an upper camel case name
   --> workspace/input/test_alias/ezxml.rs:119:10
    |
119 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `va_list` should have an upper camel case name
   --> workspace/input/test_alias/ezxml.rs:128:10
    |
128 | pub type va_list = __builtin_va_list;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `VaList`

warning: type `ezxml_t` should have an upper camel case name
   --> workspace/input/test_alias/ezxml.rs:389:10
    |
389 | pub type ezxml_t = *mut ezxml;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `EzxmlT`

warning: type `ezxml_root_t` should have an upper camel case name
   --> workspace/input/test_alias/ezxml.rs:390:10
    |
390 | pub type ezxml_root_t = *mut ezxml_root;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EzxmlRootT`

warning: unnecessary parentheses around assigned value
   --> workspace/input/test_alias/ezxml.rs:976:27
    |
976 |                     ent = (if *c as i32 == '%' as i32 {
    |                           ^
...
980 |                     });
    |                      ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
976 ~                     ent = if *c as i32 == '%' as i32 {
977 |                         pe
978 |                     } else {
979 |                         (*root).ent
980 ~                     };
    |

error[E0658]: use of unstable library feature 'c_variadic': the `c_variadic` feature has not been properly tested on all supported platforms
   --> workspace/input/test_alias/ezxml.rs:492:36
    |
492 |         let mut name: *mut i8 = ap.arg::<*mut i8>();
    |                                    ^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0658]: use of unstable library feature 'c_variadic': the `c_variadic` feature has not been properly tested on all supported platforms
   --> workspace/input/test_alias/ezxml.rs:495:22
    |
495 |             idx = ap.arg::<i32>();
    |                      ^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0658]: use of unstable library feature 'c_variadic': the `c_variadic` feature has not been properly tested on all supported platforms
   --> workspace/input/test_alias/ezxml.rs:501:48
    |
501 |             ezxml_vget(ezxml_idx(xml, idx), ap.as_va_list())
    |                                                ^^^^^^^^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0658]: use of unstable library feature 'c_variadic': the `c_variadic` feature has not been properly tested on all supported platforms
   --> workspace/input/test_alias/ezxml.rs:511:28
    |
511 |     r = ezxml_vget(xml, ap.as_va_list());
    |                            ^^^^^^^^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0658]: use of unstable library feature 'c_variadic': the `c_variadic` feature has not been properly tested on all supported platforms
   --> workspace/input/test_alias/ezxml.rs:569:12
    |
569 |         ap.as_va_list(),
    |            ^^^^^^^^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information
    = help: add `#![feature(c_variadic)]` to the crate attributes to enable

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
   --> workspace/input/test_alias/ezxml.rs:667:34
    |
667 |                     if c - 1 > e.wrapping_offset_from(s) as i64 {
    |                                  ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
    |
    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
   --> workspace/input/test_alias/ezxml.rs:668:31
    |
668 |                         d = s.wrapping_offset_from(r) as i64;
    |                               ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
    |
    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
    --> workspace/input/test_alias/ezxml.rs:1202:54
     |
1202 |                     ezxml_proc_inst(root, c, fresh29.wrapping_offset_from(c) as u64);
     |                                                      ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
     |
     = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
     = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
    --> workspace/input/test_alias/ezxml.rs:1542:28
     |
1542 |                         (s.wrapping_offset_from(d) as i64 - 10i64) as u64,
     |                            ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
     |
     = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
     = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
    --> workspace/input/test_alias/ezxml.rs:1579:58
     |
1579 |                     (ezxml_internal_dtd(root, d, fresh44.wrapping_offset_from(d) as u64)) == 0
     |                                                          ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
     |
     = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
     = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
    --> workspace/input/test_alias/ezxml.rs:1602:28
     |
1602 |                         (s.wrapping_offset_from(d) as i64 - 2i64) as u64,
     |                            ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
     |
     = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
     = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

error[E0599]: no method named `wrapping_offset_from` found for raw pointer `*mut i8` in the current scope
    --> workspace/input/test_alias/ezxml.rs:1621:47
     |
1621 |                 ezxml_char_content(root, d, s.wrapping_offset_from(d) as u64, '&' as i8);
     |                                               ^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `wrapping_offset`
     |
     = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref
     = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior

[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] ignoring constant pointer: const {alloc1: *mut [*mut i8; 1]}
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] ignoring constant pointer: const {alloc1: *mut [*mut i8; 1]}
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model linked C functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] ignoring constant pointer: const b"unexpected closing tag </%s>\x00"
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model linked C functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model linked C functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] UNIMPLEMENTED: model library functions
[2022-01-02T16:20:36Z ERROR pointer_analysis::constraint_generation] ignoring constant pointer: const b"\x00"
error: Use of pointer [`root`] invalidates another pointer [`xml`]
   --> workspace/input/test_alias/ezxml.rs:446:9
    |
443 | pub extern "C" fn ezxml_attr(mut xml: ezxml_t, mut attr: *const i8) -> *const i8 {
    |                              ------- Second pointer defined here
...
446 |     let mut root: ezxml_root_t = xml as ezxml_root_t;
    |         ^^^^^^^^                 ------------------- The assignment statement that causes the invalidation
    |         |
    |         First pointer defined here

error: Use of pointer [`root`] invalidates another pointer [`xml`]
   --> workspace/input/test_alias/ezxml.rs:446:9
    |
443 | pub extern "C" fn ezxml_attr(mut xml: ezxml_t, mut attr: *const i8) -> *const i8 {
    |                              ------- Second pointer defined here
...
446 |     let mut root: ezxml_root_t = xml as ezxml_root_t;
    |         ^^^^^^^^ First pointer defined here
...
460 |             root = (*root).xml.parent as ezxml_root_t
    |             ----------------------------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`cur`] invalidates another pointer [`dest`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                                  -------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`prev`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`prev`] invalidates another pointer [`dest`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                                  -------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`head`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2232:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
...
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`head`] invalidates another pointer [`dest`]
    --> workspace/input/test_alias/ezxml.rs:2232:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                                  -------- Second pointer defined here
...
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`head`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2232:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
...
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2239 |         head = (*dest).child;
     |         -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`head`] invalidates another pointer [`dest`]
    --> workspace/input/test_alias/ezxml.rs:2232:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                                  -------- Second pointer defined here
...
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2239 |         head = (*dest).child;
     |         -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2242 |                 cur = head;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2242 |                 cur = head;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2244 |                     cur = (*cur).ordered
     |                     -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2244 |                     cur = (*cur).ordered
     |                     -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2252 |             cur = head;
     |             ---------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2252 |             cur = head;
     |             ---------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2253 |             prev = 0 as ezxml_t;
     |             ------------------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`cur`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ------- Second pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2253 |             prev = 0 as ezxml_t;
     |             ------------------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2253 |             prev = 0 as ezxml_t;
     |             ------------------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2255 |                 prev = cur;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`cur`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ------- Second pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2255 |                 prev = cur;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2255 |                 prev = cur;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2256 |                 cur = (*cur).sibling
     |                 -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`prev`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2256 |                 cur = (*cur).sibling
     |                 -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`head`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
2232 |     let mut head: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2256 |                 cur = (*cur).sibling
     |                 -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2260 |                     cur = (*cur).next
     |                     ----------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2269 |                 cur = head;
     |                 ---------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2270 |                 prev = 0 as ezxml_t;
     |                 ------------------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`cur`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ------- Second pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2270 |                 prev = 0 as ezxml_t;
     |                 ------------------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2272 |                     prev = cur;
     |                     ---------- The assignment statement that causes the invalidation

error: Use of pointer [`prev`] invalidates another pointer [`cur`]
    --> workspace/input/test_alias/ezxml.rs:2231:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ------- Second pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^^ First pointer defined here
...
2272 |                     prev = cur;
     |                     ---------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2229 | pub extern "C" fn ezxml_insert(mut xml: ezxml_t, mut dest: ezxml_t, mut off: u64) -> ezxml_t {
     |                                ------- Second pointer defined here
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2273 |                     cur = (*cur).sibling
     |                     -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`prev`]
    --> workspace/input/test_alias/ezxml.rs:2230:9
     |
2230 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
2231 |     let mut prev: ezxml_t = 0 as *mut ezxml;
     |         -------- Second pointer defined here
...
2273 |                     cur = (*cur).sibling
     |                     -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^            --------------- The assignment statement that causes the invalidation
     |         |
     |         First pointer defined here

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2446 |             cur = (*(*xml).parent).child;
     |             ---------------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2451 |                     cur = (*cur).ordered
     |                     -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2454 |                 cur = (*(*xml).parent).child;
     |                 ---------------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2457 |                         cur = (*cur).sibling
     |                         -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2466 |                         cur = (*cur).sibling
     |                         -------------------- The assignment statement that causes the invalidation

error: Use of pointer [`cur`] invalidates another pointer [`xml`]
    --> workspace/input/test_alias/ezxml.rs:2437:9
     |
2436 | pub extern "C" fn ezxml_cut(mut xml: ezxml_t) -> ezxml_t {
     |                             ------- Second pointer defined here
2437 |     let mut cur: ezxml_t = 0 as *mut ezxml;
     |         ^^^^^^^ First pointer defined here
...
2470 |                     cur = (*cur).next
     |                     ----------------- The assignment statement that causes the invalidation

error: aborting due to 55 previous errors; 6 warnings emitted

Some errors have detailed explanations: E0432, E0599, E0658.
For more information about an error, try `rustc --explain E0432`.

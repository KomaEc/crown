diff -x evaluation.csv -x target -x Cargo.lock -ruN test/buffer/Cargo.toml ready/buffer/Cargo.toml
--- test/buffer/Cargo.toml	2023-04-26 13:09:44.000000000 +0100
+++ ready/buffer/Cargo.toml	2023-04-26 13:14:03.000000000 +0100
@@ -9,9 +9,8 @@
 edition = "2018"
 autobins = false
 
-[lib]
-name = "buffer_rs"
+[[bin]]
+name = "test"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/buffer/lib.rs ready/buffer/lib.rs
--- test/buffer/lib.rs	2023-04-26 13:09:44.000000000 +0100
+++ ready/buffer/lib.rs	2023-04-26 13:13:33.000000000 +0100
@@ -18,3 +18,7 @@
 pub mod buffer;
 pub mod test;
 } // mod src
+
+fn main() {
+    unsafe { ::std::process::exit(src::test::main_0() as i32) }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/buffer/src/test.rs ready/buffer/src/test.rs
--- test/buffer/src/test.rs	2023-04-26 13:09:44.000000000 +0100
+++ ready/buffer/src/test.rs	2023-04-26 13:13:12.000000000 +0100
@@ -629,7 +629,7 @@
     );
     crate::src::buffer::buffer_free(buf);
 }
-unsafe fn main_0() -> libc::c_int {
+pub unsafe fn main_0() -> libc::c_int {
     test_buffer_new();
     test_buffer_new_with_size();
     test_buffer_append();
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/genann/Cargo.toml ready/genann/Cargo.toml
--- test/genann/Cargo.toml	2023-04-26 13:10:21.000000000 +0100
+++ ready/genann/Cargo.toml	2023-04-26 13:15:17.000000000 +0100
@@ -9,9 +9,8 @@
 edition = "2018"
 autobins = false
 
-[lib]
-name = "genann_rs"
+[[bin]]
+name = "test"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/genann/lib.rs ready/genann/lib.rs
--- test/genann/lib.rs	2023-04-26 13:10:21.000000000 +0100
+++ ready/genann/lib.rs	2023-04-26 13:15:02.000000000 +0100
@@ -23,3 +23,23 @@
 pub mod genann;
 pub mod test;
 } // mod src
+
+fn main() {
+    let mut args: Vec::<*mut libc::c_char> = Vec::new();
+    for arg in ::std::env::args() {
+        args.push(
+            (::std::ffi::CString::new(arg))
+                .expect("Failed to convert argument into CString.")
+                .into_raw(),
+        );
+    }
+    args.push(::std::ptr::null_mut());
+    unsafe {
+        ::std::process::exit(
+            src::test::main_0(
+                (args.len() - 1) as libc::c_int,
+                args.as_mut_ptr() as *mut *mut libc::c_char,
+            ) as i32,
+        )
+    }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/genann/src/test.rs ready/genann/src/test.rs
--- test/genann/src/test.rs	2023-04-26 13:10:21.000000000 +0100
+++ ready/genann/src/test.rs	2023-04-26 13:14:53.000000000 +0100
@@ -791,7 +791,7 @@
         i+= d;
     }
 }
-unsafe fn main_0(
+pub unsafe fn main_0(
     mut argc: libc::c_int,
     mut argv: *mut *mut libc::c_char,
 ) -> libc::c_int {
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/libtree/Cargo.toml ready/libtree/Cargo.toml
--- test/libtree/Cargo.toml	2023-04-26 13:11:23.000000000 +0100
+++ ready/libtree/Cargo.toml	2023-04-26 13:16:28.000000000 +0100
@@ -9,9 +9,9 @@
 edition = "2018"
 autobins = false
 
-[lib]
+[[bin]]
 name = "libtree"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
+
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/libtree/lib.rs ready/libtree/lib.rs
--- test/libtree/lib.rs	2023-04-26 13:11:23.000000000 +0100
+++ ready/libtree/lib.rs	2023-04-26 13:16:04.000000000 +0100
@@ -16,3 +16,23 @@
 pub mod src {
 pub mod libtree;
 } // mod src
+
+fn main() {
+    let mut args: Vec::<*mut libc::c_char> = Vec::new();
+    for arg in ::std::env::args() {
+        args.push(
+            (::std::ffi::CString::new(arg))
+                .expect("Failed to convert argument into CString.")
+                .into_raw(),
+        );
+    }
+    args.push(::std::ptr::null_mut());
+    unsafe {
+        ::std::process::exit(
+            src::libtree::main_0(
+                (args.len() - 1) as libc::c_int,
+                args.as_mut_ptr() as *mut *mut libc::c_char,
+            ) as i32,
+        )
+    }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/libtree/src/libtree.rs ready/libtree/src/libtree.rs
--- test/libtree/src/libtree.rs	2023-04-26 13:11:23.000000000 +0100
+++ ready/libtree/src/libtree.rs	2023-04-26 13:15:51.000000000 +0100
@@ -2304,7 +2304,7 @@
     libtree_state_free(s.as_deref_mut());
     return exit_code;
 }
-unsafe fn main_0(
+pub unsafe fn main_0(
     mut argc: libc::c_int,
     mut argv: *mut *mut libc::c_char,
 ) -> libc::c_int {
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/quadtree/Cargo.toml ready/quadtree/Cargo.toml
--- test/quadtree/Cargo.toml	2023-04-26 13:11:08.000000000 +0100
+++ ready/quadtree/Cargo.toml	2023-04-26 13:17:48.000000000 +0100
@@ -9,9 +9,9 @@
 edition = "2018"
 autobins = false
 
-[lib]
-name = "quadtree_rs"
+[[bin]]
+name = "test"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
+
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/quadtree/lib.rs ready/quadtree/lib.rs
--- test/quadtree/lib.rs	2023-04-26 13:11:08.000000000 +0100
+++ ready/quadtree/lib.rs	2023-04-26 13:17:24.000000000 +0100
@@ -22,3 +22,23 @@
 } // mod src
 pub mod test;
 } // mod src
+
+fn main() {
+    let mut args: Vec::<*mut libc::c_char> = Vec::new();
+    for arg in ::std::env::args() {
+        args.push(
+            (::std::ffi::CString::new(arg))
+                .expect("Failed to convert argument into CString.")
+                .into_raw(),
+        );
+    }
+    args.push(::std::ptr::null_mut());
+    unsafe {
+        ::std::process::exit(
+            src::test::main_0(
+                (args.len() - 1) as libc::c_int,
+                args.as_mut_ptr() as *mut *const libc::c_char,
+            ) as i32,
+        )
+    }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/quadtree/src/test.rs ready/quadtree/src/test.rs
--- test/quadtree/src/test.rs	2023-04-26 13:11:08.000000000 +0100
+++ ready/quadtree/src/test.rs	2023-04-26 13:17:04.000000000 +0100
@@ -425,7 +425,7 @@
     };
     crate::src::src::point::quadtree_point_free(point);
 }
-unsafe fn main_0(
+pub unsafe fn main_0(
     mut argc: libc::c_int,
     mut argv: *mut *const libc::c_char,
 ) -> libc::c_int {
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/rgba/Cargo.toml ready/rgba/Cargo.toml
--- test/rgba/Cargo.toml	2023-04-26 13:11:16.000000000 +0100
+++ ready/rgba/Cargo.toml	2023-04-26 13:18:54.000000000 +0100
@@ -9,9 +9,9 @@
 edition = "2018"
 autobins = false
 
-[lib]
-name = "rgba_rs"
+[[bin]]
+name = "test"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
+
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/rgba/lib.rs ready/rgba/lib.rs
--- test/rgba/lib.rs	2023-04-26 13:11:16.000000000 +0100
+++ ready/rgba/lib.rs	2023-04-26 13:18:39.000000000 +0100
@@ -19,3 +19,23 @@
 } // mod src
 pub mod test;
 } // mod src
+
+fn main() {
+    let mut args: Vec::<*mut libc::c_char> = Vec::new();
+    for arg in ::std::env::args() {
+        args.push(
+            (::std::ffi::CString::new(arg))
+                .expect("Failed to convert argument into CString.")
+                .into_raw(),
+        );
+    }
+    args.push(::std::ptr::null_mut());
+    unsafe {
+        ::std::process::exit(
+            src::test::main_0(
+                (args.len() - 1) as libc::c_int,
+                args.as_mut_ptr() as *mut *mut libc::c_char,
+            ) as i32,
+        )
+    }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/rgba/src/test.rs ready/rgba/src/test.rs
--- test/rgba/src/test.rs	2023-04-26 13:11:16.000000000 +0100
+++ ready/rgba/src/test.rs	2023-04-26 13:18:12.000000000 +0100
@@ -244,7 +244,7 @@
         );
     };
 }
-unsafe fn main_0(
+pub unsafe fn main_0(
     mut argc: libc::c_int,
     mut argv: *mut *mut libc::c_char,
 ) -> libc::c_int {
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/urlparser/Cargo.toml ready/urlparser/Cargo.toml
--- test/urlparser/Cargo.toml	2023-04-26 13:11:00.000000000 +0100
+++ ready/urlparser/Cargo.toml	2023-04-26 13:19:44.000000000 +0100
@@ -9,9 +9,9 @@
 edition = "2018"
 autobins = false
 
-[lib]
-name = "urlparser_rs"
+[[bin]]
+name = "test"
 path = "lib.rs"
-crate-type = ["staticlib", "rlib"]
+
 [dependencies]
 libc= "0.2"
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/urlparser/lib.rs ready/urlparser/lib.rs
--- test/urlparser/lib.rs	2023-04-26 13:11:00.000000000 +0100
+++ ready/urlparser/lib.rs	2023-04-26 13:19:33.000000000 +0100
@@ -16,3 +16,7 @@
 pub mod src {
 pub mod test;
 } // mod src
+
+pub fn main() {
+    unsafe { ::std::process::exit(src::test::main_0() as i32) }
+}
diff -x evaluation.csv -x target -x Cargo.lock -ruN test/urlparser/src/test.rs ready/urlparser/src/test.rs
--- test/urlparser/src/test.rs	2023-04-26 13:11:00.000000000 +0100
+++ ready/urlparser/src/test.rs	2023-04-26 13:19:21.000000000 +0100
@@ -712,7 +712,7 @@
     }else { (); }
     return hash;
 }
-unsafe fn main_0() -> libc::c_int {
+pub unsafe fn main_0() -> libc::c_int {
     let mut gh_url = b"git://git@github.com:jwerle/url.h.git\0" as *const u8
         as *const libc::c_char as *mut libc::c_char;
     let mut url = b"http://user:pass@subdomain.host.com:8080/p/a/t/h?query=string#hash\0"

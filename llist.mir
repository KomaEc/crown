fn src::llist::push(_1: *mut *mut src::llist::Node, _2: i32) -> () {
    debug head_ref => _1;                // in scope 0 at workspace/llist/src/llist.rs:17:31: 17:43
    debug new_data => _2;                // in scope 0 at workspace/llist/src/llist.rs:18:31: 18:43
    let mut _0: ();                      // return place in scope 0 at workspace/llist/src/llist.rs:18:50: 18:50
    let mut _3: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:20:9: 20:21
    let mut _4: *mut libc::c_void;       // in scope 0 at workspace/llist/src/llist.rs:21:9: 21:63
    let mut _5: u64;                     // in scope 0 at workspace/llist/src/llist.rs:21:16: 21:62
    let mut _6: usize;                   // in scope 0 at workspace/llist/src/llist.rs:21:16: 21:45
    let mut _7: i32;                     // in scope 0 at workspace/llist/src/llist.rs:23:24: 23:32
    let mut _8: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:25:24: 25:33
    let mut _9: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:27:17: 27:25
    scope 1 {
        debug new_node => _3;            // in scope 1 at workspace/llist/src/llist.rs:20:9: 20:21
    }

    bb0: {
        _6 = std::mem::size_of::<src::llist::Node>() -> bb1; // scope 0 at workspace/llist/src/llist.rs:21:16: 21:45
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:21:16: 21:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::llist::Node>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6 as u64 (Misc);      // scope 0 at workspace/llist/src/llist.rs:21:16: 21:62
        _4 = src::llist::malloc(move _5) -> bb2; // scope 0 at workspace/llist/src/llist.rs:21:9: 21:63
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:21:9: 21:15
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::llist::malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _4 as *mut src::llist::Node (Misc); // scope 0 at workspace/llist/src/llist.rs:21:9: 21:76
        _7 = _2;                         // scope 1 at workspace/llist/src/llist.rs:23:24: 23:32
        ((*_3).0: i32) = move _7;        // scope 1 at workspace/llist/src/llist.rs:23:5: 23:32
        _8 = (*_1);                      // scope 1 at workspace/llist/src/llist.rs:25:24: 25:33
        ((*_3).1: *mut src::llist::Node) = move _8; // scope 1 at workspace/llist/src/llist.rs:25:5: 25:33
        _9 = _3;                         // scope 1 at workspace/llist/src/llist.rs:27:17: 27:25
        (*_1) = move _9;                 // scope 1 at workspace/llist/src/llist.rs:27:5: 27:25
        return;                          // scope 0 at workspace/llist/src/llist.rs:28:2: 28:2
    }
}
fn src::llist::insertAfter(_1: *mut src::llist::Node, _2: i32) -> () {
    debug prev_node => _1;               // in scope 0 at workspace/llist/src/llist.rs:31:38: 31:51
    debug new_data => _2;                // in scope 0 at workspace/llist/src/llist.rs:32:38: 32:50
    let mut _0: ();                      // return place in scope 0 at workspace/llist/src/llist.rs:32:57: 32:57
    let mut _3: bool;                    // in scope 0 at workspace/llist/src/llist.rs:34:8: 34:27
    let mut _4: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:34:8: 34:17
    let mut _5: bool;                    // in scope 0 at workspace/llist/src/llist.rs:34:53: 34:76
    let mut _6: usize;                   // in scope 0 at workspace/llist/src/llist.rs:34:53: 34:71
    let mut _7: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:34:53: 34:62
    let _8: i32;                         // in scope 0 at workspace/llist/src/llist.rs:35:9: 36:40
    let mut _9: *const i8;               // in scope 0 at workspace/llist/src/llist.rs:35:16: 36:39
    let mut _10: *const u8;              // in scope 0 at workspace/llist/src/llist.rs:35:16: 35:74
    let mut _11: *const [u8; 39];        // in scope 0 at workspace/llist/src/llist.rs:35:16: 35:61
    let _12: &[u8; 39];                  // in scope 0 at workspace/llist/src/llist.rs:35:16: 35:61
    let mut _13: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:40:9: 40:21
    let mut _14: *mut libc::c_void;      // in scope 0 at workspace/llist/src/llist.rs:41:9: 41:63
    let mut _15: u64;                    // in scope 0 at workspace/llist/src/llist.rs:41:16: 41:62
    let mut _16: usize;                  // in scope 0 at workspace/llist/src/llist.rs:41:16: 41:45
    let mut _17: i32;                    // in scope 0 at workspace/llist/src/llist.rs:43:24: 43:32
    let mut _18: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:45:24: 45:41
    let mut _19: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:47:25: 47:33
    scope 1 {
        debug new_node => _13;           // in scope 1 at workspace/llist/src/llist.rs:40:9: 40:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at workspace/llist/src/llist.rs:34:8: 34:17
        _3 = std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null(move _4) -> bb1; // scope 0 at workspace/llist/src/llist.rs:34:8: 34:27
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:34:18: 34:25
                                         // + literal: Const { ty: fn(*mut src::llist::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 0 at workspace/llist/src/llist.rs:34:8: 34:27
    }

    bb2: {
        _7 = _1;                         // scope 0 at workspace/llist/src/llist.rs:34:53: 34:62
        _6 = move _7 as usize (PointerExposeAddress); // scope 0 at workspace/llist/src/llist.rs:34:53: 34:71
        _5 = Eq(move _6, const 0_usize); // scope 0 at workspace/llist/src/llist.rs:34:53: 34:76
        assume(move _5);                 // scope 0 at workspace/llist/src/llist.rs:34:29: 34:77
        _12 = const b"the given previous node cannot be NULL\x00"; // scope 0 at workspace/llist/src/llist.rs:35:16: 35:61
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:35:16: 35:61
                                         // + literal: Const { ty: &[u8; 39], val: Value(Scalar(alloc3)) }
        _11 = &raw const (*_12);         // scope 0 at workspace/llist/src/llist.rs:35:16: 35:61
        _10 = move _11 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at workspace/llist/src/llist.rs:35:16: 35:74
        _9 = move _10 as *const i8 (Misc); // scope 0 at workspace/llist/src/llist.rs:35:16: 36:39
        _8 = src::llist::printf(move _9) -> bb6; // scope 0 at workspace/llist/src/llist.rs:35:9: 36:40
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:35:9: 35:15
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, ...) -> i32 {src::llist::printf}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = std::mem::size_of::<src::llist::Node>() -> bb4; // scope 0 at workspace/llist/src/llist.rs:41:16: 41:45
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:41:16: 41:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::llist::Node>}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = move _16 as u64 (Misc);    // scope 0 at workspace/llist/src/llist.rs:41:16: 41:62
        _14 = src::llist::malloc(move _15) -> bb5; // scope 0 at workspace/llist/src/llist.rs:41:9: 41:63
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:41:9: 41:15
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::llist::malloc}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = move _14 as *mut src::llist::Node (Misc); // scope 0 at workspace/llist/src/llist.rs:41:9: 41:76
        _17 = _2;                        // scope 1 at workspace/llist/src/llist.rs:43:24: 43:32
        ((*_13).0: i32) = move _17;      // scope 1 at workspace/llist/src/llist.rs:43:5: 43:32
        _18 = ((*_1).1: *mut src::llist::Node); // scope 1 at workspace/llist/src/llist.rs:45:24: 45:41
        ((*_13).1: *mut src::llist::Node) = move _18; // scope 1 at workspace/llist/src/llist.rs:45:5: 45:41
        _19 = _13;                       // scope 1 at workspace/llist/src/llist.rs:47:25: 47:33
        ((*_1).1: *mut src::llist::Node) = move _19; // scope 1 at workspace/llist/src/llist.rs:47:5: 47:33
        goto -> bb6;                     // scope 0 at workspace/llist/src/llist.rs:48:2: 48:2
    }

    bb6: {
        return;                          // scope 0 at workspace/llist/src/llist.rs:48:2: 48:2
    }
}

alloc3 (size: 39, align: 1) {
    0x00 │ 74 68 65 20 67 69 76 65 6e 20 70 72 65 76 69 6f │ the given previo
    0x10 │ 75 73 20 6e 6f 64 65 20 63 61 6e 6e 6f 74 20 62 │ us node cannot b
    0x20 │ 65 20 4e 55 4c 4c 00                            │ e NULL.
}
fn src::llist::append(_1: *mut *mut src::llist::Node, _2: i32) -> () {
    debug head_ref => _1;                // in scope 0 at workspace/llist/src/llist.rs:51:33: 51:45
    debug new_data => _2;                // in scope 0 at workspace/llist/src/llist.rs:52:33: 52:45
    let mut _0: ();                      // return place in scope 0 at workspace/llist/src/llist.rs:52:52: 52:52
    let mut _3: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:54:9: 54:21
    let mut _4: *mut libc::c_void;       // in scope 0 at workspace/llist/src/llist.rs:55:9: 55:63
    let mut _5: u64;                     // in scope 0 at workspace/llist/src/llist.rs:55:16: 55:62
    let mut _6: usize;                   // in scope 0 at workspace/llist/src/llist.rs:55:16: 55:45
    let mut _7: i32;                     // in scope 0 at workspace/llist/src/llist.rs:59:24: 59:32
    let mut _8: bool;                    // in scope 0 at workspace/llist/src/llist.rs:64:8: 64:29
    let mut _9: *mut src::llist::Node;   // in scope 0 at workspace/llist/src/llist.rs:64:8: 64:19
    let mut _10: bool;                   // in scope 0 at workspace/llist/src/llist.rs:64:55: 64:78
    let mut _11: usize;                  // in scope 0 at workspace/llist/src/llist.rs:64:55: 64:73
    let mut _12: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:64:55: 64:64
    let mut _13: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:64:93: 64:101
    let mut _15: bool;                   // in scope 0 at workspace/llist/src/llist.rs:67:11: 67:34
    let mut _16: bool;                   // in scope 0 at workspace/llist/src/llist.rs:67:12: 67:34
    let mut _17: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:67:12: 67:24
    let mut _18: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:67:44: 67:56
    let mut _19: bool;                   // in scope 0 at workspace/llist/src/llist.rs:67:82: 67:108
    let mut _20: usize;                  // in scope 0 at workspace/llist/src/llist.rs:67:82: 67:103
    let mut _21: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:67:82: 67:94
    let mut _22: *mut src::llist::Node;  // in scope 0 at workspace/llist/src/llist.rs:69:20: 69:28
    scope 1 {
        debug new_node => _3;            // in scope 1 at workspace/llist/src/llist.rs:54:9: 54:21
        let mut _14: *mut src::llist::Node; // in scope 1 at workspace/llist/src/llist.rs:65:9: 65:17
        scope 2 {
            debug last => _14;           // in scope 2 at workspace/llist/src/llist.rs:65:9: 65:17
        }
    }

    bb0: {
        _6 = std::mem::size_of::<src::llist::Node>() -> bb1; // scope 0 at workspace/llist/src/llist.rs:55:16: 55:45
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:55:16: 55:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<src::llist::Node>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6 as u64 (Misc);      // scope 0 at workspace/llist/src/llist.rs:55:16: 55:62
        _4 = src::llist::malloc(move _5) -> bb2; // scope 0 at workspace/llist/src/llist.rs:55:9: 55:63
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:55:9: 55:15
                                         // + literal: Const { ty: unsafe extern "C" fn(u64) -> *mut libc::c_void {src::llist::malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _4 as *mut src::llist::Node (Misc); // scope 0 at workspace/llist/src/llist.rs:55:9: 56:22
        _7 = _2;                         // scope 1 at workspace/llist/src/llist.rs:59:24: 59:32
        ((*_3).0: i32) = move _7;        // scope 1 at workspace/llist/src/llist.rs:59:5: 59:32
        ((*_3).1: *mut src::llist::Node) = const 0_usize as *mut src::llist::Node (PointerFromExposedAddress); // scope 1 at workspace/llist/src/llist.rs:62:5: 62:38
        _9 = (*_1);                      // scope 1 at workspace/llist/src/llist.rs:64:8: 64:19
        _8 = std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null(move _9) -> bb3; // scope 1 at workspace/llist/src/llist.rs:64:8: 64:29
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:64:20: 64:27
                                         // + literal: Const { ty: fn(*mut src::llist::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _8) -> [false: bb5, otherwise: bb4]; // scope 1 at workspace/llist/src/llist.rs:64:8: 64:29
    }

    bb4: {
        _12 = (*_1);                     // scope 1 at workspace/llist/src/llist.rs:64:55: 64:64
        _11 = move _12 as usize (PointerExposeAddress); // scope 1 at workspace/llist/src/llist.rs:64:55: 64:73
        _10 = Eq(move _11, const 0_usize); // scope 1 at workspace/llist/src/llist.rs:64:55: 64:78
        assume(move _10);                // scope 1 at workspace/llist/src/llist.rs:64:31: 64:79
        _13 = _3;                        // scope 1 at workspace/llist/src/llist.rs:64:93: 64:101
        (*_1) = move _13;                // scope 1 at workspace/llist/src/llist.rs:64:81: 64:101
        goto -> bb10;                    // scope 0 at workspace/llist/src/llist.rs:70:2: 70:2
    }

    bb5: {
        _14 = (*_1);                     // scope 1 at workspace/llist/src/llist.rs:65:20: 65:29
        goto -> bb6;                     // scope 2 at workspace/llist/src/llist.rs:67:5: 67:58
    }

    bb6: {
        _17 = ((*_14).1: *mut src::llist::Node); // scope 2 at workspace/llist/src/llist.rs:67:12: 67:24
        _16 = std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null(move _17) -> bb7; // scope 2 at workspace/llist/src/llist.rs:67:12: 67:34
                                         // mir::Constant
                                         // + span: workspace/llist/src/llist.rs:67:25: 67:32
                                         // + literal: Const { ty: fn(*mut src::llist::Node) -> bool {std::ptr::mut_ptr::<impl *mut src::llist::Node>::is_null}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = Not(move _16);             // scope 2 at workspace/llist/src/llist.rs:67:11: 67:34
        switchInt(move _15) -> [false: bb9, otherwise: bb8]; // scope 2 at workspace/llist/src/llist.rs:67:11: 67:34
    }

    bb8: {
        _18 = ((*_14).1: *mut src::llist::Node); // scope 2 at workspace/llist/src/llist.rs:67:44: 67:56
        _14 = move _18;                  // scope 2 at workspace/llist/src/llist.rs:67:37: 67:56
        goto -> bb6;                     // scope 2 at workspace/llist/src/llist.rs:67:5: 67:58
    }

    bb9: {
        _21 = ((*_14).1: *mut src::llist::Node); // scope 2 at workspace/llist/src/llist.rs:67:82: 67:94
        _20 = move _21 as usize (PointerExposeAddress); // scope 2 at workspace/llist/src/llist.rs:67:82: 67:103
        _19 = Eq(move _20, const 0_usize); // scope 2 at workspace/llist/src/llist.rs:67:82: 67:108
        assume(move _19);                // scope 2 at workspace/llist/src/llist.rs:67:58: 67:109
        _22 = _3;                        // scope 2 at workspace/llist/src/llist.rs:69:20: 69:28
        ((*_14).1: *mut src::llist::Node) = move _22; // scope 2 at workspace/llist/src/llist.rs:69:5: 69:28
        goto -> bb10;                    // scope 0 at workspace/llist/src/llist.rs:70:2: 70:2
    }

    bb10: {
        return;                          // scope 0 at workspace/llist/src/llist.rs:70:2: 70:2
    }
}
